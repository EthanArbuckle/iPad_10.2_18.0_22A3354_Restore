void sub_196E1DFA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  if (*(_BYTE *)(v42 - 104))
  {
    if (*(_BYTE *)(v42 - 112))
    {
      v44 = *(WTF::StringImpl **)(v42 - 120);
      *(_QWORD *)(v42 - 120) = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, a2);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
  }
  if (*(_BYTE *)(v42 - 88))
  {
    v45 = *(WTF::StringImpl **)(v42 - 96);
    *(_QWORD *)(v42 - 96) = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, a2);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  __int16 v4;
  char *result;

  v2 = a2;
  v4 = *(_WORD *)a2;
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, v2 + 1);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, v2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 11);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 21);
  LOBYTE(v2) = *((_BYTE *)v2 + 176);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  BOOL i;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  WTF::StringImpl *v39;
  BOOL v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  char v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  char v50;
  WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;

  v4 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>(a1);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v60);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v57);
  IPC::Decoder::decode<WTF::URL>(a1, &v53);
  IPC::Decoder::decode<WTF::String>(a1, &v51);
  IPC::Decoder::decode<WTF::URL>(a1, &v47);
  IPC::Decoder::decode<WTF::URL>(a1, &v43);
  IPC::Decoder::decode<WTF::String>(a1, &v41);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_57;
  v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v22 = v5;
    v23 = 0;
    goto LABEL_58;
  }
  v9 = *v8;
  if (v9 > 1)
    goto LABEL_59;
  v10 = 0;
  for (i = v9 != 0; ; i = 0)
  {
    if (HIWORD(v4))
    {
      LOWORD(v26) = v4;
      if (v62)
      {
        *((_QWORD *)&v26 + 1) = v60;
        LOBYTE(v27) = v61;
        if (v59)
        {
          *((_QWORD *)&v27 + 1) = v57;
          v28 = v58;
          if (v56)
          {
            v12 = v53;
            v53 = 0;
            v29 = v12;
            v30 = v54;
            v31 = v55;
            LODWORD(v54) = v54 & 0xFFFFFFFE;
            if (v52)
            {
              v13 = v51;
              v51 = 0;
              v32 = v13;
              if (v50)
              {
                v14 = v47;
                v47 = 0;
                v33 = v14;
                v34 = v48;
                v35 = v49;
                LODWORD(v48) = v48 & 0xFFFFFFFE;
                if (v46)
                {
                  v15 = v43;
                  v43 = 0;
                  v36 = v15;
                  v37 = v44;
                  v38 = v45;
                  LODWORD(v44) = v44 & 0xFFFFFFFE;
                  if (v42)
                  {
                    v16 = v41;
                    v41 = 0;
                    v39 = v16;
                    if (!v10)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_57:
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
LABEL_58:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
        v6 = (WTF::StringImpl *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_59:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result
      || !v5
      || (result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v6), !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 184) = 0;
      goto LABEL_30;
    }
    v10 = 1;
  }
  v40 = i;
  *(_OWORD *)a2 = v26;
  *(_OWORD *)(a2 + 16) = v27;
  *(_BYTE *)(a2 + 32) = v28;
  WTF::URL::URL(a2 + 40, (uint64_t *)&v29);
  v17 = v32;
  v32 = 0;
  *(_QWORD *)(a2 + 80) = v17;
  WTF::URL::URL(a2 + 88, (uint64_t *)&v33);
  WTF::URL::URL(a2 + 128, (uint64_t *)&v36);
  v18 = v36;
  *(_QWORD *)(a2 + 168) = v39;
  *(_BYTE *)(a2 + 176) = v40;
  *(_BYTE *)(a2 + 184) = 1;
  v39 = 0;
  v36 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v6);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v33;
  v33 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v6);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_30:
  if (v42)
  {
    result = v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v46)
  {
    result = v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v50)
  {
    result = v47;
    v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v52)
  {
    result = v51;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v56)
  {
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E1E620(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,char a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  if (a34 && a33)
  {
    if (*(_DWORD *)a33 == 2)
      WTF::StringImpl::destroy(a33, a2);
    else
      *(_DWORD *)a33 -= 2;
  }
  if (a40 && a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, a2);
    else
      *(_DWORD *)a35 -= 2;
  }
  if (*(_BYTE *)(v40 - 168))
  {
    v42 = *(WTF::StringImpl **)(v40 - 208);
    *(_QWORD *)(v40 - 208) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, a2);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  if (*(_BYTE *)(v40 - 152))
  {
    v43 = *(WTF::StringImpl **)(v40 - 160);
    *(_QWORD *)(v40 - 160) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, a2);
      else
        *(_DWORD *)v43 -= 2;
    }
  }
  if (*(_BYTE *)(v40 - 104))
  {
    v44 = *(WTF::StringImpl **)(v40 - 144);
    *(_QWORD *)(v40 - 144) = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, a2);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2);
  IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 200));
  v4 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 224);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 232));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unsigned __int16 v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  _BYTE v17[184];
  _BYTE v18[25];
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  _BYTE v29[184];
  char v30;
  WTF::StringImpl *v31;
  char v32;
  char v33;

  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v31);
  IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(a1, v29);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v26);
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  result = IPC::Decoder::decode<WTF::URL>(a1, &v22);
  if (!*a1)
    goto LABEL_36;
  if (!v33)
    goto LABEL_35;
  LOBYTE(v15) = 0;
  v16 = 0;
  if (v32)
  {
    v10 = v31;
    v31 = 0;
    v15 = v10;
    v16 = 1;
  }
  if (!v30
    || (result = (WTF::StringImpl *)std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v17, (uint64_t)v29), !v28)|| (*(_QWORD *)v18 = v26, v18[8] = v27, !v6)|| (*(_QWORD *)&v18[16] = v4, v7 <= 0xFFu)|| (v18[24] = v7, !v25))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 272) = 0;
    goto LABEL_21;
  }
  v11 = v22;
  v22 = 0;
  v19 = v11;
  v20 = v23;
  v21 = v24;
  LODWORD(v23) = v23 & 0xFFFFFFFE;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v16)
  {
    v12 = v15;
    v15 = 0;
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = 1;
  }
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 16), (uint64_t)v17);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 209) = *(_OWORD *)&v18[9];
  WTF::URL::URL(a2 + 232, (uint64_t *)&v19);
  *(_BYTE *)(a2 + 272) = 1;
  v14 = v19;
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v13);
  if (v16)
  {
    result = v15;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
LABEL_21:
  if (v25)
  {
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v30)
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v9);
  if (v33)
  {
    if (v32)
    {
      result = v31;
      v31 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196E1EB50(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  BOOL v60;
  WTF::StringImpl *v61;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v54, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v52, v57);
  if (a38)
  {
    if (*(_DWORD *)a38 == 2)
      WTF::StringImpl::destroy(a38, v58);
    else
      *(_DWORD *)a38 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v53, v58);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v59);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a48 && a43)
  {
    if (*(_DWORD *)a43 == 2)
      WTF::StringImpl::destroy(a43, v59);
    else
      *(_DWORD *)a43 -= 2;
  }
  if (LOBYTE(STACK[0x210]))
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a52, v59);
  if (*(_BYTE *)(v55 - 56))
    v60 = *(_BYTE *)(v55 - 64) == 0;
  else
    v60 = 1;
  if (!v60)
  {
    v61 = *(WTF::StringImpl **)(v55 - 72);
    *(_QWORD *)(v55 - 72) = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v59);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[184])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E1ECB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 184))
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WTF::URL>,void>::encode<IPC::Encoder,std::optional<WTF::URL> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2 + 64);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 96));
  IPC::ArgumentCoder<std::optional<CGSize>,void>::encode<IPC::Encoder,std::optional<CGSize> const&>(a1, a2 + 112);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 136));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 152));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 154));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 156));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 158));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 160));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 162));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 164));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 166));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 168));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  __n128 v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *result;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  _BYTE v41[15];
  char v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  WTF::StringImpl *v63;
  char v64;
  char v65;
  _QWORD v66[5];
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  _QWORD v72[4];

  v72[2] = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v69);
  IPC::Decoder::decode<std::optional<WTF::URL>>(v66, a1, v3);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v63);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v60);
  IPC::Decoder::decode<std::optional<unsigned long>>(a1, &v57);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_9;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v10 = v5;
    v11 = 0;
LABEL_9:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v6);
    goto LABEL_11;
  }
  if (v9)
  {
    IPC::Decoder::decode<CGSize>((uint64_t)&v31, a1, v4);
    if ((_BYTE)v32)
    {
      v30 = v31;
      v72[0] = *(_QWORD *)((char *)&v31 + 1);
      *(_QWORD *)((char *)v72 + 7) = *((_QWORD *)&v31 + 1);
      v28 = 1;
      goto LABEL_13;
    }
LABEL_11:
    v15 = (WTF::StringImpl *)*a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_56;
    goto LABEL_12;
  }
  v30 = 0;
  v28 = 0;
  while (1)
  {
LABEL_13:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v54);
    v18 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v19 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v20 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v21 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v22 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v23 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v24 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v25 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<BOOL>>(a1);
    if (!*a1)
    {
      *a2 = 0;
      a2[176] = 0;
      goto LABEL_42;
    }
    if (v71)
    {
      *(_QWORD *)&v31 = v69;
      BYTE8(v31) = v70;
      if (v68)
      {
        v26 = (int)result;
        result = (WTF::StringImpl *)std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](&v32, (uint64_t)v66);
        if (v65)
        {
          LOBYTE(v34) = 0;
          v35 = 0;
          if (v64)
          {
            v27 = v63;
            v63 = 0;
            v34 = v27;
            v35 = 1;
          }
          if (v62)
          {
            v36 = v60;
            v37 = v61;
            if (v59)
            {
              v38 = v57;
              v39 = v58;
              if (!HIDWORD(v30))
              {
                v40 = v30;
                *(_QWORD *)v41 = v72[0];
                *(_QWORD *)&v41[7] = *(_QWORD *)((char *)v72 + 7);
                v42 = v28;
                if (v56)
                {
                  v43 = v54;
                  v44 = v55;
                  if ((v18 & 0xFF0000) != 0)
                  {
                    v45 = v18;
                    if ((v19 & 0xFF0000) != 0)
                    {
                      v46 = v19;
                      if ((v20 & 0xFF0000) != 0)
                      {
                        v47 = v20;
                        if ((v21 & 0xFF0000) != 0)
                        {
                          v48 = v21;
                          if ((v22 & 0xFF0000) != 0)
                          {
                            v49 = v22;
                            if ((v23 & 0xFF0000) != 0)
                            {
                              v50 = v23;
                              if ((v24 & 0xFF0000) != 0)
                              {
                                v51 = v24;
                                if ((v25 & 0xFF0000) != 0)
                                {
                                  v52 = v25;
                                  if ((v26 & 0xFF0000) != 0)
                                    break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_56:
    if (v16)
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v15);
LABEL_12:
    v30 = 0x100000000;
  }
  v53 = v26;
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)a2, (uint64_t)&v31);
  if (v35)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v33)
  {
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_42:
  if (v65)
  {
    if (v64)
    {
      result = v63;
      v63 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v68)
  {
    if (v67)
    {
      result = (WTF::StringImpl *)v66[0];
      v66[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196E1F23C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22)
{
  uint64_t v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  if (*(_BYTE *)(v22 - 200))
  {
    if (*(_BYTE *)(v22 - 208))
    {
      v24 = *(WTF::StringImpl **)(v22 - 216);
      *(_QWORD *)(v22 - 216) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
  }
  if (*(_BYTE *)(v22 - 144))
  {
    if (*(_BYTE *)(v22 - 152))
    {
      v25 = *(WTF::StringImpl **)(v22 - 192);
      *(_QWORD *)(v22 - 192) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<std::optional<unsigned long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<unsigned long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2 + 24);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 56));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 58));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 60));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 80));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 82));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 84));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 86));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 88));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 90));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 92));
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[22];
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  unsigned __int8 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  char v61;

  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v58, a1);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v55);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v52);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_47;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v30 = v4;
    v31 = 0;
    goto LABEL_48;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_49;
  if (v8)
  {
    v9 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
    v10 = (v9 > 0xFFu) << 16;
    if ((v9 & 0xFF00) != 0)
      v11 = v9;
    else
      v11 = 0;
    v38 = 256;
    v39 = v11;
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v10 = 0x10000;
  }
  while (1)
  {
    v40 = v10;
    if (!HIWORD(v10))
    {
      v35 = *a1;
      v36 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37)
      {
        if (v36)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      }
    }
    v12 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v13 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    IPC::Decoder::decode<std::optional<unsigned long>>(a1, &v49);
    v14 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v15 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v16 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v17 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v18 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v19 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 96) = 0;
      goto LABEL_36;
    }
    if (v61)
    {
      LOBYTE(v41) = 0;
      v43 = 0;
      v24 = v60;
      if (v60)
      {
        v41 = v58;
        v22 = v59;
        v23 = HIDWORD(v59);
        v58 = 0;
        v59 = 0;
        v42 = __PAIR64__(v23, v22);
        v43 = 1;
      }
      if (v57)
      {
        LOBYTE(v44) = 0;
        v45 = 0;
        v25 = v56;
        if (v56)
        {
          v26 = v55;
          v55 = 0;
          v44 = v26;
          v45 = 1;
        }
        if (v54)
        {
          *(_QWORD *)&v46 = v52;
          BYTE8(v46) = v53;
          if ((v39 | v40 | v38) >> 16)
          {
            LOWORD(v47) = v39 | v40 | v38;
            if ((v12 & 0xFF0000) != 0)
            {
              WORD1(v47) = v12;
              if ((v13 & 0xFF0000) != 0)
              {
                WORD2(v47) = v13;
                if (v51)
                {
                  *((_QWORD *)&v47 + 1) = v49;
                  v48[0] = v50;
                  if ((v14 & 0xFF0000) != 0)
                  {
                    *(_WORD *)&v48[8] = v14;
                    if ((v15 & 0xFF0000) != 0)
                    {
                      *(_WORD *)&v48[10] = v15;
                      if ((v16 & 0xFF0000) != 0)
                      {
                        *(_WORD *)&v48[12] = v16;
                        if ((v17 & 0xFF0000) != 0)
                        {
                          *(_WORD *)&v48[14] = v17;
                          if ((v18 & 0xFF0000) != 0)
                          {
                            *(_WORD *)&v48[16] = v18;
                            if ((v19 & 0xFF0000) != 0)
                            {
                              *(_WORD *)&v48[18] = v19;
                              if ((result & 0xFF0000) != 0)
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_47:
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
LABEL_48:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v5);
    v10 = 0;
    v38 = 0;
    v39 = 0;
  }
  *(_WORD *)&v48[20] = result;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v24)
  {
    v27 = v41;
    v41 = 0;
    v42 = 0;
    *(_QWORD *)a2 = v27;
    *(_DWORD *)(a2 + 8) = v22;
    *(_DWORD *)(a2 + 12) = v23;
    *(_BYTE *)(a2 + 16) = 1;
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v25)
  {
    v28 = v44;
    v44 = 0;
    *(_QWORD *)(a2 + 24) = v28;
    *(_BYTE *)(a2 + 32) = 1;
  }
  v29 = v47;
  *(_OWORD *)(a2 + 40) = v46;
  *(_OWORD *)(a2 + 56) = v29;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v48;
  *(_QWORD *)(a2 + 86) = *(_QWORD *)&v48[14];
  *(_BYTE *)(a2 + 96) = 1;
  if (v24)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v21);
LABEL_36:
  if (v57)
  {
    if (v56)
    {
      result = v55;
      v55 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v61)
  {
    if (v60)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v21);
  }
  return result;
}

void sub_196E1F890(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  BOOL v5;

  if (*(_BYTE *)(v2 - 128))
  {
    if (*(_BYTE *)(v2 - 136))
    {
      v4 = *(WTF::StringImpl **)(v2 - 144);
      *(_QWORD *)(v2 - 144) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
  }
  if (*(_BYTE *)(v2 - 96))
    v5 = *(_BYTE *)(v2 - 104) == 0;
  else
    v5 = 1;
  if (!v5)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 120, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 18));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<std::optional<CGRect>,void>::encode<IPC::Encoder,std::optional<CGRect> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 88));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 90));
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t result;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  char v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[32];
  unint64_t v89;
  char v90;
  _BYTE v91[44];
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  uint64_t v96;
  char v97;
  char v98;
  _OWORD v99[2];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v96);
  v6 = a1[1];
  v7 = *a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    v31 = 0;
    v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v32 = *a1;
        v31 = a1[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
    goto LABEL_35;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v31 = v6;
    v32 = 0;
LABEL_35:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
        v7 = *a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_36;
  }
  v10 = *v9;
  if (v10 < 2)
  {
    if (!*v9)
    {
      v12 = 0;
      v13 = 0x10000;
      goto LABEL_13;
    }
    if (v6 <= (unint64_t)&v9[-v7 + 1])
    {
      v70 = 0;
      v71 = 0;
      *a1 = 0;
      a1[1] = 0;
      v72 = a1[3];
      if (v72)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
        v70 = 0;
        v82 = *a1;
        v83 = a1[1];
        v84 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v71 = 0;
        if (v84)
        {
          if (v83)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v82);
            v71 = *a1;
            v70 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v9 + 2);
      v11 = v9[1];
      if (v11 < 4)
      {
        v12 = v11 | 0x100;
LABEL_8:
        v13 = (v12 > 0xFF) << 16;
        if (v12 >= 0x100)
          v12 = v12;
        else
          v12 = 0;
        v10 = 256;
        goto LABEL_13;
      }
      v70 = v6;
      v71 = v7;
    }
    *a1 = 0;
    a1[1] = 0;
    v73 = a1[3];
    if (v73 && v70)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v73 + 16))(v73, v71, v70);
    v12 = 0;
    goto LABEL_8;
  }
LABEL_36:
  *a1 = 0;
  a1[1] = 0;
  v35 = a1[3];
  if (v35 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v7);
  v13 = 0;
  v12 = 0;
  v10 = 0;
LABEL_13:
  v14 = v12 | v13 | v10;
  v15 = a1[1];
  if (!HIWORD(v13))
  {
    v36 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (!v37 || !v15)
    {
      v15 = 0;
      v16 = *a1;
LABEL_40:
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v16);
          v39 = *a1;
          v15 = a1[1];
        }
        else
        {
          v39 = 0;
        }
      }
      else
      {
        v39 = 0;
        v15 = 0;
      }
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v36);
    v15 = a1[1];
  }
  v16 = *a1;
  v17 = a1[2] - *a1;
  if (v15 <= v17)
    goto LABEL_40;
  v18 = (unsigned __int8 *)(v16 + v17);
  a1[2] = (uint64_t)(v18 + 1);
  if (!v16)
  {
    v39 = 0;
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v39);
        v16 = *a1;
        v15 = a1[1];
      }
      else
      {
        v16 = 0;
      }
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    goto LABEL_44;
  }
  v19 = *v18;
  if (v19 < 2)
  {
    if (!*v18)
    {
      v21 = 0;
      v22 = 0x10000;
      goto LABEL_26;
    }
    if (v15 <= (unint64_t)&v18[-v16 + 1])
    {
      v74 = 0;
      v75 = 0;
      *a1 = 0;
      a1[1] = 0;
      v76 = a1[3];
      if (v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
        v74 = 0;
        v85 = *a1;
        v86 = a1[1];
        v87 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v75 = 0;
        if (v87)
        {
          if (v86)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v85);
            v75 = *a1;
            v74 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v18 + 2);
      v20 = v18[1];
      if (v20 < 2)
      {
        v21 = v20 | 0x100;
LABEL_21:
        v22 = (v21 > 0xFF) << 16;
        if (v21 >= 0x100)
          v21 = v21;
        else
          v21 = 0;
        v19 = 256;
        goto LABEL_26;
      }
      v74 = v15;
      v75 = v16;
    }
    *a1 = 0;
    a1[1] = 0;
    v77 = a1[3];
    if (v77 && v74)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v77 + 16))(v77, v75, v74);
    v21 = 0;
    goto LABEL_21;
  }
LABEL_44:
  *a1 = 0;
  a1[1] = 0;
  v41 = a1[3];
  if (v41 && v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v16);
  v22 = 0;
  v21 = 0;
  v19 = 0;
LABEL_26:
  v23 = v21 | v22 | v19;
  v24 = a1[1];
  if (!HIWORD(v22))
  {
    v42 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (!v43 || !v24)
    {
      v24 = 0;
      v25 = *a1;
LABEL_48:
      *a1 = 0;
      a1[1] = 0;
      v44 = a1[3];
      if (v44)
      {
        if (v24)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v25);
          v45 = *a1;
          v24 = a1[1];
        }
        else
        {
          v45 = 0;
        }
      }
      else
      {
        v45 = 0;
        v24 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v42);
    v24 = a1[1];
  }
  v25 = *a1;
  v26 = a1[2] - *a1;
  if (v24 <= v26)
    goto LABEL_48;
  v27 = (unsigned __int8 *)(v25 + v26);
  a1[2] = (uint64_t)(v27 + 1);
  if (!v25)
  {
    v45 = 0;
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v45);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v25 = 0;
      }
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    goto LABEL_52;
  }
  v28 = *v27;
  if (v28 < 2)
  {
    if (!v28)
    {
      LOBYTE(v92) = 0;
      v94 = 0;
      v95 = 1;
      goto LABEL_54;
    }
    IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v88);
    if (v88[16])
    {
      v30 = *(_QWORD *)&v88[8];
      v92 = *(_QWORD *)v88;
      *(_OWORD *)v88 = 0uLL;
      v93 = v30;
      v94 = 1;
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v29);
      v95 = 1;
      goto LABEL_54;
    }
    goto LABEL_53;
  }
LABEL_52:
  *a1 = 0;
  a1[1] = 0;
  v47 = a1[3];
  if (v47 && v24)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v25);
LABEL_53:
  LOBYTE(v92) = 0;
  v95 = 0;
  v48 = (void *)*a1;
  v49 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    goto LABEL_81;
  while (1)
  {
LABEL_54:
    v51 = a1[1];
    v52 = *a1;
    v53 = a1[2] - *a1;
    if (v51 <= v53)
    {
      v65 = 0;
      v66 = 0;
      *a1 = 0;
      a1[1] = 0;
      v67 = a1[3];
      if (v67)
      {
        if (v51)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
          v66 = *a1;
          v65 = a1[1];
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
      }
LABEL_84:
      v51 = 0;
      v52 = 0;
      *a1 = 0;
      a1[1] = 0;
      v68 = a1[3];
      if (v68)
      {
        if (v65)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
          v52 = *a1;
          v51 = a1[1];
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
      }
LABEL_85:
      *a1 = 0;
      a1[1] = 0;
      v69 = a1[3];
      if (!v69 || !v51)
        goto LABEL_96;
LABEL_87:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v52);
      goto LABEL_96;
    }
    v54 = (unsigned __int8 *)(v52 + v53);
    a1[2] = (uint64_t)(v54 + 1);
    if (!v52)
    {
      v65 = v51;
      v66 = 0;
      goto LABEL_84;
    }
    v55 = *v54;
    if (v55 >= 2)
      goto LABEL_85;
    if (!v55)
    {
      v56 = 0;
      v2 = 0;
      v57 = 0;
      goto LABEL_61;
    }
    IPC::ArgumentCoder<CGRect,void>::decode(a1, (uint64_t)v88, v5);
    if ((_BYTE)v89)
    {
      v56 = 0;
      v57 = v88[0];
      v99[0] = *(_OWORD *)&v88[1];
      *(_OWORD *)((char *)v99 + 15) = *(_OWORD *)&v88[16];
      v2 = 1;
      goto LABEL_61;
    }
    v52 = *a1;
    v78 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69 && v78)
      goto LABEL_87;
LABEL_96:
    v79 = *a1;
    v80 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v81 = a1[3];
    if (v81 && v80)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v79);
    v57 = 0;
    v56 = 1;
LABEL_61:
    v58 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 96) = 0;
      goto LABEL_76;
    }
    if (!v98)
      goto LABEL_80;
    *(_QWORD *)v88 = v96;
    v88[8] = v97;
    if (!HIWORD(v14))
      goto LABEL_80;
    *(_WORD *)&v88[16] = v14;
    if (!HIWORD(v23))
      goto LABEL_80;
    *(_WORD *)&v88[18] = v23;
    v60 = v95;
    if (!v95)
      goto LABEL_80;
    v88[24] = 0;
    v90 = 0;
    v61 = v94;
    if (!v94)
      break;
    *(_QWORD *)&v88[24] = v92;
    v60 = v93;
    v59 = HIDWORD(v93);
    v92 = 0;
    v93 = 0;
    v89 = __PAIR64__(v59, v60);
    v90 = 1;
    if (!v56)
      goto LABEL_70;
LABEL_80:
    __break(1u);
LABEL_81:
    if (v49)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v48);
  }
  if (v56)
    goto LABEL_80;
LABEL_70:
  v91[0] = v57;
  *(_OWORD *)&v91[1] = v99[0];
  v5 = *(__n128 *)((char *)v99 + 15);
  *(_OWORD *)&v91[16] = *(_OWORD *)((char *)v99 + 15);
  v91[32] = v2;
  if ((v58 & 0xFF0000) == 0)
    goto LABEL_80;
  *(_WORD *)&v91[40] = v58;
  if ((result & 0xFF0000) == 0)
    goto LABEL_80;
  *(_WORD *)&v91[42] = result;
  *(_OWORD *)a2 = *(_OWORD *)v88;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)&v88[16];
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v61)
  {
    v62 = *(_QWORD *)&v88[24];
    *(_QWORD *)&v88[24] = 0;
    v89 = 0;
    *(_QWORD *)(a2 + 24) = v62;
    *(_DWORD *)(a2 + 32) = v60;
    *(_DWORD *)(a2 + 36) = v59;
    *(_BYTE *)(a2 + 40) = 1;
    v63 = *(_OWORD *)&v91[16];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v91;
    *(_OWORD *)(a2 + 64) = v63;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v91[28];
    result = WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88[24], v48);
  }
  else
  {
    v64 = *(_OWORD *)&v91[16];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v91;
    *(_OWORD *)(a2 + 64) = v64;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v91[28];
  }
  *(_BYTE *)(a2 + 96) = 1;
LABEL_76:
  if (v95 && v94)
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v92, v48);
  return result;
}

void sub_196E2020C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if ((_BYTE)a26)
  {
    if (a24)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<IPC::SharedFileHandle,void>::encode((uint64_t)a1, (IPC::SharedFileHandle *)(a2 + 1));
  v5 = a2[4];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  _BYTE *v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t **v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[24];
  uint64_t *v22;
  char v23[24];
  char v24;
  _BYTE v25[4];
  char v26;

  v2 = a1;
  v4 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::takeLastAttachment((IPC::Decoder *)v2, v25);
  if (!*v2)
    goto LABEL_22;
  if (!v26)
    goto LABEL_21;
  IPC::SharedFileHandle::SharedFileHandle((uint64_t)&v20);
  WebCore::FileHandle::FileHandle();
  v24 = 1;
  MEMORY[0x19AEAC4F0](&v20);
  while (1)
  {
    if (v26)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v25);
    if (!v24)
    {
      v14 = *v2;
      v15 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v16 = v2[3];
      if (v16)
      {
        if (v15)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
      }
    }
    v7 = v2[1];
    v8 = *v2;
    v9 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v7 < v9 || v7 - v9 <= 7)
      break;
    v11 = (uint64_t **)(v8 + v9);
    v2[2] = (uint64_t)(v11 + 1);
    if (!v8)
    {
      v17 = v7;
      v18 = 0;
      goto LABEL_27;
    }
    v12 = 0;
    v2 = *v11;
LABEL_14:
    if (v6)
    {
      v20 = v4;
      if (v24)
      {
        v4 = v21;
        WebCore::FileHandle::FileHandle();
        if (!v12)
        {
          v22 = v2;
          *(_QWORD *)a2 = v20;
          WebCore::FileHandle::FileHandle();
          *(_QWORD *)(a2 + 32) = v22;
          *(_BYTE *)(a2 + 40) = 1;
          result = MEMORY[0x19AEAC4F0](v21);
          goto LABEL_18;
        }
      }
    }
LABEL_21:
    __break(1u);
LABEL_22:
    v23[0] = 0;
    v24 = 0;
  }
  v17 = 0;
  v18 = 0;
  *v2 = 0;
  v2[1] = 0;
  v19 = v2[3];
  if (v19)
  {
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v8, v7);
      v18 = *v2;
      v17 = v2[1];
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
  }
LABEL_27:
  *v2 = 0;
  v2[1] = 0;
  result = v2[3];
  if (result)
  {
    if (v17)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
      if (*v2)
      {
        v2 = 0;
        v12 = 1;
        goto LABEL_14;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
  if (v24)
    return MEMORY[0x19AEAC4F0](v23);
  return result;
}

void sub_196E204A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
    MEMORY[0x19AEAC4F0](&a14);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *result;

  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, a2 + 16);
  v4 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  LOBYTE(v5) = *(_BYTE *)(a2 + 136);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 140));
  LOBYTE(v5) = *(_BYTE *)(a2 + 156);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 160));
  LOBYTE(v5) = *(_BYTE *)(a2 + 176);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 177);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 178);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 179);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 180);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 181);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 182);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 183);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 184);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 185);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 186);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 187);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 192));
  v10 = *(unsigned int *)(a2 + 212);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = *(unsigned int *)(a2 + 212);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a2 + 200);
    v13 = v12 + 16 * v11;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v12);
      v14 = *(_BYTE *)(v12 + 8);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
      v15 = *(_BYTE *)(v12 + 9);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
      v16 = *(_BYTE *)(v12 + 10);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
      v17 = *(_DWORD *)(v12 + 12);
      *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v17;
      v12 += 16;
    }
    while (v12 != v13);
  }
  v18 = *(_DWORD *)(a2 + 216);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v18;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 224));
  v19 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v19;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 240));
  LOBYTE(v18) = *(_BYTE *)(a2 + 248);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 249);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 256));
  LOBYTE(v18) = *(_BYTE *)(a2 + 296);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 297);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 304));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 312));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 320));
  LOBYTE(v18) = *(_BYTE *)(a2 + 328);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 329);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 336));
  IPC::VectorArgumentCoder<false,WebCore::Color,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 344);
  LOBYTE(v18) = *(_BYTE *)(a2 + 360);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 361);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 362);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 363);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 364);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 365);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 366);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 367);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  LOBYTE(v18) = *(_BYTE *)(a2 + 368);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  v20 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v20;
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 384));
  v21 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v21;
  v22 = *(_QWORD *)(a2 + 408);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v22;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  char v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  unint64_t v102;
  unsigned __int8 *v103;
  unsigned int v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unsigned int v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned int v117;
  char v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unsigned int v121;
  char v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unsigned int v128;
  char v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unsigned int v133;
  char v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  unsigned int v138;
  char v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  unsigned int v143;
  char v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  unsigned int v148;
  char v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  char v160;
  char v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  char v167;
  char v168;
  unint64_t v169;
  char *v170;
  unsigned int v171;
  int v172;
  char v173;
  char v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  char v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  uint64_t v314;
  void *v315;
  WTF::StringImpl *result;
  WTF::StringImpl *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unsigned int v338;
  char v339;
  unsigned int v340;
  unsigned int v341;
  char v342;
  unsigned int v343;
  char v344;
  unsigned int v345;
  char v346;
  char v347;
  unsigned int v348;
  unsigned int v349;
  char v350;
  unsigned int v351;
  char v352;
  unsigned int v353;
  char v354;
  unsigned int v355;
  char v356;
  int v357;
  char v358;
  int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  unsigned int v363;
  unsigned __int16 v364;
  unsigned int v365;
  unsigned int v366;
  char v367;
  int v368;
  char v369;
  int v370;
  char v371;
  int v372;
  char v373;
  int v374;
  char v375;
  int v376;
  char v377;
  int v378;
  char v379;
  int v380;
  char v381;
  int v382;
  char v383;
  int v384;
  char v385;
  int v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  int v394;
  unint64_t v395;
  uint64_t v396;
  __int128 v397;
  unsigned __int8 v398;
  __int128 v399;
  unsigned __int8 v400;
  uint64_t v401;
  uint64_t v402;
  unsigned __int8 v403;
  char v404[8];
  unsigned __int8 v405;
  WTF::StringImpl *v406;
  unsigned __int8 v407;
  WTF::StringImpl *v408;
  unsigned __int8 v409;
  WTF::StringImpl *v410;
  unsigned __int8 v411;
  WTF::StringImpl *v412;
  __int128 v413;
  __int128 v414;
  char v415;
  WTF::StringImpl *v416;
  char v417;
  WTF::StringImpl *v418;
  char v419;
  WTF::StringImpl *v420;
  uint64_t v421;
  char v422;
  WTF::StringImpl *v423;
  char v424;
  __int128 v425;
  char v426;
  __int128 v427;
  char v428;
  __int128 v429;
  unsigned __int8 v430;
  WTF::StringImpl *v431[2];
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char v442;
  __int128 v443;
  char v444;
  __int128 v445;
  char v446;
  char v447;
  char v448;
  char v449;
  char v450;
  char v451;
  char v452;
  char v453;
  char v454;
  char v455;
  char v456;
  char v457;
  WTF::StringImpl *v458;
  _QWORD v459[2];
  int v460;
  WTF::StringImpl *v461;
  uint64_t v462;
  WTF::StringImpl *v463;
  char v464;
  char v465;
  WTF::StringImpl *v466;
  __int128 v467;
  __int128 v468;
  char v469;
  char v470;
  WTF::StringImpl *v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  char v474;
  char v475;
  uint64_t v476;
  uint64_t v477;
  char v478;
  char v479;
  char v480;
  char v481;
  char v482;
  char v483;
  char v484;
  char v485;
  char v486;
  uint64_t v487;
  __int128 v488;
  __int128 v489;
  _OWORD v490[4];
  uint64_t v491;
  char v492;
  uint64_t v493;

  v493 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v429);
  IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)v490);
  v395 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  v396 = v3;
  if (!v3)
  {
    v179 = *a1;
    v180 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v181 = a1[3];
    if (v181)
    {
      if (v180)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v181 + 16))(v181, v179);
    }
  }
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      v394 = 0;
      v393 = *v8;
      v9 = v5;
      goto LABEL_9;
    }
    v9 = v4;
    v182 = 0;
  }
  else
  {
    v9 = 0;
    v182 = 0;
    *a1 = 0;
    a1[1] = 0;
    v183 = a1[3];
    if (v183)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v183 + 16))(v183);
        v182 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v182 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v184 = a1[3];
  if (v184)
  {
    if (v9)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v184 + 16))(v184, v182, v9);
      v393 = 0;
      v9 = *a1;
      v4 = a1[1];
      v394 = 1;
      v5 = *a1;
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
  }
  v4 = 0;
  v5 = 0;
  v393 = 0;
  v394 = 1;
LABEL_9:
  v10 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v10 || v4 - v10 <= 7)
  {
    v9 = 0;
    v190 = 0;
    *a1 = 0;
    a1[1] = 0;
    v191 = a1[3];
    if (v191)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v191 + 16))(v191);
        v190 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v190 = 0;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v11 + 1);
    if (v5)
    {
      v392 = 0;
      v391 = *v11;
      goto LABEL_13;
    }
    v9 = v4;
    v190 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v192 = a1[3];
  if (v192)
  {
    if (v9)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v192 + 16))(v192, v190, v9);
      v391 = 0;
      v9 = *a1;
      v4 = a1[1];
      v392 = 1;
      v5 = *a1;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = 0;
  }
  v4 = 0;
  v5 = 0;
  v391 = 0;
  v392 = 1;
LABEL_13:
  v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v12 || v4 - v12 <= 7)
  {
    v9 = 0;
    v193 = 0;
    *a1 = 0;
    a1[1] = 0;
    v194 = a1[3];
    if (v194)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v194 + 16))(v194);
        v193 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v193 = 0;
      }
    }
  }
  else
  {
    v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v13 + 1);
    if (v5)
    {
      v390 = 0;
      v389 = *v13;
      goto LABEL_17;
    }
    v9 = v4;
    v193 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v195 = a1[3];
  if (v195)
  {
    if (v9)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v195 + 16))(v195, v193, v9);
      v389 = 0;
      v9 = *a1;
      v4 = a1[1];
      v390 = 1;
      v5 = *a1;
      goto LABEL_17;
    }
  }
  else
  {
    v9 = 0;
  }
  v4 = 0;
  v5 = 0;
  v389 = 0;
  v390 = 1;
LABEL_17:
  v14 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v14 || v4 - v14 <= 7)
  {
    v9 = 0;
    v196 = 0;
    *a1 = 0;
    a1[1] = 0;
    v197 = a1[3];
    if (v197)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v197 + 16))(v197);
        v196 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v196 = 0;
      }
    }
  }
  else
  {
    v15 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    v16 = v15 + 1;
    a1[2] = (unint64_t)(v15 + 1);
    if (v5)
    {
      v388 = 0;
      v387 = *v15;
      goto LABEL_21;
    }
    v9 = v4;
    v196 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v198 = a1[3];
  if (!v198)
  {
    v387 = 0;
    v9 = 0;
LABEL_246:
    v5 = 0;
    v388 = 1;
    goto LABEL_247;
  }
  if (!v9)
  {
    v387 = 0;
    goto LABEL_246;
  }
  (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v198 + 16))(v198, v196, v9);
  v387 = 0;
  v5 = *a1;
  v4 = a1[1];
  v16 = (_QWORD *)a1[2];
  v388 = 1;
  v9 = *a1;
LABEL_21:
  v17 = (char *)v16 - v5;
  if (v4 <= (unint64_t)v17)
  {
    v9 = 0;
    v319 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v319 && v4)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v319 + 16))(v319);
      v5 = *a1;
      v9 = a1[1];
    }
    else
    {
      v5 = 0;
    }
LABEL_247:
    *a1 = 0;
    a1[1] = 0;
    v199 = a1[3];
    if (v199)
    {
      if (v9)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v199 + 16))(v199, v5, v9);
        v19 = 0;
        v9 = *a1;
        v4 = a1[1];
        goto LABEL_250;
      }
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v9 = 0;
    }
    v19 = 0;
    goto LABEL_250;
  }
  v18 = &v17[v5];
  a1[2] = (unint64_t)(v18 + 1);
  if (!v5)
  {
    v9 = v4;
    goto LABEL_247;
  }
  v19 = *v18;
  if (v19 < 2)
  {
    v386 = 0;
    v20 = 1;
    goto LABEL_25;
  }
LABEL_250:
  *a1 = 0;
  a1[1] = 0;
  v200 = a1[3];
  if (v200 && v4)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v200 + 16))(v200, v9);
  v20 = 0;
  v386 = 1;
LABEL_25:
  if (!v19)
    v20 = 0;
  v385 = v20;
  IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v427);
  v21 = a1[1];
  v22 = *a1;
  v23 = a1[2] - *a1;
  if (v21 <= v23)
  {
    v185 = 0;
    v186 = 0;
    *a1 = 0;
    a1[1] = 0;
    v187 = a1[3];
    if (v187)
    {
      if (v21)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v187 + 16))(v187);
        v186 = *a1;
        v185 = a1[1];
      }
      else
      {
        v185 = 0;
        v186 = 0;
      }
    }
    goto LABEL_231;
  }
  v24 = (unsigned __int8 *)(v22 + v23);
  a1[2] = (unint64_t)(v24 + 1);
  if (!v22)
  {
    v185 = v21;
    v186 = 0;
LABEL_231:
    *a1 = 0;
    a1[1] = 0;
    v188 = a1[3];
    if (v188 && v185)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v188 + 16))(v188, v186, v185);
      v25 = 0;
      v22 = *a1;
      v21 = a1[1];
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v25 = 0;
    }
    goto LABEL_233;
  }
  v25 = *v24;
  if (v25 < 2)
  {
    v384 = 0;
    v26 = 1;
    goto LABEL_31;
  }
LABEL_233:
  *a1 = 0;
  a1[1] = 0;
  v189 = a1[3];
  if (v189 && v21)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v189 + 16))(v189, v22);
  v26 = 0;
  v384 = 1;
LABEL_31:
  if (!v25)
    v26 = 0;
  v383 = v26;
  IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v425);
  v27 = a1[1];
  v28 = *a1;
  v29 = a1[2] - *a1;
  if (v27 <= v29)
  {
    v201 = 0;
    v202 = 0;
    *a1 = 0;
    a1[1] = 0;
    v203 = a1[3];
    if (v203)
    {
      if (v27)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v203 + 16))(v203);
        v202 = *a1;
        v201 = a1[1];
      }
      else
      {
        v201 = 0;
        v202 = 0;
      }
    }
    goto LABEL_253;
  }
  v30 = (unsigned __int8 *)(v28 + v29);
  v31 = v28 + v29 + 1;
  a1[2] = v31;
  if (!v28)
  {
    v201 = v27;
    v202 = 0;
LABEL_253:
    *a1 = 0;
    a1[1] = 0;
    v204 = a1[3];
    if (v204 && v201)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v204 + 16))(v204, v202, v201);
      v32 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v32 = 0;
    }
    goto LABEL_255;
  }
  v32 = *v30;
  if (v32 < 2)
  {
    v382 = 0;
    v33 = 1;
    goto LABEL_37;
  }
LABEL_255:
  *a1 = 0;
  a1[1] = 0;
  v205 = a1[3];
  if (!v205 || !v27)
  {
    v206 = 0;
    v28 = 0;
    v381 = 0;
    v382 = 1;
LABEL_257:
    *a1 = 0;
    a1[1] = 0;
    v207 = a1[3];
    if (v207 && v206)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v207 + 16))(v207, v28, v206);
      v37 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v37 = 0;
    }
    goto LABEL_259;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v205 + 16))(v205, v28);
  v33 = 0;
  v28 = *a1;
  v27 = a1[1];
  v382 = 1;
  v31 = a1[2];
LABEL_37:
  if (!v32)
    v33 = 0;
  v381 = v33;
  v34 = v31 - v28;
  if (v27 <= v34)
  {
    v206 = 0;
    v326 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v326 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v326 + 16))(v326);
      v28 = *a1;
      v206 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_257;
  }
  v35 = (unsigned __int8 *)(v28 + v34);
  v36 = v28 + v34 + 1;
  a1[2] = v36;
  if (!v28)
  {
    v206 = v27;
    goto LABEL_257;
  }
  v37 = *v35;
  if (v37 < 2)
  {
    v380 = 0;
    v38 = 1;
    goto LABEL_43;
  }
LABEL_259:
  *a1 = 0;
  a1[1] = 0;
  v208 = a1[3];
  if (!v208 || !v27)
  {
    v209 = 0;
    v28 = 0;
    v379 = 0;
    v380 = 1;
LABEL_261:
    *a1 = 0;
    a1[1] = 0;
    v210 = a1[3];
    if (v210 && v209)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v210 + 16))(v210, v28, v209);
      v42 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v42 = 0;
    }
    goto LABEL_263;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v208 + 16))(v208, v28);
  v38 = 0;
  v28 = *a1;
  v27 = a1[1];
  v380 = 1;
  v36 = a1[2];
LABEL_43:
  if (!v37)
    v38 = 0;
  v379 = v38;
  v39 = v36 - v28;
  if (v27 <= v39)
  {
    v209 = 0;
    v325 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v325 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v325 + 16))(v325);
      v28 = *a1;
      v209 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_261;
  }
  v40 = (unsigned __int8 *)(v28 + v39);
  v41 = v28 + v39 + 1;
  a1[2] = v41;
  if (!v28)
  {
    v209 = v27;
    goto LABEL_261;
  }
  v42 = *v40;
  if (v42 < 2)
  {
    v378 = 0;
    v43 = 1;
    goto LABEL_49;
  }
LABEL_263:
  *a1 = 0;
  a1[1] = 0;
  v211 = a1[3];
  if (!v211 || !v27)
  {
    v212 = 0;
    v28 = 0;
    v377 = 0;
    v378 = 1;
LABEL_265:
    *a1 = 0;
    a1[1] = 0;
    v213 = a1[3];
    if (v213 && v212)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v213 + 16))(v213, v28, v212);
      v47 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v47 = 0;
    }
    goto LABEL_267;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v211 + 16))(v211, v28);
  v43 = 0;
  v28 = *a1;
  v27 = a1[1];
  v378 = 1;
  v41 = a1[2];
LABEL_49:
  if (!v42)
    v43 = 0;
  v377 = v43;
  v44 = v41 - v28;
  if (v27 <= v44)
  {
    v212 = 0;
    v324 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v324 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v324 + 16))(v324);
      v28 = *a1;
      v212 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_265;
  }
  v45 = (unsigned __int8 *)(v28 + v44);
  v46 = v28 + v44 + 1;
  a1[2] = v46;
  if (!v28)
  {
    v212 = v27;
    goto LABEL_265;
  }
  v47 = *v45;
  if (v47 < 2)
  {
    v376 = 0;
    v48 = 1;
    goto LABEL_55;
  }
LABEL_267:
  *a1 = 0;
  a1[1] = 0;
  v214 = a1[3];
  if (!v214 || !v27)
  {
    v215 = 0;
    v28 = 0;
    v375 = 0;
    v376 = 1;
LABEL_269:
    *a1 = 0;
    a1[1] = 0;
    v216 = a1[3];
    if (v216 && v215)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v216 + 16))(v216, v28, v215);
      v52 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v52 = 0;
    }
    goto LABEL_271;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v214 + 16))(v214, v28);
  v48 = 0;
  v28 = *a1;
  v27 = a1[1];
  v376 = 1;
  v46 = a1[2];
LABEL_55:
  if (!v47)
    v48 = 0;
  v375 = v48;
  v49 = v46 - v28;
  if (v27 <= v49)
  {
    v215 = 0;
    v323 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v323 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v323 + 16))(v323);
      v28 = *a1;
      v215 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_269;
  }
  v50 = (unsigned __int8 *)(v28 + v49);
  v51 = v28 + v49 + 1;
  a1[2] = v51;
  if (!v28)
  {
    v215 = v27;
    goto LABEL_269;
  }
  v52 = *v50;
  if (v52 < 2)
  {
    v374 = 0;
    v53 = 1;
    goto LABEL_61;
  }
LABEL_271:
  *a1 = 0;
  a1[1] = 0;
  v217 = a1[3];
  if (!v217 || !v27)
  {
    v218 = 0;
    v28 = 0;
    v373 = 0;
    v374 = 1;
LABEL_273:
    *a1 = 0;
    a1[1] = 0;
    v219 = a1[3];
    if (v219 && v218)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v219 + 16))(v219, v28, v218);
      v57 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v57 = 0;
    }
    goto LABEL_275;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v217 + 16))(v217, v28);
  v53 = 0;
  v28 = *a1;
  v27 = a1[1];
  v374 = 1;
  v51 = a1[2];
LABEL_61:
  if (!v52)
    v53 = 0;
  v373 = v53;
  v54 = v51 - v28;
  if (v27 <= v54)
  {
    v218 = 0;
    v322 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v322 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v322 + 16))(v322);
      v28 = *a1;
      v218 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_273;
  }
  v55 = (unsigned __int8 *)(v28 + v54);
  v56 = v28 + v54 + 1;
  a1[2] = v56;
  if (!v28)
  {
    v218 = v27;
    goto LABEL_273;
  }
  v57 = *v55;
  if (v57 < 2)
  {
    v372 = 0;
    v58 = 1;
    goto LABEL_67;
  }
LABEL_275:
  *a1 = 0;
  a1[1] = 0;
  v220 = a1[3];
  if (!v220 || !v27)
  {
    v221 = 0;
    v28 = 0;
    v371 = 0;
    v372 = 1;
LABEL_277:
    *a1 = 0;
    a1[1] = 0;
    v222 = a1[3];
    if (v222 && v221)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v222 + 16))(v222, v28, v221);
      v62 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v62 = 0;
    }
    goto LABEL_279;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v220 + 16))(v220, v28);
  v58 = 0;
  v28 = *a1;
  v27 = a1[1];
  v372 = 1;
  v56 = a1[2];
LABEL_67:
  if (!v57)
    v58 = 0;
  v371 = v58;
  v59 = v56 - v28;
  if (v27 <= v59)
  {
    v221 = 0;
    v321 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v321 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v321 + 16))(v321);
      v28 = *a1;
      v221 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_277;
  }
  v60 = (unsigned __int8 *)(v28 + v59);
  v61 = v28 + v59 + 1;
  a1[2] = v61;
  if (!v28)
  {
    v221 = v27;
    goto LABEL_277;
  }
  v62 = *v60;
  if (v62 < 2)
  {
    v370 = 0;
    v63 = 1;
    goto LABEL_73;
  }
LABEL_279:
  *a1 = 0;
  a1[1] = 0;
  v223 = a1[3];
  if (!v223 || !v27)
  {
    v224 = 0;
    v28 = 0;
    v369 = 0;
    v370 = 1;
LABEL_281:
    *a1 = 0;
    a1[1] = 0;
    v225 = a1[3];
    if (v225 && v224)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v225 + 16))(v225, v28, v224);
      v66 = 0;
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v66 = 0;
    }
    goto LABEL_283;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v223 + 16))(v223, v28);
  v63 = 0;
  v28 = *a1;
  v27 = a1[1];
  v370 = 1;
  v61 = a1[2];
LABEL_73:
  if (!v62)
    v63 = 0;
  v369 = v63;
  v64 = v61 - v28;
  if (v27 <= v64)
  {
    v224 = 0;
    v320 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v320 && v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v320 + 16))(v320);
      v28 = *a1;
      v224 = a1[1];
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_281;
  }
  v65 = (unsigned __int8 *)(v28 + v64);
  a1[2] = (unint64_t)(v65 + 1);
  if (!v28)
  {
    v224 = v27;
    goto LABEL_281;
  }
  v66 = *v65;
  if (v66 < 2)
  {
    v368 = 0;
    v67 = 1;
    goto LABEL_79;
  }
LABEL_283:
  *a1 = 0;
  a1[1] = 0;
  v226 = a1[3];
  if (!v226)
  {
    v28 = 0;
    v367 = 0;
    v27 = 0;
LABEL_285:
    v368 = 1;
LABEL_286:
    *a1 = 0;
    a1[1] = 0;
    v227 = a1[3];
    if (v227)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v227 + 16))(v227, v28);
        v228 = *a1;
        v27 = a1[1];
      }
      else
      {
        v228 = 0;
      }
    }
    else
    {
      v228 = 0;
      v27 = 0;
    }
    goto LABEL_288;
  }
  if (!v27)
  {
    v28 = 0;
    v367 = 0;
    goto LABEL_285;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v226 + 16))(v226, v28);
  v67 = 0;
  v28 = *a1;
  v27 = a1[1];
  v368 = 1;
LABEL_79:
  if (!v66)
    v67 = 0;
  v367 = v67;
  if (v27 <= a1[2] - v28)
    goto LABEL_286;
  v68 = (unsigned __int8 *)a1[2];
  a1[2] = (unint64_t)(v68 + 1);
  if (!v28)
  {
    v228 = 0;
LABEL_288:
    *a1 = 0;
    a1[1] = 0;
    v229 = a1[3];
    if (v229)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v229 + 16))(v229, v228);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v28 = 0;
      }
    }
    else
    {
      v28 = 0;
      v27 = 0;
    }
    goto LABEL_290;
  }
  v69 = *v68;
  if (v69 < 5)
  {
    v366 = v69 | 0x100;
    goto LABEL_85;
  }
LABEL_290:
  *a1 = 0;
  a1[1] = 0;
  v230 = a1[3];
  if (!v230)
  {
    v28 = 0;
    v366 = 0;
    v27 = 0;
    goto LABEL_292;
  }
  if (!v27)
  {
    v28 = 0;
    v366 = 0;
LABEL_292:
    *a1 = 0;
    a1[1] = 0;
    v231 = a1[3];
    if (v231)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v231 + 16))(v231, v28);
        v232 = *a1;
        v27 = a1[1];
      }
      else
      {
        v232 = 0;
      }
    }
    else
    {
      v232 = 0;
      v27 = 0;
    }
    goto LABEL_294;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v230 + 16))(v230, v28);
  v366 = 0;
  v28 = *a1;
  v27 = a1[1];
LABEL_85:
  if (v27 <= a1[2] - v28)
    goto LABEL_292;
  v70 = (unsigned __int8 *)a1[2];
  a1[2] = (unint64_t)(v70 + 1);
  if (!v28)
  {
    v232 = 0;
LABEL_294:
    *a1 = 0;
    a1[1] = 0;
    v233 = a1[3];
    if (v233)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v233 + 16))(v233, v232);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v28 = 0;
      }
    }
    else
    {
      v28 = 0;
      v27 = 0;
    }
    goto LABEL_296;
  }
  v71 = *v70;
  if (v71 < 0x13)
  {
    v365 = v71 | 0x100;
    goto LABEL_89;
  }
LABEL_296:
  *a1 = 0;
  a1[1] = 0;
  v234 = a1[3];
  if (v234 && v27)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v234 + 16))(v234, v28);
  v365 = 0;
LABEL_89:
  v364 = IPC::Decoder::decode<WebCore::InputMode>((uint64_t *)a1);
  v72 = a1[1];
  v73 = *a1;
  v74 = a1[2] - *a1;
  if (v72 <= v74)
  {
    v235 = 0;
    v236 = 0;
    *a1 = 0;
    a1[1] = 0;
    v237 = a1[3];
    if (v237)
    {
      if (v72)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v237 + 16))(v237);
        v236 = *a1;
        v235 = a1[1];
      }
      else
      {
        v235 = 0;
        v236 = 0;
      }
    }
    goto LABEL_299;
  }
  v75 = (unsigned __int8 *)(v73 + v74);
  a1[2] = (unint64_t)(v75 + 1);
  if (!v73)
  {
    v235 = v72;
    v236 = 0;
LABEL_299:
    v72 = 0;
    v73 = 0;
    *a1 = 0;
    a1[1] = 0;
    v238 = a1[3];
    if (v238)
    {
      if (v235)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v238 + 16))(v238, v236, v235);
        v73 = *a1;
        v72 = a1[1];
      }
      else
      {
        v72 = 0;
        v73 = 0;
      }
    }
    goto LABEL_300;
  }
  v76 = *v75;
  if (v76 < 8)
  {
    v363 = v76 | 0x100;
    goto LABEL_93;
  }
LABEL_300:
  *a1 = 0;
  a1[1] = 0;
  v239 = a1[3];
  if (v239 && v72)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v239 + 16))(v239, v73);
  v363 = 0;
LABEL_93:
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v423);
  v77 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v78)
  {
    LOBYTE(v420) = 0;
    v422 = 0;
LABEL_123:
    v88 = *a1;
    v89 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v90 = a1[3];
    if (v90 && v89)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v90 + 16))(v90, v88);
    goto LABEL_124;
  }
  v79 = v77;
  v412 = 0;
  *(_QWORD *)&v413 = 0;
  if (v77 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::OptionItem>((uint64_t)v431, (uint64_t *)a1);
      if (!(_BYTE)v432)
        goto LABEL_122;
      if (DWORD1(v413) == (_DWORD)v413)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v412, (unint64_t)v431);
      }
      else
      {
        v85 = (WTF::StringImpl **)((char *)v412 + 16 * DWORD1(v413));
        v86 = v431[0];
        v431[0] = 0;
        *v85 = v86;
        v85[1] = v431[1];
        ++DWORD1(v413);
      }
      if ((_BYTE)v432)
      {
        v87 = v431[0];
        v431[0] = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v78);
          else
            *(_DWORD *)v87 -= 2;
        }
      }
      if (!--v79)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v412, DWORD1(v413));
        v420 = v412;
        v318 = v413;
        v412 = 0;
        *(_QWORD *)&v413 = 0;
        v421 = v318;
        goto LABEL_111;
      }
    }
  }
  if (v77)
  {
    LODWORD(v413) = v77;
    v412 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v77));
    while (1)
    {
      IPC::Decoder::decode<WebKit::OptionItem>((uint64_t)v431, (uint64_t *)a1);
      if (!(_BYTE)v432)
        break;
      if (DWORD1(v413) == (_DWORD)v413)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v412, (unint64_t)v431);
      }
      else
      {
        v80 = (WTF::StringImpl **)((char *)v412 + 16 * DWORD1(v413));
        v81 = v431[0];
        v431[0] = 0;
        *v80 = v81;
        v80[1] = v431[1];
        ++DWORD1(v413);
      }
      if ((_BYTE)v432)
      {
        v82 = v431[0];
        v431[0] = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v78);
          else
            *(_DWORD *)v82 -= 2;
        }
      }
      if (!--v79)
      {
        v83 = v412;
        v84 = v413;
        goto LABEL_110;
      }
    }
LABEL_122:
    LOBYTE(v420) = 0;
    v422 = 0;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v412, v78);
    goto LABEL_123;
  }
  v83 = 0;
  v84 = 0;
LABEL_110:
  v412 = 0;
  *(_QWORD *)&v413 = 0;
  v420 = v83;
  v421 = v84;
LABEL_111:
  v422 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v412, v78);
LABEL_124:
  v362 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v418);
  v91 = *a1;
  v92 = a1[1];
  v93 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v92 < v93 || v92 - v93 <= 7)
  {
    v248 = 0;
    v249 = 0;
    *a1 = 0;
    a1[1] = 0;
    v250 = a1[3];
    if (v250)
    {
      if (v92)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v250 + 16))(v250);
        v249 = *a1;
        v248 = a1[1];
      }
      else
      {
        v248 = 0;
        v249 = 0;
      }
    }
  }
  else
  {
    v94 = (uint64_t *)(v91 + v93);
    a1[2] = (unint64_t)(v94 + 1);
    if (v91)
    {
      v361 = 0;
      v360 = *v94;
      goto LABEL_128;
    }
    v248 = v92;
    v249 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v251 = a1[3];
  if (v251 && v248)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v251 + 16))(v251, v249);
  v360 = 0;
  v361 = 1;
LABEL_128:
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v416);
  v95 = a1[1];
  v96 = *a1;
  v97 = a1[2] - *a1;
  if (v95 <= v97)
  {
    v240 = 0;
    v241 = 0;
    *a1 = 0;
    a1[1] = 0;
    v242 = a1[3];
    if (v242)
    {
      if (v95)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v242 + 16))(v242);
        v241 = *a1;
        v240 = a1[1];
      }
      else
      {
        v240 = 0;
        v241 = 0;
      }
    }
    goto LABEL_303;
  }
  v98 = (unsigned __int8 *)(v96 + v97);
  v99 = v96 + v97 + 1;
  a1[2] = v99;
  if (!v96)
  {
    v240 = v95;
    v241 = 0;
LABEL_303:
    *a1 = 0;
    a1[1] = 0;
    v243 = a1[3];
    if (v243 && v240)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v243 + 16))(v243, v241, v240);
      v100 = 0;
      v96 = *a1;
      v95 = a1[1];
    }
    else
    {
      v95 = 0;
      v96 = 0;
      v100 = 0;
    }
    goto LABEL_305;
  }
  v100 = *v98;
  if (v100 < 2)
  {
    v359 = 0;
    v101 = 1;
    goto LABEL_132;
  }
LABEL_305:
  *a1 = 0;
  a1[1] = 0;
  v244 = a1[3];
  if (!v244 || !v95)
  {
    v245 = 0;
    v96 = 0;
    v358 = 0;
    v359 = 1;
LABEL_307:
    *a1 = 0;
    a1[1] = 0;
    v246 = a1[3];
    if (v246 && v245)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v246 + 16))(v246, v96, v245);
      v104 = 0;
      v96 = *a1;
      v95 = a1[1];
    }
    else
    {
      v95 = 0;
      v96 = 0;
      v104 = 0;
    }
    goto LABEL_309;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v244 + 16))(v244, v96);
  v101 = 0;
  v96 = *a1;
  v95 = a1[1];
  v359 = 1;
  v99 = a1[2];
LABEL_132:
  if (!v100)
    v101 = 0;
  v358 = v101;
  v102 = v99 - v96;
  if (v95 <= v102)
  {
    v245 = 0;
    v327 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v327 && v95)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v327 + 16))(v327);
      v96 = *a1;
      v245 = a1[1];
    }
    else
    {
      v96 = 0;
    }
    goto LABEL_307;
  }
  v103 = (unsigned __int8 *)(v96 + v102);
  a1[2] = (unint64_t)(v103 + 1);
  if (!v96)
  {
    v245 = v95;
    goto LABEL_307;
  }
  v104 = *v103;
  if (v104 < 2)
  {
    v357 = 0;
    v105 = 1;
    goto LABEL_138;
  }
LABEL_309:
  *a1 = 0;
  a1[1] = 0;
  v247 = a1[3];
  if (v247 && v95)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v247 + 16))(v247, v96);
  v105 = 0;
  v357 = 1;
LABEL_138:
  if (!v104)
    v105 = 0;
  v356 = v105;
  IPC::Decoder::decode<WTF::URL>((uint64_t *)a1, &v412);
  v106 = a1[1];
  v107 = *a1;
  v108 = a1[2] - *a1;
  if (v106 <= v108)
  {
    v252 = 0;
    v253 = 0;
    *a1 = 0;
    a1[1] = 0;
    v254 = a1[3];
    if (v254)
    {
      if (v106)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v254 + 16))(v254);
        v253 = *a1;
        v252 = a1[1];
      }
      else
      {
        v252 = 0;
        v253 = 0;
      }
    }
    goto LABEL_315;
  }
  v109 = (unsigned __int8 *)(v107 + v108);
  a1[2] = (unint64_t)(v109 + 1);
  if (!v107)
  {
    v252 = v106;
    v253 = 0;
LABEL_315:
    v106 = 0;
    v107 = 0;
    *a1 = 0;
    a1[1] = 0;
    v255 = a1[3];
    if (v255)
    {
      if (v252)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v255 + 16))(v255, v253, v252);
        v107 = *a1;
        v106 = a1[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
    }
    goto LABEL_316;
  }
  v110 = *v109;
  if (v110 < 0x3A)
  {
    v355 = v110 | 0x100;
    goto LABEL_144;
  }
LABEL_316:
  *a1 = 0;
  a1[1] = 0;
  v256 = a1[3];
  if (v256 && v106)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v256 + 16))(v256, v107);
  v355 = 0;
LABEL_144:
  LOWORD(v431[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v431);
  LODWORD(v111) = BYTE1(v431[0]);
  if (BYTE1(v431[0]))
  {
    v354 = (char)v431[0];
  }
  else
  {
    v257 = *a1;
    v258 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v259 = a1[3];
    if (v259 && v258)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v259 + 16))(v259, v257);
    v354 = 0;
  }
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v410);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v408);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v406);
  v112 = a1[1];
  v113 = *a1;
  v114 = a1[2] - *a1;
  if (v112 <= v114)
  {
    v260 = 0;
    v261 = 0;
    *a1 = 0;
    a1[1] = 0;
    v262 = a1[3];
    if (v262)
    {
      if (v112)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v262 + 16))(v262);
        v261 = *a1;
        v260 = a1[1];
      }
      else
      {
        v260 = 0;
        v261 = 0;
      }
    }
    goto LABEL_321;
  }
  v115 = (unsigned __int8 *)(v113 + v114);
  v116 = v113 + v114 + 1;
  a1[2] = v116;
  if (!v113)
  {
    v260 = v112;
    v261 = 0;
LABEL_321:
    *a1 = 0;
    a1[1] = 0;
    v263 = a1[3];
    if (v263 && v260)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v263 + 16))(v263, v261, v260);
      v117 = 0;
      v113 = *a1;
      v112 = a1[1];
    }
    else
    {
      v112 = 0;
      v113 = 0;
      v117 = 0;
    }
    goto LABEL_323;
  }
  v117 = *v115;
  if (v117 < 2)
  {
    v353 = 0;
    v118 = 1;
    goto LABEL_150;
  }
LABEL_323:
  *a1 = 0;
  a1[1] = 0;
  v264 = a1[3];
  if (!v264 || !v112)
  {
    v265 = 0;
    v113 = 0;
    v352 = 0;
    v353 = 1;
LABEL_325:
    *a1 = 0;
    a1[1] = 0;
    v266 = a1[3];
    if (v266 && v265)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v266 + 16))(v266, v113, v265);
      v121 = 0;
      v113 = *a1;
      v112 = a1[1];
    }
    else
    {
      v112 = 0;
      v113 = 0;
      v121 = 0;
    }
    goto LABEL_327;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v264 + 16))(v264, v113);
  v118 = 0;
  v113 = *a1;
  v112 = a1[1];
  v353 = 1;
  v116 = a1[2];
LABEL_150:
  if (!v117)
    v118 = 0;
  v352 = v118;
  v119 = v116 - v113;
  if (v112 <= v119)
  {
    v265 = 0;
    v328 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v328 && v112)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v328 + 16))(v328);
      v113 = *a1;
      v265 = a1[1];
    }
    else
    {
      v113 = 0;
    }
    goto LABEL_325;
  }
  v120 = (unsigned __int8 *)(v113 + v119);
  a1[2] = (unint64_t)(v120 + 1);
  if (!v113)
  {
    v265 = v112;
    goto LABEL_325;
  }
  v121 = *v120;
  if (v121 < 2)
  {
    v351 = 0;
    v122 = 1;
    goto LABEL_156;
  }
LABEL_327:
  *a1 = 0;
  a1[1] = 0;
  v267 = a1[3];
  if (v267 && v112)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v267 + 16))(v267, v113);
  v122 = 0;
  v351 = 1;
LABEL_156:
  if (!v121)
    v122 = 0;
  v350 = v122;
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, v404);
  if (!v405)
  {
    v268 = *a1;
    v269 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v270 = a1[3];
    if (v270)
    {
      if (v269)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v270 + 16))(v270, v268);
    }
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v401);
  v123 = a1[1];
  v124 = (char *)*a1;
  v125 = a1[2] - *a1;
  if (v123 <= v125)
  {
    v271 = 0;
    v272 = 0;
    *a1 = 0;
    a1[1] = 0;
    v273 = a1[3];
    if (v273)
    {
      if (v123)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v273 + 16))(v273);
        v272 = *a1;
        v271 = a1[1];
      }
      else
      {
        v271 = 0;
        v272 = 0;
      }
    }
    goto LABEL_333;
  }
  v126 = &v124[v125];
  v127 = (uint64_t)&v124[v125 + 1];
  a1[2] = v127;
  if (!v124)
  {
    v271 = v123;
    v272 = 0;
LABEL_333:
    *a1 = 0;
    a1[1] = 0;
    v274 = a1[3];
    if (v274 && v271)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v274 + 16))(v274, v272, v271);
      v128 = 0;
      v124 = (char *)*a1;
      v123 = a1[1];
    }
    else
    {
      v123 = 0;
      v124 = 0;
      v128 = 0;
    }
    goto LABEL_335;
  }
  v128 = *v126;
  if (v128 < 2)
  {
    v349 = 0;
    v129 = 1;
    goto LABEL_163;
  }
LABEL_335:
  *a1 = 0;
  a1[1] = 0;
  v275 = a1[3];
  if (!v275 || !v123)
  {
    v347 = 0;
    v276 = 0;
    v124 = 0;
    v349 = 1;
LABEL_337:
    *a1 = 0;
    a1[1] = 0;
    v277 = a1[3];
    if (v277 && v276)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v277 + 16))(v277, v124, v276);
      v133 = 0;
      v124 = (char *)*a1;
      v123 = a1[1];
    }
    else
    {
      v123 = 0;
      v124 = 0;
      v133 = 0;
    }
    goto LABEL_339;
  }
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v275 + 16))(v275, v124);
  v129 = 0;
  v124 = (char *)*a1;
  v123 = a1[1];
  v349 = 1;
  v127 = a1[2];
LABEL_163:
  if (!v128)
    v129 = 0;
  v347 = v129;
  v130 = v127 - (_QWORD)v124;
  if (v123 <= v130)
  {
    v276 = 0;
    v336 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v336 && v123)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v336 + 16))(v336);
      v124 = (char *)*a1;
      v276 = a1[1];
    }
    else
    {
      v124 = 0;
    }
    goto LABEL_337;
  }
  v131 = &v124[v130];
  v132 = (uint64_t)&v124[v130 + 1];
  a1[2] = v132;
  if (!v124)
  {
    v276 = v123;
    goto LABEL_337;
  }
  v133 = *v131;
  if (v133 < 2)
  {
    v348 = 0;
    v134 = 1;
    goto LABEL_169;
  }
LABEL_339:
  *a1 = 0;
  a1[1] = 0;
  v278 = a1[3];
  if (!v278 || !v123)
  {
    v346 = 0;
    v279 = 0;
    v124 = 0;
    v348 = 1;
LABEL_341:
    *a1 = 0;
    a1[1] = 0;
    v280 = a1[3];
    if (v280 && v279)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v280 + 16))(v280, v124, v279);
      v138 = 0;
      v124 = (char *)*a1;
      v123 = a1[1];
    }
    else
    {
      v123 = 0;
      v124 = 0;
      v138 = 0;
    }
    goto LABEL_343;
  }
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v278 + 16))(v278, v124);
  v134 = 0;
  v124 = (char *)*a1;
  v123 = a1[1];
  v348 = 1;
  v132 = a1[2];
LABEL_169:
  if (!v133)
    v134 = 0;
  v346 = v134;
  v135 = v132 - (_QWORD)v124;
  if (v123 <= v135)
  {
    v279 = 0;
    v335 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v335 && v123)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v335 + 16))(v335);
      v124 = (char *)*a1;
      v279 = a1[1];
    }
    else
    {
      v124 = 0;
    }
    goto LABEL_341;
  }
  v136 = &v124[v135];
  v137 = (uint64_t)&v124[v135 + 1];
  a1[2] = v137;
  if (!v124)
  {
    v279 = v123;
    goto LABEL_341;
  }
  v138 = *v136;
  if (v138 < 2)
  {
    v345 = 0;
    v139 = 1;
    goto LABEL_175;
  }
LABEL_343:
  *a1 = 0;
  a1[1] = 0;
  v281 = a1[3];
  if (!v281 || !v123)
  {
    v282 = 0;
    v124 = 0;
    v344 = 0;
    v345 = 1;
LABEL_345:
    *a1 = 0;
    a1[1] = 0;
    v283 = a1[3];
    if (v283 && v282)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v283 + 16))(v283, v124, v282);
      v143 = 0;
      v124 = (char *)*a1;
      v123 = a1[1];
    }
    else
    {
      v123 = 0;
      v124 = 0;
      v143 = 0;
    }
    goto LABEL_347;
  }
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v281 + 16))(v281, v124);
  v139 = 0;
  v124 = (char *)*a1;
  v123 = a1[1];
  v345 = 1;
  v137 = a1[2];
LABEL_175:
  if (!v138)
    v139 = 0;
  v344 = v139;
  v140 = v137 - (_QWORD)v124;
  if (v123 <= v140)
  {
    v282 = 0;
    v334 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v334 && v123)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v334 + 16))(v334);
      v124 = (char *)*a1;
      v282 = a1[1];
    }
    else
    {
      v124 = 0;
    }
    goto LABEL_345;
  }
  v141 = &v124[v140];
  v142 = (uint64_t)&v124[v140 + 1];
  a1[2] = v142;
  if (!v124)
  {
    v282 = v123;
    goto LABEL_345;
  }
  v143 = *v141;
  if (v143 < 2)
  {
    v343 = 0;
    v144 = 1;
    goto LABEL_181;
  }
LABEL_347:
  *a1 = 0;
  a1[1] = 0;
  v284 = a1[3];
  if (!v284 || !v123)
  {
    v285 = 0;
    v124 = 0;
    v342 = 0;
    v343 = 1;
LABEL_349:
    *a1 = 0;
    a1[1] = 0;
    v286 = a1[3];
    if (v286 && v285)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v286 + 16))(v286, v124, v285);
      v148 = 0;
      v124 = (char *)*a1;
      v123 = a1[1];
    }
    else
    {
      v123 = 0;
      v124 = 0;
      v148 = 0;
    }
    goto LABEL_351;
  }
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v284 + 16))(v284, v124);
  v144 = 0;
  v124 = (char *)*a1;
  v123 = a1[1];
  v343 = 1;
  v142 = a1[2];
LABEL_181:
  if (!v143)
    v144 = 0;
  v342 = v144;
  v145 = v142 - (_QWORD)v124;
  if (v123 <= v145)
  {
    v285 = 0;
    v333 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v333 && v123)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v333 + 16))(v333);
      v124 = (char *)*a1;
      v285 = a1[1];
    }
    else
    {
      v124 = 0;
    }
    goto LABEL_349;
  }
  v146 = &v124[v145];
  v147 = (uint64_t)&v124[v145 + 1];
  a1[2] = v147;
  if (!v124)
  {
    v285 = v123;
    goto LABEL_349;
  }
  v148 = *v146;
  if (v148 < 2)
  {
    v341 = 0;
    v149 = 1;
    goto LABEL_187;
  }
LABEL_351:
  *a1 = 0;
  a1[1] = 0;
  v287 = a1[3];
  if (!v287 || !v123)
  {
    v339 = 0;
    v288 = 0;
    v124 = 0;
    v341 = 1;
    goto LABEL_353;
  }
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v287 + 16))(v287, v124);
  v149 = 0;
  v124 = (char *)*a1;
  v123 = a1[1];
  v341 = 1;
  v147 = a1[2];
LABEL_187:
  if (!v148)
    v149 = 0;
  v339 = v149;
  v150 = v147 - (_QWORD)v124;
  if (v123 <= v150)
  {
    v288 = 0;
    v332 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v332 && v123)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v332 + 16))(v332);
      v124 = (char *)*a1;
      v288 = a1[1];
    }
    else
    {
      v124 = 0;
    }
LABEL_353:
    *a1 = 0;
    a1[1] = 0;
    v289 = a1[3];
    if (v289)
      goto LABEL_618;
    goto LABEL_354;
  }
  v151 = &v124[v150];
  v152 = (uint64_t)&v124[v150 + 1];
  a1[2] = v152;
  if (!v124)
  {
    v288 = v123;
    goto LABEL_353;
  }
  v153 = *v151;
  if (v153 < 2)
  {
    v340 = 0;
    v154 = 1;
    goto LABEL_193;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v290 = a1[3];
    if (!v290 || !v123)
    {
      v338 = 0;
      v291 = 0;
      v124 = 0;
      v340 = 1;
LABEL_357:
      *a1 = 0;
      a1[1] = 0;
      v292 = a1[3];
      if (v292 && v291)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v292 + 16))(v292, v124, v291);
        v158 = 0;
        v124 = (char *)*a1;
        v123 = a1[1];
      }
      else
      {
        v123 = 0;
        v124 = 0;
        v158 = 0;
      }
      goto LABEL_359;
    }
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v290 + 16))(v290, v124);
    v154 = 0;
    v124 = (char *)*a1;
    v123 = a1[1];
    v340 = 1;
    v152 = a1[2];
LABEL_193:
    if (!v153)
      v154 = 0;
    v338 = v154;
    v155 = v152 - (_QWORD)v124;
    if (v123 <= v155)
    {
      v291 = 0;
      v331 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v331 && v123)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v331 + 16))(v331);
        v124 = (char *)*a1;
        v291 = a1[1];
      }
      else
      {
        v124 = 0;
      }
      goto LABEL_357;
    }
    v156 = &v124[v155];
    v157 = (uint64_t)&v124[v155 + 1];
    a1[2] = v157;
    if (!v124)
    {
      v291 = v123;
      goto LABEL_357;
    }
    v158 = *v156;
    if (v158 < 2)
    {
      v159 = 0;
      v160 = 1;
      goto LABEL_199;
    }
LABEL_359:
    *a1 = 0;
    a1[1] = 0;
    v293 = a1[3];
    if (!v293 || !v123)
    {
      v161 = 0;
      v294 = 0;
      v124 = 0;
      v159 = 1;
LABEL_361:
      *a1 = 0;
      a1[1] = 0;
      v295 = a1[3];
      if (v295 && v294)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v295 + 16))(v295, v124, v294);
        v165 = 0;
        v124 = (char *)*a1;
        v123 = a1[1];
      }
      else
      {
        v123 = 0;
        v124 = 0;
        v165 = 0;
      }
      goto LABEL_363;
    }
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v293 + 16))(v293, v124);
    v160 = 0;
    v124 = (char *)*a1;
    v123 = a1[1];
    v159 = 1;
    v157 = a1[2];
LABEL_199:
    if (v158)
      v161 = v160;
    else
      v161 = 0;
    v162 = v157 - (_QWORD)v124;
    if (v123 <= v162)
    {
      v294 = 0;
      v330 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v330 && v123)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v330 + 16))(v330);
        v124 = (char *)*a1;
        v294 = a1[1];
      }
      else
      {
        v124 = 0;
      }
      goto LABEL_361;
    }
    v163 = &v124[v162];
    v164 = (uint64_t)&v124[v162 + 1];
    a1[2] = v164;
    if (!v124)
    {
      v294 = v123;
      goto LABEL_361;
    }
    v165 = *v163;
    if (v165 < 2)
    {
      v166 = 0;
      v167 = 1;
      goto LABEL_206;
    }
LABEL_363:
    *a1 = 0;
    a1[1] = 0;
    v296 = a1[3];
    if (!v296 || !v123)
    {
      v168 = 0;
      v297 = 0;
      v124 = 0;
      v166 = 1;
LABEL_365:
      *a1 = 0;
      a1[1] = 0;
      v298 = a1[3];
      if (v298 && v297)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v298 + 16))(v298, v124, v297);
        v171 = 0;
        v124 = (char *)*a1;
        v123 = a1[1];
      }
      else
      {
        v123 = 0;
        v124 = 0;
        v171 = 0;
      }
      goto LABEL_367;
    }
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v296 + 16))(v296, v124);
    v167 = 0;
    v124 = (char *)*a1;
    v123 = a1[1];
    v166 = 1;
    v164 = a1[2];
LABEL_206:
    if (v165)
      v168 = v167;
    else
      v168 = 0;
    v169 = v164 - (_QWORD)v124;
    if (v123 <= v169)
    {
      v297 = 0;
      v329 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v329 && v123)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v329 + 16))(v329);
        v124 = (char *)*a1;
        v297 = a1[1];
      }
      else
      {
        v124 = 0;
      }
      goto LABEL_365;
    }
    v170 = &v124[v169];
    a1[2] = (unint64_t)(v170 + 1);
    if (!v124)
    {
      v297 = v123;
      goto LABEL_365;
    }
    v171 = *v170;
    if (v171 < 2)
    {
      v172 = 0;
      v173 = 1;
      goto LABEL_213;
    }
LABEL_367:
    *a1 = 0;
    a1[1] = 0;
    v299 = a1[3];
    if (v299)
    {
      if (v123)
      {
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v299 + 16))(v299, v124);
        v173 = 0;
        v124 = (char *)*a1;
        v123 = a1[1];
        goto LABEL_370;
      }
    }
    else
    {
      v123 = 0;
    }
    v124 = 0;
    v173 = 0;
LABEL_370:
    v172 = 1;
LABEL_213:
    if (v171)
      v174 = v173;
    else
      v174 = 0;
    v175 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v124;
    if (v123 < v175 || v123 - v175 <= 7)
    {
      v300 = 0;
      v301 = 0;
      *a1 = 0;
      a1[1] = 0;
      v302 = a1[3];
      if (v302)
      {
        if (v123)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v302 + 16))(v302);
          v301 = *a1;
          v300 = a1[1];
        }
        else
        {
          v300 = 0;
          v301 = 0;
        }
      }
LABEL_372:
      v123 = 0;
      v124 = 0;
      *a1 = 0;
      a1[1] = 0;
      v303 = a1[3];
      if (v303)
      {
        if (v300)
        {
          v289 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v303 + 16))(v303, v301, v300);
          v288 = *a1;
          if (*a1)
            goto LABEL_617;
          v124 = 0;
          v123 = a1[1];
        }
        else
        {
          v123 = 0;
          v124 = 0;
        }
      }
      goto LABEL_373;
    }
    v176 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v176 + 1);
    if (!v124)
    {
      v300 = v123;
      v301 = 0;
      goto LABEL_372;
    }
    v177 = *v176;
    if (*v176 != -1)
    {
      v178 = 1;
      goto LABEL_375;
    }
LABEL_373:
    *a1 = 0;
    a1[1] = 0;
    v304 = a1[3];
    if (v304 && v123)
      (*(void (**)(unint64_t, char *))(*(_QWORD *)v304 + 16))(v304, v124);
    v177 = 0;
    v178 = 0;
LABEL_375:
    IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>>(&v399, (uint64_t *)a1);
    v289 = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a1, (uint64_t)&v397);
    if (!*a1)
      break;
    v288 = v430;
    if (v430)
    {
      v288 = (unint64_t)&v412;
      *(_OWORD *)v431 = v429;
      if (v492)
      {
        v434 = v490[2];
        v435 = v490[3];
        v436 = v491;
        v432 = v490[0];
        v433 = v490[1];
        if (v396)
        {
          v437 = v395;
          if (!v394)
          {
            v438 = v393;
            if (!v392)
            {
              v439 = v391;
              if (!v390)
              {
                v440 = v389;
                if (!v388)
                {
                  v441 = v387;
                  if (!v386)
                  {
                    v442 = v385;
                    if (v428)
                    {
                      v443 = v427;
                      if (!v384)
                      {
                        v444 = v383;
                        if (v426)
                        {
                          v445 = v425;
                          if (!v382)
                          {
                            v446 = v381;
                            if (!v380)
                            {
                              v447 = v379;
                              if (!v378)
                              {
                                v448 = v377;
                                if (!v376)
                                {
                                  v449 = v375;
                                  if (!v374)
                                  {
                                    v450 = v373;
                                    if (!v372)
                                    {
                                      v451 = v371;
                                      if (!v370)
                                      {
                                        v452 = v369;
                                        if (!v368)
                                        {
                                          v453 = v367;
                                          if (v366 > 0xFF)
                                          {
                                            v454 = v366;
                                            if (v365 > 0xFF)
                                            {
                                              v455 = v365;
                                              if (v364 > 0xFFu)
                                              {
                                                v456 = v364;
                                                if (v363 > 0xFF)
                                                {
                                                  v457 = v363;
                                                  if (v424)
                                                  {
                                                    v305 = v423;
                                                    v423 = 0;
                                                    v458 = v305;
                                                    if (v422)
                                                    {
                                                      v306 = v420;
                                                      v420 = 0;
                                                      v459[0] = v306;
                                                      v307 = v421;
                                                      v421 = 0;
                                                      v459[1] = v307;
                                                      if ((v362 & 0xFF00000000) != 0)
                                                      {
                                                        v460 = v362;
                                                        if (v419)
                                                        {
                                                          v308 = v418;
                                                          v418 = 0;
                                                          v461 = v308;
                                                          if (!v361)
                                                          {
                                                            v462 = v360;
                                                            if (v417)
                                                            {
                                                              v309 = v416;
                                                              v416 = 0;
                                                              v463 = v309;
                                                              if (!v359)
                                                              {
                                                                v464 = v358;
                                                                if (!v357)
                                                                {
                                                                  v465 = v356;
                                                                  if (v415)
                                                                  {
                                                                    v310 = v412;
                                                                    v412 = 0;
                                                                    v466 = v310;
                                                                    v467 = v413;
                                                                    v468 = v414;
                                                                    LODWORD(v413) = v413 & 0xFFFFFFFE;
                                                                    v288 = v355;
                                                                    if (v355 > 0xFF)
                                                                    {
                                                                      v469 = v355;
                                                                      if ((_DWORD)v111)
                                                                      {
                                                                        v470 = v354;
                                                                        v288 = v411;
                                                                        if (v411)
                                                                        {
                                                                          v311 = v410;
                                                                          v410 = 0;
                                                                          v471 = v311;
                                                                          v288 = v409;
                                                                          if (v409)
                                                                          {
                                                                            v312 = v408;
                                                                            v408 = 0;
                                                                            v472 = v312;
                                                                            v288 = v407;
                                                                            if (v407)
                                                                            {
                                                                              v313 = v406;
                                                                              v406 = 0;
                                                                              v473 = v313;
                                                                              v288 = v353;
                                                                              if (!v353)
                                                                              {
                                                                                v474 = v352;
                                                                                v288 = v351;
                                                                                if (!v351)
                                                                                {
                                                                                  v475 = v350;
                                                                                  v288 = v405;
                                                                                  if (v405)
                                                                                  {
                                                                                    v111 = v459;
                                                                                    v289 = WebCore::Color::Color();
                                                                                    v288 = v403;
                                                                                    if (v403)
                                                                                    {
                                                                                      v476 = v401;
                                                                                      v314 = v402;
                                                                                      v401 = 0;
                                                                                      v402 = 0;
                                                                                      v477 = v314;
                                                                                      v288 = v349;
                                                                                      if (!v349)
                                                                                      {
                                                                                        v478 = v347;
                                                                                        v288 = v348;
                                                                                        if (!v348)
                                                                                        {
                                                                                          v479 = v346;
                                                                                          v288 = v345;
                                                                                          if (!v345)
                                                                                          {
                                                                                            v480 = v344;
                                                                                            v288 = v343;
                                                                                            if (!v343)
                                                                                            {
                                                                                              v481 = v342;
                                                                                              v288 = v341;
                                                                                              if (!v341)
                                                                                              {
                                                                                                v482 = v339;
                                                                                                v288 = v340;
                                                                                                if (!v340)
                                                                                                {
                                                                                                  v288 = v338;
                                                                                                  v483 = v338;
                                                                                                  if (!v159)
                                                                                                  {
                                                                                                    v484 = v161;
                                                                                                    if (!v166)
                                                                                                    {
                                                                                                      v485 = v168;
                                                                                                      if (!v172)
                                                                                                      {
                                                                                                        v486 = v174;
                                                                                                        if (v178)
                                                                                                        {
                                                                                                          v487 = v177;
                                                                                                          v288 = v400;
                                                                                                          if (v400)
                                                                                                          {
                                                                                                            v488 = v399;
                                                                                                            v288 = v398;
                                                                                                            if (v398)
                                                                                                            {
                                                                                                              v489 = v397;
                                                                                                              *(_BYTE *)(WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)a2, (__int128 *)v431) + 416) = 1;
                                                                                                              WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v431, v315);
                                                                                                              goto LABEL_430;
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_617:
    __break(1u);
LABEL_618:
    if (v288)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v289 + 16))(v289, v124, v288);
      v153 = 0;
      v124 = (char *)*a1;
      v123 = a1[1];
    }
    else
    {
LABEL_354:
      v123 = 0;
      v124 = 0;
      v153 = 0;
    }
  }
  *a2 = 0;
  a2[416] = 0;
LABEL_430:
  if (v403)
    WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v401, v124);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v404, v124);
  if (v407)
  {
    result = v406;
    v406 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v409)
  {
    result = v408;
    v408 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v411)
  {
    result = v410;
    v410 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v415)
  {
    result = v412;
    v412 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v417)
  {
    result = v416;
    v416 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v419)
  {
    result = v418;
    v418 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v422)
    result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v420, v317);
  if (v424)
  {
    result = v423;
    v423 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v317);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E231B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,__int16 a56,uint64_t a57,WTF::StringImpl *a58,char a59,WTF::StringImpl *a60,char a61,WTF::StringImpl *a62,char a63)
{
  WTF::StringImpl *a64;
  char a69;
  WTF::StringImpl *a70;
  char a71;
  WTF::StringImpl *a72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a56, a2);
  if (a59)
  {
    v74 = a58;
    a58 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (a61)
  {
    v75 = a60;
    a60 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v73);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  if (a63)
  {
    v76 = a62;
    a62 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v73);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (a69)
  {
    v77 = a64;
    a64 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v73);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (a71)
  {
    v78 = a70;
    a70 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v73);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (LOBYTE(STACK[0x200]))
  {
    v79 = a72;
    a72 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v73);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (LOBYTE(STACK[0x218]))
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x208], v73);
  if (LOBYTE(STACK[0x228]))
  {
    v80 = (WTF::StringImpl *)STACK[0x220];
    STACK[0x220] = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v73);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WebCore::ElementContext>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ElementContext,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::InputMode>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::InputMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::Color,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E23634(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_11;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_11:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_12;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    goto LABEL_13;
  }
  if (v9)
  {
    *result = 0;
    result[1] = 0;
LABEL_8:
    *((_BYTE *)v3 + 16) = 1;
    return result;
  }
  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_OWORD *)v3 = v17;
    goto LABEL_8;
  }
LABEL_13:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 16) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v16)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v15);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::FrameTreeCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  v6 = *((unsigned int *)a2 + 9);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  v8 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v8)
  {
    v9 = a2[3];
    v10 = 40 * v8;
    do
    {
      result = (char *)IPC::ArgumentCoder<WebKit::FrameTreeCreationParameters,void>::encode(a1, v9);
      v9 += 40;
      v10 -= 40;
    }
    while (v10);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::FrameTreeNodeData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  CFTypeRef v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  CFTypeRef v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  __int128 v57;
  _OWORD v58[2];
  char v59;
  uint64_t v60;
  _BYTE v61[192];
  CFTypeRef cf;
  _BYTE v63[24];
  int v64;
  WTF::StringImpl *v65;
  __int128 v66;
  _OWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)&v52);
  v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v5)
  {
    v6 = v4;
    v50 = 0;
    v51 = 0;
    if (v4 >= 0xD20)
    {
      v46 = a2;
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameTreeNodeData>(&v60, a1);
        if (!v70)
          break;
        v23 = HIDWORD(v51);
        if (HIDWORD(v51) == (_DWORD)v51)
        {
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>((uint64_t)&v50, (unint64_t)&v60);
        }
        else
        {
          v25 = v50;
          v26 = v50 + 312 * HIDWORD(v51);
          *(_WORD *)v26 = v60;
          WebCore::ResourceRequestBase::ResourceRequestBase(v26 + 8, (uint64_t)v61);
          v27 = cf;
          cf = 0;
          *(_QWORD *)(v26 + 200) = v27;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v26 + 208, (uint64_t)v63);
          v28 = v65;
          v65 = 0;
          *(_QWORD *)(v26 + 240) = v28;
          v29 = v66;
          v30 = v67[0];
          *(_OWORD *)(v26 + 278) = *(_OWORD *)((char *)v67 + 14);
          *(_OWORD *)(v26 + 264) = v30;
          *(_OWORD *)(v26 + 248) = v29;
          v31 = v25 + 312 * v23;
          *(_QWORD *)(v31 + 296) = 0;
          *(_QWORD *)(v31 + 304) = 0;
          v32 = v68;
          v68 = 0;
          *(_QWORD *)(v31 + 296) = v32;
          LODWORD(v32) = v69;
          LODWORD(v69) = 0;
          *(_DWORD *)(v31 + 304) = v32;
          LODWORD(v32) = HIDWORD(v69);
          HIDWORD(v69) = 0;
          *(_DWORD *)(v31 + 308) = v32;
          ++HIDWORD(v51);
        }
        std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v24);
        if (!--v6)
        {
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v50, HIDWORD(v51));
          v47 = v50;
          v33 = v51;
          v50 = 0;
          v51 = 0;
          v48 = v33;
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (!v4)
      {
        v18 = 0;
        v19 = 0;
LABEL_16:
        v50 = 0;
        v51 = 0;
        v47 = v18;
        v48 = v19;
LABEL_17:
        v49 = 1;
LABEL_26:
        WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v5);
        if (v49)
          goto LABEL_27;
        goto LABEL_12;
      }
      v46 = a2;
      LODWORD(v51) = 312 * (int)v4 / 0x138u;
      v50 = WTF::fastMalloc((WTF *)(312 * v4));
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameTreeNodeData>(&v60, a1);
        if (!v70)
          break;
        v8 = HIDWORD(v51);
        if (HIDWORD(v51) == (_DWORD)v51)
        {
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>((uint64_t)&v50, (unint64_t)&v60);
        }
        else
        {
          v10 = v50;
          v11 = v50 + 312 * HIDWORD(v51);
          *(_WORD *)v11 = v60;
          WebCore::ResourceRequestBase::ResourceRequestBase(v11 + 8, (uint64_t)v61);
          v12 = cf;
          cf = 0;
          *(_QWORD *)(v11 + 200) = v12;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v11 + 208, (uint64_t)v63);
          v13 = v65;
          v65 = 0;
          *(_QWORD *)(v11 + 240) = v13;
          v14 = v66;
          v15 = v67[0];
          *(_OWORD *)(v11 + 278) = *(_OWORD *)((char *)v67 + 14);
          *(_OWORD *)(v11 + 264) = v15;
          *(_OWORD *)(v11 + 248) = v14;
          v16 = v10 + 312 * v8;
          *(_QWORD *)(v16 + 296) = 0;
          *(_QWORD *)(v16 + 304) = 0;
          v17 = v68;
          v68 = 0;
          *(_QWORD *)(v16 + 296) = v17;
          LODWORD(v17) = v69;
          LODWORD(v69) = 0;
          *(_DWORD *)(v16 + 304) = v17;
          LODWORD(v17) = HIDWORD(v69);
          HIDWORD(v69) = 0;
          *(_DWORD *)(v16 + 308) = v17;
          ++HIDWORD(v51);
        }
        std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v9);
        if (!--v6)
        {
          v18 = v50;
          v19 = v51;
          goto LABEL_16;
        }
      }
    }
    LOBYTE(v47) = 0;
    v49 = 0;
    std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v7);
    a2 = v46;
    goto LABEL_26;
  }
  LOBYTE(v47) = 0;
  v49 = 0;
LABEL_12:
  v20 = (void *)*a1;
  v21 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v22 = a1[3];
  if (v22 && v21)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v22 + 16))(v22, v20);
LABEL_27:
  if (!*a1)
  {
LABEL_43:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 312) = 0;
    goto LABEL_39;
  }
  if (!v59)
    goto LABEL_42;
  LOWORD(v60) = v52;
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v61, (uint64_t)&v53);
  v34 = v54;
  v54 = 0;
  cf = v34;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v63, (uint64_t)&v55);
  v35 = v56;
  v56 = 0;
  v65 = v35;
  v67[0] = v58[0];
  *(_OWORD *)((char *)v67 + 14) = *(_OWORD *)((char *)v58 + 14);
  v66 = v57;
  if (!v49)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v68 = v47;
  v36 = v48;
  v47 = 0;
  v48 = 0;
  v69 = v36;
  *(_WORD *)a2 = v60;
  WebCore::ResourceRequestBase::ResourceRequestBase(a2 + 8, (uint64_t)v61);
  v37 = cf;
  cf = 0;
  *(_QWORD *)(a2 + 200) = v37;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 208, (uint64_t)v63);
  v38 = v67[0];
  *(_OWORD *)(a2 + 248) = v66;
  v39 = v68;
  *(_QWORD *)(a2 + 240) = v65;
  *(_OWORD *)(a2 + 264) = v38;
  *(_OWORD *)(a2 + 278) = *(_OWORD *)((char *)v67 + 14);
  v65 = 0;
  v68 = 0;
  *(_QWORD *)(a2 + 296) = v39;
  v40 = v69;
  v69 = 0;
  *(_QWORD *)(a2 + 304) = v40;
  *(_BYTE *)(a2 + 312) = 1;
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v41);
  v43 = v65;
  v65 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (v64 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v64])(&v50, v63);
  v64 = -1;
  v44 = cf;
  cf = 0;
  if (v44)
    CFRelease(v44);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v61);
LABEL_39:
  if (v49)
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v20);
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, (WTF::StringImpl *)v20);
}

void sub_196E23D5C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_BYTE)v7)
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, a2 + 24);
}

void IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int i;
  unint64_t v10;
  char v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _BYTE v23[24];
  _BYTE v24[24];
  char v25;
  WTF::StringImpl *v26;
  char v27;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_22;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    v16 = v4;
    v17 = 0;
    goto LABEL_23;
  }
  v8 = *v7;
  if (v8 >= 4)
    goto LABEL_24;
  for (i = v8 | 0x100; ; i = 0)
  {
    v10 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    v12 = v11;
    IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v26);
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>((uint64_t *)a1, (uint64_t)v24);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
      goto LABEL_12;
    }
    if (i > 0xFF)
    {
      LOBYTE(v21) = i;
      if (v12)
      {
        HIDWORD(v21) = v10;
        if (v27)
        {
          v14 = v26;
          v26 = 0;
          v22 = v14;
          if (v25)
            break;
        }
      }
    }
    __break(1u);
LABEL_22:
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
LABEL_23:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v4)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
  }
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100]((uint64_t)v23, (uint64_t)v24);
  *(_QWORD *)a2 = v21;
  *(_DWORD *)(a2 + 8) = HIDWORD(v10);
  *(_QWORD *)(a2 + 16) = v22;
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100](a2 + 24, (uint64_t)v23);
  *(_BYTE *)(a2 + 48) = 1;
  if (v23[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v23);
LABEL_12:
  if (v25 && v24[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
  if (v27)
  {
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
}

void sub_196E2415C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  WTF::MachSendRight *v25;
  uint64_t v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v28 = *(WTF::StringImpl **)(v24 + 16);
  *(_QWORD *)(v24 + 16) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (a14)
    WTF::MachSendRight::~MachSendRight(v25);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if ((_BYTE)a22 && a20)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a16);
  if (*(_BYTE *)(v26 - 56))
  {
    v29 = *(WTF::StringImpl **)(v26 - 64);
    *(_QWORD *)(v26 - 64) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::GamepadData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  uint64_t v5;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 2);
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)a2 + 3), a2[9]);
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)a2 + 5), a2[13]);
  v5 = *((_QWORD *)a2 + 7);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return IPC::ArgumentCoder<WTF::HashSet<WebCore::GamepadHapticEffectType,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (unsigned __int8 **)a2 + 8);
}

uint64_t IPC::ArgumentCoder<WebKit::GamepadData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  int i;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WTF *v54;
  uint64_t v55;
  char v56;
  WTF *v57;
  uint64_t v58;
  char v59;
  WTF::StringImpl *v60;
  char v61;
  WTF::StringImpl *v62;
  char v63;
  uint64_t v64;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (_DWORD *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8 & 0xFFFFFF00;
      v11 = *v8;
      goto LABEL_8;
    }
    v45 = v4;
    v46 = 0;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v47 + 16))(v47, v5, v4);
        v46 = *a1;
        v45 = a1[1];
      }
      else
      {
        v45 = 0;
        v46 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v48 = a1[3];
  if (v48 && v45)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
  v10 = 0;
  v11 = 0;
  v9 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::String>(a1, &v62);
  IPC::Decoder::decode<WTF::String>(a1, &v60);
  IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v57);
  IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v54);
  result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v13 = result;
  v15 = v14;
  v16 = a1[1];
  v17 = (_BYTE *)*a1;
  v18 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v16 < v18 || v16 - v18 <= 3)
  {
    v53 = v11;
    v49 = 0;
    v50 = 0;
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (v51)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
        v50 = *a1;
        v49 = a1[1];
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
    }
  }
  else
  {
    v19 = (int *)&v17[v18];
    a1[2] = (uint64_t)(v19 + 1);
    if (v17)
    {
      v20 = *v19;
      v64 = 0;
      if (!v20)
      {
        i = 0;
        v38 = 0;
        if (!v9)
          goto LABEL_46;
        goto LABEL_73;
      }
      v53 = v11;
      v21 = 0;
      while (1)
      {
        result = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>(a1);
        v22 = result;
        v23 = v64;
        if ((unsigned __int16)result < 0x100u || (result & 0xFE) == 0xFE)
        {
          if (!v64)
            goto LABEL_39;
          goto LABEL_38;
        }
        if (v64
          || (result = WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(&v64),
              (v23 = v64) != 0))
        {
          v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = ~(v22 << 15) + v22;
        v26 = (9 * (v25 ^ (v25 >> 10))) ^ ((9 * (v25 ^ (v25 >> 10))) >> 6);
        v27 = v24 & ((v26 + ~(v26 << 11)) ^ ((v26 + ~(v26 << 11)) >> 16));
        v17 = (_BYTE *)(v23 + v27);
        v28 = *(unsigned __int8 *)(v23 + v27);
        if (v28 != 255)
        {
          v29 = 0;
          v30 = 1;
          while (v28 != v22)
          {
            if (v28 == 254)
              v29 = v17;
            v27 = ((_DWORD)v27 + v30) & v24;
            v17 = (_BYTE *)(v23 + v27);
            v28 = *(unsigned __int8 *)(v23 + v27);
            ++v30;
            if (v28 == 255)
            {
              if (v29)
              {
                *v29 = -1;
                --*(_DWORD *)(v64 - 16);
                v17 = v29;
              }
              goto LABEL_26;
            }
          }
LABEL_38:
          WTF::fastFree((WTF *)(v23 - 16), v17);
          goto LABEL_39;
        }
LABEL_26:
        *v17 = v22;
        v31 = v64;
        v32 = v64 ? *(_DWORD *)(v64 - 12) + 1 : 1;
        *(_DWORD *)(v64 - 12) = v32;
        v33 = (*(_DWORD *)(v31 - 16) + v32);
        v34 = *(unsigned int *)(v31 - 4);
        if (v34 > 0x400)
          break;
        if (3 * v34 <= 4 * v33)
          goto LABEL_31;
LABEL_32:
        if (++v21 == v20)
        {
          v38 = v64;
          if (*a1)
          {
            for (i = 0; ; i = 1)
            {
              v11 = v53;
              if (!v9)
              {
LABEL_46:
                if (v63 && v61 && v59 && v56 && v15 && !i)
                {
                  v39 = v62;
                  v62 = 0;
                  v40 = v60;
                  v60 = 0;
                  v41 = v57;
                  v57 = 0;
                  v42 = v54;
                  v54 = 0;
                  *(_DWORD *)a2 = v11 | v10;
                  *(_QWORD *)(a2 + 8) = v39;
                  *(_QWORD *)(a2 + 16) = v40;
                  *(_QWORD *)(a2 + 24) = v41;
                  v43 = v58;
                  v58 = 0;
                  *(_QWORD *)(a2 + 32) = v43;
                  *(_QWORD *)(a2 + 40) = v42;
                  v44 = v55;
                  v55 = 0;
                  *(_QWORD *)(a2 + 48) = v44;
                  *(_QWORD *)(a2 + 56) = v13;
                  *(_QWORD *)(a2 + 64) = v38;
                  *(_BYTE *)(a2 + 72) = 1;
                  goto LABEL_53;
                }
              }
LABEL_73:
              __break(1u);
LABEL_74:
              result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)result + 16))(result, v17);
              if (!*a1)
                goto LABEL_44;
              v38 = 0;
            }
          }
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 72) = 0;
          if (v38)
            result = WTF::fastFree((WTF *)(v38 - 16), v17);
          goto LABEL_53;
        }
      }
      if (v34 > 2 * v33)
        goto LABEL_32;
LABEL_31:
      result = WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(&v64);
      goto LABEL_32;
    }
    v53 = v11;
    v49 = v16;
    v50 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v52 = a1[3];
  if (v52 && v49)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50);
LABEL_39:
  v17 = (_BYTE *)*a1;
  v35 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v36 = v35 == 0;
  else
    v36 = 1;
  if (!v36)
    goto LABEL_74;
LABEL_44:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
LABEL_53:
  if (v56)
  {
    result = (uint64_t)v54;
    if (v54)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      result = WTF::fastFree((WTF *)result, v17);
    }
  }
  if (v59)
  {
    result = (uint64_t)v57;
    if (v57)
    {
      v57 = 0;
      LODWORD(v58) = 0;
      result = WTF::fastFree((WTF *)result, v17);
    }
  }
  if (v61)
  {
    result = (uint64_t)v60;
    v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v63)
  {
    result = (uint64_t)v62;
    v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E247A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, WTF *a14, int a15, int a16, char a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20,char a21,uint64_t a22)
{
  if (a13 && a10)
    WTF::fastFree(a10, a2);
  if (a17 && a14)
    WTF::fastFree(a14, a2);
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

const char **IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, a2 + 1);
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(a1, (uint64_t)(a2 + 4));
  LOBYTE(v4) = *((_BYTE *)a2 + 152);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 20);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 22);
  return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 23);
}

void IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  char v18;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[26];
  _BYTE v35[120];
  __int128 v36;
  char v37;
  WTF::StringImpl *v38[2];
  const char **v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  _BYTE v46[120];
  char v47;
  __int128 v48;
  char v49;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v29 = 0;
    v30 = 0;
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v5, v4);
        v30 = *v2;
        v29 = v2[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
    goto LABEL_49;
  }
  v8 = (uint64_t *)(v5 + v6);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v29 = v4;
    v30 = 0;
LABEL_49:
    *v2 = 0;
    v2[1] = 0;
    v32 = v2[3];
    if (v32 && v29)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
    v10 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  v9 = 0;
  v10 = *v8;
LABEL_8:
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v2, (uint64_t)&v48);
  v11 = IPC::Decoder::decode<WebCore::TextGranularity>(v2);
  v12 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(v2);
  IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v46, v2);
  v13 = (unsigned __int8 *)v2[1];
  v14 = *v2;
  v15 = v2[2] - *v2;
  if ((unint64_t)v13 <= v15)
    goto LABEL_43;
  v16 = (unsigned __int8 *)(v14 + v15);
  v2[2] = (uint64_t)(v16 + 1);
  if (!v14)
  {
    v16 = v13;
    v25 = 0;
    goto LABEL_44;
  }
  LODWORD(v16) = *v16;
  if (v16 >= 2)
    goto LABEL_46;
  v17 = 0;
  v18 = 1;
  while (1)
  {
    if ((_DWORD)v16)
      v19 = v18;
    else
      v19 = 0;
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v2, &v43);
    IPC::Decoder::decode<WebCore::PublicSuffix>(&v41, v2);
    IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(v2, (uint64_t)&v39);
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 192) = 0;
      goto LABEL_31;
    }
    if (!v9)
    {
      *(_QWORD *)v34 = v10;
      if (v49)
      {
        *(_OWORD *)&v34[8] = v48;
        if (v11 > 0xFFu)
        {
          v34[24] = v11;
          if (v12 > 0xFFu)
          {
            v34[25] = v12;
            if (v47)
            {
              v2 = (uint64_t *)v35;
              std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v35, (uint64_t)v46);
              if (!v17)
              {
                LOBYTE(v36) = v19;
                if (v45)
                {
                  *((_QWORD *)&v36 + 1) = v43;
                  v37 = v44;
                  if (v42)
                  {
                    v21 = v41;
                    v41 = 0;
                    v38[0] = v21;
                    if (v40)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_43:
    v16 = 0;
    v25 = 0;
    *v2 = 0;
    v2[1] = 0;
    v26 = v2[3];
    if (v26)
    {
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *v2;
        v16 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v16 = 0;
        v25 = 0;
      }
    }
LABEL_44:
    *v2 = 0;
    v2[1] = 0;
    v27 = v2[3];
    if (v27)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v27 + 16))(v27, v25, v16);
        LODWORD(v16) = 0;
        v14 = *v2;
        v13 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      LODWORD(v16) = 0;
    }
LABEL_46:
    *v2 = 0;
    v2[1] = 0;
    v28 = v2[3];
    if (v28)
    {
      v33 = (int)v16;
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v14);
      v18 = 0;
      v17 = 1;
      LODWORD(v16) = v33;
    }
    else
    {
      v18 = 0;
      v17 = 1;
    }
  }
  v38[1] = (WTF::StringImpl *)v39;
  v39 = 0;
  *(_OWORD *)a2 = *(_OWORD *)v34;
  *(_OWORD *)(a2 + 10) = *(_OWORD *)&v34[10];
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 32), (uint64_t)v35);
  *(_OWORD *)(a2 + 152) = v36;
  *(_BYTE *)(a2 + 168) = v37;
  v22 = *(_OWORD *)v38;
  v38[0] = 0;
  v38[1] = 0;
  *(_OWORD *)(a2 + 176) = v22;
  *(_BYTE *)(a2 + 192) = 1;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v38[1]);
  v23 = v38[0];
  v38[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (v35[112])
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v35, v20);
LABEL_31:
  if (v40)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v39);
  if (v42)
  {
    v24 = v41;
    v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (v47)
  {
    if (v46[112])
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v46, v20);
  }
}

void sub_196E24D10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,WTF::StringImpl *a38,char a39)
{
  uint64_t v39;

  if (*(_BYTE *)(v39 - 112))
  {
    if (*(_BYTE *)(v39 - 120))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(v39 - 232), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebCore::PublicSuffix>(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PublicSuffix,void>::decode(a1, a2);
  if (!a1[8])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E24E78(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::DynamicViewportSizeUpdate,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = a2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2 + 6);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2 + 10);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2 + 14);
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, a2 + 18);
  v10 = *((_QWORD *)a2 + 11);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = a2[24];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *((_QWORD *)a2 + 13);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v12;
  v13 = *((_QWORD *)a2 + 14);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v13;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::DynamicViewportSizeUpdate,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  char v88;
  unint64_t v89;
  __int128 v90;
  char v91;

  v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  LOBYTE(v6) = v5;
  v7 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v88 = v8;
  v9 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v87 = v10;
  v11 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v13 = v12;
  if (!v12)
    goto LABEL_45;
  while (1)
  {
    v14 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v16 = v15;
    if (!v15)
    {
      v43 = *a1;
      v44 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45)
      {
        if (v44)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
      }
    }
    v85 = *a1;
    if (*a1)
    {
      if (!v13 || !v16)
        goto LABEL_44;
      v17 = v11 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      v11 = 0;
      v17 = 0;
      v46 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v47 = a1[3];
      if (v47)
      {
        if (v46)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v47 + 16))(v47, 0);
        v11 = 0;
        v17 = 0;
      }
    }
    v86 = v6;
    v89 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v13 = v18;
    if (!v18)
    {
      v48 = *a1;
      v49 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v50 = a1[3];
      if (v50)
      {
        if (v49)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
      }
    }
    v19 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v6 = v20;
    v83 = v19;
    if (!v20)
    {
      v51 = *a1;
      v52 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53)
      {
        if (v52)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
      }
    }
    v84 = *a1;
    if (*a1)
    {
      if (!v13 || !v6)
        goto LABEL_44;
      v82 = v89 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v89) = 0;
      v82 = 0;
      v54 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v55 = a1[3];
      if (v55)
      {
        if (v54)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v55 + 16))(v55, 0);
        LOBYTE(v89) = 0;
        v82 = 0;
      }
    }
    v81 = v11;
    v6 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v13 = v21;
    if (!v21)
    {
      v56 = *a1;
      v57 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v58 = a1[3];
      if (v58)
      {
        if (v57)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
      }
    }
    v80 = v14;
    v22 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v11 = v23;
    if (!v23)
    {
      v59 = *a1;
      v60 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v61 = a1[3];
      if (v61)
      {
        if (v60)
        {
          v62 = v22;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v61 + 16))(v61, v59);
          v22 = v62;
        }
      }
    }
    v24 = *a1;
    v79 = v22;
    if (*a1)
    {
      if (!v13 || !v11)
        goto LABEL_44;
      v78 = v6 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v6) = 0;
      v78 = 0;
      v63 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v64 = a1[3];
      if (v64)
      {
        if (v63)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v64 + 16))(v64, 0);
        LOBYTE(v6) = 0;
        v78 = 0;
      }
    }
    IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v90);
    v25 = *a1;
    v26 = a1[1];
    v27 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    v76 = v9;
    v77 = v7;
    v75 = v17;
    if (v26 < v27 || v26 - v27 <= 7)
    {
      v65 = 0;
      v66 = 0;
      *a1 = 0;
      a1[1] = 0;
      v67 = a1[3];
      if (v67)
      {
        if (v26)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v67 + 16))(v67);
          v66 = *a1;
          v65 = a1[1];
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
      }
    }
    else
    {
      v28 = (unint64_t *)(v25 + v27);
      a1[2] = (unint64_t)(v28 + 1);
      if (v25)
      {
        v29 = v4;
        v9 = 0;
        v11 = *v28;
        goto LABEL_23;
      }
      v65 = v26;
      v66 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v68 = a1[3];
    if (v68)
    {
      v29 = v4;
      if (v65)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v68 + 16))(v68, v66);
    }
    else
    {
      v29 = v4;
    }
    v11 = 0;
    v9 = 1;
LABEL_23:
    result = IPC::Decoder::decode<unsigned int>(a1);
    v4 = result;
    v31 = a1[1];
    v32 = *a1;
    v33 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v31 < v33 || v31 - v33 <= 7)
    {
      v69 = 0;
      v70 = 0;
      *a1 = 0;
      a1[1] = 0;
      v71 = a1[3];
      if (v71)
      {
        if (v31)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v71 + 16))(v71);
          v70 = *a1;
          v69 = a1[1];
        }
        else
        {
          v69 = 0;
          v70 = 0;
        }
      }
    }
    else
    {
      v34 = (unint64_t *)(v32 + v33);
      a1[2] = (unint64_t)(v34 + 1);
      if (v32)
      {
        v13 = 0;
        v7 = *v34;
        goto LABEL_27;
      }
      v69 = v31;
      v70 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v69)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v70, v69);
      v7 = 0;
      v32 = *a1;
      v31 = a1[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v7 = 0;
    }
    v13 = 1;
LABEL_27:
    v35 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v32;
    if (v31 < v35 || v31 - v35 <= 7)
      break;
    v36 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v36 + 1);
    if (!v32)
    {
      v72 = v31;
      v73 = 0;
      goto LABEL_84;
    }
    v37 = 0;
    v38 = *v36;
LABEL_31:
    if (v86
      && v88
      && v87
      && v85
      && v84
      && v24
      && v91
      && !(_DWORD)v9
      && (v4 & 0xFF00000000) != 0
      && !(_DWORD)v13
      && !v37)
    {
      *(_QWORD *)a2 = v29;
      *(_QWORD *)(a2 + 8) = v77;
      *(_QWORD *)(a2 + 16) = v76;
      *(_QWORD *)(a2 + 24) = v75 | v81;
      *(_QWORD *)(a2 + 32) = v80;
      *(_QWORD *)(a2 + 40) = v82 | v89;
      *(_QWORD *)(a2 + 48) = v83;
      *(_QWORD *)(a2 + 56) = v78 | v6;
      *(_QWORD *)(a2 + 64) = v79;
      *(_OWORD *)(a2 + 72) = v90;
      *(_QWORD *)(a2 + 88) = v11;
      *(_DWORD *)(a2 + 96) = v4;
      v39 = 1;
      *(_QWORD *)(a2 + 104) = v7;
      *(_QWORD *)(a2 + 112) = v38;
      goto LABEL_43;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    v40 = *a1;
    v41 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v41)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
  }
  v72 = 0;
  v73 = 0;
  *a1 = 0;
  a1[1] = 0;
  v74 = a1[3];
  if (v74)
  {
    if (v31)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v74 + 16))(v74);
      v73 = *a1;
      v72 = a1[1];
    }
    else
    {
      v72 = 0;
      v73 = 0;
    }
  }
LABEL_84:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v72)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v73, v72);
      if (*a1)
      {
        v38 = 0;
        v37 = 1;
        goto LABEL_31;
      }
    }
  }
  v39 = 0;
  *(_BYTE *)a2 = 0;
LABEL_43:
  *(_BYTE *)(a2 + 120) = v39;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::decode(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  unsigned int v31;
  char v32;
  unsigned __int8 **v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;

  v1 = (unsigned __int8 *)a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if ((unint64_t)v1 <= v3)
  {
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      v37 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        a1 = v37;
        v20 = *v37;
        v19 = (unsigned __int8 *)v37[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_18;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
    goto LABEL_46;
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v16 = (unsigned __int8 *)a1[3];
    if (v16)
    {
      v31 = v6;
      v35 = a1;
      if (v1)
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v16 + 16))(v16, v2);
        v8 = 0;
        a1 = v35;
        v2 = *v35;
        v1 = (unsigned __int8 *)v35[1];
        v7 = 1;
        v5 = v35[2];
        v6 = v31;
LABEL_5:
        v9 = v6 ? v8 : 0;
        v10 = v5 - v2;
        if ((unint64_t)v1 <= v10)
        {
          v28 = v9;
          v32 = v7;
          v16 = 0;
          v24 = a1[3];
          *a1 = 0;
          a1[1] = 0;
          v38 = a1;
          if (v24 && v1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
            a1 = v38;
            v2 = *v38;
            v16 = (unsigned __int8 *)v38[1];
          }
          else
          {
            v2 = 0;
          }
          v7 = v32;
          v9 = v28;
        }
        else
        {
          v11 = (unsigned __int8 *)(v2 + v10);
          v12 = v2 + v10 + 1;
          a1[2] = v12;
          if (v2)
          {
            v13 = 0;
            v14 = *v11 << 8;
            goto LABEL_11;
          }
          v16 = v1;
        }
      }
      else
      {
        v9 = 0;
        v16 = 0;
        v2 = 0;
        v7 = 1;
      }
    }
    else
    {
      v9 = 0;
      v2 = 0;
      v7 = 1;
    }
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (!v23)
    {
      v14 = 0;
      v16 = 0;
      v2 = 0;
      goto LABEL_24;
    }
    v27 = v9;
    v30 = v7;
    v34 = a1;
    if (!v16)
    {
      v14 = 0;
      v2 = 0;
      goto LABEL_24;
    }
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v23 + 16))(v23, v2, v16);
    v14 = 0;
    a1 = v34;
    v2 = *v34;
    v1 = (unsigned __int8 *)v34[1];
    v13 = 1;
    v12 = v34[2];
    v7 = v30;
    v9 = v27;
LABEL_11:
    v15 = v12 - v2;
    if ((unint64_t)v1 <= v15)
    {
      v29 = v14;
      v16 = 0;
      v25 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v39 = a1;
      if (v25 && v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        a1 = v39;
        v2 = *v39;
        v16 = (unsigned __int8 *)v39[1];
      }
      else
      {
        v2 = 0;
      }
      v14 = v29;
    }
    else
    {
      v16 = (unsigned __int8 *)(v2 + v15);
      a1[2] = v16 + 1;
      if (v2)
      {
        if ((v7 & 1) == 0 && !v13)
        {
          LODWORD(v16) = *v16 << 16;
          LODWORD(v17) = 0x1000000;
          return v14 | v16 | v9 | v17;
        }
        goto LABEL_45;
      }
      v16 = v1;
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (!v17)
    {
      LODWORD(v16) = 0;
      v9 = 0;
      return v14 | v16 | v9 | v17;
    }
    v26 = v14;
    v33 = (unsigned __int8 **)a1;
    if (!v16)
      break;
    a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v17 + 16))(v17, v2, v16);
    v16 = *v33;
    if (!*v33)
      break;
LABEL_45:
    __break(1u);
LABEL_46:
    v19 = v1;
    v20 = v2;
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      v36 = a1;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v6 = 0;
        a1 = v36;
        v2 = *v36;
        v1 = (unsigned __int8 *)v36[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
  }
  v9 = 0;
  LODWORD(v17) = 0;
  v14 = v26;
  return v14 | v16 | v9 | v17;
}

char *IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  char *result;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;

  IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::encode(a1, (_DWORD *)a2);
  v4 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 17));
  v5 = *(_BYTE *)(a2 + 19);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 20);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 21);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 22);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 23);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *(_BYTE *)(a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = *(_BYTE *)(a2 + 26);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = *(_BYTE *)(a2 + 27);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = *(_BYTE *)(a2 + 28);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = *(_BYTE *)(a2 + 29);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v16 = *(_BYTE *)(a2 + 30);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  v17 = *(_BYTE *)(a2 + 31);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v18 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 40));
  v19 = *(_BYTE *)(a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v20 = *(_BYTE *)(a2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v21 = *(_BYTE *)(a2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  v22 = *(_BYTE *)(a2 + 59);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
  v23 = *(_BYTE *)(a2 + 60);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  v24 = *(_BYTE *)(a2 + 61);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
  v25 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v25;
  v26 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 112));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 152));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 160));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 168));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 176));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>,void>::encode<IPC::Encoder,WebCore::ShareableBitmap>(a1, (WebCore::ShareableBitmap **)(a2 + 192));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 200));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 208));
  v27 = *(_DWORD *)(a2 + 216);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v27;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 220));
  v28 = *(unsigned __int8 *)(a2 + 272);
  v29 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v28)
  {
    *v29 = 1;
    if (!*(_BYTE *)(a2 + 272))
    {
      v36 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::decode(v36);
    }
    IPC::ArgumentCoder<WebCore::Cursor,void>::encode(a1, a2 + 240);
  }
  else
  {
    *v29 = 0;
  }
  IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, (int *)(a2 + 280));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 392));
  IPC::encodeObjectDirectly<NSArray>(a1, *(NSArray **)(a2 + 400));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 408));
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 432);
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 528);
  v30 = *(unsigned int *)(a2 + 636);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v30;
  v32 = *(_DWORD *)(a2 + 636);
  if (v32)
  {
    v33 = *(_QWORD *)(a2 + 624);
    v34 = v33 + 96 * v32;
    do
    {
      IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, v33);
      v35 = *(_BYTE *)(v33 + 80);
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v35;
      v33 += 96;
    }
    while (v33 != v34);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::decode@<X0>(unint64_t *a1@<X0>, __int128 *a2@<X8>)
{
  unint64_t v2;
  uint64_t *i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  char v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  unint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  char v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  unint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned int v90;
  char v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned int v95;
  char v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  unint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  char v107;
  _DWORD *v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  int v112;
  char v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  _DWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  WTF *v217;
  _OWORD *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  WTF::StringImpl *v226;
  int v227;
  WTF::StringImpl *v228;
  int v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  CFTypeRef v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  void *v242;
  WTF *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *result;
  WTF::StringImpl *v246;
  int v247;
  __int128 *v248;
  _OWORD *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _DWORD *v292;
  _DWORD *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char v297;
  int v298;
  char v299;
  int v300;
  char v301;
  int v302;
  char v303;
  int v304;
  char v305;
  int v306;
  char v307;
  int v308;
  char v309;
  int v310;
  char v311;
  int v312;
  char v313;
  int v314;
  char v315;
  int v316;
  char v317;
  int v318;
  char v319;
  int v320;
  char v321;
  int v322;
  char v323;
  int v324;
  char v325;
  int v326;
  char v327;
  int v328;
  char v329;
  int v330;
  char v331;
  int v332;
  int v333;
  char v334;
  int v335;
  unsigned int v336;
  int v337;
  char v338;
  unsigned int v339;
  __int128 *v340;
  unsigned int v341;
  unint64_t v342;
  __int128 v343;
  char v344;
  CFTypeRef cf;
  char v346;
  WTF::StringImpl *v347;
  char v348;
  __int128 v349[7];
  char v350;
  __int128 v351;
  WTF::StringImpl *v352;
  char v353;
  WTF::StringImpl *v354;
  char v355;
  WTF::StringImpl *v356;
  char v357;
  __int128 v358;
  char v359;
  WTF::StringImpl *v360;
  char v361;
  WTF::StringImpl *v362;
  char v363;
  WTF::StringImpl *v364;
  char v365;
  WTF::StringImpl *v366;
  __int128 v367;
  __int128 v368;
  char v369;
  WTF::StringImpl *v370;
  __int128 v371;
  __int128 v372;
  char v373;
  __int128 v374;
  char v375;
  _QWORD v376[2];
  char v377;
  WTF *v378;
  uint64_t v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  char v386;
  int v387;
  char v388;
  char v389;
  _OWORD v390[14];
  char v391;
  char v392;
  int v393;
  int v394;
  _BYTE v395[112];
  uint64_t v396[10];
  char v397;
  char v398;
  uint64_t v399;

  i = (uint64_t *)a1;
  v399 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::InteractionInformationRequest>(a1, v376);
  v5 = i[1];
  v6 = *i;
  v7 = i[2] - *i;
  if (v5 <= v7)
  {
    v128 = 0;
    v129 = 0;
    *i = 0;
    i[1] = 0;
    v130 = i[3];
    if (v130)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130);
        v129 = *i;
        v128 = i[1];
      }
      else
      {
        v128 = 0;
        v129 = 0;
      }
    }
    goto LABEL_141;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  i[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v128 = v5;
    v129 = 0;
LABEL_141:
    *i = 0;
    i[1] = 0;
    v131 = i[3];
    if (v131 && v128)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v131 + 16))(v131, v129, v128);
      v9 = 0;
      v6 = *i;
      v5 = i[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v9 = 0;
    }
    goto LABEL_143;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
LABEL_143:
  *i = 0;
  i[1] = 0;
  v132 = i[3];
  if (v132 && v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 16))(v132, v6);
  v11 = 0;
  v10 = 1;
LABEL_5:
  if (!v9)
    v11 = 0;
  v338 = v11;
  v337 = IPC::Decoder::decode<std::optional<BOOL>>(i);
  v12 = i[1];
  v13 = *i;
  v14 = i[2] - *i;
  if (v12 <= v14)
  {
    v133 = 0;
    v134 = 0;
    *i = 0;
    i[1] = 0;
    v135 = i[3];
    if (v135)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
        v134 = *i;
        v133 = i[1];
      }
      else
      {
        v133 = 0;
        v134 = 0;
      }
    }
    goto LABEL_146;
  }
  v15 = (unsigned __int8 *)(v13 + v14);
  i[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    v133 = v12;
    v134 = 0;
LABEL_146:
    v12 = 0;
    v13 = 0;
    *i = 0;
    i[1] = 0;
    v136 = i[3];
    if (v136)
    {
      if (v133)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v134, v133);
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_147;
  }
  v16 = *v15;
  if (v16 < 5)
  {
    v336 = v16 | 0x100;
    goto LABEL_11;
  }
LABEL_147:
  *i = 0;
  i[1] = 0;
  v137 = i[3];
  if (!v137)
  {
    v13 = 0;
    v336 = 0;
    v12 = 0;
    goto LABEL_149;
  }
  if (!v12)
  {
    v13 = 0;
    v336 = 0;
LABEL_149:
    *i = 0;
    i[1] = 0;
    v138 = i[3];
    if (v138)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v13);
        v139 = *i;
        v12 = i[1];
      }
      else
      {
        v139 = 0;
      }
    }
    else
    {
      v139 = 0;
      v12 = 0;
    }
    goto LABEL_151;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v13);
  v336 = 0;
  v13 = *i;
  v12 = i[1];
LABEL_11:
  if (v12 <= i[2] - v13)
    goto LABEL_149;
  v17 = (unsigned __int8 *)i[2];
  v18 = v17 + 1;
  i[2] = (uint64_t)(v17 + 1);
  if (!v13)
  {
    v139 = 0;
LABEL_151:
    *i = 0;
    i[1] = 0;
    v140 = i[3];
    if (v140)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 16))(v140, v139);
        v19 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v13 = 0;
        v19 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v19 = 0;
    }
    goto LABEL_153;
  }
  v19 = *v17;
  if (v19 < 2)
  {
    v335 = 0;
    v20 = 1;
    goto LABEL_15;
  }
LABEL_153:
  *i = 0;
  i[1] = 0;
  v141 = i[3];
  if (!v141)
  {
    v142 = 0;
    v13 = 0;
    v334 = 0;
    v335 = 1;
    goto LABEL_155;
  }
  v257 = v10;
  if (!v12)
  {
    v142 = 0;
    v13 = 0;
    v334 = 0;
    v335 = 1;
LABEL_556:
    v10 = v257;
LABEL_155:
    *i = 0;
    i[1] = 0;
    v143 = i[3];
    if (v143)
    {
      if (v142)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143 + 16))(v143, v13, v142);
        v24 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v24 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v24 = 0;
    }
    goto LABEL_157;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, v13);
  v20 = 0;
  v13 = *i;
  v12 = i[1];
  v335 = 1;
  v18 = (unsigned __int8 *)i[2];
LABEL_15:
  if (!v19)
    v20 = 0;
  v334 = v20;
  v21 = &v18[-v13];
  if (v12 <= (unint64_t)v21)
  {
    v257 = v10;
    v142 = 0;
    v285 = i[3];
    *i = 0;
    i[1] = 0;
    if (v285 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v285 + 16))(v285);
      v13 = *i;
      v142 = i[1];
      goto LABEL_155;
    }
    v13 = 0;
    goto LABEL_556;
  }
  v22 = &v21[v13];
  v23 = (uint64_t)&v21[v13 + 1];
  i[2] = v23;
  if (!v13)
  {
    v142 = v12;
    goto LABEL_155;
  }
  v24 = *v22;
  if (v24 < 2)
  {
    v333 = 0;
    v25 = 1;
    goto LABEL_21;
  }
LABEL_157:
  *i = 0;
  i[1] = 0;
  v144 = i[3];
  if (!v144)
  {
    v331 = 0;
    v145 = 0;
    v13 = 0;
    v333 = 1;
    goto LABEL_159;
  }
  v258 = v10;
  if (!v12)
  {
    v331 = 0;
    v145 = 0;
    v13 = 0;
    v333 = 1;
LABEL_558:
    v10 = v258;
LABEL_159:
    *i = 0;
    i[1] = 0;
    v146 = i[3];
    if (v146)
    {
      if (v145)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 16))(v146, v13, v145);
        v29 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v29 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v29 = 0;
    }
    goto LABEL_161;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v144 + 16))(v144, v13);
  v25 = 0;
  v13 = *i;
  v12 = i[1];
  v333 = 1;
  v23 = i[2];
LABEL_21:
  if (!v24)
    v25 = 0;
  v331 = v25;
  v26 = v23 - v13;
  if (v12 <= v26)
  {
    v258 = v10;
    v145 = 0;
    v284 = i[3];
    *i = 0;
    i[1] = 0;
    if (v284 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v284 + 16))(v284);
      v13 = *i;
      v145 = i[1];
      goto LABEL_159;
    }
    v13 = 0;
    goto LABEL_558;
  }
  v27 = (unsigned __int8 *)(v13 + v26);
  v28 = v13 + v26 + 1;
  i[2] = v28;
  if (!v13)
  {
    v145 = v12;
    goto LABEL_159;
  }
  v29 = *v27;
  if (v29 < 2)
  {
    v330 = 0;
    v30 = 1;
    goto LABEL_27;
  }
LABEL_161:
  *i = 0;
  i[1] = 0;
  v147 = i[3];
  if (!v147)
  {
    v148 = 0;
    v13 = 0;
    v329 = 0;
    v330 = 1;
    goto LABEL_163;
  }
  v259 = v10;
  if (!v12)
  {
    v148 = 0;
    v13 = 0;
    v329 = 0;
    v330 = 1;
LABEL_560:
    v10 = v259;
LABEL_163:
    *i = 0;
    i[1] = 0;
    v149 = i[3];
    if (v149)
    {
      if (v148)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v149 + 16))(v149, v13, v148);
        v34 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v34 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v34 = 0;
    }
    goto LABEL_165;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 16))(v147, v13);
  v30 = 0;
  v13 = *i;
  v12 = i[1];
  v330 = 1;
  v28 = i[2];
LABEL_27:
  if (!v29)
    v30 = 0;
  v329 = v30;
  v31 = v28 - v13;
  if (v12 <= v31)
  {
    v259 = v10;
    v148 = 0;
    v283 = i[3];
    *i = 0;
    i[1] = 0;
    if (v283 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v283 + 16))(v283);
      v13 = *i;
      v148 = i[1];
      goto LABEL_163;
    }
    v13 = 0;
    goto LABEL_560;
  }
  v32 = (unsigned __int8 *)(v13 + v31);
  v33 = v13 + v31 + 1;
  i[2] = v33;
  if (!v13)
  {
    v148 = v12;
    goto LABEL_163;
  }
  v34 = *v32;
  if (v34 < 2)
  {
    v328 = 0;
    v35 = 1;
    goto LABEL_33;
  }
LABEL_165:
  *i = 0;
  i[1] = 0;
  v150 = i[3];
  if (!v150)
  {
    v151 = 0;
    v13 = 0;
    v327 = 0;
    v328 = 1;
    goto LABEL_167;
  }
  v261 = v10;
  if (!v12)
  {
    v151 = 0;
    v13 = 0;
    v327 = 0;
    v328 = 1;
LABEL_566:
    v10 = v261;
LABEL_167:
    *i = 0;
    i[1] = 0;
    v152 = i[3];
    if (v152)
    {
      if (v151)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v13, v151);
        v39 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v39 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v39 = 0;
    }
    goto LABEL_169;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v13);
  v35 = 0;
  v13 = *i;
  v12 = i[1];
  v328 = 1;
  v33 = i[2];
LABEL_33:
  if (!v34)
    v35 = 0;
  v327 = v35;
  v36 = v33 - v13;
  if (v12 <= v36)
  {
    v261 = v10;
    v151 = 0;
    v282 = i[3];
    *i = 0;
    i[1] = 0;
    if (v282 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v282 + 16))(v282);
      v13 = *i;
      v151 = i[1];
      goto LABEL_167;
    }
    v13 = 0;
    goto LABEL_566;
  }
  v37 = (unsigned __int8 *)(v13 + v36);
  v38 = v13 + v36 + 1;
  i[2] = v38;
  if (!v13)
  {
    v151 = v12;
    goto LABEL_167;
  }
  v39 = *v37;
  if (v39 < 2)
  {
    v326 = 0;
    v40 = 1;
    goto LABEL_39;
  }
LABEL_169:
  *i = 0;
  i[1] = 0;
  v153 = i[3];
  if (!v153)
  {
    v154 = 0;
    v13 = 0;
    v325 = 0;
    v326 = 1;
    goto LABEL_171;
  }
  v263 = v10;
  if (!v12)
  {
    v154 = 0;
    v13 = 0;
    v325 = 0;
    v326 = 1;
LABEL_571:
    v10 = v263;
LABEL_171:
    *i = 0;
    i[1] = 0;
    v155 = i[3];
    if (v155)
    {
      if (v154)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v155 + 16))(v155, v13, v154);
        v44 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v44 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v44 = 0;
    }
    goto LABEL_173;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v13);
  v40 = 0;
  v13 = *i;
  v12 = i[1];
  v326 = 1;
  v38 = i[2];
LABEL_39:
  if (!v39)
    v40 = 0;
  v325 = v40;
  v41 = v38 - v13;
  if (v12 <= v41)
  {
    v263 = v10;
    v154 = 0;
    v281 = i[3];
    *i = 0;
    i[1] = 0;
    if (v281 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v281 + 16))(v281);
      v13 = *i;
      v154 = i[1];
      goto LABEL_171;
    }
    v13 = 0;
    goto LABEL_571;
  }
  v42 = (unsigned __int8 *)(v13 + v41);
  v43 = v13 + v41 + 1;
  i[2] = v43;
  if (!v13)
  {
    v154 = v12;
    goto LABEL_171;
  }
  v44 = *v42;
  if (v44 < 2)
  {
    v324 = 0;
    v45 = 1;
    goto LABEL_45;
  }
LABEL_173:
  *i = 0;
  i[1] = 0;
  v156 = i[3];
  if (!v156)
  {
    v157 = 0;
    v13 = 0;
    v323 = 0;
    v324 = 1;
    goto LABEL_175;
  }
  v265 = v10;
  if (!v12)
  {
    v157 = 0;
    v13 = 0;
    v323 = 0;
    v324 = 1;
LABEL_576:
    v10 = v265;
LABEL_175:
    *i = 0;
    i[1] = 0;
    v158 = i[3];
    if (v158)
    {
      if (v157)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158 + 16))(v158, v13, v157);
        v49 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v49 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v49 = 0;
    }
    goto LABEL_177;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v13);
  v45 = 0;
  v13 = *i;
  v12 = i[1];
  v324 = 1;
  v43 = i[2];
LABEL_45:
  if (!v44)
    v45 = 0;
  v323 = v45;
  v46 = v43 - v13;
  if (v12 <= v46)
  {
    v265 = v10;
    v157 = 0;
    v280 = i[3];
    *i = 0;
    i[1] = 0;
    if (v280 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
      v13 = *i;
      v157 = i[1];
      goto LABEL_175;
    }
    v13 = 0;
    goto LABEL_576;
  }
  v47 = (unsigned __int8 *)(v13 + v46);
  v48 = v13 + v46 + 1;
  i[2] = v48;
  if (!v13)
  {
    v157 = v12;
    goto LABEL_175;
  }
  v49 = *v47;
  if (v49 < 2)
  {
    v322 = 0;
    v50 = 1;
    goto LABEL_51;
  }
LABEL_177:
  *i = 0;
  i[1] = 0;
  v159 = i[3];
  if (!v159)
  {
    v160 = 0;
    v13 = 0;
    v321 = 0;
    v322 = 1;
    goto LABEL_179;
  }
  v267 = v10;
  if (!v12)
  {
    v160 = 0;
    v13 = 0;
    v321 = 0;
    v322 = 1;
LABEL_581:
    v10 = v267;
LABEL_179:
    *i = 0;
    i[1] = 0;
    v161 = i[3];
    if (v161)
    {
      if (v160)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161 + 16))(v161, v13, v160);
        v54 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v54 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v54 = 0;
    }
    goto LABEL_181;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 16))(v159, v13);
  v50 = 0;
  v13 = *i;
  v12 = i[1];
  v322 = 1;
  v48 = i[2];
LABEL_51:
  if (!v49)
    v50 = 0;
  v321 = v50;
  v51 = v48 - v13;
  if (v12 <= v51)
  {
    v267 = v10;
    v160 = 0;
    v279 = i[3];
    *i = 0;
    i[1] = 0;
    if (v279 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v279 + 16))(v279);
      v13 = *i;
      v160 = i[1];
      goto LABEL_179;
    }
    v13 = 0;
    goto LABEL_581;
  }
  v52 = (unsigned __int8 *)(v13 + v51);
  v53 = v13 + v51 + 1;
  i[2] = v53;
  if (!v13)
  {
    v160 = v12;
    goto LABEL_179;
  }
  v54 = *v52;
  if (v54 < 2)
  {
    v320 = 0;
    v55 = 1;
    goto LABEL_57;
  }
LABEL_181:
  *i = 0;
  i[1] = 0;
  v162 = i[3];
  if (!v162)
  {
    v163 = 0;
    v13 = 0;
    v319 = 0;
    v320 = 1;
    goto LABEL_183;
  }
  v268 = v10;
  if (!v12)
  {
    v163 = 0;
    v13 = 0;
    v319 = 0;
    v320 = 1;
LABEL_586:
    v10 = v268;
LABEL_183:
    *i = 0;
    i[1] = 0;
    v164 = i[3];
    if (v164)
    {
      if (v163)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v13, v163);
        v59 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v59 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v59 = 0;
    }
    goto LABEL_185;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 16))(v162, v13);
  v55 = 0;
  v13 = *i;
  v12 = i[1];
  v320 = 1;
  v53 = i[2];
LABEL_57:
  if (!v54)
    v55 = 0;
  v319 = v55;
  v56 = v53 - v13;
  if (v12 <= v56)
  {
    v268 = v10;
    v163 = 0;
    v278 = i[3];
    *i = 0;
    i[1] = 0;
    if (v278 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v278 + 16))(v278);
      v13 = *i;
      v163 = i[1];
      goto LABEL_183;
    }
    v13 = 0;
    goto LABEL_586;
  }
  v57 = (unsigned __int8 *)(v13 + v56);
  v58 = v13 + v56 + 1;
  i[2] = v58;
  if (!v13)
  {
    v163 = v12;
    goto LABEL_183;
  }
  v59 = *v57;
  if (v59 < 2)
  {
    v318 = 0;
    v60 = 1;
    goto LABEL_63;
  }
LABEL_185:
  *i = 0;
  i[1] = 0;
  v165 = i[3];
  if (!v165)
  {
    v166 = 0;
    v13 = 0;
    v317 = 0;
    v318 = 1;
    goto LABEL_187;
  }
  v270 = v10;
  if (!v12)
  {
    v166 = 0;
    v13 = 0;
    v317 = 0;
    v318 = 1;
LABEL_593:
    v10 = v270;
LABEL_187:
    *i = 0;
    i[1] = 0;
    v167 = i[3];
    if (v167)
    {
      if (v166)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, v13, v166);
        v64 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v64 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v64 = 0;
    }
    goto LABEL_189;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 16))(v165, v13);
  v60 = 0;
  v13 = *i;
  v12 = i[1];
  v318 = 1;
  v58 = i[2];
LABEL_63:
  if (!v59)
    v60 = 0;
  v317 = v60;
  v61 = v58 - v13;
  if (v12 <= v61)
  {
    v270 = v10;
    v166 = 0;
    v277 = i[3];
    *i = 0;
    i[1] = 0;
    if (v277 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v277 + 16))(v277);
      v13 = *i;
      v166 = i[1];
      goto LABEL_187;
    }
    v13 = 0;
    goto LABEL_593;
  }
  v62 = (unsigned __int8 *)(v13 + v61);
  v63 = v13 + v61 + 1;
  i[2] = v63;
  if (!v13)
  {
    v166 = v12;
    goto LABEL_187;
  }
  v64 = *v62;
  if (v64 < 2)
  {
    v316 = 0;
    v65 = 1;
    goto LABEL_69;
  }
LABEL_189:
  *i = 0;
  i[1] = 0;
  v168 = i[3];
  if (!v168)
  {
    v169 = 0;
    v13 = 0;
    v315 = 0;
    v316 = 1;
    goto LABEL_191;
  }
  v271 = v10;
  if (!v12)
  {
    v169 = 0;
    v13 = 0;
    v315 = 0;
    v316 = 1;
LABEL_598:
    v10 = v271;
LABEL_191:
    *i = 0;
    i[1] = 0;
    v170 = i[3];
    if (v170)
    {
      if (v169)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v13, v169);
        v69 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v69 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v69 = 0;
    }
    goto LABEL_193;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v168 + 16))(v168, v13);
  v65 = 0;
  v13 = *i;
  v12 = i[1];
  v316 = 1;
  v63 = i[2];
LABEL_69:
  if (!v64)
    v65 = 0;
  v315 = v65;
  v66 = v63 - v13;
  if (v12 <= v66)
  {
    v271 = v10;
    v169 = 0;
    v276 = i[3];
    *i = 0;
    i[1] = 0;
    if (v276 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v276 + 16))(v276);
      v13 = *i;
      v169 = i[1];
      goto LABEL_191;
    }
    v13 = 0;
    goto LABEL_598;
  }
  v67 = (unsigned __int8 *)(v13 + v66);
  v68 = v13 + v66 + 1;
  i[2] = v68;
  if (!v13)
  {
    v169 = v12;
    goto LABEL_191;
  }
  v69 = *v67;
  if (v69 < 2)
  {
    v314 = 0;
    v70 = 1;
    goto LABEL_75;
  }
LABEL_193:
  *i = 0;
  i[1] = 0;
  v171 = i[3];
  if (!v171)
  {
    v172 = 0;
    v13 = 0;
    v313 = 0;
    v314 = 1;
    goto LABEL_195;
  }
  v272 = v10;
  if (!v12)
  {
    v172 = 0;
    v13 = 0;
    v313 = 0;
    v314 = 1;
LABEL_602:
    v10 = v272;
LABEL_195:
    *i = 0;
    i[1] = 0;
    v173 = i[3];
    if (v173)
    {
      if (v172)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, v13, v172);
        v74 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v74 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v74 = 0;
    }
    goto LABEL_197;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v13);
  v70 = 0;
  v13 = *i;
  v12 = i[1];
  v314 = 1;
  v68 = i[2];
LABEL_75:
  if (!v69)
    v70 = 0;
  v313 = v70;
  v71 = v68 - v13;
  if (v12 <= v71)
  {
    v272 = v10;
    v172 = 0;
    v275 = i[3];
    *i = 0;
    i[1] = 0;
    if (v275 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v275 + 16))(v275);
      v13 = *i;
      v172 = i[1];
      goto LABEL_195;
    }
    v13 = 0;
    goto LABEL_602;
  }
  v72 = (unsigned __int8 *)(v13 + v71);
  v73 = v13 + v71 + 1;
  i[2] = v73;
  if (!v13)
  {
    v172 = v12;
    goto LABEL_195;
  }
  v74 = *v72;
  if (v74 < 2)
  {
    v312 = 0;
    v75 = 1;
    goto LABEL_81;
  }
LABEL_197:
  *i = 0;
  i[1] = 0;
  v174 = i[3];
  if (!v174)
  {
    v175 = 0;
    v13 = 0;
    v311 = 0;
    v312 = 1;
    goto LABEL_199;
  }
  v273 = v10;
  if (!v12)
  {
    v175 = 0;
    v13 = 0;
    v311 = 0;
    v312 = 1;
LABEL_607:
    v10 = v273;
LABEL_199:
    *i = 0;
    i[1] = 0;
    v176 = i[3];
    if (v176)
    {
      if (v175)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v176 + 16))(v176, v13, v175);
        v78 = 0;
        v13 = *i;
        v12 = i[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v78 = 0;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v78 = 0;
    }
    goto LABEL_201;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v174 + 16))(v174, v13);
  v75 = 0;
  v13 = *i;
  v12 = i[1];
  v312 = 1;
  v73 = i[2];
LABEL_81:
  if (!v74)
    v75 = 0;
  v311 = v75;
  v76 = v73 - v13;
  if (v12 <= v76)
  {
    v273 = v10;
    v175 = 0;
    v274 = i[3];
    *i = 0;
    i[1] = 0;
    if (v274 && v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v274 + 16))(v274);
      v13 = *i;
      v175 = i[1];
      goto LABEL_199;
    }
    v13 = 0;
    goto LABEL_607;
  }
  v77 = (unsigned __int8 *)(v13 + v76);
  i[2] = (uint64_t)(v77 + 1);
  if (!v13)
  {
    v175 = v12;
    goto LABEL_199;
  }
  v78 = *v77;
  if (v78 < 2)
  {
    v310 = 0;
    v79 = 1;
    goto LABEL_87;
  }
LABEL_201:
  *i = 0;
  i[1] = 0;
  v177 = i[3];
  if (!v177)
  {
LABEL_202:
    v79 = 0;
    v310 = 1;
    goto LABEL_87;
  }
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v177 + 16))(v177, v13);
    goto LABEL_202;
  }
  v79 = 0;
  v310 = 1;
LABEL_87:
  if (!v78)
    v79 = 0;
  v309 = v79;
  IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>>(&v374, i);
  v80 = i[1];
  v81 = *i;
  v82 = i[2] - *i;
  if (v80 <= v82)
  {
    v178 = 0;
    v179 = 0;
    *i = 0;
    i[1] = 0;
    v180 = i[3];
    if (v180)
    {
      if (v80)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v180 + 16))(v180);
        v179 = *i;
        v178 = i[1];
      }
      else
      {
        v178 = 0;
        v179 = 0;
      }
    }
    goto LABEL_204;
  }
  v83 = (unsigned __int8 *)(v81 + v82);
  v84 = v81 + v82 + 1;
  i[2] = v84;
  if (!v81)
  {
    v178 = v80;
    v179 = 0;
LABEL_204:
    *i = 0;
    i[1] = 0;
    v181 = i[3];
    if (v181)
    {
      if (v178)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181 + 16))(v181, v179, v178);
        v85 = 0;
        v81 = *i;
        v80 = i[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v85 = 0;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v85 = 0;
    }
    goto LABEL_206;
  }
  v85 = *v83;
  if (v85 < 2)
  {
    v308 = 0;
    v86 = 1;
    goto LABEL_93;
  }
LABEL_206:
  *i = 0;
  i[1] = 0;
  v182 = i[3];
  if (!v182)
  {
    v183 = 0;
    v81 = 0;
    v307 = 0;
    v308 = 1;
    goto LABEL_208;
  }
  v260 = v10;
  if (!v80)
  {
    v183 = 0;
    v81 = 0;
    v307 = 0;
    v308 = 1;
LABEL_564:
    v10 = v260;
LABEL_208:
    *i = 0;
    i[1] = 0;
    v184 = i[3];
    if (v184)
    {
      if (v183)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184 + 16))(v184, v81, v183);
        v90 = 0;
        v81 = *i;
        v80 = i[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v90 = 0;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v90 = 0;
    }
    goto LABEL_210;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 16))(v182, v81);
  v86 = 0;
  v81 = *i;
  v80 = i[1];
  v308 = 1;
  v84 = i[2];
LABEL_93:
  if (!v85)
    v86 = 0;
  v307 = v86;
  v87 = v84 - v81;
  if (v80 <= v87)
  {
    v260 = v10;
    v183 = 0;
    v290 = i[3];
    *i = 0;
    i[1] = 0;
    if (v290 && v80)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v290 + 16))(v290);
      v81 = *i;
      v183 = i[1];
      goto LABEL_208;
    }
    v81 = 0;
    goto LABEL_564;
  }
  v88 = (unsigned __int8 *)(v81 + v87);
  v89 = v81 + v87 + 1;
  i[2] = v89;
  if (!v81)
  {
    v183 = v80;
    goto LABEL_208;
  }
  v90 = *v88;
  if (v90 < 2)
  {
    v306 = 0;
    v91 = 1;
    goto LABEL_99;
  }
LABEL_210:
  *i = 0;
  i[1] = 0;
  v185 = i[3];
  if (!v185)
  {
    v186 = 0;
    v81 = 0;
    v305 = 0;
    v306 = 1;
    goto LABEL_212;
  }
  v262 = v10;
  if (!v80)
  {
    v186 = 0;
    v81 = 0;
    v305 = 0;
    v306 = 1;
LABEL_569:
    v10 = v262;
LABEL_212:
    *i = 0;
    i[1] = 0;
    v187 = i[3];
    if (v187)
    {
      if (v186)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, v81, v186);
        v95 = 0;
        v81 = *i;
        v80 = i[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v95 = 0;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v95 = 0;
    }
    goto LABEL_214;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v81);
  v91 = 0;
  v81 = *i;
  v80 = i[1];
  v306 = 1;
  v89 = i[2];
LABEL_99:
  if (!v90)
    v91 = 0;
  v305 = v91;
  v92 = v89 - v81;
  if (v80 <= v92)
  {
    v262 = v10;
    v186 = 0;
    v289 = i[3];
    *i = 0;
    i[1] = 0;
    if (v289 && v80)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v289 + 16))(v289);
      v81 = *i;
      v186 = i[1];
      goto LABEL_212;
    }
    v81 = 0;
    goto LABEL_569;
  }
  v93 = (unsigned __int8 *)(v81 + v92);
  v94 = v81 + v92 + 1;
  i[2] = v94;
  if (!v81)
  {
    v186 = v80;
    goto LABEL_212;
  }
  v95 = *v93;
  if (v95 < 2)
  {
    v304 = 0;
    v96 = 1;
    goto LABEL_105;
  }
LABEL_214:
  *i = 0;
  i[1] = 0;
  v188 = i[3];
  if (!v188)
  {
    v189 = 0;
    v81 = 0;
    v303 = 0;
    v304 = 1;
    goto LABEL_216;
  }
  v264 = v10;
  if (!v80)
  {
    v189 = 0;
    v81 = 0;
    v303 = 0;
    v304 = 1;
LABEL_574:
    v10 = v264;
LABEL_216:
    *i = 0;
    i[1] = 0;
    v190 = i[3];
    if (v190)
    {
      if (v189)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, v81, v189);
        v100 = 0;
        v81 = *i;
        v80 = i[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v100 = 0;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v100 = 0;
    }
    goto LABEL_218;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, v81);
  v96 = 0;
  v81 = *i;
  v80 = i[1];
  v304 = 1;
  v94 = i[2];
LABEL_105:
  if (!v95)
    v96 = 0;
  v303 = v96;
  v97 = v94 - v81;
  if (v80 <= v97)
  {
    v264 = v10;
    v189 = 0;
    v288 = i[3];
    *i = 0;
    i[1] = 0;
    if (v288 && v80)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v288 + 16))(v288);
      v81 = *i;
      v189 = i[1];
      goto LABEL_216;
    }
    v81 = 0;
    goto LABEL_574;
  }
  v98 = (unsigned __int8 *)(v81 + v97);
  v99 = v81 + v97 + 1;
  i[2] = v99;
  if (!v81)
  {
    v189 = v80;
    goto LABEL_216;
  }
  v100 = *v98;
  if (v100 < 2)
  {
    v302 = 0;
    v101 = 1;
    goto LABEL_111;
  }
LABEL_218:
  *i = 0;
  i[1] = 0;
  v191 = i[3];
  if (!v191)
  {
    v192 = 0;
    v81 = 0;
    v301 = 0;
    v302 = 1;
    goto LABEL_220;
  }
  v266 = v10;
  if (!v80)
  {
    v192 = 0;
    v81 = 0;
    v301 = 0;
    v302 = 1;
LABEL_579:
    v10 = v266;
LABEL_220:
    *i = 0;
    i[1] = 0;
    v193 = i[3];
    if (v193)
    {
      if (v192)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v193 + 16))(v193, v81, v192);
        v105 = 0;
        v81 = *i;
        v80 = i[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v105 = 0;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v105 = 0;
    }
    goto LABEL_222;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v191 + 16))(v191, v81);
  v101 = 0;
  v81 = *i;
  v80 = i[1];
  v302 = 1;
  v99 = i[2];
LABEL_111:
  if (!v100)
    v101 = 0;
  v301 = v101;
  v102 = v99 - v81;
  if (v80 <= v102)
  {
    v266 = v10;
    v192 = 0;
    v287 = i[3];
    *i = 0;
    i[1] = 0;
    if (v287 && v80)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v287 + 16))(v287);
      v81 = *i;
      v192 = i[1];
      goto LABEL_220;
    }
    v81 = 0;
    goto LABEL_579;
  }
  v103 = (unsigned __int8 *)(v81 + v102);
  v104 = v81 + v102 + 1;
  i[2] = v104;
  if (!v81)
  {
    v192 = v80;
    goto LABEL_220;
  }
  v105 = *v103;
  if (v105 < 2)
  {
    v106 = 0;
    v107 = 1;
    goto LABEL_117;
  }
LABEL_222:
  *i = 0;
  i[1] = 0;
  v194 = i[3];
  if (!v194)
  {
    LOBYTE(v108) = 0;
    v195 = 0;
    v81 = 0;
    v106 = 1;
    goto LABEL_224;
  }
  v269 = v10;
  if (!v80)
  {
    LOBYTE(v108) = 0;
    v195 = 0;
    v81 = 0;
    v106 = 1;
LABEL_588:
    v10 = v269;
LABEL_224:
    *i = 0;
    i[1] = 0;
    v196 = i[3];
    if (v196)
    {
      if (v195)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v196 + 16))(v196, v81, v195);
        v111 = 0;
        v81 = *i;
        v80 = i[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v111 = 0;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v111 = 0;
    }
    goto LABEL_226;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v194 + 16))(v194, v81);
  v107 = 0;
  v81 = *i;
  v80 = i[1];
  v106 = 1;
  v104 = i[2];
LABEL_117:
  if (v105)
    LOBYTE(v108) = v107;
  else
    LOBYTE(v108) = 0;
  v109 = v104 - v81;
  if (v80 <= v109)
  {
    v269 = v10;
    v195 = 0;
    v286 = i[3];
    *i = 0;
    i[1] = 0;
    if (v286 && v80)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v286 + 16))(v286);
      v81 = *i;
      v195 = i[1];
      goto LABEL_224;
    }
    v81 = 0;
    goto LABEL_588;
  }
  v110 = (unsigned __int8 *)(v81 + v109);
  i[2] = (uint64_t)(v110 + 1);
  if (!v81)
  {
    v195 = v80;
    goto LABEL_224;
  }
  v111 = *v110;
  if (v111 < 2)
  {
    v112 = 0;
    v113 = 1;
    goto LABEL_124;
  }
LABEL_226:
  *i = 0;
  i[1] = 0;
  v197 = i[3];
  if (!v197)
  {
LABEL_227:
    v113 = 0;
    v112 = 1;
    goto LABEL_124;
  }
  if (v80)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 16))(v197, v81);
    goto LABEL_227;
  }
  v113 = 0;
  v112 = 1;
LABEL_124:
  if (!v111)
    v113 = 0;
  v297 = v113;
  v295 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)i);
  v296 = v114;
  if (!v114)
  {
    v198 = *i;
    v199 = i[1];
    *i = 0;
    i[1] = 0;
    v200 = i[3];
    if (v200)
    {
      if (v199)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 16))(v200, v198);
    }
  }
  IPC::Decoder::decode<WTF::URL>(i, &v370);
  IPC::Decoder::decode<WTF::URL>(i, &v366);
  IPC::Decoder::decode<WTF::String>(i, &v364);
  IPC::Decoder::decode<WTF::String>(i, &v362);
  IPC::Decoder::decode<WTF::String>(i, &v360);
  IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)i, (uint64_t)&v358);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>((WTF::MachSendRight *)&v356, (IPC::Decoder *)i);
  IPC::Decoder::decode<WTF::String>(i, &v354);
  IPC::Decoder::decode<WTF::String>(i, &v352);
  v298 = v112;
  v299 = (char)v108;
  v300 = v106;
  v294 = IPC::Decoder::decode<float>(i);
  v342 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)i);
  v116 = v115;
  if (!v115)
  {
    v201 = *i;
    v202 = i[1];
    *i = 0;
    i[1] = 0;
    v203 = i[3];
    if (v203)
    {
      if (v202)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v203 + 16))(v203, v201);
    }
  }
  v117 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)i);
  v120 = (_DWORD *)v117;
  v121 = v118;
  if (!(_BYTE)v118)
  {
    v118 = (void *)*i;
    v119 = i[1];
    *i = 0;
    i[1] = 0;
    v117 = i[3];
    if (v117)
    {
      if (v119)
      {
        v108 = v120;
        v117 = (*(uint64_t (**)(unint64_t, void *))(*(_QWORD *)v117 + 16))(v117, v118);
        v120 = v108;
      }
    }
  }
  v122 = v376;
  v123 = *i;
  v293 = v120;
  if (!*i)
  {
    v204 = i[1];
    *i = 0;
    i[1] = 0;
    v205 = i[3];
    if (v205)
    {
      if (v204)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v205 + 16))(v205, 0);
        LOBYTE(v342) = 0;
        v121 = 0;
        v124 = *i;
        goto LABEL_133;
      }
      v125 = i[1];
      v291 = i[2];
      if (v125 > v291)
      {
        v121 = 0;
        LOBYTE(v342) = 0;
        v207 = 0;
        i[2] = v291 + 1;
LABEL_241:
        *i = 0;
        i[1] = 0;
        v208 = i[3];
        if (v208)
        {
          if (v125)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v208 + 16))(v208, v207);
            v124 = *i;
            v125 = i[1];
          }
          else
          {
            v124 = 0;
          }
        }
        else
        {
          v124 = 0;
          v125 = 0;
        }
LABEL_243:
        *i = 0;
        i[1] = 0;
        v209 = i[3];
        if (v209 && v125)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v124);
        goto LABEL_244;
      }
      v124 = 0;
      v121 = 0;
      LOBYTE(v342) = 0;
    }
    else
    {
      v124 = 0;
      v121 = 0;
      LOBYTE(v342) = 0;
      v125 = 0;
    }
LABEL_239:
    *i = 0;
    i[1] = 0;
    v206 = i[3];
    if (v206)
    {
      if (v125)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v206 + 16))(v206, v124);
        v207 = *i;
        v125 = i[1];
      }
      else
      {
        v207 = 0;
      }
    }
    else
    {
      v207 = 0;
      v125 = 0;
    }
    goto LABEL_241;
  }
  if (!v116 || !v121)
    goto LABEL_366;
  v121 = v342 & 0xFFFFFFFFFFFFFF00;
  v124 = *i;
LABEL_133:
  v125 = i[1];
  if (v125 <= i[2] - v124)
    goto LABEL_239;
  v126 = (unsigned __int8 *)i[2];
  i[2] = (uint64_t)(v126 + 1);
  if (!v124)
  {
    v207 = 0;
    goto LABEL_241;
  }
  v127 = *v126;
  if (v127 >= 2)
    goto LABEL_243;
  if (!v127)
  {
    LOBYTE(v108) = 0;
    v341 = 0;
    v339 = 1;
    goto LABEL_246;
  }
  IPC::Decoder::decode<WebCore::Cursor>((unint64_t *)i, &v380);
  if ((_BYTE)v382)
  {
    v339 = 0;
    v341 = 0;
    LOBYTE(v108) = v380;
    v292 = (_DWORD *)*((_QWORD *)&v380 + 1);
    v351 = v381;
    goto LABEL_246;
  }
LABEL_244:
  v210 = *i;
  v211 = i[1];
  *i = 0;
  i[1] = 0;
  v212 = i[3];
  if (v212 && v211)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v212 + 16))(v212, v210);
  LOBYTE(v108) = 0;
  v341 = 1;
LABEL_246:
  IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)i, v349);
  v332 = v10;
  IPC::Decoder::decode<WTF::String>(i, &v347);
  v340 = a2;
  *(_QWORD *)&v380 = objc_opt_class();
  *((_QWORD *)&v380 + 1) = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFE8])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet(v396, (uint64_t *)&v380, 2);
  a2 = &v380;
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(i + 7, (_QWORD **)v396);
  IPC::decodeRequiringAllowedClasses<NSArray,NSArray*>((uint64_t)&cf, i);
  if (v396[0])
    WTF::fastFree((WTF *)(v396[0] - 16), v213);
  IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)i, (uint64_t)&v343);
  IPC::Decoder::decode<std::optional<WebCore::ElementContext>>((unint64_t *)i, (uint64_t)v396);
  IPC::Decoder::decode<std::optional<WebCore::ElementContext>>((unint64_t *)i, (uint64_t)v395);
  v117 = IPC::Decoder::decode<unsigned long long>(i);
  if (!(_BYTE)v118)
    goto LABEL_311;
  v2 = v117;
  v379 = 0;
  v378 = 0;
  if (v117 >= 0x2AAA)
  {
    LODWORD(v116) = 96;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ElementAnimationContext>((uint64_t)&v380, (unint64_t *)i);
      if (!v386)
        goto LABEL_309;
      v247 = HIDWORD(v379);
      if (HIDWORD(v379) == (_DWORD)v379)
      {
        v248 = (__int128 *)WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v378, HIDWORD(v379) + 1, (unint64_t)&v380);
        v247 = HIDWORD(v379);
        v249 = (_OWORD *)((char *)v378 + 96 * HIDWORD(v379));
        v250 = *v248;
        v249[1] = v248[1];
        v251 = v248[5];
        v253 = v248[2];
        v252 = v248[3];
        v249[4] = v248[4];
        v249[5] = v251;
        v249[2] = v253;
        v249[3] = v252;
      }
      else
      {
        v249 = (_OWORD *)((char *)v378 + 96 * HIDWORD(v379));
        v250 = v380;
        v249[1] = v381;
        v254 = v383;
        v255 = v385;
        v256 = v382;
        v249[4] = v384;
        v249[5] = v255;
        v249[2] = v256;
        v249[3] = v254;
      }
      *v249 = v250;
      HIDWORD(v379) = v247 + 1;
      if (!--v2)
      {
        v117 = WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v378, (v247 + 1));
        v217 = v378;
        LODWORD(v2) = v379;
        LODWORD(v116) = HIDWORD(v379);
        goto LABEL_259;
      }
    }
  }
  if (v117)
  {
    v214 = 96 * v117;
    v215 = WTF::fastMalloc((WTF *)(96 * v117));
    LODWORD(v379) = v214 / 0x60;
    v378 = (WTF *)v215;
    while (1)
    {
      v117 = IPC::Decoder::decode<WebCore::ElementAnimationContext>((uint64_t)&v380, (unint64_t *)i);
      if (!v386)
        break;
      v216 = HIDWORD(v379);
      if (HIDWORD(v379) == (_DWORD)v379)
      {
        v117 = WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v378, HIDWORD(v379) + 1, (unint64_t)&v380);
        v216 = HIDWORD(v379);
        v217 = v378;
        v218 = (_OWORD *)((char *)v378 + 96 * HIDWORD(v379));
        v219 = *(_OWORD *)v117;
        v218[1] = *(_OWORD *)(v117 + 16);
        v220 = *(_OWORD *)(v117 + 80);
        v222 = *(_OWORD *)(v117 + 32);
        v221 = *(_OWORD *)(v117 + 48);
        v218[4] = *(_OWORD *)(v117 + 64);
        v218[5] = v220;
        v218[2] = v222;
        v218[3] = v221;
      }
      else
      {
        v217 = v378;
        v218 = (_OWORD *)((char *)v378 + 96 * HIDWORD(v379));
        v219 = v380;
        v218[1] = v381;
        v223 = v383;
        v224 = v385;
        v225 = v382;
        v218[4] = v384;
        v218[5] = v224;
        v218[2] = v225;
        v218[3] = v223;
      }
      *v218 = v219;
      LODWORD(v116) = v216 + 1;
      HIDWORD(v379) = v216 + 1;
      if (!--v2)
      {
        LODWORD(v2) = v379;
        goto LABEL_259;
      }
    }
LABEL_309:
    v243 = v378;
    if (v378)
    {
      v378 = 0;
      LODWORD(v379) = 0;
      WTF::fastFree(v243, v118);
    }
LABEL_311:
    v118 = (void *)*i;
    v119 = i[1];
    *i = 0;
    i[1] = 0;
    v117 = i[3];
    if (v117)
      goto LABEL_367;
LABEL_312:
    *(_BYTE *)v340 = 0;
    *((_BYTE *)v340 + 640) = 0;
    goto LABEL_313;
  }
  LODWORD(v116) = 0;
  v217 = 0;
LABEL_259:
  if (!*i)
  {
    *(_BYTE *)v340 = 0;
    *((_BYTE *)v340 + 640) = 0;
    if (v217)
      WTF::fastFree(v217, v118);
LABEL_313:
    LODWORD(v121) = v341;
    v108 = v292;
    LODWORD(v122) = v339;
    goto LABEL_314;
  }
  for (i = 0; ; i = (uint64_t *)1)
  {
    if (v377)
    {
      *(_QWORD *)((char *)v122 + 36) = v376[0];
      *(_QWORD *)((char *)v122 + 43) = *(_QWORD *)((char *)v122 + 7);
      if (!v332)
      {
        LOBYTE(v381) = v338;
        if ((v337 & 0xFF0000) != 0)
        {
          *(_WORD *)((char *)v122 + 53) = v337;
          if (v336 > 0xFF)
          {
            BYTE3(v381) = v336;
            if (!v335)
            {
              BYTE4(v381) = v334;
              if (!v333)
              {
                BYTE5(v381) = v331;
                if (!v330)
                {
                  BYTE6(v381) = v329;
                  if (!v328)
                  {
                    BYTE7(v381) = v327;
                    if (!v326)
                    {
                      BYTE8(v381) = v325;
                      if (!v324)
                      {
                        BYTE9(v381) = v323;
                        if (!v322)
                        {
                          BYTE10(v381) = v321;
                          if (!v320)
                          {
                            BYTE11(v381) = v319;
                            if (!v318)
                            {
                              BYTE12(v381) = v317;
                              if (!v316)
                              {
                                BYTE13(v381) = v315;
                                if (!v314)
                                {
                                  BYTE14(v381) = v313;
                                  if (!v312)
                                  {
                                    HIBYTE(v381) = v311;
                                    if (!v310)
                                    {
                                      LOBYTE(v382) = v309;
                                      if (v375)
                                      {
                                        *(_OWORD *)((char *)v122 + 76) = v374;
                                        if (!v308)
                                        {
                                          BYTE8(v383) = v307;
                                          if (!v306)
                                          {
                                            BYTE9(v383) = v305;
                                            if (!v304)
                                            {
                                              BYTE10(v383) = v303;
                                              if (!v302)
                                              {
                                                BYTE11(v383) = v301;
                                                if (!v300)
                                                {
                                                  BYTE12(v383) = v299;
                                                  if (!v298)
                                                  {
                                                    BYTE13(v383) = v297;
                                                    if (v296)
                                                    {
                                                      *(_QWORD *)((char *)v122 + 100) = v295;
                                                      if (v373)
                                                      {
                                                        v226 = v370;
                                                        v370 = 0;
                                                        *(_QWORD *)((char *)v122 + 108) = v226;
                                                        v227 = v371;
                                                        *(_OWORD *)((char *)v122 + 116) = v371;
                                                        *(_OWORD *)((char *)v122 + 132) = v372;
                                                        LODWORD(v371) = v227 & 0xFFFFFFFE;
                                                        if (v369)
                                                        {
                                                          v228 = v366;
                                                          v366 = 0;
                                                          *(_QWORD *)((char *)v122 + 148) = v228;
                                                          v229 = v367;
                                                          *(_OWORD *)((char *)v122 + 156) = v367;
                                                          *(_OWORD *)((char *)v122 + 172) = v368;
                                                          LODWORD(v367) = v229 & 0xFFFFFFFE;
                                                          if (v365)
                                                          {
                                                            v230 = v364;
                                                            v364 = 0;
                                                            *(_QWORD *)((char *)v122 + 188) = v230;
                                                            if (v363)
                                                            {
                                                              v231 = v362;
                                                              v362 = 0;
                                                              *(_QWORD *)((char *)v122 + 196) = v231;
                                                              if (v361)
                                                              {
                                                                v232 = v360;
                                                                v360 = 0;
                                                                *(_QWORD *)((char *)v122 + 204) = v232;
                                                                if (v359)
                                                                {
                                                                  *(_OWORD *)((char *)v122 + 212) = v358;
                                                                  if (v357)
                                                                  {
                                                                    v233 = (uint64_t)v356;
                                                                    v356 = 0;
                                                                    *(_QWORD *)((char *)v122 + 228) = v233;
                                                                    if (v355)
                                                                    {
                                                                      v234 = v354;
                                                                      v354 = 0;
                                                                      *(_QWORD *)((char *)v122 + 236) = v234;
                                                                      if (v353)
                                                                      {
                                                                        v235 = v352;
                                                                        v352 = 0;
                                                                        *(_QWORD *)((char *)v122 + 244) = v235;
                                                                        if ((v294 & 0xFF00000000) != 0)
                                                                        {
                                                                          v387 = v294;
                                                                          if (v123)
                                                                          {
                                                                            *(_QWORD *)((char *)a2 + 220) = v121 | v342;
                                                                            *(_QWORD *)((char *)a2 + 228) = v293;
                                                                            v121 = v341;
                                                                            if (!v341)
                                                                            {
                                                                              v388 = 0;
                                                                              v389 = 0;
                                                                              v122 = (_QWORD *)v339;
                                                                              if ((v339 & 1) != 0)
                                                                              {
                                                                                v108 = v292;
                                                                              }
                                                                              else
                                                                              {
                                                                                v388 = (char)v108;
                                                                                *((_QWORD *)a2 + 31) = v292;
                                                                                a2[16] = v351;
                                                                                v389 = 1;
                                                                                v108 = 0;
                                                                              }
                                                                              if (v350)
                                                                              {
                                                                                v117 = WebCore::TextIndicatorData::TextIndicatorData((uint64_t)v390, v349);
                                                                                if (v348)
                                                                                {
                                                                                  v236 = v347;
                                                                                  v347 = 0;
                                                                                  *((_QWORD *)a2 + 49) = v236;
                                                                                  if (v346)
                                                                                  {
                                                                                    v237 = cf;
                                                                                    cf = 0;
                                                                                    *((_QWORD *)a2 + 50) = v237;
                                                                                    if (v344)
                                                                                    {
                                                                                      v390[8] = v343;
                                                                                      if (v398)
                                                                                      {
                                                                                        v238 = a2[50];
                                                                                        a2[29] = a2[49];
                                                                                        a2[30] = v238;
                                                                                        a2[31] = a2[51];
                                                                                        v391 = v397;
                                                                                        v239 = a2[48];
                                                                                        a2[27] = a2[47];
                                                                                        a2[28] = v239;
                                                                                        if (v395[96])
                                                                                        {
                                                                                          v240 = a2[43];
                                                                                          a2[35] = a2[42];
                                                                                          a2[36] = v240;
                                                                                          a2[37] = a2[44];
                                                                                          v392 = v395[80];
                                                                                          v241 = a2[41];
                                                                                          a2[33] = a2[40];
                                                                                          a2[34] = v241;
                                                                                          if (!(_DWORD)i)
                                                                                            break;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_366:
    __break(1u);
LABEL_367:
    if (!v119)
      goto LABEL_312;
    v117 = (*(uint64_t (**)(unint64_t, void *))(*(_QWORD *)v117 + 16))(v117, v118);
    if (!*i)
      goto LABEL_312;
    v217 = 0;
  }
  *((_QWORD *)a2 + 78) = v217;
  v393 = v2;
  v394 = v116;
  *(_BYTE *)(WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((uint64_t)v340, (uint64_t)&v380)
           + 640) = 1;
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&v380, v242);
LABEL_314:
  if (v346 && cf)
    CFRelease(cf);
  if (v348)
  {
    v244 = v347;
    v347 = 0;
    if (v244)
    {
      if (*(_DWORD *)v244 == 2)
        WTF::StringImpl::destroy(v244, (WTF::StringImpl *)v118);
      else
        *(_DWORD *)v244 -= 2;
    }
  }
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v349, v118);
  if (((v122 | v121) & 1) == 0 && v108)
  {
    if (v108[2] == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v108 + 8))(v108);
    else
      --v108[2];
  }
  if (v353)
  {
    result = v352;
    v352 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v355)
  {
    result = v354;
    v354 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v357)
  {
    result = v356;
    if (v356)
      result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v356, v246);
  }
  if (v361)
  {
    result = v360;
    v360 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v363)
  {
    result = v362;
    v362 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v365)
  {
    result = v364;
    v364 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v369)
  {
    result = v366;
    v366 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v373)
  {
    result = v370;
    v370 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v246);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E28274(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,int a36,uint64_t a37,int a38,int a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,CFTypeRef cf,char a45,WTF::StringImpl *a46,char a47,int a48,__int16 a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  WTF::StringImpl *a67;
  char a68;
  WTF::StringImpl *a69;
  char a70;
  uint64_t a71;
  char a72;
  uint64_t v72;
  WTF *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;

  v74 = *(WTF **)(v72 + 20);
  if (v74)
  {
    *(_QWORD *)(v72 + 20) = 0;
    LODWORD(STACK[0x2C8]) = 0;
    WTF::fastFree(v74, a2);
  }
  if (a45 && cf)
    CFRelease(cf);
  if (a47 && a46)
  {
    if (*(_DWORD *)a46 == 2)
      WTF::StringImpl::destroy(a46, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a46 -= 2;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a49, a2);
  if (((a36 | a39) & 1) == 0 && a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  if (a68)
  {
    v76 = a67;
    a67 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v75);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (a70)
  {
    v77 = a69;
    a69 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v75);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (a72 && a71)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(a71, v75);
  if (LOBYTE(STACK[0x208]))
  {
    v78 = (WTF::StringImpl *)STACK[0x200];
    STACK[0x200] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v75);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (LOBYTE(STACK[0x218]))
  {
    v79 = (WTF::StringImpl *)STACK[0x210];
    STACK[0x210] = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v75);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (LOBYTE(STACK[0x228]))
  {
    v80 = (WTF::StringImpl *)STACK[0x220];
    STACK[0x220] = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v75);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  if (LOBYTE(STACK[0x258]))
  {
    v81 = (WTF::StringImpl *)STACK[0x230];
    STACK[0x230] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, v75);
      else
        *(_DWORD *)v81 -= 2;
    }
  }
  if (LOBYTE(STACK[0x288]))
  {
    v82 = (WTF::StringImpl *)STACK[0x260];
    STACK[0x260] = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v75);
      else
        *(_DWORD *)v82 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WebKit::InteractionInformationRequest>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::decode(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::MachSendRight *IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>(WTF::MachSendRight *result, IPC::Decoder *a2)
{
  WTF::MachSendRight *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = result;
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v12 = *((_QWORD *)a2 + 3);
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *(_QWORD *)a2;
        v10 = *((_QWORD *)a2 + 1);
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  *((_QWORD *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v13 = *((_QWORD *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *(_QWORD *)a2;
        v6 = *((_QWORD *)a2 + 1);
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v14 = *((_QWORD *)a2 + 3);
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 8) = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(_QWORD *)result = 0;
    goto LABEL_8;
  }
  result = IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::decode(a2, &v17);
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
  if (v18)
  {
    *(_QWORD *)v3 = v17;
LABEL_8:
    *((_BYTE *)v3 + 8) = 1;
    return result;
  }
LABEL_13:
  v15 = *(_QWORD *)a2;
  v16 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  result = (WTF::MachSendRight *)*((_QWORD *)a2 + 3);
  if (result)
  {
    if (v16)
      return (WTF::MachSendRight *)(*(uint64_t (**)(WTF::MachSendRight *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

WTF *IPC::Decoder::decode<WebCore::TextIndicatorData>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::decode(a1, a2);
  if (!a2[112])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E288B0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 10);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 11);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 13);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 14);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v46 = *a1;
    v47 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48 && v47 != 0)
    {
      v198 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      result = v198;
      v6 = 0;
    }
  }
  v7 = a1[1];
  v8 = *a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    v50 = 0;
    v51 = 0;
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52)
    {
      v213 = result;
      v234 = v6;
      if (v7)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v52 + 16))(v52);
        v51 = *a1;
        v50 = a1[1];
      }
      else
      {
        v50 = 0;
        v51 = 0;
      }
      result = v213;
      v6 = v234;
    }
    goto LABEL_57;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  v11 = v8 + v9 + 1;
  a1[2] = v11;
  if (!v8)
  {
    v50 = v7;
    v51 = 0;
LABEL_57:
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53)
    {
      v212 = result;
      v233 = v6;
      if (v50)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
        v12 = 0;
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v12 = 0;
      }
      result = v212;
      v6 = v233;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v12 = 0;
    }
    goto LABEL_59;
  }
  v12 = *v10;
  if (v12 < 2)
  {
    v13 = 0;
    v14 = 1;
    goto LABEL_6;
  }
LABEL_59:
  *a1 = 0;
  a1[1] = 0;
  v54 = a1[3];
  if (!v54)
  {
    v14 = 0;
    v8 = 0;
    v13 = 1;
    goto LABEL_61;
  }
  v191 = v12;
  v211 = result;
  v232 = v6;
  if (!v7)
  {
    v14 = 0;
    v54 = 0;
    v8 = 0;
    v13 = 1;
LABEL_61:
    *a1 = 0;
    a1[1] = 0;
    v16 = (unsigned __int8 *)a1[3];
    if (v16)
    {
      v190 = v14;
      v172 = v13;
      v210 = result;
      v231 = v6;
      if (v54)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v8, v54);
        LODWORD(v16) = 0;
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        LODWORD(v16) = 0;
      }
      result = v210;
      v6 = v231;
      v13 = v172;
      v14 = v190;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    goto LABEL_63;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v54 + 16))(v54, v8);
  v14 = 0;
  v8 = *a1;
  v7 = a1[1];
  v13 = 1;
  v11 = a1[2];
  result = v211;
  v6 = v232;
  v12 = v191;
LABEL_6:
  if (!v12)
    v14 = 0;
  v15 = v11 - v8;
  if (v7 <= v15)
  {
    v192 = v14;
    v173 = v13;
    v214 = result;
    v235 = v6;
    v54 = 0;
    v60 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v60 && v7)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v60 + 16))(v60);
      v8 = *a1;
      v54 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    result = v214;
    v6 = v235;
    v13 = v173;
    v14 = v192;
    goto LABEL_61;
  }
  v16 = (unsigned __int8 *)(v8 + v15);
  v17 = v8 + v15 + 1;
  a1[2] = v17;
  if (!v8)
  {
    v54 = v7;
    goto LABEL_61;
  }
  LODWORD(v16) = *v16;
  if (v16 < 2)
  {
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
LABEL_63:
  *a1 = 0;
  a1[1] = 0;
  v55 = a1[3];
  if (!v55)
  {
    v19 = 0;
    v8 = 0;
    v18 = 1;
    goto LABEL_65;
  }
  v155 = (int)v16;
  v189 = v14;
  v171 = v13;
  v209 = result;
  v230 = v6;
  if (!v7)
  {
    v19 = 0;
    v55 = 0;
    v8 = 0;
    v18 = 1;
LABEL_65:
    *a1 = 0;
    a1[1] = 0;
    v21 = (unsigned __int8 *)a1[3];
    if (v21)
    {
      v139 = v18;
      v154 = v19;
      v188 = v14;
      v170 = v13;
      v208 = result;
      v229 = v6;
      if (v55)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v8, v55);
        LODWORD(v21) = 0;
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        LODWORD(v21) = 0;
      }
      result = v208;
      v6 = v229;
      v19 = v154;
      v13 = v170;
      v14 = v188;
      v18 = v139;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    goto LABEL_67;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v55 + 16))(v55, v8);
  v19 = 0;
  v8 = *a1;
  v7 = a1[1];
  v18 = 1;
  v17 = a1[2];
  result = v209;
  v6 = v230;
  LODWORD(v16) = v155;
  v13 = v171;
  v14 = v189;
LABEL_12:
  if (!(_DWORD)v16)
    v19 = 0;
  v20 = v17 - v8;
  if (v7 <= v20)
  {
    v140 = v18;
    v156 = v19;
    v193 = v14;
    v174 = v13;
    v215 = result;
    v236 = v6;
    v55 = 0;
    v61 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v61 && v7)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v61 + 16))(v61);
      v8 = *a1;
      v55 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    result = v215;
    v6 = v236;
    v19 = v156;
    v13 = v174;
    v14 = v193;
    v18 = v140;
    goto LABEL_65;
  }
  v21 = (unsigned __int8 *)(v8 + v20);
  v22 = v8 + v20 + 1;
  a1[2] = v22;
  if (!v8)
  {
    v55 = v7;
    goto LABEL_65;
  }
  LODWORD(v21) = *v21;
  if (v21 < 2)
  {
    v23 = 0;
    v24 = 1;
    goto LABEL_18;
  }
LABEL_67:
  *a1 = 0;
  a1[1] = 0;
  v56 = a1[3];
  if (!v56)
  {
    v24 = 0;
    v8 = 0;
    v23 = 1;
    goto LABEL_69;
  }
  v125 = (int)v21;
  v138 = v18;
  v153 = v19;
  v187 = v14;
  v169 = v13;
  v207 = result;
  v228 = v6;
  if (!v7)
  {
    v24 = 0;
    v56 = 0;
    v8 = 0;
    v23 = 1;
LABEL_69:
    *a1 = 0;
    a1[1] = 0;
    v26 = (unsigned __int8 *)a1[3];
    if (v26)
    {
      v112 = v23;
      v124 = v24;
      v137 = v18;
      v152 = v19;
      v186 = v14;
      v168 = v13;
      v206 = result;
      v227 = v6;
      if (v56)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v8, v56);
        LODWORD(v26) = 0;
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        LODWORD(v26) = 0;
      }
      result = v206;
      v6 = v227;
      v19 = v152;
      v13 = v168;
      v14 = v186;
      v24 = v124;
      v18 = v137;
      v23 = v112;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    goto LABEL_71;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v56 + 16))(v56, v8);
  v24 = 0;
  v8 = *a1;
  v7 = a1[1];
  v23 = 1;
  v22 = a1[2];
  result = v207;
  v6 = v228;
  v19 = v153;
  v13 = v169;
  v14 = v187;
  LODWORD(v21) = v125;
  v18 = v138;
LABEL_18:
  if (!(_DWORD)v21)
    v24 = 0;
  v25 = v22 - v8;
  if (v7 <= v25)
  {
    v113 = v23;
    v126 = v24;
    v141 = v18;
    v157 = v19;
    v194 = v14;
    v175 = v13;
    v216 = result;
    v237 = v6;
    v56 = 0;
    v62 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v62 && v7)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v62 + 16))(v62);
      v8 = *a1;
      v56 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    result = v216;
    v6 = v237;
    v19 = v157;
    v13 = v175;
    v14 = v194;
    v24 = v126;
    v18 = v141;
    v23 = v113;
    goto LABEL_69;
  }
  v26 = (unsigned __int8 *)(v8 + v25);
  v27 = v8 + v25 + 1;
  a1[2] = v27;
  if (!v8)
  {
    v56 = v7;
    goto LABEL_69;
  }
  LODWORD(v26) = *v26;
  if (v26 < 2)
  {
    v28 = 0;
    v29 = 1;
    goto LABEL_24;
  }
LABEL_71:
  *a1 = 0;
  a1[1] = 0;
  v57 = a1[3];
  if (!v57)
  {
    v29 = 0;
    v8 = 0;
    v28 = 1;
    goto LABEL_73;
  }
  v101 = (int)v26;
  v111 = v23;
  v123 = v24;
  v136 = v18;
  v151 = v19;
  v185 = v14;
  v167 = v13;
  v205 = result;
  v226 = v6;
  if (!v7)
  {
    v29 = 0;
    v57 = 0;
    v8 = 0;
    v28 = 1;
LABEL_73:
    *a1 = 0;
    a1[1] = 0;
    v31 = (unsigned __int8 *)a1[3];
    if (v31)
    {
      v91 = v28;
      v100 = v29;
      v110 = v23;
      v122 = v24;
      v135 = v18;
      v150 = v19;
      v184 = v14;
      v166 = v13;
      v204 = result;
      v225 = v6;
      if (v57)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v8, v57);
        LODWORD(v31) = 0;
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        LODWORD(v31) = 0;
      }
      result = v204;
      v6 = v225;
      v19 = v150;
      v13 = v166;
      v14 = v184;
      v24 = v122;
      v18 = v135;
      v29 = v100;
      v23 = v110;
      v28 = v91;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    goto LABEL_75;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v57 + 16))(v57, v8);
  v29 = 0;
  v8 = *a1;
  v7 = a1[1];
  v28 = 1;
  v27 = a1[2];
  result = v205;
  v6 = v226;
  v19 = v151;
  v13 = v167;
  v14 = v185;
  v24 = v123;
  v18 = v136;
  LODWORD(v26) = v101;
  v23 = v111;
LABEL_24:
  if (!(_DWORD)v26)
    v29 = 0;
  v30 = v27 - v8;
  if (v7 <= v30)
  {
    v92 = v28;
    v102 = v29;
    v114 = v23;
    v127 = v24;
    v142 = v18;
    v158 = v19;
    v195 = v14;
    v176 = v13;
    v217 = result;
    v238 = v6;
    v57 = 0;
    v63 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v63 && v7)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v63 + 16))(v63);
      v8 = *a1;
      v57 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    result = v217;
    v6 = v238;
    v19 = v158;
    v13 = v176;
    v14 = v195;
    v24 = v127;
    v18 = v142;
    v29 = v102;
    v23 = v114;
    v28 = v92;
    goto LABEL_73;
  }
  v31 = (unsigned __int8 *)(v8 + v30);
  v32 = v8 + v30 + 1;
  a1[2] = v32;
  if (!v8)
  {
    v57 = v7;
    goto LABEL_73;
  }
  LODWORD(v31) = *v31;
  if (v31 < 2)
  {
    v33 = 0;
    v34 = 1;
    goto LABEL_30;
  }
LABEL_75:
  *a1 = 0;
  a1[1] = 0;
  v58 = a1[3];
  if (!v58)
  {
    v34 = 0;
    v8 = 0;
    v33 = 1;
    goto LABEL_77;
  }
  v83 = (int)v31;
  v90 = v28;
  v99 = v29;
  v109 = v23;
  v121 = v24;
  v134 = v18;
  v149 = v19;
  v183 = v14;
  v165 = v13;
  v203 = result;
  v224 = v6;
  if (!v7)
  {
    v34 = 0;
    v58 = 0;
    v8 = 0;
    v33 = 1;
LABEL_77:
    *a1 = 0;
    a1[1] = 0;
    v36 = (unsigned __int8 *)a1[3];
    if (v36)
    {
      v76 = v33;
      v82 = v34;
      v89 = v28;
      v98 = v29;
      v108 = v23;
      v120 = v24;
      v133 = v18;
      v148 = v19;
      v182 = v14;
      v164 = v13;
      v202 = result;
      v223 = v6;
      if (v58)
      {
        (*(void (**)(unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)v36 + 16))(v36, v8, v58);
        LODWORD(v36) = 0;
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        LODWORD(v36) = 0;
      }
      result = v202;
      v6 = v223;
      v19 = v148;
      v13 = v164;
      v14 = v182;
      v24 = v120;
      v18 = v133;
      v29 = v98;
      v23 = v108;
      v34 = v82;
      v28 = v89;
      v33 = v76;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    goto LABEL_79;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v58 + 16))(v58, v8);
  v34 = 0;
  v8 = *a1;
  v7 = a1[1];
  v33 = 1;
  v32 = a1[2];
  result = v203;
  v6 = v224;
  v19 = v149;
  v13 = v165;
  v14 = v183;
  v24 = v121;
  v18 = v134;
  v29 = v99;
  v23 = v109;
  LODWORD(v31) = v83;
  v28 = v90;
LABEL_30:
  if (!(_DWORD)v31)
    v34 = 0;
  v35 = v32 - v8;
  if (v7 <= v35)
  {
    v77 = v33;
    v84 = v34;
    v93 = v28;
    v103 = v29;
    v115 = v23;
    v128 = v24;
    v143 = v18;
    v159 = v19;
    v196 = v14;
    v177 = v13;
    v218 = result;
    v239 = v6;
    v58 = 0;
    v64 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v64 && v7)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v64 + 16))(v64);
      v8 = *a1;
      v58 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    result = v218;
    v6 = v239;
    v19 = v159;
    v13 = v177;
    v14 = v196;
    v24 = v128;
    v18 = v143;
    v29 = v103;
    v23 = v115;
    v34 = v84;
    v28 = v93;
    v33 = v77;
    goto LABEL_77;
  }
  v36 = (unsigned __int8 *)(v8 + v35);
  v37 = v8 + v35 + 1;
  a1[2] = v37;
  if (!v8)
  {
    v58 = v7;
    goto LABEL_77;
  }
  LODWORD(v36) = *v36;
  if (v36 < 2)
  {
    v38 = 0;
    v39 = 1;
    goto LABEL_36;
  }
LABEL_79:
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (!v44)
  {
    v39 = 0;
    v8 = 0;
    v38 = 1;
LABEL_81:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
      goto LABEL_89;
    v7 = 0;
    v8 = 0;
    goto LABEL_83;
  }
  v71 = (int)v36;
  v75 = v33;
  v81 = v34;
  v88 = v28;
  v97 = v29;
  v107 = v23;
  v119 = v24;
  v132 = v18;
  v147 = v19;
  v181 = v14;
  v163 = v13;
  v201 = result;
  v222 = v6;
  if (!v7)
  {
    v39 = 0;
    v44 = 0;
    v8 = 0;
    v38 = 1;
    goto LABEL_81;
  }
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v8);
  v39 = 0;
  v8 = *a1;
  v7 = a1[1];
  v38 = 1;
  v37 = a1[2];
  result = v201;
  v6 = v222;
  v19 = v147;
  v13 = v163;
  v14 = v181;
  v24 = v119;
  v18 = v132;
  v29 = v97;
  v23 = v107;
  v34 = v81;
  v28 = v88;
  LODWORD(v36) = v71;
  v33 = v75;
LABEL_36:
  if (!(_DWORD)v36)
    v39 = 0;
  v40 = v37 - v8;
  if (v7 <= v40)
  {
    v68 = v38;
    v72 = v39;
    v78 = v33;
    v85 = v34;
    v94 = v28;
    v104 = v29;
    v116 = v23;
    v129 = v24;
    v144 = v18;
    v160 = v19;
    v197 = v14;
    v178 = v13;
    v219 = result;
    v240 = v6;
    v44 = 0;
    v65 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v65 && v7)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v65 + 16))(v65);
      v8 = *a1;
      v44 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    result = v219;
    v6 = v240;
    v19 = v160;
    v13 = v178;
    v14 = v197;
    v24 = v129;
    v18 = v144;
    v29 = v104;
    v23 = v116;
    v34 = v85;
    v28 = v94;
    v39 = v72;
    v33 = v78;
    v38 = v68;
    goto LABEL_81;
  }
  v41 = (unsigned __int8 *)(v8 + v40);
  a1[2] = (unint64_t)(v41 + 1);
  if (!v8)
  {
    v44 = v7;
    goto LABEL_81;
  }
  v42 = *v41;
  if (v42 > 1)
    goto LABEL_83;
  v43 = 0;
  v44 = v42 != 0;
  if (!v6)
    goto LABEL_88;
LABEL_42:
  if (v13 || v18 || v23 || v28 || v33 || v38 || (_DWORD)v43)
  {
LABEL_88:
    while (1)
    {
      __break(1u);
LABEL_89:
      v67 = v38;
      v70 = v39;
      v74 = v33;
      v80 = v34;
      v87 = v28;
      v96 = v29;
      v106 = v23;
      v118 = v24;
      v131 = v18;
      v146 = v19;
      v180 = v14;
      v162 = v13;
      v200 = result;
      v221 = v6;
      if (v44)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v43 + 16))(v43, v8, v44);
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      result = v200;
      v6 = v221;
      v19 = v146;
      v13 = v162;
      v14 = v180;
      v24 = v118;
      v18 = v131;
      v29 = v96;
      v23 = v106;
      v34 = v80;
      v28 = v87;
      v39 = v70;
      v33 = v74;
      v38 = v67;
LABEL_83:
      *a1 = 0;
      a1[1] = 0;
      v59 = a1[3];
      if (!v59)
        break;
      if (!v7)
        break;
      v199 = result;
      v220 = v6;
      v161 = v13;
      v179 = v14;
      v130 = v18;
      v145 = v19;
      v105 = v23;
      v117 = v24;
      v86 = v28;
      v95 = v29;
      v73 = v33;
      v79 = v34;
      v66 = v38;
      v69 = v39;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v59 + 16))(v59, v8);
      v38 = v66;
      v39 = v69;
      v33 = v73;
      v34 = v79;
      v28 = v86;
      v29 = v95;
      v23 = v105;
      v24 = v117;
      v18 = v130;
      v19 = v145;
      v14 = v179;
      v13 = v161;
      result = v199;
      v6 = v220;
      if (!*a1)
        break;
      v44 = 0;
      v43 = 1;
      if (v220)
        goto LABEL_42;
    }
    v45 = 0;
    *a2 = 0;
  }
  else
  {
    *(_QWORD *)a2 = result;
    a2[8] = v14;
    a2[9] = v19;
    a2[10] = v24;
    a2[11] = v29;
    a2[12] = v34;
    a2[13] = v39;
    v45 = 1;
    a2[14] = v44;
  }
  a2[16] = v45;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 3);
  v4 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[5];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  char v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  char v19;

  IPC::Decoder::decode<WTF::String>(a1, &v18);
  IPC::Decoder::decode<WTF::String>(a1, &v16);
  IPC::Decoder::decode<WTF::String>(a1, &v14);
  IPC::Decoder::decode<WTF::String>(a1, &v12);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebKit::EditingRange>(a1, (uint64_t)&v10);
  if (*a1)
  {
    if (v19)
    {
      v6 = v18;
      v18 = 0;
      if (v17)
      {
        v7 = v16;
        v16 = 0;
        if (v15)
        {
          v8 = v14;
          v14 = 0;
          if (v13)
          {
            v9 = v12;
            v12 = 0;
            if (v11)
            {
              *(_OWORD *)(a2 + 32) = v10;
              *(_QWORD *)a2 = v6;
              *(_QWORD *)(a2 + 8) = v7;
              *(_QWORD *)(a2 + 16) = v8;
              *(_QWORD *)(a2 + 24) = v9;
              *(_BYTE *)(a2 + 48) = 1;
              goto LABEL_8;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v13)
  {
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_8:
  if (v15)
  {
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v17)
  {
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E29784(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (*(_BYTE *)(v16 - 40))
  {
    v18 = *(WTF::StringImpl **)(v16 - 48);
    *(_QWORD *)(v16 - 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (*(_BYTE *)(v16 - 24))
  {
    v19 = *(WTF::StringImpl **)(v16 - 32);
    *(_QWORD *)(v16 - 32) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<WebKit::EditingRange>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::EditingRange,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::encode(IPC::Encoder *a1, id *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  WTF::StringImpl *v11;
  char v12;

  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
  WebKit::WebAutocorrectionData::fontName(a2, &v11);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>(a1, (uint64_t)&v11);
  if (v12)
  {
    v5 = v11;
    v11 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  objc_msgSend(a2[2], "pointSize", v11);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = (void *)objc_msgSend(a2[2], "fontDescriptor");
  objc_msgSend((id)objc_msgSend(v7, "objectForKey:", *MEMORY[0x1E0CEB608]), "doubleValue");
  v9 = v8;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v9;
  return result;
}

void sub_196E2997C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  double *v9;
  int v10;
  double v11;
  unint64_t v12;
  double *v14;
  int v15;
  double v16;
  WTF::StringImpl *result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  int v27;
  int v28;
  _QWORD v29[3];
  WTF::StringImpl *v30;
  char v31;
  char v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;

  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v33);
  IPC::Decoder::decode<std::optional<WTF::String>>((uint64_t *)a1, (uint64_t)&v30);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (double *)((char *)v6 + v7);
    a1[2] = (unint64_t)(v9 + 1);
    if (!v6)
    {
      v18 = v5;
      v19 = 0;
      goto LABEL_32;
    }
    v10 = 0;
    v11 = *v9;
    goto LABEL_8;
  }
  while (1)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v20 + 16))(v20);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    v11 = 0.0;
    v21 = a1[3];
    if (v21 && v18)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t, double))(*(_QWORD *)v21 + 16))(v21, v19, v18, 0.0);
      v6 = (WTF::StringImpl *)*a1;
      v5 = a1[1];
      v10 = 1;
      v11 = 0.0;
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v10 = 1;
    }
LABEL_8:
    v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v6;
    if (v5 < v12 || v5 - v12 <= 7)
      break;
    v14 = (double *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (unint64_t)(v14 + 1);
    if (!v6)
    {
      v22 = v5;
      v23 = 0;
      goto LABEL_35;
    }
    v15 = 0;
    v16 = *v14;
LABEL_15:
    if (v35 && v32 && !v10 && !v15)
    {
      result = (WTF::StringImpl *)WebKit::WebAutocorrectionData::WebAutocorrectionData(v29, &v33, (uint64_t)&v30, v11, v16);
      *(_QWORD *)a3 = v29[0];
      *(_QWORD *)(a3 + 8) = v29[1];
      *(_QWORD *)(a3 + 16) = v29[2];
      *(_BYTE *)(a3 + 24) = 1;
      goto LABEL_20;
    }
    __break(1u);
  }
  v22 = 0;
  v23 = 0;
  *a1 = 0;
  a1[1] = 0;
  v24 = a1[3];
  if (v24)
  {
    v28 = v10;
    v26 = v11;
    if (v5)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v24 + 16))(v24);
      v23 = *a1;
      v22 = a1[1];
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v11 = v26;
    v10 = v28;
  }
LABEL_35:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v22)
    {
      v27 = v10;
      v25 = v11;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v23, v22);
      v11 = v25;
      v10 = v27;
      if (*a1)
      {
        v15 = 1;
        v16 = 0.0;
        goto LABEL_15;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_20:
  if (v32)
  {
    if (v31)
    {
      result = v30;
      v30 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v35)
  {
    result = v33;
    if (v33)
    {
      v33 = 0;
      v34 = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_196E29C2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  WTF *v22;

  if ((_BYTE)a18 && a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (*(_BYTE *)(v20 - 24))
  {
    v22 = *(WTF **)(v20 - 40);
    if (v22)
    {
      *(_QWORD *)(v20 - 40) = 0;
      *(_DWORD *)(v20 - 32) = 0;
      WTF::fastFree(v22, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::OwnerPermissionsPolicyData>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  void *v32;
  uint64_t result;
  uint64_t isNull;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v45;
  int v46;
  int v47;
  unsigned __int16 v48;
  unsigned __int8 v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char *v76;
  int v77;
  int v78;
  __n128 v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  void *v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char v115[8];
  int v116;
  char v117;
  uint64_t v118;
  WebCore::SecurityOriginData *v119;
  int v120;
  char v121;
  uint64_t v122[2];
  char v123;
  WebCore::SecurityOriginData *v124;
  _BYTE v125[32];
  __int128 v126;
  char v127;
  unsigned __int8 *v128;
  int v129;
  int v130;
  __int128 v131;
  _BYTE v132[24];
  int v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v97 = 0;
    v98 = 0;
    *a2 = 0;
    a2[1] = 0;
    v99 = a2[3];
    if (v99)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
        v98 = *a2;
        v97 = a2[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
      }
    }
    goto LABEL_193;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v97 = v6;
    v98 = 0;
LABEL_193:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v100 = a2[3];
    if (v100)
    {
      if (v97)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v98, v97);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_194;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_194:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v6)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    v31 = a1;
    *a1 = 0;
    a1[56] = 0;
    goto LABEL_182;
  }
  if (!v9)
  {
    v125[0] = 0;
    v127 = 0;
    v31 = a1;
    std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100]((uint64_t)a1, (uint64_t)v125);
    a1[56] = 1;
    result = std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v125, v32);
    goto LABEL_182;
  }
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v132);
  v10 = a2[1];
  v11 = *a2;
  v12 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v10 >= v12 && v10 - v12 > 3)
  {
    v14 = (int *)(v11 + v12);
    a2[2] = (uint64_t)(v14 + 1);
    if (v11)
    {
      v15 = *v14;
      v122[0] = 0;
      if (!v15)
      {
        v128 = 0;
        LOBYTE(v129) = 1;
        goto LABEL_41;
      }
      v16 = 0;
      while (1)
      {
        v17 = IPC::Decoder::decode<WebCore::PermissionsPolicy::Feature>(a2);
        v2 = v17;
        v19 = v122[0];
        if ((unsigned __int16)v17 < 0x100u || (v17 & 0xFE) == 0xFE)
          break;
        if (v122[0]
          || (WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(v122),
              (v19 = v122[0]) != 0))
        {
          v20 = *(_DWORD *)(v19 - 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = ~(v2 << 15) + v2;
        v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
        v23 = v20 & ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16));
        v18 = (_BYTE *)(v19 + v23);
        v24 = *(unsigned __int8 *)(v19 + v23);
        if (v24 == 255)
          goto LABEL_26;
        v25 = 0;
        v26 = 1;
        do
        {
          if (v24 == v2)
          {
            LOBYTE(v128) = 0;
            LOBYTE(v129) = 0;
            goto LABEL_46;
          }
          if (v24 == 254)
            v25 = v18;
          v23 = ((_DWORD)v23 + v26) & v20;
          v18 = (_BYTE *)(v19 + v23);
          v24 = *(unsigned __int8 *)(v19 + v23);
          ++v26;
        }
        while (v24 != 255);
        if (v25)
        {
          *v25 = -1;
          --*(_DWORD *)(v122[0] - 16);
          v18 = v25;
        }
LABEL_26:
        *v18 = v2;
        v27 = v122[0];
        if (v122[0])
          v28 = *(_DWORD *)(v122[0] - 12) + 1;
        else
          v28 = 1;
        *(_DWORD *)(v122[0] - 12) = v28;
        v29 = (*(_DWORD *)(v27 - 16) + v28);
        v30 = *(unsigned int *)(v27 - 4);
        if (v30 > 0x400)
        {
          if (v30 <= 2 * v29)
LABEL_31:
            WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(v122);
        }
        else if (3 * v30 <= 4 * v29)
        {
          goto LABEL_31;
        }
        if (++v16 == v15)
        {
          v35 = (char *)*a2;
          v128 = (unsigned __int8 *)v122[0];
          LOBYTE(v129) = 1;
          if (!v35)
          {
            if (v122[0])
            {
              WTF::fastFree((WTF *)(v122[0] - 16), 0);
              v35 = (char *)*a2;
            }
            goto LABEL_48;
          }
LABEL_41:
          isNull = (uint64_t)WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(v122, &v128);
          v37 = v122[0];
          if ((_BYTE)v129 && v128)
            isNull = WTF::fastFree((WTF *)(v128 - 16), v35);
          v113 = 0;
          goto LABEL_50;
        }
      }
      LOBYTE(v128) = 0;
      LOBYTE(v129) = 0;
      if (v122[0])
LABEL_46:
        WTF::fastFree((WTF *)(v19 - 16), v18);
      goto LABEL_47;
    }
    v103 = v10;
    v104 = 0;
  }
  else
  {
    v103 = 0;
    v104 = 0;
    *a2 = 0;
    a2[1] = 0;
    v105 = a2[3];
    if (v105)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v105 + 16))(v105, v11, v10);
        v104 = *a2;
        v103 = a2[1];
      }
      else
      {
        v103 = 0;
        v104 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v106 = a2[3];
  if (v106 && v103)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104);
  LOBYTE(v128) = 0;
  LOBYTE(v129) = 0;
LABEL_47:
  v35 = 0;
  v39 = *a2;
  v38 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v40 = a2[3];
  if (v40)
  {
    if (v38)
    {
      isNull = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v39);
      v35 = (char *)*a2;
      if (*a2)
        goto LABEL_186;
    }
    else
    {
      v35 = 0;
    }
  }
LABEL_48:
  v36 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  isNull = a2[3];
  if (isNull)
    goto LABEL_187;
  while (1)
  {
    v37 = 0;
    v113 = 1;
LABEL_50:
    v41 = a2[1];
    v42 = *a2;
    v43 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
    if (v41 >= v43 && v41 - v43 > 3)
      break;
    v107 = 0;
    v108 = 0;
    *a2 = 0;
    a2[1] = 0;
    v109 = a2[3];
    if (v109)
    {
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v109 + 16))(v109, v42, v41);
        v108 = *a2;
        v107 = a2[1];
      }
      else
      {
        v107 = 0;
        v108 = 0;
      }
    }
LABEL_203:
    v2 = 0;
    *a2 = 0;
    a2[1] = 0;
    v110 = a2[3];
    if (v110)
    {
      if (v107)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v108);
      v2 = 0;
    }
LABEL_170:
    v35 = (char *)*a2;
    v90 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v91 = a2[3];
    if (!v91 || !v90 || (isNull = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v91 + 16))(v91, v35), !*a2))
    {
      v125[0] = 0;
      v127 = 0;
      goto LABEL_172;
    }
    v88 = 1;
LABEL_159:
    if (v134 && !v113 && !v88)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v128, (uint64_t)v132);
      *(_QWORD *)&v131 = v37;
      *((_QWORD *)&v131 + 1) = v2;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v125, (uint64_t)&v128);
      v89 = v131;
      v131 = 0uLL;
      v126 = v89;
      v127 = 1;
      if (v130 != -1)
        ((void (*)(uint64_t *, unsigned __int8 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v130])(v122, &v128);
      goto LABEL_176;
    }
LABEL_186:
    __break(1u);
LABEL_187:
    if (v36)
      isNull = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)isNull + 16))(isNull, v35);
  }
  v45 = (int *)(v42 + v43);
  a2[2] = (uint64_t)(v45 + 1);
  if (!v42)
  {
    v107 = v41;
    v108 = 0;
    goto LABEL_203;
  }
  v46 = *v45;
  v118 = 0;
  if (!v46)
  {
    v2 = 0;
LABEL_158:
    v88 = 0;
    goto LABEL_159;
  }
  v47 = 0;
  while (2)
  {
    v48 = IPC::Decoder::decode<WebCore::PermissionsPolicy::Feature>(a2);
    v49 = v48;
    if (v48 <= 0xFFu)
    {
LABEL_167:
      v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_168:
      if (v118)
        WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v118, v35);
      goto LABEL_170;
    }
    v36 = a2[1];
    v35 = (char *)*a2;
    v50 = a2[2] - *a2;
    if (v36 <= v50)
    {
      v54 = 0;
      v55 = 0;
      *a2 = 0;
      a2[1] = 0;
      v83 = a2[3];
      if (!v83)
        goto LABEL_63;
      if (!v36)
        goto LABEL_154;
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
      v35 = (char *)*a2;
      v36 = a2[1];
      goto LABEL_142;
    }
    v51 = &v35[v50];
    v52 = (uint64_t)&v35[v50 + 1];
    a2[2] = v52;
    if (!v35)
    {
LABEL_142:
      v54 = 0;
      v82 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v82)
      {
        v55 = 0;
        if (!v36)
          goto LABEL_63;
        goto LABEL_135;
      }
      goto LABEL_155;
    }
    v53 = *v51;
    if (v53 <= 1)
    {
      if (v53)
      {
        v57 = 1;
        goto LABEL_68;
      }
      v74 = ((v52 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v35;
      if (v36 >= v74 && v36 - v74 > 3)
      {
        v76 = &v35[v74];
        v78 = *(_DWORD *)v76;
        v77 = *(_DWORD *)v76;
        a2[2] = (uint64_t)(v76 + 4);
        v124 = 0;
        if (v78)
        {
          do
          {
            IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, &v128);
            if (!(_BYTE)v131)
              goto LABEL_131;
            v79.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)&v128);
            if ((v80 & 1) != 0)
              goto LABEL_129;
            isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)&v128);
            if ((isNull & 1) != 0)
              goto LABEL_129;
            if (!(_BYTE)v131)
              goto LABEL_186;
            isNull = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v124, (uint64_t)&v128, (uint64_t)v122);
            if (!v123)
            {
LABEL_129:
              if ((_BYTE)v131 && v130 != -1)
                ((void (*)(uint64_t *, unsigned __int8 **, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v130])(v122, &v128, v79);
LABEL_131:
              if (v124)
                WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v124, v35);
              goto LABEL_133;
            }
            if ((_BYTE)v131 && v130 != -1)
              isNull = ((uint64_t (*)(uint64_t *, unsigned __int8 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v130])(v122, &v128);
            --v77;
          }
          while (v77);
          v81 = *a2;
          v119 = v124;
          v120 = 0;
          v56 = 1;
          v121 = 1;
          if (v81)
            goto LABEL_69;
          goto LABEL_64;
        }
        v57 = 0;
        v119 = 0;
LABEL_68:
        v120 = v57;
        v121 = 1;
LABEL_69:
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v128, (uint64_t)&v119);
        isNull = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v115, (uint64_t)&v128);
        v117 = 1;
        if (v129 != -1)
          isNull = ((uint64_t (*)(uint64_t *, unsigned __int8 **))off_1E34AD110[v129])(v122, &v128);
        if (!v121)
          goto LABEL_74;
LABEL_72:
        if (v120 != -1)
          isNull = ((uint64_t (*)(unsigned __int8 **, WebCore::SecurityOriginData **))off_1E34AD110[v120])(&v128, &v119);
        goto LABEL_74;
      }
      v54 = 0;
      v55 = 0;
      *a2 = 0;
      a2[1] = 0;
      v86 = a2[3];
      if (!v86)
        goto LABEL_63;
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
      v54 = 0;
      v35 = (char *)*a2;
      v36 = a2[1];
      v87 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v87)
      {
        v55 = 0;
        if (!v36)
          goto LABEL_63;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v87 + 16))(v87, v35);
LABEL_133:
        v54 = 0;
        v55 = 0;
        v82 = a2[3];
        v35 = (char *)*a2;
        v36 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        if (!v82)
          goto LABEL_63;
        if (v36)
        {
LABEL_135:
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v82 + 16))(v82, v35);
          v55 = *a2;
          v54 = a2[1];
          goto LABEL_63;
        }
LABEL_154:
        v54 = 0;
        v55 = 0;
        goto LABEL_63;
      }
LABEL_155:
      v55 = 0;
      goto LABEL_63;
    }
    v54 = v36;
    v55 = (uint64_t)v35;
LABEL_63:
    v56 = 0;
    LOBYTE(v119) = 0;
    v121 = 0;
    *a2 = 0;
    a2[1] = 0;
    isNull = a2[3];
    if (isNull)
    {
      if (v54)
      {
        isNull = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)isNull + 16))(isNull, v55, v54);
        if (*a2)
          goto LABEL_186;
      }
      v56 = 0;
    }
LABEL_64:
    v115[0] = 0;
    v117 = 0;
    if (v56)
      goto LABEL_72;
LABEL_74:
    if (!v117)
    {
      v35 = (char *)*a2;
      v84 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v85 = a2[3];
      if (!v85)
        goto LABEL_167;
      if (!v84)
        goto LABEL_167;
      isNull = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v85 + 16))(v85, v35);
      if (!v117)
        goto LABEL_167;
    }
    v58 = v49;
    if (v49 >= 0xFEu)
    {
      v73 = 0;
      v2 &= 0xFFFFFFFFFFFFFF00;
      goto LABEL_102;
    }
    v59 = v118;
    if (v118
      || (isNull = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(&v118),
          (v59 = v118) != 0))
    {
      v60 = *(_DWORD *)(v59 - 8);
    }
    else
    {
      v60 = 0;
    }
    v61 = ~(v49 << 15) + v49;
    v62 = (9 * (v61 ^ (v61 >> 10))) ^ ((9 * (v61 ^ (v61 >> 10))) >> 6);
    v63 = v60 & ((v62 + ~(v62 << 11)) ^ ((v62 + ~(v62 << 11)) >> 16));
    v64 = (unsigned __int8 *)(v59 + 24 * v63);
    v65 = *v64;
    if (v65 != 255)
    {
      v66 = 0;
      v67 = 1;
      while (v65 != v58)
      {
        if (v65 == 254)
          v66 = v64;
        v63 = (v63 + v67) & v60;
        v64 = (unsigned __int8 *)(v59 + 24 * v63);
        v65 = *v64;
        ++v67;
        if (v65 == 255)
        {
          if (v66)
          {
            *v66 = -1;
            *((_QWORD *)v66 + 1) = 0;
            *((_QWORD *)v66 + 2) = 0;
            --*(_DWORD *)(v118 - 16);
            v64 = v66;
          }
          goto LABEL_87;
        }
      }
      v2 &= 0xFFFFFFFFFFFFFF00;
      if (!v117)
        goto LABEL_168;
      v73 = 0;
      goto LABEL_102;
    }
LABEL_87:
    *v64 = v58;
    v35 = (char *)(v64 + 8);
    v68 = *((unsigned int *)v64 + 4);
    if ((_DWORD)v68 == -1)
    {
      if (v116 != -1)
        goto LABEL_91;
    }
    else
    {
      if (v116 == -1)
      {
        isNull = ((uint64_t (*)(unsigned __int8 **, char *))off_1E34AD110[v68])(&v128, v35);
        *((_DWORD *)v64 + 4) = -1;
        goto LABEL_92;
      }
LABEL_91:
      v128 = v64 + 8;
      isNull = ((uint64_t (*)(unsigned __int8 **))off_1E34AE6A0[v116])(&v128);
    }
LABEL_92:
    v69 = v118;
    if (v118)
      v70 = *(_DWORD *)(v118 - 12) + 1;
    else
      v70 = 1;
    *(_DWORD *)(v118 - 12) = v70;
    v71 = (*(_DWORD *)(v69 - 16) + v70);
    v72 = *(unsigned int *)(v69 - 4);
    if (v72 > 0x400)
    {
      if (v72 <= 2 * v71)
LABEL_97:
        isNull = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(&v118);
    }
    else if (3 * v72 <= 4 * v71)
    {
      goto LABEL_97;
    }
    if (v117)
    {
      v73 = 1;
LABEL_102:
      if (v116 != -1)
        isNull = ((uint64_t (*)(unsigned __int8 **, char *))off_1E34AD110[v116])(&v128, v115);
      if ((v73 & 1) == 0)
        goto LABEL_168;
    }
    if (++v47 != v46)
      continue;
    break;
  }
  v2 = v118;
  if (*a2)
    goto LABEL_158;
  v125[0] = 0;
  v127 = 0;
  if (v118)
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v118, v35);
LABEL_172:
  v92 = v113;
  if (!v37)
    v92 = 1;
  if ((v92 & 1) == 0)
    WTF::fastFree((WTF *)(v37 - 16), v35);
LABEL_176:
  if (v134 && v133 != -1)
    ((void (*)(unsigned __int8 **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v133])(&v128, v132);
  if (v127
    || (v94 = (void *)*a2, v111 = a2[1], *a2 = 0, a2[1] = 0, (v112 = a2[3]) != 0)
    && v111
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v112 + 16))(v112, v94), v127))
  {
    v93 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v125);
    v95 = v126;
    v126 = 0uLL;
    *(_OWORD *)(v93 + 32) = v95;
    v96 = 1;
    *(_BYTE *)(v93 + 48) = 1;
  }
  else
  {
    v96 = 0;
    v93 = (uint64_t)a1;
    *a1 = 0;
  }
  *(_BYTE *)(v93 + 56) = v96;
  result = std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v125, v94);
  v31 = a1;
LABEL_182:
  if (!v31[56])
  {
    v101 = *a2;
    v102 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v102)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v101);
    }
  }
  return result;
}

void sub_196E2A8B0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, char a13, int a14, int a15, int a16, char a17, uint64_t a18, char a19, int a20,int a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,WebCore::SecurityOriginData *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,uint64_t a37,int a38,uint64_t a39,uint64_t a40)
{
  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<std::optional<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_12;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v13 = v2;
    v14 = 0;
LABEL_12:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(a1);
      v8 = v7 & 0xFF00;
      v9 = v7;
      v10 = (v7 & 0xFF0000) != 0;
      v11 = 0x10000;
      if ((v7 & 0xFF0000) == 0)
      {
        v9 = 0;
        v8 = 0;
      }
    }
    else
    {
      v11 = 0;
      v9 = 0;
      v8 = 0;
      v10 = 1;
    }
    goto LABEL_9;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v17 = a1[3];
  if (v17 && v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v3);
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v8 = 0;
LABEL_9:
  result = v9 | v11 | v8 | ((unint64_t)v10 << 32);
  if (!v10)
  {
    v18 = *a1;
    v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v19)
      {
        v21 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
        return v21;
      }
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::ModelIdentifier,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  __int128 v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v6);
  v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (_QWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (!v2)
      goto LABEL_20;
    if (*v5 == -1)
    {
LABEL_15:
      v7 = 0;
LABEL_16:
      v6 = 0;
    }
    else
    {
      v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      v7 = *v5;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    while (1)
    {
      v7 = 0;
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v12 = a1[3];
      if (!v12)
        break;
      v13 = a1;
      if (!v9)
        goto LABEL_15;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      v2 = *v13;
      if (!*v13)
      {
        v7 = 0;
        goto LABEL_16;
      }
      __break(1u);
LABEL_20:
      v9 = v1;
      v10 = v2;
    }
  }
  return v6 | v7;
}

unint64_t IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (_QWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (!v2)
      goto LABEL_20;
    if (*v5 == -1)
    {
LABEL_14:
      v7 = 0;
LABEL_15:
      v6 = 0;
    }
    else
    {
      v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      v7 = *v5;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v14;
        v9 = *v14;
        v8 = v14[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    while (1)
    {
      v7 = 0;
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v11 = a1[3];
      if (!v11)
        break;
      v13 = a1;
      if (!v8)
        goto LABEL_14;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      v2 = *v13;
      if (!*v13)
      {
        v7 = 0;
        goto LABEL_15;
      }
      __break(1u);
LABEL_20:
      v8 = v1;
      v9 = v2;
    }
  }
  return v6 | v7;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void WebCore::ResourceResponse::~ResourceResponse(WebCore::ResourceResponse *this, WTF::StringImpl *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
}

uint64_t IPC::Decoder::decode<WebKit::NetworkProcessPreferencesForWebProcess>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::NetworkProcessPreferencesForWebProcess,void>::decode(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkProcessPreferencesForWebProcess,void>::decode(uint64_t *a1)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  uint64_t v4;

  v2 = IPC::Decoder::decode<BOOL>(a1);
  v3 = IPC::Decoder::decode<BOOL>(a1);
  v4 = *a1;
  if (!*a1)
    goto LABEL_7;
  LODWORD(v4) = v2;
  if (v2 <= 0xFFu || (LODWORD(v4) = v3, v3 <= 0xFFu))
  {
    __break(1u);
LABEL_7:
    LOBYTE(v2) = 0;
    return (unsigned __int16)(v2 | (unsigned __int16)(v3 << 8)) | ((_DWORD)v4 << 16);
  }
  LODWORD(v4) = 1;
  return (unsigned __int16)(v2 | (unsigned __int16)(v3 << 8)) | ((_DWORD)v4 << 16);
}

char *IPC::ArgumentCoder<WebCore::PasteboardImage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  char *result;

  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 64));
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 88));
  v4 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 100);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v5;
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::PasteboardImage,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  _DWORD *result;
  _DWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  unsigned int *v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  _DWORD *v44;
  char v45;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>(a1, &v44);
  IPC::Decoder::decode<WebCore::PasteboardURL>((uint64_t *)a1, (uint64_t)&v39);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((uint64_t *)a1, &v37);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v35);
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v32, (uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v30);
  v4 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
  if (!*(_QWORD *)a1)
    goto LABEL_32;
  if (!v45)
    goto LABEL_31;
  v6 = v44;
  v44 = 0;
  v21 = v6;
  if (!v43)
    goto LABEL_31;
  v7 = v42;
  v22 = v39;
  v39 = 0;
  v23 = v40;
  v24 = v41;
  LODWORD(v40) = v40 & 0xFFFFFFFE;
  v42 = 0;
  *(_QWORD *)&v25 = v7;
  if (!v38)
    goto LABEL_31;
  v8 = v37;
  v37 = 0;
  *((_QWORD *)&v25 + 1) = v8;
  if (!v36)
    goto LABEL_31;
  v9 = v35;
  v35 = 0;
  *(_QWORD *)&v26 = v9;
  if (!v34)
    goto LABEL_31;
  *((_QWORD *)&v26 + 1) = v32;
  v10 = v33;
  v32 = 0;
  v33 = 0;
  v27 = v10;
  if (!v31 || (v11 = v30, v30 = 0, v28 = v11, !(_BYTE)v5))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 104) = 0;
    goto LABEL_10;
  }
  v29 = v4;
  v21 = 0;
  *(_QWORD *)a2 = v6;
  WTF::URL::URL(a2 + 8, &v22);
  v12 = v25;
  v13 = v26;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 80) = v27;
  v14 = v28;
  v15 = v29;
  v27 = 0;
  v28 = 0;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v15;
  *(_BYTE *)(a2 + 104) = 1;
  WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v21, v16);
LABEL_10:
  if (v31)
  {
    v17 = v30;
    v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v5);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  if (v34)
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
  if (v36)
  {
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v5);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (v38)
  {
    v19 = v37;
    v37 = 0;
    if (v19)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v5);
  }
  result = (_DWORD *)std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v5);
  if (v45)
  {
    result = v44;
    v44 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void sub_196E2B33C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  _DWORD **v30;
  uint64_t v31;
  _DWORD **v32;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  _DWORD *v39;

  v32 = v30;
  v34 = *v32;
  *v32 = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&a10, a2);
  if (a24)
  {
    v36 = a23;
    a23 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (a30)
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, v35);
  if (*(_BYTE *)(v31 - 128))
  {
    v37 = *(WTF::StringImpl **)(v31 - 136);
    *(_QWORD *)(v31 - 136) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v35);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (*(_BYTE *)(v31 - 112))
  {
    v38 = *(unsigned int **)(v31 - 120);
    *(_QWORD *)(v31 - 120) = 0;
    if (v38)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v38, v35);
  }
  std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100](v31 - 104, v35);
  if (*(_BYTE *)(v31 - 40))
  {
    v39 = *(_DWORD **)(v31 - 48);
    *(_QWORD *)(v31 - 48) = 0;
    if (v39)
    {
      if (v39[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
      else
        --v39[2];
    }
  }
  _Unwind_Resume(a1);
}

void sub_196E2B464()
{
  JUMPOUT(0x196E2B428);
}

IPC::Decoder *IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>@<X0>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  IPC::Decoder *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::decode<IPC::Decoder,WebCore::Image>(a1, a2);
  if (!a2[8])
  {
    v5 = *(_QWORD *)a1;
    v6 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    result = (IPC::Decoder *)*((_QWORD *)a1 + 3);
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E2B4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(_DWORD **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::PasteboardURL>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PasteboardURL,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E2B554(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::decode<IPC::Decoder,WebCore::SharedBuffer>(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E2B5BC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int *v4;

  if (*(_BYTE *)(v2 + 8))
  {
    v4 = *(unsigned int **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_21;
  }
  v6 = v4;
  v28 = 0;
  v29 = 0;
  if (v4 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v25, a2);
      if (!v27)
        goto LABEL_20;
      if (HIDWORD(v29) == (_DWORD)v29)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v28, (unint64_t)&v25);
      }
      else
      {
        v16 = HIDWORD(v29) + 1;
        v17 = (_QWORD *)(v28 + 16 * HIDWORD(v29));
        v18 = v25;
        v25 = 0;
        *v17 = v18;
        v19 = v26;
        v26 = 0;
        v17[1] = v19;
        HIDWORD(v29) = v16;
      }
      std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
      if (!--v6)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v28, HIDWORD(v29));
        v24 = v28;
        v28 = 0;
        *(_QWORD *)a1 = v24;
        v14 = v29;
        v13 = HIDWORD(v29);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v29) = v4;
    v28 = WTF::fastMalloc((WTF *)(16 * v4));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v25, a2);
      if (!v27)
        break;
      if (HIDWORD(v29) == (_DWORD)v29)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v28, (unint64_t)&v25);
      }
      else
      {
        v8 = HIDWORD(v29) + 1;
        v9 = (_QWORD *)(v28 + 16 * HIDWORD(v29));
        v10 = v25;
        v25 = 0;
        *v9 = v10;
        v11 = v26;
        v26 = 0;
        v9[1] = v11;
        HIDWORD(v29) = v8;
      }
      std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
      if (!--v6)
      {
        v12 = v28;
        v14 = v29;
        v13 = HIDWORD(v29);
        goto LABEL_13;
      }
    }
LABEL_20:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v20);
LABEL_21:
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v23 = v22 == 0;
    else
      v23 = 1;
    if (!v23)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    return result;
  }
  v13 = 0;
  v14 = 0;
  v12 = 0;
LABEL_13:
  v28 = 0;
  *(_QWORD *)a1 = v12;
LABEL_14:
  v29 = 0;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v5);
}

void sub_196E2B7BC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

_QWORD *IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)(a2 + 16));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)(a2 + 24));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)(a2 + 32));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  return IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 64));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  char i;
  char v11;
  WTF::StringImpl *result;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  char v51;

  IPC::Decoder::decode<WTF::String>(a1, &v50);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_49;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v23 = v4;
    v24 = 0;
    goto LABEL_50;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_52;
  v9 = 0;
  for (i = 1; ; i = 0)
  {
    v11 = v8 ? i : 0;
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v48);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v46);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v44);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v42);
    IPC::Decoder::decode<WTF::String>(a1, &v40);
    IPC::Decoder::decode<WTF::String>(a1, &v38);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v35, a1);
    if (!*a1)
      break;
    if (v51)
    {
      v14 = v50;
      v50 = 0;
      if (!v9)
      {
        v29 = v11;
        if (v49)
        {
          v15 = v48;
          v48 = 0;
          if (v47)
          {
            v16 = v46;
            v46 = 0;
            if (v45)
            {
              v17 = v44;
              v44 = 0;
              if (v43)
              {
                v18 = v42;
                v42 = 0;
                if (v41)
                {
                  v19 = v40;
                  v40 = 0;
                  if (v39)
                  {
                    v20 = v38;
                    v38 = 0;
                    if (v37)
                    {
                      v21 = v35;
                      v35 = 0;
                      v28 = 0;
                      *(_QWORD *)a2 = v14;
                      *(_BYTE *)(a2 + 8) = v11;
                      *(_QWORD *)(a2 + 16) = v15;
                      *(_QWORD *)(a2 + 24) = v16;
                      v30 = 0u;
                      v31 = 0u;
                      *(_QWORD *)(a2 + 32) = v17;
                      *(_QWORD *)(a2 + 40) = v18;
                      v32 = 0u;
                      *(_QWORD *)(a2 + 48) = v19;
                      *(_QWORD *)(a2 + 56) = v20;
                      v33 = 0;
                      *(_QWORD *)(a2 + 64) = v21;
                      v34 = 0;
                      v22 = v36;
                      v36 = 0;
                      *(_QWORD *)(a2 + 72) = v22;
                      *(_BYTE *)(a2 + 80) = 1;
                      WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v28, v13);
LABEL_19:
                      result = (WTF::StringImpl *)WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v13);
                      goto LABEL_20;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_49:
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v23)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
      v8 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
LABEL_52:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v5);
    v9 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
  if (v37)
    goto LABEL_19;
LABEL_20:
  if (v39)
  {
    result = v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v41)
  {
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v43)
  {
    result = v42;
    v42 = 0;
    if (result)
      result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
  }
  if (v45)
  {
    result = v44;
    v44 = 0;
    if (result)
      result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
  }
  if (v47)
  {
    result = v46;
    v46 = 0;
    if (result)
      result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
  }
  if (v49)
  {
    result = v48;
    v48 = 0;
    if (result)
      result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v13);
  }
  if (v51)
  {
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E2BBE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26)
{
  uint64_t v26;
  WTF::StringImpl *v28;

  if (*(_BYTE *)(v26 - 56))
  {
    v28 = *(WTF::StringImpl **)(v26 - 64);
    *(_QWORD *)(v26 - 64) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, a2);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PasteboardURL,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  char v16;

  IPC::Decoder::decode<WTF::URL>(a1, &v13);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v11);
  if (!*a1)
    goto LABEL_20;
  if (!v16 || (v6 = v13, v13 = 0, v7 = v6, v8 = v14, v9 = v15, LODWORD(v14) = v14 & 0xFFFFFFFE, !v12))
  {
    __break(1u);
LABEL_20:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_8;
  }
  v10 = v11;
  v11 = 0;
  WTF::URL::URL(a2, (uint64_t *)&v7);
  result = v7;
  *(_QWORD *)(a2 + 40) = v10;
  *(_BYTE *)(a2 + 48) = 1;
  v10 = 0;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_8:
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v16)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E2BE38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a22 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;

  IPC::Decoder::decode<WTF::String>(a1, &v15);
  IPC::Decoder::decode<WTF::String>(a1, &v13);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v11);
  if (*a1)
  {
    if (v16)
    {
      v5 = v15;
      v15 = 0;
      if (v14)
      {
        v6 = v13;
        v13 = 0;
        if (v12)
        {
          v7 = v11;
          *(_QWORD *)a2 = v5;
          *(_QWORD *)(a2 + 8) = v6;
          *(_QWORD *)(a2 + 16) = v7;
          *(_BYTE *)(a2 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v12)
  {
    v10 = v11;
    v11 = 0;
    if (v10)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v4);
  }
LABEL_6:
  if (v14)
  {
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  if (v16)
  {
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

void sub_196E2C030(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::encode(IPC::Encoder *a1, const __CFDictionary **a2)
{
  const __CFDictionary **v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 10);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  char v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  unsigned __int8 *v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef cf;
  unsigned __int8 v64;

  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&cf);
  v7 = *a1;
  v8 = v64;
  if (*a1)
  {
    if (!v64)
      goto LABEL_57;
    v4 = cf;
    v9 = *a1;
  }
  else
  {
    if (v64 && (v22 = cf, cf = 0, v22))
    {
      CFRelease(v22);
      v23 = *a1;
    }
    else
    {
      v23 = 0;
    }
    v9 = 0;
    v4 = 0;
    v31 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(a1[3], v23);
        v4 = 0;
        v9 = *a1;
      }
      else
      {
        v9 = 0;
        v4 = 0;
      }
    }
  }
  v10 = a1[1];
  if (v10 <= a1[2] - v9)
  {
    v8 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      v60 = v4;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v5 = *a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v5 = 0;
      }
      v4 = v60;
    }
  }
  else
  {
    v11 = (unsigned __int8 *)a1[2];
    v12 = v11 + 1;
    a1[2] = (uint64_t)(v11 + 1);
    if (v9)
    {
      v13 = *v11;
      if (v13 < 2)
      {
        v6 = 0;
        v14 = 1;
        goto LABEL_8;
      }
      goto LABEL_32;
    }
    v8 = v10;
    v5 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[3];
  if (v6)
    goto LABEL_58;
  v10 = 0;
  v9 = 0;
  v13 = 0;
  while (1)
  {
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (!v25)
    {
      v14 = 0;
      v9 = 0;
      LODWORD(v6) = 1;
      goto LABEL_34;
    }
    v47 = v13;
    v54 = v4;
    if (!v10)
    {
      v14 = 0;
      v25 = 0;
      v9 = 0;
      LODWORD(v6) = 1;
LABEL_34:
      *a1 = 0;
      a1[1] = 0;
      v17 = a1[3];
      if (v17)
      {
        v43 = v6;
        v50 = v14;
        v58 = v4;
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v9, v25);
          LODWORD(v17) = 0;
          v9 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v9 = 0;
          LODWORD(v17) = 0;
        }
        v4 = v58;
        LODWORD(v6) = v43;
        v14 = v50;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      goto LABEL_36;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v9);
    v14 = 0;
    v9 = *a1;
    v10 = a1[1];
    v6 = 1;
    v12 = (unsigned __int8 *)a1[2];
    v4 = v54;
    v13 = v47;
LABEL_8:
    if (!v13)
      v14 = 0;
    v15 = &v12[-v9];
    if (v10 <= (unint64_t)v15)
    {
      v46 = v6;
      v53 = v14;
      v62 = v4;
      v25 = 0;
      v33 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v33 && v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v9 = *a1;
        v25 = a1[1];
      }
      else
      {
        v9 = 0;
      }
      v4 = v62;
      LODWORD(v6) = v46;
      v14 = v53;
      goto LABEL_34;
    }
    v16 = &v15[v9];
    a1[2] = (uint64_t)(v16 + 1);
    if (!v9)
    {
      v25 = v10;
      goto LABEL_34;
    }
    LODWORD(v17) = *v16;
    if (v17 < 2)
    {
      v18 = 0;
      v19 = 1;
      goto LABEL_14;
    }
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (!v26)
    {
      v9 = 0;
      v20 = 0;
      v10 = 0;
      v18 = 1;
      goto LABEL_38;
    }
    v37 = v17;
    v41 = v6;
    v48 = v14;
    v55 = v4;
    if (!v10)
    {
      v9 = 0;
      v20 = 0;
      v18 = 1;
LABEL_38:
      *a1 = 0;
      a1[1] = 0;
      v27 = a1[3];
      if (v27)
      {
        v36 = v20;
        v40 = v18;
        v45 = v6;
        v52 = v14;
        v61 = v4;
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v9);
          v28 = *a1;
          v10 = a1[1];
        }
        else
        {
          v28 = 0;
        }
        v4 = v61;
        LODWORD(v6) = v45;
        v14 = v52;
        v20 = v36;
        v18 = v40;
      }
      else
      {
        v28 = 0;
        v10 = 0;
      }
      goto LABEL_40;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v9);
    v19 = 0;
    v9 = *a1;
    v10 = a1[1];
    v18 = 1;
    v4 = v55;
    v6 = v41;
    v14 = v48;
    LODWORD(v17) = v37;
LABEL_14:
    if ((_DWORD)v17)
      v20 = v19;
    else
      v20 = 0;
    if (v10 <= a1[2] - v9)
      goto LABEL_38;
    v21 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v21 + 1);
    if (!v9)
    {
      v28 = 0;
LABEL_40:
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        v35 = v20;
        v39 = v18;
        v44 = v6;
        v51 = v14;
        v59 = v4;
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v28);
          v9 = *a1;
          v10 = a1[1];
        }
        else
        {
          v9 = 0;
        }
        v4 = v59;
        LODWORD(v6) = v44;
        v14 = v51;
        v20 = v35;
        v18 = v39;
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      goto LABEL_42;
    }
    v8 = *v21;
    if (v8 <= 3)
    {
      v5 = v8 | 0x100;
      if (!v7)
        goto LABEL_57;
      goto LABEL_21;
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (!v30)
      break;
    if (!v10)
      break;
    v34 = v20;
    v38 = v18;
    v42 = v6;
    v49 = v14;
    v56 = v4;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v9);
    v4 = v56;
    v6 = v42;
    v14 = v49;
    v20 = v34;
    v18 = v38;
    if (!*a1)
      break;
    v8 = 0;
    v5 = 0;
    if (!v7)
      goto LABEL_57;
LABEL_21:
    if (!(_DWORD)v6 && !v18 && v5 > 0xFF)
    {
      *(_QWORD *)a2 = v4;
      *(_BYTE *)(a2 + 8) = v14;
      *(_BYTE *)(a2 + 9) = v20;
      *(_BYTE *)(a2 + 10) = v8;
      *(_BYTE *)(a2 + 16) = 1;
      return;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    v57 = v4;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5, v8);
      v13 = 0;
      v9 = *a1;
      v10 = a1[1];
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v13 = 0;
    }
    v4 = v57;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v7)
  {
    if (v4)
      CFRelease(v4);
  }
}

void sub_196E2C5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;

  if (v12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PolicyDecision::~PolicyDecision(const char ***this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 21), a2);
  if (*((_BYTE *)this + 160))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 19);
  if (*((_BYTE *)this + 144))
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(this + 4), v3);
}

void IPC::ArgumentCoder<WebKit::PolicyDecisionConsoleMessage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
}

uint64_t IPC::Decoder::decode<JSC::MessageSource>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<JSC::MessageSource,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, v2 + 3);
  LOBYTE(v2) = *((_BYTE *)v2 + 28);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::PrintInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  BOOL i;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;

  v4 = IPC::Decoder::decode<float>(a1);
  v5 = IPC::Decoder::decode<float>(a1);
  v6 = IPC::Decoder::decode<float>(a1);
  result = IPC::Decoder::decode<WebCore::RectEdges<float>>(a1, (uint64_t)&v20);
  v8 = a1[1];
  v9 = *a1;
  v10 = a1[2] - *a1;
  if (v8 <= v10)
    goto LABEL_13;
  v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    v16 = v8;
    v17 = 0;
    goto LABEL_14;
  }
  v12 = *v11;
  if (v12 > 1)
    goto LABEL_15;
  v13 = 0;
  for (i = v12 != 0; ; i = 0)
  {
    if ((v4 & 0xFF00000000) != 0 && (v5 & 0xFF00000000) != 0 && (v6 & 0xFF00000000) != 0 && v21 && !v13)
    {
      *(_DWORD *)a2 = v4;
      *(_DWORD *)(a2 + 4) = v5;
      *(_DWORD *)(a2 + 8) = v6;
      *(_OWORD *)(a2 + 12) = v20;
      *(_BYTE *)(a2 + 28) = i;
      v15 = 1;
      goto LABEL_11;
    }
    __break(1u);
LABEL_13:
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
LABEL_14:
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v9 = *a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
      break;
    if (!v8)
      break;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
    if (!*a1)
      break;
    v13 = 1;
  }
  v15 = 0;
  *(_BYTE *)a2 = 0;
LABEL_11:
  *(_BYTE *)(a2 + 32) = v15;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = *a1;
  if (!*a1)
    goto LABEL_7;
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
  v4 = a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v8);
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = *a1;
  if (!*a1)
    goto LABEL_7;
  LOBYTE(v6) = v9;
  if (!v9 || !v5)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  v7 = v8[1];
  *(_QWORD *)a2 = v8[0];
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = result;
  LOBYTE(v6) = 1;
LABEL_5:
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

char *IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;

  v4 = a2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>((char *)a1, a2, v4);
}

_QWORD *IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  __int128 v6;
  int v7;
  char v8;

  result = IPC::Decoder::decode<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>>(a1, (uint64_t)&v6);
  v5 = *a1;
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  if (v8)
  {
    *(_OWORD *)a2 = v6;
    *(_DWORD *)(a2 + 16) = v7;
    LOBYTE(v5) = 1;
LABEL_4:
    *(_BYTE *)(a2 + 20) = v5;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *IPC::Decoder::decode<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 20))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::RTC::Network::InterfaceAddress,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v2;
  int v4;
  char *result;

  v2 = a2;
  v4 = a2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>((char *)a1, v2, v4);
  LODWORD(v2) = v2[5];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 20))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(IPC::Encoder *a1, __int16 *a2)
{
  __int16 v4;
  int v5;

  v4 = *a2;
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  v5 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)a2 + 1), *((unsigned int *)a2 + 5));
  return IPC::ArgumentCoder<std::optional<WebKit::RTC::Network::IPAddress>,void>::encode<IPC::Encoder,std::optional<WebKit::RTC::Network::IPAddress> const&>(a1, (uint64_t)(a2 + 12));
}

WTF *IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  WTF *result;
  void *v7;
  WTF *v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  WTF *v12;
  uint64_t v13;
  char v14;

  v4 = IPC::Decoder::decode<unsigned short>(a1);
  v5 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v12);
  result = (WTF *)IPC::Decoder::decode<std::optional<WebKit::RTC::Network::IPAddress>>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if ((v4 & 0xFF0000) != 0 && (v5 & 0xFF00000000) != 0 && v14 && v11)
    {
      *(_OWORD *)(a2 + 24) = v9;
      *(_QWORD *)(a2 + 40) = v10;
      v8 = v12;
      *(_QWORD *)a2 = (unsigned __int16)v4 | (unint64_t)(v5 << 32);
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = v13;
      *(_BYTE *)(a2 + 48) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v14)
  {
    result = v12;
    if (v12)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

void sub_196E2CD88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, char a17)
{
  if (a17)
  {
    if (a14)
      WTF::fastFree(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::RTC::Network::IPAddress>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::RTCNetwork,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
  v4 = *(_DWORD *)(a2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>((char *)a1, (int *)(a2 + 32), v4);
  v5 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LOWORD(v6) = *(_WORD *)(a2 + 60);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v6;
  v7 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  LOBYTE(v7) = *(_BYTE *)(a2 + 68);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v7) = *(_BYTE *)(a2 + 69);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  return IPC::VectorArgumentCoder<false,WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
}

WTF *IPC::ArgumentCoder<WebKit::RTCNetwork,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  char v12;
  char v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  WTF *result;
  char *v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  WTF *v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  char v62;
  WTF *v63;
  uint64_t v64;
  char v65;
  WTF *v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  WTF *v72;
  uint64_t v73;

  IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v66);
  IPC::Decoder::decode<WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v63);
  IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)&v60);
  v59 = IPC::Decoder::decode<unsigned int>(a1);
  v58 = IPC::Decoder::decode<unsigned int>(a1);
  v57 = IPC::Decoder::decode<unsigned short>(a1);
  v4 = IPC::Decoder::decode<unsigned int>(a1);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_41;
  v8 = (unsigned __int8 *)(v6 + v7);
  v9 = v6 + v7 + 1;
  a1[2] = v9;
  if (!v6)
  {
    v42 = v5;
    v43 = 0;
    goto LABEL_42;
  }
  v10 = *v8;
  if (v10 < 2)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (!v46 || !v5)
    {
      v13 = 0;
      v47 = 0;
      v6 = 0;
      v11 = 1;
LABEL_46:
      *a1 = 0;
      a1[1] = 0;
      v48 = a1[3];
      if (v48 && v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v6, v47);
        v16 = 0;
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v16 = 0;
      }
      goto LABEL_48;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v6);
    v12 = 0;
    v6 = *a1;
    v5 = a1[1];
    v11 = 1;
    v9 = a1[2];
LABEL_5:
    if (v10)
      v13 = v12;
    else
      v13 = 0;
    v14 = v9 - v6;
    if (v5 <= v14)
    {
      v47 = 0;
      v56 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v56 && v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        v6 = *a1;
        v47 = a1[1];
      }
      else
      {
        v6 = 0;
      }
      goto LABEL_46;
    }
    v15 = (unsigned __int8 *)(v6 + v14);
    a1[2] = (uint64_t)(v15 + 1);
    if (!v6)
    {
      v47 = v5;
      goto LABEL_46;
    }
    v16 = *v15;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
    v49 = a1[3];
    if (v49 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v6);
    v18 = 0;
    v17 = 1;
LABEL_12:
    v19 = v16 ? v18 : 0;
    v20 = IPC::Decoder::decode<unsigned int>(a1);
    v21 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v22)
      break;
LABEL_58:
    v22 = (void *)*a1;
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (!result
      || !v55
      || (result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v22),
          (v34 = *a1) == 0))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 96) = 0;
      goto LABEL_60;
    }
    result = 0;
    v36 = 1;
LABEL_28:
    if (v68
      && v65
      && v62
      && (v59 & 0xFF00000000) != 0
      && (v58 & 0xFF00000000) != 0
      && (v57 & 0xFF0000) != 0
      && (v4 & 0xFF00000000) != 0
      && !v11
      && !v17
      && (v20 & 0xFF00000000) != 0
      && !v36)
    {
      v37 = v66;
      v66 = 0;
      v38 = v63;
      v63 = 0;
      *(_OWORD *)(a2 + 32) = v60;
      v39 = v61;
      *(_QWORD *)a2 = v37;
      v40 = v67;
      v67 = 0;
      *(_QWORD *)(a2 + 8) = v40;
      *(_QWORD *)(a2 + 16) = v38;
      v41 = v64;
      v64 = 0;
      *(_QWORD *)(a2 + 24) = v41;
      *(_DWORD *)(a2 + 48) = v39;
      *(_DWORD *)(a2 + 52) = v59;
      *(_DWORD *)(a2 + 56) = v58;
      *(_WORD *)(a2 + 60) = v57;
      *(_DWORD *)(a2 + 64) = v4;
      *(_BYTE *)(a2 + 68) = v13;
      *(_BYTE *)(a2 + 69) = v19;
      *(_DWORD *)(a2 + 72) = v20;
      *(_QWORD *)(a2 + 80) = result;
      *(_DWORD *)(a2 + 88) = v35;
      *(_DWORD *)(a2 + 92) = v34;
      *(_BYTE *)(a2 + 96) = 1;
      goto LABEL_60;
    }
    __break(1u);
LABEL_41:
    v42 = 0;
    v43 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v43 = *a1;
        v42 = a1[1];
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45 && v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
      v10 = 0;
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v10 = 0;
    }
  }
  v23 = v21;
  v72 = 0;
  v73 = 0;
  if (v21 >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTC::Network::InterfaceAddress>((uint64_t)&v69, a1);
      if (!v71)
        goto LABEL_56;
      v50 = HIDWORD(v73);
      if (HIDWORD(v73) == (_DWORD)v73)
      {
        v51 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, HIDWORD(v73) + 1, (unint64_t)&v69);
        v50 = HIDWORD(v73);
        v52 = (char *)v72 + 24 * HIDWORD(v73);
        v53 = *(_OWORD *)v51;
        *((_QWORD *)v52 + 2) = *(_QWORD *)(v51 + 16);
      }
      else
      {
        v52 = (char *)v72 + 24 * HIDWORD(v73);
        v53 = v69;
        *((_QWORD *)v52 + 2) = v70;
      }
      *(_OWORD *)v52 = v53;
      HIDWORD(v73) = v50 + 1;
      if (!--v23)
      {
        WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v72, (v50 + 1));
        result = v72;
        v35 = v73;
        LODWORD(v34) = HIDWORD(v73);
        goto LABEL_26;
      }
    }
  }
  if (v21)
  {
    v24 = 24 * v21;
    v25 = WTF::fastMalloc((WTF *)(24 * v21));
    LODWORD(v73) = v24 / 0x18;
    v72 = (WTF *)v25;
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTC::Network::InterfaceAddress>((uint64_t)&v69, a1);
      if (!v71)
        break;
      v26 = HIDWORD(v73);
      if (HIDWORD(v73) == (_DWORD)v73)
      {
        v27 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, HIDWORD(v73) + 1, (unint64_t)&v69);
        v28 = HIDWORD(v73);
        result = v72;
        v30 = (char *)v72 + 24 * HIDWORD(v73);
        v31 = *(_OWORD *)v27;
        *((_QWORD *)v30 + 2) = *(_QWORD *)(v27 + 16);
        *(_OWORD *)v30 = v31;
        v26 = v28;
      }
      else
      {
        result = v72;
        v32 = (char *)v72 + 24 * HIDWORD(v73);
        v33 = v69;
        *((_QWORD *)v32 + 2) = v70;
        *(_OWORD *)v32 = v33;
      }
      LODWORD(v34) = v26 + 1;
      HIDWORD(v73) = v34;
      if (!--v23)
      {
        v35 = v73;
        goto LABEL_26;
      }
    }
LABEL_56:
    v54 = v72;
    if (v72)
    {
      v72 = 0;
      LODWORD(v73) = 0;
      WTF::fastFree(v54, v22);
    }
    goto LABEL_58;
  }
  result = 0;
  v35 = 0;
  LODWORD(v34) = 0;
LABEL_26:
  if (*a1)
  {
    v36 = 0;
    goto LABEL_28;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
  if (result)
    result = (WTF *)WTF::fastFree(result, v22);
LABEL_60:
  if (v65)
  {
    result = v63;
    if (v63)
    {
      v63 = 0;
      LODWORD(v64) = 0;
      result = (WTF *)WTF::fastFree(result, v22);
    }
  }
  if (v68)
  {
    result = v66;
    if (v66)
    {
      v66 = 0;
      LODWORD(v67) = 0;
      return (WTF *)WTF::fastFree(result, v22);
    }
  }
  return result;
}

void sub_196E2D498(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, WTF *a19, int a20,int a21,char a22)
{
  if (a18 && a15)
    WTF::fastFree(a15, a2);
  if (a22)
  {
    if (a19)
      WTF::fastFree(a19, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)a2 + 2);
  v7 = *((_QWORD *)a2 + 4);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *((_QWORD *)a2 + 5);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  LODWORD(v8) = a2[12];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  LOBYTE(v8) = *((_BYTE *)a2 + 52);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v8) = *((_BYTE *)a2 + 53);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v8) = *((_BYTE *)a2 + 54);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LODWORD(v8) = a2[14];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  LODWORD(v8) = a2[15];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  return IPC::ArgumentCoder<webrtc::EncodedImage::Timing,void>::encode(a1, (uint64_t)(a2 + 16));
}

unint64_t IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int i;
  char v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  char v103;
  char v104;
  char v105;
  int v106;
  int v107;
  uint64_t v108;
  char v109;
  char v110;

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 >= v5 && v3 - v5 > 3)
  {
    v7 = (int *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v107 = 0;
      v8 = *v7;
      LODWORD(v93) = v8;
      HIDWORD(v93) = v8 & 0xFFFFFF00;
      v9 = v4;
      goto LABEL_8;
    }
    v9 = v3;
    v75 = 0;
  }
  else
  {
    v9 = 0;
    v75 = 0;
    *a1 = 0;
    a1[1] = 0;
    v76 = a1[3];
    if (v76)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
        v75 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v75 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v77 = a1[3];
  if (!v77)
  {
    v9 = 0;
LABEL_91:
    v3 = 0;
    v4 = 0;
    v93 = 0;
    v107 = 1;
    goto LABEL_8;
  }
  if (!v9)
    goto LABEL_91;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v75, v9);
  v93 = 0;
  v9 = *a1;
  v3 = a1[1];
  v107 = 1;
  v4 = *a1;
LABEL_8:
  v10 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
  if (v3 < v10 || v3 - v10 <= 3)
  {
    v13 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v78 = a1[3];
    if (v78)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
        v9 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v9 = 0;
      }
    }
    goto LABEL_93;
  }
  v12 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (uint64_t)(v12 + 1);
  v13 = v3;
  if (!v4)
  {
LABEL_93:
    *a1 = 0;
    a1[1] = 0;
    v79 = a1[3];
    if (v79 && v13)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v9, v13);
    v92 = 0;
    v106 = 1;
    goto LABEL_15;
  }
  v106 = 0;
  LODWORD(v92) = *v12;
  HIDWORD(v92) = *v12 & 0xFFFFFF00;
LABEL_15:
  v91 = IPC::Decoder::decode<long long>(a1);
  v105 = v14;
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v108);
  v90 = IPC::Decoder::decode<long long>(a1);
  v104 = v15;
  v89 = IPC::Decoder::decode<long long>(a1);
  v103 = v16;
  v17 = IPC::Decoder::decode<unsigned int>(a1);
  if ((v17 & 0xFF00000000) == 0 || v17 > 4 || ((1 << v17) & 0x19) == 0)
  {
    v18 = *a1;
    v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_64;
    goto LABEL_20;
  }
  v102 = 0;
  for (i = v17; ; i = 0)
  {
    v21 = a1[1];
    v22 = *a1;
    v23 = a1[2] - *a1;
    if (v21 <= v23)
    {
      v57 = 0;
      v58 = 0;
      *a1 = 0;
      a1[1] = 0;
      v59 = a1[3];
      if (v59)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
          v58 = *a1;
          v57 = a1[1];
        }
        else
        {
          v57 = 0;
          v58 = 0;
        }
      }
      goto LABEL_67;
    }
    v24 = (unsigned __int8 *)(v22 + v23);
    a1[2] = (uint64_t)(v24 + 1);
    if (!v22)
    {
      v57 = v21;
      v58 = 0;
LABEL_67:
      v21 = 0;
      v22 = 0;
      *a1 = 0;
      a1[1] = 0;
      v60 = a1[3];
      if (v60)
      {
        if (v57)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v58, v57);
          v22 = *a1;
          v21 = a1[1];
        }
        else
        {
          v21 = 0;
          v22 = 0;
        }
      }
      goto LABEL_68;
    }
    v25 = *v24;
    if (v25 < 4)
    {
      v101 = v25 | 0x100;
      goto LABEL_25;
    }
LABEL_68:
    *a1 = 0;
    a1[1] = 0;
    v61 = a1[3];
    if (!v61)
    {
      v22 = 0;
      v101 = 0;
      v21 = 0;
      goto LABEL_70;
    }
    if (!v21)
    {
      v22 = 0;
      v101 = 0;
LABEL_70:
      *a1 = 0;
      a1[1] = 0;
      v62 = a1[3];
      if (v62)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v22);
          v63 = *a1;
          v21 = a1[1];
        }
        else
        {
          v63 = 0;
        }
      }
      else
      {
        v63 = 0;
        v21 = 0;
      }
      goto LABEL_72;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v22);
    v101 = 0;
    v22 = *a1;
    v21 = a1[1];
LABEL_25:
    if (v21 <= a1[2] - v22)
      goto LABEL_70;
    v26 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v26 + 1);
    if (!v22)
    {
      v63 = 0;
LABEL_72:
      *a1 = 0;
      a1[1] = 0;
      v64 = a1[3];
      if (v64)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v63);
          v22 = *a1;
          v21 = a1[1];
        }
        else
        {
          v22 = 0;
        }
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
      goto LABEL_74;
    }
    v27 = *v26;
    if (v27 < 2)
    {
      v28 = v27 | 0x100;
      goto LABEL_29;
    }
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (!v65)
    {
      v22 = 0;
      v100 = 0;
      v21 = 0;
      goto LABEL_76;
    }
    if (!v21)
    {
      v22 = 0;
      v100 = 0;
LABEL_76:
      *a1 = 0;
      a1[1] = 0;
      v66 = a1[3];
      if (v66)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v22);
          v67 = *a1;
          v21 = a1[1];
        }
        else
        {
          v67 = 0;
        }
      }
      else
      {
        v67 = 0;
        v21 = 0;
      }
      goto LABEL_78;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v22);
    v28 = 0;
    v22 = *a1;
    v21 = a1[1];
LABEL_29:
    v100 = v28;
    if (v21 <= a1[2] - v22)
      goto LABEL_76;
    v29 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v29 + 1);
    if (v22)
    {
      v30 = *v29;
      if (v30 < 2)
      {
        v99 = 0;
        v31 = 1;
        goto LABEL_33;
      }
      goto LABEL_81;
    }
    v67 = 0;
LABEL_78:
    *a1 = 0;
    a1[1] = 0;
    v68 = a1[3];
    if (!v68)
    {
      v21 = 0;
LABEL_80:
      v22 = 0;
      v30 = 0;
      goto LABEL_81;
    }
    if (!v21)
      goto LABEL_80;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v67);
    v30 = 0;
    v22 = *a1;
    v21 = a1[1];
LABEL_81:
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69 && v21)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v22);
    v31 = 0;
    v99 = 1;
LABEL_33:
    if (!v30)
      v31 = 0;
    v88 = v31;
    v98 = IPC::Decoder::decode<unsigned int>(a1);
    v32 = IPC::Decoder::decode<unsigned int>(a1);
    v33 = a1[1];
    v34 = *a1;
    v35 = a1[2] - *a1;
    v97 = v32;
    if (v33 <= v35)
    {
      v70 = 0;
      v71 = 0;
      *a1 = 0;
      a1[1] = 0;
      v72 = a1[3];
      if (v72)
      {
        if (v33)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v72 + 16))(v72, v34, v33);
          v71 = *a1;
          v70 = a1[1];
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
      }
    }
    else
    {
      v36 = (char *)(v34 + v35);
      a1[2] = (uint64_t)(v36 + 1);
      if (v34)
      {
        v37 = 0;
        v95 = *v36;
        goto LABEL_38;
      }
      v70 = v33;
      v71 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v73 = a1[3];
    if (v73 && v70)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v71);
    v95 = 0;
    v37 = 1;
LABEL_38:
    v87 = IPC::Decoder::decode<long long>(a1);
    v39 = v38;
    v86 = IPC::Decoder::decode<long long>(a1);
    v41 = v40;
    v85 = IPC::Decoder::decode<long long>(a1);
    v43 = v42;
    v84 = IPC::Decoder::decode<long long>(a1);
    v45 = v44;
    v83 = IPC::Decoder::decode<long long>(a1);
    v47 = v46;
    v82 = IPC::Decoder::decode<long long>(a1);
    v49 = v48;
    v81 = IPC::Decoder::decode<long long>(a1);
    v51 = v50;
    result = IPC::Decoder::decode<long long>(a1);
    v52 = result;
    v53 = *a1;
    if (*a1)
    {
      if (v37 || !v39 || !v41 || !v43 || !v45 || !v47 || !v49 || !v51 || !(_BYTE)v18)
        goto LABEL_63;
      goto LABEL_48;
    }
    v74 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
      break;
    if (!v74)
      break;
    v80 = v52;
    result = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
    if (!*a1)
      break;
    v52 = v80;
    v95 = 0;
LABEL_48:
    if (!v107
      && !v106
      && v105
      && v110
      && v104
      && v103
      && !v102
      && v101 > 0xFF
      && v100 > 0xFF
      && !v99
      && (v98 & 0xFF00000000) != 0
      && (v97 & 0xFF00000000) != 0
      && v53)
    {
      v54 = a2;
      *(_BYTE *)(a2 + 64) = v95;
      *(_QWORD *)(a2 + 72) = v87;
      *(_QWORD *)(a2 + 80) = v86;
      *(_QWORD *)(a2 + 88) = v85;
      *(_QWORD *)(a2 + 96) = v84;
      *(_QWORD *)(a2 + 104) = v83;
      *(_QWORD *)(a2 + 112) = v82;
      *(_QWORD *)(a2 + 120) = v81;
      *(_QWORD *)(a2 + 128) = v52;
      *(_DWORD *)a2 = v93 | HIDWORD(v93);
      *(_DWORD *)(a2 + 4) = v92 | HIDWORD(v92);
      v55 = v108;
      *(_QWORD *)(a2 + 8) = v91;
      *(_QWORD *)(a2 + 16) = v55;
      *(_BYTE *)(a2 + 24) = v109;
      *(_QWORD *)(a2 + 32) = v90;
      *(_QWORD *)(a2 + 40) = v89;
      *(_DWORD *)(a2 + 48) = i;
      *(_BYTE *)(a2 + 52) = v101;
      *(_BYTE *)(a2 + 53) = v100;
      *(_BYTE *)(a2 + 54) = v88;
      v56 = 1;
      *(_DWORD *)(a2 + 56) = v98;
      *(_DWORD *)(a2 + 60) = v97;
      goto LABEL_62;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    if (v19)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
LABEL_20:
    v102 = 1;
  }
  v56 = 0;
  v54 = a2;
  *(_BYTE *)a2 = 0;
LABEL_62:
  *(_BYTE *)(v54 + 136) = v56;
  return result;
}

char *IPC::ArgumentCoder<webrtc::EncodedImage::Timing,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v12;
  return result;
}

char *IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v8 = *(_QWORD *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v8;
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  char v17;

  v4 = IPC::Decoder::decode<signed char>(a1);
  if (v4 < 0x100u
    || ((v8 = v4, v9 = 0, v4 > 0x38u) || ((1 << v4) & 0x101415555555501) == 0)
    && v4 != 255)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_18;
    goto LABEL_3;
  }
  while (1)
  {
    v10 = IPC::Decoder::decode<unsigned int>(a1);
    v11 = IPC::Decoder::decode<unsigned int>(a1);
    v12 = IPC::Decoder::decode<long long>(a1);
    v14 = v13;
    IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>(a1, (uint64_t)&v16);
    result = IPC::Decoder::decode<long long>(a1);
    v15 = *a1;
    if (!*a1)
      break;
    if (!v9 && (v10 & 0xFF00000000) != 0 && (v11 & 0xFF00000000) != 0 && v14 && v17 && (_BYTE)v5)
    {
      *(_BYTE *)a2 = v8;
      *(_DWORD *)(a2 + 4) = v10;
      *(_DWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = v16;
      *(_QWORD *)(a2 + 40) = result;
      LOBYTE(v15) = 1;
      goto LABEL_14;
    }
    __break(1u);
LABEL_18:
    if (v6)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
LABEL_3:
    v8 = 0;
    v9 = 1;
  }
  *(_BYTE *)a2 = 0;
LABEL_14:
  *(_BYTE *)(a2 + 48) = v15;
  return result;
}

void IPC::ArgumentCoder<WebKit::RTCPacketOptions,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[112];
  char v5[56];

  IPC::Decoder::decode<WebKit::RTCPacketOptions::SerializableData>(a1, (uint64_t)v5);
  if (*a1)
  {
    if (v5[48])
    {
      WebKit::RTCPacketOptions::RTCPacketOptions((uint64_t)v4, v5);
      rtc::PacketOptions::PacketOptions();
      a2[112] = 1;
      rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)v4);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a2 = 0;
    a2[112] = 0;
  }
}

void sub_196E2E22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)va);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WebKit::RTCPacketOptions::SerializableData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteWorkerInitializationData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  result = IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v12);
  if (*a1)
  {
    if (v6 && v14)
    {
      v9 = v12;
      v12 = 0;
      v11[0] = 0;
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v9;
      v11[1] = 0;
      v10 = v13;
      v13 = 0;
      *(_QWORD *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 24) = 1;
      result = WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v8);
      goto LABEL_5;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_5:
  if (v14)
    return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v8);
  return result;
}

char *IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v2 + 1);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v2 + 4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 12);
  v5 = v2[13];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v4) = *((_BYTE *)v2 + 112);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 113);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  char v15;
  char v16;
  unsigned __int8 *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  char v34;
  char v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _BYTE v49[32];
  __int128 v50;
  char v51;
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  __int16 v57;
  WTF::StringImpl *v58;
  char v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;
  char v63;
  __int128 v64;
  char v65;
  char v66;
  __int128 v67;
  char v68;
  char v69;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)&v67);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)&v64);
  IPC::Decoder::decode<WTF::URL>(a1, &v60);
  IPC::Decoder::decode<WTF::String>(a1, &v58);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v9 = a1[1];
  v10 = *a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
    goto LABEL_36;
  v12 = (unsigned __int8 *)(v10 + v11);
  a1[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    v22 = v9;
    v23 = 0;
    goto LABEL_37;
  }
  v13 = *v12;
  if (v13 < 2)
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (!v25)
    {
      v10 = 0;
      v16 = 0;
      v9 = 0;
      v14 = 1;
      goto LABEL_41;
    }
    v33 = v13;
    v37 = result;
    v43 = v8;
    if (!v9)
    {
      v10 = 0;
      v16 = 0;
      v14 = 1;
LABEL_41:
      *a1 = 0;
      a1[1] = 0;
      v26 = a1[3];
      if (v26)
      {
        v32 = v14;
        v36 = v16;
        v42 = result;
        v48 = v8;
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v10);
          v27 = *a1;
          v9 = a1[1];
        }
        else
        {
          v27 = 0;
        }
        result = v42;
        v8 = v48;
        v14 = v32;
        v16 = v36;
      }
      else
      {
        v27 = 0;
        v9 = 0;
      }
      goto LABEL_43;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v10);
    v15 = 0;
    v10 = *a1;
    v9 = a1[1];
    v14 = 1;
    result = v37;
    v8 = v43;
    v13 = v33;
LABEL_5:
    if (v13)
      v16 = v15;
    else
      v16 = 0;
    if (v9 <= a1[2] - v10)
      goto LABEL_41;
    v17 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v17 + 1);
    if (!v10)
    {
      v27 = 0;
LABEL_43:
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        v31 = v14;
        v35 = v16;
        v40 = result;
        v46 = v8;
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v27);
          v10 = *a1;
          v9 = a1[1];
        }
        else
        {
          v10 = 0;
        }
        result = v40;
        v8 = v46;
        v14 = v31;
        v16 = v35;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      goto LABEL_45;
    }
    v18 = *v17;
    if (v18 <= 0xE)
    {
      v10 = v18 | 0x100;
      goto LABEL_12;
    }
LABEL_45:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (!v29)
      goto LABEL_46;
    if (!v9)
      goto LABEL_46;
    v30 = v14;
    v34 = v16;
    v38 = result;
    v44 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v10);
    result = v38;
    v8 = v44;
    v14 = v30;
    v16 = v34;
    if (!*a1)
    {
LABEL_46:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_24;
    }
    LOBYTE(v18) = 0;
    v10 = 0;
LABEL_12:
    if (v6)
    {
      *(_QWORD *)v49 = v4;
      if (v69)
      {
        *(_OWORD *)&v49[8] = v67;
        v49[24] = v68;
        if (v66)
        {
          v50 = v64;
          v51 = v65;
          if (v63)
          {
            v19 = v60;
            v60 = 0;
            v52 = v19;
            v53 = v61;
            v54 = v62;
            LODWORD(v61) = v61 & 0xFFFFFFFE;
            if (v59)
            {
              v20 = v58;
              v58 = 0;
              v55 = v20;
              if ((_BYTE)v8)
              {
                v56 = result;
                if (!v14)
                {
                  LOBYTE(v57) = v16;
                  if (v10 > 0xFF)
                    break;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      v41 = result;
      v47 = v8;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v10);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
      result = v41;
      v8 = v47;
    }
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v39 = result;
      v45 = v8;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v23, v22);
        v13 = 0;
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v13 = 0;
      }
      result = v39;
      v8 = v45;
    }
    else
    {
      v9 = 0;
      v13 = 0;
    }
  }
  HIBYTE(v57) = v18;
  *(_OWORD *)a2 = *(_OWORD *)v49;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v49[16];
  *(_OWORD *)(a2 + 32) = v50;
  *(_BYTE *)(a2 + 48) = v51;
  WTF::URL::URL(a2 + 56, (uint64_t *)&v52);
  v21 = v56;
  result = v52;
  *(_QWORD *)(a2 + 96) = v55;
  *(_QWORD *)(a2 + 104) = v21;
  *(_WORD *)(a2 + 112) = v57;
  *(_BYTE *)(a2 + 120) = 1;
  v55 = 0;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_24:
  if (v59)
  {
    result = v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v63)
  {
    result = v60;
    v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E2E874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a28 && a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a34 && a29)
  {
    if (*(_DWORD *)a29 == 2)
      WTF::StringImpl::destroy(a29, a2);
    else
      *(_DWORD *)a29 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::WallTime>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return a1;
}

uint64_t IPC::ArgumentCoder<WebKit::TextCheckerState,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v27 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        a1 = v27;
        v15 = *v27;
        v14 = v27[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_15;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    v14 = v1;
    v15 = 0;
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v26 = a1;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v6 = 0;
        a1 = v26;
        v2 = *v26;
        v1 = v26[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
    goto LABEL_17;
  }
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
LABEL_17:
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (!v12)
  {
    v2 = 0;
    v7 = 1;
LABEL_19:
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
      goto LABEL_27;
    v1 = 0;
    v2 = 0;
    goto LABEL_21;
  }
  v21 = v6;
  v25 = a1;
  if (!v1)
  {
    v12 = 0;
    v2 = 0;
    v7 = 1;
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v2);
  v8 = 0;
  a1 = v25;
  v2 = *v25;
  v1 = v25[1];
  v7 = 1;
  v5 = v25[2];
  v6 = v21;
LABEL_5:
  if (v6)
    v9 = v8;
  else
    v9 = 0;
  v10 = v5 - v2;
  if (v1 <= v10)
  {
    v22 = v7;
    v12 = 0;
    v18 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v28 = a1;
    if (v18 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      a1 = v28;
      v2 = *v28;
      v12 = v28[1];
    }
    else
    {
      v2 = 0;
    }
    v7 = v22;
    goto LABEL_19;
  }
  v11 = (unsigned __int8 *)(v2 + v10);
  a1[2] = v11 + 1;
  if (!v2)
  {
    v12 = v1;
    goto LABEL_19;
  }
  v12 = *v11;
  if (v12 > 1)
    goto LABEL_21;
  if ((v7 & 1) != 0)
  {
    while (1)
    {
      __break(1u);
LABEL_27:
      v20 = v7;
      v24 = a1;
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v12);
        a1 = v24;
        v2 = *v24;
        v1 = v24[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v7 = v20;
LABEL_21:
      *a1 = 0;
      a1[1] = 0;
      v12 = a1[3];
      if (!v12)
        break;
      v19 = v7;
      v23 = a1;
      if (!v1)
      {
        LODWORD(v12) = 0;
        break;
      }
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v2);
      v12 = *v23;
      if (!*v23)
        break;
      v12 = v19;
    }
    LOWORD(v9) = 0;
  }
  else
  {
    LOWORD(v7) = (_DWORD)v12 != 0;
    LODWORD(v12) = 1;
  }
  return (unsigned __int16)(v9 | ((_WORD)v7 << 8)) | ((_DWORD)v12 << 16);
}

_QWORD *IPC::ArgumentCoder<WebKit::TextAnimationData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  _QWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WebKit::CacheModel>(a1);
  result = IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v8);
  if (!*a1)
    goto LABEL_7;
  if (v4 <= 0xFFu || !v9)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v6 = v8;
  HIBYTE(v7) = v8;
  *(_BYTE *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 1) = v7;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

char *IPC::ArgumentCoder<WebCore::TextRecognitionWordData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, (int *)v2 + 2);
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::FloatQuad>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::TextRecognitionLineData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 8));
  v4 = *((_BYTE *)v2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 49);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 16);
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 32));
  IPC::encodeObjectDirectly<NSData>(a1, *(CFTypeRef *)(a2 + 48));
}

void IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  WTF *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  WTF *v17;
  unsigned int v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  WTF *v39;
  unsigned int v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  WTF *v75;
  unint64_t v76;
  WTF *v77;
  unint64_t v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  void *v82;
  void *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  char v89;
  WTF *v90;
  unint64_t v91;
  char v92;
  WTF *v93;
  unint64_t v94;
  char v95;
  _BYTE v96[40];
  uint64_t v97;
  uint64_t v98;
  char v99;
  WTF::StringImpl *v100;
  uint64_t v101;

  v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v5)
  {
    v6 = v4;
    v90 = 0;
    v91 = 0;
    if (v4 >= 0x4924)
    {
      do
      {
        IPC::Decoder::decode<WebCore::TextRecognitionLineData>((uint64_t)v96, a1);
        if (!v99)
          goto LABEL_33;
        if (HIDWORD(v91) == (_DWORD)v91)
        {
          WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionLineData>((uint64_t)&v90, (unint64_t)v96);
        }
        else
        {
          v12 = (char *)v90 + 56 * HIDWORD(v91);
          v13 = *(_OWORD *)&v96[16];
          *(_OWORD *)v12 = *(_OWORD *)v96;
          *((_OWORD *)v12 + 1) = v13;
          *((_QWORD *)v12 + 4) = 0;
          *((_QWORD *)v12 + 5) = 0;
          v14 = *(_QWORD *)&v96[32];
          *(_QWORD *)&v96[32] = 0;
          *((_QWORD *)v12 + 4) = v14;
          LODWORD(v14) = v97;
          LODWORD(v97) = 0;
          *((_DWORD *)v12 + 10) = v14;
          LODWORD(v14) = HIDWORD(v97);
          HIDWORD(v97) = 0;
          *((_DWORD *)v12 + 11) = v14;
          *((_WORD *)v12 + 24) = v98;
          ++HIDWORD(v91);
        }
        if (v99)
          WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[32], v5);
        --v6;
      }
      while (v6);
      v15 = HIDWORD(v91);
      v16 = v90;
      if (v91 > HIDWORD(v91))
      {
        v17 = v90;
        if (HIDWORD(v91))
        {
          if (HIDWORD(v91) >= 0x4924925)
          {
            __break(0xC471u);
            goto LABEL_140;
          }
          v18 = 56 * HIDWORD(v91);
          v19 = (WTF *)WTF::fastMalloc((WTF *)(56 * HIDWORD(v91)));
          LODWORD(v91) = v18 / 0x38;
          v90 = v19;
          v17 = v16;
          if (v19 != v16)
          {
            WTF::VectorMover<false,WebCore::TextRecognitionLineData>::move((uint64_t)v16, (char *)v16 + 56 * v15, (uint64_t)v19);
            v17 = v90;
          }
        }
        if (v16)
        {
          if (v17 == v16)
          {
            v90 = 0;
            LODWORD(v91) = 0;
          }
          WTF::fastFree(v16, v5);
          v16 = v90;
        }
        else
        {
          v16 = v17;
        }
      }
      v93 = v16;
      v85 = v91;
      v90 = 0;
      v91 = 0;
      v94 = v85;
    }
    else
    {
      if (v4)
      {
        LODWORD(v91) = 56 * (int)v4 / 0x38u;
        v90 = (WTF *)WTF::fastMalloc((WTF *)(56 * v4));
        while (1)
        {
          IPC::Decoder::decode<WebCore::TextRecognitionLineData>((uint64_t)v96, a1);
          if (!v99)
            break;
          if (HIDWORD(v91) == (_DWORD)v91)
          {
            WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionLineData>((uint64_t)&v90, (unint64_t)v96);
          }
          else
          {
            v7 = (char *)v90 + 56 * HIDWORD(v91);
            v8 = *(_OWORD *)&v96[16];
            *(_OWORD *)v7 = *(_OWORD *)v96;
            *((_OWORD *)v7 + 1) = v8;
            *((_QWORD *)v7 + 4) = 0;
            *((_QWORD *)v7 + 5) = 0;
            v9 = *(_QWORD *)&v96[32];
            *(_QWORD *)&v96[32] = 0;
            *((_QWORD *)v7 + 4) = v9;
            LODWORD(v9) = v97;
            LODWORD(v97) = 0;
            *((_DWORD *)v7 + 10) = v9;
            LODWORD(v9) = HIDWORD(v97);
            HIDWORD(v97) = 0;
            *((_DWORD *)v7 + 11) = v9;
            *((_WORD *)v7 + 24) = v98;
            ++HIDWORD(v91);
          }
          if (v99)
            WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[32], v5);
          if (!--v6)
          {
            v10 = v90;
            v11 = v91;
            goto LABEL_15;
          }
        }
LABEL_33:
        LOBYTE(v93) = 0;
        v95 = 0;
        WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v5);
        goto LABEL_34;
      }
      v10 = 0;
      v11 = 0;
LABEL_15:
      v90 = 0;
      v91 = 0;
      v93 = v10;
      v94 = v11;
    }
    v95 = 1;
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v5);
    goto LABEL_39;
  }
  LOBYTE(v93) = 0;
  v95 = 0;
LABEL_34:
  v20 = *a1;
  v21 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v22 = a1[3];
  if (v22)
    v23 = v21 == 0;
  else
    v23 = 1;
  if (!v23)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
LABEL_39:
  v24 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v25)
  {
    LOBYTE(v90) = 0;
    v92 = 0;
LABEL_68:
    v43 = *a1;
    v44 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45 && v44)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
    goto LABEL_69;
  }
  v26 = v24;
  v87 = 0;
  v88 = 0;
  if (v24 >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextRecognitionDataDetector>((uint64_t)v96, (uint64_t *)a1);
      if (!v96[24])
        goto LABEL_67;
      if (HIDWORD(v88) == (_DWORD)v88)
      {
        WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionDataDetector>((uint64_t)&v87, (unint64_t)v96);
      }
      else
      {
        v34 = (char *)v87 + 24 * HIDWORD(v88);
        v35 = *(_QWORD *)v96;
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
        *(_QWORD *)v34 = v35;
        v36 = *(_QWORD *)&v96[8];
        *(_QWORD *)&v96[8] = 0;
        *((_QWORD *)v34 + 1) = v36;
        LODWORD(v36) = *(_DWORD *)&v96[16];
        *(_DWORD *)&v96[16] = 0;
        *((_DWORD *)v34 + 4) = v36;
        LODWORD(v36) = *(_DWORD *)&v96[20];
        *(_DWORD *)&v96[20] = 0;
        *((_DWORD *)v34 + 5) = v36;
        ++HIDWORD(v88);
      }
      std::__optional_destruct_base<WebCore::TextRecognitionDataDetector,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v96, v27);
      if (!--v26)
      {
        v37 = HIDWORD(v88);
        v38 = (char *)v87;
        if (v88 > HIDWORD(v88))
        {
          v39 = v87;
          if (HIDWORD(v88))
          {
            if (HIDWORD(v88) >= 0xAAAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x196E2F848);
            }
            v40 = 24 * HIDWORD(v88);
            v41 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v88)));
            LODWORD(v88) = v40 / 0x18;
            v87 = v41;
            v39 = (WTF *)v38;
            if (v41 != (WTF *)v38)
            {
              WTF::VectorMover<false,WebCore::TextRecognitionDataDetector>::move(v38, &v38[24 * v37], (uint64_t)v41);
              v39 = v87;
            }
          }
          if (v38)
          {
            if (v39 == (WTF *)v38)
            {
              v87 = 0;
              LODWORD(v88) = 0;
            }
            WTF::fastFree((WTF *)v38, v25);
            v38 = (char *)v87;
          }
          else
          {
            v38 = (char *)v39;
          }
        }
        v87 = 0;
        v90 = (WTF *)v38;
        v33 = v88;
        v32 = HIDWORD(v88);
        goto LABEL_52;
      }
    }
  }
  if (v24)
  {
    LODWORD(v88) = 24 * (int)v24 / 0x18u;
    v87 = (WTF *)WTF::fastMalloc((WTF *)(24 * v24));
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextRecognitionDataDetector>((uint64_t)v96, (uint64_t *)a1);
      if (!v96[24])
        break;
      if (HIDWORD(v88) == (_DWORD)v88)
      {
        WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionDataDetector>((uint64_t)&v87, (unint64_t)v96);
      }
      else
      {
        v28 = (char *)v87 + 24 * HIDWORD(v88);
        v29 = *(_QWORD *)v96;
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = 0;
        *(_QWORD *)v28 = v29;
        v30 = *(_QWORD *)&v96[8];
        *(_QWORD *)&v96[8] = 0;
        *((_QWORD *)v28 + 1) = v30;
        LODWORD(v30) = *(_DWORD *)&v96[16];
        *(_DWORD *)&v96[16] = 0;
        *((_DWORD *)v28 + 4) = v30;
        LODWORD(v30) = *(_DWORD *)&v96[20];
        *(_DWORD *)&v96[20] = 0;
        *((_DWORD *)v28 + 5) = v30;
        ++HIDWORD(v88);
      }
      std::__optional_destruct_base<WebCore::TextRecognitionDataDetector,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v96, v27);
      if (!--v26)
      {
        v31 = v87;
        v33 = v88;
        v32 = HIDWORD(v88);
        goto LABEL_51;
      }
    }
LABEL_67:
    LOBYTE(v90) = 0;
    v92 = 0;
    std::__optional_destruct_base<WebCore::TextRecognitionDataDetector,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v96, v27);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v42);
    goto LABEL_68;
  }
  v32 = 0;
  v33 = 0;
  v31 = 0;
LABEL_51:
  v87 = 0;
  v90 = v31;
LABEL_52:
  v88 = 0;
  v91 = __PAIR64__(v32, v33);
  v92 = 1;
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v25);
LABEL_69:
  v46 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v47)
  {
    v48 = v46;
    v100 = 0;
    v101 = 0;
    if (v46 >= 0x6666)
    {
      do
      {
        IPC::Decoder::decode<WebCore::TextRecognitionBlockData>((uint64_t)v96, (uint64_t *)a1);
        if (!(_BYTE)v97)
          goto LABEL_109;
        v60 = HIDWORD(v101);
        if (HIDWORD(v101) == (_DWORD)v101)
        {
          v61 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, HIDWORD(v101) + 1, (unint64_t)v96);
          v60 = HIDWORD(v101);
          v62 = (char *)v100 + 40 * HIDWORD(v101);
          v63 = *(_QWORD *)v61;
          *(_QWORD *)v61 = 0;
          *(_QWORD *)v62 = v63;
          v64 = *(_OWORD *)(v61 + 8);
          *(_OWORD *)(v62 + 24) = *(_OWORD *)(v61 + 24);
        }
        else
        {
          v62 = (char *)v100 + 40 * HIDWORD(v101);
          v65 = *(_QWORD *)v96;
          *(_QWORD *)v96 = 0;
          *(_QWORD *)v62 = v65;
          v64 = *(_OWORD *)&v96[8];
          *(_OWORD *)(v62 + 24) = *(_OWORD *)&v96[24];
        }
        *(_OWORD *)(v62 + 8) = v64;
        HIDWORD(v101) = v60 + 1;
        if ((_BYTE)v97)
        {
          v66 = *(WTF::StringImpl **)v96;
          *(_QWORD *)v96 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v47);
            else
              *(_DWORD *)v66 -= 2;
          }
        }
        --v48;
      }
      while (v48);
      v67 = HIDWORD(v101);
      v68 = v100;
      if (v101 > HIDWORD(v101))
      {
        v69 = v100;
        if (HIDWORD(v101))
        {
          if (HIDWORD(v101) >= 0x6666667)
          {
            __break(0xC471u);
LABEL_139:
            __break(1u);
LABEL_140:
            JUMPOUT(0x196E2F840);
          }
          v70 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v101)));
          LODWORD(v101) = 40 * v67 / 0x28;
          v100 = (WTF::StringImpl *)v70;
          v69 = v68;
          if ((WTF::StringImpl *)v70 != v68)
          {
            WTF::VectorMover<false,WebCore::TextRecognitionBlockData>::move(v68, (WTF::StringImpl *)((char *)v68 + 40 * v67), v70);
            v69 = v100;
          }
        }
        if (v68)
        {
          if (v69 == v68)
          {
            v100 = 0;
            LODWORD(v101) = 0;
          }
          WTF::fastFree(v68, v47);
          v68 = v100;
        }
        else
        {
          v68 = v69;
        }
      }
      v87 = v68;
      v86 = v101;
      v100 = 0;
      v101 = 0;
      v88 = v86;
    }
    else
    {
      if (v46)
      {
        v49 = 40 * v46;
        v50 = WTF::fastMalloc((WTF *)(40 * v46));
        LODWORD(v101) = v49 / 0x28;
        v100 = (WTF::StringImpl *)v50;
        while (1)
        {
          IPC::Decoder::decode<WebCore::TextRecognitionBlockData>((uint64_t)v96, (uint64_t *)a1);
          if (!(_BYTE)v97)
            break;
          v51 = HIDWORD(v101);
          if (HIDWORD(v101) == (_DWORD)v101)
          {
            v52 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, HIDWORD(v101) + 1, (unint64_t)v96);
            v51 = HIDWORD(v101);
            v53 = (char *)v100 + 40 * HIDWORD(v101);
            v54 = *(_QWORD *)v52;
            *(_QWORD *)v52 = 0;
            *(_QWORD *)v53 = v54;
            v55 = *(_OWORD *)(v52 + 8);
            *(_OWORD *)(v53 + 24) = *(_OWORD *)(v52 + 24);
          }
          else
          {
            v53 = (char *)v100 + 40 * HIDWORD(v101);
            v56 = *(_QWORD *)v96;
            *(_QWORD *)v96 = 0;
            *(_QWORD *)v53 = v56;
            v55 = *(_OWORD *)&v96[8];
            *(_OWORD *)(v53 + 24) = *(_OWORD *)&v96[24];
          }
          *(_OWORD *)(v53 + 8) = v55;
          HIDWORD(v101) = v51 + 1;
          if ((_BYTE)v97)
          {
            v57 = *(WTF::StringImpl **)v96;
            *(_QWORD *)v96 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v47);
              else
                *(_DWORD *)v57 -= 2;
            }
          }
          if (!--v48)
          {
            v58 = v100;
            v59 = v101;
            goto LABEL_86;
          }
        }
LABEL_109:
        LOBYTE(v87) = 0;
        v89 = 0;
        WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v47);
        goto LABEL_110;
      }
      v58 = 0;
      v59 = 0;
LABEL_86:
      v100 = 0;
      v101 = 0;
      v87 = v58;
      v88 = v59;
    }
    v89 = 1;
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v47);
    goto LABEL_111;
  }
  LOBYTE(v87) = 0;
  v89 = 0;
LABEL_110:
  v71 = *a1;
  v72 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v73 = a1[3];
  if (v73 && v72)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v73 + 16))(v73, v71);
LABEL_111:
  IPC::Decoder::decode<WTF::RetainPtr<NSData>>((uint64_t *)a1, (uint64_t)&v100);
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_117;
  }
  if (!v95)
    goto LABEL_139;
  *(_QWORD *)&v96[8] = 0;
  v75 = v93;
  v76 = v94;
  v93 = 0;
  v94 = 0;
  if (!v92)
    goto LABEL_139;
  v77 = v90;
  v78 = v91;
  v90 = 0;
  v91 = 0;
  if (!v89)
    goto LABEL_139;
  v79 = v87;
  v80 = v88;
  v87 = 0;
  v88 = 0;
  if (!(_BYTE)v101)
    goto LABEL_139;
  v81 = v100;
  v100 = 0;
  *(_QWORD *)a2 = v75;
  *(_QWORD *)(a2 + 8) = v76;
  *(_QWORD *)v96 = 0;
  *(_QWORD *)&v96[16] = 0;
  *(_QWORD *)(a2 + 16) = v77;
  *(_QWORD *)&v96[24] = 0;
  *(_QWORD *)(a2 + 24) = v78;
  *(_QWORD *)&v96[32] = 0;
  *(_QWORD *)(a2 + 32) = v79;
  v97 = 0;
  *(_QWORD *)(a2 + 40) = v80;
  *(_QWORD *)(a2 + 48) = v81;
  *(_BYTE *)(a2 + 56) = 1;
  v98 = 0;
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[32], v74);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96[16], v82);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v83);
LABEL_117:
  if ((_BYTE)v101)
  {
    v84 = v100;
    v100 = 0;
    if (v84)
      CFRelease(v84);
  }
  if (v89)
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v74);
  if (v92)
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v74);
  if (v95)
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v93, v74);
}

void sub_196E2F854(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;
  WTF::StringImpl *v34;
  void *v35;

  if (a30)
  {
    v34 = a25;
    a25 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, a2);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v32 - 64, a2);
  if (a18)
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v35);
  if (a24)
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, v35);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSData>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<NSData>,void>::decode<NSData,NSData*>(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E2F998(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  _DWORD *v8;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 16));
  WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequestBase *)(a2 + 16));
  v8 = v7;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(a1, &v8);
  if (v7)
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v7);
  return IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, a2 + 216);
}

void sub_196E2FA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::RefCountedBase *a9)
{
  WTF::RefCountedBase *v9;

  if (v9)
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  if (a9)
    WTF::RefCounted<WebCore::FormData>::deref(a9);
  _Unwind_Resume(exception_object);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::RefCountedBase *v11;
  WTF::RefCountedBase *v12;
  WTF::RefCountedBase *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  _BYTE v19[200];
  char v20;
  char v21;
  WTF::RefCountedBase *v22;
  char v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t v26;
  CFTypeRef cf;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  _QWORD v31[37];
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v19);
  if (v20)
  {
    IPC::Decoder::decode<IPC::FormDataReference>(a1, &v22);
    if (v23)
    {
      if (!v20)
        goto LABEL_26;
      v11 = v22;
      v22 = 0;
      v31[0] = v11;
      WebCore::ResourceRequestBase::setHTTPBody();
      v12 = (WTF::RefCountedBase *)v31[0];
      v31[0] = 0;
      if (v12)
        WTF::RefCounted<WebCore::FormData>::deref(v12);
      if (v23)
      {
        v13 = v22;
        v22 = 0;
        if (v13)
          WTF::RefCounted<WebCore::FormData>::deref(v13);
      }
    }
  }
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v31);
  if (!*a1)
  {
LABEL_27:
    *a2 = 0;
    a2[512] = 0;
    goto LABEL_25;
  }
  if (!v6 || !v9 || !v20 || !v32)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)&v22, v4, v7, (WebCore::ResourceRequestBase::RequestData *)v19, (uint64_t)v31);
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)a2, (uint64_t)&v22);
  a2[512] = 1;
  v15 = v30;
  v30 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v29 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v29])(&v21, &v28);
  v29 = -1;
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v26);
  v17 = v25;
  v25 = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v24);
LABEL_25:
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v10);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v19);
}

void sub_196E2FCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  WTF::RefCountedBase *v38;
  WTF::RefCountedBase *v39;

  v38 = (WTF::RefCountedBase *)STACK[0x2D8];
  STACK[0x2D8] = 0;
  if (v38)
    WTF::RefCounted<WebCore::FormData>::deref(v38);
  if (a37)
  {
    v39 = (WTF::RefCountedBase *)a36;
    a36 = 0;
    if (v39)
      WTF::RefCounted<WebCore::FormData>::deref(v39);
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E2FDEC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::ViewWindowCoordinates,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  char v11;
  __int128 v12;
  char v13;

  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v10);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v8);
  result = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  if (!*a1)
    goto LABEL_9;
  if (!v13 || !v11 || (v6 = v10, !v9) || (v7 = v8, !v5))
  {
    __break(1u);
LABEL_9:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return result;
  }
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 56) = 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::CString,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v7)
    {
      result = WTF::CString::CString();
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WTF::MediaTime,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 12);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::MediaTime,void>::encode(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v13 = *a2;
  result = IPC::StreamConnectionEncoder::encodeSpan<long long const,18446744073709551615ul>(a1, &v13, 1);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *((_DWORD *)a2 + 2);
      a1[2] = v11;
      v5 = v11;
    }
  }
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *((_BYTE *)a2 + 12);
    a1[2] = v5 + 1;
  }
  return result;
}

int64_t IPC::ArgumentCoder<WTF::MediaTime,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  char v18;
  _BOOL4 v20;
  char v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  result = IPC::Decoder::decode<long long>(a1);
  v6 = v5;
  v7 = a1[1];
  v8 = *a1;
  v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    v11 = (_DWORD *)(v8 + v9);
    v12 = v8 + v9 + 4;
    a1[2] = v12;
    if (!v8)
    {
      v27 = v7;
      v28 = 0;
      goto LABEL_36;
    }
    v13 = 0;
    LODWORD(v14) = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    v27 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      v38 = result;
      v42 = v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
      result = v38;
      v6 = v42;
    }
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v37 = result;
      v41 = v6;
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v28, v27);
        LODWORD(v14) = 0;
        v8 = *a1;
        v7 = a1[1];
        v13 = 1;
        v12 = a1[2];
        result = v37;
        v6 = v41;
LABEL_8:
        v15 = v12 - v8;
        if (v7 <= v15)
        {
          v33 = v14;
          v35 = v13;
          v39 = result;
          v43 = v6;
          v27 = 0;
          v31 = a1[3];
          *a1 = 0;
          a1[1] = 0;
          if (!v31)
            goto LABEL_56;
          if (v7)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
            v8 = *a1;
            v27 = a1[1];
          }
          else
          {
LABEL_56:
            v8 = 0;
          }
          result = v39;
          v6 = v43;
          LODWORD(v14) = v33;
          v13 = v35;
        }
        else
        {
          v16 = (char *)(v8 + v15);
          a1[2] = (uint64_t)(v16 + 1);
          if (v8)
          {
            v17 = 0;
            v18 = *v16;
            goto LABEL_11;
          }
          v27 = v7;
        }
      }
      else
      {
        LODWORD(v14) = 0;
        v8 = 0;
        v13 = 1;
      }
    }
    else
    {
      v27 = 0;
      v8 = 0;
      v13 = 1;
    }
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (!v30)
      goto LABEL_39;
    if (!v27)
      goto LABEL_39;
    v36 = result;
    v40 = v6;
    v32 = v14;
    v34 = v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v8, v27);
    LODWORD(v14) = v32;
    v13 = v34;
    result = v36;
    v6 = v40;
    if (!*a1)
    {
LABEL_39:
      v26 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_33;
    }
    v18 = 0;
    v17 = 1;
LABEL_11:
    if ((_BYTE)v6 && !v13 && !v17)
      break;
    __break(1u);
  }
  v20 = (v18 & 1) == 0 || (_DWORD)v14 != 0;
  if (result >= 0)
    v21 = 5;
  else
    v21 = 9;
  v22 = !v20;
  if (v20)
    v23 = v18;
  else
    v23 = v21;
  if (v22)
    v24 = result >> 63;
  else
    v24 = result;
  *(_QWORD *)a2 = v24;
  if (v22)
    v25 = 1;
  else
    v25 = v14;
  *(_DWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 12) = v23;
  v26 = 1;
LABEL_33:
  *(_BYTE *)(a2 + 16) = v26;
  return result;
}

char *IPC::ArgumentCoder<WTF::Seconds,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v2;
  char *result;

  v2 = *a2;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v2;
  return result;
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<double>(_QWORD *result, double a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 8;
    v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFF7)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(double *)(*result + v6) = a2;
      result[2] = v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfos,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  _OWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *result;
  void *v18;
  _OWORD *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  _OWORD *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF *v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  WTF::StringImpl *v43;
  char v44;
  WTF *v45;
  uint64_t v46;

  v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v5)
  {
    v6 = v4;
    v45 = 0;
    v46 = 0;
    if (v4 >= 0xAAAA)
    {
      do
      {
        result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::DOMCacheEngine::CacheInfo>((uint64_t)&v42, a1);
        if (!v44)
          goto LABEL_39;
        if (HIDWORD(v46) == (_DWORD)v46)
        {
          result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v45, HIDWORD(v46) + 1, (unint64_t)&v42);
          v19 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
          *v19 = *(_OWORD *)result;
          v20 = (WTF::StringImpl **)(v19 + 1);
          v21 = (WTF::StringImpl **)((char *)result + 16);
        }
        else
        {
          v22 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
          *v22 = v42;
          v20 = (WTF::StringImpl **)(v22 + 1);
          v21 = &v43;
        }
        v23 = *v21;
        *v21 = 0;
        *v20 = v23;
        ++HIDWORD(v46);
        if (v44)
        {
          result = v43;
          v43 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            else
              *(_DWORD *)result -= 2;
          }
        }
        --v6;
      }
      while (v6);
      v24 = HIDWORD(v46);
      v25 = v45;
      if (v46 > HIDWORD(v46))
      {
        v26 = v45;
        if (HIDWORD(v46))
        {
          if (HIDWORD(v46) >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return result;
          }
          v27 = 24 * HIDWORD(v46);
          v28 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v46)));
          LODWORD(v46) = v27 / 0x18;
          v45 = v28;
          v26 = v25;
          if (v28 != v25)
          {
            WTF::VectorMover<false,WebKit::WebScriptMessageHandlerData>::move(v25, (WTF::StringImpl *)((char *)v25 + 24 * v24), (uint64_t)v28);
            v26 = v45;
          }
        }
        if (v25)
        {
          if (v26 == v25)
          {
            v45 = 0;
            LODWORD(v46) = 0;
          }
          WTF::fastFree(v25, v5);
          v25 = v45;
        }
        else
        {
          v25 = v26;
        }
      }
      v39 = v25;
      v38 = v46;
      v45 = 0;
      v46 = 0;
      v40 = v38;
      goto LABEL_19;
    }
    if (!v4)
    {
      v14 = 0;
      v15 = 0;
LABEL_18:
      v45 = 0;
      v46 = 0;
      v39 = v14;
      v40 = v15;
LABEL_19:
      v16 = 1;
      v41 = 1;
      result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v5);
      goto LABEL_42;
    }
    LODWORD(v46) = 24 * (int)v4 / 0x18u;
    v45 = (WTF *)WTF::fastMalloc((WTF *)(24 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::DOMCacheEngine::CacheInfo>((uint64_t)&v42, a1);
      if (!v44)
        break;
      if (HIDWORD(v46) == (_DWORD)v46)
      {
        v7 = (_OWORD *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v45, HIDWORD(v46) + 1, (unint64_t)&v42);
        v8 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
        *v8 = *v7;
        v9 = (WTF::StringImpl **)(v8 + 1);
        v10 = (WTF::StringImpl **)(v7 + 1);
      }
      else
      {
        v11 = (_OWORD *)((char *)v45 + 24 * HIDWORD(v46));
        *v11 = v42;
        v9 = (WTF::StringImpl **)(v11 + 1);
        v10 = &v43;
      }
      v12 = *v10;
      *v10 = 0;
      *v9 = v12;
      ++HIDWORD(v46);
      if (v44)
      {
        v13 = v43;
        v43 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v5);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      if (!--v6)
      {
        v14 = v45;
        v15 = v46;
        goto LABEL_18;
      }
    }
LABEL_39:
    LOBYTE(v39) = 0;
    v41 = 0;
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v5);
  }
  else
  {
    LOBYTE(v39) = 0;
    v41 = 0;
  }
  v18 = (void *)*a1;
  v29 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result && v29)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v18);
  v16 = 0;
LABEL_42:
  v30 = a1[1];
  v31 = (WTF::StringImpl *)*a1;
  v32 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v30 >= v32 && v30 - v32 > 7)
  {
    v34 = (WTF::StringImpl **)((char *)v31 + v32);
    a1[2] = (uint64_t)(v34 + 1);
    if (v31)
    {
      v30 = 0;
      v31 = *v34;
      if (!v16)
        goto LABEL_64;
      goto LABEL_49;
    }
    v37 = v30;
    v18 = 0;
  }
  else
  {
    v37 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_65;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v37)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v18);
    if (!*a1)
      break;
    v31 = 0;
    v30 = 1;
    if (v41)
    {
LABEL_49:
      v35 = v39;
      v36 = v40;
      v39 = 0;
      v40 = 0;
      if (!(_DWORD)v30)
      {
        v43 = v31;
        v42 = 0uLL;
        *(_QWORD *)a2 = v35;
        *(_QWORD *)(a2 + 8) = v36;
        *(_QWORD *)(a2 + 16) = v31;
        *(_BYTE *)(a2 + 24) = 1;
        result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v18);
        goto LABEL_51;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    if (v30)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(_QWORD *)result + 16))(result, v31, v30);
      v18 = (void *)*a1;
      v37 = a1[1];
    }
    else
    {
      v37 = 0;
      v18 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_51:
  if (v41)
    return (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v18);
  return result;
}

void sub_196E30788(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a12)
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v13);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
LABEL_8:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_15;
    goto LABEL_9;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v9 = v5;
    v10 = 0;
    goto LABEL_8;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_9;
  v10 = v14;
  if (v14)
  {
    *(_OWORD *)a2 = v13;
    *(_BYTE *)(a2 + 16) = (_DWORD)v9 != 0;
    v11 = 1;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_15:
      if (v9)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10, v9);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (!result)
        break;
      if (!v5)
        break;
      result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
      if (!*a1)
        break;
      v9 = v14;
    }
    v11 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v11;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 3));
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, (uint64_t)(a2 + 28));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 34);
  LOBYTE(v5) = *((_BYTE *)a2 + 280);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::ResourceResponseData,void>::encode(a1, (uint64_t)(a2 + 36));
  v6 = *((_DWORD *)a2 + 144);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(a1, (uint64_t)(a2 + 71), v6);
  v7 = a2[73];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unsigned __int16 Headers;
  unsigned __int16 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  CFTypeRef v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v56;
  uint64_t v57;
  _DWORD v58[2];
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  CFTypeRef cf;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  char v72;
  _BYTE v73[280];
  char v74;
  WTF::StringImpl *v75;
  char v76;
  _BYTE v77[215];
  char v78;
  _DWORD v79[2];
  WTF::StringImpl *v80;
  __int128 v81;
  __int128 v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v27 = v4;
    v28 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v30 = a1[3];
  if (v30 && v27)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
    v10 = 0;
    v5 = *a1;
    v4 = a1[1];
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v10 = 0;
  }
  v9 = 1;
LABEL_8:
  v11 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v11 && v4 - v11 > 7)
  {
    v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v13 + 1);
    if (v5)
    {
      v14 = 0;
      v15 = *v13;
      goto LABEL_15;
    }
    v31 = v4;
    v32 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v32 = *a1;
        v31 = a1[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34 && v31)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
  v15 = 0;
  v14 = 1;
LABEL_15:
  Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v77);
  IPC::Decoder::decode<WebCore::FetchOptions>(a1, (uint64_t)v79);
  IPC::Decoder::decode<WTF::String>(a1, &v75);
  v17 = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  v18 = IPC::Decoder::decode<WebCore::ResourceResponseData>(v73, a1);
  v19 = a1[1];
  v20 = *a1;
  v21 = a1[2] - *a1;
  if (v19 <= v21)
  {
    v35 = 0;
    v36 = 0;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v20, v19);
        v36 = *a1;
        v35 = a1[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
    }
    goto LABEL_37;
  }
  v22 = (_BYTE *)(v20 + v21);
  a1[2] = (uint64_t)(v22 + 1);
  if (!v20)
  {
    v35 = v19;
    v36 = 0;
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38 && v35)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
    goto LABEL_18;
  }
  v23 = *v22;
  if (v23 < 3)
  {
    if (!*v22)
    {
      v70 = 0;
      v71 = 0;
      v72 = 1;
      goto LABEL_44;
    }
    if (v23 == 1)
    {
      v18 = IPC::ArgumentCoder<WebCore::FormData,void>::decode(&v62, a1);
      if (BYTE8(v62))
      {
        v70 = v62;
        v26 = 1;
        v71 = 1;
        goto LABEL_43;
      }
      v39 = *a1;
      v40 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v18 = (WTF::StringImpl *)a1[3];
      if (v18 && v40)
        v18 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v39);
      v26 = 0;
    }
    else
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v62);
      v26 = BYTE8(v62);
      if (BYTE8(v62))
      {
        v70 = v62;
        v71 = 2;
        v26 = 1;
        goto LABEL_43;
      }
    }
    LOBYTE(v70) = 0;
LABEL_43:
    v72 = v26;
    if (v26)
      goto LABEL_44;
    goto LABEL_19;
  }
LABEL_18:
  LOBYTE(v70) = 0;
  v72 = 0;
LABEL_19:
  v24 = *a1;
  v25 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v18 = (WTF::StringImpl *)a1[3];
  if (v18 && v25)
    v18 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v24);
LABEL_44:
  v41 = a1[1];
  v42 = *a1;
  v43 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v41 < v43 || v41 - v43 <= 7)
  {
    v56 = 0;
    v51 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = (WTF::StringImpl *)a1[3];
    if (v18)
      goto LABEL_106;
    goto LABEL_90;
  }
  v44 = (uint64_t *)(v42 + v43);
  a1[2] = (uint64_t)(v44 + 1);
  if (!v42)
  {
    v56 = v41;
    v51 = 0;
    goto LABEL_90;
  }
  v41 = 0;
  v42 = *v44;
  if (v9)
  {
LABEL_105:
    while (1)
    {
      __break(1u);
LABEL_106:
      if (v41)
      {
        (*(void (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v42, v41);
        v51 = (WTF::StringImpl *)*a1;
        v56 = a1[1];
      }
      else
      {
        v56 = 0;
        v51 = 0;
      }
LABEL_90:
      *a1 = 0;
      a1[1] = 0;
      v57 = a1[3];
      if (!v57)
        break;
      if (!v56)
        break;
      v18 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v57 + 16))(v57, v51);
      if (!*a1)
        break;
      v42 = 0;
      v41 = 1;
      if (!v9)
        goto LABEL_48;
    }
    *a2 = 0;
    a2[592] = 0;
  }
  else
  {
LABEL_48:
    if (v14)
      goto LABEL_105;
    if (Headers <= 0xFFu)
      goto LABEL_105;
    if (!v77[200])
      goto LABEL_105;
    if (!v83)
      goto LABEL_105;
    v58[0] = v79[0];
    *(_DWORD *)((char *)v58 + 3) = *(_DWORD *)((char *)v79 + 3);
    v45 = v80;
    v80 = 0;
    v59 = v45;
    v60 = v81;
    v61 = v82;
    if (!v76 || v17 <= 0xFFu || !v74 || !v72 || (_DWORD)v41)
      goto LABEL_105;
    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v62, v10, v15, Headers, (uint64_t)v77, (uint64_t)v58, (uint64_t *)&v75, v17, (uint64_t)v73, (uint64_t)&v70, v42);
    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)a2, &v62);
    a2[592] = 1;
    if (v69 != -1)
      ((void (*)(char *, uint64_t *))off_1E34AD770[v69])(&v78, &v68);
    v69 = -1;
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v67, v46);
    v48 = v66;
    v66 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = v65;
    v65 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v47);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = cf;
    cf = 0;
    if (v50)
      CFRelease(v50);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v63);
    v52 = v59;
    v59 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v51);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  if (v72 && v71 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E34AD770[v71])(&v62, &v70);
  if (v74)
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v73, v51);
  if (v76)
  {
    v53 = v75;
    v75 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v51);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  if (v83)
  {
    v54 = v80;
    v80 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v51);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v77);
}

void sub_196E3111C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, WTF::StringImpl *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  va_list va;

  va_start(va, a12);
  if (LOBYTE(STACK[0x2B0]))
  {
    v14 = LODWORD(STACK[0x2A8]);
    if ((_DWORD)v14 != -1)
      ((void (*)(char *, unint64_t *))off_1E34AD770[v14])(va, &STACK[0x2A0]);
  }
  if (LOBYTE(STACK[0x3D0]))
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&STACK[0x2B8], a2);
  if (LOBYTE(STACK[0x3E0]))
  {
    v15 = (WTF::StringImpl *)STACK[0x3D8];
    STACK[0x3D8] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (*(_BYTE *)(v12 - 112))
  {
    v16 = *(WTF::StringImpl **)(v12 - 152);
    *(_QWORD *)(v12 - 152) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, a2);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&STACK[0x3E8]);
  _Unwind_Resume(a1);
}

void sub_196E312C0()
{
  JUMPOUT(0x196E312B8);
}

uint64_t IPC::Decoder::decode<WebCore::FetchHeadersGuard>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 5)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::CharacterRange,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      goto LABEL_8;
    }
    v8 = v2;
    v15 = 0;
  }
  else
  {
    v8 = 0;
    v15 = 0;
    *result = 0;
    result[1] = 0;
    v12 = (_QWORD *)result[3];
    if (v12)
      goto LABEL_30;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (!v16)
    {
      v2 = 0;
      v3 = 0;
      v8 = 0;
LABEL_21:
      v7 = 1;
      goto LABEL_8;
    }
    v22 = result;
    v25 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v15, v8);
      v8 = 0;
      result = v22;
      a2 = v25;
      v3 = *v22;
      v2 = v22[1];
      goto LABEL_21;
    }
    v2 = 0;
    v3 = 0;
    v7 = 1;
LABEL_8:
    v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
      break;
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (v19)
    {
      v24 = result;
      v28 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        result = v24;
        a2 = v28;
        v18 = *v24;
        v17 = v24[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_23:
    *result = 0;
    result[1] = 0;
    v20 = result[3];
    if (!v20)
      goto LABEL_24;
    if (!v17)
      goto LABEL_24;
    v21 = result;
    v26 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(result[3], v18, v17);
    a2 = v26;
    if (!*v21)
      goto LABEL_24;
LABEL_29:
    __break(1u);
LABEL_30:
    v23 = result;
    v27 = a2;
    if (v2)
    {
      (*(void (**)(_QWORD *))(*v12 + 16))(v12);
      result = v23;
      a2 = v27;
      v15 = *v23;
      v8 = v23[1];
    }
    else
    {
      v8 = 0;
      v15 = 0;
    }
  }
  v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11 + 1;
  result[2] = v11 + 1;
  if (!v3)
  {
    v17 = v2;
    v18 = 0;
    goto LABEL_23;
  }
  if (v7)
    goto LABEL_29;
  v13 = *v11;
  if (!__CFADD__(v8, v13))
  {
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v13;
    v14 = 1;
    goto LABEL_17;
  }
LABEL_24:
  v14 = 0;
  *(_BYTE *)a2 = 0;
LABEL_17:
  *(_BYTE *)(a2 + 16) = v14;
  return result;
}

char *IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = a2[5];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v9;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v31;
  char *v32;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 8;
    if (v13 > 0xFFFFFFFFFFFFFFF7 || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 8;
    if (v18 > 0xFFFFFFFFFFFFFFF7 || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    v28 = v26 - v2;
    v29 = v27 + v3 + 8;
    if (v28 > 0xFFFFFFFFFFFFFFF7 || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      v2 = *result;
      v3 = v29;
    }
  }
  v31 = (_QWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v31 >= v2 + v3)
  {
    v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v32 + 8) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v31 = a2[5];
      result[2] = (uint64_t)(v32 + 8);
    }
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (uint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      goto LABEL_8;
    }
    v31 = v2;
    v32 = 0;
    goto LABEL_41;
  }
  while (1)
  {
    v31 = 0;
    v32 = 0;
    *result = 0;
    result[1] = 0;
    v33 = result[3];
    if (v33)
    {
      v121 = result;
      v133 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        result = v121;
        a2 = v133;
        v32 = *v121;
        v31 = v121[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
LABEL_41:
    *result = 0;
    result[1] = 0;
    v34 = result[3];
    if (!v34)
    {
      v2 = 0;
      v3 = 0;
      v8 = 0;
LABEL_43:
      v7 = 1;
      goto LABEL_8;
    }
    v116 = result;
    v127 = a2;
    if (v31)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
      v8 = 0;
      result = v116;
      a2 = v127;
      v3 = *v116;
      v2 = v116[1];
      goto LABEL_43;
    }
    v2 = 0;
    v3 = 0;
    v8 = 0;
    v7 = 1;
LABEL_8:
    v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
    {
      v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v11 + 1;
      if (v3)
      {
        v12 = 0;
        v13 = *v11;
        goto LABEL_15;
      }
      v35 = v2;
      v36 = 0;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      *result = 0;
      result[1] = 0;
      v37 = result[3];
      if (v37)
      {
        v111 = v7;
        v101 = v8;
        v122 = result;
        v134 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
          result = v122;
          a2 = v134;
          v36 = *v122;
          v35 = v122[1];
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v8 = v101;
        v7 = v111;
      }
    }
    *result = 0;
    result[1] = 0;
    v38 = result[3];
    if (v38)
    {
      v106 = v7;
      v96 = v8;
      v117 = result;
      v128 = a2;
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
        v13 = 0;
        result = v117;
        a2 = v128;
        v3 = *v117;
        v2 = v117[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v13 = 0;
      }
      v12 = 1;
      v8 = v96;
      v7 = v106;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v13 = 0;
      v12 = 1;
    }
LABEL_15:
    v14 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v14 || v2 - v14 <= 7)
    {
      v39 = 0;
      v40 = 0;
      *result = 0;
      result[1] = 0;
      v41 = result[3];
      if (v41)
      {
        v92 = v12;
        v84 = v13;
        v112 = v7;
        v102 = v8;
        v123 = result;
        v135 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
          result = v123;
          a2 = v135;
          v40 = *v123;
          v39 = v123[1];
        }
        else
        {
          v39 = 0;
          v40 = 0;
        }
        v8 = v102;
        v7 = v112;
        v13 = v84;
        v12 = v92;
      }
    }
    else
    {
      v15 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v15 + 1;
      if (v3)
      {
        v16 = 0;
        v17 = *v15;
        goto LABEL_19;
      }
      v39 = v2;
      v40 = 0;
    }
    *result = 0;
    result[1] = 0;
    v42 = result[3];
    if (v42)
    {
      v88 = v12;
      v80 = v13;
      v107 = v7;
      v97 = v8;
      v118 = result;
      v129 = a2;
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v39);
        v17 = 0;
        result = v118;
        a2 = v129;
        v3 = *v118;
        v2 = v118[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v17 = 0;
      }
      v16 = 1;
      v8 = v97;
      v7 = v107;
      v13 = v80;
      v12 = v88;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v17 = 0;
      v16 = 1;
    }
LABEL_19:
    v18 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v18 || v2 - v18 <= 7)
    {
      v43 = 0;
      v44 = 0;
      *result = 0;
      result[1] = 0;
      v45 = result[3];
      if (v45)
      {
        v77 = v16;
        v71 = v17;
        v93 = v12;
        v85 = v13;
        v113 = v7;
        v103 = v8;
        v124 = result;
        v136 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          result = v124;
          a2 = v136;
          v44 = *v124;
          v43 = v124[1];
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
        v8 = v103;
        v7 = v113;
        v13 = v85;
        v12 = v93;
        v17 = v71;
        v16 = v77;
      }
    }
    else
    {
      v19 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v19 + 1;
      if (v3)
      {
        v20 = 0;
        v21 = *v19;
        goto LABEL_23;
      }
      v43 = v2;
      v44 = 0;
    }
    *result = 0;
    result[1] = 0;
    v46 = result[3];
    if (v46)
    {
      v74 = v16;
      v68 = v17;
      v89 = v12;
      v81 = v13;
      v108 = v7;
      v98 = v8;
      v119 = result;
      v130 = a2;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
        v21 = 0;
        result = v119;
        a2 = v130;
        v3 = *v119;
        v2 = v119[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v21 = 0;
      }
      v20 = 1;
      v8 = v98;
      v7 = v108;
      v13 = v81;
      v12 = v89;
      v17 = v68;
      v16 = v74;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v21 = 0;
      v20 = 1;
    }
LABEL_23:
    v22 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v22 || v2 - v22 <= 7)
    {
      v47 = 0;
      v48 = 0;
      *result = 0;
      result[1] = 0;
      v49 = result[3];
      if (v49)
      {
        v66 = v20;
        v62 = v21;
        v78 = v16;
        v72 = v17;
        v94 = v12;
        v86 = v13;
        v114 = v7;
        v104 = v8;
        v125 = result;
        v137 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
          result = v125;
          a2 = v137;
          v48 = *v125;
          v47 = v125[1];
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
        v8 = v104;
        v7 = v114;
        v13 = v86;
        v12 = v94;
        v17 = v72;
        v16 = v78;
        v21 = v62;
        v20 = v66;
      }
    }
    else
    {
      v23 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v23 + 1;
      if (v3)
      {
        v24 = 0;
        v25 = *v23;
        goto LABEL_27;
      }
      v47 = v2;
      v48 = 0;
    }
    *result = 0;
    result[1] = 0;
    v25 = 0;
    v50 = result[3];
    if (v50)
    {
      v64 = v20;
      v60 = v21;
      v75 = v16;
      v69 = v17;
      v90 = v12;
      v82 = v13;
      v109 = v7;
      v99 = v8;
      v120 = result;
      v131 = a2;
      if (v47)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v50 + 16))(v50, v48, v47, 0.0);
        result = v120;
        a2 = v131;
        v3 = *v120;
        v2 = v120[1];
        v24 = 1;
        v8 = v99;
        v7 = v109;
        v13 = v82;
        v12 = v90;
        v17 = v69;
        v16 = v75;
        v21 = v60;
        v20 = v64;
        v25 = 0;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v24 = 1;
      }
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v24 = 1;
    }
LABEL_27:
    v26 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v26 || v2 - v26 <= 7)
      break;
    v27 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v27 + 1;
    if (!v3)
    {
      v51 = v2;
      v52 = 0;
      goto LABEL_57;
    }
    v28 = 0;
    v29 = *v27;
LABEL_31:
    if (!v7 && !v12 && !v16 && !v20 && !v24 && !v28)
    {
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v17;
      *(_QWORD *)(a2 + 24) = v21;
      v30 = 1;
      *(_QWORD *)(a2 + 32) = v25;
      *(_QWORD *)(a2 + 40) = v29;
      goto LABEL_38;
    }
    __break(1u);
  }
  v51 = 0;
  v52 = 0;
  *result = 0;
  result[1] = 0;
  v53 = result[3];
  if (v53)
  {
    v59 = v24;
    v57 = v25;
    v67 = v20;
    v63 = v21;
    v79 = v16;
    v73 = v17;
    v95 = v12;
    v87 = v13;
    v115 = v7;
    v105 = v8;
    v126 = result;
    v138 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
      result = v126;
      a2 = v138;
      v52 = *v126;
      v51 = v126[1];
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    v8 = v105;
    v7 = v115;
    v13 = v87;
    v12 = v95;
    v17 = v73;
    v16 = v79;
    v21 = v63;
    v20 = v67;
    v25 = v57;
    v24 = v59;
  }
LABEL_57:
  *result = 0;
  result[1] = 0;
  v54 = result[3];
  if (v54)
  {
    if (v51)
    {
      v55 = result;
      v132 = a2;
      v100 = v8;
      v110 = v7;
      v83 = v13;
      v91 = v12;
      v70 = v17;
      v76 = v16;
      v61 = v21;
      v65 = v20;
      v56 = v25;
      v58 = v24;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v54 + 16))(result[3], v52, v51);
      v24 = v58;
      v25 = v56;
      v20 = v65;
      v21 = v61;
      v16 = v76;
      v17 = v70;
      v12 = v91;
      v13 = v83;
      v7 = v110;
      v8 = v100;
      a2 = v132;
      if (*v55)
      {
        v28 = 1;
        v29 = 0;
        goto LABEL_31;
      }
    }
  }
  v30 = 0;
  *(_BYTE *)a2 = 0;
LABEL_38:
  *(_BYTE *)(a2 + 48) = v30;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v16;
  unint64_t v17;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 >= v2 + v3)
  {
    v17 = (unint64_t)v16 - v2 + 4;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFFBLL || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v16 = a2[2];
      result[2] = v17;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::IDBCursorRecord,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  int v6;

  v4 = (unsigned int *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, v4, v5);
  v6 = *(_DWORD *)(a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, (unsigned int *)(a2 + 40), v6);
  IPC::ArgumentCoder<WebCore::IDBValue,void>::encode(a1, (uint64_t *)(a2 + 64));
}

uint64_t IPC::Decoder::decode<WebCore::IDBKeyData>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IDBKeyData,void>::decode(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E32218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 32))
  {
    v15 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::IDBValue>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IDBValue,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E322AC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;

  v2 = a2;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[2];
  v7 = v2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = v2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(a1, (uint64_t)(v2 + 6));
  LOBYTE(v9) = *((_BYTE *)v2 + 120);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 121);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v2) = *((_BYTE *)v2 + 122);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _OWORD v39[3];
  char v40;
  _BYTE v41[16];
  int v42;
  char v43;
  _BYTE v44[16];
  int v45;
  __int16 v46;
  __int16 v47;
  char v48;
  _BYTE v49[80];
  _BYTE v50[24];
  _BYTE v51[31];
  char v52;

  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)v51);
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)v50);
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    a1[2] = v5 + v6 + 8;
    if (!v5)
    {
      v22 = v4;
      v23 = 0;
      goto LABEL_37;
    }
    v8 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25 && v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    v8 = 1;
LABEL_8:
    v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 >= v9 && v4 - v9 > 7)
    {
      a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v5)
      {
        v11 = 0;
        goto LABEL_15;
      }
      v26 = v4;
      v27 = 0;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
          v27 = *a1;
          v26 = a1[1];
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v26)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
    v11 = 1;
LABEL_15:
    IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a1, (uint64_t)v49);
    LOWORD(v39[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v39);
    v12 = BYTE1(v39[0]);
    v13 = a1[1];
    if (!BYTE1(v39[0]))
    {
      v30 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v31 = a1[3];
      if (!v31 || !v13)
      {
        v13 = 0;
        v14 = *a1;
LABEL_45:
        *a1 = 0;
        a1[1] = 0;
        v32 = a1[3];
        if (v32)
        {
          if (v13)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v14);
            v33 = *a1;
            v13 = a1[1];
          }
          else
          {
            v33 = 0;
          }
        }
        else
        {
          v33 = 0;
          v13 = 0;
        }
LABEL_47:
        *a1 = 0;
        a1[1] = 0;
        v34 = a1[3];
        if (v34)
        {
          if (v13)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
            v14 = *a1;
            v13 = a1[1];
          }
          else
          {
            v14 = 0;
          }
        }
        else
        {
          v14 = 0;
          v13 = 0;
        }
        goto LABEL_49;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v30);
      v13 = a1[1];
    }
    v14 = *a1;
    v15 = a1[2] - *a1;
    if (v13 <= v15)
      goto LABEL_45;
    v16 = (unsigned __int8 *)(v14 + v15);
    a1[2] = (uint64_t)(v16 + 1);
    if (!v14)
    {
      v33 = 0;
      goto LABEL_47;
    }
    v17 = *v16;
    if (v17 < 4)
    {
      v18 = v17 | 0x100;
      goto LABEL_20;
    }
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35 && v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v14);
    v18 = 0;
LABEL_20:
    LOWORD(v39[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v39);
    v19 = BYTE1(v39[0]);
    if (!BYTE1(v39[0]))
    {
      v36 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37)
      {
        v38 = v19;
        if (v4)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v36);
        v19 = v38;
      }
    }
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 128) = 0;
      return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v49);
    }
    if (v51[16] && v50[16] && !v8 && !v11 && v49[72] && v12 && v18 > 0xFF && v19)
      break;
    __break(1u);
  }
  WebCore::IDBCursorInfo::IDBCursorInfo();
  v20 = v39[1];
  *(_OWORD *)a2 = v39[0];
  *(_OWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 32) = v39[2];
  *(_BYTE *)(a2 + 48) = v40;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 56, (uint64_t)v41);
  *(_BYTE *)(a2 + 80) = v43;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 88, (uint64_t)v44);
  *(_WORD *)(a2 + 112) = v46;
  *(_WORD *)(a2 + 120) = v47;
  *(_BYTE *)(a2 + 122) = v48;
  *(_BYTE *)(a2 + 128) = 1;
  if (v45 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v45])(&v52, v44);
  v45 = -1;
  if (v42 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v42])(&v52, v41);
  return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v49);
}

void sub_196E32854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::IDBResourceIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IDBResourceIdentifier,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::IDBKeyRangeData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E329A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBError,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  __int16 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = IPC::Decoder::decode<std::optional<WebCore::ExceptionCode>>(a1);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v9);
  if (!*a1)
    goto LABEL_12;
  if ((v4 & 0xFF0000) == 0 || !v10)
  {
    __break(1u);
LABEL_12:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_5;
  }
  result = (WTF::StringImpl *)WebCore::IDBError::IDBError();
  *(_WORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = 1;
LABEL_5:
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E32A7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::ExceptionCode>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ExceptionCode>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(a1, a2);
  v4 = *(_BYTE *)(a2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 76));
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  _BYTE v47[16];
  int v48;
  char v49;
  _BYTE v50[16];
  int v51;
  __int16 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[8];
  _BYTE v56[32];
  _WORD v57[16];
  char v58;
  _BYTE v59[9];

  v2 = a1;
  IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a1, (uint64_t)v55);
  v4 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v2);
  v5 = IPC::Decoder::decode<std::optional<unsigned int>>(v2);
  v7 = v6;
  v8 = v2[1];
  v9 = *v2;
  v10 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
  if (v8 >= v10 && v8 - v10 > 7)
  {
    v12 = (uint64_t *)(v9 + v10);
    v2[2] = (uint64_t)(v12 + 1);
    if (!v9)
    {
      v24 = v8;
      v25 = 0;
      goto LABEL_27;
    }
    v13 = 0;
    v14 = *v12;
    goto LABEL_8;
  }
  while (1)
  {
    v24 = 0;
    v25 = 0;
    *v2 = 0;
    v2[1] = 0;
    v26 = v2[3];
    if (v26)
    {
      v39 = v4;
      v40 = v5;
      v41 = v7;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *v2;
        v24 = v2[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v7 = v41;
      v5 = v40;
      v4 = v39;
    }
LABEL_27:
    *v2 = 0;
    v2[1] = 0;
    v27 = v2[3];
    if (v27)
    {
      v32 = v4;
      v33 = v5;
      v34 = v7;
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
        v14 = 0;
        v9 = *v2;
        v8 = v2[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v14 = 0;
      }
      v13 = 1;
      v7 = v34;
      v5 = v33;
      v4 = v32;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v14 = 0;
      v13 = 1;
    }
LABEL_8:
    v15 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v9;
    if (v8 >= v15 && v8 - v15 > 7)
    {
      v17 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v17 + 1);
      if (v9)
      {
        v18 = 0;
        v19 = *v17;
        goto LABEL_15;
      }
      v28 = v8;
      v29 = 0;
    }
    else
    {
      v28 = 0;
      v29 = 0;
      *v2 = 0;
      v2[1] = 0;
      v30 = v2[3];
      if (v30)
      {
        v42 = v4;
        v43 = v5;
        v44 = v13;
        v45 = v7;
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          v29 = *v2;
          v28 = v2[1];
        }
        else
        {
          v28 = 0;
          v29 = 0;
        }
        v7 = v45;
        v13 = v44;
        v5 = v43;
        v4 = v42;
      }
    }
    *v2 = 0;
    v2[1] = 0;
    v31 = v2[3];
    if (!v31
      || !v28
      || (v35 = v4,
          v36 = v5,
          v37 = v13,
          v38 = v7,
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28),
          !*v2))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 104) = 0;
      return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55);
    }
    v7 = v38;
    v13 = v37;
    v5 = v36;
    v4 = v35;
    v19 = 0;
    v18 = 1;
LABEL_15:
    if (v58)
    {
      v2 = (uint64_t *)v5;
      v20 = v13;
      v21 = v7;
      v46 = v55[0];
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v47, (uint64_t)v56);
      v49 = v56[24];
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v50, (uint64_t)v57);
      v52 = v57[12];
      if ((unsigned __int16)v4 > 0xFFu)
      {
        LOBYTE(v53) = v4;
        if (v21)
        {
          DWORD1(v53) = (_DWORD)v2;
          BYTE8(v53) = BYTE4(v2);
          if (!v20)
          {
            *(_QWORD *)&v54 = v14;
            if (!v18)
              break;
          }
        }
      }
    }
    __break(1u);
  }
  *((_QWORD *)&v54 + 1) = v19;
  *(_BYTE *)a2 = v46;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v47);
  *(_BYTE *)(a2 + 32) = v49;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v50);
  *(_WORD *)(a2 + 64) = v52;
  v22 = v54;
  *(_OWORD *)(a2 + 72) = v53;
  *(_OWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 104) = 1;
  if (v51 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v51])(v59, v50);
  v51 = -1;
  if (v48 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v48])(v59, v47);
  return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55);
}

void sub_196E32F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::IDBGetResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  int v6;
  char *result;

  v2 = a2;
  v4 = (unsigned int *)(a2 + 48);
  v5 = *(_DWORD *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, v4, v5);
  v6 = *(_DWORD *)(v2 + 96);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, (unsigned int *)(v2 + 80), v6);
  IPC::ArgumentCoder<WebCore::IDBValue,void>::encode(a1, (uint64_t *)v2);
  IPC::ArgumentCoder<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&>(a1, v2 + 104);
  IPC::VectorArgumentCoder<false,WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v2 + 136);
  LOBYTE(v2) = *(_BYTE *)(v2 + 152);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  int v18;
  char v19;
  char v20;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_12:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_13;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v6)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_14;
  }
  if (!v9)
  {
    v17[0] = 0;
    v19 = 0;
    result = (uint64_t)std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v17);
    goto LABEL_8;
  }
  result = IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v17, a2);
  if (!v19)
  {
LABEL_14:
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_15;
  }
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v17);
  a1[24] = 1;
LABEL_8:
  a1[32] = 1;
  if (v19 && v18 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34AD860[v18])(&v20, v17);
LABEL_15:
  if (!a1[32])
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v16)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
    }
  }
  return result;
}

void sub_196E33264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  if (*(_BYTE *)(v14 + 32) && *(_BYTE *)(v14 + 24))
  {
    v16 = *(unsigned int *)(v14 + 16);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, uint64_t))off_1E34AD860[v16])(&a10, v14);
    *(_DWORD *)(v14 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::IDBGetAllResult,void>::encode(IPC::Encoder *a1, WebCore::IDBGetAllResult *a2)
{
  uint64_t v4;
  char v5;
  unsigned int *v6;
  uint64_t v7;

  v4 = (uint64_t)a2 + 40;
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = (unsigned int *)WebCore::IDBGetAllResult::keys(a2);
  IPC::VectorArgumentCoder<false,WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v6);
  v7 = WebCore::IDBGetAllResult::values(a2);
  IPC::VectorArgumentCoder<false,WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v7);
  IPC::ArgumentCoder<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&>(a1, v4);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  _BYTE *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t result;
  _BYTE *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  int v23;
  char v24;
  WTF *v25;
  uint64_t v26;
  char v27;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_36:
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
    return result;
  }
  v6 = v4;
  v25 = 0;
  v26 = 0;
  if (v4 >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::IDBKeyData>(&v21, a2);
      if (!v24)
        goto LABEL_35;
      if (HIDWORD(v26) == (_DWORD)v26)
      {
        result = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBKeyData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        v12 = (char *)v25 + 32 * HIDWORD(v26);
        *v12 = v21;
        result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v12 + 8), (uint64_t)v22);
        ++HIDWORD(v26);
      }
      if (v24 && v23 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v27, v22);
      --v6;
    }
    while (v6);
    v13 = HIDWORD(v26);
    v14 = v25;
    if (v26 > HIDWORD(v26))
    {
      v15 = v25;
      if (HIDWORD(v26))
      {
        if (HIDWORD(v26) >> 27)
        {
          __break(0xC471u);
          return result;
        }
        v16 = (WTF *)WTF::fastMalloc((WTF *)(32 * HIDWORD(v26)));
        LODWORD(v26) = v13;
        v25 = v16;
        v15 = v14;
        if (v16 != v14)
        {
          WTF::VectorMover<false,WebCore::IDBKeyData>::move((uint64_t)v14, (uint64_t)v14 + 32 * v13, (uint64_t)v16);
          v15 = v25;
        }
      }
      if (v14)
      {
        if (v15 == v14)
        {
          v25 = 0;
          LODWORD(v26) = 0;
        }
        WTF::fastFree(v14, v5);
        v14 = v25;
      }
      else
      {
        v14 = v15;
      }
    }
    *(_QWORD *)a1 = v14;
    v20 = v26;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)(a1 + 8) = v20;
    goto LABEL_17;
  }
  if (v4)
  {
    LODWORD(v26) = v4;
    v25 = (WTF *)WTF::fastMalloc((WTF *)(32 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::IDBKeyData>(&v21, a2);
      if (!v24)
        break;
      if (HIDWORD(v26) == (_DWORD)v26)
      {
        WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBKeyData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        v8 = (char *)v25 + 32 * HIDWORD(v26);
        *v8 = v21;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v8 + 8), (uint64_t)v22);
        ++HIDWORD(v26);
      }
      if (v24)
      {
        if (v23 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v27, v22);
      }
      if (!--v6)
      {
        v9 = v25;
        v10 = v26;
        goto LABEL_16;
      }
    }
LABEL_35:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v7);
    goto LABEL_36;
  }
  v9 = 0;
  v10 = 0;
LABEL_16:
  v25 = 0;
  v26 = 0;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
LABEL_17:
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
}

void sub_196E335EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, char a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  if (a8)
  {
    if (a6 != -1)
      (*(void (**)(uint64_t, uint64_t))(v9 + 8 * a6))(v10 - 49, v8);
  }
  WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_DWORD *IPC::ArgumentCoder<WebCore::IDBDatabaseInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  return IPC::ArgumentCoder<WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits> const&>(a1, a2 + 4);
}

char *IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  int v6;
  char *result;

  v2 = a2;
  v4 = (unsigned int *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, v4, v5);
  v6 = *(_DWORD *)(v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, (unsigned int *)(v2 + 40), v6);
  LOBYTE(v4) = *(_BYTE *)(v2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 65);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  _BYTE v28[16];
  int v29;
  char v30;
  _BYTE v31[16];
  int v32;
  __int16 v33;
  _BYTE v34[8];
  _BYTE v35[16];
  int v36;
  char v37;
  _BYTE v38[8];
  _BYTE v39[16];
  int v40;
  char v41;
  char v42;

  IPC::Decoder::decode<WebCore::IDBKeyData>(a1, v38);
  IPC::Decoder::decode<WebCore::IDBKeyData>(a1, v34);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_28;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v19 = v4;
    v20 = 0;
    goto LABEL_29;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (!v23 || !v4)
    {
      v12 = 0;
      v24 = 0;
      v5 = 0;
      v10 = 1;
LABEL_33:
      *a1 = 0;
      a1[1] = 0;
      v25 = a1[3];
      if (v25 && v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v5, v24);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v5);
    v11 = 0;
    v5 = *a1;
    v4 = a1[1];
    v10 = 1;
    v8 = a1[2];
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - v5;
    if (v4 <= v13)
    {
      v24 = 0;
      v26 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v26 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v5 = *a1;
        v24 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_33;
    }
    v14 = (unsigned __int8 *)(v5 + v13);
    a1[2] = (uint64_t)(v14 + 1);
    if (!v5)
    {
      v24 = v4;
      goto LABEL_33;
    }
    v15 = *v14;
    if (v15 <= 1)
    {
      v16 = 0;
      v17 = v15 != 0;
      goto LABEL_12;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result
      || !v4
      || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5), !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
      goto LABEL_20;
    }
    v17 = 0;
    v16 = 1;
LABEL_12:
    if (v41 && v37 && !v10 && !v16)
      break;
    __break(1u);
LABEL_28:
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a1;
        v19 = a1[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22 && v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
      v9 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
  }
  v27[0] = v38[0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v28, (uint64_t)v39);
  v30 = v34[0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v31, (uint64_t)v35);
  LOBYTE(v33) = v12;
  HIBYTE(v33) = v17;
  *(_BYTE *)a2 = v27[0];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v28);
  *(_BYTE *)(a2 + 32) = v30;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v31);
  *(_WORD *)(a2 + 64) = v33;
  *(_BYTE *)(a2 + 72) = 1;
  if (v32 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v32])(&v42, v31);
  v32 = -1;
  if (v29 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v29])(&v42, v28);
LABEL_20:
  if (v37 && v36 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v36])(v27, v35);
  if (v41)
  {
    if (v40 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v40])(v27, v39);
  }
  return result;
}

void sub_196E33AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  uint64_t v23;
  uint64_t v25;

  if (a23 && a21 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a21])(&a9, &a19);
  if (*(_BYTE *)(v23 - 64))
  {
    v25 = *(unsigned int *)(v23 - 72);
    if ((_DWORD)v25 != -1)
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v25])(&a9, v23 - 88);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::IDBTransactionInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 17);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 4));
  return IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBDatabaseInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBDatabaseInfo> const&>(a1, (uint64_t **)a2 + 6);
}

void IPC::ArgumentCoder<WebCore::IDBTransactionInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  bmalloc::api *v17;
  bmalloc::api *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[3];
  bmalloc::api *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  char v42;

  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v41);
  v4 = a1[1];
  v5 = (char *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_27;
  v7 = &v5[v6];
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v21 = v4;
    v22 = 0;
    goto LABEL_28;
  }
  v8 = *v7;
  if (v8 >= 3)
    goto LABEL_29;
  v9 = v8 | 0x100;
LABEL_5:
  if (v4 > a1[2] - (uint64_t)v5)
  {
    v10 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v10 + 1);
    if (v5)
    {
      v11 = *v10;
      if (v11 < 3)
      {
        v12 = v11 | 0x100;
        goto LABEL_9;
      }
      goto LABEL_35;
    }
    v27 = 0;
    goto LABEL_33;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 16))(v26, v5);
        v27 = *a1;
        v4 = a1[1];
      }
      else
      {
        v27 = 0;
      }
    }
    else
    {
      v27 = 0;
      v4 = 0;
    }
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v27);
        v5 = (char *)*a1;
        v4 = a1[1];
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v29 + 16))(v29, v5);
        v12 = 0;
        v5 = (char *)*a1;
        v4 = a1[1];
        goto LABEL_9;
      }
    }
    else
    {
      v4 = 0;
    }
    v5 = 0;
    v12 = 0;
LABEL_9:
    v13 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
    if (v4 < v13 || v4 - v13 <= 7)
    {
      v30 = 0;
      v31 = 0;
      *a1 = 0;
      a1[1] = 0;
      v32 = a1[3];
      if (v32)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
          v31 = *a1;
          v30 = a1[1];
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
      }
    }
    else
    {
      v14 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v14 + 1);
      if (v5)
      {
        v15 = 0;
        v16 = *v14;
        goto LABEL_13;
      }
      v30 = v4;
      v31 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33 && v30)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
    v16 = 0;
    v15 = 1;
LABEL_13:
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v38);
    IPC::Decoder::decode<std::unique_ptr<WebCore::IDBDatabaseInfo>>(&v36, a1);
    if (!*a1)
      break;
    if (v42 && v9 > 0xFF && v12 > 0xFF && !v15 && v40 && v37)
    {
      v18 = v36;
      v35[2] = 0;
      v36 = 0;
      LOBYTE(v34) = v9;
      BYTE1(v34) = v12;
      *((_QWORD *)&v34 + 1) = v16;
      v35[0] = 0;
      v19 = v38;
      v38 = 0;
      *(_OWORD *)a2 = v41;
      *(_OWORD *)(a2 + 16) = v34;
      *(_QWORD *)(a2 + 32) = v19;
      v35[1] = 0;
      v20 = v39;
      v39 = 0;
      *(_QWORD *)(a2 + 40) = v20;
      *(_QWORD *)(a2 + 48) = v18;
      *(_BYTE *)(a2 + 56) = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v17);
      goto LABEL_21;
    }
    __break(1u);
LABEL_27:
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
LABEL_28:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v21);
        v5 = (char *)*a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 16))(v25, v5);
        v9 = 0;
        v5 = (char *)*a1;
        v4 = a1[1];
        goto LABEL_5;
      }
      v5 = 0;
      v9 = 0;
    }
    else
    {
      v5 = 0;
      v9 = 0;
      v4 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (!v37)
    goto LABEL_23;
LABEL_21:
  v17 = v36;
  v36 = 0;
  if (v17)
    std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v36, v17);
LABEL_23:
  if (v40)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v17);
}

void sub_196E34048(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a20)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *IPC::Decoder::decode<std::unique_ptr<WebCore::IDBDatabaseInfo>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  char v96;
  WTF::StringImpl *v97;
  char v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108[9];

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v68 = 0;
    v69 = 0;
    *a2 = 0;
    a2[1] = 0;
    v70 = a2[3];
    if (v70)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
        v69 = *a2;
        v68 = a2[1];
      }
      else
      {
        v68 = 0;
        v69 = 0;
      }
    }
    goto LABEL_113;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v68 = v6;
    v69 = 0;
LABEL_113:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v71 = a2[3];
    if (v71)
    {
      if (v68)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v69, v68);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_114;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_114:
    *a2 = 0;
    a2[1] = 0;
    v72 = a2[3];
    if (v72 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v5);
    *v3 = 0;
    v3[8] = 0;
    goto LABEL_95;
  }
  if (!v9)
  {
    *(_QWORD *)result = 0;
    result[8] = 1;
    return result;
  }
  v10 = (uint64_t)IPC::Decoder::decode<WTF::String>(a2, &v97);
  v11 = a2[1];
  v12 = (WTF::StringImpl *)*a2;
  v13 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v11 >= v13 && v11 - v13 > 7)
  {
    a2[2] = (uint64_t)v12 + v13 + 8;
    if (v12)
    {
      v89 = 0;
      goto LABEL_12;
    }
    v73 = v11;
    v74 = 0;
  }
  else
  {
    v73 = 0;
    v74 = 0;
    *a2 = 0;
    a2[1] = 0;
    v75 = a2[3];
    if (v75)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
        v74 = *a2;
        v73 = a2[1];
      }
      else
      {
        v73 = 0;
        v74 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = a2[3];
  if (v10 && v73)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v74, v73);
    v12 = (WTF::StringImpl *)*a2;
    v11 = a2[1];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v89 = 1;
LABEL_12:
  v15 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v12;
  if (v11 < v15 || v11 - v15 <= 7)
  {
    v76 = 0;
    v77 = 0;
    *a2 = 0;
    a2[1] = 0;
    v78 = a2[3];
    if (v78)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
        v77 = *a2;
        v76 = a2[1];
      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
    }
  }
  else
  {
    a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v12)
    {
      v16 = 0;
      goto LABEL_16;
    }
    v76 = v11;
    v77 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = a2[3];
  if (v10 && v76)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v77, v76);
    v12 = (WTF::StringImpl *)*a2;
    v11 = a2[1];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v16 = 1;
LABEL_16:
  v17 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v12;
  if (v11 < v17 || v11 - v17 <= 7)
  {
    v79 = 0;
    v80 = 0;
    *a2 = 0;
    a2[1] = 0;
    v81 = a2[3];
    if (v81)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
        v80 = *a2;
        v79 = a2[1];
      }
      else
      {
        v79 = 0;
        v80 = 0;
      }
    }
  }
  else
  {
    a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v12)
    {
      v18 = 0;
      goto LABEL_20;
    }
    v79 = v11;
    v80 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = a2[3];
  if (v10 && v79)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v80, v79);
    v12 = (WTF::StringImpl *)*a2;
    v11 = a2[1];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v18 = 1;
LABEL_20:
  v19 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v12;
  if (v11 < v19 || v11 - v19 <= 3)
  {
    v82 = 0;
    v83 = 0;
    *a2 = 0;
    a2[1] = 0;
    v84 = a2[3];
    if (v84)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
        v83 = *a2;
        v82 = a2[1];
      }
      else
      {
        v82 = 0;
        v83 = 0;
      }
    }
    goto LABEL_129;
  }
  v20 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a2[2] = (uint64_t)(v20 + 1);
  if (!v12)
  {
    v82 = v11;
    v83 = 0;
LABEL_129:
    *a2 = 0;
    a2[1] = 0;
    v85 = a2[3];
    if (v85 && v82)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v83, v82);
    LOBYTE(v95) = 0;
    v96 = 0;
    goto LABEL_74;
  }
  v21 = *v20;
  v107 = 0;
  if (!v21)
  {
    v65 = 0;
    goto LABEL_77;
  }
  v88 = v18;
  v22 = 0;
  while (1)
  {
    v23 = a2[1];
    v24 = (WTF::StringImpl *)*a2;
    v25 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v23 < v25 || v23 - v25 <= 7)
      break;
    v27 = (uint64_t *)((char *)v24 + v25);
    a2[2] = (uint64_t)(v27 + 1);
    if (!v24)
      goto LABEL_133;
    v28 = *v27;
    IPC::Decoder::decode<WebCore::IDBObjectStoreInfo>(a2, (uint64_t)&v99);
    if (!v106 || (unint64_t)(v28 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
LABEL_71:
      LOBYTE(v95) = 0;
      v96 = 0;
      std::__optional_destruct_base<WebCore::IDBObjectStoreInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v99, v29);
      goto LABEL_72;
    }
    v30 = v107;
    if (v107
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(&v107, 0), (v30 = v107) != 0))
    {
      v31 = *(_DWORD *)(v30 - 8);
    }
    else
    {
      v31 = 0;
    }
    v32 = (v28 + ~(v28 << 32)) ^ ((unint64_t)(v28 + ~(v28 << 32)) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = (_QWORD *)(v30 + 72 * v35);
    v37 = *v36;
    if (*v36)
    {
      v38 = 0;
      v39 = 1;
      do
      {
        if (v37 == v28)
          goto LABEL_71;
        if (v37 == -1)
          v38 = v36;
        v35 = (v35 + v39) & v31;
        v36 = (_QWORD *)(v30 + 72 * v35);
        v37 = *v36;
        ++v39;
      }
      while (*v36);
      if (v38)
      {
        *v38 = 0;
        WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(v38 + 1));
        --*(_DWORD *)(v107 - 16);
        v36 = v38;
      }
    }
    *v36 = v28;
    v36[1] = v99;
    v40 = v100;
    *(_QWORD *)&v100 = 0;
    v41 = (WTF::StringImpl *)v36[2];
    v36[2] = v40;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v29);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = (WTF::StringImpl *)(v36 + 3);
    if (*((unsigned __int8 *)v36 + 48) == v103)
    {
      if (*((_BYTE *)v36 + 48))
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v36 + 3), (uint64_t)&v100 + 8);
    }
    else
    {
      if (*((_BYTE *)v36 + 48))
      {
        v43 = *((unsigned int *)v36 + 10);
        if ((_DWORD)v43 != -1)
          ((void (*)(char *, WTF::StringImpl *))off_1E34AD860[v43])(v108, v42);
        v44 = 0;
        *((_DWORD *)v36 + 10) = -1;
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v36 + 3), (uint64_t)&v100 + 8);
        v44 = 1;
      }
      *((_BYTE *)v36 + 48) = v44;
    }
    *((_BYTE *)v36 + 56) = v104;
    v45 = v105;
    v105 = 0;
    v46 = v36[8];
    v36[8] = v45;
    if (v46)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v46, v42);
    v47 = v107;
    if (v107)
      v48 = *(_DWORD *)(v107 - 12) + 1;
    else
      v48 = 1;
    *(_DWORD *)(v107 - 12) = v48;
    v49 = (*(_DWORD *)(v47 - 16) + v48);
    v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 > 2 * v49)
        goto LABEL_66;
LABEL_65:
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(&v107, v36);
      goto LABEL_66;
    }
    if (3 * v50 <= 4 * v49)
      goto LABEL_65;
LABEL_66:
    v10 = std::__optional_destruct_base<WebCore::IDBObjectStoreInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v99, v42);
    if (++v22 == v21)
    {
      v65 = v107;
      v18 = v88;
LABEL_77:
      v52 = 0;
      v95 = v65;
      v51 = 1;
      v96 = 1;
      goto LABEL_78;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v66 = a2[3];
  if (v66)
    v67 = v23 == 0;
  else
    v67 = 1;
  if (!v67)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
    v24 = (WTF::StringImpl *)*a2;
    v23 = a2[1];
LABEL_133:
    v86 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v86)
      v87 = v23 == 0;
    else
      v87 = 1;
    if (!v87)
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v86 + 16))(v86, v24, v23);
  }
  LOBYTE(v95) = 0;
  v96 = 0;
LABEL_72:
  v18 = v88;
  if (v107)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v107, v24);
LABEL_74:
  v12 = (WTF::StringImpl *)*a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v10 = a2[3];
  if (v10)
    goto LABEL_102;
  while (1)
  {
    v51 = 0;
    v52 = 1;
LABEL_78:
    v53 = *a2;
    if (!*a2)
      break;
    if (v98 && !v89 && !v16 && !v18 && !v52)
    {
      WebCore::IDBDatabaseInfo::IDBDatabaseInfo();
      v90 = v99;
      v91 = v100;
      v92 = v101;
      v93 = v102;
      v54 = 1;
      v94 = 1;
      if (!v96)
        goto LABEL_87;
      goto LABEL_85;
    }
    __break(1u);
LABEL_102:
    if (v11)
      v10 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10, v12);
  }
  v54 = 0;
  LOBYTE(v90) = 0;
  v94 = 0;
  if (!v51)
    goto LABEL_87;
LABEL_85:
  if (v95)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v95, v12);
LABEL_87:
  if (v98 && (v55 = v97, v97 = 0, v55))
  {
    if (*(_DWORD *)v55 != 2)
    {
      *(_DWORD *)v55 -= 2;
      goto LABEL_91;
    }
    WTF::StringImpl::destroy(v55, v12);
    if (!v53)
    {
LABEL_98:
      v12 = (WTF::StringImpl *)*a2;
      v63 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v64 = a2[3];
      if (v64 && v63)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v64 + 16))(v64, v12);
        v54 = v94;
      }
    }
  }
  else
  {
LABEL_91:
    if (!v53)
      goto LABEL_98;
  }
  if (v54)
  {
    v56 = WebCore::IDBDatabaseInfo::operator new((WebCore::IDBDatabaseInfo *)0x28);
    v57 = v90;
    v90 = 0;
    *(_QWORD *)v56 = v57;
    v58 = v92;
    *(_OWORD *)(v56 + 8) = v91;
    *(_QWORD *)(v56 + 24) = v58;
    *(_QWORD *)(v56 + 32) = 0;
    v59 = v93;
    v93 = 0;
    *(_QWORD *)(v56 + 32) = v59;
    *(_QWORD *)v3 = v56;
    v3[8] = 1;
    return (_BYTE *)std::__optional_destruct_base<WebCore::IDBDatabaseInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v60);
  }
  *v3 = 0;
  v3[8] = 0;
  std::__optional_destruct_base<WebCore::IDBDatabaseInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v12);
LABEL_95:
  v61 = *a2;
  v62 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v62)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v61);
  }
  return result;
}

void sub_196E34950(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,WTF::StringImpl *a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  std::__optional_destruct_base<WebCore::IDBDatabaseInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBGetRecordData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int v4;
  char i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  _BYTE v11[16];
  int v12;
  char v13;
  _BYTE v14[16];
  int v15;
  __int16 v16;
  char v17;
  char v18[8];
  _BYTE v19[32];
  _WORD v20[16];
  char v21;
  char v22;

  v2 = a1;
  IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a1, (uint64_t)v18);
  v10 = 0;
  IPC::Decoder::operator>><BOOL>(v2, &v10);
  v4 = HIBYTE(v10);
  if (!HIBYTE(v10))
    goto LABEL_12;
  for (i = v10; ; i = 0)
  {
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
    }
    if (v21)
    {
      LOBYTE(v10) = v18[0];
      v2 = (uint64_t *)v11;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v11, (uint64_t)v19);
      v13 = v19[24];
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v14, (uint64_t)v20);
      v16 = v20[12];
      if (v4)
        break;
    }
    __break(1u);
LABEL_12:
    v7 = *v2;
    v8 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v9 = v2[3];
    if (v9 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
  }
  v17 = i;
  *(_BYTE *)a2 = v10;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v11);
  *(_BYTE *)(a2 + 32) = v13;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v14);
  *(_WORD *)(a2 + 64) = v16;
  *(_BYTE *)(a2 + 72) = v17;
  *(_BYTE *)(a2 + 80) = 1;
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&v22, v14);
  v15 = -1;
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v22, v11);
  return std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
}

void sub_196E34B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  v6 = *((_DWORD *)v2 + 10);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 3), v6);
  LOBYTE(v5) = *((_BYTE *)v2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 49);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  unint64_t v9;
  int v11;
  WTF::StringImpl *result;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  __int128 v37;
  WTF::StringImpl *v38;
  _BYTE v39[16];
  int v40;
  __int16 v41;
  _BYTE v42[16];
  int v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;
  char v47;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    a1[2] = v5 + v6 + 8;
    if (v5)
    {
      v8 = 0;
      goto LABEL_8;
    }
    v19 = v4;
    v18 = 0;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v18 = *a1;
        v19 = a1[1];
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
    goto LABEL_65;
LABEL_45:
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v8 = 1;
LABEL_8:
    v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 >= v9 && v4 - v9 > 7)
    {
      a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v5)
      {
        v11 = 0;
        goto LABEL_15;
      }
      v22 = v4;
      v23 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (v24)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
          v23 = *a1;
          v22 = a1[1];
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25 && v22)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
    v11 = 1;
LABEL_15:
    IPC::Decoder::decode<WTF::String>(a1, &v45);
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v42, a1);
    v13 = a1[1];
    v14 = (WTF::StringImpl *)*a1;
    v15 = a1[2] - *a1;
    if (v13 <= v15)
    {
      v26 = 0;
      v27 = 0;
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        if (v13)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
          v27 = *a1;
          v26 = a1[1];
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
      }
      goto LABEL_51;
    }
    v16 = (unsigned __int8 *)v14 + v15;
    v17 = v16 + 1;
    a1[2] = (uint64_t)(v16 + 1);
    if (!v14)
    {
      v26 = v13;
      v27 = 0;
LABEL_51:
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        if (v26)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
          v14 = (WTF::StringImpl *)*a1;
          v13 = a1[1];
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      goto LABEL_53;
    }
    if (*v16 < 2u)
    {
      v18 = 0;
      goto LABEL_19;
    }
LABEL_53:
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (!v30 || !v13)
    {
      v31 = 0;
      v14 = 0;
      LODWORD(v18) = 1;
      goto LABEL_55;
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v30 + 16))(v30, v14);
    v14 = (WTF::StringImpl *)*a1;
    v13 = a1[1];
    v18 = 1;
    v17 = (unsigned __int8 *)a1[2];
LABEL_19:
    if (v13 <= v17 - (unsigned __int8 *)v14)
      break;
    a1[2] = (uint64_t)(v17 + 1);
    if (!v14)
    {
      v31 = v13;
      goto LABEL_55;
    }
    if (*v17 > 1u)
      goto LABEL_57;
    v19 = 0;
    if (!v8)
      goto LABEL_23;
LABEL_64:
    __break(1u);
LABEL_65:
    if (!v19)
      goto LABEL_45;
    (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18, v19);
    v5 = *a1;
    v4 = a1[1];
  }
  v36 = v18;
  v31 = 0;
  v33 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v33 && v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
    v14 = (WTF::StringImpl *)*a1;
    v31 = a1[1];
  }
  else
  {
    v14 = 0;
  }
  LODWORD(v18) = v36;
LABEL_55:
  *a1 = 0;
  a1[1] = 0;
  v32 = a1[3];
  if (v32)
  {
    v35 = v18;
    if (v31)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v32 + 16))(v32, v14, v31);
      v14 = (WTF::StringImpl *)*a1;
      v13 = a1[1];
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    LODWORD(v18) = v35;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
LABEL_57:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (!result
    || !v13
    || (v34 = v18,
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v14), v18 = v34, !*a1))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_34;
  }
  v19 = 1;
  if (v8)
    goto LABEL_64;
LABEL_23:
  if (v11 || !v46 || !v44 || (_DWORD)v18 || (_DWORD)v19)
    goto LABEL_64;
  WebCore::IDBIndexInfo::IDBIndexInfo();
  *(_OWORD *)a2 = v37;
  v20 = v38;
  v38 = 0;
  *(_QWORD *)(a2 + 16) = v20;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 24, (uint64_t)v39);
  *(_WORD *)(a2 + 48) = v41;
  *(_BYTE *)(a2 + 56) = 1;
  if (v40 != -1)
    ((void (*)(char *, _BYTE *))off_1E34AD860[v40])(&v47, v39);
  v40 = -1;
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_34:
  if (v44 && v43 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34AD860[v43])(&v37, v42);
  if (v46)
  {
    result = v45;
    v45 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E351D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, char a18, uint64_t a19, int a20,int a21,char a22)
{
  uint64_t v22;
  WTF::StringImpl *v24;

  if (a22 && a20 != -1)
    ((void (*)(char *, char *))off_1E34AD860[a20])(&a11, &a18);
  if (*(_BYTE *)(v22 - 64))
  {
    v24 = *(WTF::StringImpl **)(v22 - 72);
    *(_QWORD *)(v22 - 72) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_17;
  }
  v7 = (_BYTE *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    goto LABEL_4;
  }
  if (*v7 < 2u)
  {
    if (*v7)
    {
      result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v18);
      if (v20)
      {
        *(_QWORD *)a1 = v18;
        v12 = v19;
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(a1 + 8) = v12;
        v13 = 1;
        *(_DWORD *)(a1 + 16) = 1;
        result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v11);
        goto LABEL_14;
      }
    }
    else
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::String>(a2, &v18);
      if ((_BYTE)v19)
      {
        *(_QWORD *)a1 = v18;
        *(_DWORD *)(a1 + 16) = 0;
        v13 = 1;
        goto LABEL_14;
      }
    }
    v13 = 0;
    *(_BYTE *)a1 = 0;
LABEL_14:
    *(_BYTE *)(a1 + 24) = v13;
    if (v13)
      return result;
    goto LABEL_5;
  }
LABEL_4:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_5:
  v8 = *a2;
  v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::IDBObjectStoreInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&>(a1, (uint64_t)(a2 + 2));
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits> const&>(a1, (_QWORD **)a2 + 7);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBObjectStoreInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  WTF::StringImpl *result;
  unint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  char v62;
  _BYTE v63[16];
  int v64;
  char v65;
  char v66;
  WTF::StringImpl *v67;
  char v68;
  WTF::StringImpl *v69[2];
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76[2];

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    a1[2] = v5 + v6 + 8;
    if (v5)
    {
      v8 = 0;
      goto LABEL_8;
    }
    v46 = v4;
    v47 = 0;
  }
  else
  {
    v46 = 0;
    v47 = 0;
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v5, v4);
        v47 = *a1;
        v46 = a1[1];
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v49 = a1[3];
  if (v49 && v46)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
  v8 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::String>(a1, &v67);
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v63, a1);
  v10 = a1[1];
  v11 = (WTF::StringImpl *)*a1;
  v12 = a1[2] - *a1;
  if (v10 <= v12)
  {
    v50 = 0;
    v51 = 0;
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
        v51 = *a1;
        v50 = a1[1];
      }
      else
      {
        v50 = 0;
        v51 = 0;
      }
    }
    goto LABEL_97;
  }
  v13 = (unsigned __int8 *)v11 + v12;
  a1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v50 = v10;
    v51 = 0;
LABEL_97:
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53 && v50)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
      v11 = (WTF::StringImpl *)*a1;
      v10 = a1[1];
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
LABEL_99:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      if (v10)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v11);
        v11 = (WTF::StringImpl *)*a1;
        v10 = a1[1];
        goto LABEL_102;
      }
    }
    else
    {
      v10 = 0;
    }
    v11 = 0;
LABEL_102:
    v14 = 1;
    goto LABEL_12;
  }
  if (*v13 >= 2u)
    goto LABEL_99;
  v14 = 0;
LABEL_12:
  v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v11;
  if (v10 < v15 || v10 - v15 <= 3)
  {
    v54 = 0;
    v55 = 0;
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (v56)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        v55 = *a1;
        v54 = a1[1];
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
    }
    goto LABEL_104;
  }
  v16 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (uint64_t)(v16 + 1);
  if (!v11)
  {
    v54 = v10;
    v55 = 0;
LABEL_104:
    *a1 = 0;
    a1[1] = 0;
    v57 = a1[3];
    if (v57 && v54)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v54);
    LOBYTE(v61) = 0;
    v62 = 0;
    goto LABEL_54;
  }
  v17 = *v16;
  v76[0] = 0;
  if (!v17)
  {
    v43 = 0;
    goto LABEL_58;
  }
  v60 = v14;
  v18 = 0;
  while (1)
  {
    v10 = a1[1];
    v11 = (WTF::StringImpl *)*a1;
    v19 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v10 < v19 || v10 - v19 <= 7)
      break;
    v21 = (uint64_t *)((char *)v11 + v19);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v11)
      goto LABEL_107;
    v22 = *v21;
    IPC::Decoder::decode<WebCore::IDBIndexInfo>(a1, (uint64_t)v69);
    if (!(_BYTE)v75 || (unint64_t)(v22 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
LABEL_51:
      LOBYTE(v61) = 0;
      v62 = 0;
      std::__optional_destruct_base<WebCore::IDBIndexInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v23);
      goto LABEL_52;
    }
    v24 = v76[0];
    if (v76[0]
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v76),
          (v24 = v76[0]) != 0))
    {
      v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = (_QWORD *)(v24 + (v29 << 6));
    v31 = *v30;
    if (*v30)
    {
      v32 = 0;
      v33 = 1;
      do
      {
        if (v31 == v22)
          goto LABEL_51;
        if (v31 == -1)
          v32 = v30;
        v29 = ((_DWORD)v29 + v33) & v25;
        v30 = (_QWORD *)(v24 + (v29 << 6));
        v31 = *v30;
        ++v33;
      }
      while (*v30);
      if (v32)
      {
        *v32 = 0;
        WebCore::IDBIndexInfo::IDBIndexInfo((WebCore::IDBIndexInfo *)(v32 + 1));
        --*(_DWORD *)(v76[0] - 16);
        v30 = v32;
      }
    }
    *v30 = v22;
    *(_OWORD *)(v30 + 1) = *(_OWORD *)v69;
    v34 = v70;
    v70 = 0;
    v35 = (WTF::StringImpl *)v30[3];
    v30[3] = v34;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v23);
      else
        *(_DWORD *)v35 -= 2;
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v30 + 4), (uint64_t)&v71);
    *((_WORD *)v30 + 28) = v74;
    v37 = v76[0];
    if (v76[0])
      v38 = *(_DWORD *)(v76[0] - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v76[0] - 12) = v38;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        goto LABEL_46;
LABEL_45:
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v76);
      goto LABEL_46;
    }
    if (3 * v40 <= 4 * v39)
      goto LABEL_45;
LABEL_46:
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::IDBIndexInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v36);
    if (++v18 == v17)
    {
      v43 = v76[0];
      v14 = v60;
LABEL_58:
      v61 = v43;
      v62 = 1;
      goto LABEL_59;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
      v45 = v10 == 0;
    else
      v45 = 1;
    if (!v45)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      v11 = (WTF::StringImpl *)*a1;
      v10 = a1[1];
LABEL_107:
      v58 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v58)
        v59 = v10 == 0;
      else
        v59 = 1;
      if (!v59)
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v58 + 16))(v58, v11, v10);
    }
    LOBYTE(v61) = 0;
    v62 = 0;
LABEL_52:
    v14 = v60;
    if (v76[0])
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v76[0], v11);
LABEL_54:
    v11 = (WTF::StringImpl *)*a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v10)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v11);
LABEL_59:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 64) = 0;
      goto LABEL_73;
    }
    if (!v8 && v68 && v66 && !v14 && v62)
      break;
    __break(1u);
  }
  WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo();
  v41 = v69[1];
  v69[1] = 0;
  *(WTF::StringImpl **)a2 = v69[0];
  *(_QWORD *)(a2 + 8) = v41;
  std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 16), (uint64_t)&v70);
  *(_BYTE *)(a2 + 48) = v74;
  v42 = v75;
  v75 = 0;
  *(_QWORD *)(a2 + 56) = v42;
  *(_BYTE *)(a2 + 64) = 1;
  if (v73)
  {
    if (v72 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34AD860[v72])(v76, &v70);
    v72 = -1;
  }
  result = v69[1];
  v69[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_73:
  if (v62)
  {
    result = (WTF::StringImpl *)v61;
    if (v61)
      result = (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v61, v11);
  }
  if (v66 && v65 && v64 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34AD860[v64])(v69, v63);
  if (v68)
  {
    result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E35B5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,WTF::StringImpl *a26,char a27,int a28,__int16 a29,char a30,char a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,int a35,int a36,char a37,uint64_t a38,uint64_t a39)
{
  WTF::StringImpl *v40;

  if ((_BYTE)a23 && a21 && a19 != -1)
    ((void (*)(__int16 *, __int16 *))off_1E34AD860[a19])(&a29, &a15);
  if (a27)
  {
    v40 = a26;
    a26 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, a2);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  int v6;
  char *result;

  v2 = a2;
  v4 = (unsigned int *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, v4, v5);
  v6 = *(_DWORD *)(v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>(a1, (unsigned int *)(v2 + 40), v6);
  LODWORD(v4) = *(_DWORD *)(v2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = (_DWORD)v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 68);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _BYTE v22[16];
  int v23;
  char v24;
  _BYTE v25[16];
  int v26;
  int v27;
  char v28;
  _BYTE v29[8];
  _BYTE v30[16];
  int v31;
  unsigned __int8 v32;
  _BYTE v33[8];
  _BYTE v34[16];
  int v35;
  unsigned __int8 v36;
  char v37;

  v2 = a1;
  IPC::Decoder::decode<WebCore::IDBKeyData>(a1, v33);
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, v29);
  v4 = v2[1];
  v5 = *v2;
  v6 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (_DWORD *)(v5 + v6);
    v2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v15 = v4;
      v16 = 0;
      goto LABEL_28;
    }
    v9 = 0;
    v10 = *v8 & 0xFFFFFF00;
    v11 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v15 = 0;
    v16 = 0;
    *v2 = 0;
    v2[1] = 0;
    v17 = v2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v5, v4);
        v16 = *v2;
        v15 = v2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
LABEL_28:
    *v2 = 0;
    v2[1] = 0;
    v18 = v2[3];
    if (v18 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    v10 = 0;
    v11 = 0;
    v9 = 1;
LABEL_8:
    v21 = 0;
    result = (uint64_t)IPC::Decoder::operator>><BOOL>(v2, &v21);
    v13 = HIBYTE(v21);
    if (HIBYTE(v21))
    {
      v14 = v21;
    }
    else
    {
      v19 = *v2;
      v20 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      result = v2[3];
      if (result && v20)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
      v14 = 0;
    }
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
      goto LABEL_19;
    }
    v5 = v36;
    if (v36)
    {
      LOBYTE(v21) = v33[0];
      v2 = (uint64_t *)v22;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v22, (uint64_t)v34);
      v5 = v32;
      if (v32)
      {
        v24 = v29[0];
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v25, (uint64_t)v30);
        if (!v9)
        {
          v5 = v11 | v10;
          v27 = v11 | v10;
          if (v13)
            break;
        }
      }
    }
    __break(1u);
  }
  v28 = v14;
  *(_BYTE *)a2 = v21;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, (uint64_t)v22);
  *(_BYTE *)(a2 + 32) = v24;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 40, (uint64_t)v25);
  *(_DWORD *)(a2 + 64) = v27;
  *(_BYTE *)(a2 + 68) = v28;
  *(_BYTE *)(a2 + 72) = 1;
  if (v26 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v26])(&v37, v25);
  v26 = -1;
  if (v23 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v37, v22);
LABEL_19:
  if (v32 && v31 != -1)
    result = ((uint64_t (*)(__int16 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v21, v30);
  if (v36)
  {
    if (v35 != -1)
      return ((uint64_t (*)(__int16 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(&v21, v34);
  }
  return result;
}

void sub_196E3602C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,int a31,char a32)
{
  uint64_t v32;

  if (a23 && a21 != -1)
    ((void (*)(uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a21])(v32 - 65, &a19);
  if (a32)
  {
    if (a30 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a30])(&a18, &a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::IDBResourceIdentifier,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = a1[1];
  v7 = *a1;
  v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 >= v8 && v6 - v8 > 7)
  {
    a1[2] = v7 + v8 + 8;
    if (v7)
    {
      if (!v5)
        goto LABEL_14;
      result = WebCore::IDBResourceIdentifier::IDBResourceIdentifier();
      *(_OWORD *)a2 = v12;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    v10 = v6;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_15;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
      break;
    if (!v10)
      break;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
    v7 = *a1;
    if (!*a1)
      break;
LABEL_14:
    __break(1u);
LABEL_15:
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7, v6);
      v11 = *a1;
      v10 = a1[1];
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void IPC::ArgumentCoder<WebCore::IDBValue,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ThreadSafeDataBufferImpl,WTF::RawPtrTraits<WebCore::ThreadSafeDataBufferImpl>,WTF::DefaultRefDerefTraits<WebCore::ThreadSafeDataBufferImpl>>,void>::encode<IPC::Encoder,WebCore::ThreadSafeDataBufferImpl>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 3));
}

uint64_t IPC::ArgumentCoder<WebCore::IDBValue,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t result;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  WTF *v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  char v17;
  _BYTE v18[16];
  char v19;
  uint64_t v20;
  char v21;

  IPC::Decoder::decode<WebCore::ThreadSafeDataBuffer>((WTF *)&v20, a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)v18);
  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)v16);
  if (*a1)
  {
    if (v21 && v19 && v17)
    {
      WebCore::IDBValue::IDBValue();
      v8 = *(_OWORD *)v12;
      v12[1] = 0;
      *(_OWORD *)a2 = v8;
      *(_QWORD *)&v8 = v13;
      v13 = 0;
      *(_QWORD *)(a2 + 16) = v8;
      v9 = v14;
      v14 = 0;
      *(_QWORD *)(a2 + 24) = v9;
      *(_QWORD *)&v8 = v15;
      v15 = 0;
      *(_QWORD *)(a2 + 32) = v8;
      *(_BYTE *)(a2 + 40) = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v10);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12[1], v11);
      result = 0;
      goto LABEL_6;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_6:
  if (v17)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v7);
  if (v19)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v7);
  if (v21)
  {
    result = v20;
    v20 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(result, v7);
  }
  return result;
}

void sub_196E363C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v25;

  if (a17)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  if (a23)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  if (*(_BYTE *)(v23 - 40))
  {
    v25 = *(_QWORD *)(v23 - 48);
    *(_QWORD *)(v23 - 48) = 0;
    if (v25)
      WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v25, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WebCore::ThreadSafeDataBuffer>(WTF *result, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  char v23;

  v3 = result;
  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_15;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v6;
    v15 = 0;
LABEL_15:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_16;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 16))(v18, v5);
    goto LABEL_17;
  }
  if (v9)
  {
    result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v21);
    v10 = *a2;
    if (*a2)
    {
      if (!v23)
        goto LABEL_23;
      result = (WTF *)WTF::fastMalloc((WTF *)0x18);
      v11 = (uint64_t)result;
      *(_DWORD *)result = 1;
      v12 = v21;
      v21 = 0;
      *((_QWORD *)result + 1) = v12;
      v13 = v22;
      HIDWORD(v22) = 0;
      *((_QWORD *)result + 2) = v13;
    }
    else
    {
      v11 = 0;
    }
    if (v23)
    {
      result = v21;
      if (v21)
      {
        v21 = 0;
        LODWORD(v22) = 0;
        result = (WTF *)WTF::fastFree(result, v5);
      }
    }
    if (v10)
    {
      v9 = 0;
      goto LABEL_19;
    }
LABEL_17:
    v5 = (char *)*a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      goto LABEL_24;
    goto LABEL_18;
  }
  v11 = 0;
LABEL_19:
  while (*a2)
  {
    if (!v9)
    {
      *(_QWORD *)v3 = v11;
      *((_BYTE *)v3 + 8) = 1;
      return result;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    if (v6)
      result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v5);
LABEL_18:
    v11 = 0;
    v9 = 1;
  }
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
  if (!v11)
    LOBYTE(v9) = 1;
  if ((v9 & 1) != 0
    || (result = (WTF *)WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v11, v5), !*((_BYTE *)v3 + 8)))
  {
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result && v20)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  }
  return result;
}

void sub_196E36644(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebCore::IDBDatabaseIdentifier,void>::encode(a1, v2 + 3);
  v7 = v2[13];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LOBYTE(v2) = *((_BYTE *)v2 + 112);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  char v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  _BOOL4 v24;
  unsigned __int16 v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  char v42;
  WTF::StringImpl *v43[2];
  WTF::StringImpl *v44[2];
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  int v48;
  BOOL v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  _BYTE v53[40];
  char v54;
  _BYTE v55[32];
  _BYTE v56[40];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5 = v4;
  result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v38);
  if (!*a1)
    goto LABEL_4;
  if (!v39)
    goto LABEL_54;
  if (v38 == 0)
  {
LABEL_4:
    *a2 = 0;
    a2[120] = 0;
    return result;
  }
  IPC::Decoder::decode<WTF::String>(a1, &v40);
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v55);
  v7 = a1[1];
  v8 = *a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
    goto LABEL_55;
  v10 = (unsigned __int8 *)(v8 + v9);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v27 = v7;
    v28 = 0;
    goto LABEL_56;
  }
  v11 = *v10;
  if (v11 <= 1)
  {
    v12 = 0;
    v13 = v11 != 0;
    goto LABEL_9;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31 && v7 && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v8), *a1))
    {
      v13 = 0;
      v12 = 1;
LABEL_9:
      v46[0] = 0;
      v46[1] = 0;
      v48 = 0;
      v47 = 0;
      v49 = 0;
      *(_OWORD *)v43 = 0u;
      *(_OWORD *)v44 = 0u;
      v45 = 0;
      if (!v41)
        goto LABEL_54;
      v14 = v40;
      v40 = 0;
      v43[0] = v14;
      if (!v56[32])
        goto LABEL_54;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43[1], (uint64_t)v55);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v46, (uint64_t)v56);
      if (v12)
        goto LABEL_54;
      v49 = v13;
      v15 = v43[0];
      v43[0] = 0;
      v51 = v15;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v52, (uint64_t)&v43[1]);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v53, (uint64_t)v46);
      v53[32] = v49;
      v54 = 1;
      if (v48 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v48])(&v42, v46);
      v48 = -1;
      if (v45 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v45])(&v42, &v43[1]);
      v45 = -1;
      v17 = v43[0];
      v43[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      LOBYTE(v51) = 0;
      v54 = 0;
    }
    std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55);
    if (v41)
    {
      v19 = v40;
      v40 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    if (!v54)
    {
      v32 = *a1;
      v7 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        if (v7)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v32);
      }
    }
    v20 = (WTF::StringImpl *)*a1;
    if (!*a1)
    {
LABEL_29:
      *a2 = 0;
      a2[120] = 0;
      return std::__optional_destruct_base<WebCore::IDBDatabaseIdentifier,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v20);
    }
    if (v54)
    {
      if ((unint64_t)v51 + 1 <= 1)
        goto LABEL_29;
      v21 = a1[1];
      v22 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v20;
      v23 = v21 >= v22 && v21 - v22 >= 8;
      v24 = !v23;
      if (v24)
      {
        *a1 = 0;
        a1[1] = 0;
        v34 = a1[3];
        if (v34)
        {
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
            v35 = *a1;
            v36 = a1[1];
            v37 = a1[3];
            *a1 = 0;
            a1[1] = 0;
            if (v37)
            {
              if (v36)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
            }
          }
        }
      }
      else
      {
        a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      v25 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
      if (!*a1)
        goto LABEL_29;
      if (v5 && v39 && v54 && !v24 && v25 > 0xFFu)
        break;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    v27 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
LABEL_56:
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
        v8 = *a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
  }
  WebCore::IDBOpenRequestData::IDBOpenRequestData();
  WebCore::IDBOpenRequestData::IDBOpenRequestData((uint64_t)a2, (__int128 *)v43);
  a2[120] = 1;
  if (v50 != -1)
    ((void (*)(_BYTE *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v50])(v55, &v48);
  v50 = -1;
  if ((_DWORD)v47 != -1)
    ((void (*)(_BYTE *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v47])(v55, &v45);
  LODWORD(v47) = -1;
  v26 = v44[1];
  v44[1] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  return std::__optional_destruct_base<WebCore::IDBDatabaseIdentifier,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v20);
}

void sub_196E36BF8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, int a14, int a15, __int16 a16, char a17, char a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,int a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28,uint64_t a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  std::__optional_destruct_base<WebCore::IDBDatabaseIdentifier,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a35, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = v2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, v2 + 5);
  v9 = v2[8];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = v2[9];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  LOBYTE(v10) = *((_BYTE *)v2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = v2[11];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  LOBYTE(v2) = *((_BYTE *)v2 + 96);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

__n128 IPC::ArgumentCoder<WebCore::IDBRequestData,void>::decode@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  char v6;
  char v7;
  unint64_t v8;
  __n128 result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned __int16 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _OWORD v35[6];
  uint64_t v36;
  _BYTE v37[32];
  __int128 v38;
  char v39;
  __int128 v40;
  char v41;

  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7 = v6;
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v40);
  if (!*a1)
    goto LABEL_7;
  if (!v41)
    goto LABEL_32;
  if (v40 == 0)
    goto LABEL_7;
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v38);
  if (!*a1)
    goto LABEL_7;
  if (!v39)
    goto LABEL_32;
  if (v38 == 0)
  {
LABEL_7:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 104) = 0;
    return result;
  }
  IPC::Decoder::decode<std::optional<WebCore::IDBResourceIdentifier>>(a1, (uint64_t)v37);
  v10 = a1[1];
  v11 = *a1;
  v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v10 < v12 || v10 - v12 <= 7)
  {
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
  }
  else
  {
    a1[2] = v11 + v12 + 8;
    if (v11)
    {
      v34 = 0;
      goto LABEL_12;
    }
    v22 = v10;
    v23 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v25 = a1[3];
  if (v25 && v22)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
    v11 = *a1;
    v10 = a1[1];
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v34 = 1;
LABEL_12:
  v13 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v11;
  if (v10 < v13 || v10 - v13 <= 7)
  {
    v26 = 0;
    v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 = *a1;
        v26 = a1[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
  }
  else
  {
    a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v11)
    {
      v2 = 0;
      goto LABEL_16;
    }
    v26 = v10;
    v27 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v29 = a1[3];
  if (v29 && v26)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
  v2 = 1;
LABEL_16:
  LOWORD(v35[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v35);
  v3 = BYTE1(v35[0]);
  v8 = a1[1];
  if (!BYTE1(v35[0]))
    goto LABEL_33;
  while (1)
  {
    v14 = *a1;
    v15 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v8 < v15 || v8 - v15 <= 7)
    {
      v30 = 0;
      v31 = 0;
      *a1 = 0;
      a1[1] = 0;
      v32 = a1[3];
      if (v32)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
          v31 = *a1;
          v30 = a1[1];
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
      }
    }
    else
    {
      a1[2] = v14 + v15 + 8;
      if (v14)
      {
        v16 = 0;
        goto LABEL_21;
      }
      v30 = v8;
      v31 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33 && v30)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
    v16 = 1;
LABEL_21:
    v17 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    if (!*a1)
      goto LABEL_7;
    if (v7 && v41 && v39 && v37[24] && !v34 && !v2 && v3 && !v16 && v17 > 0xFFu)
      break;
LABEL_32:
    __break(1u);
LABEL_33:
    v20 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20);
        v8 = a1[1];
      }
    }
    else
    {
      v8 = 0;
    }
  }
  WebCore::IDBRequestData::IDBRequestData();
  v18 = v35[5];
  *(_OWORD *)(a2 + 64) = v35[4];
  *(_OWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 96) = v36;
  v19 = v35[1];
  *(_OWORD *)a2 = v35[0];
  *(_OWORD *)(a2 + 16) = v19;
  result = (__n128)v35[3];
  *(_OWORD *)(a2 + 32) = v35[2];
  *(__n128 *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 104) = 1;
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::IDBResourceIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::IDBResourceIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::IDBDatabaseIdentifier,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, (uint64_t)(v2 + 1));
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::IDBDatabaseNameAndVersion,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v13);
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (uint64_t *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v6 = v14;
      if (!v14)
        goto LABEL_21;
      v10 = *v9;
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    v11 = v5;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_22;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v11)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v12);
    if (!*a1)
      break;
    v6 = v14;
    if (v14)
      v13 = 0;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v5)
    {
      (*(void (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6, v5);
      v12 = (WTF::StringImpl *)*a1;
      v11 = a1[1];
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E374A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  __int16 v9;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v9 = *(_WORD *)(a2 + 24);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)&v9);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBDatabaseInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBDatabaseInfo> const&>(a1, (uint64_t **)(a2 + 56));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBTransactionInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBTransactionInfo> const&>(a1, (uint64_t **)(a2 + 64));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBKeyData>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBKeyData> const&>(a1, (_QWORD *)(a2 + 72));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBGetResult>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBGetResult> const&>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<std::unique_ptr<WebCore::IDBGetAllResult>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::IDBGetAllResult> const&>(a1, (WebCore::IDBGetAllResult **)(a2 + 88));
  v7 = *(_QWORD *)(a2 + 96);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

void IPC::ArgumentCoder<WebCore::IDBResultData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unint64_t v67;
  void *v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  void *v72;
  unsigned int v73;
  void *v74;
  WTF *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  int v84;
  WTF::StringImpl *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  unsigned int v95;
  int v96;
  __int128 v97;
  WTF *v98;
  int v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  unint64_t v112;
  void *v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  WTF *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  unsigned int v148;
  void *v149;
  WTF *v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  WTF *v158;
  WTF *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF *v164;
  unsigned int v165;
  WTF *v166;
  WTF *v167;
  unsigned int v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  WTF *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF *v177;
  WTF::StringImpl *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t **v188;
  WTF::StringImpl *v189;
  bmalloc::api *v190;
  uint64_t *v191;
  unsigned int *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t *v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  char v210;
  char v211;
  unint64_t v212;
  int v213;
  uint64_t *v214;
  char v215;
  unsigned int *v216;
  char v217;
  uint64_t *v218;
  char v219;
  bmalloc::api *v220;
  char v221;
  __int16 v222;
  WTF::StringImpl *v223;
  char v224;
  __int128 v225;
  char v226;
  _BYTE v227[32];
  WTF::StringImpl *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  _QWORD v232[9];
  char v233;
  __int128 v234;
  uint64_t v235;
  WTF *v236;
  WTF::StringImpl *v237;
  char v238[8];
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  int v246;
  int v247;
  _BYTE v248[16];
  int v249;
  char v250;
  _QWORD v251[2];
  char v252;
  WTF *v253;
  uint64_t v254;
  char v255;
  uint64_t *v256;
  char v257;
  int v258;
  char v259;
  char v260;
  __int128 v261;
  uint64_t v262;
  WTF *v263;
  uint64_t v264;
  char v265;
  WTF *v266;
  unint64_t v267;
  char v268;
  int v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  int v274;
  char v275;
  WTF *v276;
  uint64_t v277;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v19 = *v2;
        v18 = v2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v18 = v4;
    v19 = 0;
LABEL_13:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v21 = v2[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_14;
  }
  v8 = *v7;
  if (v8 < 0x12)
  {
    v9 = v8 | 0x100;
    goto LABEL_5;
  }
LABEL_14:
  *v2 = 0;
  v2[1] = 0;
  v22 = v2[3];
  if (v22 && v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v5);
  v9 = 0;
LABEL_5:
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(v2, (uint64_t)&v225);
  IPC::Decoder::decode<WebCore::IDBError>(v2, (uint64_t)&v222);
  v10 = v2[1];
  v11 = *v2;
  v12 = v2[2] - *v2;
  if (v10 <= v12)
  {
    v23 = 0;
    v24 = 0;
    *v2 = 0;
    v2[1] = 0;
    v25 = v2[3];
    if (v25)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *v2;
        v23 = v2[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    goto LABEL_17;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  v2[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v23 = v10;
    v24 = 0;
LABEL_17:
    v10 = 0;
    v11 = 0;
    *v2 = 0;
    v2[1] = 0;
    v26 = v2[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
        v11 = *v2;
        v10 = v2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_18;
  }
  v14 = *v13;
  if (v14 >= 2)
  {
LABEL_18:
    *v2 = 0;
    v2[1] = 0;
    v27 = v2[3];
    if (v27 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v11);
    goto LABEL_19;
  }
  if (!v14)
  {
    v17 = 0;
    v213 = 0;
    v212 = 0;
    v211 = 0;
    goto LABEL_21;
  }
  v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v2);
  if (v16)
  {
    v17 = v15;
    v213 = 0;
    v212 = v15 & 0xFFFFFFFFFFFFFF00;
    v211 = 1;
    goto LABEL_21;
  }
LABEL_19:
  v28 = *v2;
  v29 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v30 = v2[3];
  if (v30 && v29)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
  v17 = 0;
  v212 = 0;
  v213 = 1;
LABEL_21:
  IPC::Decoder::decode<std::unique_ptr<WebCore::IDBDatabaseInfo>>(&v220, v2);
  v31 = v2[1];
  v32 = *v2;
  v33 = v2[2] - *v2;
  if (v31 <= v33)
  {
    v49 = 0;
    v50 = 0;
    *v2 = 0;
    v2[1] = 0;
    v51 = v2[3];
    if (v51)
    {
      if (v31)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
        v50 = *v2;
        v49 = v2[1];
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
    }
    goto LABEL_44;
  }
  v34 = (unsigned __int8 *)(v32 + v33);
  v2[2] = (uint64_t)(v34 + 1);
  if (!v32)
  {
    v49 = v31;
    v50 = 0;
LABEL_44:
    v31 = 0;
    v32 = 0;
    *v2 = 0;
    v2[1] = 0;
    v52 = v2[3];
    if (v52)
    {
      if (v49)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50, v49);
        v32 = *v2;
        v31 = v2[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
    goto LABEL_45;
  }
  v35 = *v34;
  if (v35 >= 2)
  {
LABEL_45:
    *v2 = 0;
    v2[1] = 0;
    v53 = v2[3];
    if (v53 && v31)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v32);
    LOBYTE(v218) = 0;
    v219 = 0;
    goto LABEL_29;
  }
  if (!v35)
  {
    v218 = 0;
    v219 = 1;
    goto LABEL_30;
  }
  IPC::Decoder::decode<WebCore::IDBTransactionInfo>(v2, (uint64_t)v227);
  if ((_BYTE)v230)
  {
    v36 = WTF::fastMalloc((WTF *)0x38);
    v37 = *(_OWORD *)&v227[16];
    *(_OWORD *)v36 = *(_OWORD *)v227;
    *(_OWORD *)(v36 + 16) = v37;
    *(_QWORD *)(v36 + 32) = 0;
    *(_QWORD *)(v36 + 40) = 0;
    v38 = v228;
    v228 = 0;
    *(_QWORD *)(v36 + 32) = v38;
    LODWORD(v38) = v229;
    LODWORD(v229) = 0;
    *(_DWORD *)(v36 + 40) = (_DWORD)v38;
    LODWORD(v38) = DWORD1(v229);
    DWORD1(v229) = 0;
    *(_DWORD *)(v36 + 44) = (_DWORD)v38;
    v39 = *((_QWORD *)&v229 + 1);
    *((_QWORD *)&v229 + 1) = 0;
    *(_QWORD *)(v36 + 48) = v39;
    v218 = (uint64_t *)v36;
    v219 = 1;
    std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227);
    goto LABEL_30;
  }
  LOBYTE(v218) = 0;
  v219 = 0;
  std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227);
LABEL_29:
  v40 = *v2;
  v41 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v42 = v2[3];
  if (v42 && v41)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
LABEL_30:
  v43 = v2[1];
  v44 = *v2;
  v45 = v2[2] - *v2;
  if (v43 <= v45)
  {
    v54 = 0;
    v55 = 0;
    *v2 = 0;
    v2[1] = 0;
    v56 = v2[3];
    if (v56)
    {
      if (v43)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        v55 = *v2;
        v54 = v2[1];
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
    }
    goto LABEL_48;
  }
  v46 = (unsigned __int8 *)(v44 + v45);
  v2[2] = (uint64_t)(v46 + 1);
  if (!v44)
  {
    v54 = v43;
    v55 = 0;
LABEL_48:
    v43 = 0;
    v44 = 0;
    *v2 = 0;
    v2[1] = 0;
    v57 = v2[3];
    if (v57)
    {
      if (v54)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v54);
        v44 = *v2;
        v43 = v2[1];
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
    }
    goto LABEL_49;
  }
  v47 = *v46;
  if (v47 >= 2)
  {
LABEL_49:
    *v2 = 0;
    v2[1] = 0;
    v58 = v2[3];
    if (v58 && v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v44);
    goto LABEL_50;
  }
  if (!v47)
  {
    v216 = 0;
    v217 = 1;
    goto LABEL_51;
  }
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, v227);
  if ((_BYTE)v228)
  {
    v48 = (unsigned int *)WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v48 = v227[0];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v48 + 2), (uint64_t)&v227[8]);
    *(_QWORD *)&v234 = 0;
    v216 = v48;
    v217 = 1;
    std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100]((unsigned int **)&v234, 0);
    if ((_BYTE)v228 && *(_DWORD *)&v227[24] != -1)
      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[*(unsigned int *)&v227[24]])(&v234, &v227[8]);
    goto LABEL_51;
  }
LABEL_50:
  LOBYTE(v216) = 0;
  v217 = 0;
  v59 = *v2;
  v60 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v61 = v2[3];
  if (v61 && v60)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v59);
LABEL_51:
  v62 = v2[1];
  v63 = *v2;
  v64 = v2[2] - *v2;
  if (v62 <= v64)
  {
    v125 = 0;
    v126 = 0;
    *v2 = 0;
    v2[1] = 0;
    v127 = v2[3];
    if (v127)
    {
      if (v62)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v127 + 16))(v127);
        v126 = *v2;
        v125 = v2[1];
      }
      else
      {
        v125 = 0;
        v126 = 0;
      }
    }
    goto LABEL_135;
  }
  v65 = (unsigned __int8 *)(v63 + v64);
  v2[2] = (uint64_t)(v65 + 1);
  if (!v63)
  {
    v125 = v62;
    v126 = 0;
LABEL_135:
    v62 = 0;
    v63 = 0;
    *v2 = 0;
    v2[1] = 0;
    v128 = v2[3];
    if (v128)
    {
      if (v125)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v126, v125);
        v63 = *v2;
        v62 = v2[1];
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
    }
    goto LABEL_136;
  }
  v66 = *v65;
  if (v66 >= 2)
  {
LABEL_136:
    *v2 = 0;
    v2[1] = 0;
    v129 = v2[3];
    if (v129 && v62)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v63);
    LOBYTE(v214) = 0;
    v215 = 0;
    goto LABEL_148;
  }
  if (!v66)
  {
    v214 = 0;
    v215 = 1;
    goto LABEL_111;
  }
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, &v271);
  IPC::Decoder::decode<WebCore::IDBKeyData>(v2, &v266);
  IPC::Decoder::decode<WebCore::IDBValue>(v2, (uint64_t)&v261);
  IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(&v256, v2);
  v67 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v68)
  {
    v69 = v67;
    v276 = 0;
    v277 = 0;
    if (v67 >= 0x2762)
    {
      do
      {
        IPC::Decoder::decode<WebCore::IDBCursorRecord>((uint64_t)&v234, v2);
        if (!v248[0])
        {
          LOBYTE(v253) = 0;
          v255 = 0;
          std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v146);
          goto LABEL_71;
        }
        v147 = v17;
        v148 = HIDWORD(v277);
        if (HIDWORD(v277) == (_DWORD)v277)
        {
          WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBCursorRecord>((uint64_t)&v276, (unint64_t)&v234);
        }
        else
        {
          v150 = v276;
          v151 = (char *)v276 + 104 * HIDWORD(v277);
          *v151 = v234;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v151 + 8), (uint64_t)&v234 + 8);
          v152 = (uint64_t)v150 + 104 * v148;
          *(_BYTE *)(v152 + 32) = (_BYTE)v237;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(v152 + 40, (uint64_t)v238);
          v153 = (uint64_t)v150 + 104 * v148;
          v154 = v241;
          v241 = 0;
          *(_QWORD *)(v153 + 72) = 0;
          *(_QWORD *)(v153 + 80) = 0;
          *(_QWORD *)(v153 + 64) = v154;
          v155 = v242;
          v242 = 0;
          *(_QWORD *)(v153 + 72) = v155;
          LODWORD(v155) = v243;
          v243 = 0;
          *(_DWORD *)(v153 + 80) = v155;
          LODWORD(v155) = v244;
          v244 = 0;
          *(_DWORD *)(v153 + 84) = v155;
          *(_QWORD *)(v153 + 88) = 0;
          *(_QWORD *)(v153 + 96) = 0;
          v156 = v245;
          v245 = 0;
          *(_QWORD *)(v153 + 88) = v156;
          LODWORD(v156) = v246;
          v246 = 0;
          *(_DWORD *)(v153 + 96) = v156;
          LODWORD(v156) = v247;
          v247 = 0;
          *(_DWORD *)(v153 + 100) = v156;
          ++HIDWORD(v277);
        }
        std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v149);
        --v69;
        v17 = v147;
      }
      while (v69);
      v157 = HIDWORD(v277);
      v158 = v276;
      if (v277 > HIDWORD(v277))
      {
        v159 = v276;
        if (HIDWORD(v277))
        {
          if (HIDWORD(v277) >= 0x2762763)
            goto LABEL_343;
          v160 = WTF::fastMalloc((WTF *)(104 * HIDWORD(v277)));
          LODWORD(v277) = 104 * v157 / 0x68;
          v276 = (WTF *)v160;
          v159 = v158;
          if ((WTF *)v160 != v158)
          {
            WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v158, (uint64_t)v158 + 104 * v157, v160);
            v159 = v276;
          }
        }
        if (v158)
        {
          if (v159 == v158)
          {
            v276 = 0;
            LODWORD(v277) = 0;
          }
          WTF::fastFree(v158, v68);
          v158 = v276;
        }
        else
        {
          v158 = v159;
        }
      }
      v276 = 0;
      v253 = v158;
      v209 = v277;
      v83 = HIDWORD(v277);
      LODWORD(v277) = 0;
      LODWORD(v254) = v209;
      LOBYTE(v17) = v147;
    }
    else
    {
      if (v67)
      {
        v210 = v17;
        v70 = 104 * v67;
        v71 = WTF::fastMalloc((WTF *)(104 * v67));
        LODWORD(v277) = v70 / 0x68;
        v276 = (WTF *)v71;
        while (1)
        {
          IPC::Decoder::decode<WebCore::IDBCursorRecord>((uint64_t)&v234, v2);
          if (!v248[0])
            break;
          v73 = HIDWORD(v277);
          if (HIDWORD(v277) == (_DWORD)v277)
          {
            WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBCursorRecord>((uint64_t)&v276, (unint64_t)&v234);
          }
          else
          {
            v75 = v276;
            v76 = (char *)v276 + 104 * HIDWORD(v277);
            *v76 = v234;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v76 + 8), (uint64_t)&v234 + 8);
            v77 = (uint64_t)v75 + 104 * v73;
            *(_BYTE *)(v77 + 32) = (_BYTE)v237;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor(v77 + 40, (uint64_t)v238);
            v78 = (uint64_t)v75 + 104 * v73;
            v79 = v241;
            v241 = 0;
            *(_QWORD *)(v78 + 72) = 0;
            *(_QWORD *)(v78 + 80) = 0;
            *(_QWORD *)(v78 + 64) = v79;
            v80 = v242;
            v242 = 0;
            *(_QWORD *)(v78 + 72) = v80;
            LODWORD(v80) = v243;
            v243 = 0;
            *(_DWORD *)(v78 + 80) = v80;
            LODWORD(v80) = v244;
            v244 = 0;
            *(_DWORD *)(v78 + 84) = v80;
            *(_QWORD *)(v78 + 88) = 0;
            *(_QWORD *)(v78 + 96) = 0;
            v81 = v245;
            v245 = 0;
            *(_QWORD *)(v78 + 88) = v81;
            LODWORD(v81) = v246;
            v246 = 0;
            *(_DWORD *)(v78 + 96) = v81;
            LODWORD(v81) = v247;
            v247 = 0;
            *(_DWORD *)(v78 + 100) = v81;
            ++HIDWORD(v277);
          }
          std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v74);
          if (!--v69)
          {
            v82 = v276;
            v84 = v277;
            v83 = HIDWORD(v277);
            LOBYTE(v17) = v210;
            goto LABEL_68;
          }
        }
        LOBYTE(v253) = 0;
        v255 = 0;
        std::__optional_destruct_base<WebCore::IDBCursorRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v72);
        LOBYTE(v17) = v210;
LABEL_71:
        WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v276, v86);
        goto LABEL_72;
      }
      v83 = 0;
      v84 = 0;
      v82 = 0;
LABEL_68:
      v276 = 0;
      v253 = v82;
      LODWORD(v277) = 0;
      LODWORD(v254) = v84;
    }
    HIDWORD(v277) = 0;
    HIDWORD(v254) = v83;
    v255 = 1;
    v85 = (WTF::StringImpl *)WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v276, v68);
    goto LABEL_73;
  }
  LOBYTE(v253) = 0;
  v255 = 0;
LABEL_72:
  v87 = *v2;
  v88 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v85 = (WTF::StringImpl *)v2[3];
  if (v85 && v88)
    v85 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v85 + 16))(v85, v87);
LABEL_73:
  v89 = v2[1];
  v90 = (char *)*v2;
  v91 = v2[2] - *v2;
  if (v89 <= v91)
  {
    v135 = 0;
    v136 = 0;
    *v2 = 0;
    v2[1] = 0;
    v137 = v2[3];
    if (v137)
    {
      if (v89)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v137 + 16))(v137);
        v136 = *v2;
        v135 = v2[1];
      }
      else
      {
        v135 = 0;
        v136 = 0;
      }
    }
    goto LABEL_143;
  }
  v92 = a2;
  v93 = &v90[v91];
  v2[2] = (uint64_t)(v93 + 1);
  if (!v90)
  {
    v135 = v89;
    v136 = 0;
LABEL_143:
    v92 = a2;
    v89 = 0;
    v90 = 0;
    *v2 = 0;
    v2[1] = 0;
    v138 = v2[3];
    if (v138)
    {
      if (v135)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v136, v135);
        v90 = (char *)*v2;
        v89 = v2[1];
      }
      else
      {
        v89 = 0;
        v90 = 0;
      }
    }
    goto LABEL_144;
  }
  v94 = v17;
  a2 = v9;
  v95 = *v93;
  if (v95 <= 1)
  {
    v96 = 0;
    LOBYTE(v17) = v95 != 0;
    goto LABEL_77;
  }
LABEL_144:
  *v2 = 0;
  v2[1] = 0;
  v139 = v2[3];
  if (v139)
  {
    if (v89)
    {
      v94 = v17;
      a2 = v9;
      v85 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v139 + 16))(v139, v90);
      if (*v2)
      {
        LOBYTE(v17) = 0;
        v96 = 1;
LABEL_77:
        if (!v275 || !v270 || !v265 || !v260 || !v255 || v96)
          goto LABEL_248;
        v97 = v261;
        v261 = 0uLL;
        v234 = v97;
        *(_QWORD *)&v97 = v262;
        v262 = 0;
        v235 = v97;
        v98 = v263;
        v263 = 0;
        v236 = v98;
        *(_QWORD *)&v97 = v264;
        v264 = 0;
        v238[0] = v271;
        v237 = (WTF::StringImpl *)v97;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v239, (uint64_t)&v272);
        LOBYTE(v242) = (_BYTE)v266;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v243, (uint64_t)&v267);
        v248[0] = 0;
        v250 = 0;
        if (v259)
        {
          v249 = -1;
          v99 = v258;
          if (v258 != -1)
          {
            ((void (*)(WTF **, _BYTE *, uint64_t **))off_1E34AD870[v258])(&v276, v248, &v256);
            v249 = v99;
          }
          v250 = 1;
        }
        v251[0] = v253;
        v100 = v254;
        v253 = 0;
        v254 = 0;
        v251[1] = v100;
        v252 = v17;
        WebCore::IDBGetResult::IDBGetResult((uint64_t)v227, (uint64_t *)&v234);
        v233 = 1;
        WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v251, v101);
        LODWORD(v9) = a2;
        a2 = v92;
        LOBYTE(v17) = v94;
        if (v250)
        {
          if (v249 != -1)
            ((void (*)(WTF **, _BYTE *))off_1E34AD860[v249])(&v276, v248);
          v249 = -1;
        }
        if (v246 != -1)
          ((void (*)(WTF **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v246])(&v276, &v243);
        v246 = -1;
        if ((_DWORD)v241 != -1)
          ((void (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v241])(&v276, &v239);
        LODWORD(v241) = -1;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v236, v102);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v234 + 8, v103);
        v104 = v234;
        *(_QWORD *)&v234 = 0;
        if (v104)
          WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref(v104, v90);
        goto LABEL_97;
      }
    }
  }
  v227[0] = 0;
  v233 = 0;
  a2 = v92;
LABEL_97:
  if (v255)
    WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v253, v90);
  if (v260 && v259 && v258 != -1)
    ((void (*)(__int128 *, uint64_t **))off_1E34AD860[v258])(&v234, &v256);
  std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v261, v90);
  if (v270 && v269 != -1)
    ((void (*)(__int128 *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v269])(&v234, &v267);
  if (v275 && v274 != -1)
    ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v274])(&v234, &v272);
  if (v233
    || (v140 = (void *)*v2, v141 = v2[1], *v2 = 0, v2[1] = 0, (v142 = v2[3]) != 0)
    && v141
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v142 + 16))(v142, v140), v233))
  {
    v105 = WebCore::IDBGetResult::operator new((WebCore::IDBGetResult *)0xA0);
    WebCore::IDBGetResult::IDBGetResult(v105, (uint64_t *)v227);
    v214 = (uint64_t *)v105;
    v215 = 1;
    std::__optional_destruct_base<WebCore::IDBGetResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v106);
    goto LABEL_111;
  }
  LOBYTE(v214) = 0;
  v215 = 0;
  std::__optional_destruct_base<WebCore::IDBGetResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v140);
LABEL_148:
  v143 = *v2;
  v144 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v145 = v2[3];
  if (v145 && v144)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, v143);
LABEL_111:
  v107 = v2[1];
  v108 = *v2;
  v109 = v2[2] - *v2;
  if (v107 <= v109)
  {
    v130 = 0;
    v131 = 0;
    *v2 = 0;
    v2[1] = 0;
    v132 = v2[3];
    if (v132)
    {
      if (v107)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
        v131 = *v2;
        v130 = v2[1];
      }
      else
      {
        v130 = 0;
        v131 = 0;
      }
    }
    goto LABEL_139;
  }
  v110 = (unsigned __int8 *)(v108 + v109);
  v2[2] = (uint64_t)(v110 + 1);
  if (!v108)
  {
    v130 = v107;
    v131 = 0;
LABEL_139:
    v107 = 0;
    v108 = 0;
    *v2 = 0;
    v2[1] = 0;
    v133 = v2[3];
    if (v133)
    {
      if (v130)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v131, v130);
        v108 = *v2;
        v107 = v2[1];
      }
      else
      {
        v107 = 0;
        v108 = 0;
      }
    }
    goto LABEL_140;
  }
  v111 = *v110;
  if (v111 >= 2)
  {
LABEL_140:
    *v2 = 0;
    v2[1] = 0;
    v134 = v2[3];
    if (v134 && v107)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v108);
    LOBYTE(v256) = 0;
    v257 = 0;
    goto LABEL_257;
  }
  if (!v111)
  {
    v256 = 0;
    v257 = 1;
    goto LABEL_201;
  }
  LOWORD(v92) = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v2);
  IPC::Decoder::decode<WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v271, v2);
  v112 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v113)
  {
    v114 = v112;
    v261 = 0uLL;
    if (v112 < 0x6666)
    {
      if (v112)
      {
        v115 = 40 * v112;
        v116 = WTF::fastMalloc((WTF *)(40 * v112));
        DWORD2(v261) = v115 / 0x28;
        *(_QWORD *)&v261 = v116;
        do
        {
          IPC::Decoder::decode<WebCore::IDBValue>(v2, (uint64_t)&v234);
          if (!v238[0])
            goto LABEL_179;
          if (HIDWORD(v261) == DWORD2(v261))
          {
            WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBValue>((uint64_t)&v261, (unint64_t)&v234);
          }
          else
          {
            v118 = v261 + 40 * HIDWORD(v261);
            v119 = v234;
            *(_QWORD *)&v234 = 0;
            *(_QWORD *)(v118 + 8) = 0;
            *(_QWORD *)(v118 + 16) = 0;
            *(_QWORD *)v118 = v119;
            v120 = *((_QWORD *)&v234 + 1);
            *((_QWORD *)&v234 + 1) = 0;
            *(_QWORD *)(v118 + 8) = v120;
            LODWORD(v120) = v235;
            LODWORD(v235) = 0;
            *(_DWORD *)(v118 + 16) = v120;
            LODWORD(v120) = HIDWORD(v235);
            HIDWORD(v235) = 0;
            *(_DWORD *)(v118 + 20) = v120;
            *(_QWORD *)(v118 + 24) = 0;
            *(_QWORD *)(v118 + 32) = 0;
            v121 = v236;
            v236 = 0;
            *(_QWORD *)(v118 + 24) = v121;
            LODWORD(v121) = (_DWORD)v237;
            LODWORD(v237) = 0;
            *(_DWORD *)(v118 + 32) = (_DWORD)v121;
            LODWORD(v121) = HIDWORD(v237);
            HIDWORD(v237) = 0;
            *(_DWORD *)(v118 + 36) = (_DWORD)v121;
            ++HIDWORD(v261);
          }
          std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v117);
          --v114;
        }
        while (v114);
        v122 = (WTF *)v261;
        v124 = DWORD2(v261);
        v123 = HIDWORD(v261);
      }
      else
      {
        v123 = 0;
        v124 = 0;
        v122 = 0;
      }
      *(_QWORD *)&v261 = 0;
      v266 = v122;
      goto LABEL_129;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::IDBValue>(v2, (uint64_t)&v234);
      if (!v238[0])
        break;
      if (HIDWORD(v261) == DWORD2(v261))
      {
        WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IDBValue>((uint64_t)&v261, (unint64_t)&v234);
      }
      else
      {
        v161 = v261 + 40 * HIDWORD(v261);
        v162 = v234;
        *(_QWORD *)&v234 = 0;
        *(_QWORD *)(v161 + 8) = 0;
        *(_QWORD *)(v161 + 16) = 0;
        *(_QWORD *)v161 = v162;
        v163 = *((_QWORD *)&v234 + 1);
        *((_QWORD *)&v234 + 1) = 0;
        *(_QWORD *)(v161 + 8) = v163;
        LODWORD(v163) = v235;
        LODWORD(v235) = 0;
        *(_DWORD *)(v161 + 16) = v163;
        LODWORD(v163) = HIDWORD(v235);
        HIDWORD(v235) = 0;
        *(_DWORD *)(v161 + 20) = v163;
        *(_QWORD *)(v161 + 24) = 0;
        *(_QWORD *)(v161 + 32) = 0;
        v164 = v236;
        v236 = 0;
        *(_QWORD *)(v161 + 24) = v164;
        LODWORD(v164) = (_DWORD)v237;
        LODWORD(v237) = 0;
        *(_DWORD *)(v161 + 32) = (_DWORD)v164;
        LODWORD(v164) = HIDWORD(v237);
        HIDWORD(v237) = 0;
        *(_DWORD *)(v161 + 36) = (_DWORD)v164;
        ++HIDWORD(v261);
      }
      std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v117);
      if (!--v114)
      {
        v165 = HIDWORD(v261);
        v166 = (WTF *)v261;
        if (DWORD2(v261) <= HIDWORD(v261))
          goto LABEL_264;
        v167 = (WTF *)v261;
        if (!HIDWORD(v261))
          goto LABEL_175;
        if (HIDWORD(v261) < 0x6666667)
        {
          v168 = 40 * HIDWORD(v261);
          v169 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v261)));
          DWORD2(v261) = v168 / 0x28;
          *(_QWORD *)&v261 = v169;
          v167 = v166;
          if ((WTF *)v169 != v166)
          {
            WTF::VectorMover<false,WebCore::IDBValue>::move((uint64_t)v166, (char *)v166 + 40 * v165, v169);
            v167 = (WTF *)v261;
          }
LABEL_175:
          if (v166)
          {
            if (v167 == v166)
            {
              *(_QWORD *)&v261 = 0;
              DWORD2(v261) = 0;
            }
            WTF::fastFree(v166, v113);
            v166 = (WTF *)v261;
          }
          else
          {
            v166 = v167;
          }
LABEL_264:
          *(_QWORD *)&v261 = 0;
          v266 = v166;
          v124 = DWORD2(v261);
          v123 = HIDWORD(v261);
LABEL_129:
          *((_QWORD *)&v261 + 1) = 0;
          v267 = __PAIR64__(v123, v124);
          v268 = 1;
          WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v113);
          goto LABEL_181;
        }
LABEL_343:
        __break(0xC471u);
        JUMPOUT(0x196E38E9CLL);
      }
    }
LABEL_179:
    LOBYTE(v266) = 0;
    v268 = 0;
    std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v234, v117);
    WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v170);
  }
  else
  {
    LOBYTE(v266) = 0;
    v268 = 0;
  }
  v90 = (char *)*v2;
  v89 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v85 = (WTF::StringImpl *)v2[3];
  if (v85)
    goto LABEL_249;
  while (1)
  {
LABEL_181:
    v85 = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(&v261, v2);
    if (*v2)
    {
      if ((unsigned __int16)v92 <= 0xFFu || !v273 || !v268 || !(_BYTE)v264)
        goto LABEL_248;
      LOBYTE(v234) = v92 != 0;
      v171 = v271;
      v271 = 0;
      *((_QWORD *)&v234 + 1) = v171;
      v172 = v272;
      v272 = 0;
      v235 = v172;
      v173 = v266;
      v266 = 0;
      v236 = v173;
      v174 = v267;
      v267 = 0;
      v237 = (WTF::StringImpl *)v174;
      std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](v238, (uint64_t)&v261);
      v227[0] = v234;
      v175 = *((_QWORD *)&v234 + 1);
      *((_QWORD *)&v234 + 1) = 0;
      *(_QWORD *)&v227[8] = v175;
      v176 = v235;
      v235 = 0;
      *(_QWORD *)&v227[16] = v176;
      v177 = v236;
      v236 = 0;
      *(_QWORD *)&v227[24] = v177;
      v178 = v237;
      v237 = 0;
      v228 = v178;
      std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100](&v229, (uint64_t)v238);
      LOBYTE(v231) = 1;
      if ((_BYTE)v241)
      {
        if (v240 != -1)
          ((void (*)(WTF **, char *))off_1E34AD860[v240])(&v253, v238);
        v240 = -1;
      }
      WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v236, v179);
      WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v234 + 8, v180);
    }
    else
    {
      v227[0] = 0;
      LOBYTE(v231) = 0;
    }
    if ((_BYTE)v264 && (_BYTE)v263 && (_DWORD)v262 != -1)
      ((void (*)(__int128 *, __int128 *))off_1E34AD860[v262])(&v234, &v261);
    if (v268)
      WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v266, v90);
    if (v273)
      WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v271, v90);
    if ((_BYTE)v231
      || (v203 = (void *)*v2, v204 = v2[1], *v2 = 0, v2[1] = 0, (v205 = v2[3]) != 0)
      && v204
      && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v205 + 16))(v205, v203), (_BYTE)v231))
    {
      v181 = WebCore::IDBGetAllResult::operator new((WebCore::IDBGetAllResult *)0x48);
      *(_BYTE *)v181 = v227[0];
      *(_QWORD *)(v181 + 8) = 0;
      *(_QWORD *)(v181 + 16) = 0;
      v182 = *(_QWORD *)&v227[8];
      *(_QWORD *)&v227[8] = 0;
      *(_QWORD *)(v181 + 8) = v182;
      LODWORD(v182) = *(_DWORD *)&v227[16];
      *(_DWORD *)&v227[16] = 0;
      *(_DWORD *)(v181 + 16) = v182;
      LODWORD(v182) = *(_DWORD *)&v227[20];
      *(_DWORD *)&v227[20] = 0;
      *(_DWORD *)(v181 + 20) = v182;
      *(_QWORD *)(v181 + 24) = 0;
      *(_QWORD *)(v181 + 32) = 0;
      v183 = *(_QWORD *)&v227[24];
      *(_QWORD *)&v227[24] = 0;
      *(_QWORD *)(v181 + 24) = v183;
      LODWORD(v183) = (_DWORD)v228;
      LODWORD(v228) = 0;
      *(_DWORD *)(v181 + 32) = v183;
      LODWORD(v183) = HIDWORD(v228);
      HIDWORD(v228) = 0;
      *(_DWORD *)(v181 + 36) = v183;
      std::__optional_move_base<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v181 + 40), (uint64_t)&v229);
      v256 = (uint64_t *)v181;
      v257 = 1;
      std::__optional_destruct_base<WebCore::IDBGetAllResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v184);
    }
    else
    {
      LOBYTE(v256) = 0;
      v257 = 0;
      std::__optional_destruct_base<WebCore::IDBGetAllResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v227, v203);
LABEL_257:
      v206 = *v2;
      v207 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v208 = v2[3];
      if (v208 && v207)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v208 + 16))(v208, v206);
    }
LABEL_201:
    v185 = v2[1];
    v186 = *v2;
    v187 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v185 < v187 || v185 - v187 <= 7)
    {
      v200 = 0;
      v198 = 0;
      *v2 = 0;
      v2[1] = 0;
      v201 = v2[3];
      if (v201)
      {
        if (v185)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v201 + 16))(v201, v186, v185);
          v198 = (uint64_t *)*v2;
          v200 = v2[1];
        }
        else
        {
          v200 = 0;
          v198 = 0;
        }
      }
    }
    else
    {
      v188 = (uint64_t **)(v186 + v187);
      v2[2] = (uint64_t)(v188 + 1);
      if (v186)
      {
        LODWORD(v92) = 0;
        v2 = *v188;
        goto LABEL_205;
      }
      v200 = v185;
      v198 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v202 = v2[3];
    if (!v202)
      break;
    if (!v200)
      break;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v202 + 16))(v202, v198);
    if (!*v2)
      break;
    v2 = 0;
    LODWORD(v92) = 1;
LABEL_205:
    v85 = (WTF::StringImpl *)WebCore::IDBResultData::IDBResultData((WebCore::IDBResultData *)v227);
    if (v9 > 0xFF)
    {
      v227[0] = v9;
      if (v226)
      {
        *(_OWORD *)&v227[8] = v225;
        if (v224)
        {
          *(_WORD *)&v227[24] = v222;
          v189 = v223;
          v223 = 0;
          v85 = v228;
          v228 = v189;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              v85 = (WTF::StringImpl *)WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v90);
            else
              *(_DWORD *)v85 -= 2;
          }
          if (!v213)
          {
            *(_QWORD *)&v229 = v212 | v17;
            BYTE8(v229) = v211;
            if (v221)
            {
              v190 = v220;
              v220 = 0;
              v90 = (char *)v230;
              *(_QWORD *)&v230 = v190;
              if (v90)
                std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v230, (bmalloc::api *)v90);
              if (v219)
              {
                v191 = v218;
                v218 = 0;
                v90 = (char *)*((_QWORD *)&v230 + 1);
                *((_QWORD *)&v230 + 1) = v191;
                if (v90)
                  std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)&v230 + 8, v90);
                if (v217)
                {
                  v192 = v216;
                  v216 = 0;
                  v85 = (WTF::StringImpl *)std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100]((unsigned int **)&v231, v192);
                  if (v215)
                  {
                    v193 = v214;
                    v214 = 0;
                    v90 = (char *)*((_QWORD *)&v231 + 1);
                    *((_QWORD *)&v231 + 1) = v193;
                    if (v90)
                      std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)&v231 + 8, (uint64_t *)v90);
                    if (v257)
                    {
                      v194 = v256;
                      v256 = 0;
                      v90 = (char *)v232[0];
                      v232[0] = v194;
                      if (v90)
                        v85 = (WTF::StringImpl *)std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((uint64_t)v232, (uint64_t)v90);
                      if (!(_DWORD)v92)
                      {
                        *(_QWORD *)(a2 + 16) = *(_QWORD *)&v227[16];
                        *(_WORD *)(a2 + 24) = *(_WORD *)&v227[24];
                        v195 = v232[0];
                        *(_QWORD *)(a2 + 32) = v228;
                        v232[0] = 0;
                        v232[1] = v2;
                        *(_OWORD *)a2 = *(_OWORD *)v227;
                        *(_OWORD *)(a2 + 40) = v229;
                        v196 = v230;
                        v230 = 0u;
                        *(_OWORD *)(a2 + 56) = v196;
                        v197 = v231;
                        v231 = 0u;
                        *(_OWORD *)(a2 + 72) = v197;
                        v228 = 0;
                        *(_QWORD *)(a2 + 88) = v195;
                        *(_QWORD *)(a2 + 96) = v2;
                        *(_BYTE *)(a2 + 104) = 1;
                        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v227);
                        goto LABEL_228;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_248:
    __break(1u);
LABEL_249:
    if (v89)
      (*(void (**)(WTF::StringImpl *, char *))(*(_QWORD *)v85 + 16))(v85, v90);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 104) = 0;
LABEL_228:
  if (v257)
  {
    v198 = v256;
    v256 = 0;
    if (v198)
      std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((uint64_t)&v256, (uint64_t)v198);
  }
  if (v215)
  {
    v198 = v214;
    v214 = 0;
    if (v198)
      std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)&v214, v198);
  }
  if (v217)
    std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100](&v216, 0);
  if (v219)
  {
    v198 = v218;
    v218 = 0;
    if (v198)
      std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)&v218, v198);
  }
  if (v221)
  {
    v198 = (uint64_t *)v220;
    v220 = 0;
    if (v198)
      std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v220, (bmalloc::api *)v198);
  }
  if (v224)
  {
    v199 = v223;
    v223 = 0;
    if (v199)
    {
      if (*(_DWORD *)v199 == 2)
        WTF::StringImpl::destroy(v199, (WTF::StringImpl *)v198);
      else
        *(_DWORD *)v199 -= 2;
    }
  }
}

void sub_196E38EA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, unsigned int *a16, __int16 a17, uint64_t a18, char a19, bmalloc::api *a20,char a21,uint64_t a22,WTF::StringImpl *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t *v29;
  WTF::StringImpl *v30;

  std::__optional_destruct_base<WebCore::IDBGetAllResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, a2);
  if (a15)
  {
    v29 = (uint64_t *)a14;
    a14 = 0;
    if (v29)
      std::default_delete<WebCore::IDBGetResult>::operator()[abi:sn180100]((uint64_t)&a14, v29);
  }
  if ((_BYTE)a17)
    std::unique_ptr<WebCore::IDBKeyData>::reset[abi:sn180100](&a16, 0);
  if (a19)
  {
    v29 = (uint64_t *)a18;
    a18 = 0;
    if (v29)
      std::default_delete<WebCore::IDBTransactionInfo>::operator()[abi:sn180100]((uint64_t)&a18, v29);
  }
  if (a21)
  {
    v29 = (uint64_t *)a20;
    a20 = 0;
    if (v29)
      std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&a20, (bmalloc::api *)v29);
  }
  if (a24)
  {
    v30 = a23;
    a23 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::IDBError>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IDBError,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IDBKeyData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  _BYTE v5[8];
  _BYTE v6[16];
  int v7;
  _BYTE v8[16];
  int v9;
  char v10;
  char v11;

  result = (uint64_t)IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    v5[0] = 0;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v8);
    *a2 = 0;
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v6);
    a2[32] = 1;
    if (v7 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v7])(&v11, v6);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  if (v10)
  {
    if (v9 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v9])(v5, v8);
  }
  return result;
}

void sub_196E394E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, int a17, int a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a13 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a13])(v20 - 17, v19);
  if (a19)
  {
    if (a17 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[a17])(&a10, &a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E395A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t *v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl **v77;
  WTF::StringImpl **v78;
  WTF::StringImpl **v79;
  WTF::StringImpl **v80;
  WTF::StringImpl **v81;
  WTF::StringImpl **v82;
  WTF::StringImpl **v83;
  WTF::StringImpl **v84;
  WTF::StringImpl **v85;
  WTF::StringImpl **v86;
  WTF::StringImpl **v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  WTF::StringImpl **v150;
  WTF::StringImpl **v151;
  WTF::StringImpl **v152;
  WTF::StringImpl **v153;
  WTF::StringImpl **v154;
  WTF::StringImpl **v155;
  _BYTE *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  char v164;
  unsigned int v165;
  char v166;
  unsigned int v167;
  char v168;
  unint64_t v169;
  unsigned int v170;
  char v171;
  WTF::StringImpl **v172;
  unsigned int v173;
  WTF::StringImpl **v174;
  uint64_t v175;
  char v176;
  unint64_t v177;
  char v178;
  __int128 v179;
  _OWORD v180[2];
  __int128 v181;
  _OWORD v182[5];
  unint64_t v183;
  uint64_t v184;
  WTF::StringImpl **v185;
  unsigned __int8 v186;
  WTF::StringImpl **v187;
  unsigned __int8 v188;
  WTF::StringImpl **v189;
  unsigned __int8 v190;
  WTF::StringImpl **v191;
  unsigned __int8 v192;
  WTF::StringImpl **v193;
  unsigned __int8 v194;
  WTF::StringImpl **v195;
  unsigned __int8 v196;
  WTF::StringImpl **v197;
  unsigned __int8 v198;
  WTF::StringImpl **v199;
  unsigned __int8 v200;
  WTF::StringImpl **v201;
  unsigned __int8 v202;
  WTF::StringImpl **v203;
  unsigned __int8 v204;
  WTF::StringImpl **v205;
  unsigned __int8 v206;
  WTF::StringImpl **v207;
  unsigned __int8 v208;
  WTF::StringImpl **v209;
  unsigned __int8 v210;
  WTF::StringImpl **v211;
  unsigned __int8 v212;

  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v211);
  v4 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v6 = v5;
  v7 = a1[1];
  v8 = *a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    v91 = 0;
    v92 = 0;
    *a1 = 0;
    a1[1] = 0;
    v93 = a1[3];
    if (v93)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
        v92 = *a1;
        v91 = a1[1];
      }
      else
      {
        v91 = 0;
        v92 = 0;
      }
    }
    goto LABEL_142;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v91 = v7;
    v92 = 0;
LABEL_142:
    *a1 = 0;
    a1[1] = 0;
    v94 = a1[3];
    if (v94 && v91)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, v92, v91);
      v11 = 0;
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v11 = 0;
    }
    goto LABEL_144;
  }
  v11 = *v10;
  if (v11 < 2)
  {
    v12 = 0;
    v13 = 1;
    goto LABEL_5;
  }
LABEL_144:
  *a1 = 0;
  a1[1] = 0;
  v95 = a1[3];
  if (v95 && v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v8);
  v13 = 0;
  v12 = 1;
LABEL_5:
  if (v11)
    v14 = v13;
  else
    v14 = 0;
  v15 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v17 = v16;
  v18 = a1[1];
  v19 = *a1;
  v20 = a1[2] - *a1;
  v172 = v17;
  if (v18 <= v20)
  {
    v96 = 0;
    v97 = 0;
    *a1 = 0;
    a1[1] = 0;
    v98 = a1[3];
    if (v98)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
        v97 = *a1;
        v96 = a1[1];
      }
      else
      {
        v96 = 0;
        v97 = 0;
      }
    }
    goto LABEL_147;
  }
  v21 = (unsigned __int8 *)(v19 + v20);
  a1[2] = (uint64_t)(v21 + 1);
  if (!v19)
  {
    v96 = v18;
    v97 = 0;
LABEL_147:
    *a1 = 0;
    a1[1] = 0;
    v99 = a1[3];
    if (v99 && v96)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v97, v96);
      v22 = 0;
      v19 = *a1;
      v18 = a1[1];
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v22 = 0;
    }
    goto LABEL_149;
  }
  v22 = *v21;
  if (v22 < 2)
  {
    v170 = 0;
    v23 = 1;
    goto LABEL_12;
  }
LABEL_149:
  *a1 = 0;
  a1[1] = 0;
  v100 = a1[3];
  if (v100 && v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v19);
  v23 = 0;
  v170 = 1;
LABEL_12:
  if (v22)
    v24 = v23;
  else
    v24 = 0;
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v209);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v207);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v205);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v203);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v201);
  v25 = a1[1];
  v26 = *a1;
  v27 = a1[2] - *a1;
  v168 = v24;
  if (v25 <= v27)
  {
    v101 = 0;
    v102 = 0;
    *a1 = 0;
    a1[1] = 0;
    v103 = a1[3];
    if (v103)
    {
      if (v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
        v102 = *a1;
        v101 = a1[1];
      }
      else
      {
        v101 = 0;
        v102 = 0;
      }
    }
    goto LABEL_152;
  }
  v28 = (unsigned __int8 *)(v26 + v27);
  a1[2] = (uint64_t)(v28 + 1);
  if (!v26)
  {
    v101 = v25;
    v102 = 0;
LABEL_152:
    *a1 = 0;
    a1[1] = 0;
    v104 = a1[3];
    if (v104 && v101)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v102, v101);
      v29 = 0;
      v26 = *a1;
      v25 = a1[1];
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v29 = 0;
    }
    goto LABEL_154;
  }
  v29 = *v28;
  if (v29 < 2)
  {
    v167 = 0;
    v30 = 1;
    goto LABEL_19;
  }
LABEL_154:
  *a1 = 0;
  a1[1] = 0;
  v105 = a1[3];
  if (v105 && v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v26);
  v30 = 0;
  v167 = 1;
LABEL_19:
  if (v29)
    v31 = v30;
  else
    v31 = 0;
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v199);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v197);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v195);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v193);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v191);
  v32 = a1[1];
  v33 = *a1;
  v34 = a1[2] - *a1;
  v166 = v31;
  if (v32 <= v34)
  {
    v106 = 0;
    v107 = 0;
    *a1 = 0;
    a1[1] = 0;
    v108 = a1[3];
    if (v108)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
        v107 = *a1;
        v106 = a1[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
    }
    goto LABEL_157;
  }
  v35 = (unsigned __int8 *)(v33 + v34);
  v36 = v33 + v34 + 1;
  a1[2] = v36;
  if (!v33)
  {
    v106 = v32;
    v107 = 0;
LABEL_157:
    *a1 = 0;
    a1[1] = 0;
    v109 = a1[3];
    if (v109 && v106)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v107, v106);
      v37 = 0;
      v33 = *a1;
      v32 = a1[1];
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v37 = 0;
    }
    goto LABEL_159;
  }
  v37 = *v35;
  if (v37 < 2)
  {
    v165 = 0;
    v38 = 1;
    goto LABEL_26;
  }
LABEL_159:
  *a1 = 0;
  a1[1] = 0;
  v110 = a1[3];
  if (!v110 || !v32)
  {
    v111 = 0;
    v33 = 0;
    v164 = 0;
    v165 = 1;
LABEL_161:
    *a1 = 0;
    a1[1] = 0;
    v112 = a1[3];
    if (v112 && v111)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v33, v111);
      v41 = 0;
      v33 = *a1;
      v32 = a1[1];
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v41 = 0;
    }
    goto LABEL_163;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v33);
  v38 = 0;
  v33 = *a1;
  v32 = a1[1];
  v165 = 1;
  v36 = a1[2];
LABEL_26:
  if (!v37)
    v38 = 0;
  v164 = v38;
  v39 = v36 - v33;
  if (v32 <= v39)
  {
    v111 = 0;
    v141 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v141 && v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 16))(v141);
      v33 = *a1;
      v111 = a1[1];
    }
    else
    {
      v33 = 0;
    }
    goto LABEL_161;
  }
  v40 = (unsigned __int8 *)(v33 + v39);
  a1[2] = (uint64_t)(v40 + 1);
  if (!v33)
  {
    v111 = v32;
    goto LABEL_161;
  }
  v41 = *v40;
  if (v41 < 2)
  {
    v163 = 0;
    v42 = 1;
    goto LABEL_32;
  }
LABEL_163:
  *a1 = 0;
  a1[1] = 0;
  v113 = a1[3];
  if (v113)
  {
    if (v32)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, v33);
      v42 = 0;
      v33 = *a1;
      v32 = a1[1];
      goto LABEL_166;
    }
    v33 = 0;
  }
  else
  {
    v33 = 0;
    v32 = 0;
  }
  v42 = 0;
LABEL_166:
  v163 = 1;
LABEL_32:
  if (v41)
    LODWORD(v43) = v42;
  else
    LODWORD(v43) = 0;
  v44 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v33;
  if (v32 < v44 || v32 - v44 <= 3)
  {
    v114 = 0;
    v115 = 0;
    *a1 = 0;
    a1[1] = 0;
    v116 = a1[3];
    if (v116)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v116 + 16))(v116);
        v115 = *a1;
        v114 = a1[1];
      }
      else
      {
        v114 = 0;
        v115 = 0;
      }
    }
  }
  else
  {
    v45 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v45 + 1);
    if (v33)
    {
      v162 = 0;
      v46 = *v45;
      v47 = v46 & 0xFFFFFF00;
      v48 = v46;
      goto LABEL_39;
    }
    v114 = v32;
    v115 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v117 = a1[3];
  if (v117 && v114)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v115, v114);
    v47 = 0;
    v48 = 0;
    v33 = *a1;
    v32 = a1[1];
  }
  else
  {
    v33 = 0;
    v32 = 0;
    v47 = 0;
    v48 = 0;
  }
  v162 = 1;
LABEL_39:
  v49 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v33;
  if (v32 < v49 || v32 - v49 <= 3)
  {
    v52 = 0;
    v118 = 0;
    *a1 = 0;
    a1[1] = 0;
    v119 = a1[3];
    if (v119)
    {
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
        v118 = *a1;
        v52 = a1[1];
      }
      else
      {
        v52 = 0;
        v118 = 0;
      }
    }
LABEL_172:
    *a1 = 0;
    a1[1] = 0;
    v120 = a1[3];
    if (v120)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v120 + 16))(v120, v118, v52);
        v160 = 0;
        v33 = *a1;
        v32 = a1[1];
        v161 = 1;
        goto LABEL_43;
      }
      v32 = 0;
    }
    else
    {
      v32 = 0;
      v52 = 0;
    }
    v160 = 0;
    v161 = 1;
    goto LABEL_44;
  }
  v50 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (uint64_t)(v50 + 1);
  if (!v33)
  {
    v52 = v32;
    v118 = 0;
    goto LABEL_172;
  }
  v51 = *v50;
  HIDWORD(v160) = v51 & 0xFFFFFF00;
  v161 = 0;
  LODWORD(v160) = v51;
LABEL_43:
  v52 = v33;
LABEL_44:
  v53 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v52;
  if (v32 < v53 || v32 - v53 <= 3)
  {
    v55 = 0;
    *a1 = 0;
    a1[1] = 0;
    v121 = a1[3];
    if (v121)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v52);
        v55 = a1[1];
      }
      else
      {
        v55 = 0;
      }
    }
  }
  else
  {
    v54 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v54 + 1);
    v55 = v32;
    if (v52)
    {
      v158 = *v54 & 0xFFFFFF00;
      v159 = 0;
      v157 = *v54;
      goto LABEL_48;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v122 = a1[3];
  if (v122 && v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 16))(v122);
  v157 = 0;
  v158 = 0;
  v159 = 1;
LABEL_48:
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v189);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v187);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v185);
  v56 = (WTF::StringImpl **)IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v174);
  v58 = (WTF::StringImpl **)a1[1];
  v59 = (WTF::StringImpl *)*a1;
  v60 = a1[2] - *a1;
  v156 = a2;
  v169 = v15;
  v171 = v14;
  v173 = v12;
  if ((unint64_t)v58 <= v60)
  {
    v62 = 0;
    v63 = 0;
    *a1 = 0;
    a1[1] = 0;
    v123 = a1[3];
    if (v123)
    {
      if (v58)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 16))(v123);
        v63 = *a1;
        v62 = a1[1];
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
    }
LABEL_179:
    v58 = 0;
    v59 = 0;
    *a1 = 0;
    a1[1] = 0;
    v56 = (WTF::StringImpl **)a1[3];
    if (v56)
      goto LABEL_246;
    goto LABEL_180;
  }
  v61 = (unsigned __int8 *)v59 + v60;
  a1[2] = (uint64_t)(v61 + 1);
  if (!v59)
  {
    v62 = (unint64_t)v58;
    v63 = 0;
    goto LABEL_179;
  }
  v62 = *v61;
  if (v62 >= 2)
    goto LABEL_180;
  v63 = v175;
  if (!(_BYTE)v175)
    goto LABEL_245;
  v64 = v4;
  v65 = 0;
  v57 = (_DWORD)v62 != 0;
  v56 = v174;
  while (1)
  {
    v66 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v59;
    if ((unint64_t)v58 < v66 || (unint64_t)v58 - v66 <= 7)
    {
      v126 = 0;
      v127 = 0;
      *a1 = 0;
      a1[1] = 0;
      v128 = a1[3];
      if (v128)
      {
        v139 = v57;
        v148 = v65;
        v154 = v56;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 16))(v128);
          v127 = *a1;
          v126 = a1[1];
        }
        else
        {
          v126 = 0;
          v127 = 0;
        }
        v56 = v154;
        v65 = v148;
        v57 = v139;
      }
      goto LABEL_188;
    }
    v67 = (unint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v67 + 1);
    if (!v59)
    {
      v126 = (uint64_t)v58;
      v127 = 0;
LABEL_188:
      *a1 = 0;
      a1[1] = 0;
      v129 = a1[3];
      if (v129)
      {
        v138 = v57;
        v146 = v65;
        v152 = v56;
        if (v126)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v127, v126);
          v69 = 0;
          v4 = 0;
          v59 = (WTF::StringImpl *)*a1;
          v58 = (WTF::StringImpl **)a1[1];
        }
        else
        {
          v58 = 0;
          v59 = 0;
          v69 = 0;
          v4 = 0;
        }
        v56 = v152;
        v65 = v146;
        v57 = v138;
      }
      else
      {
        v58 = 0;
        v59 = 0;
        v69 = 0;
        v4 = 0;
      }
LABEL_190:
      *a1 = 0;
      a1[1] = 0;
      v130 = a1[3];
      if (v130)
      {
        v137 = v57;
        v144 = v65;
        v150 = v56;
        if (v58)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v130 + 16))(v130, v59);
          v59 = (WTF::StringImpl *)*a1;
          v58 = (WTF::StringImpl **)a1[1];
        }
        else
        {
          v59 = 0;
        }
        v56 = v150;
        v65 = v144;
        v57 = v137;
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
      goto LABEL_60;
    }
    v68 = *v67;
    v4 = v68 < 0x20;
    if (v68 >= 0x20)
      v69 = 0;
    else
      v69 = v68;
    if (v68 >= 0x20)
      goto LABEL_190;
LABEL_60:
    v70 = v48;
    v71 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v59;
    if ((unint64_t)v58 < v71 || (unint64_t)v58 - v71 <= 7)
    {
      v48 = v47;
      v131 = 0;
      v132 = 0;
      *a1 = 0;
      a1[1] = 0;
      v133 = a1[3];
      if (v133)
      {
        v140 = v57;
        v149 = v65;
        v155 = v56;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v133 + 16))(v133);
          v132 = *a1;
          v131 = a1[1];
        }
        else
        {
          v131 = 0;
          v132 = 0;
        }
        v56 = v155;
        v65 = v149;
        LODWORD(v57) = v140;
      }
      goto LABEL_193;
    }
    v48 = v47;
    v47 = v43;
    v72 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v72 + 1);
    if (!v59)
    {
      v131 = (uint64_t)v58;
      v132 = 0;
LABEL_193:
      v47 = v43;
      *a1 = 0;
      a1[1] = 0;
      v134 = a1[3];
      if (v134)
      {
        v143 = v57;
        v147 = v65;
        v153 = v56;
        if (v131)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v132, v131);
          v43 = 0;
          v74 = 0;
          v59 = (WTF::StringImpl *)*a1;
          v58 = (WTF::StringImpl **)a1[1];
        }
        else
        {
          v58 = 0;
          v59 = 0;
          v43 = 0;
          v74 = 0;
        }
        v56 = v153;
        LODWORD(v57) = v143;
        v65 = v147;
      }
      else
      {
        v58 = 0;
        v59 = 0;
        v43 = 0;
        v74 = 0;
      }
      goto LABEL_195;
    }
    v43 = *v72;
    v73 = (unint64_t)*v72 >= 0x80;
    v74 = (unint64_t)*v72 < 0x80;
    if ((unint64_t)*v72 >= 0x80)
      v75 = 0;
    else
      v75 = *v72;
    if (!v73)
    {
      v74 = 1;
      goto LABEL_68;
    }
    v43 = v75;
LABEL_195:
    *a1 = 0;
    a1[1] = 0;
    v135 = a1[3];
    if (!v135)
      break;
    if (!v58)
      break;
    v142 = v57;
    v145 = v65;
    v151 = v56;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v135 + 16))(v135, v59);
    v56 = v151;
    v57 = v142;
    v65 = v145;
    if (!*a1)
      break;
LABEL_68:
    v174 = 0;
    v175 = 0;
    v176 = 0;
    v63 = 0xBFF0000000000000;
    v177 = 0xBFF0000000000000;
    v178 = 0;
    v179 = 0u;
    memset(v180, 0, 25);
    v181 = 0u;
    memset(v182, 0, 26);
    memset((char *)&v182[1] + 12, 0, 32);
    *(_OWORD *)((char *)&v182[3] + 9) = 0u;
    v183 = 0;
    v184 = 0;
    v62 = v212;
    if (v212)
    {
      v62 = (unint64_t)v211;
      v211 = 0;
      v174 = (WTF::StringImpl **)v62;
      if (v6)
      {
        v175 = v64;
        v62 = v173;
        if (!v173)
        {
          v176 = v171;
          v62 = (unint64_t)v172;
          if ((_BYTE)v172)
          {
            v177 = v169;
            v62 = v170;
            if (!v170)
            {
              v178 = v168;
              v62 = v210;
              if (v210)
              {
                v76 = v209;
                v209 = 0;
                *(_QWORD *)&v179 = v76;
                v62 = v208;
                if (v208)
                {
                  v77 = v207;
                  v207 = 0;
                  *((_QWORD *)&v179 + 1) = v77;
                  v62 = v206;
                  if (v206)
                  {
                    v78 = v205;
                    v205 = 0;
                    *(_QWORD *)&v180[0] = v78;
                    v62 = v204;
                    if (v204)
                    {
                      v79 = v203;
                      v203 = 0;
                      *((_QWORD *)&v180[0] + 1) = v79;
                      v62 = v202;
                      if (v202)
                      {
                        v80 = v201;
                        v201 = 0;
                        *(_QWORD *)&v180[1] = v80;
                        v62 = v167;
                        if (!v167)
                        {
                          BYTE8(v180[1]) = v166;
                          v62 = v200;
                          if (v200)
                          {
                            v81 = v199;
                            v199 = 0;
                            *(_QWORD *)&v181 = v81;
                            v62 = v198;
                            if (v198)
                            {
                              v82 = v197;
                              v197 = 0;
                              *((_QWORD *)&v181 + 1) = v82;
                              v62 = v196;
                              if (v196)
                              {
                                v83 = v195;
                                v195 = 0;
                                *(_QWORD *)&v182[0] = v83;
                                v62 = v194;
                                if (v194)
                                {
                                  v84 = v193;
                                  v193 = 0;
                                  *((_QWORD *)&v182[0] + 1) = v84;
                                  v62 = v192;
                                  if (v192)
                                  {
                                    v85 = v191;
                                    v191 = 0;
                                    *(_QWORD *)&v182[1] = v85;
                                    v62 = v165;
                                    if (!v165)
                                    {
                                      BYTE8(v182[1]) = v164;
                                      v62 = v163;
                                      if (!v163)
                                      {
                                        BYTE9(v182[1]) = v47;
                                        v62 = v162;
                                        if (!v162)
                                        {
                                          HIDWORD(v182[1]) = v70 | v48;
                                          v62 = v161;
                                          if (!v161)
                                          {
                                            v63 = v160;
                                            LODWORD(v182[2]) = v160 | HIDWORD(v160);
                                            v62 = v159;
                                            if (!v159)
                                            {
                                              v63 = v157;
                                              DWORD1(v182[2]) = v157 | v158;
                                              v62 = v190;
                                              if (v190)
                                              {
                                                v86 = v189;
                                                v189 = 0;
                                                *((_QWORD *)&v182[2] + 1) = v86;
                                                v62 = v188;
                                                if (v188)
                                                {
                                                  v87 = v187;
                                                  v187 = 0;
                                                  *(_QWORD *)&v182[3] = v87;
                                                  v62 = v186;
                                                  if (v186)
                                                  {
                                                    v62 = (unint64_t)v185;
                                                    v185 = 0;
                                                    *((_QWORD *)&v182[3] + 1) = v62;
                                                    if (!v65)
                                                    {
                                                      *(_QWORD *)&v182[4] = v56;
                                                      BYTE8(v182[4]) = v57;
                                                      if ((_BYTE)v4)
                                                      {
                                                        v183 = v69;
                                                        if (v74)
                                                        {
                                                          v184 = v43;
                                                          WebCore::ResourceLoadStatistics::ResourceLoadStatistics((uint64_t)v156, (uint64_t *)&v174);
                                                          *(_BYTE *)(v88 + 200) = 1;
                                                          WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)&v174, v89);
                                                          goto LABEL_96;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_245:
    while (1)
    {
      __break(1u);
LABEL_246:
      if (v62)
      {
        (*((void (**)(WTF::StringImpl **, unint64_t, unint64_t))*v56 + 2))(v56, v63, v62);
        v59 = (WTF::StringImpl *)*a1;
        v58 = (WTF::StringImpl **)a1[1];
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
LABEL_180:
      v124 = 0;
      *a1 = 0;
      a1[1] = 0;
      v125 = a1[3];
      if (!v125)
        break;
      if (!v58)
      {
        v124 = 0;
        break;
      }
      v56 = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v125 + 16))(v125, v59);
      v124 = *a1;
      if (!*a1)
        break;
      v62 = v175;
      if ((_BYTE)v175)
        v174 = 0;
    }
    if ((_BYTE)v175 && v174)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v174, v59);
      v124 = *a1;
    }
    v64 = v4;
    v58 = (WTF::StringImpl **)a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = (WTF::StringImpl **)a1[3];
    if (v56)
    {
      if (v58)
      {
        (*((void (**)(WTF::StringImpl **, uint64_t))*v56 + 2))(v56, v124);
        v56 = 0;
        v59 = (WTF::StringImpl *)*a1;
        v58 = (WTF::StringImpl **)a1[1];
      }
      else
      {
        v59 = 0;
        v56 = 0;
      }
    }
    else
    {
      v58 = 0;
      v59 = 0;
    }
    v65 = 1;
  }
  *v156 = 0;
  v156[200] = 0;
  if (v56)
    v136 = v65;
  else
    v136 = 1;
  if ((v136 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v56, v59);
LABEL_96:
  if (v186 && v185)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v185, v59);
  if (v188 && v187)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v187, v59);
  if (v190 && v189)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v189, v59);
  if (v192 && v191)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v191, v59);
  if (v194 && v193)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v193, v59);
  if (v196 && v195)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v195, v59);
  if (v198 && v197)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v197, v59);
  if (v200 && v199)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v199, v59);
  if (v202 && v201)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v201, v59);
  if (v204 && v203)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v203, v59);
  if (v206 && v205)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v205, v59);
  if (v208 && v207)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v207, v59);
  if (v210 && v209)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v209, v59);
  if (v212)
  {
    v90 = (WTF::StringImpl *)v211;
    v211 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v59);
      else
        *(_DWORD *)v90 -= 2;
    }
  }
}

void sub_196E3A66C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,WTF::StringImpl **a55,char a56)
{
  uint64_t v56;
  WTF::StringImpl **v58;
  WTF::StringImpl **v59;
  WTF::StringImpl **v60;
  WTF::StringImpl **v61;
  WTF::StringImpl **v62;
  WTF::StringImpl **v63;
  WTF::StringImpl **v64;
  WTF::StringImpl **v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;

  if (a56 && a55)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a55, a2);
  if (*(_BYTE *)(v56 - 240))
  {
    v58 = *(WTF::StringImpl ***)(v56 - 248);
    if (v58)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v58, a2);
  }
  if (*(_BYTE *)(v56 - 224))
  {
    v59 = *(WTF::StringImpl ***)(v56 - 232);
    if (v59)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v59, a2);
  }
  if (*(_BYTE *)(v56 - 208))
  {
    v60 = *(WTF::StringImpl ***)(v56 - 216);
    if (v60)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v60, a2);
  }
  if (*(_BYTE *)(v56 - 192))
  {
    v61 = *(WTF::StringImpl ***)(v56 - 200);
    if (v61)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61, a2);
  }
  if (*(_BYTE *)(v56 - 176))
  {
    v62 = *(WTF::StringImpl ***)(v56 - 184);
    if (v62)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v62, a2);
  }
  if (*(_BYTE *)(v56 - 160))
  {
    v63 = *(WTF::StringImpl ***)(v56 - 168);
    if (v63)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v63, a2);
  }
  if (*(_BYTE *)(v56 - 144))
  {
    v64 = *(WTF::StringImpl ***)(v56 - 152);
    if (v64)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v64, a2);
  }
  if (*(_BYTE *)(v56 - 128))
  {
    v65 = *(WTF::StringImpl ***)(v56 - 136);
    if (v65)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v65, a2);
  }
  if (*(_BYTE *)(v56 - 112))
  {
    v66 = *(WTF::StringImpl ***)(v56 - 120);
    if (v66)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v66, a2);
  }
  if (*(_BYTE *)(v56 - 96))
  {
    v67 = *(WTF::StringImpl **)(v56 - 104);
    *(_QWORD *)(v56 - 104) = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, a2);
      else
        *(_DWORD *)v67 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  return IPC::StreamConnectionEncoder::operator<<<int const&>(a1, (_DWORD *)(a2 + 12));
}

uint64_t IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned __int8 v19;

  IPC::Decoder::decode<WTF::String>(a1, &v18);
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (_DWORD *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v14 = v4;
      v15 = 0;
      goto LABEL_16;
    }
    v9 = 0;
    v10 = *v8 & 0xFFFFFF00;
    v11 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    v10 = 0;
    v11 = 0;
    v9 = 1;
LABEL_8:
    result = IPC::Decoder::decode<unsigned int>(a1);
    if (!*a1)
      break;
    v5 = v19;
    if (v19)
    {
      v5 = (uint64_t)v18;
      v18 = 0;
      if (!v9 && (result & 0xFF00000000) != 0)
      {
        *(_QWORD *)a2 = v5;
        *(_QWORD *)(a2 + 8) = v11 | v10 | (unint64_t)(result << 32);
        *(_BYTE *)(a2 + 16) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v19)
  {
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E3AAE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ViewportAttributes,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;

  v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<float>(a1);
  v8 = IPC::Decoder::decode<float>(a1);
  v9 = IPC::Decoder::decode<float>(a1);
  v10 = IPC::Decoder::decode<float>(a1);
  v11 = IPC::Decoder::decode<float>(a1);
  v12 = IPC::Decoder::decode<float>(a1);
  result = IPC::Decoder::decode<WebKit::CacheModel>((uint64_t *)a1);
  v14 = *a1;
  if (!*a1)
    goto LABEL_13;
  if (!v6
    || (v7 & 0xFF00000000) == 0
    || (v8 & 0xFF00000000) == 0
    || (v9 & 0xFF00000000) == 0
    || (v10 & 0xFF00000000) == 0
    || (v11 & 0xFF00000000) == 0
    || (v12 & 0xFF00000000) == 0
    || (LOBYTE(v14) = result, (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
LABEL_13:
    *(_BYTE *)a2 = 0;
    goto LABEL_11;
  }
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v12;
  LOBYTE(v14) = 1;
  *(_BYTE *)(a2 + 32) = result;
LABEL_11:
  *(_BYTE *)(a2 + 36) = v14;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode((uint64_t)a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::URL>,void>::encode<IPC::Encoder,std::optional<WTF::URL> const&>(a1, (uint64_t)(v2 + 5));
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v2 + 11);
  LOBYTE(v2) = *((_BYTE *)v2 + 104);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t result;
  void *v35;
  int v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57[2];
  WTF::StringImpl *v58[2];
  uint64_t v59;
  WTF::StringImpl *v60[5];
  char v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  char v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  char v67;
  WTF::StringImpl *v68;
  char v69;
  char v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  WTF::StringImpl *v76;
  uint64_t v77;

  v2 = a1;
  IPC::Decoder::decode<WTF::String>(a1, &v68);
  IPC::Decoder::decode<WTF::String>(v2, &v65);
  v4 = IPC::Decoder::decode<WTF::String>(v2, &v76);
  v8 = *v2;
  if (*v2)
  {
    if (!v69)
      goto LABEL_79;
    v9 = v68;
    v68 = 0;
    if (!(_BYTE)v66)
      goto LABEL_79;
    v10 = v65;
    v65 = 0;
    if (!(_BYTE)v77)
      goto LABEL_79;
    v11 = v76;
    v76 = 0;
    *(_QWORD *)&v72 = v9;
    *((_QWORD *)&v72 + 1) = v10;
    *(_OWORD *)v58 = 0u;
    v73 = (unint64_t)v11;
    v59 = 0;
    v74 = 0;
    v75 = 1;
    WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58[1], v5);
    v58[0] = 0;
    v57[1] = 0;
    v57[0] = 0;
  }
  else
  {
    LOBYTE(v72) = 0;
    v75 = 0;
  }
  if ((_BYTE)v77)
  {
    v12 = v76;
    v76 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if ((_BYTE)v66)
  {
    v13 = v65;
    v65 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (v69)
  {
    v14 = v68;
    v68 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
        if (v8)
          goto LABEL_21;
        goto LABEL_36;
      }
      *(_DWORD *)v14 -= 2;
    }
  }
  if (v8)
    goto LABEL_21;
LABEL_36:
  v27 = *v2;
  v28 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v29 = v2[3];
  if (v29 && v28)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
LABEL_21:
  IPC::Decoder::decode<std::optional<WTF::URL>>(&v68, v2, v7);
  v15 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v16)
  {
    v17 = v15;
    v76 = 0;
    v77 = 0;
    if (v15 < 0x10000)
    {
      if (v15)
      {
        v18 = WTF::fastMalloc((WTF *)(16 * v15));
        LODWORD(v77) = v17;
        v76 = (WTF::StringImpl *)v18;
        do
        {
          IPC::Decoder::decode<WebCore::RawFile>((uint64_t)v57, v2);
          if (!LOBYTE(v58[0]))
            goto LABEL_44;
          if (HIDWORD(v77) == (_DWORD)v77)
          {
            WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RawFile>((unsigned int *)&v76, (unint64_t)v57);
          }
          else
          {
            v20 = HIDWORD(v77) + 1;
            v21 = (WTF::StringImpl **)((char *)v76 + 16 * HIDWORD(v77));
            v22 = v57[0];
            v57[0] = 0;
            *v21 = v22;
            v23 = v57[1];
            v57[1] = 0;
            v21[1] = v23;
            HIDWORD(v77) = v20;
          }
          std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v19);
          --v17;
        }
        while (v17);
        v24 = v76;
        v26 = v77;
        v25 = HIDWORD(v77);
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v24 = 0;
      }
      v76 = 0;
      v65 = v24;
      goto LABEL_34;
    }
    do
    {
      IPC::Decoder::decode<WebCore::RawFile>((uint64_t)v57, v2);
      if (!LOBYTE(v58[0]))
      {
LABEL_44:
        LOBYTE(v65) = 0;
        v67 = 0;
        std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v19);
        WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v35);
        goto LABEL_45;
      }
      if (HIDWORD(v77) == (_DWORD)v77)
      {
        WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RawFile>((unsigned int *)&v76, (unint64_t)v57);
      }
      else
      {
        v30 = HIDWORD(v77) + 1;
        v31 = (WTF::StringImpl **)((char *)v76 + 16 * HIDWORD(v77));
        v32 = v57[0];
        v57[0] = 0;
        *v31 = v32;
        v33 = v57[1];
        v57[1] = 0;
        v31[1] = v33;
        HIDWORD(v77) = v30;
      }
      result = std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v19);
      --v17;
    }
    while (v17);
    v53 = HIDWORD(v77);
    v54 = v76;
    if (v77 <= HIDWORD(v77))
      goto LABEL_96;
    v55 = v76;
    if (!HIDWORD(v77))
      goto LABEL_91;
    if (!(HIDWORD(v77) >> 28))
    {
      v56 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v77)));
      LODWORD(v77) = v53;
      v76 = (WTF::StringImpl *)v56;
      v55 = v54;
      if (v56 != (WTF::StringImpl **)v54)
      {
        WTF::VectorMover<false,WebCore::RawFile>::move(v54, (WTF::StringImpl *)((char *)v54 + 16 * v53), v56);
        v55 = v76;
      }
LABEL_91:
      if (v54)
      {
        if (v55 == v54)
        {
          v76 = 0;
          LODWORD(v77) = 0;
        }
        WTF::fastFree(v54, v16);
        v54 = v76;
      }
      else
      {
        v54 = v55;
      }
LABEL_96:
      v76 = 0;
      v65 = v54;
      v26 = v77;
      v25 = HIDWORD(v77);
LABEL_34:
      v77 = 0;
      v66 = __PAIR64__(v25, v26);
      v67 = 1;
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v16);
      goto LABEL_46;
    }
    __break(0xC471u);
  }
  else
  {
    LOBYTE(v65) = 0;
    v67 = 0;
LABEL_45:
    v5 = (void *)*v2;
    v6 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v4 = (void *)v2[3];
    if (v4)
      goto LABEL_80;
    while (1)
    {
LABEL_46:
      LOWORD(v57[0]) = 0;
      v4 = IPC::Decoder::operator>><BOOL>(v2, v57);
      v36 = BYTE1(v57[0]);
      if (BYTE1(v57[0]))
      {
        v37 = (char)v57[0];
      }
      else
      {
        v5 = (void *)*v2;
        v6 = v2[1];
        *v2 = 0;
        v2[1] = 0;
        v4 = (void *)v2[3];
        if (v4 && v6)
          v4 = (void *)(*(uint64_t (**)(void *, void *))(*(_QWORD *)v4 + 16))(v4, v5);
        v37 = 0;
      }
      if (!*v2)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 112) = 0;
        goto LABEL_70;
      }
      if (v75)
      {
        v38 = v72;
        v39 = v73;
        v72 = 0u;
        v73 = 0u;
        *(_OWORD *)v57 = v38;
        *(_OWORD *)v58 = v39;
        v40 = v74;
        v74 = 0;
        v59 = v40;
        if (v71)
        {
          v2 = (uint64_t *)v60;
          v4 = std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v60, (uint64_t)&v68);
          if (v67)
          {
            v62 = v65;
            v41 = v66;
            v65 = 0;
            v66 = 0;
            v63 = v41;
            if (v36)
              break;
          }
        }
      }
LABEL_79:
      __break(1u);
LABEL_80:
      if (v6)
        (*(void (**)(void *, void *))(*(_QWORD *)v4 + 16))(v4, v5);
    }
    v42 = *(_OWORD *)v57;
    v43 = *(_OWORD *)v58;
    *(_OWORD *)v57 = 0u;
    *(_OWORD *)v58 = 0u;
    v64 = v37;
    *(_OWORD *)a2 = v42;
    *(_OWORD *)(a2 + 16) = v43;
    v44 = v59;
    v59 = 0;
    *(_QWORD *)(a2 + 32) = v44;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 40), (uint64_t)v60);
    *(_QWORD *)(a2 + 88) = v62;
    v45 = v63;
    v62 = 0;
    v63 = 0;
    *(_QWORD *)(a2 + 96) = v45;
    *(_BYTE *)(a2 + 104) = v64;
    *(_BYTE *)(a2 + 112) = 1;
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v46);
    if (v61)
    {
      v48 = v60[0];
      v60[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v47);
        else
          *(_DWORD *)v48 -= 2;
      }
    }
    WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58[1], v47);
    v49 = v58[0];
    v58[0] = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v57[1];
    v57[1] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v57[0];
    v57[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v51 -= 2;
    }
LABEL_70:
    if (v67)
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v5);
    if (v71)
    {
      if (v70)
      {
        v52 = v68;
        v68 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v5);
          else
            *(_DWORD *)v52 -= 2;
        }
      }
    }
    return std::__optional_destruct_base<WebCore::ShareData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v5);
  }
  return result;
}

void sub_196E3B29C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,int a25,__int16 a26,char a27,char a28,WTF::StringImpl *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::__optional_destruct_base<WebCore::ShareData,false>::~__optional_destruct_base[abi:sn180100](v38 - 112, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::TargetedElementAdjustment,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>(a1, (uint64_t)&v15);
  result = IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)a1, (uint64_t)&v8);
  if (*a1)
  {
    if (v18)
    {
      v11 = v15;
      v12 = v16;
      v13 = v17;
      if (v10)
      {
        v6 = v8;
        v8 = 0;
        v7 = v16;
        *(_OWORD *)a2 = v15;
        *(_OWORD *)(a2 + 16) = v7;
        *(_OWORD *)(a2 + 32) = v17;
        v14[0] = 0;
        *(_QWORD *)(a2 + 48) = v6;
        v14[1] = 0;
        *(_QWORD *)&v7 = v9;
        v9 = 0;
        *(_QWORD *)(a2 + 56) = v7;
        *(_BYTE *)(a2 + 64) = 1;
        result = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v5);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
LABEL_5:
  if (v10)
    return WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
  return result;
}

unint64_t IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *(_QWORD *)a1;
    v6 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    result = *((_QWORD *)a1 + 3);
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E3B66C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::TargetedElementRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  char v5;
  char *result;

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (int *)v2, v4);
  v5 = *(_BYTE *)(v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *(_BYTE *)(v2 + 25);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::TargetedElementRequest,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  char v24;
  char v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  int v29;
  uint64_t result;
  unsigned __int8 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  _QWORD v47[2];
  int v48;
  unsigned __int8 v49;
  char v50;

  v2 = a1;
  v4 = (unsigned __int8 *)a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6)
    goto LABEL_39;
  v7 = (_BYTE *)(v5 + v6);
  a1[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    v31 = v4;
    v32 = 0;
    goto LABEL_40;
  }
  v8 = *v7;
  if (v8 <= 2)
  {
    if (!*v7)
    {
      v13 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      if (!v14)
        goto LABEL_63;
      v47[0] = v13;
      v48 = 0;
      v49 = 1;
      goto LABEL_18;
    }
    if (v8 == 1)
    {
      IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v43);
      v12 = v44;
      if ((_BYTE)v44)
      {
        v47[0] = v43;
        v12 = 1;
        v48 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)a1, (uint64_t)&v43);
      v12 = v45;
      if ((_BYTE)v45)
      {
        v47[0] = v43;
        v16 = v44;
        v43 = 0;
        v44 = 0;
        v47[1] = v16;
        v48 = 2;
        WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v15);
        v12 = 1;
        goto LABEL_17;
      }
    }
    LOBYTE(v47[0]) = 0;
LABEL_17:
    v49 = v12;
    if (!v12)
      goto LABEL_5;
    goto LABEL_18;
  }
  while (1)
  {
    LOBYTE(v47[0]) = 0;
    v49 = 0;
LABEL_5:
    v9 = *v2;
    v10 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v11 = v2[3];
    if (v11 && v10)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
LABEL_18:
    v17 = v2[1];
    v18 = *v2;
    v19 = v2[2] - *v2;
    if (v17 <= v19)
    {
      v35 = 0;
      v36 = 0;
      *v2 = 0;
      v2[1] = 0;
      v37 = v2[3];
      if (v37)
      {
        if (v17)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v37 + 16))(v37);
          v36 = *v2;
          v35 = v2[1];
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
      }
      goto LABEL_44;
    }
    v20 = (unsigned __int8 *)(v18 + v19);
    v21 = v18 + v19 + 1;
    v2[2] = v21;
    if (!v18)
    {
      v35 = v17;
      v36 = 0;
LABEL_44:
      *v2 = 0;
      v2[1] = 0;
      v38 = v2[3];
      if (v38 && v35)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
        v22 = 0;
        v18 = *v2;
        v17 = v2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v22 = 0;
      }
      goto LABEL_46;
    }
    v22 = *v20;
    if (v22 < 2)
    {
      v23 = 0;
      v24 = 1;
      goto LABEL_22;
    }
LABEL_46:
    *v2 = 0;
    v2[1] = 0;
    v39 = v2[3];
    if (!v39 || !v17)
    {
      v25 = 0;
      v40 = 0;
      v18 = 0;
      v23 = 1;
LABEL_48:
      *v2 = 0;
      v2[1] = 0;
      v41 = v2[3];
      if (v41 && v40)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v18, v40);
        v18 = *v2;
        v17 = v2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v18);
    v24 = 0;
    v18 = *v2;
    v17 = v2[1];
    v23 = 1;
    v21 = v2[2];
LABEL_22:
    if (v22)
      v25 = v24;
    else
      v25 = 0;
    v26 = v21 - v18;
    if (v17 <= v26)
    {
      v40 = 0;
      v42 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v42 && v17)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v42 + 16))(v42);
        v18 = *v2;
        v40 = v2[1];
      }
      else
      {
        v18 = 0;
      }
      goto LABEL_48;
    }
    v27 = (unsigned __int8 *)(v18 + v26);
    v4 = v27 + 1;
    v2[2] = (unint64_t)(v27 + 1);
    if (!v18)
    {
      v40 = v17;
      goto LABEL_48;
    }
    v28 = *v27;
    if (v28 <= 1)
    {
      v29 = 0;
      v2 = (unint64_t *)(v28 != 0);
      goto LABEL_29;
    }
LABEL_50:
    *v2 = 0;
    v2[1] = 0;
    result = v2[3];
    if (!result
      || !v17
      || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18), !*v2))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      goto LABEL_34;
    }
    v2 = 0;
    v29 = 1;
LABEL_29:
    v5 = v49;
    if (v49)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v43, (uint64_t)v47);
      if (!v23)
      {
        LOBYTE(v46) = v25;
        if (!v29)
          break;
      }
    }
    __break(1u);
LABEL_39:
    v31 = 0;
    v32 = 0;
    *v2 = 0;
    v2[1] = 0;
    v33 = v2[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unsigned __int8 *))(*(_QWORD *)v33 + 16))(v33, v5, v4);
LABEL_63:
        v32 = *v2;
        v31 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
LABEL_40:
    *v2 = 0;
    v2[1] = 0;
    v34 = v2[3];
    if (v34 && v31)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
  }
  HIBYTE(v46) = (_BYTE)v2;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v43);
  *(_WORD *)(a2 + 24) = v46;
  *(_BYTE *)(a2 + 32) = 1;
  if (v45 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))off_1E34AD970[v45])(&v50, &v43);
LABEL_34:
  if (v49)
  {
    if (v48 != -1)
      return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34AD970[v48])(&v43, v47);
  }
  return result;
}

void sub_196E3BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, uint64_t a13, char a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1)
      ((void (*)(char *, char *))off_1E34AD970[a16])(&a10, &a14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, v2 + 2);
  v5 = v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(a1, (char *)v2 + 48);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 9);
  IPC::VectorArgumentCoder<false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 10));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)v2 + 24);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)v2 + 28);
  LOBYTE(v5) = *((_BYTE *)v2 + 128);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 17));
  IPC::ArgumentCoder<WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, v2 + 19);
  LOBYTE(v5) = *((_BYTE *)v2 + 160);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 161);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 162);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 163);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 164);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 165);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  WTF *v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  WTF *v43;
  void *v44;
  _OWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  _OWORD *v69;
  int v70;
  int v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  int *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v86;
  WTF::StringImpl **v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  char v104;
  char v105;
  unint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  char v111;
  char v112;
  unint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unsigned int v116;
  WTF::StringImpl *v117;
  int v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  char v126;
  char v127;
  unint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  char v133;
  char v134;
  unint64_t v135;
  unsigned __int8 *v136;
  unsigned int v137;
  char v138;
  int v139;
  BOOL v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  WTF *v175;
  WTF *v176;
  WTF *v177;
  uint64_t v178;
  int v179;
  char v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  char v186;
  int v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  char v196;
  int v197;
  uint64_t v198;
  char v199;
  int v200;
  uint64_t v201;
  char v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  char v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  WTF::StringImpl **v252;
  WTF::StringImpl **v253;
  WTF::StringImpl **v254;
  WTF::StringImpl **v255;
  WTF::StringImpl **v256;
  WTF::StringImpl **v257;
  WTF::StringImpl **v258;
  WTF::StringImpl **v259;
  WTF::StringImpl **v260;
  WTF::StringImpl **v261;
  WTF::StringImpl **v262;
  WTF::StringImpl **v263;
  WTF::StringImpl **v264;
  WTF::StringImpl **v265;
  WTF::StringImpl **v266;
  WTF::StringImpl **v267;
  WTF::StringImpl **v268;
  WTF::StringImpl **v269;
  int v270;
  int v271;
  char v272;
  int v273;
  unsigned __int8 v274;
  __int128 v275;
  unsigned __int8 v276;
  __int128 v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  int v282;
  WTF *v283;
  uint64_t v284;
  char v285;
  WTF::StringImpl *v286;
  char v287;
  WTF::StringImpl *v288;
  char v289;
  WTF::StringImpl *v290;
  char v291;
  WTF *v292;
  uint64_t v293;
  char v294;
  WTF::StringImpl **v295;
  WTF::StringImpl *v296[2];
  __int128 v297;
  __int128 v298;
  int v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  __int16 v310;
  __int128 v311;
  uint64_t v312;
  char v313;
  uint64_t v314;

  v314 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)&v311);
  v7 = IPC::Decoder::decode<WebCore::RectEdges<BOOL>>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v290);
  IPC::Decoder::decode<WTF::String>(a1, &v288);
  IPC::Decoder::decode<WTF::String>(a1, &v286);
  v8 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v9)
  {
    v10 = v8;
    v292 = 0;
    v293 = 0;
    if (v8 >= 0x10000)
    {
      do
      {
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)v296);
        if (!(_BYTE)v297)
          goto LABEL_24;
        if (HIDWORD(v293) == (_DWORD)v293)
        {
          WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v292, (unint64_t)v296);
        }
        else
        {
          v16 = (char *)v292 + 16 * HIDWORD(v293);
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v16 + 1) = 0;
          v17 = v296[0];
          v296[0] = 0;
          *(_QWORD *)v16 = v17;
          LODWORD(v17) = v296[1];
          LODWORD(v296[1]) = 0;
          *((_DWORD *)v16 + 2) = (_DWORD)v17;
          LODWORD(v17) = HIDWORD(v296[1]);
          HIDWORD(v296[1]) = 0;
          *((_DWORD *)v16 + 3) = (_DWORD)v17;
          ++HIDWORD(v293);
        }
        if ((_BYTE)v297)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v296, v9);
        --v10;
      }
      while (v10);
      v174 = HIDWORD(v293);
      v175 = v292;
      if (v293 > HIDWORD(v293))
      {
        v176 = v292;
        if (HIDWORD(v293))
        {
          if (HIDWORD(v293) >> 28)
          {
            __break(0xC471u);
            goto LABEL_356;
          }
          v177 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v293)));
          LODWORD(v293) = v174;
          v292 = v177;
          v176 = v175;
          if (v177 != v175)
          {
            WTF::VectorMover<false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move((uint64_t)v175, (char *)v175 + 16 * v174, (uint64_t)v177);
            v176 = v292;
          }
        }
        if (v175)
        {
          if (v176 == v175)
          {
            v292 = 0;
            LODWORD(v293) = 0;
          }
          WTF::fastFree(v175, v9);
          v175 = v292;
        }
        else
        {
          v175 = v176;
        }
      }
      v283 = v175;
      v178 = v293;
      v292 = 0;
      v293 = 0;
      v284 = v178;
    }
    else
    {
      if (v8)
      {
        v11 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
        LODWORD(v293) = v10;
        v292 = v11;
        while (1)
        {
          IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)v296);
          if (!(_BYTE)v297)
            break;
          if (HIDWORD(v293) == (_DWORD)v293)
          {
            WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v292, (unint64_t)v296);
          }
          else
          {
            v12 = (char *)v292 + 16 * HIDWORD(v293);
            *(_QWORD *)v12 = 0;
            *((_QWORD *)v12 + 1) = 0;
            v13 = v296[0];
            v296[0] = 0;
            *(_QWORD *)v12 = v13;
            LODWORD(v13) = v296[1];
            LODWORD(v296[1]) = 0;
            *((_DWORD *)v12 + 2) = (_DWORD)v13;
            LODWORD(v13) = HIDWORD(v296[1]);
            HIDWORD(v296[1]) = 0;
            *((_DWORD *)v12 + 3) = (_DWORD)v13;
            ++HIDWORD(v293);
          }
          if ((_BYTE)v297)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v296, v9);
          if (!--v10)
          {
            v14 = v292;
            v15 = v293;
            goto LABEL_15;
          }
        }
LABEL_24:
        LOBYTE(v283) = 0;
        v285 = 0;
        WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292, v9);
        goto LABEL_25;
      }
      v14 = 0;
      v15 = 0;
LABEL_15:
      v292 = 0;
      v293 = 0;
      v283 = v14;
      v284 = v15;
    }
    v285 = 1;
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292, v9);
    goto LABEL_26;
  }
  LOBYTE(v283) = 0;
  v285 = 0;
LABEL_25:
  v18 = *a1;
  v19 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v20 = a1[3];
  if (v20 && v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
LABEL_26:
  v21 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v23 = v22;
  if (!v22)
  {
    v48 = *a1;
    v49 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50)
    {
      if (v49)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
    }
  }
  *((_QWORD *)&v277 + 1) = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v25 = v24;
  if (!v24)
  {
    v51 = *a1;
    v52 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53)
    {
      if (v52)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
    }
  }
  v278 = *a1;
  if (*a1)
  {
    if (!v23 || !v25)
      goto LABEL_356;
    *(_QWORD *)&v277 = v21 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v21) = 0;
    *(_QWORD *)&v277 = 0;
    v54 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (v55)
    {
      if (v54)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 16))(v55, 0);
      LOBYTE(v21) = 0;
      *(_QWORD *)&v277 = 0;
    }
  }
  v26 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v28 = v27;
  if (!v27)
  {
    v56 = *a1;
    v57 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (v58)
    {
      if (v57)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
    }
  }
  v29 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v31 = v30;
  if (!v30)
  {
    v59 = *a1;
    v60 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v61 = a1[3];
    if (v61)
    {
      if (v60)
      {
        v62 = v29;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v59);
        v29 = v62;
      }
    }
  }
  v32 = *a1;
  *((_QWORD *)&v275 + 1) = v29;
  v276 = v21;
  v280 = *a1;
  v281 = v6;
  if (*a1)
  {
    if (v28 && v31)
    {
      *(_QWORD *)&v275 = v26 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_38;
    }
LABEL_356:
    __break(1u);
    goto LABEL_357;
  }
  v63 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v64 = a1[3];
  if (!v64)
  {
    v32 = 0;
    *(_QWORD *)&v275 = 0;
    LOBYTE(v26) = 0;
    v34 = 0;
    v33 = a1 + 2;
LABEL_76:
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v32);
        v66 = *a1;
        v34 = a1[1];
      }
      else
      {
        v66 = 0;
      }
    }
    else
    {
      v66 = 0;
      v34 = 0;
    }
LABEL_78:
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67 && v34)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v66);
    goto LABEL_42;
  }
  if (!v63)
  {
    v33 = a1 + 2;
    v205 = a1[2];
    v34 = a1[1];
    if (v34 > v205)
    {
      *(_QWORD *)&v275 = 0;
      LOBYTE(v26) = 0;
      v66 = 0;
      *v33 = v205 + 1;
      goto LABEL_78;
    }
    v32 = 0;
    *(_QWORD *)&v275 = 0;
    LOBYTE(v26) = 0;
    goto LABEL_76;
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 16))(v64, 0);
  LOBYTE(v26) = 0;
  *(_QWORD *)&v275 = 0;
  v32 = *a1;
LABEL_38:
  v33 = a1 + 2;
  v34 = a1[1];
  if (v34 <= a1[2] - v32)
    goto LABEL_76;
  v35 = (unsigned __int8 *)a1[2];
  *v33 = (uint64_t)(v35 + 1);
  if (!v32)
  {
    v66 = 0;
    goto LABEL_78;
  }
  v282 = 0;
  LODWORD(v36) = *v35;
  if (v36 >= 4 && (_DWORD)v36 != 6)
  {
LABEL_42:
    v37 = *a1;
    v38 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v38)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
    LODWORD(v36) = 0;
    v282 = 1;
  }
  v40 = IPC::Decoder::decode<unsigned long long>(a1);
  v274 = v26;
  v272 = v36;
  if (!v41)
    goto LABEL_99;
  v42 = v40;
  v292 = 0;
  v293 = 0;
  if (v40 < 0x10000)
  {
    if (!v40)
    {
      v43 = 0;
      v271 = 0;
      LODWORD(v36) = 0;
      goto LABEL_55;
    }
    v43 = (WTF *)WTF::fastMalloc((WTF *)(16 * v40));
    LODWORD(v36) = 0;
    LODWORD(v293) = v42;
    v292 = v43;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v296);
      if (!(_BYTE)v297)
        break;
      if ((_DWORD)v36 == (_DWORD)v293)
      {
        v45 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v292, v36 + 1, (unint64_t)v296);
        v46 = HIDWORD(v293);
        v43 = v292;
        *((_OWORD *)v292 + HIDWORD(v293)) = *v45;
      }
      else
      {
        *((_OWORD *)v43 + v36) = *(_OWORD *)v296;
        v46 = HIDWORD(v293);
      }
      LODWORD(v36) = v46 + 1;
      HIDWORD(v293) = v46 + 1;
      if (!--v42)
      {
        v271 = v293;
        goto LABEL_55;
      }
    }
LABEL_98:
    v292 = 0;
    LODWORD(v293) = 0;
    WTF::fastFree(v43, v44);
LABEL_99:
    v74 = *a1;
    v75 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v76 = a1[3];
    if (v76 && v75)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, v74);
    v43 = 0;
    v47 = 1;
    goto LABEL_101;
  }
  v68 = 0;
  LODWORD(v36) = 0;
  do
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v296);
    if (!(_BYTE)v297)
    {
      v43 = v292;
      if (!v292)
        goto LABEL_99;
      goto LABEL_98;
    }
    if ((_DWORD)v36 == (_DWORD)v293)
    {
      v69 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v292, v36 + 1, (unint64_t)v296);
      v70 = HIDWORD(v293);
      v68 = v292;
      *((_OWORD *)v292 + HIDWORD(v293)) = *v69;
    }
    else
    {
      *((_OWORD *)v68 + v36) = *(_OWORD *)v296;
      v70 = HIDWORD(v293);
    }
    v36 = (v70 + 1);
    HIDWORD(v293) = v70 + 1;
    --v42;
  }
  while (v42);
  v71 = v293;
  if (v293 <= v36)
    goto LABEL_262;
  if (!(_DWORD)v36)
    goto LABEL_260;
  if (v36 >> 28)
  {
LABEL_357:
    __break(0xC471u);
    JUMPOUT(0x196E3D1E8);
  }
  v72 = (WTF *)WTF::fastMalloc((WTF *)(16 * v36));
  LODWORD(v293) = v36;
  v292 = v72;
  if (v72 == v68)
  {
LABEL_260:
    v292 = 0;
    LODWORD(v293) = 0;
LABEL_261:
    WTF::fastFree(v68, v44);
    v71 = v293;
    LODWORD(v36) = HIDWORD(v293);
    goto LABEL_262;
  }
  v73 = 0;
  do
  {
    *(_OWORD *)((char *)v72 + v73) = *(_OWORD *)((char *)v68 + v73);
    v73 += 16;
  }
  while (16 * v36 != v73);
  v71 = v36;
  if (v68)
    goto LABEL_261;
LABEL_262:
  v271 = v71;
  v43 = v292;
LABEL_55:
  v47 = 0;
LABEL_101:
  v77 = a1[1];
  v78 = *a1;
  v79 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  v80 = v77 >= v79 && v77 - v79 > 3;
  v273 = v47;
  if (v80)
  {
    v81 = (int *)(v78 + v79);
    *v33 = (uint64_t)(v81 + 1);
    if (!v78)
    {
      v89 = v77;
      v90 = 0;
      goto LABEL_127;
    }
    v82 = *v81;
    v295 = 0;
    if (v82)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::URL>(a1, v296);
        v84 = BYTE8(v298);
        if (!BYTE8(v298) || v296[0] == (WTF::StringImpl *)-1)
          break;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v296) & 1) != 0)
          goto LABEL_130;
        if (!BYTE8(v298))
          goto LABEL_356;
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add((uint64_t *)&v295, v296, (uint64_t)&v292);
        if (!v294)
        {
LABEL_130:
          v84 = BYTE8(v298);
          break;
        }
        if (BYTE8(v298))
        {
          v86 = v296[0];
          v296[0] = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, v83);
            else
              *(_DWORD *)v86 -= 2;
          }
        }
        if (!--v82)
        {
          v87 = v295;
          goto LABEL_123;
        }
      }
      if (v84)
      {
        v93 = v296[0];
        v296[0] = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2)
            WTF::StringImpl::destroy(v93, v83);
          else
            *(_DWORD *)v93 -= 2;
        }
      }
      if (v295)
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v295, v83);
      goto LABEL_138;
    }
    v87 = 0;
LABEL_123:
    v88 = 0;
  }
  else
  {
    v89 = 0;
    v90 = 0;
    *a1 = 0;
    a1[1] = 0;
    v91 = a1[3];
    if (v91)
    {
      if (v77)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v91 + 16))(v91, v78, v77);
        v90 = *a1;
        v89 = a1[1];
      }
      else
      {
        v89 = 0;
        v90 = 0;
      }
    }
LABEL_127:
    *a1 = 0;
    a1[1] = 0;
    v92 = a1[3];
    if (v92 && v89)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v90);
LABEL_138:
    v94 = *a1;
    v95 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v96 = a1[3];
    if (v96 && v95)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v94);
    v87 = 0;
    v88 = 1;
  }
  v97 = a1[1];
  v98 = (WTF::StringImpl *)*a1;
  v99 = a1[2] - *a1;
  v279 = v7;
  if (v97 <= v99)
  {
    v152 = 0;
    v153 = 0;
    *a1 = 0;
    a1[1] = 0;
    v154 = a1[3];
    if (v154)
    {
      v244 = v88;
      v262 = v87;
      if (v97)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v154 + 16))(v154);
        v153 = *a1;
        v152 = a1[1];
      }
      else
      {
        v152 = 0;
        v153 = 0;
      }
      v87 = v262;
      v88 = v244;
    }
    goto LABEL_219;
  }
  v100 = (unsigned __int8 *)v98 + v99;
  v101 = (uint64_t)v98 + v99 + 1;
  *v33 = v101;
  if (!v98)
  {
    v152 = v97;
    v153 = 0;
LABEL_219:
    *a1 = 0;
    a1[1] = 0;
    v155 = a1[3];
    if (v155)
    {
      v238 = v88;
      v256 = v87;
      if (v152)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v155 + 16))(v155, v153, v152);
        v102 = 0;
        v98 = (WTF::StringImpl *)*a1;
        v97 = a1[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v102 = 0;
      }
      v87 = v256;
      v88 = v238;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v102 = 0;
    }
    goto LABEL_221;
  }
  v102 = *v100;
  if (v102 < 2)
  {
    v103 = 0;
    v104 = 1;
    goto LABEL_144;
  }
LABEL_221:
  *a1 = 0;
  a1[1] = 0;
  v156 = a1[3];
  if (!v156)
  {
    v105 = 0;
    v157 = 0;
    v98 = 0;
    v103 = 1;
    goto LABEL_223;
  }
  v234 = v88;
  v252 = v87;
  if (!v97)
  {
    v105 = 0;
    v157 = 0;
    v98 = 0;
    v103 = 1;
    goto LABEL_223;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v156 + 16))(v156, v98);
  v104 = 0;
  v98 = (WTF::StringImpl *)*a1;
  v97 = a1[1];
  v103 = 1;
  v101 = a1[2];
  v87 = v252;
  v88 = v234;
LABEL_144:
  if (v102)
    v105 = v104;
  else
    v105 = 0;
  v106 = v101 - (_QWORD)v98;
  if (v97 <= v106)
  {
    v202 = v105;
    v203 = v103;
    v251 = v88;
    v269 = v87;
    v157 = 0;
    v204 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v204 && v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v204 + 16))(v204);
      v98 = (WTF::StringImpl *)*a1;
      v157 = a1[1];
    }
    else
    {
      v98 = 0;
    }
    v87 = v269;
    v88 = v251;
    v103 = v203;
    v105 = v202;
LABEL_223:
    *a1 = 0;
    a1[1] = 0;
    v158 = a1[3];
    if (v158)
    {
      v226 = v105;
      v183 = v103;
      v240 = v88;
      v258 = v87;
      if (v157)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v158 + 16))(v158, v98, v157);
        v109 = 0;
        v98 = (WTF::StringImpl *)*a1;
        v97 = a1[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v109 = 0;
      }
      v87 = v258;
      v88 = v240;
      v103 = v183;
      v105 = v226;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v109 = 0;
    }
  }
  else
  {
    v107 = (unsigned __int8 *)v98 + v106;
    v108 = (uint64_t)v98 + v106 + 1;
    *v33 = v108;
    if (!v98)
    {
      v157 = v97;
      goto LABEL_223;
    }
    v109 = *v107;
    if (v109 < 2)
    {
      v110 = 0;
      v111 = 1;
      goto LABEL_151;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v159 = a1[3];
  if (!v159)
  {
    v112 = 0;
    v160 = 0;
    v98 = 0;
    v110 = 1;
    goto LABEL_227;
  }
  v223 = v105;
  v179 = v103;
  v235 = v88;
  v253 = v87;
  if (!v97)
  {
    v112 = 0;
    v160 = 0;
    v98 = 0;
    v110 = 1;
    goto LABEL_227;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v159 + 16))(v159, v98);
  v111 = 0;
  v98 = (WTF::StringImpl *)*a1;
  v97 = a1[1];
  v110 = 1;
  v108 = a1[2];
  v87 = v253;
  v88 = v235;
  v103 = v179;
  v105 = v223;
LABEL_151:
  if (v109)
    v112 = v111;
  else
    v112 = 0;
  v113 = v108 - (_QWORD)v98;
  if (v97 <= v113)
  {
    v250 = v88;
    v222 = v110;
    v199 = v105;
    v200 = v103;
    v268 = v87;
    v160 = 0;
    v201 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v201 && v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v201 + 16))(v201);
      v98 = (WTF::StringImpl *)*a1;
      v160 = a1[1];
    }
    else
    {
      v98 = 0;
    }
    v87 = v268;
    v88 = v250;
    v103 = v200;
    v105 = v199;
    v110 = v222;
LABEL_227:
    *a1 = 0;
    a1[1] = 0;
    v161 = a1[3];
    if (v161)
    {
      v228 = v105;
      v218 = v110;
      v185 = v103;
      v242 = v88;
      v260 = v87;
      if (v160)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v161 + 16))(v161, v98, v160);
        v116 = 0;
        v98 = (WTF::StringImpl *)*a1;
        v97 = a1[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v116 = 0;
      }
      v87 = v260;
      v88 = v242;
      v103 = v185;
      v110 = v218;
      v105 = v228;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v116 = 0;
    }
  }
  else
  {
    v114 = (unsigned __int8 *)v98 + v113;
    v115 = (uint64_t)v98 + v113 + 1;
    *v33 = v115;
    if (!v98)
    {
      v160 = v97;
      goto LABEL_227;
    }
    v116 = *v114;
    if (v116 < 2)
    {
      v117 = (WTF::StringImpl *)v4;
      v118 = 0;
      v119 = 1;
      goto LABEL_158;
    }
  }
  v117 = (WTF::StringImpl *)v4;
  *a1 = 0;
  a1[1] = 0;
  v162 = a1[3];
  if (!v162)
  {
    LODWORD(v120) = 0;
    v163 = 0;
    v98 = 0;
    v270 = 1;
    goto LABEL_231;
  }
  v236 = v88;
  v214 = v110;
  v180 = v105;
  v181 = v103;
  v254 = v87;
  if (!v97)
  {
    LODWORD(v120) = 0;
    v163 = 0;
    v98 = 0;
    v270 = 1;
    goto LABEL_231;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v162 + 16))(v162, v98);
  v119 = 0;
  v98 = (WTF::StringImpl *)*a1;
  v97 = a1[1];
  v118 = 1;
  v115 = a1[2];
  v87 = v254;
  v88 = v236;
  v103 = v181;
  v105 = v180;
  v110 = v214;
LABEL_158:
  if (v116)
    v120 = v119;
  else
    v120 = 0;
  v121 = v115 - (_QWORD)v98;
  if (v97 <= v121)
  {
    v213 = v120;
    v270 = v118;
    v249 = v88;
    v195 = v110;
    v196 = v105;
    v197 = v103;
    v267 = v87;
    v163 = 0;
    v198 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v198 && v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 16))(v198);
      v98 = (WTF::StringImpl *)*a1;
      v163 = a1[1];
    }
    else
    {
      v98 = 0;
    }
    v87 = v267;
    v88 = v249;
    v103 = v197;
    v105 = v196;
    v110 = v195;
    LODWORD(v120) = v213;
LABEL_231:
    *a1 = 0;
    a1[1] = 0;
    v164 = a1[3];
    if (v164)
    {
      v210 = v120;
      v219 = v110;
      v243 = v88;
      v186 = v105;
      v187 = v103;
      v261 = v87;
      if (v163)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v164 + 16))(v164, v98, v163);
        v124 = 0;
        v98 = (WTF::StringImpl *)*a1;
        v97 = a1[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v124 = 0;
      }
      v87 = v261;
      v88 = v243;
      v103 = v187;
      v105 = v186;
      LODWORD(v120) = v210;
      v110 = v219;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v124 = 0;
    }
  }
  else
  {
    v122 = (unsigned __int8 *)v98 + v121;
    v123 = (uint64_t)v98 + v121 + 1;
    *v33 = v123;
    if (!v98)
    {
      v270 = v118;
      v163 = v97;
      goto LABEL_231;
    }
    v124 = *v122;
    if (v124 < 2)
    {
      v125 = 0;
      v126 = 1;
      goto LABEL_165;
    }
    v270 = v118;
  }
  *a1 = 0;
  a1[1] = 0;
  v165 = a1[3];
  if (v165)
  {
    v207 = v120;
    v215 = v110;
    v224 = v105;
    v232 = v112;
    v182 = v103;
    v237 = v88;
    v255 = v87;
    if (v97)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v165 + 16))(v165, v98);
      v126 = 0;
      v98 = (WTF::StringImpl *)*a1;
      v97 = a1[1];
      v125 = 1;
      v123 = a1[2];
      v87 = v255;
      v88 = v237;
      v103 = v182;
      v110 = v215;
      v105 = v224;
      v118 = v270;
      v120 = v207;
LABEL_165:
      if (v124)
        v127 = v126;
      else
        v127 = 0;
      v128 = v123 - (_QWORD)v98;
      if (v97 > v128)
      {
        v129 = (unsigned __int8 *)v98 + v128;
        v130 = (uint64_t)v98 + v128 + 1;
        *v33 = v130;
        if (!v98)
        {
          v270 = v118;
          v166 = v97;
          goto LABEL_235;
        }
        v131 = *v129;
        if (v131 >= 2)
        {
          v270 = v118;
          goto LABEL_237;
        }
        v132 = 0;
        v133 = 1;
        goto LABEL_172;
      }
      v207 = v120;
      v270 = v118;
      v231 = v105;
      v232 = v112;
      v192 = v110;
      v193 = v103;
      v248 = v88;
      v266 = v87;
      v166 = 0;
      v194 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v194 && v97)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v194 + 16))(v194);
        v98 = (WTF::StringImpl *)*a1;
        v166 = a1[1];
      }
      else
      {
        v98 = 0;
      }
      v87 = v266;
      v88 = v248;
      v103 = v193;
      v105 = v231;
      v110 = v192;
    }
    else
    {
      v127 = 0;
      v166 = 0;
      v98 = 0;
      v125 = 1;
    }
    v112 = v232;
    LODWORD(v120) = v207;
    goto LABEL_235;
  }
  v127 = 0;
  v166 = 0;
  v98 = 0;
  v125 = 1;
LABEL_235:
  *a1 = 0;
  a1[1] = 0;
  v167 = a1[3];
  if (v167)
  {
    v211 = v120;
    v220 = v110;
    v229 = v105;
    v188 = v103;
    v245 = v88;
    v263 = v87;
    if (v166)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v167 + 16))(v167, v98, v166);
      v131 = 0;
      v98 = (WTF::StringImpl *)*a1;
      v97 = a1[1];
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v131 = 0;
    }
    v87 = v263;
    v88 = v245;
    v103 = v188;
    v110 = v220;
    v105 = v229;
    LODWORD(v120) = v211;
  }
  else
  {
    v97 = 0;
    v98 = 0;
    v131 = 0;
  }
LABEL_237:
  *a1 = 0;
  a1[1] = 0;
  v168 = a1[3];
  if (v168)
  {
    v208 = v120;
    v216 = v110;
    v225 = v105;
    v233 = v112;
    v206 = v103;
    v239 = v88;
    v257 = v87;
    if (!v97)
    {
      v134 = 0;
      v169 = 0;
      v98 = 0;
      v132 = 1;
      goto LABEL_309;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v168 + 16))(v168, v98);
    v133 = 0;
    v98 = (WTF::StringImpl *)*a1;
    v97 = a1[1];
    v132 = 1;
    v130 = a1[2];
    v87 = v257;
    v88 = v239;
    v103 = v206;
    v120 = v208;
    v110 = v216;
    v105 = v225;
    v118 = v270;
LABEL_172:
    if (v131)
      v134 = v133;
    else
      v134 = 0;
    v135 = v130 - (_QWORD)v98;
    if (v97 > v135)
    {
      v136 = (unsigned __int8 *)v98 + v135;
      *v33 = (uint64_t)(v136 + 1);
      if (!v98)
      {
        v270 = v118;
        v169 = v97;
        goto LABEL_239;
      }
      v137 = *v136;
      v138 = v281;
      if (v137 > 1)
      {
        v270 = v118;
        goto LABEL_241;
      }
      v139 = 0;
      v140 = v137 != 0;
LABEL_179:
      if (v138)
      {
        v296[0] = v117;
        if (v313)
        {
          v297 = v311;
          *(_QWORD *)&v298 = v312;
          if (BYTE4(v279))
          {
            v299 = v279;
            if (v291)
            {
              v141 = v290;
              v290 = 0;
              *(_QWORD *)&v300 = v141;
              if (v289)
              {
                v142 = v288;
                v288 = 0;
                *((_QWORD *)&v300 + 1) = v142;
                if (v287)
                {
                  v143 = v286;
                  v286 = 0;
                  *(_QWORD *)&v301 = v143;
                  if (v285)
                  {
                    v144 = v283;
                    v145 = v284;
                    v283 = 0;
                    v284 = 0;
                    if (v278)
                    {
                      v303 = v277 | v276;
                      if (v280)
                      {
                        v304 = v275 | v274;
                        if (!v282)
                        {
                          v305 = v272;
                          if (!v273 && !v88 && !v103)
                          {
                            LOBYTE(v309) = v105;
                            if (!v110)
                            {
                              BYTE1(v309) = v112;
                              if (!v118)
                              {
                                BYTE2(v309) = v120;
                                if (!v125)
                                {
                                  HIBYTE(v309) = v127;
                                  if (!v132)
                                  {
                                    LOBYTE(v310) = v134;
                                    if (!v139)
                                    {
                                      HIBYTE(v310) = v140;
                                      v146 = v297;
                                      *(_OWORD *)a2 = *(_OWORD *)v296;
                                      *(_OWORD *)(a2 + 16) = v146;
                                      *(_OWORD *)(a2 + 32) = v298;
                                      *(_DWORD *)(a2 + 48) = v299;
                                      v300 = 0u;
                                      *(_QWORD *)(a2 + 56) = v141;
                                      *(_QWORD *)(a2 + 64) = v142;
                                      v301 = 0u;
                                      *(_QWORD *)(a2 + 72) = v143;
                                      *(_QWORD *)(a2 + 80) = v144;
                                      v302 = 0;
                                      *(_QWORD *)(a2 + 88) = v145;
                                      v147 = v303;
                                      v148 = v304;
                                      *(_BYTE *)(a2 + 128) = v305;
                                      *(_OWORD *)(a2 + 96) = v147;
                                      *(_OWORD *)(a2 + 112) = v148;
                                      v306 = 0;
                                      *(_QWORD *)(a2 + 136) = v43;
                                      v307 = 0;
                                      *(_DWORD *)(a2 + 144) = v271;
                                      *(_DWORD *)(a2 + 148) = v36;
                                      v308 = 0;
                                      *(_QWORD *)(a2 + 152) = v87;
                                      *(_DWORD *)(a2 + 160) = v309;
                                      *(_WORD *)(a2 + 164) = v310;
                                      *(_BYTE *)(a2 + 176) = 1;
                                      WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)v296, (WTF::StringImpl *)v120);
                                      goto LABEL_198;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_356;
    }
    v208 = v120;
    v216 = v110;
    v270 = v118;
    v225 = v105;
    v233 = v112;
    v190 = v103;
    v247 = v88;
    v265 = v87;
    v169 = 0;
    v191 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v191 && v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 16))(v191);
      v98 = (WTF::StringImpl *)*a1;
      v169 = a1[1];
    }
    else
    {
      v98 = 0;
    }
    v87 = v265;
    v88 = v247;
    v103 = v190;
LABEL_309:
    v110 = v216;
    v105 = v225;
    v112 = v233;
    LODWORD(v120) = v208;
    goto LABEL_239;
  }
  v134 = 0;
  v169 = 0;
  v98 = 0;
  v132 = 1;
LABEL_239:
  *a1 = 0;
  a1[1] = 0;
  v170 = a1[3];
  if (v170)
  {
    v212 = v120;
    v221 = v110;
    v230 = v105;
    v189 = v103;
    v246 = v88;
    v264 = v87;
    if (v169)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v170 + 16))(v170, v98, v169);
      v98 = (WTF::StringImpl *)*a1;
      v97 = a1[1];
    }
    else
    {
      v97 = 0;
      v98 = 0;
    }
    v87 = v264;
    v88 = v246;
    v103 = v189;
    v110 = v221;
    v105 = v230;
    LODWORD(v120) = v212;
  }
  else
  {
    v97 = 0;
    v98 = 0;
  }
LABEL_241:
  *a1 = 0;
  a1[1] = 0;
  v171 = a1[3];
  if (v171)
  {
    if (v97)
    {
      v209 = v120;
      v217 = v110;
      v227 = v105;
      v184 = v103;
      v241 = v88;
      v259 = v87;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v171 + 16))(v171, v98);
      v87 = v259;
      v88 = v241;
      v110 = v217;
      v105 = v227;
      v120 = v209;
      if (*a1)
      {
        v103 = v184;
        v140 = 0;
        v139 = 1;
        v138 = v281;
        v118 = v270;
        goto LABEL_179;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 176) = 0;
  if (v87)
    v172 = v88;
  else
    v172 = 1;
  if ((v172 & 1) == 0)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v87, v98);
  v173 = v273;
  if (!v43)
    v173 = 1;
  if ((v173 & 1) == 0)
    WTF::fastFree(v43, v98);
LABEL_198:
  if (v285)
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v283, v98);
  if (v287)
  {
    v149 = v286;
    v286 = 0;
    if (v149)
    {
      if (*(_DWORD *)v149 == 2)
        WTF::StringImpl::destroy(v149, v98);
      else
        *(_DWORD *)v149 -= 2;
    }
  }
  if (v289)
  {
    v150 = v288;
    v288 = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, v98);
      else
        *(_DWORD *)v150 -= 2;
    }
  }
  if (v291)
  {
    v151 = v290;
    v290 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 2)
        WTF::StringImpl::destroy(v151, v98);
      else
        *(_DWORD *)v151 -= 2;
    }
  }
}

void sub_196E3D224(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, WTF::StringImpl **a13, uint64_t a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,WTF::StringImpl *a31,char a32,WTF::StringImpl *a33,char a34,WTF::StringImpl *a35,char a36,WTF *a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  WTF *v46;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;

  if (!a13)
    a12 = 1;
  if ((a12 & 1) == 0)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a13, a2);
  if (!v46)
    a16 = 1;
  if ((a16 & 1) == 0)
    WTF::fastFree(v46, a2);
  if (a30)
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, a2);
  if (a32)
  {
    v50 = a31;
    a31 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, a2);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (a34)
  {
    v51 = a33;
    a33 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, a2);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  if (a36)
  {
    v52 = a35;
    a35 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, a2);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *result;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2);
  v4 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[7];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[8];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = a2[9];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = a2[10];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = a2[11];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v11;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::IntRect,void>::encode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5;

  v5 = *a2;
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v5);
  v5 = a2[1];
  return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v5);
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<int>(_QWORD *result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 4;
    v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v6) = a2;
      result[2] = v7;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, a2 + 2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, (uint64_t *)a2 + 15);
}

uint64_t IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[40];
  char v19;
  __int128 v20[7];
  char v21;
  _BYTE v22[40];

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_17;
  while (1)
  {
    IPC::Decoder::decode<WebCore::TextIndicatorData>(a1, v20);
    IPC::Decoder::decode<WebCore::AttributedString>((uint64_t *)a1, &v15);
    if (*a1)
    {
      if (!v17)
        goto LABEL_16;
      WebCore::AttributedString::AttributedString();
      WebCore::AttributedString::AttributedString();
      v19 = 1;
      MEMORY[0x19AEAEECC](v22);
    }
    else
    {
      v18[0] = 0;
      v19 = 0;
    }
    if (v17)
      MEMORY[0x19AEAEECC](&v15);
    if (!v19)
    {
      v7 = (void *)*a1;
      v13 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v14 = a1[3];
      if (v14)
      {
        if (v13)
          (*(void (**)(unint64_t, void *))(*(_QWORD *)v14 + 16))(v14, v7);
      }
    }
    if (!*a1)
      break;
    if (v6)
    {
      v15 = v4;
      if (v21)
      {
        WebCore::TextIndicatorData::TextIndicatorData((uint64_t)&v16, v20);
        if (v19)
        {
          WebCore::AttributedString::AttributedString();
          WebCore::DictionaryPopupInfo::DictionaryPopupInfo((_QWORD *)a2, (uint64_t)&v15);
          *(_BYTE *)(a2 + 160) = 1;
          WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)&v15);
          goto LABEL_13;
        }
      }
    }
LABEL_16:
    __break(1u);
LABEL_17:
    v9 = *a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 160) = 0;
LABEL_13:
  if (v19)
    MEMORY[0x19AEAEECC](v18);
  return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v7);
}

void sub_196E3D74C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  if (a34)
    MEMORY[0x19AEAEECC](&a29);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a36, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[2];
  __int128 v12;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  *(_OWORD *)v11 = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)v11);
  IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<IPC::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(a1, a2 + 56);
  v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)v11 = *(_OWORD *)(a2 + 192);
  v12 = v7;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)v11);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)&v12);
  LOBYTE(v11[0]) = 0;
  LOBYTE(v11[1]) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    v8 = *(WTF::StringImpl **)(a2 + 224);
    if (v8)
      *(_DWORD *)v8 += 2;
    v11[0] = v8;
    LOBYTE(v11[1]) = 1;
  }
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>(a1, (uint64_t)v11);
  if (LOBYTE(v11[1]))
  {
    v10 = v11[0];
    v11[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 304));
}

void sub_196E3D9D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  _BYTE *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  _BYTE *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  BOOL v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  __int128 v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  BOOL v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  char i;
  __int128 v136;
  WTF::StringImpl *v137;
  _BYTE v138[32];
  __int128 v139;
  __int128 v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  char v145;
  __int128 v146;
  uint64_t v147;
  char v148;
  char v149;
  _BYTE v150[32];
  WTF::StringImpl *v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  __int16 v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  __int128 v168;
  char v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  char v173;
  unsigned __int8 v174;
  __int128 v175;
  unsigned __int8 v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  unsigned __int8 v179;
  WTF::StringImpl *v180;
  char v181;
  WTF::StringImpl *v182;
  char v183;
  _BYTE v184[40];
  _BYTE v185[32];
  WTF::StringImpl *v186;
  unsigned __int8 v187;
  char v188;
  __int128 v189;
  unsigned __int8 v190;
  __int128 v191;
  unsigned __int8 v192;
  uint64_t v193;

  v2 = a1;
  v193 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_160;
  v7 = (char *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v83 = v4;
    v84 = 0;
    goto LABEL_161;
  }
  v8 = 0;
  for (i = *v7; ; i = 0)
  {
    IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v136);
    v10 = *v2;
    v5 = BYTE8(v136);
    if (!*v2)
    {
      if (BYTE8(v136))
      {
        v87 = (WTF::StringImpl *)v136;
        *(_QWORD *)&v136 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
          {
            WTF::StringImpl::destroy(v87, v9);
            v88 = *v2;
LABEL_199:
            v134 = 0;
            v113 = v2[1];
            *v2 = 0;
            v2[1] = 0;
            v114 = v2[3];
            if (v114)
            {
              if (v113)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v88);
              v134 = 0;
            }
            goto LABEL_7;
          }
          *(_DWORD *)v87 -= 2;
        }
      }
      v88 = 0;
      goto LABEL_199;
    }
    if (!BYTE8(v136))
      goto LABEL_159;
    v134 = (WTF::StringImpl *)v136;
LABEL_7:
    IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v136);
    v4 = *v2;
    v5 = BYTE8(v136);
    v133 = *v2;
    v132 = v8;
    if (*v2)
    {
      if (!BYTE8(v136))
        goto LABEL_159;
      v12 = (WTF::StringImpl *)v136;
    }
    else
    {
      if (BYTE8(v136))
      {
        v89 = (WTF::StringImpl *)v136;
        *(_QWORD *)&v136 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v11);
          else
            *(_DWORD *)v89 -= 2;
        }
      }
      v12 = 0;
      v115 = *v2;
      v116 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v117 = v2[3];
      if (v117)
      {
        if (v116)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v115);
        v12 = 0;
      }
    }
    v13 = IPC::Decoder::decode<WTF::MonotonicTime>(v2);
    v131 = v14;
    v129 = v13;
    v15 = v2[1];
    v16 = *v2;
    v17 = v2[2] - *v2;
    if (v15 <= v17)
    {
      v90 = 0;
      v91 = 0;
      *v2 = 0;
      v2[1] = 0;
      v92 = v2[3];
      if (v92)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
          v91 = *v2;
          v90 = v2[1];
        }
        else
        {
          v90 = 0;
          v91 = 0;
        }
      }
      goto LABEL_173;
    }
    v18 = (unsigned __int8 *)(v16 + v17);
    v2[2] = (uint64_t)(v18 + 1);
    if (!v16)
    {
      v90 = v15;
      v91 = 0;
LABEL_173:
      v15 = 0;
      v16 = 0;
      *v2 = 0;
      v2[1] = 0;
      v93 = v2[3];
      if (v93)
      {
        if (v90)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v91, v90);
          v16 = *v2;
          v15 = v2[1];
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
      }
      goto LABEL_174;
    }
    v19 = *v18;
    if (v19 < 2)
    {
      v130 = 0;
      v128 = v19 != 0;
      goto LABEL_14;
    }
LABEL_174:
    *v2 = 0;
    v2[1] = 0;
    v94 = v2[3];
    if (v94 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, v16);
    v95 = *v2;
    v96 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v97 = v2[3];
    if (v97 && v96)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v95);
    v128 = 0;
    v130 = 1;
LABEL_14:
    IPC::Decoder::decode<std::optional<unsigned long long>>(v2, (uint64_t)&v175);
    v20 = (_BYTE *)v2[1];
    v21 = (WTF::StringImpl *)*v2;
    v22 = v2[2] - *v2;
    if ((unint64_t)v20 <= v22)
    {
      v98 = 0;
      v99 = 0;
      *v2 = 0;
      v2[1] = 0;
      v100 = v2[3];
      if (v100)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
          v99 = *v2;
          v98 = (_BYTE *)v2[1];
        }
        else
        {
          v98 = 0;
          v99 = 0;
        }
      }
      goto LABEL_178;
    }
    v23 = (unsigned __int8 *)v21 + v22;
    v24 = (uint64_t)v21 + v22 + 1;
    v2[2] = v24;
    if (!v21)
    {
      v98 = v20;
      v99 = 0;
LABEL_178:
      v20 = 0;
      v21 = 0;
      *v2 = 0;
      v2[1] = 0;
      v101 = v2[3];
      if (v101)
      {
        if (v98)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v99);
          v21 = (WTF::StringImpl *)*v2;
          v20 = (_BYTE *)v2[1];
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
      }
      goto LABEL_179;
    }
    if (*v23 < 2u)
    {
      if (!*v23)
      {
        LOBYTE(v136) = 0;
        LOBYTE(v144) = 0;
        LOBYTE(v159) = 0;
        v173 = 0;
        v174 = 1;
        std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v136, v21);
        v49 = v174;
        goto LABEL_95;
      }
      v25 = v24 - (_QWORD)v21;
      v126 = v10;
      if ((unint64_t)v20 <= v24 - (uint64_t)v21)
      {
        *v2 = 0;
        v2[1] = 0;
        v108 = v2[3];
        if (!v108)
        {
          v127 = 0;
          v109 = 0;
          v21 = 0;
          goto LABEL_189;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
        v109 = 0;
        v127 = 0;
        v120 = *v2;
        v119 = v2[1];
        v121 = v2[3];
        *v2 = 0;
        v2[1] = 0;
        if (!v121)
          goto LABEL_245;
        v21 = 0;
        if (!v119)
          goto LABEL_189;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v120);
        v127 = 0;
        v21 = (WTF::StringImpl *)*v2;
        v27 = (_BYTE *)v2[1];
        v26 = (unsigned __int8 *)v2[2];
      }
      else
      {
        v26 = v23 + 2;
        v2[2] = (uint64_t)(v23 + 2);
        v127 = v23[1];
        v27 = v20;
      }
      v28 = v26 - (unsigned __int8 *)v21;
      if ((unint64_t)v27 > v28)
      {
        v29 = (char *)v21 + v28;
        v30 = (uint64_t)v21 + v28 + 1;
        v2[2] = v30;
        if (v21)
        {
          v31 = 0;
          v32 = *v29;
          goto LABEL_23;
        }
        v109 = (uint64_t)v27;
LABEL_189:
        *v2 = 0;
        v2[1] = 0;
        v110 = v2[3];
        if (v110)
        {
          if (v109)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v110 + 16))(v110, v21, v109);
            v32 = 0;
            v21 = (WTF::StringImpl *)*v2;
            v27 = (_BYTE *)v2[1];
            v31 = 1;
            v30 = v2[2];
LABEL_23:
            v33 = v30 - (_QWORD)v21;
            if ((unint64_t)v27 <= v33)
            {
              v109 = 0;
              v125 = v2[3];
              *v2 = 0;
              v2[1] = 0;
              if (v27 && v125)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125);
                v109 = *v2;
                v27 = (_BYTE *)v2[1];
              }
              else
              {
                v27 = 0;
              }
            }
            else
            {
              v34 = (unsigned __int8 *)v21 + v33;
              v2[2] = (uint64_t)(v34 + 1);
              if (v21)
              {
                v35 = *v34;
                if (v35 < 2)
                {
                  v36 = 0;
                  v37 = v35 != 0;
                  goto LABEL_27;
                }
LABEL_194:
                *v2 = 0;
                v2[1] = 0;
                v112 = v2[3];
                if (v112)
                {
                  if (v27)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v112 + 16))(v112, v21);
                    v37 = 0;
                    v122 = v2[3];
                    v123 = *v2;
                    v124 = v2[1];
                    v36 = 1;
                    *v2 = 0;
                    v2[1] = 0;
                    if (v122 && v124)
                    {
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 16))(v122, v123);
                      v37 = 0;
                    }
                  }
                  else
                  {
                    v37 = 0;
                    v36 = 1;
                  }
                }
                else
                {
                  v37 = 0;
                  v36 = 1;
                }
LABEL_27:
                IPC::Decoder::decode<std::optional<WebCore::RegistrableDomain>>((WTF::StringImpl *)&v191, v2);
                IPC::Decoder::decode<std::optional<WebCore::PCM::EphemeralNonce>>((WTF::StringImpl *)&v189, v2);
                IPC::Decoder::decode<std::optional<WebCore::RegistrableDomain>>((WTF::StringImpl *)&v186, v2);
                v39 = *v2;
                if (*v2)
                {
                  if ((unint64_t)v20 <= v25)
                    goto LABEL_159;
                  v5 = v127;
                  LOBYTE(v177) = v127;
                  if (v31)
                    goto LABEL_159;
                  BYTE1(v177) = v32;
                  if (v36)
                    goto LABEL_159;
                  BYTE2(v177) = v37;
                  v5 = v192;
                  if (!v192)
                    goto LABEL_159;
                  LOBYTE(v178) = 0;
                  v179 = 0;
                  v5 = BYTE8(v191);
                  if (BYTE8(v191))
                  {
                    v40 = (WTF::StringImpl *)v191;
                    *(_QWORD *)&v191 = 0;
                    v178 = v40;
                    v179 = 1;
                  }
                  v4 = v190;
                  if (!v190)
                    goto LABEL_159;
                  LOBYTE(v180) = 0;
                  v181 = 0;
                  v4 = BYTE8(v189);
                  if (BYTE8(v189))
                  {
                    v41 = (WTF::StringImpl *)v189;
                    *(_QWORD *)&v189 = 0;
                    v180 = v41;
                    v181 = 1;
                  }
                  if (!v188)
                    goto LABEL_159;
                  LOBYTE(v182) = 0;
                  v183 = 0;
                  v42 = v187;
                  if (v187)
                  {
                    v43 = v186;
                    v186 = 0;
                    v182 = v43;
                    v183 = 1;
                  }
                  v184[0] = 0;
                  v184[32] = 0;
                  v185[0] = 0;
                  v185[24] = 0;
                  LOWORD(v136) = (_WORD)v177;
                  BYTE2(v136) = BYTE2(v177);
                  BYTE8(v136) = 0;
                  LOBYTE(v137) = 0;
                  if (BYTE8(v191))
                  {
                    v44 = v178;
                    v178 = 0;
                    *((_QWORD *)&v136 + 1) = v44;
                    LOBYTE(v137) = 1;
                  }
                  v20 = v184;
                  v138[0] = 0;
                  v138[8] = 0;
                  if (BYTE8(v189))
                  {
                    v45 = v180;
                    v180 = 0;
                    *(_QWORD *)v138 = v45;
                    v138[8] = 1;
                  }
                  v138[16] = 0;
                  v138[24] = 0;
                  if (v187)
                  {
                    v46 = v182;
                    v182 = 0;
                    *(_QWORD *)&v138[16] = v46;
                    v138[24] = 1;
                  }
                  LOBYTE(v139) = 0;
                  v141 = 0;
                  LOBYTE(v142) = 0;
                  BYTE8(v143) = 0;
                  LOBYTE(v144) = 1;
                  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v185, v38);
                  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v184, v47);
                  if (v183)
                  {
                    v48 = v182;
                    v182 = 0;
                    if (v48)
                    {
                      if (*(_DWORD *)v48 == 2)
                        WTF::StringImpl::destroy(v48, v38);
                      else
                        *(_DWORD *)v48 -= 2;
                    }
                  }
                  if (v181)
                  {
                    v50 = v180;
                    v180 = 0;
                    if (v50)
                    {
                      if (*(_DWORD *)v50 == 2)
                        WTF::StringImpl::destroy(v50, v38);
                      else
                        *(_DWORD *)v50 -= 2;
                    }
                  }
                  if (v179)
                  {
                    v51 = v178;
                    v178 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, v38);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                  }
                  v52 = 1;
                }
                else
                {
                  v52 = 0;
                  LOBYTE(v136) = 0;
                  LOBYTE(v144) = 0;
                  v42 = v187;
                  if (!v188)
                    goto LABEL_68;
                }
                if (v42 && v186)
                {
                  if (*(_DWORD *)v186 == 2)
                    WTF::StringImpl::destroy(v186, v38);
                  else
                    *(_DWORD *)v186 -= 2;
                }
LABEL_68:
                if (v190 && BYTE8(v189) && (_QWORD)v189)
                {
                  if (*(_DWORD *)v189 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v189, v38);
                  else
                    *(_DWORD *)v189 -= 2;
                }
                if (v192 && BYTE8(v191) && (_QWORD)v191)
                {
                  if (*(_DWORD *)v191 == 2)
                  {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v191, v38);
                    if (v39)
                      goto LABEL_80;
LABEL_156:
                    v38 = (WTF::StringImpl *)*v2;
                    v81 = v2[1];
                    *v2 = 0;
                    v2[1] = 0;
                    v82 = v2[3];
                    if (v82)
                    {
                      v10 = v126;
                      if (!v81)
                        goto LABEL_81;
                      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v82 + 16))(v82, v38);
                      v52 = v144;
                    }
LABEL_80:
                    v10 = v126;
LABEL_81:
                    if (v52)
                    {
                      v159 = v136;
                      v160 = BYTE2(v136);
                      LOBYTE(v161) = 0;
                      v162 = 0;
                      if ((_BYTE)v137)
                      {
                        v53 = *((_QWORD *)&v136 + 1);
                        *((_QWORD *)&v136 + 1) = 0;
                        v161 = v53;
                        v162 = 1;
                      }
                      LOBYTE(v163) = 0;
                      v164 = 0;
                      if (v138[8])
                      {
                        v54 = *(_QWORD *)v138;
                        *(_QWORD *)v138 = 0;
                        v163 = v54;
                        v164 = 1;
                      }
                      LOBYTE(v165) = 0;
                      v166 = 0;
                      if (v138[24])
                      {
                        v55 = *(_QWORD *)&v138[16];
                        *(_QWORD *)&v138[16] = 0;
                        v165 = v55;
                        v166 = 1;
                      }
                      LOBYTE(v167) = 0;
                      v169 = 0;
                      if (v141)
                      {
                        v167 = v139;
                        v56 = v140;
                        v139 = 0u;
                        v140 = 0u;
                        v168 = v56;
                        v169 = 1;
                      }
                      LOBYTE(v170) = 0;
                      v172 = 0;
                      if (BYTE8(v143))
                      {
                        v57 = v142;
                        v142 = 0uLL;
                        v170 = v57;
                        v58 = v143;
                        *(_QWORD *)&v143 = 0;
                        v171 = v58;
                        v172 = 1;
                      }
                      v49 = 1;
                      v173 = 1;
                    }
                    else
                    {
                      v49 = 0;
                      LOBYTE(v159) = 0;
                    }
                    v174 = v49;
                    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v136, v38);
LABEL_95:
                    if (v49)
                      goto LABEL_96;
                    goto LABEL_181;
                  }
                  *(_DWORD *)v191 -= 2;
                }
                if (v39)
                  goto LABEL_80;
                goto LABEL_156;
              }
              v109 = 0;
            }
LABEL_192:
            *v2 = 0;
            v2[1] = 0;
            v111 = v2[3];
            if (v111)
            {
              if (v27)
              {
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v111 + 16))(v111, v109);
                v21 = (WTF::StringImpl *)*v2;
                v27 = (_BYTE *)v2[1];
              }
              else
              {
                v21 = 0;
              }
            }
            else
            {
              v21 = 0;
              v27 = 0;
            }
            goto LABEL_194;
          }
          v32 = 0;
          v27 = 0;
        }
        else
        {
          v32 = 0;
          v27 = 0;
          v109 = 0;
        }
        v31 = 1;
        goto LABEL_192;
      }
      v109 = 0;
      v118 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v27 && v118)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
        v21 = (WTF::StringImpl *)*v2;
        v109 = v2[1];
        goto LABEL_189;
      }
LABEL_245:
      v21 = 0;
      goto LABEL_189;
    }
LABEL_179:
    *v2 = 0;
    v2[1] = 0;
    v102 = v2[3];
    if (v102 && v20)
      (*(void (**)(uint64_t, WTF::StringImpl *, _BYTE *))(*(_QWORD *)v102 + 16))(v102, v21, v20);
    LOBYTE(v159) = 0;
    v174 = 0;
LABEL_181:
    v103 = *v2;
    v104 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v105 = v2[3];
    if (v105 && v104)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v103);
LABEL_96:
    IPC::Decoder::decode<std::optional<WTF::WallTime>>(v2, &v136);
    IPC::Decoder::decode<std::optional<WTF::WallTime>>(v2, &v177);
    v59 = *v2;
    if (*v2)
    {
      v5 = v137;
      if (!(_BYTE)v137)
        goto LABEL_159;
      v5 = v179;
      if (!v179)
        goto LABEL_159;
      v20 = *(_BYTE **)((char *)&v136 + 1);
      v60 = v136;
      *(_QWORD *)((char *)&v191 + 7) = v177;
      HIBYTE(v191) = (_BYTE)v178;
      v189 = v191;
    }
    else
    {
      v106 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v107 = v2[3];
      if (v107 && v106)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 16))(v107, 0);
      v60 = 0;
    }
    IPC::Decoder::decode<std::optional<WebCore::PCM::EphemeralNonce>>((WTF::StringImpl *)&v177, v2);
    IPC::Decoder::decode<WTF::String>(v2, &v191);
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 312) = 0;
      v2 = (uint64_t *)v133;
      v79 = v134;
      goto LABEL_130;
    }
    v2 = (uint64_t *)v133;
    v5 = v132;
    if (!v132)
    {
      if (v10)
      {
        if (v133)
        {
          v5 = v131;
          if ((_BYTE)v131)
          {
            v5 = v130;
            if (!v130)
            {
              v5 = v176;
              if (v176)
              {
                v5 = v174;
                if (v174)
                {
                  if (v59)
                  {
                    v5 = v179;
                    if (v179)
                    {
                      v5 = BYTE8(v191);
                      if (BYTE8(v191))
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_159:
    __break(1u);
LABEL_160:
    v83 = 0;
    v84 = 0;
    *v2 = 0;
    v2[1] = 0;
    v85 = v2[3];
    if (v85)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v85 + 16))(v85, v5, v4);
        v84 = *v2;
        v83 = v2[1];
      }
      else
      {
        v83 = 0;
        v84 = 0;
      }
    }
LABEL_161:
    *v2 = 0;
    v2[1] = 0;
    v86 = v2[3];
    if (v86 && v83)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v84);
    v8 = 1;
  }
  LOBYTE(v136) = i;
  *((_QWORD *)&v136 + 1) = v134;
  v137 = v12;
  *(_QWORD *)v138 = v129;
  v138[8] = v128;
  *(_OWORD *)&v138[16] = v175;
  LOBYTE(v139) = 0;
  v149 = 0;
  if (v173)
  {
    LOWORD(v139) = v159;
    BYTE2(v139) = v160;
    BYTE8(v139) = 0;
    LOBYTE(v140) = 0;
    if (v162)
    {
      v62 = v161;
      v161 = 0;
      *((_QWORD *)&v139 + 1) = v62;
      LOBYTE(v140) = 1;
    }
    BYTE8(v140) = 0;
    v141 = 0;
    if (v164)
    {
      v63 = v163;
      v163 = 0;
      *((_QWORD *)&v140 + 1) = v63;
      v141 = 1;
    }
    LOBYTE(v142) = 0;
    BYTE8(v142) = 0;
    if (v166)
    {
      v64 = v165;
      v165 = 0;
      *(_QWORD *)&v142 = v64;
      BYTE8(v142) = 1;
    }
    LOBYTE(v143) = 0;
    v145 = 0;
    if (v169)
    {
      v65 = v167;
      v167 = 0u;
      v66 = v168;
      v168 = 0u;
      v143 = v65;
      v144 = v66;
      v145 = 1;
    }
    LOBYTE(v146) = 0;
    v148 = 0;
    if (v172)
    {
      v67 = v170;
      v170 = 0uLL;
      v146 = v67;
      v68 = v171;
      v171 = 0;
      v147 = v68;
      v148 = 1;
    }
    v149 = 1;
  }
  v150[0] = v60;
  *(_QWORD *)&v150[1] = v20;
  *(_OWORD *)&v150[9] = v189;
  *(_DWORD *)&v150[25] = (_DWORD)v186;
  *(_DWORD *)&v150[28] = *(_DWORD *)((char *)&v186 + 3);
  LOBYTE(v151) = 0;
  v152 = 0;
  if ((_BYTE)v178)
  {
    v69 = v177;
    v177 = 0;
    v151 = v69;
    v152 = 1;
  }
  v157 = 0;
  v153 = 0u;
  v154 = 0u;
  LOBYTE(v155) = 0;
  v70 = v191;
  *(_QWORD *)&v191 = 0;
  v158 = v70;
  *(_BYTE *)a2 = i;
  *((_QWORD *)&v136 + 1) = 0;
  v137 = 0;
  *(_QWORD *)(a2 + 8) = v134;
  *(_QWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v138;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v138[9];
  std::__optional_move_base<WebCore::PCM::AttributionTriggerData,false>::__optional_move_base[abi:sn180100](a2 + 56, (uint64_t)&v139);
  v72 = *(_OWORD *)&v150[16];
  *(_OWORD *)(a2 + 192) = *(_OWORD *)v150;
  *(_OWORD *)(a2 + 208) = v72;
  *(_BYTE *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 232) = 0;
  if (v152)
  {
    v73 = v151;
    v151 = 0;
    *(_QWORD *)(a2 + 224) = v73;
    *(_BYTE *)(a2 + 232) = 1;
  }
  v74 = v153;
  v75 = v154;
  v153 = 0u;
  v154 = 0u;
  *(_OWORD *)(a2 + 240) = v74;
  *(_OWORD *)(a2 + 256) = v75;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 296) = 0;
  if (v157)
  {
    v76 = v155;
    v155 = 0uLL;
    *(_OWORD *)(a2 + 272) = v76;
    v77 = v156;
    v156 = 0;
    *(_QWORD *)(a2 + 288) = v77;
    *(_BYTE *)(a2 + 296) = 1;
  }
  v78 = v158;
  v158 = 0;
  *(_QWORD *)(a2 + 304) = v78;
  *(_BYTE *)(a2 + 312) = 1;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v136, v71);
  v12 = 0;
  v79 = 0;
LABEL_130:
  if (BYTE8(v191))
  {
    v80 = (WTF::StringImpl *)v191;
    *(_QWORD *)&v191 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v61);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  if (v179 && (_BYTE)v178 && v177)
  {
    if (*(_DWORD *)v177 == 2)
      WTF::StringImpl::destroy(v177, v61);
    else
      *(_DWORD *)v177 -= 2;
  }
  if (v174)
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v61);
  if (!v2 || !v12)
  {
LABEL_147:
    if (!v10)
      return;
    goto LABEL_148;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_147;
  }
  WTF::StringImpl::destroy(v12, v61);
  if (v10)
  {
LABEL_148:
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v61);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
}

void sub_196E3E900(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, ...)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  va_list va;

  va_start(va, a11);
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (a9 && v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (a3 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WebCore::PCM::EphemeralNonce>>(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;

  v3 = result;
  v4 = a2[2];
  v5 = (WTF::StringImpl *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_12:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_22;
  if (!v9)
  {
    *(_BYTE *)result = 0;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v17);
  v5 = (WTF::StringImpl *)*a2;
  if (*a2)
  {
    if (v18)
    {
      *(_QWORD *)v3 = v17;
      LOBYTE(v9) = 1;
LABEL_9:
      *((_BYTE *)v3 + 8) = v9;
      *((_BYTE *)v3 + 16) = 1;
      return result;
    }
    __break(1u);
LABEL_20:
    WTF::StringImpl::destroy(result, v5);
    v5 = (WTF::StringImpl *)*a2;
    goto LABEL_21;
  }
  if (!v18)
    goto LABEL_21;
  result = v17;
  v17 = 0;
  if (!result)
    goto LABEL_21;
  if (*(_DWORD *)result == 2)
    goto LABEL_20;
  *(_DWORD *)result -= 2;
LABEL_21:
  v6 = a2[1];
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (v14 && v6)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v5);
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 16) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
    if (v16)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::PCM::AttributionTriggerData,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4;
  char v5;
  char v6;

  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = a2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = a2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>(a1, (uint64_t)(a2 + 24));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>(a1, (uint64_t)(a2 + 40));
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WebCore::RegistrableDomain>>(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    goto LABEL_12;
  }
  if (!v9)
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 8) = 0;
    goto LABEL_8;
  }
  result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_QWORD *)v3 = v17;
    *((_BYTE *)v3 + 8) = 1;
LABEL_8:
    *((_BYTE *)v3 + 16) = 1;
    return result;
  }
LABEL_12:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 16) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
    if (v16)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ApplePayRecurringPaymentRequest,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayLineItem>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayLineItem> const&>(a1, (uint64_t)(a2 + 11));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 22);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 23);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 24);
}

void IPC::ArgumentCoder<WebCore::ApplePayPaymentTokenContext,void>::encode(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 4);
}

void IPC::ArgumentCoder<WebCore::ApplePayDeferredPaymentRequest,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, (uint64_t)(a2 + 1));
  v4 = a2[11];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 13);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 14);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 15);
}

void IPC::ArgumentCoder<WebCore::ApplePayPaymentOrderDetails,void>::encode(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (*a1)
  {
    if (v7)
    {
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      return result;
    }
    __break(1u);
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ApplePayAutomaticReloadPaymentRequest,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 11);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 13);
}

void IPC::ArgumentCoder<WebCore::ApplePayDateComponents,void>::encode(IPC::Encoder *a1, int *a2)
{
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 4);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 6);
}

uint64_t IPC::Decoder::decode<WebCore::ApplePayDateComponents>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;

  v4 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  v6 = v5;
  v7 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  v9 = v8;
  v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  v12 = v11;
  result = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (*a2)
  {
    if (v6 && v9 && v12 && v14)
    {
      *(_DWORD *)a1 = v4;
      *(_BYTE *)(a1 + 4) = BYTE4(v4);
      *(_DWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 12) = BYTE4(v7);
      *(_DWORD *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 20) = BYTE4(v10);
      *(_DWORD *)(a1 + 24) = result;
      *(_BYTE *)(a1 + 28) = BYTE4(result);
      *(_BYTE *)(a1 + 32) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ApplePaySetupConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 3));
}

char *IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  v5 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_BYTE *)(a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 64));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 72));
}

char *IPC::ArgumentCoder<WebCore::ApplePayShippingMethod,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 3);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDateComponentsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDateComponentsRange> const&>(a1, (uint64_t)(v2 + 4));
  LOBYTE(v2) = *((_BYTE *)v2 + 100);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ApplePayShippingMethod,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  WTF::StringImpl *result;
  unint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  int v37;
  int v38;
  int v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  __int128 v48;
  __int128 v49;
  char v50;
  char v51;
  _BYTE v52[31];
  char v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  _OWORD v57[4];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a1, &v46);
  IPC::Decoder::decode<WTF::String>(a1, &v44);
  IPC::Decoder::decode<WTF::String>(a1, &v42);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v40);
  v6 = a1[1];
  v7 = (WTF::StringImpl *)*a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
    goto LABEL_38;
  v9 = (unsigned __int8 *)v7 + v8;
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v22 = v6;
    v23 = 0;
    goto LABEL_39;
  }
  v10 = *v9;
  if (v10 >= 2)
    goto LABEL_40;
  if (v10)
  {
    IPC::Decoder::decode<WebCore::ApplePayDateComponents>((uint64_t)&v51, a1);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ApplePayDateComponents>((uint64_t)&v48, a1);
    v7 = (WTF::StringImpl *)*a1;
    if (!*a1)
    {
      v31 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v26 = a1[3];
      if (!v26 || !v31)
        goto LABEL_51;
      v7 = 0;
      goto LABEL_72;
    }
    if (!v53)
      goto LABEL_37;
    v11 = v51;
    v57[0] = *(_OWORD *)v52;
    *(_OWORD *)((char *)v57 + 15) = *(_OWORD *)&v52[15];
    if (!v50)
      goto LABEL_37;
    v12 = 0;
    *(_OWORD *)((char *)&v57[1] + 15) = v48;
    *(_OWORD *)((char *)&v57[2] + 15) = v49;
    *(_OWORD *)((char *)v56 + 15) = v49;
    v54 = v57[0];
    v55 = v57[1];
    v56[0] = v57[2];
    v2 = 1;
  }
  else
  {
    v12 = 0;
    v2 = 0;
    v11 = 0;
  }
  while (1)
  {
    v6 = a1[1];
    if (v6 <= a1[2] - (uint64_t)v7)
      break;
    v13 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v13 + 1);
    if (!v7)
    {
      v27 = v6;
      v28 = 0;
      goto LABEL_44;
    }
    v14 = *v13;
    if (v14 > 1)
      goto LABEL_45;
    v15 = 0;
    v16 = v14 != 0;
LABEL_14:
    if (v47)
    {
      v17 = v46;
      v46 = 0;
      if (v45)
      {
        v18 = v44;
        v44 = 0;
        if (v43)
        {
          v19 = v42;
          v42 = 0;
          if (v41)
          {
            v20 = v40;
            v40 = 0;
            if (!v12 && !v15)
            {
              v21 = v55;
              *(_OWORD *)(a2 + 33) = v54;
              *(_QWORD *)a2 = v17;
              *(_QWORD *)(a2 + 8) = v18;
              *(_QWORD *)(a2 + 16) = v19;
              *(_QWORD *)(a2 + 24) = v20;
              *(_BYTE *)(a2 + 32) = v11;
              *(_OWORD *)(a2 + 49) = v21;
              *(_OWORD *)(a2 + 65) = v56[0];
              *(_OWORD *)(a2 + 80) = *(_OWORD *)((char *)v56 + 15);
              *(_BYTE *)(a2 + 96) = v2;
              *(_BYTE *)(a2 + 100) = v16;
              *(_BYTE *)(a2 + 104) = 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
LABEL_37:
    __break(1u);
LABEL_38:
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
LABEL_39:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
        v7 = (WTF::StringImpl *)*a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v6)
LABEL_72:
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v26 + 16))(v26, v7);
LABEL_51:
    v32 = *a1;
    v33 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v33)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v32);
      v11 = 0;
      v7 = (WTF::StringImpl *)*a1;
    }
    else
    {
      v7 = 0;
      v11 = 0;
    }
    v12 = 1;
  }
  v27 = 0;
  v28 = 0;
  *a1 = 0;
  a1[1] = 0;
  v29 = a1[3];
  if (v29)
  {
    v36 = v11;
    v39 = v12;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v28 = *a1;
      v27 = a1[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v11 = v36;
    v12 = v39;
  }
LABEL_44:
  v6 = 0;
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  v30 = a1[3];
  if (v30)
  {
    v35 = v11;
    v38 = v12;
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
      v7 = (WTF::StringImpl *)*a1;
      v6 = a1[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v11 = v35;
    v12 = v38;
  }
LABEL_45:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v6)
    {
      v34 = v11;
      v37 = v12;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v7);
      v11 = v34;
      v12 = v37;
      if (*a1)
      {
        v16 = 0;
        v15 = 1;
        goto LABEL_14;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v41)
  {
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_21:
  if (v43)
  {
    result = v42;
    v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v45)
  {
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v47)
  {
    result = v46;
    v46 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E3F7D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, char a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, char a17)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ApplePayError,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  char *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  char *result;
  WTF::StringImpl *v12;

  v4 = *(_BYTE *)(a2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(unsigned __int16 *)(a2 + 13);
  v6 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v5 > 0xFF)
  {
    *v6 = 1;
    *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  }
  else
  {
    *v6 = 0;
  }
  v7 = *(WTF::StringImpl **)(a2 + 16);
  if (v7)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)&v12);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(unsigned __int16 *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10 > 0xFF)
  {
    *result = 1;
    result = IPC::Encoder::grow(a1, 1uLL, 1);
    *result = v10;
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 304);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 424);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 448);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 584);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 616);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 632);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 648));
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;
  void *v21;
  WTF::StringImpl *v22;
  _BYTE v24[8];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[120];
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[136];
  WTF *v39;
  uint64_t v40;
  char v41;
  char v42;
  _BYTE v43[616];
  _QWORD v44[2];
  _QWORD v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  WTF *v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  _BYTE v60[136];
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  _BYTE v66[120];
  char v67;
  uint64_t v68[25];
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE v74[8];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;

  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v74, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v71, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v68, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v66, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v62, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v60, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)&v55, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v52);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v49, a1);
  IPC::Decoder::decode<WTF::String>(a1, &v47);
  if (!*a1)
    goto LABEL_53;
  if (!v81)
    goto LABEL_52;
  v24[0] = v74[0];
  v5 = v75;
  v75 = 0uLL;
  v25 = v5;
  v26 = v76;
  v27 = v77;
  v6 = v79;
  v79 = 0;
  v28 = v78;
  v29 = v6;
  v30 = v80;
  if (!v73)
    goto LABEL_52;
  v31 = v71;
  v7 = v72;
  v71 = 0;
  v72 = 0;
  v32 = v7;
  if (!v70)
    goto LABEL_52;
  std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v33, v68);
  if (!v67)
    goto LABEL_52;
  std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)v66);
  if (!v65)
    goto LABEL_52;
  LOBYTE(v35) = 0;
  v37 = 0;
  if (v64)
  {
    v8 = v62;
    v62 = 0;
    v35 = v8;
    v9 = v63;
    v63 = 0;
    v36 = v9;
    v37 = 1;
  }
  if (!v61)
    goto LABEL_52;
  std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v38, (uint64_t)v60);
  if (!v59)
    goto LABEL_52;
  LOBYTE(v39) = 0;
  v42 = 0;
  if (v58)
  {
    v41 = 0;
    if (v57)
    {
      v10 = v55;
      v55 = 0;
      v39 = v10;
      v11 = v56;
      v56 = 0;
      v40 = v11;
      v41 = 1;
    }
    v42 = 1;
  }
  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v43, (uint64_t)v24);
  if (!v54)
    goto LABEL_52;
  v12 = v52;
  v52 = 0;
  v44[0] = v12;
  v13 = v53;
  v53 = 0;
  v44[1] = v13;
  if (!v51 || (v14 = v49, v49 = 0, v45[0] = v14, v15 = v50, v50 = 0, v45[1] = v15, !v48))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    *a2 = 0;
    a2[656] = 0;
    goto LABEL_23;
  }
  v16 = v47;
  v47 = 0;
  v46 = v16;
  std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentMethodUpdate>((uint64_t)a2, (uint64_t)v43);
  v18 = v46;
  v46 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v17);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v19);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v43, v20);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v24, v21);
LABEL_23:
  if (v48)
  {
    v22 = v47;
    v47 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v4);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (v51)
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v4);
  if (v54)
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
  if (v59 && v58 && v57 && v55)
    WTF::fastFree(v55, v4);
  if (v61 && v60[128])
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v60, v4);
  if (v65 && v64)
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v4);
  if (v67 && v66[112])
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v66, v4);
  if (v70 && v69)
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v68, v4);
  if (v73)
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v4);
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v74, v4);
}

void sub_196E3FDF8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  va_list va;

  va_start(va, a3);
  v7 = (WTF::StringImpl *)STACK[0x4F8];
  STACK[0x4F8] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v8);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x270], v9);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)va, v10);
  if (LOBYTE(STACK[0x508]))
  {
    v12 = (WTF::StringImpl *)STACK[0x500];
    STACK[0x500] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if (LOBYTE(STACK[0x520]))
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x510], v11);
  if (LOBYTE(STACK[0x538]))
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x528], v11);
  if (LOBYTE(STACK[0x560]) && LOBYTE(STACK[0x558]) && LOBYTE(STACK[0x550]) && STACK[0x540])
    WTF::fastFree((WTF *)STACK[0x540], v11);
  if (LOBYTE(STACK[0x5F0]) && LOBYTE(STACK[0x5E8]))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x568], v11);
  if (LOBYTE(STACK[0x610]) && LOBYTE(STACK[0x608]))
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5F8], v11);
  if (LOBYTE(STACK[0x690]) && LOBYTE(STACK[0x688]))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x618], v11);
  if (LOBYTE(STACK[0x768]) && LOBYTE(STACK[0x760]))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x698], v11);
  if (*(_BYTE *)(v5 - 144))
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 - 160, v11);
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v5 - 136, v11);
  _Unwind_Resume(a1);
}

void sub_196E40018()
{
  JUMPOUT(0x196E3FFC8);
}

void sub_196E40020()
{
  JUMPOUT(0x196E3FFE0);
}

void sub_196E40028()
{
  JUMPOUT(0x196E3FFF8);
}

void sub_196E40030()
{
  JUMPOUT(0x196E40008);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E4008C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  LOWORD(v8) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  v9 = a1 + 80;
  *(_WORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 88) = 0;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 88) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 92) = v10;
  std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100](a1 + 96, (uint64_t *)(a2 + 96));
  std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v9 + 224), a2 + 304);
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    v11 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a1 + 424) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 432);
    *(_DWORD *)(a2 + 432) = 0;
    *(_DWORD *)(a1 + 432) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 436);
    *(_DWORD *)(a2 + 436) = 0;
    *(_DWORD *)(a1 + 436) = v11;
    *(_BYTE *)(a1 + 440) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 448), a2 + 448);
  std::__optional_move_base<WebCore::ApplePayDisbursementRequest,false>::__optional_move_base[abi:sn180100](a1 + 584, (uint64_t *)(a2 + 584));
  return a1;
}

void sub_196E401D4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ApplePayRecurringPaymentRequest *v4;
  WebCore::ApplePayAutomaticReloadPaymentRequest *v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (*(_BYTE *)(v2 + 440))
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  if (*(_BYTE *)(v2 + 416))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(v5, a2);
  if (*(_BYTE *)(v2 + 296))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(v4, a2);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v9 = *(WTF::StringImpl **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 304);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 424);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 448);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 584);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 616);
  return IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 632);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  _BYTE v20[8];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[120];
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[136];
  WTF *v35;
  WTF *v36;
  char v37;
  char v38;
  _BYTE v39[616];
  _QWORD v40[2];
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  WTF *v48[2];
  char v49;
  char v50;
  char v51;
  _BYTE v52[136];
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  _BYTE v58[120];
  char v59;
  uint64_t v60[25];
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _BYTE v66[8];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;

  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v66, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v63, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v60, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v58, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v54, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v52, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)v48, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v42, a1);
  if (*a1)
  {
    if (v73)
    {
      v20[0] = v66[0];
      v5 = v67;
      v67 = 0uLL;
      v21 = v5;
      v22 = v68;
      v23 = v69;
      v6 = v71;
      v71 = 0;
      v24 = v70;
      v25 = v6;
      v26 = v72;
      if (v65)
      {
        v27 = v63;
        v7 = v64;
        v63 = 0;
        v64 = 0;
        v28 = v7;
        if (v62)
        {
          std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v29, v60);
          if (v59)
          {
            std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v30, (uint64_t)v58);
            if (v57)
            {
              LOBYTE(v31) = 0;
              v33 = 0;
              if (v56)
              {
                v8 = v54;
                v54 = 0;
                v31 = v8;
                v9 = v55;
                v55 = 0;
                v32 = v9;
                v33 = 1;
              }
              if (v53)
              {
                std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)v52);
                if (v51)
                {
                  LOBYTE(v35) = 0;
                  v38 = 0;
                  if (v50)
                  {
                    v37 = 0;
                    if (v49)
                    {
                      v10 = v48[0];
                      v48[0] = 0;
                      v35 = v10;
                      v36 = v48[1];
                      v37 = 1;
                    }
                    v38 = 1;
                  }
                  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v39, (uint64_t)v20);
                  if (v47)
                  {
                    v11 = v45;
                    v45 = 0;
                    v40[0] = v11;
                    v12 = v46;
                    v46 = 0;
                    v40[1] = v12;
                    if (v44)
                    {
                      v13 = v42;
                      v42 = 0;
                      v41[0] = v13;
                      v14 = v43;
                      v43 = 0;
                      v41[1] = v14;
                      std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)a2, (uint64_t)v39);
                      WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v15);
                      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v16);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v39, v17);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v20, v18);
                      goto LABEL_18;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[648] = 0;
LABEL_18:
  if (v44)
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v4);
  if (v47)
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, (WTF::StringImpl *)v4);
  if (v51 && v50 && v49 && v48[0])
    WTF::fastFree(v48[0], v4);
  if (v53 && v52[128])
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v52, (WTF::StringImpl *)v4);
  if (v57 && v56)
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, (WTF::StringImpl *)v4);
  if (v59 && v58[112])
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v58, (WTF::StringImpl *)v4);
  if (v62 && v61)
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v60, (WTF::StringImpl *)v4);
  if (v65)
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v4);
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, (WTF::StringImpl *)v4);
}

void sub_196E40644(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  void *v14;
  void *v15;
  void *v16;

  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v13);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x268], v14);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&a9, v15);
  if (LOBYTE(STACK[0x500]))
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x4F0], v16);
  if (LOBYTE(STACK[0x518]))
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x508], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x540]) && LOBYTE(STACK[0x538]) && LOBYTE(STACK[0x530]) && STACK[0x520])
    WTF::fastFree((WTF *)STACK[0x520], v16);
  if (LOBYTE(STACK[0x5D0]) && LOBYTE(STACK[0x5C8]))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x548], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x5F0]) && LOBYTE(STACK[0x5E8]))
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5D8], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x670]) && LOBYTE(STACK[0x668]))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x5F8], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x748]) && LOBYTE(STACK[0x740]))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x678], (WTF::StringImpl *)v16);
  if (*(_BYTE *)(v11 - 144))
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 - 160, v16);
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v11 - 136, (WTF::StringImpl *)v16);
  _Unwind_Resume(a1);
}

void sub_196E40814()
{
  JUMPOUT(0x196E407DCLL);
}

void sub_196E4081C()
{
  JUMPOUT(0x196E407F4);
}

void sub_196E40824()
{
  JUMPOUT(0x196E40804);
}

char *IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 304);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 424);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 448);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 584);
  return IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 616);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[120];
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[136];
  WTF *v34;
  WTF *v35;
  char v36;
  char v37;
  _BYTE v38[616];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  WTF *v44[2];
  char v45;
  char v46;
  char v47;
  _BYTE v48[136];
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  _BYTE v54[120];
  char v55;
  uint64_t v56[25];
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _BYTE v62[8];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  char v69;

  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v62, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v59, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v56, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v54, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v50, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v48, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)v44, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v41, a1);
  if (*a1)
  {
    if (v69)
    {
      v19[0] = v62[0];
      v5 = v63;
      v63 = 0uLL;
      v20 = v5;
      v21 = v64;
      v22 = v65;
      v6 = v67;
      v67 = 0;
      v23 = v66;
      v24 = v6;
      v25 = v68;
      if (v61)
      {
        v26 = v59;
        v7 = v60;
        v59 = 0;
        v60 = 0;
        v27 = v7;
        if (v58)
        {
          std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v28, v56);
          if (v55)
          {
            std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v29, (uint64_t)v54);
            if (v53)
            {
              LOBYTE(v30) = 0;
              v32 = 0;
              if (v52)
              {
                v8 = v50;
                v50 = 0;
                v30 = v8;
                v9 = v51;
                v51 = 0;
                v31 = v9;
                v32 = 1;
              }
              if (v49)
              {
                std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v33, (uint64_t)v48);
                if (v47)
                {
                  LOBYTE(v34) = 0;
                  v37 = 0;
                  if (v46)
                  {
                    v36 = 0;
                    if (v45)
                    {
                      v10 = v44[0];
                      v44[0] = 0;
                      v34 = v10;
                      v35 = v44[1];
                      v36 = 1;
                    }
                    v37 = 1;
                  }
                  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v38, (uint64_t)v19);
                  if (v43)
                  {
                    v11 = v41;
                    v41 = 0;
                    v39 = v11;
                    v12 = v42;
                    v42 = 0;
                    v40 = v12;
                    WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(a2, (uint64_t)v38);
                    v13 = v39;
                    v39 = 0;
                    *(_QWORD *)(a2 + 616) = v13;
                    v14 = v40;
                    v40 = 0;
                    *(_QWORD *)(a2 + 624) = v14;
                    *(_BYTE *)(a2 + 632) = 1;
                    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v15);
                    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v38, v16);
                    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v19, v17);
                    goto LABEL_17;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 632) = 0;
LABEL_17:
  if (v43)
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v4);
  if (v47 && v46 && v45 && v44[0])
    WTF::fastFree(v44[0], v4);
  if (v49 && v48[128])
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v48, (WTF::StringImpl *)v4);
  if (v53 && v52)
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, (WTF::StringImpl *)v4);
  if (v55 && v54[112])
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v54, (WTF::StringImpl *)v4);
  if (v58 && v57)
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v56, (WTF::StringImpl *)v4);
  if (v61)
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v4);
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, (WTF::StringImpl *)v4);
}

void sub_196E40BAC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x270], v6);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)va, v7);
  if (LOBYTE(STACK[0x4F8]))
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x4E8], v8);
  if (LOBYTE(STACK[0x520]) && LOBYTE(STACK[0x518]) && LOBYTE(STACK[0x510]) && STACK[0x500])
    WTF::fastFree((WTF *)STACK[0x500], v8);
  if (LOBYTE(STACK[0x5B0]) && LOBYTE(STACK[0x5A8]))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x528], (WTF::StringImpl *)v8);
  if (LOBYTE(STACK[0x5D0]) && LOBYTE(STACK[0x5C8]))
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5B8], (WTF::StringImpl *)v8);
  if (LOBYTE(STACK[0x650]) && LOBYTE(STACK[0x648]))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x5D8], (WTF::StringImpl *)v8);
  if (LOBYTE(STACK[0x728]) && LOBYTE(STACK[0x720]))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x658], (WTF::StringImpl *)v8);
  if (*(_BYTE *)(v4 - 144))
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 - 160, v8);
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v4 - 136, (WTF::StringImpl *)v8);
  _Unwind_Resume(a1);
}

void sub_196E40D64()
{
  JUMPOUT(0x196E40D44);
}

void sub_196E40D6C()
{
  JUMPOUT(0x196E40D54);
}

void IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::encode(IPC::Encoder *a1, __int16 *a2)
{
  uint64_t v4;
  __int16 v5;

  v4 = (uint64_t)(a2 + 12);
  v5 = *a2;
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v5;
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 4));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayPaymentOrderDetails> const&>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int16 v11;
  _QWORD v12[2];
  _OWORD v13[2];
  char v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = IPC::Decoder::decode<unsigned short>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v19);
  result = IPC::Decoder::decode<std::optional<WebCore::ApplePayPaymentOrderDetails>>(a1, (uint64_t)&v15);
  if (!*a1)
    goto LABEL_14;
  if ((v4 & 0xFF0000) == 0 || (v11 = v4, !v21) || (v12[0] = v19, v7 = v20, v19 = 0, v20 = 0, v12[1] = v7, !v18))
  {
    __break(1u);
LABEL_14:
    *a2 = 0;
    a2[64] = 0;
    goto LABEL_8;
  }
  LOBYTE(v13[0]) = 0;
  v14 = 0;
  if (v17)
  {
    v8 = v16;
    v13[0] = v15;
    v15 = 0u;
    v16 = 0u;
    v13[1] = v8;
    v14 = 1;
  }
  std::__optional_destruct_base<WebCore::ApplePayPaymentAuthorizationResult,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentAuthorizationResult>((uint64_t)a2, (uint64_t)&v11);
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
  result = WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
LABEL_8:
  if (v18)
    result = std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
  if (v21)
    return WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  return result;
}

void sub_196E40ED4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](v23, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v26);
  if (a22)
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17, v27);
  if (*(_BYTE *)(v24 - 40))
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24 - 56, v27);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::ApplePayPaymentOrderDetails>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E40F6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 40))
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ApplePayInstallmentConfiguration,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 4);
  v5 = v2[40];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 7);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 10);
  LOBYTE(v2) = v2[88];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::ApplePayInstallmentItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;

  v4 = (uint64_t *)(a2 + 40);
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePayCouponCodeUpdate,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  _BYTE v20[8];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[120];
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[136];
  WTF *v35;
  WTF *v36;
  char v37;
  char v38;
  _BYTE v39[616];
  _QWORD v40[2];
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  WTF *v48[2];
  char v49;
  char v50;
  char v51;
  _BYTE v52[136];
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  _BYTE v58[120];
  char v59;
  uint64_t v60[25];
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _BYTE v66[8];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;

  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v66, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v63, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)v60, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)v58, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v54, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v52, a1);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)v48, (char **)a1);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v42, a1);
  if (*a1)
  {
    if (v73)
    {
      v20[0] = v66[0];
      v5 = v67;
      v67 = 0uLL;
      v21 = v5;
      v22 = v68;
      v23 = v69;
      v6 = v71;
      v71 = 0;
      v24 = v70;
      v25 = v6;
      v26 = v72;
      if (v65)
      {
        v27 = v63;
        v7 = v64;
        v63 = 0;
        v64 = 0;
        v28 = v7;
        if (v62)
        {
          std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v29, v60);
          if (v59)
          {
            std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v30, (uint64_t)v58);
            if (v57)
            {
              LOBYTE(v31) = 0;
              v33 = 0;
              if (v56)
              {
                v8 = v54;
                v54 = 0;
                v31 = v8;
                v9 = v55;
                v55 = 0;
                v32 = v9;
                v33 = 1;
              }
              if (v53)
              {
                std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v34, (uint64_t)v52);
                if (v51)
                {
                  LOBYTE(v35) = 0;
                  v38 = 0;
                  if (v50)
                  {
                    v37 = 0;
                    if (v49)
                    {
                      v10 = v48[0];
                      v48[0] = 0;
                      v35 = v10;
                      v36 = v48[1];
                      v37 = 1;
                    }
                    v38 = 1;
                  }
                  WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)v39, (uint64_t)v20);
                  if (v47)
                  {
                    v11 = v45;
                    v45 = 0;
                    v40[0] = v11;
                    v12 = v46;
                    v46 = 0;
                    v40[1] = v12;
                    if (v44)
                    {
                      v13 = v42;
                      v42 = 0;
                      v41[0] = v13;
                      v14 = v43;
                      v43 = 0;
                      v41[1] = v14;
                      std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)a2, (uint64_t)v39);
                      WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v15);
                      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v16);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v39, v17);
                      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v20, v18);
                      goto LABEL_18;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[648] = 0;
LABEL_18:
  if (v44)
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v4);
  if (v47)
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, (WTF::StringImpl *)v4);
  if (v51 && v50 && v49 && v48[0])
    WTF::fastFree(v48[0], v4);
  if (v53 && v52[128])
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v52, (WTF::StringImpl *)v4);
  if (v57 && v56)
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, (WTF::StringImpl *)v4);
  if (v59 && v58[112])
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v58, (WTF::StringImpl *)v4);
  if (v62 && v61)
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v60, (WTF::StringImpl *)v4);
  if (v65)
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v4);
  return std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, (WTF::StringImpl *)v4);
}

void sub_196E41404(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  void *v14;
  void *v15;
  void *v16;

  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v13);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&STACK[0x268], v14);
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&a9, v15);
  if (LOBYTE(STACK[0x500]))
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x4F0], v16);
  if (LOBYTE(STACK[0x518]))
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x508], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x540]) && LOBYTE(STACK[0x538]) && LOBYTE(STACK[0x530]) && STACK[0x520])
    WTF::fastFree((WTF *)STACK[0x520], v16);
  if (LOBYTE(STACK[0x5D0]) && LOBYTE(STACK[0x5C8]))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&STACK[0x548], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x5F0]) && LOBYTE(STACK[0x5E8]))
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x5D8], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x670]) && LOBYTE(STACK[0x668]))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&STACK[0x5F8], (WTF::StringImpl *)v16);
  if (LOBYTE(STACK[0x748]) && LOBYTE(STACK[0x740]))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&STACK[0x678], (WTF::StringImpl *)v16);
  if (*(_BYTE *)(v11 - 144))
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 - 160, v16);
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v11 - 136, (WTF::StringImpl *)v16);
  _Unwind_Resume(a1);
}

void sub_196E415D4()
{
  JUMPOUT(0x196E4159CLL);
}

void sub_196E415DC()
{
  JUMPOUT(0x196E415B4);
}

void sub_196E415E4()
{
  JUMPOUT(0x196E415C4);
}

char *IPC::ArgumentCoder<WebCore::ApplicationManifest::Icon,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 5));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 7);
  LOBYTE(v2) = *((_BYTE *)v2 + 64);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ApplicationManifest::Shortcut,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  return IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29[5];
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  v6 = v4;
  v36 = 0;
  v37 = 0;
  if (v4 >= 0x38E3)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplicationManifest::Icon>(v29, a2);
      if (!v35)
        goto LABEL_21;
      v18 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>((uint64_t)&v36, (unint64_t)v29);
      }
      else
      {
        v20 = v36;
        WTF::URL::URL(v36 + 72 * HIDWORD(v37), v29);
        v21 = v20 + 72 * v18;
        *(_QWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        v22 = v30;
        v30 = 0;
        *(_QWORD *)(v21 + 40) = v22;
        LODWORD(v22) = v31;
        v31 = 0;
        *(_DWORD *)(v21 + 48) = v22;
        LODWORD(v22) = v32;
        v32 = 0;
        *(_DWORD *)(v21 + 52) = v22;
        v23 = v33;
        v33 = 0;
        *(_QWORD *)(v21 + 56) = v23;
        *(_BYTE *)(v21 + 64) = v34;
        ++HIDWORD(v37);
      }
      std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v19);
      if (!--v6)
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v36, HIDWORD(v37));
        v24 = v36;
        v36 = 0;
        *(_QWORD *)a1 = v24;
        v16 = v37;
        v15 = HIDWORD(v37);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v37) = 72 * (int)v4 / 0x48u;
    v36 = WTF::fastMalloc((WTF *)(72 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplicationManifest::Icon>(v29, a2);
      if (!v35)
        break;
      v8 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>((uint64_t)&v36, (unint64_t)v29);
      }
      else
      {
        v10 = v36;
        WTF::URL::URL(v36 + 72 * HIDWORD(v37), v29);
        v11 = v10 + 72 * v8;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        v12 = v30;
        v30 = 0;
        *(_QWORD *)(v11 + 40) = v12;
        LODWORD(v12) = v31;
        v31 = 0;
        *(_DWORD *)(v11 + 48) = v12;
        LODWORD(v12) = v32;
        v32 = 0;
        *(_DWORD *)(v11 + 52) = v12;
        v13 = v33;
        v33 = 0;
        *(_QWORD *)(v11 + 56) = v13;
        *(_BYTE *)(v11 + 64) = v34;
        ++HIDWORD(v37);
      }
      std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v9);
      if (!--v6)
      {
        v14 = v36;
        v16 = v37;
        v15 = HIDWORD(v37);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v25);
LABEL_22:
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v28 = v27 == 0;
    else
      v28 = 1;
    if (!v28)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
    return result;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
LABEL_13:
  v36 = 0;
  *(_QWORD *)a1 = v14;
LABEL_14:
  v37 = 0;
  *(_DWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 12) = v15;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v5);
}

void sub_196E418EC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  v4 = *(_BYTE *)(a2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 73);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 74));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 120));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 160));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 200));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 208));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 216);
  IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 232);
  return IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 248);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;
  int v19;
  char v20;
  void *v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  _BYTE *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  WTF::StringImpl *result;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[4];
  __int128 v88;
  __int128 v89;
  char v90;
  char v91;
  __int16 v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  WTF::StringImpl *v96;
  __int128 v97;
  __int128 v98;
  WTF::StringImpl *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117[8];
  char v118;
  char v119[8];
  char v120;
  WTF::StringImpl *v121;
  __int128 v122;
  __int128 v123;
  char v124;
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  char v128;
  WTF::StringImpl *v129;
  __int128 v130;
  __int128 v131;
  char v132;
  WTF::StringImpl *v133;
  __int128 v134;
  __int128 v135;
  char v136;
  WTF::StringImpl *v137;
  char v138;
  WTF::StringImpl *v139;
  char v140;
  WTF::StringImpl *v141;
  char v142;
  WTF::StringImpl *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;

  IPC::Decoder::decode<WTF::String>(a1, &v143);
  IPC::Decoder::decode<WTF::String>(a1, &v141);
  IPC::Decoder::decode<WTF::String>(a1, &v139);
  IPC::Decoder::decode<WTF::String>(a1, &v137);
  IPC::Decoder::decode<WTF::URL>(a1, &v133);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v56 = 0;
    v57 = 0;
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (v58)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
        v57 = *a1;
        v56 = a1[1];
      }
      else
      {
        v56 = 0;
        v57 = 0;
      }
    }
    goto LABEL_111;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v56 = v4;
    v57 = 0;
LABEL_111:
    *a1 = 0;
    a1[1] = 0;
    v59 = a1[3];
    if (v59 && v56)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57, v56);
      v8 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
    goto LABEL_113;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    v9 = 0;
    v10 = 1;
    goto LABEL_5;
  }
LABEL_113:
  *a1 = 0;
  a1[1] = 0;
  v60 = a1[3];
  if (!v60)
  {
    v5 = 0;
    v11 = 0;
    v4 = 0;
LABEL_115:
    v9 = 1;
LABEL_116:
    *a1 = 0;
    a1[1] = 0;
    v61 = a1[3];
    if (v61)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v5);
        v62 = *a1;
        v4 = a1[1];
      }
      else
      {
        v62 = 0;
      }
    }
    else
    {
      v62 = 0;
      v4 = 0;
    }
    goto LABEL_118;
  }
  if (!v4)
  {
    v5 = 0;
    v11 = 0;
    goto LABEL_115;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v5);
  v10 = 0;
  v5 = *a1;
  v4 = a1[1];
  v9 = 1;
LABEL_5:
  if (v8)
    v11 = v10;
  else
    v11 = 0;
  if (v4 <= a1[2] - v5)
    goto LABEL_116;
  v12 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v12 + 1);
  if (!v5)
  {
    v62 = 0;
LABEL_118:
    *a1 = 0;
    a1[1] = 0;
    v63 = a1[3];
    if (v63)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v62);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    goto LABEL_120;
  }
  v13 = *v12;
  if (v13 < 4)
  {
    v14 = v13 | 0x100;
    goto LABEL_12;
  }
LABEL_120:
  *a1 = 0;
  a1[1] = 0;
  v64 = a1[3];
  if (!v64)
  {
    v5 = 0;
    v20 = 0;
    v14 = 0;
    v4 = 0;
    goto LABEL_122;
  }
  if (!v4)
  {
    v5 = 0;
    v20 = 0;
    v14 = 0;
LABEL_122:
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v5);
        v66 = *a1;
        v4 = a1[1];
      }
      else
      {
        v66 = 0;
      }
    }
    else
    {
      v66 = 0;
      v4 = 0;
    }
    goto LABEL_124;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v5);
  v14 = 0;
  v5 = *a1;
  v4 = a1[1];
LABEL_12:
  if (v4 <= a1[2] - v5)
  {
    v20 = v14;
    goto LABEL_122;
  }
  v15 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v15 + 1);
  if (!v5)
  {
    v20 = v14;
    v66 = 0;
LABEL_124:
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v66);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    goto LABEL_126;
  }
  v16 = *v15;
  if (v16 < 2)
  {
    if (v16)
    {
      v17 = IPC::Decoder::decode<WebCore::ScreenOrientationLockType>(a1);
      v18 = (v17 > 0xFFu) << 16;
      if ((v17 & 0xFF00) != 0)
        v19 = v17;
      else
        v19 = 0;
      LODWORD(v85) = 256;
      HIDWORD(v85) = v19;
    }
    else
    {
      v85 = 0;
      v18 = 0x10000;
    }
    v20 = v14;
    goto LABEL_22;
  }
  v20 = v14;
LABEL_126:
  *a1 = 0;
  a1[1] = 0;
  v68 = a1[3];
  if (v68 && v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v5);
  v18 = 0;
  v85 = 0;
LABEL_22:
  if (!HIWORD(v18))
  {
    v69 = *a1;
    v70 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v71 = a1[3];
    if (v71)
    {
      if (v70)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v69);
    }
  }
  IPC::Decoder::decode<WTF::URL>(a1, &v129);
  IPC::Decoder::decode<WTF::URL>(a1, &v125);
  IPC::Decoder::decode<WTF::URL>(a1, &v121);
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v119);
  if (!v120)
  {
    v72 = *a1;
    v73 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v74 = a1[3];
    if (v74)
    {
      if (v73)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v72);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v117);
  if (!v118)
  {
    v21 = (void *)*a1;
    v75 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v76 = a1[3];
    if (v76)
    {
      if (v75)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v76 + 16))(v76, v21);
    }
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v21, (uint64_t)&v114);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v111, a1);
  v22 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v23)
  {
    v24 = v22;
    v145 = 0;
    v146 = 0;
    if (v22 >= 0x4000)
    {
      v84 = v18;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ApplicationManifest::Shortcut>(&v86, a1);
        if (!BYTE8(v89))
          break;
        if (HIDWORD(v146) == (_DWORD)v146)
        {
          WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Shortcut>((uint64_t)&v145, (unint64_t)&v86);
        }
        else
        {
          v79 = v145 + ((unint64_t)HIDWORD(v146) << 6);
          v80 = v86;
          v86 = 0;
          *(_QWORD *)v79 = v80;
          WTF::URL::URL(v79 + 8, v87);
          *(_QWORD *)(v79 + 48) = 0;
          *(_QWORD *)(v79 + 56) = 0;
          v81 = *((_QWORD *)&v88 + 1);
          *((_QWORD *)&v88 + 1) = 0;
          *(_QWORD *)(v79 + 48) = v81;
          LODWORD(v81) = v89;
          LODWORD(v89) = 0;
          *(_DWORD *)(v79 + 56) = v81;
          LODWORD(v81) = DWORD1(v89);
          DWORD1(v89) = 0;
          *(_DWORD *)(v79 + 60) = v81;
          ++HIDWORD(v146);
          v18 = v84;
        }
        std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v78);
        if (!--v24)
        {
          WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v145, HIDWORD(v146));
          v82 = v145;
          v145 = 0;
          v108 = v82;
          v36 = v146;
          v35 = HIDWORD(v146);
          goto LABEL_38;
        }
      }
      LOBYTE(v108) = 0;
      v110 = 0;
      std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v77);
    }
    else
    {
      if (!v22)
      {
        v35 = 0;
        v36 = 0;
        v34 = 0;
LABEL_37:
        v145 = 0;
        v108 = v34;
LABEL_38:
        v146 = 0;
        v109 = __PAIR64__(v35, v36);
        v110 = 1;
        v37 = WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v145, v23);
        goto LABEL_42;
      }
      v25 = WTF::fastMalloc((WTF *)(v22 << 6));
      v83 = v14;
      v26 = v11;
      v27 = v9;
      v28 = a2;
      LODWORD(v146) = v24;
      v145 = v25;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ApplicationManifest::Shortcut>(&v86, a1);
        if (!BYTE8(v89))
          break;
        if (HIDWORD(v146) == (_DWORD)v146)
        {
          WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Shortcut>((uint64_t)&v145, (unint64_t)&v86);
        }
        else
        {
          v31 = v145 + ((unint64_t)HIDWORD(v146) << 6);
          v32 = v86;
          v86 = 0;
          *(_QWORD *)v31 = v32;
          WTF::URL::URL(v31 + 8, v87);
          *(_QWORD *)(v31 + 48) = 0;
          *(_QWORD *)(v31 + 56) = 0;
          v33 = *((_QWORD *)&v88 + 1);
          *((_QWORD *)&v88 + 1) = 0;
          *(_QWORD *)(v31 + 48) = v33;
          LODWORD(v33) = v89;
          LODWORD(v89) = 0;
          *(_DWORD *)(v31 + 56) = v33;
          LODWORD(v33) = DWORD1(v89);
          DWORD1(v89) = 0;
          *(_DWORD *)(v31 + 60) = v33;
          ++HIDWORD(v146);
        }
        std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v30);
        if (!--v24)
        {
          v34 = v145;
          v36 = v146;
          v35 = HIDWORD(v146);
          a2 = v28;
          v9 = v27;
          v11 = v26;
          v14 = v83;
          goto LABEL_37;
        }
      }
      LOBYTE(v108) = 0;
      v110 = 0;
      std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v29);
      a2 = v28;
      v9 = v27;
      v11 = v26;
      v14 = v83;
    }
    WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v145, v40);
  }
  else
  {
    LOBYTE(v108) = 0;
    v110 = 0;
  }
  v38 = (void *)*a1;
  v39 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v37 = a1[3];
  if (v37)
    goto LABEL_108;
LABEL_42:
  while (*a1)
  {
    if (v144)
    {
      v41 = (uint64_t)v143;
      v143 = 0;
      v86 = v41;
      if (v142)
      {
        v42 = (uint64_t)v141;
        v141 = 0;
        v87[0] = v42;
        if (v140)
        {
          v43 = (uint64_t)v139;
          v139 = 0;
          v87[1] = v43;
          if (v138)
          {
            v44 = (uint64_t)v137;
            v137 = 0;
            v87[2] = v44;
            if (v136)
            {
              v45 = (uint64_t)v133;
              v133 = 0;
              v87[3] = v45;
              v88 = v134;
              v89 = v135;
              LODWORD(v134) = v134 & 0xFFFFFFFE;
              if (!v9)
              {
                v90 = v11;
                if (v14 > 0xFF)
                {
                  v91 = v20;
                  if ((HIDWORD(v85) | v18 | v85) >> 16)
                  {
                    v92 = WORD2(v85) | v18 | v85;
                    if (v132)
                    {
                      v46 = v129;
                      v129 = 0;
                      v93 = v46;
                      v94 = v130;
                      v95 = v131;
                      LODWORD(v130) = v130 & 0xFFFFFFFE;
                      if (v128)
                      {
                        v47 = v125;
                        v125 = 0;
                        v96 = v47;
                        v97 = v126;
                        v98 = v127;
                        LODWORD(v126) = v126 & 0xFFFFFFFE;
                        if (v124)
                        {
                          v48 = v121;
                          v121 = 0;
                          v99 = v48;
                          v100 = v122;
                          v101 = v123;
                          LODWORD(v122) = v122 & 0xFFFFFFFE;
                          if (v120)
                          {
                            v37 = WebCore::Color::Color();
                            if (v118)
                            {
                              v37 = WebCore::Color::Color();
                              if (v116)
                              {
                                v102 = v114;
                                v49 = v115;
                                v114 = 0;
                                v115 = 0;
                                v103 = v49;
                                if (v113)
                                {
                                  v104 = v111;
                                  v50 = v112;
                                  v111 = 0;
                                  v112 = 0;
                                  v105 = v50;
                                  if (v110)
                                  {
                                    v106 = v108;
                                    v51 = v109;
                                    v108 = 0;
                                    v109 = 0;
                                    v107 = v51;
                                    WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a2, &v86);
                                    a2[264] = 1;
                                    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&v86, v52);
                                    goto LABEL_60;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_108:
    if (v39)
      v37 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v37 + 16))(v37, v38);
  }
  *a2 = 0;
  a2[264] = 0;
LABEL_60:
  if (v110)
    WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v38);
  if (v113)
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v38);
  if (v116)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v114, v38);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v38);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v53);
  if (v124)
  {
    result = v121;
    v121 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v128)
  {
    result = v125;
    v125 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v132)
  {
    result = v129;
    v129 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v136)
  {
    result = v133;
    v133 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v138)
  {
    result = v137;
    v137 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v140)
  {
    result = v139;
    v139 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v142)
  {
    result = v141;
    v141 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v144)
  {
    result = v143;
    v143 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E42480(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,__int16 a54,uint64_t a55,char a56,uint64_t a57,WTF::StringImpl *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  WTF::StringImpl *a64;
  char a69;
  WTF::StringImpl *a70;
  uint64_t v70;
  void *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a54, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a56, v72);
  if (a63)
  {
    v74 = a58;
    a58 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (a69)
  {
    v75 = a64;
    a64 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v73);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  if (LOBYTE(STACK[0x210]))
  {
    v76 = a70;
    a70 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v73);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (*(_BYTE *)(v70 - 176))
  {
    v77 = *(WTF::StringImpl **)(v70 - 216);
    *(_QWORD *)(v70 - 216) = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v73);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (*(_BYTE *)(v70 - 160))
  {
    v78 = *(WTF::StringImpl **)(v70 - 168);
    *(_QWORD *)(v70 - 168) = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v73);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_BYTE *)(v70 - 144))
  {
    v79 = *(WTF::StringImpl **)(v70 - 152);
    *(_QWORD *)(v70 - 152) = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v73);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_BYTE *)(v70 - 128))
  {
    v80 = *(WTF::StringImpl **)(v70 - 136);
    *(_QWORD *)(v70 - 136) = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v73);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  if (*(_BYTE *)(v70 - 112))
  {
    v81 = *(WTF::StringImpl **)(v70 - 120);
    *(_QWORD *)(v70 - 120) = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, v73);
      else
        *(_DWORD *)v81 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::encode(IPC::Encoder *a1, WebCore::ResourceRequest *a2)
{
  WebCore::ResourceRequest *v2;
  char v4;
  char v5;
  char v6;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, (uint64_t)v2 + 200);
  IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, *((_QWORD *)v2 + 28));
  v4 = *((_BYTE *)v2 + 232);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 233);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 234);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v2) = *((_BYTE *)v2 + 235);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  char v25;
  char v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[9];
  uint64_t v53;
  __int16 v54;
  __int128 v55;
  WTF *v56;
  int v57;
  WTF *v58;
  char v59;
  __int16 v60;
  __int128 v61;
  char v62;
  _BYTE v63[192];
  uint64_t v64;
  char v65;

  v2 = a1;
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v63);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v60, v2);
  IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v58, v2);
  v4 = v2[1];
  v5 = (WTF::StringImpl *)*v2;
  v6 = v2[2] - *v2;
  if (v4 <= v6)
    goto LABEL_38;
  v7 = (unsigned __int8 *)v5 + v6;
  v8 = (uint64_t)v5 + v6 + 1;
  v2[2] = v8;
  if (!v5)
  {
    v35 = v4;
    v36 = 0;
    goto LABEL_39;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v39 = v2[3];
    if (!v39 || !v4)
    {
      v12 = 0;
      v40 = 0;
      v5 = 0;
      v10 = 1;
LABEL_43:
      *v2 = 0;
      v2[1] = 0;
      v41 = v2[3];
      if (v41 && v40)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v41 + 16))(v41, v5, v40);
        v16 = 0;
        v5 = (WTF::StringImpl *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v16 = 0;
      }
      goto LABEL_45;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v5);
    v11 = 0;
    v5 = (WTF::StringImpl *)*v2;
    v4 = v2[1];
    v10 = 1;
    v8 = v2[2];
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - (_QWORD)v5;
    if (v4 <= v13)
    {
      v40 = 0;
      v51 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v51 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
        v5 = (WTF::StringImpl *)*v2;
        v40 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_43;
    }
    v14 = (unsigned __int8 *)v5 + v13;
    v15 = (uint64_t)v5 + v13 + 1;
    v2[2] = v15;
    if (!v5)
    {
      v40 = v4;
      goto LABEL_43;
    }
    v16 = *v14;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_45:
    *v2 = 0;
    v2[1] = 0;
    v42 = v2[3];
    if (!v42 || !v4)
    {
      v19 = 0;
      v43 = 0;
      v5 = 0;
      v17 = 1;
LABEL_47:
      *v2 = 0;
      v2[1] = 0;
      v44 = v2[3];
      if (v44 && v43)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v44 + 16))(v44, v5, v43);
        v23 = 0;
        v5 = (WTF::StringImpl *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v23 = 0;
      }
      goto LABEL_49;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v42 + 16))(v42, v5);
    v18 = 0;
    v5 = (WTF::StringImpl *)*v2;
    v4 = v2[1];
    v17 = 1;
    v15 = v2[2];
LABEL_12:
    if (v16)
      v19 = v18;
    else
      v19 = 0;
    v20 = v15 - (_QWORD)v5;
    if (v4 <= v20)
    {
      v43 = 0;
      v50 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v50 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
        v5 = (WTF::StringImpl *)*v2;
        v43 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_47;
    }
    v21 = (unsigned __int8 *)v5 + v20;
    v22 = (uint64_t)v5 + v20 + 1;
    v2[2] = v22;
    if (!v5)
    {
      v43 = v4;
      goto LABEL_47;
    }
    v23 = *v21;
    if (v23 < 2)
    {
      v24 = 0;
      v25 = 1;
      goto LABEL_19;
    }
LABEL_49:
    *v2 = 0;
    v2[1] = 0;
    v45 = v2[3];
    if (!v45 || !v4)
    {
      v26 = 0;
      v46 = 0;
      v5 = 0;
      v24 = 1;
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v45 + 16))(v45, v5);
    v25 = 0;
    v5 = (WTF::StringImpl *)*v2;
    v4 = v2[1];
    v24 = 1;
    v22 = v2[2];
LABEL_19:
    v26 = v23 ? v25 : 0;
    v27 = v22 - (_QWORD)v5;
    if (v4 <= v27)
      break;
    v28 = (unsigned __int8 *)v5 + v27;
    v2[2] = (uint64_t)(v28 + 1);
    if (!v5)
    {
      v46 = v4;
      goto LABEL_51;
    }
    v29 = *v28;
    if (v29 > 1)
      goto LABEL_53;
    v30 = 0;
    v2 = (uint64_t *)(v29 != 0);
LABEL_26:
    if (v65)
    {
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v52, (uint64_t)v63);
      v31 = v64;
      v64 = 0;
      v53 = v31;
      if (v62)
      {
        v54 = v60;
        v32 = v61;
        v61 = 0uLL;
        v55 = v32;
        if (v59)
        {
          v33 = v58;
          v58 = 0;
          v56 = v33;
          if (!v10)
          {
            LOBYTE(v57) = v12;
            if (!v17)
            {
              BYTE1(v57) = v19;
              if (!v24)
              {
                BYTE2(v57) = v26;
                if (!v30)
                {
                  HIBYTE(v57) = (_BYTE)v2;
                  WebCore::ResourceRequestBase::ResourceRequestBase(a2, (uint64_t)v52);
                  *(_QWORD *)(a2 + 192) = v53;
                  *(_WORD *)(a2 + 200) = v54;
                  *(_OWORD *)(a2 + 208) = v55;
                  *(_QWORD *)(a2 + 224) = v56;
                  *(_DWORD *)(a2 + 232) = v57;
                  *(_BYTE *)(a2 + 240) = 1;
                  v53 = 0;
                  v56 = 0;
                  v55 = 0uLL;
                  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v52);
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_38:
    v35 = 0;
    v36 = 0;
    *v2 = 0;
    v2[1] = 0;
    v37 = v2[3];
    if (v37)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v36 = *v2;
        v35 = v2[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
    }
LABEL_39:
    *v2 = 0;
    v2[1] = 0;
    v38 = v2[3];
    if (v38 && v35)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
      v9 = 0;
      v5 = (WTF::StringImpl *)*v2;
      v4 = v2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
  }
  v46 = 0;
  v49 = v2[3];
  *v2 = 0;
  v2[1] = 0;
  if (v49 && v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
    v5 = (WTF::StringImpl *)*v2;
    v46 = v2[1];
  }
  else
  {
    v5 = 0;
  }
LABEL_51:
  *v2 = 0;
  v2[1] = 0;
  v47 = v2[3];
  if (v47 && v46)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v47 + 16))(v47, v5, v46);
    v5 = (WTF::StringImpl *)*v2;
    v4 = v2[1];
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_53:
  *v2 = 0;
  v2[1] = 0;
  v48 = v2[3];
  if (v48)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v48 + 16))(v48, v5);
      if (*v2)
      {
        v2 = 0;
        v30 = 1;
        goto LABEL_26;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 240) = 0;
  if (!v59)
    goto LABEL_36;
LABEL_34:
  if (v58)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v58, v5);
LABEL_36:
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v5);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v63);
}

void sub_196E42E0C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf,uint64_t a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF *a37,uint64_t a38,WTF *a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a40)
  {
    if (a39)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a39, a2);
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a42, a2);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a48);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(a1, a2);
  if (!a1[8])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ContactInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
}

uint64_t IPC::ArgumentCoder<WebCore::ContactInfo,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v26);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v23);
  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v20);
  if (*a1)
  {
    if (v28)
    {
      v9 = v26;
      v10 = v27;
      v26 = 0;
      v27 = 0;
      if (v25)
      {
        v11 = v23;
        v12 = v24;
        v23 = 0;
        v24 = 0;
        if (v22)
        {
          v13 = v20;
          v20 = 0;
          v17[0] = 0;
          *(_QWORD *)a3 = v9;
          v17[1] = 0;
          *(_QWORD *)(a3 + 8) = v10;
          v18[0] = 0;
          *(_QWORD *)(a3 + 16) = v11;
          v18[1] = 0;
          *(_QWORD *)(a3 + 24) = v12;
          v19[0] = 0;
          *(_QWORD *)(a3 + 32) = v13;
          v19[1] = 0;
          v14 = v21;
          v21 = 0;
          *(_QWORD *)(a3 + 40) = v14;
          *(_BYTE *)(a3 + 48) = 1;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v8);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v15);
          result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v16);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 48) = 0;
LABEL_6:
  if (v22)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  if (v25)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v8);
  if (v28)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v8);
  return result;
}

void sub_196E4309C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 48))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 64, a2);
  if (*(_BYTE *)(v2 - 24))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  v4 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  WTF *v6;
  char v7;
  WTF::StringImpl *v8;
  unsigned __int16 v9;
  void *v10;
  int v11;
  _BYTE *v12;
  int v13;
  int v14;
  _BYTE *v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  char v26;
  char v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  unsigned __int16 v37;
  WTF::StringImpl *v38;
  uint64_t v39;

  v6 = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!v7)
  {
LABEL_20:
    v18 = *a1;
    v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    v8 = 0;
    v13 = 1;
    goto LABEL_22;
  }
  v8 = v6;
  v38 = 0;
  v39 = 0;
  if ((unint64_t)v6 >= 0x100000)
  {
    while (1)
    {
      v16 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
      v37 = v16;
      if (v16 < 0x100u)
        goto LABEL_18;
      v14 = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        v15 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, (WTF *)(HIDWORD(v39) + 1), (unint64_t)&v37);
        v14 = HIDWORD(v39);
        *((_BYTE *)v38 + HIDWORD(v39)) = *v15;
      }
      else
      {
        *((_BYTE *)v38 + HIDWORD(v39)) = v16;
      }
      HIDWORD(v39) = v14 + 1;
      v8 = (WTF::StringImpl *)((char *)v8 - 1);
      if (!v8)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v38, (void *)(v14 + 1));
        v8 = v38;
        v3 = v39;
        v2 = HIDWORD(v39);
        goto LABEL_12;
      }
    }
  }
  if (v6)
  {
    LODWORD(v39) = (_DWORD)v6;
    v38 = (WTF::StringImpl *)WTF::fastMalloc(v6);
    while (1)
    {
      v9 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
      v37 = v9;
      if (v9 < 0x100u)
        break;
      v11 = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        v12 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, (WTF *)(HIDWORD(v39) + 1), (unint64_t)&v37);
        v11 = HIDWORD(v39);
        *((_BYTE *)v38 + HIDWORD(v39)) = *v12;
      }
      else
      {
        *((_BYTE *)v38 + HIDWORD(v39)) = v9;
      }
      v2 = v11 + 1;
      HIDWORD(v39) = v11 + 1;
      v8 = (WTF::StringImpl *)((char *)v8 - 1);
      if (!v8)
      {
        v8 = v38;
        v3 = v39;
        goto LABEL_12;
      }
    }
LABEL_18:
    v17 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v17, v10);
    }
    goto LABEL_20;
  }
  v2 = 0;
  v3 = 0;
LABEL_12:
  v13 = 0;
LABEL_22:
  v21 = (unsigned __int8 *)a1[1];
  v22 = *a1;
  v23 = a1[2] - *a1;
  if ((unint64_t)v21 <= v23)
    goto LABEL_38;
  v24 = (unsigned __int8 *)(v22 + v23);
  a1[2] = (uint64_t)(v24 + 1);
  if (!v22)
  {
    v24 = v21;
    v31 = 0;
    goto LABEL_39;
  }
  LODWORD(v24) = *v24;
  if (v24 >= 2)
    goto LABEL_41;
  v25 = 0;
  v26 = 1;
  while (1)
  {
    v27 = (_DWORD)v24 ? v26 : 0;
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v38);
    if (!*a1)
      break;
    if (!v13 && !v25 && (_BYTE)v39)
    {
      v30 = v38;
      *(_QWORD *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a2 + 12) = v2;
      *(_BYTE *)(a2 + 16) = v27;
      *(_QWORD *)(a2 + 24) = v30;
      *(_BYTE *)(a2 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_38:
    v24 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a1;
        v24 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v24 = 0;
        v31 = 0;
      }
    }
LABEL_39:
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v33 + 16))(v33, v31, v24);
        LODWORD(v24) = 0;
        v22 = *a1;
        v21 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
      LODWORD(v24) = 0;
    }
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      v36 = (int)v24;
      if (v21)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v22);
      v26 = 0;
      v25 = 1;
      LODWORD(v24) = v36;
    }
    else
    {
      v26 = 0;
      v25 = 1;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if ((_BYTE)v39)
  {
    result = v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v8)
    v35 = v13;
  else
    v35 = 1;
  if ((v35 & 1) == 0)
    return (WTF::StringImpl *)WTF::fastFree(v8, v29);
  return result;
}

void sub_196E43454(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  WTF *v12;
  char v13;
  char v15;

  if (v12)
    v15 = v13;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
    WTF::fastFree(v12, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RTCDataChannelIdentifier,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = result[1];
  v4 = *result;
  v5 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    result[2] = v7 + 1;
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      goto LABEL_8;
    }
    v20 = v3;
    v21 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (v2)
      goto LABEL_40;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v9 = 0;
    v2 = result[3];
    if (v2)
    {
      v42 = result;
      v47 = a2;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v2 + 16))(v2, v21, v20, 0.0);
        result = v42;
        v4 = *v42;
        v3 = v42[1];
        v8 = 1;
        a2 = v47;
        v9 = 0;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v8 = 1;
      }
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v8 = 1;
    }
LABEL_8:
    v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v12 + 1;
      if (v4)
      {
        v13 = 0;
        v14 = *v12;
        goto LABEL_15;
      }
      v22 = v3;
      v23 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      *result = 0;
      result[1] = 0;
      v24 = result[3];
      if (v24)
      {
        v40 = v8;
        v36 = v9;
        v45 = result;
        v51 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
          result = v45;
          v23 = *v45;
          v22 = v45[1];
          a2 = v51;
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
        v9 = v36;
        v8 = v40;
      }
    }
    *result = 0;
    result[1] = 0;
    v14 = 0;
    v2 = result[3];
    if (v2)
    {
      v38 = v8;
      v34 = v9;
      v43 = result;
      v48 = a2;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v23, v22);
        result = v43;
        v4 = *v43;
        v3 = v43[1];
        v13 = 1;
        a2 = v48;
        v9 = v34;
        v8 = v38;
        v14 = 0;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v13 = 1;
      }
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v13 = 1;
    }
LABEL_15:
    v15 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v15 || v3 - v15 <= 7)
    {
      v25 = 0;
      v26 = 0;
      *result = 0;
      result[1] = 0;
      v27 = result[3];
      if (v27)
      {
        v33 = v13;
        v31 = v14;
        v41 = v8;
        v37 = v9;
        v46 = result;
        v52 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
          result = v46;
          v26 = *v46;
          v25 = v46[1];
          a2 = v52;
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        v9 = v37;
        v8 = v41;
        v14 = v31;
        v13 = v33;
      }
    }
    else
    {
      v16 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v16 + 1;
      if (v4)
      {
        v17 = 0;
        v18 = *v16;
        if (v8)
          goto LABEL_39;
        goto LABEL_19;
      }
      v25 = v3;
      v26 = 0;
    }
    *result = 0;
    result[1] = 0;
    v28 = result[3];
    if (!v28)
      break;
    if (!v25)
      break;
    v29 = result;
    v49 = a2;
    v35 = v9;
    v39 = v8;
    v30 = v14;
    v32 = v13;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(result[3], v26, v25);
    v13 = v32;
    v14 = v30;
    v9 = v35;
    a2 = v49;
    if (!*v29)
      break;
    v17 = 1;
    v18 = 0;
    if (v39)
      goto LABEL_39;
LABEL_19:
    if (!v13 && !v17)
    {
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v14;
      v19 = 1;
      *(_QWORD *)(a2 + 16) = v18;
      goto LABEL_22;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    v44 = result;
    v50 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      result = v44;
      v21 = *v44;
      v20 = v44[1];
      a2 = v50;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
  }
  v19 = 0;
  *(_BYTE *)a2 = 0;
LABEL_22:
  *(_BYTE *)(a2 + 24) = v19;
  return result;
}

char *IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 72));
  v4 = *(_BYTE *)(a2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 96));
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 144));
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 160));
  v5 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)(a2 + 208), *(unsigned int *)(a2 + 220));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 224));
}

void IPC::ArgumentCoder<WebCore::NotificationData,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  char v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  char v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  __int16 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::URL>(a1, &v51);
  IPC::Decoder::decode<WTF::String>(a1, &v49);
  IPC::Decoder::decode<WTF::String>(a1, &v47);
  IPC::Decoder::decode<WTF::String>(a1, &v45);
  IPC::Decoder::decode<WTF::String>(a1, &v43);
  IPC::Decoder::decode<WTF::String>(a1, &v41);
  v4 = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v39);
  IPC::Decoder::decode<WTF::URL>(a1, &v35);
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v79);
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)&v76);
  v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7 = v6;
  v8 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v10 = v9;
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v32);
  v11 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*a1)
    goto LABEL_63;
  if (!v54)
    goto LABEL_62;
  v13 = v51;
  v51 = 0;
  v55 = v13;
  v56 = v52;
  v57 = v53;
  LODWORD(v52) = v52 & 0xFFFFFFFE;
  if (!v50)
    goto LABEL_62;
  v14 = v49;
  v49 = 0;
  v58 = v14;
  if (!v48)
    goto LABEL_62;
  v15 = v47;
  v47 = 0;
  v59 = v15;
  if (!v46)
    goto LABEL_62;
  v16 = v45;
  v45 = 0;
  v60 = v16;
  if (!v44)
    goto LABEL_62;
  v17 = v43;
  v43 = 0;
  v61 = v17;
  if (!v42)
    goto LABEL_62;
  v18 = v41;
  v41 = 0;
  v62 = v18;
  if (v4 <= 0xFFu)
    goto LABEL_62;
  v63 = v4;
  if (!v40)
    goto LABEL_62;
  v19 = v39;
  v39 = 0;
  v64 = v19;
  if (!v38)
    goto LABEL_62;
  v20 = v35;
  v35 = 0;
  v65 = v20;
  v66 = v36;
  v67 = v37;
  LODWORD(v36) = v36 & 0xFFFFFFFE;
  if (!v80)
    goto LABEL_62;
  v68 = v79;
  if (!v78)
    goto LABEL_62;
  v69 = v76;
  v70 = v77;
  if (!v7
    || (v71 = v5, !v10)
    || (v72 = v8, !v34)
    || (v73 = v32, v21 = v33, v32 = 0, v33 = 0, v74 = v21, (v11 & 0xFF0000) == 0))
  {
LABEL_62:
    __break(1u);
LABEL_63:
    *a2 = 0;
    a2[240] = 0;
    goto LABEL_18;
  }
  v75 = v11;
  WebCore::NotificationData::NotificationData((uint64_t)a2, (uint64_t)&v55);
  a2[240] = 1;
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v55, v22);
LABEL_18:
  if (v34)
  {
    v23 = v32;
    if (v32)
    {
      v32 = 0;
      LODWORD(v33) = 0;
      WTF::fastFree(v23, v12);
    }
  }
  if (v38)
  {
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (v40)
  {
    v25 = v39;
    v39 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  if (v42)
  {
    v26 = v41;
    v41 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (v44)
  {
    v27 = v43;
    v43 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (v46)
  {
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v48)
  {
    v29 = v47;
    v47 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (v50)
  {
    v30 = v49;
    v49 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (v54)
  {
    v31 = v51;
    v51 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
}

void sub_196E43E40(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  void *v42;

  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a39, a2);
  if (a13 && a10)
    WTF::fastFree(a10, v42);
  if (a19 && a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a37 && a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)a32 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::NotificationDirection>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::NotificationDirection,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PermissionName>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::PermissionName,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, (const void *)a2[4], *((unsigned int *)a2 + 11));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, (const void *)a2[6], *((unsigned int *)a2 + 15));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, (const void *)a2[8], *((unsigned int *)a2 + 19));
}

WTF *IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  WTF *result;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  __int128 v16;
  WTF *v17;
  uint64_t v18;
  char v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  WTF *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  WTF *v29;
  char v30;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WTF::String>(a1, &v29);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v26);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v23);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v20);
  result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v17);
  if (*a1)
  {
    if (v6)
    {
      if (v30)
      {
        v9 = v29;
        v29 = 0;
        if (v28)
        {
          *(_QWORD *)&v16 = v26;
          BYTE8(v16) = v27;
          if (v25)
          {
            v10 = v23;
            v11 = v24;
            v23 = 0;
            v24 = 0;
            if (v22)
            {
              v12 = v20;
              v13 = v21;
              v20 = 0;
              v21 = 0;
              if (v19)
              {
                v14 = v17;
                *(_QWORD *)a2 = v4;
                *(_QWORD *)(a2 + 8) = v9;
                *(_OWORD *)(a2 + 16) = v16;
                *(_QWORD *)(a2 + 32) = v10;
                *(_QWORD *)(a2 + 40) = v11;
                *(_QWORD *)(a2 + 48) = v12;
                *(_QWORD *)(a2 + 56) = v13;
                *(_QWORD *)(a2 + 64) = v14;
                v15 = v18;
                v17 = 0;
                v18 = 0;
                *(_QWORD *)(a2 + 72) = v15;
                *(_BYTE *)(a2 + 80) = 1;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
  if (v19)
  {
    result = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      result = (WTF *)WTF::fastFree(result, v8);
    }
  }
LABEL_9:
  if (v22)
  {
    result = v20;
    if (v20)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  if (v25)
  {
    result = v23;
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  if (v30)
  {
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E4431C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, char a17, WTF *a18, int a19, int a20,char a21)
{
  uint64_t v21;
  WTF::StringImpl *v23;

  if (a17 && a14)
    WTF::fastFree(a14, a2);
  if (a21 && a18)
    WTF::fastFree(a18, a2);
  if (*(_BYTE *)(v21 - 40))
  {
    v23 = *(WTF::StringImpl **)(v21 - 48);
    *(_QWORD *)(v21 - 48) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::Report,void>::encode(IPC::Encoder *a1, WebCore::Report *this)
{
  uint64_t *v4;
  uint64_t *v5;
  WebCore::TestReportBody **v6;

  v4 = (uint64_t *)WebCore::Report::type(this);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v4);
  v5 = (uint64_t *)WebCore::Report::url(this);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v5);
  v6 = (WebCore::TestReportBody **)WebCore::Report::body(this);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ReportBody,WTF::RawPtrTraits<WebCore::ReportBody>,WTF::DefaultRefDerefTraits<WebCore::ReportBody>>,void>::encode<IPC::Encoder,WebCore::ReportBody>(a1, v6);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Report,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int16 v9;
  int v10;
  char v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int16 v17;
  unsigned __int16 Options;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unsigned __int16 v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *result;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unsigned __int8 v67;
  WTF::StringImpl *v68;
  unsigned __int8 v69;
  WTF::StringImpl *v70;
  unsigned __int8 v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unsigned __int8 v74;
  WTF::StringImpl *v75;
  unsigned __int8 v76;
  WTF::StringImpl *v77;
  unsigned __int8 v78;
  WTF::StringImpl *v79;
  unsigned __int8 v80;
  WTF::StringImpl *v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  WTF::StringImpl *v84;
  unsigned __int8 v85;
  WTF::StringImpl *v86;
  unsigned __int8 v87;

  IPC::Decoder::decode<WTF::String>(a1, &v70);
  IPC::Decoder::decode<WTF::String>(a1, &v68);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_161;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v54 = v4;
    v55 = 0;
    goto LABEL_162;
  }
  if (*v7 >= 2u)
    goto LABEL_189;
  if (!*v7)
  {
    v66 = 0;
LABEL_135:
    v67 = 1;
    goto LABEL_136;
  }
  if (v4 <= (unint64_t)&v7[-v5 + 1])
  {
    v57 = 0;
    v58 = 0;
    *a1 = 0;
    a1[1] = 0;
    v60 = a1[3];
    if (!v60)
      goto LABEL_166;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v60 + 16))(v60, v5, v4);
    v57 = 0;
    v63 = *a1;
    v64 = a1[1];
    v65 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v58 = 0;
    if (!v65 || !v64)
      goto LABEL_166;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v63, v64);
    goto LABEL_188;
  }
  a1[2] = (uint64_t)(v7 + 2);
  v8 = v7[1];
  if (v8 >= 5)
  {
LABEL_189:
    v57 = v4;
    v58 = v5;
    goto LABEL_166;
  }
  switch(v8)
  {
    case 0u:
      IPC::Decoder::decode<WTF::String>(a1, &v81);
      IPC::Decoder::decode<WTF::String>(a1, &v86);
      IPC::Decoder::decode<WTF::String>(a1, &v84);
      IPC::Decoder::decode<WTF::String>(a1, &v79);
      IPC::Decoder::decode<WTF::String>(a1, &v77);
      IPC::Decoder::decode<WTF::String>(a1, &v75);
      IPC::Decoder::decode<WTF::String>(a1, &v73);
      v9 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
      v10 = IPC::Decoder::decode<unsigned short>(a1);
      IPC::Decoder::decode<unsigned long long>(a1);
      v12 = v11;
      IPC::Decoder::decode<unsigned long long>(a1);
      v14 = *a1;
      if (*a1)
      {
        v5 = v82;
        if (!v82)
          goto LABEL_160;
        v5 = v87;
        if (!v87)
          goto LABEL_160;
        v5 = v85;
        if (!v85)
          goto LABEL_160;
        v5 = v80;
        if (!v80)
          goto LABEL_160;
        v5 = v78;
        if (!v78)
          goto LABEL_160;
        v5 = v76;
        if (!v76)
          goto LABEL_160;
        v5 = v74;
        if (!v74)
          goto LABEL_160;
        v5 = v9;
        if (v9 <= 0xFFu || (v10 & 0xFF0000) == 0 || !v12 || !(_BYTE)v13)
          goto LABEL_160;
        WebCore::CSPViolationReportBody::create();
        v15 = v72;
      }
      else
      {
        v15 = 0;
      }
      if (v74)
      {
        v16 = v73;
        v73 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      if (v76)
      {
        v45 = v75;
        v75 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v13);
          else
            *(_DWORD *)v45 -= 2;
        }
      }
      if (v78)
      {
        v46 = v77;
        v77 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v13);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
      if (v80)
      {
        v47 = v79;
        v79 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v13);
          else
            *(_DWORD *)v47 -= 2;
        }
      }
      if (v85)
      {
        v48 = v84;
        v84 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v13);
          else
            *(_DWORD *)v48 -= 2;
        }
      }
      if (v87)
      {
        v49 = v86;
        v86 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v13);
          else
            *(_DWORD *)v49 -= 2;
        }
      }
      if (!v82)
        goto LABEL_132;
      v50 = v81;
      v81 = 0;
      if (!v50)
        goto LABEL_132;
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::destroy(v50, v13);
        if (v14)
          goto LABEL_133;
      }
      else
      {
        *(_DWORD *)v50 -= 2;
LABEL_132:
        if (v14)
          goto LABEL_133;
      }
      v22 = *a1;
      v53 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24 || !v53)
        goto LABEL_167;
      goto LABEL_159;
    case 1u:
      v32 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
      IPC::Decoder::decode<WTF::URL>(a1, &v81);
      IPC::Decoder::decode<WTF::String>(a1, &v86);
      v34 = *a1;
      if (*a1)
      {
        v5 = v32;
        if (v32 <= 0xFFu)
          goto LABEL_160;
        v5 = v83;
        if (!v83)
          goto LABEL_160;
        v5 = v87;
        if (!v87)
          goto LABEL_160;
        WebCore::COEPInheritenceViolationReportBody::create();
        v15 = v84;
      }
      else
      {
        v15 = 0;
      }
      if (v87)
      {
        v35 = v86;
        v86 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v33);
          else
            *(_DWORD *)v35 -= 2;
        }
      }
      if (!v83)
        goto LABEL_80;
      v40 = v81;
      v81 = 0;
      if (!v40)
        goto LABEL_80;
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::destroy(v40, v33);
        if (v34)
          goto LABEL_133;
      }
      else
      {
        *(_DWORD *)v40 -= 2;
LABEL_80:
        if (v34)
          goto LABEL_133;
      }
      v22 = *a1;
      v41 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24 || !v41)
        goto LABEL_167;
      goto LABEL_159;
    case 2u:
      v17 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
      IPC::Decoder::decode<WTF::URL>(a1, &v81);
      Options = IPC::Decoder::decode<WebCore::FetchOptionsDestination>(a1);
      v20 = *a1;
      if (*a1)
      {
        v5 = v17;
        if (v17 <= 0xFFu)
          goto LABEL_160;
        v5 = v83;
        if (!v83)
          goto LABEL_160;
        v5 = Options;
        if (Options <= 0xFFu)
          goto LABEL_160;
        WebCore::CORPViolationReportBody::create();
        v15 = v86;
      }
      else
      {
        v15 = 0;
      }
      if (!v83)
        goto LABEL_35;
      v21 = v81;
      v81 = 0;
      if (!v21)
        goto LABEL_35;
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v19);
        if (v20)
          goto LABEL_133;
      }
      else
      {
        *(_DWORD *)v21 -= 2;
LABEL_35:
        if (v20)
          goto LABEL_133;
      }
      v22 = *a1;
      v23 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24 || !v23)
        goto LABEL_167;
      goto LABEL_159;
    case 3u:
      IPC::Decoder::decode<WTF::String>(a1, &v81);
      IPC::Decoder::decode<WTF::MonotonicTime>(a1);
      v26 = v25;
      IPC::Decoder::decode<WTF::String>(a1, &v86);
      IPC::Decoder::decode<WTF::String>(a1, &v84);
      IPC::Decoder::decode<std::optional<unsigned int>>(a1);
      v28 = v27;
      IPC::Decoder::decode<std::optional<unsigned int>>(a1);
      v30 = *a1;
      if (*a1)
      {
        v5 = v82;
        if (!v82)
          goto LABEL_160;
        if (!v26)
          goto LABEL_160;
        v5 = v87;
        if (!v87)
          goto LABEL_160;
        v5 = v85;
        if (!v85 || !v28 || !(_BYTE)v29)
          goto LABEL_160;
        WebCore::DeprecationReportBody::create();
        v15 = v79;
      }
      else
      {
        v15 = 0;
      }
      if (v85)
      {
        v31 = v84;
        v84 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v29);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      if (v87)
      {
        v42 = v86;
        v86 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v29);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
      if (!v82)
        goto LABEL_96;
      v43 = v81;
      v81 = 0;
      if (!v43)
        goto LABEL_96;
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v29);
        if (v30)
          goto LABEL_133;
      }
      else
      {
        *(_DWORD *)v43 -= 2;
LABEL_96:
        if (v30)
          goto LABEL_133;
      }
      v22 = *a1;
      v44 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24 || !v44)
        goto LABEL_167;
      goto LABEL_159;
    default:
      IPC::Decoder::decode<WTF::String>(a1, &v81);
      v37 = *a1;
      if (*a1)
      {
        v5 = v82;
        if (!v82)
          goto LABEL_160;
        WebCore::TestReportBody::create();
        v15 = v86;
      }
      else
      {
        v15 = 0;
      }
      if (!v82)
        goto LABEL_67;
      v38 = v81;
      v81 = 0;
      if (!v38)
        goto LABEL_67;
      if (*(_DWORD *)v38 != 2)
      {
        *(_DWORD *)v38 -= 2;
LABEL_67:
        if (!v37)
          goto LABEL_68;
LABEL_133:
        if (*a1)
        {
          v66 = v15;
          goto LABEL_135;
        }
        if (v15)
        {
          if (*((_DWORD *)v15 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
          else
            --*((_DWORD *)v15 + 2);
        }
        goto LABEL_167;
      }
      WTF::StringImpl::destroy(v38, v36);
      if (v37)
        goto LABEL_133;
LABEL_68:
      v22 = *a1;
      v39 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24 || !v39)
        goto LABEL_167;
LABEL_159:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
      v5 = *a1;
      if (!*a1)
        goto LABEL_167;
LABEL_160:
      while (1)
      {
        __break(1u);
LABEL_161:
        v54 = 0;
        v55 = 0;
        *a1 = 0;
        a1[1] = 0;
        v56 = a1[3];
        if (v56)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v56 + 16))(v56, v5, v4);
            v55 = *a1;
            v54 = a1[1];
          }
          else
          {
            v54 = 0;
            v55 = 0;
          }
        }
LABEL_162:
        v57 = 0;
        v58 = 0;
        *a1 = 0;
        a1[1] = 0;
        v59 = a1[3];
        if (v59)
        {
          if (v54)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v59 + 16))(v59, v55, v54);
LABEL_188:
            v58 = *a1;
            v57 = a1[1];
          }
          else
          {
            v57 = 0;
            v58 = 0;
          }
        }
LABEL_166:
        *a1 = 0;
        a1[1] = 0;
        v61 = a1[3];
        if (v61 && v57)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v58);
LABEL_167:
        LOBYTE(v66) = 0;
        v67 = 0;
        v52 = (WTF::StringImpl *)*a1;
        v62 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        result = (WTF::StringImpl *)a1[3];
        if (!result)
          break;
        if (!v62)
          break;
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v52);
        if (!*a1)
          break;
LABEL_136:
        v5 = v71;
        if (v71)
        {
          v5 = v69;
          if (v69)
          {
            v5 = v67;
            if (v67)
            {
              result = (WTF::StringImpl *)WebCore::Report::create();
              *(_QWORD *)a2 = v81;
              *(_BYTE *)(a2 + 8) = 1;
              goto LABEL_140;
            }
          }
        }
      }
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
LABEL_140:
      if (v67)
      {
        result = v66;
        if (v66)
        {
          if (*((_DWORD *)v66 + 2) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v66 + 8))(v66);
          else
            --*((_DWORD *)v66 + 2);
        }
      }
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v71)
      {
        result = v70;
        v70 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
          else
            *(_DWORD *)result -= 2;
        }
      }
      return result;
  }
}

void sub_196E44D54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, char a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26,WTF::StringImpl *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a24 && a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (*(_BYTE *)(v32 - 88))
  {
    v34 = *(WTF::StringImpl **)(v32 - 96);
    *(_QWORD *)(v32 - 96) = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, a2);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (*(_BYTE *)(v32 - 72))
  {
    v35 = *(WTF::StringImpl **)(v32 - 80);
    *(_QWORD *)(v32 - 80) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, a2);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if (a28 && a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  IPC::Decoder::decode<WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v16);
  result = IPC::Decoder::decode<WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v13);
  if (*a1)
  {
    if (v18)
    {
      v6 = v16;
      v7 = v17;
      v16 = 0;
      v17 = 0;
      if (v15)
      {
        v8 = v13;
        v13 = 0;
        v11[0] = 0;
        *(_QWORD *)a2 = v6;
        v11[1] = 0;
        *(_QWORD *)(a2 + 8) = v7;
        v12[0] = 0;
        *(_QWORD *)(a2 + 16) = v8;
        v12[1] = 0;
        v9 = v14;
        v14 = 0;
        *(_QWORD *)(a2 + 24) = v9;
        *(_BYTE *)(a2 + 32) = 1;
        WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v5);
        result = WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
LABEL_5:
  if (v15)
    result = WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
  if (v18)
    return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v5);
  return result;
}

void sub_196E450C0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 24))
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E45130(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot::Info,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
}

WTF *IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(WTF *result, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  char v21;

  v3 = result;
  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_16;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_16:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (!result)
    {
LABEL_18:
      *(_BYTE *)v3 = 0;
      *((_BYTE *)v3 + 8) = 0;
      goto LABEL_19;
    }
LABEL_25:
    if (v6)
      (*(void (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_18;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_17;
  if (!v9)
  {
    *(_QWORD *)result = 0;
    goto LABEL_14;
  }
  result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v19);
  v10 = *a2;
  if (!*a2)
  {
    v11 = 0;
    goto LABEL_8;
  }
  if (!v21)
  {
    __break(1u);
    goto LABEL_25;
  }
  result = (WTF *)JSC::ArrayBuffer::create();
  v11 = v18;
LABEL_8:
  if (v21)
  {
    result = v19;
    if (v19)
    {
      v19 = 0;
      v20 = 0;
      result = (WTF *)WTF::fastFree(result, v5);
    }
  }
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
  if (v10)
  {
    *(_QWORD *)v3 = v11;
LABEL_14:
    *((_BYTE *)v3 + 8) = 1;
    return result;
  }
LABEL_19:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF *)a2[3];
  if (result)
  {
    if (v17)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

void sub_196E4534C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientOutputs>>(_BYTE *a1, uint64_t *a2)
{
  WTF::DeferrableRefCountedBase *v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  WTF::DeferrableRefCountedBase *v40;
  uint64_t v41;
  int v42;
  WTF::DeferrableRefCountedBase *v43;
  WTF::DeferrableRefCountedBase *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  WTF::DeferrableRefCountedBase *v49;
  WTF::DeferrableRefCountedBase *v50;
  __int128 v51;
  WTF::DeferrableRefCountedBase *v52;
  char v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::DeferrableRefCountedBase *v99;
  __int16 v100;
  unsigned int v101;
  _BYTE v102[80];
  char v103;
  WTF::DeferrableRefCountedBase *v104;
  WTF::DeferrableRefCountedBase *v105;
  WTF::DeferrableRefCountedBase *v106;
  __int16 v107;
  char v108;
  __int16 v109;
  __int128 v110;
  char v111;
  char v112;
  __int16 v113;
  __int128 v114;
  char v115;
  char v116;
  char v117;
  WTF::DeferrableRefCountedBase *v118;
  WTF::DeferrableRefCountedBase *v119;
  uint64_t v120;
  char v121;
  WTF::DeferrableRefCountedBase *v122;
  WTF::DeferrableRefCountedBase *v123;
  char v124;
  char v125;
  WTF::DeferrableRefCountedBase *v126;
  char v127;
  WTF::DeferrableRefCountedBase *v128;
  char v129;

  v6 = a2[2];
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 - v7;
  if (v8 <= v9)
  {
    v55 = 0;
    v56 = 0;
    *a2 = 0;
    a2[1] = 0;
    v57 = a2[3];
    if (v57)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        v56 = *a2;
        v55 = a2[1];
      }
      else
      {
        v55 = 0;
        v56 = 0;
      }
    }
    goto LABEL_87;
  }
  v10 = (unsigned __int8 *)(v7 + v9);
  a2[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v55 = v8;
    v56 = 0;
LABEL_87:
    v8 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v58 = a2[3];
    if (v58)
    {
      if (v55)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56, v55);
        v7 = *a2;
        v8 = a2[1];
      }
      else
      {
        v8 = 0;
        v7 = 0;
      }
    }
    goto LABEL_88;
  }
  v11 = *v10;
  if (v11 >= 2)
  {
LABEL_88:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v8)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
    *a1 = 0;
    a1[88] = 0;
    goto LABEL_84;
  }
  if (!v11)
  {
    v102[0] = 0;
    v103 = 0;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v102);
LABEL_82:
    v53 = 1;
    goto LABEL_83;
  }
  v12 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  v13 = v12;
  v14 = a2[1];
  v15 = *a2;
  v16 = a2[2] - *a2;
  if (v14 <= v16)
  {
    v61 = 0;
    v62 = 0;
    *a2 = 0;
    a2[1] = 0;
    v63 = a2[3];
    if (v63)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
        v62 = *a2;
        v61 = a2[1];
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
    }
    goto LABEL_94;
  }
  v17 = (unsigned __int8 *)(v15 + v16);
  a2[2] = (uint64_t)(v17 + 1);
  if (!v15)
  {
    v61 = v14;
    v62 = 0;
LABEL_94:
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v64 = a2[3];
    if (v64)
    {
      if (v61)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_95;
  }
  v18 = *v17;
  if (v18 >= 2)
  {
LABEL_95:
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12 && v14)
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v15);
    LODWORD(v21) = 0;
    v18 = 0;
    v20 = 0;
    goto LABEL_15;
  }
  if (*v17)
  {
    if (v14 <= (unint64_t)&v17[-v15 + 1])
    {
      v21 = 0;
      v78 = 0;
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12)
        goto LABEL_176;
      goto LABEL_112;
    }
    a2[2] = (uint64_t)(v17 + 2);
    v19 = v17[1];
    if (v19 >= 2)
    {
      v21 = v14;
      v78 = v15;
      goto LABEL_112;
    }
    v18 = v19 != 0;
    v20 = 256;
  }
  else
  {
    v20 = 0;
  }
  LODWORD(v21) = 0x10000;
  while (1)
  {
LABEL_15:
    v22 = v18 | v21 | v20;
    v23 = a2[1];
    if (!WORD1(v21))
    {
      v65 = *a2;
      *a2 = 0;
      a2[1] = 0;
      v66 = a2[3];
      if (!v66 || !v23)
        goto LABEL_98;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v65);
      v23 = a2[1];
    }
    v24 = *a2;
    v25 = a2[2] - *a2;
    if (v23 <= v25)
    {
      v67 = 0;
      v68 = 0;
      v94 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v94)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
          v68 = *a2;
          v67 = a2[1];
        }
        else
        {
LABEL_98:
          v67 = 0;
          v68 = 0;
        }
      }
      goto LABEL_99;
    }
    v26 = (unsigned __int8 *)(v24 + v25);
    a2[2] = (uint64_t)(v26 + 1);
    if (!v24)
    {
      v67 = v23;
      v68 = 0;
LABEL_99:
      *a2 = 0;
      a2[1] = 0;
      v69 = a2[3];
      if (v69 && v67)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v68, v67);
        v24 = *a2;
        v23 = a2[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
LABEL_119:
      *a2 = 0;
      a2[1] = 0;
      v79 = a2[3];
      if (v79 && v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v24);
      v80 = *a2;
      v81 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12 && v81)
      {
        v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v80);
        LOWORD(v28) = 0;
        v24 = *a2;
      }
      else
      {
        v24 = 0;
        LOWORD(v28) = 0;
      }
      v29 = 1;
      goto LABEL_26;
    }
    v27 = *v26;
    if (v27 >= 2)
      goto LABEL_119;
    if (!v27)
    {
      v29 = 0;
      LOWORD(v28) = 0;
      v3 = 1;
      goto LABEL_26;
    }
    v28 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v104, a2);
    v12 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    v24 = *a2;
    if (!*a2)
    {
      if ((_BYTE)v105 && v104)
      {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v104);
        v24 = *a2;
      }
      v23 = a2[1];
      goto LABEL_119;
    }
    if ((v28 & 0xFF0000) == 0 || !(_BYTE)v105 || (v12 & 0xFF0000) == 0)
      goto LABEL_175;
    v100 = v12;
    v3 = 0;
    v29 = 0;
    v2 = v104;
LABEL_26:
    v30 = a2[1];
    if (v30 <= a2[2] - v24)
    {
      v70 = 0;
      v71 = 0;
      *a2 = 0;
      a2[1] = 0;
      v72 = a2[3];
      if (v72)
      {
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
          v71 = *a2;
          v70 = a2[1];
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
      }
LABEL_102:
      v30 = 0;
      v24 = 0;
      *a2 = 0;
      a2[1] = 0;
      v73 = a2[3];
      if (v73)
      {
        if (v70)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v71, v70);
          v24 = *a2;
          v30 = a2[1];
        }
        else
        {
          v30 = 0;
          v24 = 0;
        }
      }
LABEL_103:
      *a2 = 0;
      a2[1] = 0;
      v74 = a2[3];
      if (v74 && v30)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v24);
LABEL_130:
      LOBYTE(v113) = 0;
      v117 = 0;
      v89 = *a2;
      v90 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12 && v90)
        v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v89);
      goto LABEL_58;
    }
    v31 = (unsigned __int8 *)a2[2];
    a2[2] = (uint64_t)(v31 + 1);
    if (!v24)
    {
      v70 = v30;
      v71 = 0;
      goto LABEL_102;
    }
    v32 = *v31;
    if (v32 >= 2)
      goto LABEL_103;
    if (!v32)
    {
      LOBYTE(v113) = 0;
      v116 = 0;
      v117 = 1;
      goto LABEL_58;
    }
    v33 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    v34 = a2[1];
    v35 = *a2;
    v36 = a2[2] - *a2;
    v101 = v22;
    if (v34 <= v36)
    {
      v82 = 0;
      v83 = 0;
      *a2 = 0;
      a2[1] = 0;
      v84 = a2[3];
      if (v84)
      {
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
          v83 = *a2;
          v82 = a2[1];
        }
        else
        {
          v82 = 0;
          v83 = 0;
        }
      }
      goto LABEL_124;
    }
    v37 = (unsigned __int8 *)(v35 + v36);
    a2[2] = (uint64_t)(v37 + 1);
    if (!v35)
    {
      v82 = v34;
      v83 = 0;
LABEL_124:
      v34 = 0;
      v35 = 0;
      *a2 = 0;
      a2[1] = 0;
      v85 = a2[3];
      if (v85)
      {
        if (v82)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v83, v82);
          v35 = *a2;
          v34 = a2[1];
        }
        else
        {
          v34 = 0;
          v35 = 0;
        }
      }
LABEL_125:
      *a2 = 0;
      a2[1] = 0;
      v86 = a2[3];
      if (v86 && v34)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v35);
      LOBYTE(v122) = 0;
      v125 = 0;
      goto LABEL_47;
    }
    v38 = *v37;
    if (v38 >= 2)
      goto LABEL_125;
    if (!v38)
    {
      v41 = v13;
      LOBYTE(v118) = 0;
      LOBYTE(v120) = 0;
      LOBYTE(v122) = 0;
      v124 = 0;
      v13 = 1;
      v125 = 1;
      v12 = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v118);
      v45 = 0;
      goto LABEL_49;
    }
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v128, a2);
    v12 = (uint64_t)IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v126, a2);
    v39 = *a2;
    if (*a2)
    {
      if (!v129)
        goto LABEL_175;
      v40 = v128;
      v128 = 0;
      if (!v127)
        goto LABEL_175;
      v41 = v13;
      v118 = v40;
      v119 = v126;
      v42 = 1;
      LOBYTE(v120) = 1;
    }
    else
    {
      v41 = v13;
      LOBYTE(v118) = 0;
      LOBYTE(v120) = 0;
      if (v127 && v126)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v126);
      v42 = 0;
    }
    if (v129 && v128)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v128);
    if (!v39)
    {
      v91 = *a2;
      v92 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v93 = a2[3];
      if (v93)
      {
        if (v92)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v91);
          v42 = v120;
        }
      }
    }
    if (v42)
    {
      v43 = v118;
      v44 = v119;
      v118 = 0;
      v119 = 0;
      v122 = v43;
      v123 = v44;
      v99 = v44;
      v124 = 1;
      v125 = 1;
      v12 = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v118);
      v45 = 0;
      v13 = 0;
      goto LABEL_49;
    }
    LOBYTE(v122) = 0;
    v125 = 0;
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v118);
    v13 = v41;
LABEL_47:
    v46 = *a2;
    v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12 && v47)
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v46);
    v41 = v13;
    v45 = 1;
LABEL_49:
    if (!*a2)
    {
      if ((v45 & 1) == 0)
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v122);
      v13 = v41;
      v87 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v88 = a2[3];
      v22 = v101;
      if (v88 && v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
      goto LABEL_130;
    }
    if ((v33 & 0xFF0000) == 0)
      goto LABEL_175;
    LOWORD(v118) = v33;
    if (v45)
      goto LABEL_175;
    LOBYTE(v119) = 0;
    v121 = 0;
    if ((v13 & 1) != 0)
    {
      v48 = 0;
      LOBYTE(v105) = 0;
    }
    else
    {
      v49 = v122;
      v122 = 0;
      v123 = 0;
      v48 = 1;
      v121 = 1;
      v119 = 0;
      v120 = 0;
      v105 = v49;
      v106 = v99;
    }
    LOWORD(v104) = v33;
    LOBYTE(v107) = v48;
    v108 = 1;
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v119);
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v122);
    v113 = v33;
    LOBYTE(v114) = 0;
    v115 = 0;
    if ((v13 & 1) == 0)
    {
      v50 = v105;
      v105 = 0;
      v106 = 0;
      *(_QWORD *)&v114 = v50;
      *((_QWORD *)&v114 + 1) = v99;
      v115 = 1;
    }
    v116 = 1;
    v117 = 1;
    v12 = (uint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v105);
    v13 = v41;
    v22 = v101;
LABEL_58:
    if (!*a2)
    {
      v102[0] = 0;
      v103 = 0;
      goto LABEL_74;
    }
    if ((v13 & 0xFF0000) != 0)
    {
      LOWORD(v104) = v13;
      if (HIWORD(v22))
      {
        WORD1(v104) = v22;
        if (!v29)
        {
          LOBYTE(v105) = 0;
          v108 = 0;
          if ((v3 & 1) == 0)
          {
            LOWORD(v105) = v28;
            v106 = v2;
            v107 = v100;
            v108 = 1;
            v2 = 0;
          }
          if (v117)
            break;
        }
      }
    }
    do
    {
LABEL_175:
      __break(1u);
LABEL_176:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      v21 = 0;
      v96 = *a2;
      v97 = a2[1];
      v98 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v78 = 0;
      if (v98 && v97)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v96);
        v78 = *a2;
        v21 = a2[1];
      }
LABEL_112:
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (!v12)
        goto LABEL_113;
      if (!v21)
        goto LABEL_114;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v78, v21);
      v21 = *a2;
    }
    while (*a2);
    v12 = a2[3];
    v95 = a2[1];
    v20 = 256;
    *a2 = 0;
    a2[1] = 0;
    v18 = 0;
    if (v12 && v95)
    {
      v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
LABEL_113:
      LODWORD(v21) = 0;
LABEL_114:
      v18 = 0;
      v20 = 256;
      continue;
    }
  }
  LOBYTE(v109) = 0;
  v112 = 0;
  if (v116)
  {
    v109 = v113;
    LOBYTE(v110) = 0;
    v111 = 0;
    if (v115)
    {
      v51 = v114;
      v114 = 0uLL;
      v110 = v51;
      v111 = 1;
    }
    v112 = 1;
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>((uint64_t)v102, (uint64_t)&v104);
  if (v112)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v110);
  if (v108)
  {
    v52 = v106;
    v106 = 0;
    if (v52)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v52);
  }
LABEL_74:
  if (v117 && v116)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v114);
  if (((v3 | v29) & 1) == 0 && v2)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
  if (v103
    || (v75 = *a2, v76 = a2[1], *a2 = 0, a2[1] = 0, (v77 = a2[3]) != 0)
    && v76
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v75), v103))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>((uint64_t)a1, (uint64_t)v102);
    goto LABEL_82;
  }
  v53 = 0;
  *a1 = 0;
LABEL_83:
  a1[88] = v53;
  result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v102);
LABEL_84:
  if (!a1[88])
  {
    v59 = *a2;
    v60 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v60)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v59);
    }
  }
  return result;
}

void sub_196E45E9C(_Unwind_Exception *a1)
{
  WTF::DeferrableRefCountedBase *v1;
  int v2;
  int v3;
  uint64_t v4;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)(v4 - 192));
  if (((v3 | v2) & 1) == 0)
  {
    if (v1)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v1);
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::AuthenticatorAttestationResponseData,void>::encode(IPC::Encoder *a1, JSC::ArrayBuffer **a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 12);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 13);
  return IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 14));
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  WTF *v4;
  void *v5;
  WTF *v6;
  unsigned __int16 v7;
  int v8;
  _BYTE *v9;
  int v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF *result;
  BOOL v16;
  int v17;
  int v18;
  _BYTE *v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  WTF *v23;
  uint64_t v24;

  v4 = (WTF *)IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_12:
    v13 = *a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v16 = v14 == 0;
    else
      v16 = 1;
    if (!v16)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v13);
    return result;
  }
  v6 = v4;
  v23 = 0;
  v24 = 0;
  if ((unint64_t)v4 >= 0x100000)
  {
    while (1)
    {
      v20 = IPC::Decoder::decode<WebCore::AuthenticatorTransport>(a2);
      v22 = v20;
      if (v20 < 0x100u)
        goto LABEL_25;
      v18 = HIDWORD(v24);
      if (HIDWORD(v24) == (_DWORD)v24)
      {
        v19 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        v18 = HIDWORD(v24);
        *((_BYTE *)v23 + HIDWORD(v24)) = *v19;
      }
      else
      {
        *((_BYTE *)v23 + HIDWORD(v24)) = v20;
      }
      HIDWORD(v24) = v18 + 1;
      v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v23, (void *)(v18 + 1));
        v17 = 0;
        *(_QWORD *)a1 = v23;
        v21 = v24;
        v23 = 0;
        v24 = 0;
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_19;
      }
    }
  }
  if (v4)
  {
    LODWORD(v24) = (_DWORD)v4;
    v23 = (WTF *)WTF::fastMalloc(v4);
    while (1)
    {
      v7 = IPC::Decoder::decode<WebCore::AuthenticatorTransport>(a2);
      v22 = v7;
      if (v7 < 0x100u)
        break;
      v8 = HIDWORD(v24);
      if (HIDWORD(v24) == (_DWORD)v24)
      {
        v9 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        v8 = HIDWORD(v24);
        *((_BYTE *)v23 + HIDWORD(v24)) = *v9;
      }
      else
      {
        *((_BYTE *)v23 + HIDWORD(v24)) = v7;
      }
      v10 = v8 + 1;
      HIDWORD(v24) = v10;
      v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        v11 = v23;
        v12 = v24;
        goto LABEL_18;
      }
    }
LABEL_25:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v17 = 1;
    goto LABEL_26;
  }
  v10 = 0;
  v12 = 0;
  v11 = 0;
LABEL_18:
  v17 = 0;
  v23 = 0;
  *(_QWORD *)a1 = v11;
  HIDWORD(v24) = 0;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v10;
LABEL_19:
  *(_BYTE *)(a1 + 16) = 1;
LABEL_26:
  result = v23;
  if (v23)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v17)
    goto LABEL_12;
  return result;
}

void sub_196E4619C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::AuthenticatorAssertionResponseData,void>::encode(IPC::Encoder *a1, JSC::ArrayBuffer **a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 12);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 13);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 14);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, a2 + 15);
}

void IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::encode(IPC::Encoder *a1, WebCore::AuthenticatorResponseData *this)
{
  char v3;
  uint64_t v4;
  _BYTE v5[128];
  int v6;
  char v7;

  WebCore::AuthenticatorResponseData::getSerializableForm(this, (uint64_t)v5);
  v3 = v6;
  v4 = v6;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>(a1, (uint64_t)v5, v4);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6])(&v7, v5);
}

void sub_196E462A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::AuthenticatorResponseData::getSerializableForm@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  WTF::DeferrableRefCountedBase *v5;
  WTF::DeferrableRefCountedBase *v6;
  WTF *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  WTF::DeferrableRefCountedBase *v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF *v13;
  WTF::DeferrableRefCountedBase *v14;
  WTF::DeferrableRefCountedBase *v15;
  WTF *v16;
  WTF::DeferrableRefCountedBase *v17;
  WTF::DeferrableRefCountedBase *v18;
  _QWORD *v19;
  _BYTE v20[88];
  WTF::DeferrableRefCountedBase *v21;
  WTF::DeferrableRefCountedBase *v22;
  WTF *v23;
  WTF::DeferrableRefCountedBase *v24;

  v3 = (_DWORD *)this[1];
  if (!v3)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 128) = 0;
    return this;
  }
  v4 = this;
  if (*(_BYTE *)this && this[14])
  {
    *v3 += 2;
    v19 = v3;
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](v20, (uint64_t)(this + 2));
    v5 = (WTF::DeferrableRefCountedBase *)v4[13];
    if (v5)
      *(_DWORD *)v5 += 2;
    v21 = v5;
    v6 = (WTF::DeferrableRefCountedBase *)v4[14];
    if (v6)
      *(_DWORD *)v6 += 2;
    v7 = (WTF *)*((unsigned int *)v4 + 39);
    v23 = 0;
    LODWORD(v24) = 0;
    v22 = v6;
    HIDWORD(v24) = (_DWORD)v7;
    if ((_DWORD)v7)
    {
      v8 = (WTF *)WTF::fastMalloc(v7);
      LODWORD(v24) = (_DWORD)v7;
      v23 = v8;
      memcpy(v8, (const void *)v4[18], *((unsigned int *)v4 + 39));
    }
    std::__variant_detail::__alt<2ul,WebCore::AuthenticatorAttestationResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAttestationResponseData>(a2, (uint64_t *)&v19);
    *(_DWORD *)(a2 + 128) = 2;
    v10 = v23;
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v10, v9);
    }
LABEL_26:
    v17 = v22;
    v22 = 0;
    if (v17)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v18);
    goto LABEL_32;
  }
  if (this[15] && this[16])
  {
    *v3 += 2;
    v19 = v3;
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](v20, (uint64_t)(this + 2));
    v11 = (WTF::DeferrableRefCountedBase *)v4[13];
    if (v11)
      *(_DWORD *)v11 += 2;
    v21 = v11;
    v12 = (WTF::DeferrableRefCountedBase *)v4[15];
    if (v12)
      *(_DWORD *)v12 += 2;
    v22 = v12;
    v13 = (WTF *)v4[16];
    if (v13)
      *(_DWORD *)v13 += 2;
    v23 = v13;
    v14 = (WTF::DeferrableRefCountedBase *)v4[17];
    if (v14)
      *(_DWORD *)v14 += 2;
    v24 = v14;
    std::__variant_detail::__alt<3ul,WebCore::AuthenticatorAssertionResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAssertionResponseData>(a2, (uint64_t *)&v19);
    *(_DWORD *)(a2 + 128) = 3;
    v15 = v24;
    v24 = 0;
    if (v15)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v15);
    v16 = v23;
    v23 = 0;
    if (v16)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v16);
    goto LABEL_26;
  }
  *v3 += 2;
  v19 = v3;
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](v20, (uint64_t)(this + 2));
  std::__variant_detail::__alt<1ul,WebCore::AuthenticatorResponseBaseData>::__alt[abi:sn180100]<WebCore::AuthenticatorResponseBaseData>(a2, (uint64_t *)&v19);
  *(_DWORD *)(a2 + 128) = 1;
LABEL_32:
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
  this = v19;
  v19 = 0;
  if (this)
    return (_QWORD *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)this);
  return this;
}

void sub_196E46514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::DeferrableRefCountedBase *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::DeferrableRefCountedBase *a21,WTF::DeferrableRefCountedBase *a22,WTF *a23,WTF::DeferrableRefCountedBase *a24)
{
  uint64_t v24;

  if (a24)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a24);
  if (a23)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a23);
  if (a22)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a22);
  if (a21)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a21);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](v24);
  if (a9)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a9);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  _BYTE v5[160];
  _BYTE v6[128];
  int v7;
  char v8;

  IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>(a1, (uint64_t)v6);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((uint64_t)v5, (uint64_t)v6);
    std::__optional_destruct_base<WebCore::AuthenticatorResponseData,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticatorResponseData>((uint64_t)a2, (uint64_t)v5);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v5, v4);
  }
  else
  {
    *a2 = 0;
    a2[160] = 0;
  }
  if (v8)
  {
    if (v7 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(v5, v6);
  }
}

void sub_196E46658(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46,char a47)
{
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&a9, a2);
  if (a47)
  {
    if (a45 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a45])(&a9, &a29);
  }
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 136))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E466FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 136))
  {
    v15 = *(unsigned int *)(v13 + 128);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore29AuthenticatorResponseBaseDataENS6_36AuthenticatorAttestationResponseDataENS6_34AuthenticatorAssertionResponseDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 128) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::BufferSource>,void>::encode<IPC::Encoder,std::optional<WebCore::BufferSource> const&>(a1, (unsigned __int8 *)(a2 + 16));
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::BufferSource>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17[8];
  int v18;
  char v19;
  char v20;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_12:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_13;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v6)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_14;
  }
  if (!v9)
  {
    v17[0] = 0;
    v19 = 0;
    result = (uint64_t)std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v17);
    goto LABEL_8;
  }
  result = IPC::Decoder::decode<WebCore::BufferSource>(v17, a2);
  if (!v19)
  {
LABEL_14:
    *a1 = 0;
    a1[24] = 0;
    goto LABEL_15;
  }
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v17);
  a1[16] = 1;
LABEL_8:
  a1[24] = 1;
  if (v19 && v18 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E34ADA00[v18])(&v20, v17);
LABEL_15:
  if (!a1[24])
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v16)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
    }
  }
  return result;
}

void sub_196E46924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  if (*(_BYTE *)(v12 + 24) && *(_BYTE *)(v12 + 16))
  {
    v14 = *(unsigned int *)(v12 + 8);
    if ((_DWORD)v14 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E34ADA00[v14])(&a9, v12);
    *(_DWORD *)(v12 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientInputs::PRFValues,void>::encode(IPC::Encoder *a1, WebCore::BufferSource *this)
{
  char *v4;
  size_t v5;

  v4 = WebCore::BufferSource::span(this);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v4, v5);
  IPC::ArgumentCoder<std::optional<WebCore::BufferSource>,void>::encode<IPC::Encoder,std::optional<WebCore::BufferSource> const&>(a1, (unsigned __int8 *)this + 16);
}

uint64_t IPC::Decoder::decode<WebCore::BufferSource>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;

  result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v10);
  if (!*a2)
  {
    *a1 = 0;
    a1[16] = 0;
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    return result;
  }
  if (!v11)
  {
    __break(1u);
    return result;
  }
  JSC::ArrayBuffer::tryCreate();
  v9 = 1;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)&v8);
  a1[16] = 1;
  if (v9 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t *))off_1E34ADA00[v9])(&v12, &v8);
    if (!a1[16])
      goto LABEL_7;
  }
  return result;
}

void sub_196E46ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  if (*(_BYTE *)(v12 + 16))
  {
    v14 = *(unsigned int *)(v12 + 8);
    if ((_DWORD)v14 != -1)
      ((void (*)(char *, uint64_t))off_1E34ADA00[v14])(&a12, v12);
    *(_DWORD *)(v12 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientInputs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs> const&>(a1, (unsigned __int8 *)(a2 + 64));
}

char *IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)a2);
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, (JSC::ArrayBuffer **)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientOutputs,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs> const&>(a1, (uint64_t)(a2 + 40));
}

char *IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, v2 + 2);
  v4 = v2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = v2[5];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::RpEntity,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>(a1, (uint64_t)(a2 + 2));
}

void IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::UserEntity,void>::encode(uint64_t a1, uint64_t *a2)
{
  char *v4;
  size_t v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  v4 = WebCore::BufferSource::span((WebCore::BufferSource *)(a2 + 2));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 4);
}

char *IPC::ArgumentCoder<WebCore::PublicKeyCredentialDescriptor,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t v4;
  char v5;
  char *v6;
  size_t v7;

  v4 = (uint64_t)(a2 + 24);
  v5 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = WebCore::BufferSource::span((WebCore::BufferSource *)(a2 + 8));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v6, v7);
  return IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v4);
}

void IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char *v4;
  size_t v5;
  char v6;

  IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::RpEntity,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions::UserEntity,void>::encode((uint64_t)a1, (uint64_t *)(a2 + 32));
  v4 = WebCore::BufferSource::span((WebCore::BufferSource *)(a2 + 72));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v4, v5);
  IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 104));
  IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 112);
  IPC::ArgumentCoder<std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>,void>::encode<IPC::Encoder,std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria> const&>(a1, a2 + 128);
  v6 = *(_BYTE *)(a2 + 136);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs>&>(a1, a2 + 144);
}

uint64_t IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  uint64_t *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  void *v30;
  uint64_t v31;
  __int128 *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  uint64_t v35;
  __int128 *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int16 v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  int v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v74;
  __int128 v75;
  WTF::StringImpl *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  char v133;
  _BYTE *v134;
  int i;
  WTF::StringImpl *v136[2];
  WTF::StringImpl *v137;
  int v138;
  __int128 v139;
  _QWORD v140[3];
  _QWORD v141[3];
  int v142;
  int v143;
  int v144;
  char v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  int v148;
  __int16 v149;
  char v150;
  char v151;
  char v152[160];
  WTF::StringImpl *v153;
  uint64_t v154;
  char v155;
  char v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  char v159;
  WTF::StringImpl *v160;
  int v161;
  char v162;
  __int128 v163;
  _BYTE v164[16];
  uint64_t v165;
  char v166;
  __int128 v167;
  WTF::StringImpl *v168;
  char v169;
  char v170;
  WTF::StringImpl *v171;
  char v172;
  char v173[9];

  v3 = a1;
  IPC::Decoder::decode<WTF::String>(a1, &v153);
  IPC::Decoder::decode<WTF::String>(v3, &v163);
  v134 = a2;
  v5 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::String>>(v3, (uint64_t)v136);
  v8 = *v3;
  if (*v3)
  {
    if (!(_BYTE)v154)
      goto LABEL_148;
    v9 = v153;
    v153 = 0;
    if (!BYTE8(v163))
      goto LABEL_148;
    v10 = v163;
    *(_QWORD *)&v163 = 0;
    if (!(_BYTE)v137)
      goto LABEL_148;
    if (LOBYTE(v136[1]))
    {
      v11 = v136[0];
      v136[0] = 0;
      *(_QWORD *)&v167 = v9;
      *((_QWORD *)&v167 + 1) = v10;
      v168 = v11;
      v169 = 1;
    }
    else
    {
      *(_QWORD *)&v167 = v9;
      *((_QWORD *)&v167 + 1) = v10;
      LOBYTE(v168) = 0;
      v169 = 0;
    }
    v170 = 1;
  }
  else
  {
    LOBYTE(v167) = 0;
    v170 = 0;
    if ((_BYTE)v137)
    {
      if (LOBYTE(v136[1]))
      {
        v83 = v136[0];
        v136[0] = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v6);
          else
            *(_DWORD *)v83 -= 2;
        }
      }
    }
  }
  if (BYTE8(v163))
  {
    v12 = (WTF::StringImpl *)v163;
    *(_QWORD *)&v163 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if ((_BYTE)v154)
  {
    v13 = v153;
    v153 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v6);
        if (v8)
          goto LABEL_19;
        goto LABEL_39;
      }
      *(_DWORD *)v13 -= 2;
    }
  }
  if (v8)
    goto LABEL_19;
LABEL_39:
  v21 = *v3;
  v22 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v23 = v3[3];
  if (v23 && v22)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
LABEL_19:
  IPC::Decoder::decode<WTF::String>(v3, &v160);
  IPC::Decoder::decode<WTF::String>(v3, &v157);
  IPC::Decoder::decode<WebCore::BufferSource>(&v153, v3);
  v5 = (uint64_t)IPC::Decoder::decode<WTF::String>(v3, &v171);
  if (*v3)
  {
    if (!(_BYTE)v161)
      goto LABEL_148;
    v14 = v160;
    v160 = 0;
    if (!(_BYTE)v158)
      goto LABEL_148;
    v15 = v157;
    v157 = 0;
    v136[0] = v14;
    v136[1] = v15;
    if (!v155)
      goto LABEL_148;
    v5 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v137, (uint64_t)&v153);
    if (!v172)
      goto LABEL_148;
    v16 = v171;
    v171 = 0;
    *(_QWORD *)&v139 = v16;
    v17 = *(_OWORD *)v136;
    v136[0] = 0;
    v136[1] = 0;
    v163 = v17;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v164, (uint64_t)&v137);
    v165 = v139;
    v166 = 1;
    *(_QWORD *)&v139 = 0;
    if (v138 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34ADA00[v138])(v173, &v137);
    v138 = -1;
    v18 = v136[1];
    v136[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v6);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v136[0];
    v136[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v6);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
    LOBYTE(v163) = 0;
    v166 = 0;
  }
  if (v172)
  {
    v20 = v171;
    v171 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v6);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (v155 && (_DWORD)v154 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34ADA00[v154])(v136, &v153);
  if ((_BYTE)v158)
  {
    v24 = v157;
    v157 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v6);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if ((_BYTE)v161)
  {
    v25 = v160;
    v160 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v6);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  if (!v166)
  {
    v84 = *v3;
    v85 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v86 = v3[3];
    if (v86)
    {
      if (v85)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v84);
    }
  }
  IPC::Decoder::decode<WebCore::BufferSource>(&v160, v3);
  v26 = IPC::Decoder::decode<unsigned long long>(v3);
  if (!v27)
    goto LABEL_76;
  v28 = (WTF::StringImpl *)v26;
  v153 = 0;
  v154 = 0;
  if (v26 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialCreationOptions::Parameters>((uint64_t)v136, v3);
      if (!(_BYTE)v137)
        break;
      v35 = HIDWORD(v154);
      if (HIDWORD(v154) == (_DWORD)v154)
      {
        v36 = (__int128 *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v153, HIDWORD(v154) + 1, (unint64_t)v136);
        v35 = HIDWORD(v154);
        v37 = v153;
        v38 = *v36;
      }
      else
      {
        v37 = v153;
        v38 = *(_OWORD *)v136;
      }
      *((_OWORD *)v37 + v35) = v38;
      v39 = ++HIDWORD(v154);
      v28 = (WTF::StringImpl *)((char *)v28 - 1);
      if (!v28)
      {
        WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v153, v39);
        v28 = v153;
        v131 = v154;
        v2 = HIDWORD(v154);
        goto LABEL_68;
      }
    }
LABEL_74:
    v40 = v153;
    if (v153)
    {
      v153 = 0;
      LODWORD(v154) = 0;
      WTF::fastFree(v40, v30);
    }
LABEL_76:
    v6 = (WTF::StringImpl *)*v3;
    v7 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v5 = v3[3];
    if (v5)
      goto LABEL_149;
    goto LABEL_77;
  }
  if (v26)
  {
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v26));
    LODWORD(v154) = (_DWORD)v28;
    v153 = v29;
    do
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialCreationOptions::Parameters>((uint64_t)v136, v3);
      if (!(_BYTE)v137)
        goto LABEL_74;
      v31 = HIDWORD(v154);
      if (HIDWORD(v154) == (_DWORD)v154)
      {
        v32 = (__int128 *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v153, HIDWORD(v154) + 1, (unint64_t)v136);
        v31 = HIDWORD(v154);
        v33 = v153;
        v34 = *v32;
      }
      else
      {
        v33 = v153;
        v34 = *(_OWORD *)v136;
      }
      *((_OWORD *)v33 + v31) = v34;
      v2 = ++HIDWORD(v154);
      v28 = (WTF::StringImpl *)((char *)v28 - 1);
    }
    while (v28);
    v28 = v153;
    v131 = v154;
  }
  else
  {
    v2 = 0;
    v131 = 0;
  }
LABEL_68:
  for (i = 0; ; i = 1)
  {
    v132 = IPC::Decoder::decode<std::optional<unsigned int>>(v3);
    v133 = v41;
    IPC::Decoder::decode<WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v157, v3);
    v42 = v3[1];
    v6 = (WTF::StringImpl *)*v3;
    v43 = v3[2] - *v3;
    if (v42 <= v43)
    {
      v87 = 0;
      v88 = 0;
      *v3 = 0;
      v3[1] = 0;
      v89 = v3[3];
      if (v89)
      {
        if (v42)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v89 + 16))(v89);
          v88 = *v3;
          v87 = v3[1];
        }
        else
        {
          v87 = 0;
          v88 = 0;
        }
      }
      goto LABEL_161;
    }
    v44 = (unsigned __int8 *)v6 + v43;
    v3[2] = (uint64_t)(v44 + 1);
    if (!v6)
    {
      v87 = v42;
      v88 = 0;
LABEL_161:
      v42 = 0;
      v6 = 0;
      *v3 = 0;
      v3[1] = 0;
      v90 = v3[3];
      if (v90)
      {
        if (v87)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v90 + 16))(v90, v88, v87);
          v6 = (WTF::StringImpl *)*v3;
          v42 = v3[1];
        }
        else
        {
          v42 = 0;
          v6 = 0;
        }
      }
LABEL_162:
      v49 = 0;
      *v3 = 0;
      v3[1] = 0;
      v91 = v3[3];
      if (v91)
      {
        if (v42)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v91 + 16))(v91, v6);
        v49 = 0;
      }
      goto LABEL_186;
    }
    if (*v44 >= 2u)
      goto LABEL_162;
    if (!*v44)
    {
      v49 = 0;
      v50 = 0;
      goto LABEL_119;
    }
    if (v42 <= v44 + 1 - (unsigned __int8 *)v6)
    {
      v97 = 0;
      v98 = 0;
      *v3 = 0;
      v3[1] = 0;
      v99 = v3[3];
      if (v99)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
        v97 = 0;
        v123 = *v3;
        v124 = v3[1];
        v125 = v3[3];
        *v3 = 0;
        v3[1] = 0;
        v98 = 0;
        if (v125)
        {
          if (v124)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v123);
            v98 = *v3;
            v97 = v3[1];
          }
        }
      }
    }
    else
    {
      v3[2] = (uint64_t)(v44 + 2);
      v45 = v44[1];
      if (v45 < 2)
      {
        if (v45)
        {
          v46 = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>(v3);
          v47 = (v46 > 0xFFu) << 16;
          if ((v46 & 0xFF00) != 0)
            v48 = v46;
          else
            v48 = 0;
          v129 = 256;
          v130 = v48;
        }
        else
        {
          v129 = 0;
          v130 = 0;
          v47 = 0x10000;
        }
        goto LABEL_91;
      }
      v97 = v42;
      v98 = (uint64_t)v6;
    }
    *v3 = 0;
    v3[1] = 0;
    v100 = v3[3];
    if (v100 && v97)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v100 + 16))(v100, v98, v97);
    v47 = 0;
    v129 = 0;
    v130 = 0;
LABEL_91:
    v51 = v3[1];
    if (!HIWORD(v47))
    {
      v101 = 0;
      v102 = 0;
      v103 = *v3;
      *v3 = 0;
      v3[1] = 0;
      v104 = v3[3];
      if (!v104)
        goto LABEL_175;
      if (!v51)
      {
        v101 = 0;
        v102 = 0;
LABEL_175:
        v51 = 0;
        v52 = 0;
        *v3 = 0;
        v3[1] = 0;
        v105 = v3[3];
        if (v105)
        {
          if (v101)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v105 + 16))(v105, v102, v101);
            v52 = *v3;
            v51 = v3[1];
          }
          else
          {
            v51 = 0;
            v52 = 0;
          }
        }
        goto LABEL_176;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v103);
      v51 = v3[1];
    }
    v52 = *v3;
    v53 = v3[2] - *v3;
    if (v51 <= v53)
    {
      v101 = 0;
      v121 = v3[3];
      *v3 = 0;
      v3[1] = 0;
      v102 = 0;
      if (v51 && v121)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v121 + 16))(v121);
        v102 = *v3;
        v101 = v3[1];
      }
      goto LABEL_175;
    }
    v54 = (unsigned __int8 *)(v52 + v53);
    v3[2] = (uint64_t)(v54 + 1);
    if (!v52)
    {
      v101 = v51;
      v102 = 0;
      goto LABEL_175;
    }
    if (*v54 < 2u)
    {
      if (!*v54)
      {
        v58 = 0;
        v59 = 0;
        v57 = 0x10000;
        goto LABEL_104;
      }
      if (v51 <= (unint64_t)&v54[-v52 + 1])
      {
        v56 = 0;
        v118 = 0;
        *v3 = 0;
        v3[1] = 0;
        v119 = v3[3];
        if (v119)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
          v56 = 0;
          v126 = *v3;
          v127 = v3[1];
          v128 = v3[3];
          *v3 = 0;
          v3[1] = 0;
          v118 = 0;
          if (v128)
          {
            if (v127)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v126);
              v118 = *v3;
              v56 = v3[1];
            }
          }
        }
      }
      else
      {
        v3[2] = (uint64_t)(v54 + 2);
        v55 = v54[1];
        if (v55 < 3)
        {
          LODWORD(v56) = v55 | 0x100;
          goto LABEL_99;
        }
        v56 = v51;
        v118 = v52;
      }
      *v3 = 0;
      v3[1] = 0;
      v120 = v3[3];
      if (v120)
      {
        if (!v56)
          goto LABEL_99;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v120 + 16))(v120, v118, v56);
      }
      LODWORD(v56) = 0;
LABEL_99:
      v57 = (v56 > 0xFF) << 16;
      if (v56 >= 0x100)
        v58 = v56;
      else
        v58 = 0;
      v59 = 256;
      goto LABEL_104;
    }
LABEL_176:
    *v3 = 0;
    v3[1] = 0;
    v106 = v3[3];
    if (v106 && v51)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v52);
    v57 = 0;
    v58 = 0;
    v59 = 0;
LABEL_104:
    v60 = v3[1];
    if (!HIWORD(v57))
    {
      v107 = 0;
      v108 = 0;
      v109 = *v3;
      *v3 = 0;
      v3[1] = 0;
      v110 = v3[3];
      if (!v110)
        goto LABEL_179;
      if (!v60)
      {
        v107 = 0;
        v108 = 0;
        goto LABEL_179;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v109);
      v60 = v3[1];
    }
    v61 = *v3;
    v62 = v3[2] - *v3;
    if (v60 <= v62)
    {
      v107 = 0;
      v122 = v3[3];
      *v3 = 0;
      v3[1] = 0;
      v108 = 0;
      if (v60 && v122)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 16))(v122);
        v108 = *v3;
        v107 = v3[1];
      }
      goto LABEL_179;
    }
    v63 = (unsigned __int8 *)(v61 + v62);
    v3[2] = (uint64_t)(v63 + 1);
    if (!v61)
    {
      v107 = v60;
      v108 = 0;
LABEL_179:
      *v3 = 0;
      v3[1] = 0;
      v111 = v3[3];
      if (v111 && v107)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v111 + 16))(v111, v108, v107);
        v64 = 0;
        v61 = *v3;
        v60 = v3[1];
      }
      else
      {
        v60 = 0;
        v61 = 0;
        v64 = 0;
      }
LABEL_181:
      *v3 = 0;
      v3[1] = 0;
      v112 = v3[3];
      if (v112 && v60)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v61);
      v66 = 0;
      v65 = 1;
      goto LABEL_109;
    }
    v64 = *v63;
    if (v64 >= 2)
      goto LABEL_181;
    v65 = 0;
    v66 = 1;
LABEL_109:
    v5 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(v3);
    v67 = v58 | v57 | v59;
    v6 = (WTF::StringImpl *)*v3;
    if (*v3)
    {
      if (!((v130 | v47 | v129) >> 16) || !HIWORD(v67) || v65 || (unsigned __int16)v5 <= 0xFFu)
        goto LABEL_148;
      v68 = (unsigned __int16)(v130 | v47 | v129);
      v69 = 0x1000000000000;
    }
    else
    {
      v69 = 0;
      v68 = 0;
    }
    v70 = 0x100000000;
    if ((v66 & (v64 != 0)) == 0)
      v70 = 0;
    if (HIWORD(v69))
    {
      v50 = 0;
      v49 = (v69 | ((unint64_t)v5 << 40) | (v67 << 16) | v68 | v70) & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      goto LABEL_119;
    }
    v113 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v114 = v3[3];
    if (v114 && v113)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 16))(v114);
    v49 = 0x1000000000000;
LABEL_186:
    v115 = *v3;
    v116 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v117 = v3[3];
    if (v117 && v116)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v115);
      v6 = (WTF::StringImpl *)*v3;
    }
    else
    {
      v6 = 0;
    }
    v50 = 1;
LABEL_119:
    v71 = v3[1];
    if (v71 <= v3[2] - (uint64_t)v6)
    {
      v92 = 0;
      v93 = 0;
      *v3 = 0;
      v3[1] = 0;
      v94 = v3[3];
      if (v94)
      {
        if (v71)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
          v93 = *v3;
          v92 = v3[1];
        }
        else
        {
          v92 = 0;
          v93 = 0;
        }
      }
      goto LABEL_167;
    }
    v72 = (unsigned __int8 *)v3[2];
    v3[2] = (uint64_t)(v72 + 1);
    if (!v6)
    {
      v92 = v71;
      v93 = 0;
LABEL_167:
      v71 = 0;
      v6 = 0;
      *v3 = 0;
      v3[1] = 0;
      v95 = v3[3];
      if (v95)
      {
        if (v92)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v93, v92);
          v6 = (WTF::StringImpl *)*v3;
          v71 = v3[1];
        }
        else
        {
          v71 = 0;
          v6 = 0;
        }
      }
      goto LABEL_168;
    }
    v73 = *v72;
    if (v73 < 4)
    {
      v74 = v73 | 0x100;
      goto LABEL_123;
    }
LABEL_168:
    *v3 = 0;
    v3[1] = 0;
    v96 = v3[3];
    if (v96 && v71)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v96 + 16))(v96, v6);
    v74 = 0;
LABEL_123:
    v5 = (uint64_t)IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientInputs>>(&v153, v3);
    if (!*v3)
      break;
    if (v170)
    {
      v75 = v167;
      v167 = 0uLL;
      *(_OWORD *)v136 = v75;
      LOBYTE(v137) = 0;
      LOBYTE(v138) = 0;
      if (v169)
      {
        v76 = v168;
        v168 = 0;
        v137 = v76;
        LOBYTE(v138) = 1;
      }
      if (v166)
      {
        v77 = v163;
        v163 = 0uLL;
        v139 = v77;
        v3 = v140;
        v5 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v140, (uint64_t)v164);
        v78 = v165;
        v165 = 0;
        v140[2] = v78;
        if (v162)
        {
          v5 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v141, (uint64_t)&v160);
          if (!i)
          {
            v141[2] = v28;
            v142 = v131;
            v143 = v2;
            if (v133)
            {
              v144 = v132;
              v145 = BYTE4(v132);
              if (v159)
              {
                v146 = v157;
                v79 = v158;
                v157 = 0;
                v158 = 0;
                v147 = v79;
                if (!v50)
                {
                  v148 = v49;
                  v150 = BYTE6(v49);
                  v149 = WORD2(v49);
                  if (v74 > 0xFF)
                  {
                    v151 = v74;
                    if (v156)
                    {
                      std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](v152, (uint64_t)&v153);
                      *(_BYTE *)(WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v134, (uint64_t)v136)+ 296) = 1;
                      WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)v136);
                      v28 = 0;
                      goto LABEL_136;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_148:
    __break(1u);
LABEL_149:
    if (v7)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5, v6);
LABEL_77:
    v28 = 0;
  }
  *v134 = 0;
  v134[296] = 0;
LABEL_136:
  if (v156)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&v153);
  if (v159)
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v157);
  v80 = i;
  if (!v28)
    v80 = 1;
  if ((v80 & 1) == 0)
    WTF::fastFree(v28, v6);
  if (v162 && v161 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34ADA00[v161])(v136, &v160);
  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::UserEntity,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v163, v6);
  return std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::RpEntity,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v167, v81);
}

void sub_196E47BCC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::UserEntity,false>::~__optional_destruct_base[abi:sn180100](v2 - 208, a2);
  std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::RpEntity,false>::~__optional_destruct_base[abi:sn180100](v2 - 160, v4);
  _Unwind_Resume(a1);
}

WTF::ASCIILiteral *IPC::Decoder::decode<WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  WTF::ASCIILiteral *result;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28[8];
  _BYTE v29[16];
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  uint64_t v34;
  WTF *v35;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  v6 = v4;
  v34 = 0;
  v35 = 0;
  if (v4 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialDescriptor>((uint64_t)v28, a2);
      if (!v33)
        goto LABEL_21;
      v18 = HIDWORD(v35);
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PublicKeyCredentialDescriptor>((uint64_t)&v34, (unint64_t)v28);
      }
      else
      {
        v20 = v34;
        v21 = (_BYTE *)(v34 + 40 * HIDWORD(v35));
        *v21 = v28[0];
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v21 + 8), (uint64_t)v29);
        v22 = v20 + 40 * v18;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        v23 = v30;
        v30 = 0;
        *(_QWORD *)(v22 + 24) = v23;
        LODWORD(v23) = v31;
        v31 = 0;
        *(_DWORD *)(v22 + 32) = v23;
        LODWORD(v23) = v32;
        v32 = 0;
        *(_DWORD *)(v22 + 36) = v23;
        ++HIDWORD(v35);
      }
      std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v19);
      if (!--v6)
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
        v24 = v34;
        v34 = 0;
        *(_QWORD *)a1 = v24;
        v16 = (int)v35;
        v15 = HIDWORD(v35);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v35) = 40 * (int)v4 / 0x28u;
    v34 = WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::PublicKeyCredentialDescriptor>((uint64_t)v28, a2);
      if (!v33)
        break;
      v8 = HIDWORD(v35);
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PublicKeyCredentialDescriptor>((uint64_t)&v34, (unint64_t)v28);
      }
      else
      {
        v10 = v34;
        v11 = (_BYTE *)(v34 + 40 * HIDWORD(v35));
        *v11 = v28[0];
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v11 + 8), (uint64_t)v29);
        v12 = v10 + 40 * v8;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        v13 = v30;
        v30 = 0;
        *(_QWORD *)(v12 + 24) = v13;
        LODWORD(v13) = v31;
        v31 = 0;
        *(_DWORD *)(v12 + 32) = v13;
        LODWORD(v13) = v32;
        v32 = 0;
        *(_DWORD *)(v12 + 36) = v13;
        ++HIDWORD(v35);
      }
      std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v9);
      if (!--v6)
      {
        v14 = v34;
        v16 = (int)v35;
        v15 = HIDWORD(v35);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v7);
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v34);
LABEL_22:
    v25 = *a2;
    v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::ASCIILiteral *)a2[3];
    if (result)
      v27 = v26 == 0;
    else
      v27 = 1;
    if (!v27)
      return (WTF::ASCIILiteral *)(*(uint64_t (**)(WTF::ASCIILiteral *, uint64_t))(*(_QWORD *)result + 16))(result, v25);
    return result;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
LABEL_13:
  v34 = 0;
  *(_QWORD *)a1 = v14;
LABEL_14:
  v35 = 0;
  *(_DWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 12) = v15;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v34);
}

void sub_196E482B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a15);
  _Unwind_Resume(a1);
}

WebCore::AuthenticationExtensionsClientInputs *IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientInputs>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::AuthenticationExtensionsClientInputs *result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[18];
  char v108;
  WTF::StringImpl *v109[2];
  _BYTE v110[24];
  char v111;
  char v112;
  char v113[8];
  char v114;
  char v115;
  WTF::StringImpl *v116;
  __int16 v117;
  char v118[8];
  int v119;
  char v120;
  char v121;
  _BYTE v122[48];
  char v123;
  WTF::StringImpl *v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  _BYTE v129[16];
  char v130;
  _QWORD v131[2];
  char v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  char v136;
  WTF::StringImpl *v137;
  char v138;
  char v139;
  _QWORD v140[2];
  char v141;
  uint64_t v142;
  uint64_t v143;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v47 = 0;
    v48 = 0;
    *a2 = 0;
    a2[1] = 0;
    v49 = a2[3];
    if (v49)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        v48 = *a2;
        v47 = a2[1];
      }
      else
      {
        v47 = 0;
        v48 = 0;
      }
    }
    goto LABEL_71;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v47 = v6;
    v48 = 0;
LABEL_71:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v50 = a2[3];
    if (v50)
    {
      if (v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48, v47);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_72;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_72:
    *a2 = 0;
    a2[1] = 0;
    result = (WebCore::AuthenticationExtensionsClientInputs *)a2[3];
    if (result && v6)
      result = (WebCore::AuthenticationExtensionsClientInputs *)(*(uint64_t (**)(WebCore::AuthenticationExtensionsClientInputs *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    *a1 = 0;
    a1[152] = 0;
LABEL_143:
    if (a1[152])
      return result;
    goto LABEL_146;
  }
  if (!v9)
  {
    LOBYTE(v107[0]) = 0;
    v108 = 0;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v107);
    goto LABEL_141;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v124);
  v10 = a2[1];
  v11 = *a2;
  v12 = a2[2] - *a2;
  if (v10 <= v12)
  {
    v52 = 0;
    v53 = 0;
    *a2 = 0;
    a2[1] = 0;
    v54 = a2[3];
    if (v54)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
        v53 = *a2;
        v52 = a2[1];
      }
      else
      {
        v52 = 0;
        v53 = 0;
      }
    }
    goto LABEL_75;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  a2[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v52 = v10;
    v53 = 0;
LABEL_75:
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v55 = a2[3];
    if (v55)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53, v52);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_76;
  }
  v14 = *v13;
  if (v14 < 2)
  {
    if (v14)
    {
      IPC::Decoder::decode<WTF::String>(a2, &v137);
      v15 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
      IPC::Decoder::decode<std::optional<WebCore::BufferSource>>(&v126, a2);
      if (*a2)
      {
        if (!v138)
          goto LABEL_145;
        v17 = v137;
        v137 = 0;
        v116 = v17;
        if ((v15 & 0xFF0000) == 0)
          goto LABEL_145;
        v117 = v15;
        if (!v129[0])
          goto LABEL_145;
        std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](v118, (uint64_t)&v126);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>((uint64_t)v109, (uint64_t *)&v116);
        if (v120)
        {
          if (v119 != -1)
            ((void (*)(uint64_t *, char *))off_1E34ADA00[v119])(&v133, v118);
          v119 = -1;
        }
        v18 = v116;
        v116 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      else
      {
        LOBYTE(v109[0]) = 0;
        v111 = 0;
      }
      if (v129[0] && v128 && v127 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34ADA00[v127])(&v116, &v126);
      if (v138)
      {
        v19 = v137;
        v137 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v16);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      if (!v111)
      {
        v73 = *a2;
        v74 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v75 = a2[3];
        if (!v75 || !v74 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73), !v111))
        {
          v20 = 0;
          v122[0] = 0;
          goto LABEL_35;
        }
      }
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>((uint64_t)v122, (uint64_t *)v109);
    }
    else
    {
      LOBYTE(v109[0]) = 0;
      v111 = 0;
      std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](v122, (uint64_t)v109);
    }
    v20 = 1;
LABEL_35:
    v123 = v20;
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v109);
    goto LABEL_36;
  }
LABEL_76:
  *a2 = 0;
  a2[1] = 0;
  v56 = a2[3];
  if (v56 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v11);
  v122[0] = 0;
  v123 = 0;
LABEL_36:
  v21 = a2[1];
  if (!v123)
  {
    v57 = *a2;
    *a2 = 0;
    a2[1] = 0;
    v58 = a2[3];
    if (!v58 || !v21)
    {
      v59 = 0;
      v60 = 0;
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_80;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v57);
    v21 = a2[1];
  }
  v22 = (WTF::StringImpl *)*a2;
  v23 = a2[2] - *a2;
  if (v21 <= v23)
  {
    v59 = 0;
    v60 = 0;
    v101 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v101)
    {
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
        v60 = *a2;
        v59 = a2[1];
      }
      else
      {
        v59 = 0;
        v60 = 0;
      }
    }
    goto LABEL_80;
  }
  v24 = (unsigned __int8 *)v22 + v23;
  a2[2] = (uint64_t)(v24 + 1);
  if (!v22)
  {
    v59 = v21;
    v60 = 0;
LABEL_80:
    v21 = 0;
    v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    v61 = a2[3];
    if (v61)
    {
      if (v59)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v61 + 16))(v61, v60, v59);
        v22 = (WTF::StringImpl *)*a2;
        v21 = a2[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_81;
  }
  if (*v24 >= 2u)
  {
LABEL_81:
    *a2 = 0;
    a2[1] = 0;
    v62 = a2[3];
    if (v62 && v21)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v62 + 16))(v62, v22);
    LOBYTE(v116) = 0;
    v121 = 0;
    goto LABEL_121;
  }
  if (!*v24)
  {
    LOBYTE(v109[0]) = 0;
    v114 = 0;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](&v116, (uint64_t)v109);
    goto LABEL_119;
  }
  if (v21 <= v24 + 1 - (unsigned __int8 *)v22)
  {
    v63 = 0;
    v64 = 0;
    *a2 = 0;
    a2[1] = 0;
    v65 = a2[3];
    if (v65)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
      v63 = 0;
      v102 = *a2;
      v103 = a2[1];
      v104 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v64 = 0;
      if (v104)
      {
        if (v103)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v102);
          v64 = *a2;
          v63 = a2[1];
        }
      }
    }
  }
  else
  {
    a2[2] = (uint64_t)(v24 + 2);
    v25 = v24[1];
    if (v25 < 2)
    {
      if (v25)
      {
        IPC::Decoder::decode<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(&v126, a2);
        v26 = v130;
        if (!v130)
        {
          LOBYTE(v137) = 0;
          goto LABEL_50;
        }
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)&v137, (uint64_t)&v126);
      }
      else
      {
        LOBYTE(v126) = 0;
        v130 = 0;
        std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](&v137, (uint64_t)&v126);
      }
      v26 = 1;
LABEL_50:
      v139 = v26;
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)&v126);
      goto LABEL_51;
    }
    v63 = v21;
    v64 = (uint64_t)v22;
  }
  *a2 = 0;
  a2[1] = 0;
  v66 = a2[3];
  if (v66 && v63)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v66 + 16))(v66, v64, v63);
  LOBYTE(v137) = 0;
  v139 = 0;
LABEL_51:
  v27 = a2[1];
  if (!v139)
  {
    v67 = *a2;
    *a2 = 0;
    a2[1] = 0;
    v68 = a2[3];
    if (!v68 || !v27)
    {
      v69 = 0;
      v70 = 0;
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_89;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v67);
    v27 = a2[1];
  }
  v28 = *a2;
  v29 = a2[2] - *a2;
  if (v27 <= v29)
  {
    v69 = 0;
    v70 = 0;
    v105 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v105)
    {
      if (v27)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105);
        v70 = *a2;
        v69 = a2[1];
      }
      else
      {
        v69 = 0;
        v70 = 0;
      }
    }
    goto LABEL_89;
  }
  v30 = (unsigned __int8 *)(v28 + v29);
  a2[2] = (uint64_t)(v30 + 1);
  if (!v28)
  {
    v69 = v27;
    v70 = 0;
LABEL_89:
    v27 = 0;
    v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    v71 = a2[3];
    if (v71)
    {
      if (v69)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v70, v69);
        v28 = *a2;
        v27 = a2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
LABEL_90:
    *a2 = 0;
    a2[1] = 0;
    v72 = a2[3];
    if (!v72 || !v27)
      goto LABEL_103;
LABEL_92:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v28);
LABEL_103:
    LOBYTE(v133) = 0;
    v136 = 0;
    v82 = *a2;
    v83 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v84 = a2[3];
    if (v84 && v83)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v82);
    v45 = 0;
    v46 = 0;
    goto LABEL_105;
  }
  v31 = *v30;
  if (v31 >= 2)
    goto LABEL_90;
  if (!v31)
  {
    v45 = 0;
    LOBYTE(v133) = 0;
    v135 = 0;
    v46 = 1;
    v136 = 1;
    goto LABEL_105;
  }
  v32 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v33)
  {
LABEL_102:
    v28 = *a2;
    v81 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v72 = a2[3];
    if (!v72 || !v81)
      goto LABEL_103;
    goto LABEL_92;
  }
  v34 = v32;
  v142 = 0;
  v143 = 0;
  if (v32 >= 0x5555)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v126, a2);
      if (!LOBYTE(v131[0]))
        goto LABEL_101;
      v76 = HIDWORD(v143);
      if (HIDWORD(v143) == (_DWORD)v143)
      {
        WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v142, (unint64_t)&v126);
      }
      else
      {
        v78 = v142;
        v79 = v126;
        v126 = 0;
        v80 = (_QWORD *)(v142 + 48 * HIDWORD(v143));
        *v80 = v79;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v80 + 1), (uint64_t)&v127);
        std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v78 + 48 * v76 + 24), (uint64_t)v129);
        ++HIDWORD(v143);
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126, v77);
      if (!--v34)
      {
        WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v142, HIDWORD(v143));
        v43 = v142;
        v142 = 0;
        v106 = v143;
        goto LABEL_69;
      }
    }
  }
  if (v32)
  {
    v35 = 48 * v32;
    v36 = WTF::fastMalloc((WTF *)(48 * v32));
    LODWORD(v143) = v35 / 0x30;
    v142 = v36;
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v126, a2);
      if (!LOBYTE(v131[0]))
        break;
      v38 = HIDWORD(v143);
      if (HIDWORD(v143) == (_DWORD)v143)
      {
        WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((uint64_t)&v142, (unint64_t)&v126);
      }
      else
      {
        v40 = v142;
        v41 = v126;
        v126 = 0;
        v42 = (_QWORD *)(v142 + 48 * HIDWORD(v143));
        *v42 = v41;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v42 + 1), (uint64_t)&v127);
        std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v40 + 48 * v38 + 24), (uint64_t)v129);
        ++HIDWORD(v143);
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126, v39);
      if (!--v34)
      {
        v43 = v142;
        v44 = v143;
        goto LABEL_68;
      }
    }
LABEL_101:
    std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v126, v37);
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v142);
    goto LABEL_102;
  }
  v43 = 0;
  v44 = 0;
LABEL_68:
  v106 = v44;
  v142 = 0;
LABEL_69:
  v143 = 0;
  v45 = 1;
  v141 = 1;
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v142);
  v140[0] = 0;
  v140[1] = 0;
  v133 = v43;
  v134 = v106;
  v135 = 1;
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v140);
  v136 = 1;
  v46 = 1;
LABEL_105:
  if (*a2)
  {
    if (!v139)
      goto LABEL_145;
    std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](&v126, (uint64_t)&v137);
    if (!v136)
      goto LABEL_145;
    LOBYTE(v131[0]) = 0;
    v132 = 0;
    if (v135)
    {
      v131[0] = v133;
      v85 = v134;
      v133 = 0;
      v134 = 0;
      v131[1] = v85;
      v132 = 1;
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(v109, (uint64_t)&v126);
    if (v132)
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v131);
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)&v126);
    v45 = v135;
    if (!v136)
      goto LABEL_115;
    goto LABEL_113;
  }
  LOBYTE(v109[0]) = 0;
  v114 = 0;
  if (v46)
  {
LABEL_113:
    if (v45)
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v133);
  }
LABEL_115:
  if (v139)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)&v137);
  if (!v114)
  {
    v98 = *a2;
    v99 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v100 = a2[3];
    if (!v100 || !v99 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v98), !v114))
    {
      v86 = 0;
      LOBYTE(v116) = 0;
      goto LABEL_120;
    }
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(&v116, (uint64_t)v109);
LABEL_119:
  v86 = 1;
LABEL_120:
  v121 = v86;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v109);
LABEL_121:
  if (!v121)
  {
    v22 = (WTF::StringImpl *)*a2;
    v93 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v94 = a2[3];
    if (v94)
    {
      if (v93)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v94 + 16))(v94, v22);
    }
  }
  if (!*a2)
  {
    LOBYTE(v107[0]) = 0;
    v108 = 0;
LABEL_130:
    if (v121)
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)&v116);
    if (v123)
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v122);
    if (v125)
    {
      v89 = v124;
      v124 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v22);
        else
          *(_DWORD *)v89 -= 2;
      }
    }
    if (!v108)
    {
      v95 = *a2;
      v96 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v97 = a2[3];
      if (!v97 || !v96 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v95), !v108))
      {
        v90 = 0;
        *a1 = 0;
        goto LABEL_142;
      }
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>((uint64_t)a1, v107);
LABEL_141:
    v90 = 1;
LABEL_142:
    a1[152] = v90;
    result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v107);
    goto LABEL_143;
  }
  v109[0] = 0;
  v110[0] = 0;
  v112 = 0;
  v113[0] = 0;
  v115 = 0;
  if (v125)
  {
    v87 = v124;
    v124 = 0;
    v109[0] = v87;
    if (v123)
    {
      std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v110, (uint64_t)v122);
      if (v121)
      {
        std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v113, (uint64_t)&v116);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>((uint64_t)v107, (uint64_t *)v109);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v113);
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v110);
        v88 = v109[0];
        v109[0] = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2)
            WTF::StringImpl::destroy(v88, v22);
          else
            *(_DWORD *)v88 -= 2;
        }
        goto LABEL_130;
      }
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  v91 = *a2;
  v92 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WebCore::AuthenticationExtensionsClientInputs *)a2[3];
  if (result)
  {
    if (v92)
      return (WebCore::AuthenticationExtensionsClientInputs *)(*(uint64_t (**)(WebCore::AuthenticationExtensionsClientInputs *, uint64_t))(*(_QWORD *)result + 16))(result, v91);
  }
  return result;
}

void sub_196E48F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,__int16 a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  WTF::StringImpl *a66;
  char a67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)&a30);
  if (a65)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&a59);
  if (a67)
  {
    v69 = a66;
    a66 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v68);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::encode(IPC::Encoder *a1, WebCore::BufferSource *this)
{
  char *v4;
  size_t v5;
  char v6;

  v4 = WebCore::BufferSource::span(this);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v4, v5);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)this + 4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)this + 3);
  IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)this + 32);
  v6 = *((_BYTE *)this + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs>&>(a1, (uint64_t)this + 56);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int16 v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16[2];
  uint64_t v17;
  char v18;
  _BYTE v19[152];
  __int16 v20;
  _BYTE v21[152];
  char v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  _BYTE v28[8];
  int v29;
  char v30;
  char v31;

  IPC::Decoder::decode<WebCore::BufferSource>(v28, a1);
  v4 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WTF::String>(a1, &v26);
  IPC::Decoder::decode<WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v23, a1);
  v7 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  result = IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientInputs>>(v21, a1);
  if (!*a1)
    goto LABEL_28;
  if (!v30)
    goto LABEL_27;
  result = (WTF::StringImpl *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v13, (uint64_t)v28);
  if (!v6)
    goto LABEL_27;
  LODWORD(v15) = v4;
  BYTE4(v15) = BYTE4(v4);
  if (!v27)
    goto LABEL_27;
  v10 = v26;
  v26 = 0;
  v16[0] = v10;
  if (!v25 || (v16[1] = v23, v11 = v24, v23 = 0, v24 = 0, v17 = v11, v7 <= 0xFFu) || (v18 = v7, !v22))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 216) = 0;
    goto LABEL_14;
  }
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](v19, (uint64_t)v21);
  v20 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v13);
  *(_QWORD *)(a2 + 16) = v15;
  v12 = *(_OWORD *)v16;
  v16[0] = 0;
  v16[1] = 0;
  *(_OWORD *)(a2 + 24) = v12;
  *(_QWORD *)&v12 = v17;
  v17 = 0;
  *(_QWORD *)(a2 + 40) = v12;
  *(_BYTE *)(a2 + 48) = v18;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 56), (uint64_t)v19);
  *(_WORD *)(a2 + 208) = v20;
  *(_BYTE *)(a2 + 216) = 1;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v19);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v16[1]);
  result = v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  if (v14 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E34ADA00[v14])(&v31, &v13);
LABEL_14:
  if (v22)
    result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v21);
  if (v25)
    result = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v23);
  if (v27)
  {
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v30)
  {
    if (v29 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E34ADA00[v29])(&v13, v28);
  }
  return result;
}

void sub_196E49500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  WTF::ASCIILiteral *v56;
  WebCore::AuthenticationExtensionsClientInputs *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;

  v59 = v55;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v59 + 32));
  v62 = *(WTF::StringImpl **)(v59 + 24);
  *(_QWORD *)(v59 + 24) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = *(unsigned int *)(v59 + 8);
  if ((_DWORD)v63 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34ADA00[v63])(v58 - 49, v59);
  *(_DWORD *)(v59 + 8) = -1;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](v57);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v56);
  v65 = a12;
  a12 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  if (a10 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34ADA00[a10])(v58 - 49, &a9);
  if (a55)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a36);
  if (*(_BYTE *)(v58 - 104))
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v58 - 120));
  if (*(_BYTE *)(v58 - 88))
  {
    v66 = *(WTF::StringImpl **)(v58 - 96);
    *(_QWORD *)(v58 - 96) = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v64);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  if (*(_BYTE *)(v58 - 64))
  {
    v67 = *(unsigned int *)(v58 - 72);
    if ((_DWORD)v67 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E34ADA00[v67])(&a9, v58 - 80);
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::AudioConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 32));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 40));
}

void IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *((_DWORD *)a2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_DWORD *)a2 + 5);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = *((_DWORD *)a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 5);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 7);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 9);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)a2 + 22);
}

uint64_t IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  unint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t result;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[13];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v59 = 0;
      v56 = *v8;
      v9 = v5;
      goto LABEL_8;
    }
    v34 = v4;
    v35 = 0;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v5);
        v35 = *a1;
        v34 = a1[1];
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v37 = a1[3];
  if (v37 && v34)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
    v56 = 0;
    v9 = *a1;
    v4 = a1[1];
    v59 = 1;
    v5 = *a1;
  }
  else
  {
    v9 = 0;
    v4 = 0;
    v5 = 0;
    v56 = 0;
    v59 = 1;
  }
LABEL_8:
  v10 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v10 && v4 - v10 > 7)
  {
    v12 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v12 + 1);
    if (v5)
    {
      v58 = 0;
      v55 = *v12;
      goto LABEL_15;
    }
    v38 = v4;
    v39 = 0;
  }
  else
  {
    v38 = 0;
    v39 = 0;
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v5);
        v39 = *a1;
        v38 = a1[1];
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v41 = a1[3];
  if (v41 && v38)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
    v55 = 0;
    v9 = *a1;
    v4 = a1[1];
    v58 = 1;
    v5 = *a1;
  }
  else
  {
    v9 = 0;
    v4 = 0;
    v5 = 0;
    v55 = 0;
    v58 = 1;
  }
LABEL_15:
  v13 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 < v13 || v4 - v13 <= 3)
  {
    v42 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v5);
        v9 = *a1;
        v42 = a1[1];
      }
      else
      {
        v42 = 0;
        v9 = 0;
      }
    }
  }
  else
  {
    v14 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v14 + 1);
    if (v5)
    {
      v57 = 0;
      v15 = *v14;
      LODWORD(v54) = v15;
      HIDWORD(v54) = v15 & 0xFFFFFF00;
      goto LABEL_19;
    }
    v42 = v4;
  }
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (v44 && v42)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v9, v42);
    v54 = 0;
    v9 = *a1;
    v4 = a1[1];
    v57 = 1;
    v5 = *a1;
  }
  else
  {
    v9 = 0;
    v4 = 0;
    v5 = 0;
    v54 = 0;
    v57 = 1;
  }
LABEL_19:
  v16 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 < v16 || v4 - v16 <= 3)
  {
    v45 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v5);
        v9 = *a1;
        v45 = a1[1];
      }
      else
      {
        v45 = 0;
        v9 = 0;
      }
    }
  }
  else
  {
    v17 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v17 + 1);
    if (v5)
    {
      v18 = 0;
      v19 = *v17;
      v20 = v19 & 0xFFFFFF00;
      v21 = v19;
      goto LABEL_23;
    }
    v45 = v4;
  }
  *a1 = 0;
  a1[1] = 0;
  v47 = a1[3];
  if (v47 && v45)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v9, v45);
    v20 = 0;
    v21 = 0;
    v9 = *a1;
    v4 = a1[1];
    v18 = 1;
    v5 = *a1;
  }
  else
  {
    v9 = 0;
    v4 = 0;
    v5 = 0;
    v20 = 0;
    v21 = 0;
    v18 = 1;
  }
LABEL_23:
  v22 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v22 || v4 - v22 <= 7)
  {
    v48 = 0;
    v49 = 0;
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v5);
        v49 = *a1;
        v48 = a1[1];
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
    }
  }
  else
  {
    v23 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v23 + 1);
    if (v5)
    {
      v24 = 0;
      v25 = *v23;
      goto LABEL_27;
    }
    v48 = v4;
    v49 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v51 = a1[3];
  if (v51 && v48)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
    v25 = 0;
    v9 = *a1;
    v4 = a1[1];
    v24 = 1;
    v5 = *a1;
  }
  else
  {
    v9 = 0;
    v4 = 0;
    v5 = 0;
    v25 = 0;
    v24 = 1;
  }
LABEL_27:
  v26 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 < v26 || v4 - v26 <= 3)
  {
    v28 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v5);
        v9 = *a1;
        v28 = a1[1];
      }
      else
      {
        v28 = 0;
        v9 = 0;
      }
    }
  }
  else
  {
    v27 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v27 + 1);
    v28 = v4;
    if (v5)
    {
      v29 = 0;
      v30 = *v27 & 0xFFFFFF00;
      v31 = *v27;
      goto LABEL_31;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v53 = a1[3];
  if (v53 && v28)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v9, v28);
  v30 = 0;
  v31 = 0;
  v29 = 1;
LABEL_31:
  IPC::Decoder::decode<std::optional<double>>(a1, &v66);
  IPC::Decoder::decode<std::optional<double>>(a1, &v63);
  IPC::Decoder::decode<std::optional<double>>(a1, &v60);
  result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (!*a1)
  {
LABEL_45:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
    return result;
  }
  if (v59
    || v58
    || v57
    || v18
    || v24
    || v29
    || !v68
    || (*(_QWORD *)&v71[4] = v66, v71[12] = v67, !v65)
    || (*(_QWORD *)((char *)&v70 + 7) = v63, HIBYTE(v70) = v64, !v62)
    || (*(_QWORD *)((char *)&v69 + 7) = v60, HIBYTE(v69) = v61, !v33))
  {
    __break(1u);
    goto LABEL_45;
  }
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = v55;
  *(_DWORD *)(a2 + 16) = v54 | HIDWORD(v54);
  *(_DWORD *)(a2 + 20) = v21 | v20;
  *(_QWORD *)(a2 + 24) = v25;
  *(_DWORD *)(a2 + 32) = v31 | v30;
  *(_QWORD *)(a2 + 36) = *(_QWORD *)v71;
  *(_QWORD *)(a2 + 41) = *(_QWORD *)&v71[5];
  *(_OWORD *)(a2 + 49) = v70;
  *(_OWORD *)(a2 + 65) = v69;
  *(_DWORD *)(a2 + 88) = result;
  *(_BYTE *)(a2 + 92) = BYTE4(result);
  *(_BYTE *)(a2 + 96) = 1;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NavigationPreloadState,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  char v9;
  char v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  char v20;

  v4 = (unsigned __int8 *)a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6)
    goto LABEL_14;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v7 = v4;
    v14 = 0;
    goto LABEL_15;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2)
    goto LABEL_17;
  v8 = 0;
  v9 = 1;
  while (1)
  {
    v10 = (_DWORD)v7 ? v9 : 0;
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v19);
    if (!*a1)
      break;
    if (!v8 && v20)
    {
      v13 = v19;
      *(_BYTE *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v13;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
LABEL_14:
    v7 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a1;
        v7 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v7 = 0;
        v14 = 0;
      }
    }
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v16 + 16))(v16, v14, v7);
        LODWORD(v7) = 0;
        v5 = *a1;
        v4 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
      LODWORD(v7) = 0;
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v18 = (int)v7;
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v5);
      v9 = 0;
      v8 = 1;
      LODWORD(v7) = v18;
    }
    else
    {
      v9 = 0;
      v8 = 1;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 2);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 3);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  __int16 v10;
  __int16 v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 v15;
  int v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_41;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v20 = v4;
    v21 = 0;
    goto LABEL_42;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    v9 = 0;
    v10 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v24 = v2[3];
    if (!v24)
    {
      v5 = 0;
      v11 = 0;
      v4 = 0;
      goto LABEL_46;
    }
    if (!v4)
    {
      v5 = 0;
      v11 = 0;
LABEL_46:
      v9 = 1;
LABEL_47:
      *v2 = 0;
      v2[1] = 0;
      v25 = v2[3];
      if (v25)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v5);
          v26 = *v2;
          v4 = v2[1];
        }
        else
        {
          v26 = 0;
        }
      }
      else
      {
        v26 = 0;
        v4 = 0;
      }
LABEL_49:
      *v2 = 0;
      v2[1] = 0;
      v27 = v2[3];
      if (v27)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v26);
          v5 = *v2;
          v4 = v2[1];
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v5);
    v10 = 0;
    v5 = *v2;
    v4 = v2[1];
    v9 = 1;
LABEL_5:
    if (v8)
      v11 = v10;
    else
      v11 = 0;
    if (v4 <= v2[2] - v5)
      goto LABEL_47;
    v12 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v12 + 1);
    if (!v5)
    {
      v26 = 0;
      goto LABEL_49;
    }
    v13 = *v12;
    if (v13 < 6)
    {
      v14 = v13 | 0x100;
      goto LABEL_12;
    }
LABEL_51:
    *v2 = 0;
    v2[1] = 0;
    v28 = v2[3];
    if (v28 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v5);
    v14 = 0;
LABEL_12:
    v15 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v2);
    v16 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v2);
    IPC::Decoder::decode<WTF::String>(v2, &v31);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(v2, &v29);
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      goto LABEL_29;
    }
    if (!v9 && v14 > 0xFF && v15 > 0xFFu && (unsigned __int16)v16 > 0xFFu)
    {
      if (v32)
      {
        v2 = (uint64_t *)v31;
        v31 = 0;
        if (v30)
          break;
      }
    }
    __break(1u);
LABEL_41:
    v20 = 0;
    v21 = 0;
    *v2 = 0;
    v2[1] = 0;
    v22 = v2[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *v2;
        v20 = v2[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
LABEL_42:
    *v2 = 0;
    v2[1] = 0;
    v23 = v2[3];
    if (v23 && v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
      v8 = 0;
      v5 = *v2;
      v4 = v2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
  }
  result = v29;
  v29 = 0;
  *(_DWORD *)a2 = (unsigned __int16)(v11 | ((_WORD)v14 << 8)) | (v15 << 16) | (v16 << 24);
  if (v2)
    *(_DWORD *)v2 += 2;
  *(_QWORD *)(a2 + 8) = v2;
  if (result)
  {
    v19 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 24) = 1;
    if (v19)
    {
      *(_DWORD *)result = v19;
      if (!v2)
        goto LABEL_29;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      if (!v2)
        goto LABEL_29;
    }
LABEL_26:
    if (*(_DWORD *)v2 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v2, v18);
    else
      *(_DWORD *)v2 -= 2;
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
    if (v2)
      goto LABEL_26;
  }
LABEL_29:
  if (v30)
  {
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E4A3E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::encode(_QWORD *a1, _DWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 1);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 2);
  return IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 3);
}

char *IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v2) = v2[3];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      v86 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        a1 = v86;
        v31 = *v86;
        v30 = v86[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_38;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    v30 = v1;
    v31 = 0;
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      v85 = a1;
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
        v6 = 0;
        a1 = v85;
        v2 = *v85;
        v1 = v85[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
    goto LABEL_40;
  }
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
LABEL_40:
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (!v34)
  {
    v8 = 0;
    v2 = 0;
    v7 = 1;
    goto LABEL_42;
  }
  v74 = v6;
  v84 = a1;
  if (!v1)
  {
    v8 = 0;
    v34 = 0;
    v2 = 0;
    v7 = 1;
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v10 = (unsigned __int8 *)a1[3];
    if (v10)
    {
      v73 = v7;
      v64 = v8;
      v83 = a1;
      if (v34)
      {
        (*(void (**)(unsigned __int8 *, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v34);
        LODWORD(v10) = 0;
        a1 = v83;
        v2 = *v83;
        v1 = v83[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        LODWORD(v10) = 0;
      }
      v8 = v64;
      v7 = v73;
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
    goto LABEL_44;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v2);
  v8 = 0;
  a1 = v84;
  v2 = *v84;
  v1 = v84[1];
  v7 = 1;
  v5 = v84[2];
  v6 = v74;
LABEL_5:
  if (!v6)
    v8 = 0;
  v9 = v5 - v2;
  if (v1 <= v9)
  {
    v75 = v7;
    v65 = v8;
    v34 = 0;
    v36 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v87 = a1;
    if (v36 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
      a1 = v87;
      v2 = *v87;
      v34 = v87[1];
    }
    else
    {
      v2 = 0;
    }
    v8 = v65;
    v7 = v75;
    goto LABEL_42;
  }
  v10 = (unsigned __int8 *)(v2 + v9);
  v11 = v2 + v9 + 1;
  a1[2] = v11;
  if (!v2)
  {
    v34 = v1;
    goto LABEL_42;
  }
  LODWORD(v10) = *v10;
  if (v10 < 2)
  {
    v12 = 0;
    v13 = 1;
    goto LABEL_11;
  }
LABEL_44:
  *a1 = 0;
  a1[1] = 0;
  v35 = a1[3];
  if (!v35)
  {
    v13 = 0;
    v2 = 0;
    v12 = 1;
    goto LABEL_46;
  }
  v56 = (int)v10;
  v72 = v7;
  v63 = v8;
  v82 = a1;
  if (!v1)
  {
    v13 = 0;
    v35 = 0;
    v2 = 0;
    v12 = 1;
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    v15 = (unsigned __int8 *)a1[3];
    if (v15)
    {
      v49 = v13;
      v55 = v12;
      v71 = v7;
      v62 = v8;
      v81 = a1;
      if (v35)
      {
        (*(void (**)(unsigned __int8 *, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v2, v35);
        LODWORD(v15) = 0;
        a1 = v81;
        v2 = *v81;
        v1 = v81[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        LODWORD(v15) = 0;
      }
      v12 = v55;
      v8 = v62;
      v7 = v71;
      v13 = v49;
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
    goto LABEL_48;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v2);
  v13 = 0;
  a1 = v82;
  v2 = *v82;
  v1 = v82[1];
  v12 = 1;
  v11 = v82[2];
  LODWORD(v10) = v56;
  v8 = v63;
  v7 = v72;
LABEL_11:
  if (!(_DWORD)v10)
    v13 = 0;
  v14 = v11 - v2;
  if (v1 <= v14)
  {
    v50 = v13;
    v57 = v12;
    v76 = v7;
    v66 = v8;
    v35 = 0;
    v37 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v88 = a1;
    if (v37 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      a1 = v88;
      v2 = *v88;
      v35 = v88[1];
    }
    else
    {
      v2 = 0;
    }
    v12 = v57;
    v8 = v66;
    v7 = v76;
    v13 = v50;
    goto LABEL_46;
  }
  v15 = (unsigned __int8 *)(v2 + v14);
  v16 = v2 + v14 + 1;
  a1[2] = v16;
  if (!v2)
  {
    v35 = v1;
    goto LABEL_46;
  }
  LODWORD(v15) = *v15;
  if (v15 < 2)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_17;
  }
LABEL_48:
  *a1 = 0;
  a1[1] = 0;
  v23 = a1[3];
  if (!v23)
  {
    v18 = 0;
    v2 = 0;
    v17 = 1;
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
      goto LABEL_59;
    v1 = 0;
    v2 = 0;
    goto LABEL_52;
  }
  v44 = (int)v15;
  v48 = v13;
  v54 = v12;
  v70 = v7;
  v61 = v8;
  v80 = a1;
  if (!v1)
  {
    v18 = 0;
    v23 = 0;
    v2 = 0;
    v17 = 1;
    goto LABEL_50;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v2);
  v18 = 0;
  a1 = v80;
  v2 = *v80;
  v1 = v80[1];
  v17 = 1;
  v16 = v80[2];
  v12 = v54;
  v8 = v61;
  v7 = v70;
  LODWORD(v15) = v44;
  v13 = v48;
LABEL_17:
  if (!(_DWORD)v15)
    v18 = 0;
  v19 = v16 - v2;
  if (v1 <= v19)
  {
    v41 = v18;
    v45 = v17;
    v51 = v13;
    v58 = v12;
    v77 = v7;
    v67 = v8;
    v23 = 0;
    v38 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v89 = a1;
    if (v38 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      a1 = v89;
      v2 = *v89;
      v23 = v89[1];
    }
    else
    {
      v2 = 0;
    }
    v12 = v58;
    v8 = v67;
    v7 = v77;
    v17 = v45;
    v13 = v51;
    v18 = v41;
    goto LABEL_50;
  }
  v20 = (unsigned __int8 *)(v2 + v19);
  v21 = (uint64_t)(v20 + 1);
  a1[2] = v20 + 1;
  if (!v2)
  {
    v23 = v1;
    goto LABEL_50;
  }
  v22 = *v20;
  if (v22 > 1)
    goto LABEL_52;
  v23 = v22 != 0;
  if ((v7 & 1) != 0)
    goto LABEL_58;
  v21 = 0;
  if (v12)
    goto LABEL_58;
LABEL_24:
  if (v17 || (_DWORD)v21)
  {
LABEL_58:
    while (1)
    {
      __break(1u);
LABEL_59:
      v40 = v18;
      v43 = v17;
      v47 = v13;
      v53 = v12;
      v69 = v7;
      v60 = v8;
      v79 = a1;
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v2, v23);
        a1 = v79;
        v2 = *v79;
        v1 = v79[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v12 = v53;
      v8 = v60;
      v7 = v69;
      v17 = v43;
      v13 = v47;
      v18 = v40;
LABEL_52:
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (!v28)
        break;
      v39 = v18;
      v42 = v17;
      v46 = v13;
      v52 = v12;
      v68 = v7;
      v59 = v8;
      v78 = a1;
      if (!v1)
      {
        v28 = 0;
        break;
      }
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v2);
      v28 = *v78;
      if (!*v78)
        break;
      v12 = v52;
      v8 = v59;
      v17 = v42;
      v13 = v46;
      v18 = v39;
      v23 = v68;
      if (!v68)
      {
        v21 = 1;
        if (!v52)
          goto LABEL_24;
      }
    }
    v27 = 0;
  }
  else
  {
    if ((_DWORD)v23)
      v24 = 0x1000000;
    else
      v24 = 0;
    if (v18)
      v25 = 0x10000;
    else
      v25 = 0;
    if (v13)
      v26 = 256;
    else
      v26 = 0;
    v27 = v25 | v8 | v26 | v24;
    v28 = 1;
  }
  return v27 | (unint64_t)(v28 << 32);
}

WTF *IPC::ArgumentCoder<WebCore::Path,void>::encode(IPC::Encoder *a1, WebCore::Path *this)
{
  void *v3;
  WTF *result;
  WTF *v5;
  int v6;

  WebCore::Path::segments(this);
  IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v5);
  result = v5;
  if (v5)
  {
    v5 = 0;
    v6 = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

void sub_196E4AB68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ViewportArguments,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_DWORD *)v2 + 1);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_DWORD *)v2 + 3);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *((_DWORD *)v2 + 5);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = *((_DWORD *)v2 + 6);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = *((_DWORD *)v2 + 7);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *((_DWORD *)v2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v13 = *((_DWORD *)v2 + 9);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v14 = *((_DWORD *)v2 + 10);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v15 = *((_DWORD *)v2 + 11);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  v16 = *((_DWORD *)v2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v16;
  v17 = v2[52];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  LOBYTE(v2) = v2[53];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ViewportArguments,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int i;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_27;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v25 = v4;
    v26 = 0;
    goto LABEL_28;
  }
  v8 = *v7;
  if (v8 >= 5)
    goto LABEL_29;
  for (i = v8 | 0x100; ; i = 0)
  {
    v38 = IPC::Decoder::decode<float>(a1);
    v37 = IPC::Decoder::decode<float>(a1);
    v36 = IPC::Decoder::decode<float>(a1);
    v35 = IPC::Decoder::decode<float>(a1);
    v34 = IPC::Decoder::decode<float>(a1);
    v9 = IPC::Decoder::decode<float>(a1);
    v10 = IPC::Decoder::decode<float>(a1);
    v11 = IPC::Decoder::decode<float>(a1);
    v12 = IPC::Decoder::decode<float>(a1);
    v13 = IPC::Decoder::decode<float>(a1);
    v14 = IPC::Decoder::decode<float>(a1);
    v15 = IPC::Decoder::decode<float>(a1);
    result = IPC::Decoder::decode<WebKit::CacheModel>(a1);
    v17 = result;
    v4 = a1[1];
    v18 = *a1;
    v19 = a1[2] - *a1;
    if (v4 <= v19)
      break;
    v20 = (unsigned __int8 *)(v18 + v19);
    a1[2] = (uint64_t)(v20 + 1);
    if (!v18)
    {
      v30 = v4;
      v31 = 0;
      goto LABEL_32;
    }
    v21 = *v20;
    if (v21 > 1)
      goto LABEL_33;
    v22 = 0;
    v23 = v21 != 0;
LABEL_9:
    if (i > 0xFF
      && (v38 & 0xFF00000000) != 0
      && (v37 & 0xFF00000000) != 0
      && (v36 & 0xFF00000000) != 0
      && (v35 & 0xFF00000000) != 0
      && (v34 & 0xFF00000000) != 0
      && (v9 & 0xFF00000000) != 0
      && (v10 & 0xFF00000000) != 0
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && (v15 & 0xFF00000000) != 0
      && v17 > 0xFFu
      && !v22)
    {
      *(_BYTE *)a2 = i;
      *(_DWORD *)(a2 + 4) = v38;
      *(_DWORD *)(a2 + 8) = v37;
      *(_DWORD *)(a2 + 12) = v36;
      *(_DWORD *)(a2 + 16) = v35;
      *(_DWORD *)(a2 + 20) = v34;
      *(_DWORD *)(a2 + 24) = v9;
      *(_DWORD *)(a2 + 28) = v10;
      *(_DWORD *)(a2 + 32) = v11;
      *(_DWORD *)(a2 + 36) = v12;
      *(_DWORD *)(a2 + 40) = v13;
      *(_DWORD *)(a2 + 44) = v14;
      *(_DWORD *)(a2 + 48) = v15;
      *(_BYTE *)(a2 + 52) = v17;
      v24 = 1;
      *(_BYTE *)(a2 + 53) = v23;
      goto LABEL_25;
    }
    __break(1u);
LABEL_27:
    v25 = 0;
    v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *a1;
        v25 = a1[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
LABEL_28:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v5);
  }
  v30 = 0;
  v31 = 0;
  *a1 = 0;
  a1[1] = 0;
  v32 = a1[3];
  if (v32)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v31 = *a1;
      v30 = a1[1];
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
  }
LABEL_32:
  v4 = 0;
  v18 = 0;
  *a1 = 0;
  a1[1] = 0;
  v33 = a1[3];
  if (v33)
  {
    if (v30)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
      v18 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v18 = 0;
    }
  }
LABEL_33:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v4)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
      if (*a1)
      {
        v23 = 0;
        v22 = 1;
        goto LABEL_9;
      }
    }
  }
  v24 = 0;
  *(_BYTE *)a2 = 0;
LABEL_25:
  *(_BYTE *)(a2 + 56) = v24;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 32));
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ElementContext,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[32];
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_15;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v20 = *a1;
      v21 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v22 = a1[3];
      if (v22)
      {
        if (v21)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_14;
      v11 = v4 & 0xFFFFFFFFFFFFFF00;
      v12 = v4;
    }
    else
    {
      v12 = 0;
      v11 = 0;
      v23 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (v24)
      {
        if (v23)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 0);
        v12 = 0;
        v11 = 0;
      }
    }
    v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1);
    v6 = v13;
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)a1, (uint64_t)&v26);
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1);
    if (!*a1)
      break;
    if (v10)
    {
      if ((_BYTE)v6)
      {
        if (v28)
        {
          *(_OWORD *)&v25[8] = v26;
          *(_QWORD *)&v25[24] = v27;
          if (v15)
          {
            *(_QWORD *)a2 = v11 | v12;
            *(_QWORD *)(a2 + 8) = v7;
            *(_QWORD *)(a2 + 16) = v4;
            *(_OWORD *)(a2 + 24) = *(_OWORD *)v25;
            *(_OWORD *)(a2 + 40) = *(_OWORD *)&v25[16];
            *(_QWORD *)(a2 + 64) = result;
            *(_BYTE *)(a2 + 80) = 1;
            return result;
          }
        }
      }
    }
LABEL_14:
    __break(1u);
LABEL_15:
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
      v19 = v17 == 0;
    else
      v19 = 1;
    if (!v19)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(v2 + 80));
  LOBYTE(v2) = *(_BYTE *)(v2 + 96);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  BOOL i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)v27);
  result = IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v19);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_11;
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (unint64_t)(v8 + 1);
  if (!v6)
  {
    v15 = v5;
    v16 = 0;
    goto LABEL_12;
  }
  v9 = *v8;
  if (v9 > 1)
    goto LABEL_13;
  v10 = 0;
  for (i = v9 != 0; ; i = 0)
  {
    if (v29)
    {
      v23 = v27[2];
      v24 = v27[3];
      *(_QWORD *)&v25 = v28;
      v21 = v27[0];
      v22 = v27[1];
      if (v20)
      {
        v26 = v19;
        if (!v10)
        {
          v12 = v24;
          *(_OWORD *)(a2 + 32) = v23;
          *(_OWORD *)(a2 + 48) = v12;
          v13 = v26;
          *(_OWORD *)(a2 + 64) = v25;
          *(_OWORD *)(a2 + 80) = v13;
          v14 = v22;
          *(_OWORD *)a2 = v21;
          *(_OWORD *)(a2 + 16) = v14;
          *(_BYTE *)(a2 + 96) = i;
          *(_BYTE *)(a2 + 112) = 1;
          return result;
        }
      }
    }
    __break(1u);
LABEL_11:
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a1;
        v15 = a1[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
LABEL_12:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
      break;
    if (!v5)
      break;
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
    if (!*a1)
      break;
    v10 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 112) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ResourceError::IPCData,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::encodeObjectDirectly<NSError>(a1, *((NSError **)v2 + 1));
  LOBYTE(v2) = v2[16];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::ResourceError::IPCData,void>::decode(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  char v5;
  unsigned __int16 v6;
  CFTypeRef v7;
  CFTypeRef cf;
  char v9;

  v4 = IPC::Decoder::decode<WebCore::ResourceErrorBaseType>(a2);
  if (!*a2)
    goto LABEL_9;
  v5 = v4;
  if (v4 <= 0xFFu)
    goto LABEL_10;
  if (!(_BYTE)v4)
  {
LABEL_9:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSError>>((uint64_t)&cf, a2);
  v6 = IPC::Decoder::decode<BOOL>(a2);
  if (!*a2)
    goto LABEL_11;
  if (v9 && v6 > 0xFFu)
  {
    v7 = cf;
    *(_BYTE *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = 1;
    return;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v9)
  {
    if (cf)
      CFRelease(cf);
  }
}

void sub_196E4B61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSError>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<NSError>,void>::decode<NSError,NSError*>(a1, a2);
  if (!*(_BYTE *)(a1 + 8))
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebCore::ResourceError,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  int i;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *v2;
        v16 = v2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_25;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v16 = v4;
    v17 = 0;
LABEL_25:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v19 = v2[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_26;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_26:
    *v2 = 0;
    v2[1] = 0;
    v20 = v2[3];
    if (v20 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
    goto LABEL_27;
  }
  if (!v8)
  {
    v9 = 0;
    v30 = 0;
    v33 = 0;
    i = 1;
    v34 = 1;
    goto LABEL_6;
  }
  IPC::Decoder::decode<WebCore::ResourceError::IPCData>((uint64_t)&v21, a1);
  if (!v24)
  {
LABEL_27:
    v30 = 0;
    v34 = 0;
    v5 = *v2;
    v4 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    a1 = (uint64_t *)v2[3];
    if (a1)
      goto LABEL_31;
    goto LABEL_28;
  }
  v9 = 0;
  v31 = v22;
  v32 = v23;
  v8 = 1;
  v33 = 1;
  v30 = (char)v21;
  v34 = 1;
  for (i = 1; ; i = 0)
  {
LABEL_6:
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      goto LABEL_15;
    }
    if (!v9)
      break;
    __break(1u);
LABEL_31:
    if (v4)
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v5);
LABEL_28:
    v8 = 0;
    v9 = 1;
  }
  WebCore::ResourceError::fromIPCData();
  v11 = v21;
  v21 = 0;
  *(_QWORD *)a2 = v11;
  WTF::URL::URL(a2 + 8, (uint64_t *)&v22);
  v13 = v22;
  *(_QWORD *)(a2 + 48) = v25;
  *(_DWORD *)(a2 + 56) = v26;
  *(_WORD *)(a2 + 60) = v27;
  *(_QWORD *)(a2 + 64) = v28;
  *(_BYTE *)(a2 + 72) = v29;
  *(_BYTE *)(a2 + 80) = 1;
  v28 = 0;
  v25 = 0;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  i = v34;
  v8 = v33;
LABEL_15:
  if (i && v8)
  {
    v15 = v31;
    v31 = 0;
    if (v15)
      CFRelease(v15);
  }
}

void sub_196E4B914(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  const void *v7;
  va_list va;

  va_start(va, a3);
  v6 = *v3;
  *v3 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)va, a2);
  if (*(_BYTE *)(v4 - 24) && *(_BYTE *)(v4 - 32))
  {
    v7 = *(const void **)(v4 - 48);
    *(_QWORD *)(v4 - 48) = 0;
    if (v7)
      CFRelease(v7);
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::WindowFeatures,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char *v4;
  char v5;

  v4 = (char *)(a2 + 54);
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (int *)(a2 + 4));
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (int *)(a2 + 12));
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (int *)(a2 + 20));
  IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(a1, (int *)(a2 + 28));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 36));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 38));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 40));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 42));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 44));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 46));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 50));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 52));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::WindowFeatures,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  char i;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  int v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[26];
  _QWORD v42[2];

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
    goto LABEL_26;
  a1[2] = v4 + v5 + 1;
  if (!v4)
  {
    v23 = v3;
    v24 = 0;
    goto LABEL_27;
  }
  v6 = *(unsigned __int8 *)(v4 + v5);
  if (v6 >= 2)
    goto LABEL_29;
  v38 = 0;
  for (i = 1; ; i = 0)
  {
    if (!v6)
      i = 0;
    v37 = i;
    v8 = IPC::Decoder::decode<std::optional<float>>(a1);
    v36 = v9;
    v10 = IPC::Decoder::decode<std::optional<float>>(a1);
    v35 = v11;
    v12 = IPC::Decoder::decode<std::optional<float>>(a1);
    v34 = v13;
    v14 = IPC::Decoder::decode<std::optional<float>>(a1);
    v33 = v15;
    v16 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v17 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v18 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v19 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v20 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v32 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v31 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v30 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v29 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    if (!*a1)
      break;
    if (!v38)
    {
      LOBYTE(v39) = v37;
      if (v36)
      {
        DWORD1(v39) = v8;
        BYTE8(v39) = BYTE4(v8);
        if (v35)
        {
          HIDWORD(v39) = v10;
          LOBYTE(v40) = BYTE4(v10);
          if (v34)
          {
            DWORD1(v40) = v12;
            BYTE8(v40) = BYTE4(v12);
            if (v33)
            {
              HIDWORD(v40) = v14;
              v41[0] = BYTE4(v14);
              if ((v16 & 0xFF0000) != 0)
              {
                *(_WORD *)&v41[4] = v16;
                if ((v17 & 0xFF0000) != 0)
                {
                  *(_WORD *)&v41[6] = v17;
                  if ((v18 & 0xFF0000) != 0)
                  {
                    *(_WORD *)&v41[8] = v18;
                    if ((v19 & 0xFF0000) != 0)
                    {
                      *(_WORD *)&v41[10] = v19;
                      if ((v20 & 0xFF0000) != 0)
                      {
                        *(_WORD *)&v41[12] = v20;
                        if ((v32 & 0xFF0000) != 0)
                        {
                          *(_WORD *)&v41[14] = v32;
                          if ((v31 & 0xFF0000) != 0)
                          {
                            *(_WORD *)&v41[16] = v31;
                            if ((v30 & 0xFF0000) != 0)
                            {
                              *(_WORD *)&v41[18] = v30;
                              if ((v29 & 0xFF0000) != 0)
                              {
                                *(_WORD *)&v41[20] = v29;
                                if ((result & 0xFF0000) != 0)
                                {
                                  *(_WORD *)&v41[22] = result;
                                  *(_WORD *)&v41[24] = 0;
                                  *(_OWORD *)a2 = v39;
                                  *(_OWORD *)(a2 + 16) = v40;
                                  *(_OWORD *)(a2 + 32) = *(_OWORD *)v41;
                                  *(_OWORD *)(a2 + 42) = *(_OWORD *)&v41[10];
                                  v42[0] = 0;
                                  *(_QWORD *)(a2 + 64) = 0;
                                  v42[1] = 0;
                                  *(_QWORD *)(a2 + 72) = 0;
                                  *(_BYTE *)(a2 + 80) = 1;
                                  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v22);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_26:
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v23)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
      v6 = 0;
      v4 = *a1;
      v3 = a1[1];
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v6 = 0;
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v3)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v4);
    }
    v38 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 4));
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  unsigned int *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  Color v51;
  unsigned __int8 v52;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (int *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      v11 = v10 & 0xFFFFFF00;
      v46 = v10;
      v12 = v5;
      goto LABEL_8;
    }
    v12 = v4;
    v40 = 0;
  }
  else
  {
    v12 = 0;
    v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v40 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v40 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v42 = a1[3];
  if (!v42)
  {
    v12 = 0;
LABEL_41:
    v4 = 0;
    v5 = 0;
    v11 = 0;
    v46 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  if (!v12)
    goto LABEL_41;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v12);
  v11 = 0;
  v46 = 0;
  v12 = *a1;
  v4 = a1[1];
  v9 = 1;
  v5 = *a1;
LABEL_8:
  v13 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 >= v13 && v4 - v13 > 3)
  {
    v15 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v15 + 1);
    v16 = v4;
    if (v5)
    {
      v17 = 0;
      v18 = *v15 & 0xFFFFFF00;
      v19 = *v15;
      goto LABEL_15;
    }
  }
  else
  {
    v16 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v12 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v12 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (v44 && v16)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v12, v16);
  v18 = 0;
  v19 = 0;
  v17 = 1;
LABEL_15:
  LOWORD(v47) = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v47);
  v20 = BYTE1(v47);
  if (BYTE1(v47))
  {
    v21 = v47;
  }
  else
  {
    v34 = *a1;
    v35 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36 && v35)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34);
    v21 = 0;
  }
  v22 = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v51);
  v23 = a1[1];
  if (!v52)
  {
    v29 = 0;
    v28 = 0;
    v37 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (!v38)
      goto LABEL_35;
    if (!v23)
    {
      v29 = 0;
      v28 = 0;
      goto LABEL_35;
    }
    v22 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v37);
    v23 = a1[1];
  }
  v24 = (char *)*a1;
  v25 = a1[2] - *a1;
  if (v23 <= v25)
  {
    v29 = 0;
    v45 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v28 = 0;
    if (v45 && v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      v28 = *a1;
      v29 = a1[1];
    }
LABEL_35:
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = (unsigned int *)a1[3];
    if (v22)
      goto LABEL_49;
    goto LABEL_36;
  }
  v26 = &v24[v25];
  a1[2] = (uint64_t)(v26 + 1);
  if (!v24)
  {
    v29 = v23;
    v28 = 0;
    goto LABEL_35;
  }
  v27 = v11;
  v28 = *v26;
  if (v28 > 1)
    goto LABEL_36;
  v29 = 0;
  v11 = v28 != 0;
  if (v9)
    goto LABEL_48;
LABEL_22:
  if (v17 || !v20 || (v28 = v52) == 0 || (_DWORD)v29)
  {
LABEL_48:
    while (1)
    {
      __break(1u);
LABEL_49:
      if (v29)
      {
        (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v28, v29);
        v24 = (char *)*a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
LABEL_36:
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (!v39)
        break;
      if (!v23)
        break;
      v27 = v11;
      v22 = (unsigned int *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v39 + 16))(v39, v24);
      if (!*a1)
        break;
      v11 = 0;
      v29 = 1;
      if (!v9)
        goto LABEL_22;
    }
    *a2 = 0;
    a2[32] = 0;
  }
  else
  {
    LODWORD(v47) = v46 | v27;
    HIDWORD(v47) = v19 | v18;
    v48 = v21;
    WebCore::Color::Color((WebCore::Color *)&v49, &v51);
    v50 = v11;
    *(_QWORD *)a2 = v47;
    a2[8] = v48;
    WebCore::Color::Color();
    a2[24] = v50;
    a2[32] = 1;
    if ((v49 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v24);
      }
    }
  }
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v24);
}

void sub_196E4C268(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, *(WebCore::FragmentedSharedBuffer **)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;

  IPC::Decoder::decode<WTF::String>(a1, &v15);
  IPC::Decoder::decode<WTF::String>(a1, &v13);
  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v11);
  if (*a1)
  {
    if (v16)
    {
      v5 = v15;
      v15 = 0;
      if (v14)
      {
        v6 = v13;
        v13 = 0;
        if (v12)
        {
          v7 = v11;
          *(_QWORD *)a2 = v5;
          *(_QWORD *)(a2 + 8) = v6;
          *(_QWORD *)(a2 + 16) = v7;
          *(_BYTE *)(a2 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v12)
  {
    v10 = v11;
    v11 = 0;
    if (v10)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v4);
  }
LABEL_6:
  if (v14)
  {
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  if (v16)
  {
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

void sub_196E4C3FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::SharedBuffer,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

char *IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 8));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 24));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 40));
  LOBYTE(v2) = v2[56];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  int v16;
  char v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t result;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v4 = a1[1];
  v5 = (char *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v36 = 0;
    v37 = 0;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = *a1;
        v36 = a1[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
    goto LABEL_33;
  }
  v7 = &v5[v6];
  v8 = (uint64_t)&v5[v6 + 1];
  a1[2] = v8;
  if (!v5)
  {
    v36 = v4;
    v37 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v36)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
      v9 = 0;
      v5 = (char *)*a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
    goto LABEL_35;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
LABEL_35:
  *a1 = 0;
  a1[1] = 0;
  v40 = a1[3];
  if (!v40 || !v4)
  {
    v12 = 0;
    v41 = 0;
    v5 = 0;
    v10 = 1;
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v41)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v42 + 16))(v42, v5, v41);
      v15 = 0;
      v5 = (char *)*a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v15 = 0;
    }
    goto LABEL_39;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v40 + 16))(v40, v5);
  v11 = 0;
  v5 = (char *)*a1;
  v4 = a1[1];
  v10 = 1;
  v8 = a1[2];
LABEL_5:
  if (v9)
    v12 = v11;
  else
    v12 = 0;
  v13 = v8 - (_QWORD)v5;
  if (v4 <= v13)
  {
    v41 = 0;
    v45 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v45 && v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      v5 = (char *)*a1;
      v41 = a1[1];
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_37;
  }
  v14 = &v5[v13];
  a1[2] = (uint64_t)(v14 + 1);
  if (!v5)
  {
    v41 = v4;
    goto LABEL_37;
  }
  v15 = *v14;
  if (v15 < 2)
  {
    v16 = 0;
    v17 = 1;
    goto LABEL_12;
  }
LABEL_39:
  *a1 = 0;
  a1[1] = 0;
  v43 = a1[3];
  if (v43 && v4)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v43 + 16))(v43, v5);
  v17 = 0;
  v16 = 1;
LABEL_12:
  if (v15)
    v18 = v17;
  else
    v18 = 0;
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v57);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v19, (uint64_t)&v54);
  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v20, (uint64_t)&v51);
  v22 = a1[1];
  v23 = (char *)*a1;
  v24 = a1[2] - *a1;
  if (v22 <= v24)
  {
    v26 = 0;
    v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v27 = *a1;
        v26 = a1[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
LABEL_42:
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_62;
    goto LABEL_43;
  }
  v25 = &v23[v24];
  a1[2] = (uint64_t)(v25 + 1);
  if (!v23)
  {
    v26 = v22;
    v27 = 0;
    goto LABEL_42;
  }
  v26 = *v25;
  if (v26 > 2)
    goto LABEL_43;
  v27 = v26 | 0x100;
  if (v10)
    goto LABEL_61;
LABEL_19:
  LOBYTE(v46) = v12;
  if (v16)
    goto LABEL_61;
  HIBYTE(v46) = v18;
  if (!v59)
    goto LABEL_61;
  v47[1] = 0;
  v28 = v57;
  v29 = v58;
  v57 = 0;
  v58 = 0;
  if (!v56)
    goto LABEL_61;
  v30 = v54;
  v31 = v55;
  v54 = 0;
  v55 = 0;
  if (!v53)
    goto LABEL_61;
  v32 = v51;
  v33 = v52;
  v51 = 0;
  v52 = 0;
  if (v27 > 0xFF)
  {
    v50 = v26;
    *(_WORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 16) = v29;
    v47[0] = 0;
    v48[0] = 0;
    *(_QWORD *)(a2 + 24) = v30;
    v48[1] = 0;
    *(_QWORD *)(a2 + 32) = v31;
    v49[0] = 0;
    *(_QWORD *)(a2 + 40) = v32;
    v49[1] = 0;
    *(_QWORD *)(a2 + 48) = v33;
    *(_BYTE *)(a2 + 56) = v26;
    *(_BYTE *)(a2 + 64) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v23);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v34);
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v35);
  }
  else
  {
LABEL_61:
    while (1)
    {
      __break(1u);
LABEL_62:
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v27, v26);
        v23 = (char *)*a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
LABEL_43:
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (!result)
        break;
      if (!v22)
        break;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v23);
      if (!*a1)
        break;
      v26 = 0;
      v27 = 0;
      if (!v10)
        goto LABEL_19;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
  }
  if (v53)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v23);
  if (v56)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v23);
  if (v59)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v23);
  return result;
}

void sub_196E4C970(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (a20)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  if (a26)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  if (*(_BYTE *)(v26 - 56))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26 - 72, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 2));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::GrammarDetail,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WTF::StringImpl *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD v10[4];
  WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;

  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v13);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v11);
  if (!*a1)
    goto LABEL_15;
  if (!v17 || !v15 || (v7 = v13, v8 = v14, v13 = 0, v14 = 0, !v12))
  {
    __break(1u);
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
    goto LABEL_6;
  }
  v9 = v11;
  v11 = 0;
  *(_OWORD *)a2 = v16;
  v10[0] = 0;
  v10[1] = 0;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_BYTE *)(a2 + 40) = 1;
  v10[2] = 0;
  result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
LABEL_6:
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v15)
    return (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v6);
  return result;
}

void sub_196E4CB24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<WebCore::CharacterRange>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::CharacterRange,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  WTF::StringImpl *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[24];
  _QWORD v11[3];
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;

  v4 = IPC::Decoder::decode<WTF::OptionSet<WebCore::TextCheckingType>>(a1);
  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v17);
  IPC::Decoder::decode<WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v14);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v12);
  if (!*a1)
    goto LABEL_16;
  if (v4 <= 0xFFu
    || (v10[0] = v4, !v18)
    || (*(_OWORD *)&v10[8] = v17, !v16)
    || (v7 = v14, v8 = v15, v14 = 0, v15 = 0, !v13))
  {
    __break(1u);
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_7;
  }
  v9 = v12;
  v11[2] = 0;
  v12 = 0;
  *(_OWORD *)a2 = *(_OWORD *)v10;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v10[16];
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 1;
  result = (WTF::StringImpl *)WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v6);
LABEL_7:
  if (v13)
  {
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v16)
    return (WTF::StringImpl *)WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
  return result;
}

void sub_196E4CD3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19)
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::TextCheckingType>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebCore::TextCheckingType>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E4CE0C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char *result;
  __int128 v6;

  v2 = a2;
  v6 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)&v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2);
  v4 = *(_BYTE *)(v2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  unsigned __int16 v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  __int16 v30;

  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_24;
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v19 = v5;
    v20 = 0;
    goto LABEL_25;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_29;
  if (v9)
  {
    v10 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a1);
    if (!v11)
      goto LABEL_28;
    v12 = v10;
    v13 = 0;
    v2 = 1;
  }
  else
  {
    v13 = 0;
    v2 = 0;
    v12 = 0;
  }
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(a1, &v28);
    v14 = IPC::Decoder::decode<WTF::OptionSet<WebCore::TextCheckingType>>(a1);
    v30 = 0;
    result = (WTF::StringImpl *)IPC::Decoder::operator>><BOOL>(a1, &v30);
    v17 = HIBYTE(v30);
    if (HIBYTE(v30))
    {
      v18 = v30;
    }
    else
    {
      v16 = (WTF::StringImpl *)*a1;
      v5 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = (WTF::StringImpl *)a1[3];
      if (result)
      {
        v27 = v17;
        if (v5)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v16);
        v18 = 0;
        v17 = v27;
      }
      else
      {
        v18 = 0;
      }
    }
    if (!*a1)
      break;
    if (!v13 && v29 && v14 > 0xFFu && v17)
    {
      result = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)a2 = result;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = v2;
      *(_BYTE *)(a2 + 24) = v18;
      *(_BYTE *)(a2 + 25) = v14;
      *(_BYTE *)(a2 + 32) = 1;
      goto LABEL_18;
    }
    __break(1u);
LABEL_24:
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a1;
        v19 = a1[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
LABEL_25:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
LABEL_28:
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v6);
    v24 = *a1;
    v25 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
    v12 = 0;
    v13 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (!v29)
    return result;
  result = v28;
LABEL_18:
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196E4D104(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LODWORD(v2) = v2[3];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::LayoutRect,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;

  v4 = IPC::Decoder::decode<WebCore::LayoutPoint>(a1);
  v6 = v5;
  result = IPC::Decoder::decode<WebCore::LayoutPoint>(a1);
  v9 = *a1;
  if (!*a1)
    goto LABEL_7;
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

void IPC::ArgumentCoder<WebCore::BlobPart,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[40];
  int v5;
  _BYTE v6[40];
  int v7;
  char v8;
  char v9;

  IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>(a1, (uint64_t)v6);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, (uint64_t)v6);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v4);
    a2[48] = 1;
    if (v5 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v9, v4);
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
  if (v8)
  {
    if (v7 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v7])(v4, v6);
  }
}

void sub_196E4D2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  uint64_t v23;

  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a14])(v23 - 17, &a9);
  if (a23)
  {
    if (a21 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a21])(&a9, &a16);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E4D3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 48))
  {
    v15 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(a1, (_BYTE *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(a1, (_BYTE *)(a2 + 976));
  v5 = *(_BYTE *)(a2 + 1944);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 1952);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int i;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  char v16;
  char v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _BYTE v53[560];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[560];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  _BYTE v70[944];
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  _BYTE v75[944];
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_21;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v42 = v4;
    v43 = 0;
    goto LABEL_22;
  }
  v8 = *v7;
  if (v8 >= 3)
    goto LABEL_23;
  for (i = v8 | 0x100; ; i = 0)
  {
    IPC::Decoder::decode<WebCore::MediaConstraints>(v2, (uint64_t)v75);
    IPC::Decoder::decode<WebCore::MediaConstraints>(v2, (uint64_t)v70);
    v10 = v2[1];
    v11 = *v2;
    v12 = v2[2] - *v2;
    if (v10 <= v12)
    {
      v47 = 0;
      v48 = 0;
      *v2 = 0;
      v2[1] = 0;
      v49 = v2[3];
      if (v49)
      {
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
          v48 = *v2;
          v47 = v2[1];
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
      }
      goto LABEL_26;
    }
    v13 = (unsigned __int8 *)(v11 + v12);
    v2[2] = (uint64_t)(v13 + 1);
    if (!v11)
    {
      v47 = v10;
      v48 = 0;
LABEL_26:
      *v2 = 0;
      v2[1] = 0;
      v50 = v2[3];
      if (v50 && v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48, v47);
        v14 = 0;
        v11 = *v2;
        v10 = v2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v14 = 0;
      }
      goto LABEL_28;
    }
    v14 = *v13;
    if (v14 < 2)
    {
      v15 = 0;
      v16 = 1;
      goto LABEL_9;
    }
LABEL_28:
    *v2 = 0;
    v2[1] = 0;
    v51 = v2[3];
    if (v51 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v11);
    v16 = 0;
    v15 = 1;
LABEL_9:
    v17 = v14 ? v16 : 0;
    v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v2);
    if (!*v2)
      break;
    if (i > 0xFF)
    {
      v52 = i;
      if (v79)
      {
        v20 = v18;
        v21 = (char)v19;
        v2 = (uint64_t *)&v52;
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v53, (uint64_t)v75);
        v22 = v76;
        v76 = 0;
        v58 = v22;
        v23 = v77;
        v77 = 0;
        v59 = v23;
        v60 = v78;
        if (v74)
        {
          v2 = &v58;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v61, (uint64_t)v70);
          v24 = v71;
          v71 = 0;
          v66 = v24;
          v25 = v72;
          v72 = 0;
          v67 = v25;
          v68 = v73;
          if (!v15)
          {
            LOBYTE(v69) = v17;
            if (v21)
            {
              *((_QWORD *)&v69 + 1) = v20;
              *(_BYTE *)a2 = v52;
              WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a2 + 8, (uint64_t)v53);
              v26 = v58;
              v58 = 0;
              *(_QWORD *)(a2 + 952) = v26;
              v27 = v59;
              v59 = 0;
              *(_QWORD *)(a2 + 960) = v27;
              *(_BYTE *)(a2 + 968) = v60;
              WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a2 + 976, (uint64_t)v61);
              v28 = v66;
              v66 = 0;
              *(_QWORD *)(a2 + 1920) = v28;
              v29 = v67;
              v67 = 0;
              *(_QWORD *)(a2 + 1928) = v29;
              *(_BYTE *)(a2 + 1936) = v68;
              *(_OWORD *)(a2 + 1944) = v69;
              *(_BYTE *)(a2 + 1960) = 1;
              WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v30);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v31);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v32);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v33);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v34);
              WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v35);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57, v36);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v37);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v38);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v39);
              goto LABEL_19;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_21:
    v42 = 0;
    v43 = 0;
    *v2 = 0;
    v2[1] = 0;
    v44 = v2[3];
    if (v44)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v43 = *v2;
        v42 = v2[1];
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
    }
LABEL_22:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v45 = v2[3];
    if (v45)
    {
      if (v42)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_23:
    *v2 = 0;
    v2[1] = 0;
    v46 = v2[3];
    if (v46 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v5);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 1960) = 0;
LABEL_19:
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v70, v19);
  return std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v75, v40);
}

void sub_196E4D854(_Unwind_Exception *a1, void *a2)
{
  void *v3;

  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x7B0], a2);
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0xB80], v3);
  _Unwind_Resume(a1);
}

void sub_196E4D930()
{
  JUMPOUT(0x196E4D920);
}

uint64_t IPC::Decoder::decode<WebCore::MediaConstraints>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MediaConstraints,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 968))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E4D98C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::MediaTrackConstraintSetMap,void>::encode(IPC::Encoder *a1, _BYTE *a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)a2);
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)(a2 + 56));
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)(a2 + 112));
  IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(a1, (uint64_t)(a2 + 168));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 224));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 312));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 400));
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 488);
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 512);
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 536);
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 560));
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 616));
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 672));
  IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(a1, (uint64_t)(a2 + 728));
  IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(a1, (uint64_t)(a2 + 784));
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 872);
  IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 896);
  return IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(a1, a2 + 920);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int16 v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_24:
    v24 = 0;
    v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *a2;
        v24 = a2[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_25;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v24 = v6;
    v25 = 0;
LABEL_25:
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
      }
    }
    goto LABEL_9;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_9;
  if (!v9)
  {
    *(_BYTE *)result = 0;
LABEL_19:
    *(_BYTE *)(v3 + 48) = v9;
    *(_BYTE *)(v3 + 56) = 1;
    return result;
  }
  v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
  v11 = IPC::Decoder::decode<std::optional<int>>(a2);
  v13 = v12;
  v14 = IPC::Decoder::decode<std::optional<int>>(a2);
  v16 = v15;
  v17 = IPC::Decoder::decode<std::optional<int>>(a2);
  v19 = v18;
  result = IPC::Decoder::decode<std::optional<int>>(a2);
  if (*a2)
  {
    if (v10 > 0xFFu)
    {
      if ((_BYTE)v10)
        goto LABEL_8;
      if (v13 && v16 && v19 && v20)
      {
        *(_BYTE *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 12) = v11;
        *(_QWORD *)(v3 + 20) = v14;
        *(_QWORD *)(v3 + 28) = v17;
        *(_DWORD *)(v3 + 36) = result;
        *(_BYTE *)(v3 + 40) = BYTE4(result);
        LOBYTE(v9) = 1;
        *(_QWORD *)v3 = &off_1E34ADA60;
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_8:
  v6 = a2[1];
LABEL_9:
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 56) = 0;
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v23)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
  }
  return result;
}

_BYTE *IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int16 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  __int128 v23;
  char v24;
  __int128 v25;
  char v26;
  __int128 v27;
  char v28;
  __int128 v29;
  char v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[25];
  uint64_t v34;

  v3 = result;
  v34 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_20;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v6;
    v16 = 0;
LABEL_20:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_21;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_21:
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v5);
    goto LABEL_22;
  }
  if (!v9)
  {
    *result = 0;
    result[80] = 0;
    result[88] = 1;
    return result;
  }
  v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
  IPC::Decoder::decode<std::optional<double>>(a2, &v29);
  IPC::Decoder::decode<std::optional<double>>(a2, &v27);
  IPC::Decoder::decode<std::optional<double>>(a2, &v25);
  result = IPC::Decoder::decode<std::optional<double>>(a2, &v23);
  if (!*a2)
    goto LABEL_16;
  if (v10 <= 0xFFu)
    goto LABEL_15;
  if (v10 == 1)
  {
    if (v30 && v28 && v26 && v24)
    {
      v11 = v29;
      v12 = v27;
      *(_QWORD *)v22 = *((_QWORD *)&v25 + 1);
      *(_OWORD *)&v22[8] = v23;
      v31 = v29;
      v32 = v27;
      *(_OWORD *)v33 = v25;
      *(_OWORD *)&v33[9] = *(_OWORD *)&v22[1];
      v3[8] = 1;
      *((_OWORD *)v3 + 1) = v11;
      *((_OWORD *)v3 + 2) = v12;
      *((_OWORD *)v3 + 3) = *(_OWORD *)v33;
      *(_OWORD *)(v3 + 57) = *(_OWORD *)&v33[9];
      *(_QWORD *)v3 = &off_1E34ADAB0;
      v3[80] = 1;
      v3[88] = 1;
      return result;
    }
LABEL_15:
    __break(1u);
  }
LABEL_16:
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (v14 && v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_22:
  *v3 = 0;
  v3[88] = 0;
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v21)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_22:
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_23;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v6;
    v16 = 0;
LABEL_23:
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
      }
    }
    goto LABEL_14;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    if (!v9)
    {
      *(_BYTE *)result = 0;
      goto LABEL_12;
    }
    v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
    v11 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    result = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    if (*a2)
    {
      if (v10 <= 0xFFu)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      if (v10 == 2)
      {
        if ((v11 & 0xFF0000) != 0 && (result & 0xFF0000) != 0)
        {
          *(_BYTE *)(v3 + 8) = 2;
          *(_QWORD *)v3 = &off_1E34ADB00;
          *(_DWORD *)(v3 + 9) = (unsigned __int16)v11 | ((unsigned __int16)result << 16);
          LOBYTE(v9) = 1;
LABEL_12:
          *(_BYTE *)(v3 + 16) = v9;
          *(_BYTE *)(v3 + 24) = 1;
          return result;
        }
        goto LABEL_21;
      }
    }
    v6 = a2[1];
  }
LABEL_14:
  *a2 = 0;
  a2[1] = 0;
  v12 = a2[3];
  if (v12 && v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 24) = 0;
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v14)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int16 v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(WebCore::StringConstraint *__hidden);
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  void (**v42)(WebCore::StringConstraint *__hidden);
  char v43;
  _QWORD v44[2];
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_25:
    v27 = 0;
    v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a2;
        v27 = a2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
    goto LABEL_26;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v27 = v6;
    v28 = 0;
LABEL_26:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_27;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    if (!v9)
    {
      LOBYTE(v35) = 0;
      v41 = 0;
      std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)a1, (uint64_t)&v35);
      v21 = 1;
LABEL_21:
      *(_BYTE *)(a1 + 56) = v21;
      result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v13);
      goto LABEL_22;
    }
    v10 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a2);
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v11, (uint64_t)&v49);
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v12, (uint64_t)&v46);
    if (*a2)
    {
      if (v10 <= 0xFFu)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v10 == 3)
      {
        if (v51 && v48)
        {
          v43 = 3;
          v14 = v49;
          v49 = 0;
          v15 = v46;
          v46 = 0;
          v36 = 3;
          v35 = &off_1E34AE7C8;
          v44[0] = 0;
          v37 = v14;
          v44[1] = 0;
          v16 = v50;
          v50 = 0;
          v38 = v16;
          v45[0] = 0;
          v39 = v15;
          v45[1] = 0;
          v17 = v47;
          v47 = 0;
          v40 = v17;
          v18 = 1;
          v41 = 1;
          v42 = &off_1E34AE7C8;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v13);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v19);
          v20 = 0;
LABEL_13:
          if (v48)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v13);
          if (v51)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v13);
          if (v20)
          {
            v13 = (void *)*a2;
            v33 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            v34 = a2[3];
            if (v34)
            {
              if (v33)
              {
                (*(void (**)(uint64_t, void *))(*(_QWORD *)v34 + 16))(v34, v13);
                v18 = v41;
              }
            }
          }
          if (v18)
          {
            *(_BYTE *)(a1 + 8) = v36;
            *(_QWORD *)a1 = &off_1E34AE7C8;
            v22 = v37;
            v37 = 0;
            *(_QWORD *)(a1 + 16) = v22;
            v23 = v38;
            v38 = 0;
            *(_QWORD *)(a1 + 24) = v23;
            v24 = v39;
            v39 = 0;
            *(_QWORD *)(a1 + 32) = v24;
            v25 = v40;
            v40 = 0;
            *(_QWORD *)(a1 + 40) = v25;
            v21 = 1;
            *(_BYTE *)(a1 + 48) = 1;
          }
          else
          {
            v21 = 0;
            *(_BYTE *)a1 = 0;
          }
          goto LABEL_21;
        }
        goto LABEL_24;
      }
    }
    v18 = 0;
    LOBYTE(v35) = 0;
    v41 = 0;
    v20 = 1;
    goto LABEL_13;
  }
LABEL_27:
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v6)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
LABEL_22:
  if (!*(_BYTE *)(a1 + 56))
  {
    v31 = *a2;
    v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v32)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v31);
    }
  }
  return result;
}

void sub_196E4E428(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4;
  char v5;
  char v6;

  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = a2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = a2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  return IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::encode(a1, (uint64_t)(a2 + 8));
}

_BYTE *IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  char v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  char v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  __int16 v71;
  WTF::StringImpl *v72;
  __int128 v73;
  __int128 v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD v78[2];
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  __int16 v86;
  char v87;

  v4 = (unsigned __int8 *)a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6)
    goto LABEL_53;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v43 = (uint64_t)v4;
    v44 = 0;
    goto LABEL_54;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (!v47 || !v4)
    {
      v12 = 0;
      v48 = 0;
      v5 = 0;
      v10 = 1;
LABEL_58:
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49 && v48)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v5, v48);
        v16 = 0;
        v5 = *a1;
        v4 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v16 = 0;
      }
      goto LABEL_60;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v5);
    v11 = 0;
    v5 = *a1;
    v4 = (unsigned __int8 *)a1[1];
    v10 = 1;
    v8 = a1[2];
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - v5;
    if ((unint64_t)v4 <= v13)
    {
      v48 = 0;
      v53 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v53 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
        v5 = *a1;
        v48 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_58;
    }
    v14 = (unsigned __int8 *)(v5 + v13);
    v15 = v5 + v13 + 1;
    a1[2] = v15;
    if (!v5)
    {
      v48 = (uint64_t)v4;
      goto LABEL_58;
    }
    v16 = *v14;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_60:
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (!v50 || !v4)
    {
      v19 = 0;
      v21 = 0;
      v5 = 0;
      v17 = 1;
      goto LABEL_62;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v5);
    v18 = 0;
    v5 = *a1;
    v4 = (unsigned __int8 *)a1[1];
    v17 = 1;
    v15 = a1[2];
LABEL_12:
    if (v16)
      v19 = v18;
    else
      v19 = 0;
    v20 = v15 - v5;
    if ((unint64_t)v4 <= v20)
    {
      v21 = 0;
      v54 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v54 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
        v5 = *a1;
        v21 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_62;
    }
    v21 = (unsigned __int8 *)(v5 + v20);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v5)
    {
      v21 = v4;
LABEL_62:
      *a1 = 0;
      a1[1] = 0;
      v51 = a1[3];
      if (v51)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v51 + 16))(v51, v5, v21);
          LODWORD(v21) = 0;
          v5 = *a1;
          v4 = (unsigned __int8 *)a1[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
        }
      }
      else
      {
        v4 = 0;
        v5 = 0;
        LODWORD(v21) = 0;
      }
      goto LABEL_64;
    }
    LODWORD(v21) = *v21;
    if (v21 < 2)
    {
      v22 = 0;
      v23 = 1;
      goto LABEL_19;
    }
LABEL_64:
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52)
    {
      v55 = (int)v21;
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v5);
      v23 = 0;
      v22 = 1;
      LODWORD(v21) = v55;
    }
    else
    {
      v23 = 0;
      v22 = 1;
    }
LABEL_19:
    if ((_DWORD)v21)
      v24 = v23;
    else
      v24 = 0;
    IPC::Decoder::decode<WebCore::MediaDecodingConfiguration>(a1, (uint64_t)&v72);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 168) = 0;
      return std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v72, v25);
    }
    if (!v10 && !v17 && !v22 && v87)
      break;
    __break(1u);
LABEL_53:
    v43 = 0;
    v44 = 0;
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
        v44 = *a1;
        v43 = a1[1];
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && v43)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
      v9 = 0;
      v5 = *a1;
      v4 = (unsigned __int8 *)a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
  }
  LOBYTE(v56) = v12;
  HIBYTE(v56) = v19;
  LOBYTE(v57) = 0;
  v60 = 0;
  v31 = v75;
  if (v75)
  {
    v32 = v72;
    v72 = 0;
    v57 = v32;
    v58 = v73;
    v59 = v74;
    v26 = 1;
    v60 = 1;
  }
  LOBYTE(v61) = 0;
  v64 = 0;
  v33 = v79;
  if (v79)
  {
    v27 = v76;
    v26 = v77;
    v76 = 0;
    v77 = 0;
    v61 = v27;
    v62 = v26;
    v63[0] = v78[0];
    *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v78 + 10);
    v64 = 1;
  }
  LOBYTE(v65) = 0;
  v67 = 0;
  v34 = v82;
  if (v82)
  {
    v65 = v80;
    LODWORD(v27) = v81;
    v28 = HIDWORD(v81);
    v80 = 0;
    v81 = 0;
    v66 = __PAIR64__(v28, v27);
    v35 = 1;
    v67 = 1;
  }
  else
  {
    v35 = 0;
  }
  LOBYTE(v68) = 0;
  v70 = 0;
  v36 = v85;
  if (v85)
  {
    v68 = v83;
    v29 = v84;
    v30 = HIDWORD(v84);
    v83 = 0;
    v84 = 0;
    v69 = __PAIR64__(v30, v29);
    v70 = 1;
  }
  v37 = v86;
  v71 = v86;
  *(_WORD *)a2 = v56;
  *(_BYTE *)(a2 + 2) = v24;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v31)
  {
    v38 = v57;
    v57 = 0;
    *(_QWORD *)(a2 + 8) = v38;
    *(_OWORD *)(a2 + 16) = v58;
    *(_OWORD *)(a2 + 32) = v59;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v33)
  {
    v39 = v61;
    v61 = 0;
    v62 = 0;
    *(_QWORD *)(a2 + 56) = v39;
    *(_QWORD *)(a2 + 64) = v26;
    *(_OWORD *)(a2 + 72) = v63[0];
    *(_OWORD *)(a2 + 82) = *(_OWORD *)((char *)v63 + 10);
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  if (v34)
  {
    v40 = v65;
    v65 = 0;
    v66 = 0;
    *(_QWORD *)(a2 + 112) = v40;
    *(_DWORD *)(a2 + 120) = v27;
    *(_DWORD *)(a2 + 124) = v28;
    *(_BYTE *)(a2 + 128) = 1;
  }
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  if (v36)
  {
    v41 = v68;
    v68 = 0;
    v69 = 0;
    *(_QWORD *)(a2 + 136) = v41;
    *(_DWORD *)(a2 + 144) = v29;
    *(_DWORD *)(a2 + 148) = v30;
    *(_BYTE *)(a2 + 152) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v25);
    v35 = v67;
  }
  *(_WORD *)(a2 + 160) = v37;
  *(_BYTE *)(a2 + 168) = 1;
  if (v35)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v25);
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, (WTF::StringImpl *)v25);
  if (v60 && v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v57 -= 2;
  }
  return std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v72, v25);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaDecodingConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 160))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E4EA94(_Unwind_Exception *a1, void *a2)
{
  _BYTE *v2;

  std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::MediaCapabilitiesEncodingInfo,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4;
  char v5;
  char v6;

  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = a2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = a2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  return IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::encode(a1, (uint64_t)(a2 + 8));
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaEncodingConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 160))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E4EB70(_Unwind_Exception *a1, void *a2)
{
  _BYTE *v2;

  std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  WebCore::ResourceResponseBase *v4;
  char v5;

  v4 = (WebCore::ResourceResponseBase *)(a2 + 208);
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, v4);
  return IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(a1, (uint64_t *)(a2 + 464));
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  int v4;
  char i;
  WTF::StringImpl *v6;
  const void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v16;
  WTF::StringImpl *v17;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _BYTE v28[192];
  CFTypeRef v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[19];
  CFTypeRef cf;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  __int128 v58;
  uint64_t v59;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v60;
  _OWORD v61[5];
  uint64_t v62;
  WTF::StringImpl *v63;
  __int128 v64;
  uint64_t v65;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[19];
  const void *v87;
  char v88;
  char v89;
  _BYTE v90[192];
  const void *v91;
  char v92;

  v2 = a1;
  v27 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v27);
  v4 = HIBYTE(v27);
  if (!HIBYTE(v27))
    goto LABEL_23;
  for (i = v27; ; i = 0)
  {
    IPC::Decoder::decode<WebCore::ResourceRequest>(v2, (uint64_t)v90);
    IPC::Decoder::decode<WebCore::ResourceResponse>(v2, &v68);
    IPC::Decoder::decode<WebCore::NetworkLoadMetrics>(v2, (uint64_t)v61);
    if (!*v2)
    {
      *a2 = 0;
      a2[592] = 0;
      goto LABEL_21;
    }
    if (v4)
    {
      LOBYTE(v27) = i;
      if (v92)
      {
        v2 = (uint64_t *)v28;
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v28, (uint64_t)v90);
        v7 = v91;
        v91 = 0;
        v29 = v7;
        if (v89)
        {
          v31 = v69;
          v32 = v70;
          v8 = v73;
          v73 = 0u;
          v9 = v74;
          v74 = 0u;
          LODWORD(v69) = v69 & 0xFFFFFFFE;
          v10 = v68;
          v11 = v71;
          v68 = 0;
          v71 = 0;
          v30 = v10;
          v33 = v11;
          v34 = v72;
          v35 = v8;
          v36 = v9;
          *(_QWORD *)&v8 = v75;
          v75 = 0;
          v37 = v8;
          v12 = v76;
          v76 = 0;
          v38 = v12;
          *(_QWORD *)&v8 = v77;
          v77 = 0;
          v39 = v8;
          v13 = v78;
          v78 = 0;
          v40 = v13;
          LOBYTE(v41) = 0;
          v42 = 0;
          if (v80)
          {
            v14 = v79;
            v79 = 0;
            v41 = v14;
            v42 = 1;
          }
          v46 = v84;
          v47 = v85;
          *(_OWORD *)v48 = *(_OWORD *)v86;
          *(_DWORD *)&v48[15] = *(_DWORD *)&v86[15];
          v43 = v81;
          v44 = v82;
          v45 = v83;
          v15 = v87;
          v87 = 0;
          cf = v15;
          v50 = v88;
          if (v67)
            break;
        }
      }
    }
    __break(1u);
LABEL_23:
    v24 = *v2;
    v25 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v26 = v2[3];
    if (v26 && v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
  }
  v56 = v62;
  v57 = v63;
  v16 = v66;
  v59 = v65;
  v53 = v61[2];
  v54 = v61[3];
  v55 = v61[4];
  v51 = v61[0];
  v52 = v61[1];
  v58 = v64;
  v63 = 0;
  v66 = 0;
  v60 = v16;
  WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)a2, (uint64_t)&v27);
  a2[592] = 1;
  v18 = v60;
  v60 = 0;
  if (v18)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v18);
  v19 = v57;
  v57 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v30, v17);
  v21 = v29;
  v29 = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v28);
LABEL_21:
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v6);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v68, v22);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v90);
}

void sub_196E4EEC8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef cf;
  WebCore::ResourceRequestBase *v65;
  WebCore::ResourceResponseBase *v66;
  uint64_t v67;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;

  v69 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)STACK[0x248];
  STACK[0x248] = 0;
  if (v69)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v69);
  v70 = (WTF::StringImpl *)STACK[0x228];
  STACK[0x228] = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, a2);
    else
      *(_DWORD *)v70 -= 2;
  }
  if (cf)
    CFRelease(cf);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v66, a2);
  if (a34)
    CFRelease(a34);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v65);
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x250], v71);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&STACK[0x2D8], v72);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)(v67 - 256));
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ContentType,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  LOBYTE(v2) = *((_BYTE *)v2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ContentType,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v14);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
LABEL_13:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_20;
    goto LABEL_14;
  }
  v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v9 = v5;
    v10 = 0;
    goto LABEL_13;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_14;
  v10 = v15;
  if (v15)
  {
    result = (WTF::StringImpl *)WebCore::ContentType::ContentType((WebCore::ContentType *)&v12, (const WTF::String *)&v14);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_20:
      if (v9)
      {
        (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10, v9);
        v6 = (WTF::StringImpl *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
LABEL_14:
      *a1 = 0;
      a1[1] = 0;
      result = (WTF::StringImpl *)a1[3];
      if (!result)
        break;
      if (!v5)
        break;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v6);
      if (!*a1)
        break;
      v9 = v15;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  if (v15)
  {
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E4F128(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 4);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 5));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 7));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 9));
  v4 = v2[11];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[12];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[13];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = v2[14];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *((_BYTE *)v2 + 120);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *((_BYTE *)v2 + 121);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_BYTE *)v2 + 122);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *((_BYTE *)v2 + 123);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  LOBYTE(v2) = *((_BYTE *)v2 + 124);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t *v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  char v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char v46;
  char v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  char v53;
  char v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;
  int v58;
  BOOL v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE *v66;
  void *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  __int128 v71;
  void *v72;
  void *v73;
  WTF::StringImpl *result;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  char v247;
  char v248;
  char v249;
  char v250;
  char v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  char v259;
  char v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  WTF::StringImpl *v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  char v276;
  char v277;
  char v278;
  BOOL v279;
  WTF::StringImpl *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  __int128 v297;
  _BYTE v298[21];
  uint64_t v299;
  uint64_t v300;
  char v301;
  void *v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  WTF::StringImpl *v308;
  char v309;
  WTF::StringImpl *v310;
  char v311;
  __int128 v312;
  char v313;
  WTF::StringImpl *v314;
  char v315;

  v2 = (unint64_t *)a1;
  IPC::Decoder::decode<WTF::AtomString>(a1, &v314);
  IPC::Decoder::decode<WebCore::IntRect>(v2, (uint64_t)&v312);
  IPC::Decoder::decode<WTF::AtomString>((uint64_t *)v2, &v310);
  IPC::Decoder::decode<WTF::String>((uint64_t *)v2, &v308);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)v2, v4, (uint64_t)&v305);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)v2, v5, (uint64_t)&v302);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)v2, v6, (uint64_t)&v299);
  v12 = v2[1];
  v13 = (char *)*v2;
  v14 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
  if (v12 < v14 || v12 - v14 <= 7)
    goto LABEL_89;
  v15 = &v13[v14];
  v2[2] = (unint64_t)(v15 + 8);
  if (!v13)
  {
    v18 = v12;
    v75 = 0;
    goto LABEL_90;
  }
  v16 = 0;
  v17 = *(_QWORD *)v15;
  v18 = (unint64_t)v13;
  while (1)
  {
    v19 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v13;
    if (v12 < v19 || v12 - v19 <= 7)
    {
      v18 = 0;
      v78 = 0;
      *v2 = 0;
      v2[1] = 0;
      v79 = v2[3];
      if (v79)
      {
        v163 = v17;
        v164 = v16;
        if (v12)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v79 + 16))(v79);
          v78 = *v2;
          v18 = v2[1];
        }
        else
        {
          v18 = 0;
          v78 = 0;
        }
        v16 = v164;
        v17 = v163;
      }
    }
    else
    {
      v20 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (unint64_t)(v20 + 1);
      if (v13)
      {
        v21 = 0;
        v22 = *v20;
        goto LABEL_9;
      }
      v18 = v12;
      v78 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v80 = v2[3];
    if (v80)
    {
      v115 = v17;
      v116 = v16;
      if (v18)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v80 + 16))(v80, v78, v18);
        v22 = 0;
        v18 = *v2;
        v12 = v2[1];
        v21 = 1;
        v13 = (char *)*v2;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v22 = 0;
        v21 = 1;
      }
      v16 = v116;
      v17 = v115;
    }
    else
    {
      v18 = 0;
      v12 = 0;
      v13 = 0;
      v22 = 0;
      v21 = 1;
    }
LABEL_9:
    v23 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v13;
    if (v12 < v23 || v12 - v23 <= 7)
    {
      v18 = 0;
      v81 = 0;
      *v2 = 0;
      v2[1] = 0;
      v82 = v2[3];
      if (v82)
      {
        v165 = v17;
        v166 = v21;
        v167 = v22;
        v168 = v16;
        if (v12)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v82 + 16))(v82);
          v81 = *v2;
          v18 = v2[1];
        }
        else
        {
          v18 = 0;
          v81 = 0;
        }
        v16 = v168;
        v22 = v167;
        v21 = v166;
        v17 = v165;
      }
    }
    else
    {
      v24 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (unint64_t)(v24 + 1);
      if (v13)
      {
        v8 = 0;
        v7 = *v24;
        goto LABEL_13;
      }
      v18 = v12;
      v81 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v83 = v2[3];
    if (v83)
    {
      v117 = v17;
      v118 = v21;
      v119 = v22;
      v120 = v16;
      if (v18)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v83 + 16))(v83, v81, v18);
        v7 = 0;
        v18 = *v2;
        v12 = v2[1];
        v8 = 1;
        v13 = (char *)*v2;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v7 = 0;
        v8 = 1;
      }
      v16 = v120;
      v22 = v119;
      v21 = v118;
      v17 = v117;
    }
    else
    {
      v18 = 0;
      v12 = 0;
      v13 = 0;
      v7 = 0;
      v8 = 1;
    }
LABEL_13:
    v25 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v13;
    if (v12 < v25 || v12 - v25 <= 7)
    {
      v18 = 0;
      v84 = 0;
      *v2 = 0;
      v2[1] = 0;
      v85 = v2[3];
      if (v85)
      {
        v169 = v17;
        v170 = v8;
        v171 = v7;
        v172 = v21;
        v173 = v22;
        v174 = v16;
        if (v12)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v85 + 16))(v85);
          v84 = *v2;
          v18 = v2[1];
        }
        else
        {
          v18 = 0;
          v84 = 0;
        }
        v16 = v174;
        v22 = v173;
        v21 = v172;
        v7 = v171;
        v8 = v170;
        v17 = v169;
      }
    }
    else
    {
      v26 = (_QWORD *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v27 = (char *)(v26 + 1);
      v2[2] = (unint64_t)(v26 + 1);
      if (v13)
      {
        v10 = 0;
        v9 = *v26;
        goto LABEL_17;
      }
      v18 = v12;
      v84 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v86 = v2[3];
    if (!v86)
    {
      v9 = 0;
      v18 = 0;
      v13 = 0;
      v10 = 1;
      goto LABEL_102;
    }
    v121 = v17;
    v122 = v8;
    v123 = v7;
    v124 = v21;
    v125 = v22;
    v126 = v16;
    if (!v18)
    {
      v9 = 0;
      v13 = 0;
      v10 = 1;
LABEL_102:
      *v2 = 0;
      v2[1] = 0;
      v87 = v2[3];
      if (v87)
      {
        v285 = v17;
        v134 = v10;
        v135 = v9;
        v136 = v8;
        v137 = v7;
        v138 = v21;
        v139 = v22;
        v140 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v87 + 16))(v87, v13, v18);
          v31 = 0;
          v18 = *v2;
          v12 = v2[1];
        }
        else
        {
          v12 = 0;
          v31 = 0;
        }
        v16 = v140;
        v22 = v139;
        v21 = v138;
        v7 = v137;
        v8 = v136;
        v9 = v135;
        v10 = v134;
        v17 = v285;
      }
      else
      {
        v12 = 0;
        v18 = 0;
        v31 = 0;
      }
      goto LABEL_104;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v86 + 16))(v86, v84, v18);
    v9 = 0;
    v13 = (char *)*v2;
    v12 = v2[1];
    v27 = (char *)v2[2];
    v10 = 1;
    v18 = *v2;
    v16 = v126;
    v22 = v125;
    v21 = v124;
    v7 = v123;
    v8 = v122;
    v17 = v121;
LABEL_17:
    v28 = v27 - v13;
    if (v12 <= v28)
    {
      v190 = v17;
      v191 = v10;
      v192 = v9;
      v193 = v8;
      v194 = v7;
      v195 = v21;
      v196 = v22;
      v197 = v16;
      v18 = 0;
      v198 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v198 && v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v198 + 16))(v198);
        v13 = (char *)*v2;
        v18 = v2[1];
      }
      else
      {
        v13 = 0;
      }
      v16 = v197;
      v22 = v196;
      v21 = v195;
      v7 = v194;
      v8 = v193;
      v9 = v192;
      v10 = v191;
      v17 = v190;
      goto LABEL_102;
    }
    v29 = &v13[v28];
    v30 = (uint64_t)&v13[v28 + 1];
    v2[2] = v30;
    if (!v13)
    {
      v18 = v12;
      goto LABEL_102;
    }
    v31 = *v29;
    if (v31 < 2)
    {
      v11 = 0;
      v32 = 1;
      goto LABEL_21;
    }
LABEL_104:
    *v2 = 0;
    v2[1] = 0;
    v88 = v2[3];
    if (!v88)
    {
      v33 = 0;
      v18 = 0;
      v13 = 0;
      v11 = 1;
      goto LABEL_106;
    }
    v281 = v17;
    v96 = v10;
    v244 = v9;
    v97 = v8;
    v98 = v7;
    v99 = v21;
    v100 = v22;
    v101 = v16;
    if (!v12)
    {
      v33 = 0;
      v18 = 0;
      v13 = 0;
      v11 = 1;
      goto LABEL_192;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v88 + 16))(v88, v18);
    v32 = 0;
    v13 = (char *)*v2;
    v12 = v2[1];
    v30 = v2[2];
    v11 = 1;
    v18 = *v2;
    v16 = v101;
    v22 = v100;
    v21 = v99;
    v7 = v98;
    v8 = v97;
    v9 = v244;
    v10 = v96;
    v17 = v281;
LABEL_21:
    if (v31)
      v33 = v32;
    else
      v33 = 0;
    v34 = v30 - (_QWORD)v13;
    if (v12 <= v34)
    {
      v281 = v17;
      v226 = v11;
      v227 = v10;
      v228 = v9;
      v229 = v8;
      v230 = v7;
      v231 = v21;
      v232 = v22;
      v233 = v16;
      v18 = 0;
      v234 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v234 && v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v234 + 16))(v234);
        v13 = (char *)*v2;
        v18 = v2[1];
      }
      else
      {
        v13 = 0;
      }
      v16 = v233;
      v22 = v232;
      v21 = v231;
      v7 = v230;
      v8 = v229;
      v9 = v228;
      v10 = v227;
      v11 = v226;
LABEL_192:
      v17 = v281;
LABEL_106:
      *v2 = 0;
      v2[1] = 0;
      v89 = v2[3];
      if (v89)
      {
        v287 = v17;
        v256 = v11;
        v149 = v10;
        v150 = v9;
        v151 = v8;
        v152 = v7;
        v153 = v21;
        v154 = v22;
        v155 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v89 + 16))(v89, v13, v18);
          v37 = 0;
          v18 = *v2;
          v12 = v2[1];
        }
        else
        {
          v12 = 0;
          v37 = 0;
        }
        v16 = v155;
        v22 = v154;
        v21 = v153;
        v7 = v152;
        v8 = v151;
        v9 = v150;
        v10 = v149;
        v11 = v256;
        v17 = v287;
      }
      else
      {
        v12 = 0;
        v18 = 0;
        v37 = 0;
      }
      goto LABEL_108;
    }
    v35 = &v13[v34];
    v36 = (uint64_t)&v13[v34 + 1];
    v2[2] = v36;
    if (!v13)
    {
      v18 = v12;
      goto LABEL_106;
    }
    v37 = *v35;
    if (v37 < 2)
    {
      v38 = 0;
      v39 = 1;
      goto LABEL_28;
    }
LABEL_108:
    *v2 = 0;
    v2[1] = 0;
    v90 = v2[3];
    if (!v90)
    {
      v40 = 0;
      v18 = 0;
      v13 = 0;
      v38 = 1;
      goto LABEL_110;
    }
    v282 = v17;
    v252 = v11;
    v102 = v10;
    v103 = v9;
    v104 = v8;
    v105 = v7;
    v106 = v21;
    v107 = v22;
    v108 = v16;
    if (!v12)
    {
      v40 = 0;
      v18 = 0;
      v13 = 0;
      v38 = 1;
      v11 = v11;
      goto LABEL_187;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v90 + 16))(v90, v18);
    v39 = 0;
    v13 = (char *)*v2;
    v12 = v2[1];
    v36 = v2[2];
    v18 = *v2;
    v16 = v108;
    v22 = v107;
    v21 = v106;
    v38 = 1;
    v7 = v105;
    v8 = v104;
    v9 = v103;
    v10 = v102;
    v11 = v252;
    v17 = v282;
LABEL_28:
    if (v37)
      v40 = v39;
    else
      v40 = 0;
    v41 = v36 - (_QWORD)v13;
    if (v12 <= v41)
    {
      v282 = v17;
      v268 = v38;
      v278 = v40;
      v217 = v11;
      v218 = v10;
      v219 = v9;
      v220 = v8;
      v221 = v7;
      v222 = v21;
      v223 = v22;
      v224 = v16;
      v18 = 0;
      v225 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v225 && v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v225 + 16))(v225);
        v13 = (char *)*v2;
        v18 = v2[1];
      }
      else
      {
        v13 = 0;
      }
      v16 = v224;
      v22 = v223;
      v21 = v222;
      v7 = v221;
      v8 = v220;
      v9 = v219;
      v10 = v218;
      v11 = v217;
      v38 = v268;
      v40 = v278;
LABEL_187:
      v17 = v282;
LABEL_110:
      *v2 = 0;
      v2[1] = 0;
      v91 = v2[3];
      if (v91)
      {
        v288 = v17;
        v263 = v38;
        v273 = v40;
        v257 = v11;
        v156 = v10;
        v157 = v9;
        v158 = v8;
        v159 = v7;
        v160 = v21;
        v161 = v22;
        v162 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v91 + 16))(v91, v13, v18);
          v44 = 0;
          v18 = *v2;
          v12 = v2[1];
        }
        else
        {
          v12 = 0;
          v44 = 0;
        }
        v16 = v162;
        v22 = v161;
        v21 = v160;
        v7 = v159;
        v8 = v158;
        v9 = v157;
        v10 = v156;
        v11 = v257;
        v38 = v263;
        v40 = v273;
        v17 = v288;
      }
      else
      {
        v12 = 0;
        v18 = 0;
        v44 = 0;
      }
      goto LABEL_112;
    }
    v42 = &v13[v41];
    v43 = (uint64_t)&v13[v41 + 1];
    v2[2] = v43;
    if (!v13)
    {
      v18 = v12;
      goto LABEL_110;
    }
    v44 = *v42;
    if (v44 < 2)
    {
      v45 = 0;
      v46 = 1;
      goto LABEL_35;
    }
LABEL_112:
    *v2 = 0;
    v2[1] = 0;
    v92 = v2[3];
    if (!v92)
    {
      v47 = 0;
      v18 = 0;
      v13 = 0;
      v45 = 1;
      goto LABEL_114;
    }
    v283 = v17;
    v270 = v40;
    v253 = v11;
    v109 = v10;
    v245 = v9;
    v110 = v8;
    v111 = v7;
    v112 = v21;
    v113 = v22;
    v114 = v16;
    if (!v12)
    {
      v18 = 0;
      v13 = 0;
      v45 = 1;
      v47 = 0;
      v11 = v11;
      goto LABEL_182;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v92 + 16))(v92, v18);
    v46 = 0;
    v13 = (char *)*v2;
    v12 = v2[1];
    v43 = v2[2];
    v18 = *v2;
    v16 = v114;
    v22 = v113;
    v21 = v112;
    v45 = 1;
    v7 = v111;
    v8 = v110;
    v9 = v245;
    v10 = v109;
    v11 = v253;
    v40 = v270;
    v17 = v283;
LABEL_35:
    if (v44)
      v47 = v46;
    else
      v47 = 0;
    v48 = v43 - (_QWORD)v13;
    if (v12 <= v48)
    {
      v283 = v17;
      v243 = v45;
      v251 = v47;
      v267 = v38;
      v277 = v40;
      v208 = v11;
      v209 = v10;
      v210 = v9;
      v211 = v8;
      v212 = v7;
      v213 = v21;
      v214 = v22;
      v215 = v16;
      v18 = 0;
      v216 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v216 && v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v216 + 16))(v216);
        v13 = (char *)*v2;
        v18 = v2[1];
      }
      else
      {
        v13 = 0;
      }
      v16 = v215;
      v22 = v214;
      v21 = v213;
      v7 = v212;
      v8 = v211;
      v9 = v210;
      v10 = v209;
      v11 = v208;
      v38 = v267;
      v40 = v277;
      v45 = v243;
      v47 = v251;
LABEL_182:
      v17 = v283;
LABEL_114:
      *v2 = 0;
      v2[1] = 0;
      v93 = v2[3];
      if (v93)
      {
        v289 = v17;
        v240 = v45;
        v248 = v47;
        v264 = v38;
        v274 = v40;
        v258 = v11;
        v175 = v10;
        v176 = v9;
        v177 = v8;
        v178 = v7;
        v179 = v21;
        v180 = v22;
        v181 = v16;
        if (v18)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v93 + 16))(v93, v13, v18);
          v51 = 0;
          v18 = *v2;
          v12 = v2[1];
        }
        else
        {
          v12 = 0;
          v51 = 0;
        }
        v16 = v181;
        v22 = v180;
        v21 = v179;
        v7 = v178;
        v8 = v177;
        v9 = v176;
        v10 = v175;
        v11 = v258;
        v38 = v264;
        v40 = v274;
        v45 = v240;
        v47 = v248;
        v17 = v289;
      }
      else
      {
        v12 = 0;
        v18 = 0;
        v51 = 0;
      }
      goto LABEL_116;
    }
    v49 = &v13[v48];
    v50 = (uint64_t)&v13[v48 + 1];
    v2[2] = v50;
    if (!v13)
    {
      v18 = v12;
      goto LABEL_114;
    }
    v51 = *v49;
    if (v51 < 2)
    {
      v52 = 0;
      v53 = 1;
      goto LABEL_42;
    }
LABEL_116:
    *v2 = 0;
    v2[1] = 0;
    v94 = v2[3];
    if (!v94)
    {
      v54 = 0;
      v18 = 0;
      v13 = 0;
      v52 = 1;
      goto LABEL_118;
    }
    v284 = v17;
    v238 = v45;
    v246 = v47;
    v261 = v38;
    v271 = v40;
    v254 = v11;
    v127 = v10;
    v128 = v9;
    v129 = v8;
    v130 = v7;
    v131 = v21;
    v132 = v22;
    v133 = v16;
    if (!v12)
    {
      v54 = 0;
      v18 = 0;
      v13 = 0;
      v52 = 1;
      v11 = v11;
      v38 = v261;
      v45 = v238;
      v47 = v246;
LABEL_177:
      v17 = v284;
      goto LABEL_118;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v94 + 16))(v94, v18);
    v53 = 0;
    v13 = (char *)*v2;
    v12 = v2[1];
    v50 = v2[2];
    v52 = 1;
    v18 = *v2;
    v16 = v133;
    v22 = v132;
    v21 = v131;
    v7 = v130;
    v8 = v129;
    v9 = v128;
    v10 = v127;
    v11 = v254;
    v38 = v261;
    v40 = v271;
    v45 = v238;
    v47 = v246;
    v17 = v284;
LABEL_42:
    if (v51)
      v54 = v53;
    else
      v54 = 0;
    v55 = v50 - (_QWORD)v13;
    if (v12 <= v55)
    {
      v284 = v17;
      v260 = v54;
      v266 = v38;
      v237 = v52;
      v242 = v45;
      v250 = v47;
      v276 = v40;
      v199 = v11;
      v200 = v10;
      v201 = v9;
      v202 = v8;
      v203 = v7;
      v204 = v21;
      v205 = v22;
      v206 = v16;
      v18 = 0;
      v207 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v207 && v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v207 + 16))(v207);
        v13 = (char *)*v2;
        v18 = v2[1];
      }
      else
      {
        v13 = 0;
      }
      v16 = v206;
      v22 = v205;
      v21 = v204;
      v7 = v203;
      v8 = v202;
      v9 = v201;
      v10 = v200;
      v11 = v199;
      v38 = v266;
      v40 = v276;
      v45 = v242;
      v47 = v250;
      v52 = v237;
      v54 = v260;
      goto LABEL_177;
    }
    v56 = &v13[v55];
    v2[2] = (unint64_t)(v56 + 1);
    if (!v13)
      break;
    v57 = *v56;
    if (v57 > 1)
      goto LABEL_120;
    v58 = 0;
    v59 = v57 != 0;
LABEL_49:
    if (v315)
    {
      v60 = v314;
      v314 = 0;
      if (v313)
      {
        v2 = (unint64_t *)&v312;
        if (v311)
        {
          v61 = v310;
          v310 = 0;
          if (v309)
          {
            v62 = v308;
            v308 = 0;
            if (v307)
            {
              v63 = v305;
              v291 = v305;
              v64 = v306;
              v65 = HIDWORD(v306);
              v305 = 0;
              v306 = 0;
              v292 = __PAIR64__(v65, v64);
              if (v304)
              {
                v280 = v61;
                v66 = a2;
                v67 = v302;
                v293 = v302;
                v12 = v303;
                a2 = (_BYTE *)HIDWORD(v303);
                v302 = 0;
                v303 = 0;
                v294 = __PAIR64__(a2, v12);
                if (v301)
                {
                  v269 = v60;
                  v279 = v59;
                  v68 = v299;
                  v295 = v299;
                  v69 = v300;
                  v70 = HIDWORD(v300);
                  v299 = 0;
                  v300 = 0;
                  v296 = __PAIR64__(v70, v69);
                  if (!v16)
                  {
                    *(_QWORD *)&v297 = v17;
                    if (!v21)
                    {
                      *((_QWORD *)&v297 + 1) = v22;
                      if (!(_DWORD)v8)
                      {
                        *(_QWORD *)v298 = v7;
                        if (!(_DWORD)v10)
                        {
                          *(_QWORD *)&v298[8] = v9;
                          if (!(_DWORD)v11)
                          {
                            v298[16] = v33;
                            if (!v38)
                            {
                              v298[17] = v40;
                              if (!v45)
                              {
                                v298[18] = v47;
                                if (!v52)
                                {
                                  v298[19] = v54;
                                  if (!v58)
                                  {
                                    *(_OWORD *)(v66 + 8) = v312;
                                    v292 = 0;
                                    v294 = 0;
                                    v296 = 0;
                                    v71 = *(_OWORD *)v298;
                                    *(_OWORD *)(v66 + 88) = v297;
                                    v298[20] = v279;
                                    *(_QWORD *)v66 = v269;
                                    v291 = 0;
                                    *((_QWORD *)v66 + 3) = v280;
                                    *((_QWORD *)v66 + 4) = v62;
                                    *((_QWORD *)v66 + 5) = v63;
                                    *((_DWORD *)v66 + 12) = v64;
                                    *((_DWORD *)v66 + 13) = v65;
                                    v293 = 0;
                                    *((_QWORD *)v66 + 7) = v67;
                                    *((_DWORD *)v66 + 16) = v12;
                                    *((_DWORD *)v66 + 17) = (_DWORD)a2;
                                    v295 = 0;
                                    *((_QWORD *)v66 + 9) = v68;
                                    *((_DWORD *)v66 + 20) = v69;
                                    *((_DWORD *)v66 + 21) = v70;
                                    *(_OWORD *)(v66 + 104) = v71;
                                    *(_QWORD *)(v66 + 117) = *(_QWORD *)&v298[13];
                                    v66[128] = 1;
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v295, v67);
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v293, v72);
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v291, v73);
                                    result = 0;
                                    goto LABEL_66;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_89:
    v18 = 0;
    v75 = 0;
    *v2 = 0;
    v2[1] = 0;
    v76 = v2[3];
    if (v76)
    {
      if (v12)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v76 + 16))(v76);
        v75 = *v2;
        v18 = v2[1];
      }
      else
      {
        v18 = 0;
        v75 = 0;
      }
    }
LABEL_90:
    *v2 = 0;
    v2[1] = 0;
    v77 = v2[3];
    if (!v77)
    {
      v18 = 0;
      goto LABEL_92;
    }
    if (v18)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v75, v18, v7, v8, v9, v10, v11);
      v17 = 0;
      v18 = *v2;
      v12 = v2[1];
      v16 = 1;
      v13 = (char *)*v2;
    }
    else
    {
LABEL_92:
      v12 = 0;
      v13 = 0;
      v17 = 0;
      v16 = 1;
    }
  }
  v18 = v12;
LABEL_118:
  *v2 = 0;
  v2[1] = 0;
  v95 = v2[3];
  if (v95)
  {
    v290 = v17;
    v259 = v54;
    v265 = v38;
    v236 = v52;
    v241 = v45;
    v249 = v47;
    v275 = v40;
    v182 = v11;
    v183 = v10;
    v184 = v9;
    v185 = v8;
    v186 = v7;
    v187 = v21;
    v188 = v22;
    v189 = v16;
    if (v18)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v95 + 16))(v95, v13, v18);
      v18 = *v2;
      v12 = v2[1];
    }
    else
    {
      v12 = 0;
    }
    v16 = v189;
    v22 = v188;
    v21 = v187;
    v7 = v186;
    v8 = v185;
    v9 = v184;
    v10 = v183;
    v11 = v182;
    v38 = v265;
    v40 = v275;
    v45 = v241;
    v47 = v249;
    v52 = v236;
    v54 = v259;
    v17 = v290;
  }
  else
  {
    v12 = 0;
    v18 = 0;
  }
LABEL_120:
  *v2 = 0;
  v2[1] = 0;
  result = (WTF::StringImpl *)v2[3];
  if (result)
  {
    if (v12)
    {
      v286 = v17;
      v255 = v54;
      v262 = v38;
      v235 = v52;
      v239 = v45;
      v247 = v47;
      v272 = v40;
      v141 = v11;
      v142 = v10;
      v143 = v9;
      v144 = v8;
      v145 = v7;
      v146 = v21;
      v147 = v22;
      v148 = v16;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t))(*(_QWORD *)result
                                                                                                 + 16))(result, v18);
      v16 = v148;
      v22 = v147;
      v21 = v146;
      v38 = v262;
      v40 = v272;
      v45 = v239;
      v47 = v247;
      v52 = v235;
      v54 = v255;
      v17 = v286;
      if (*v2)
      {
        v7 = v145;
        v8 = v144;
        v9 = v143;
        v10 = v142;
        v11 = v141;
        v59 = 0;
        v58 = 1;
        goto LABEL_49;
      }
    }
  }
  *a2 = 0;
  a2[128] = 0;
LABEL_66:
  if (v301)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v299, v13);
  if (v304)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v302, v13);
  if (v307)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v305, v13);
  if (v309)
  {
    result = v308;
    v308 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v311)
  {
    result = v310;
    v310 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v315)
  {
    result = v314;
    v314 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E5053C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  if (a34)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a32, a2);
  if (a40)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a36, a2);
  if (*(_BYTE *)(v40 - 168))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v40 - 184, a2);
  if (*(_BYTE *)(v40 - 152))
  {
    v42 = *(WTF::StringImpl **)(v40 - 160);
    *(_QWORD *)(v40 - 160) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  if (*(_BYTE *)(v40 - 136))
  {
    v43 = *(WTF::StringImpl **)(v40 - 144);
    *(_QWORD *)(v40 - 144) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v43 -= 2;
    }
  }
  if (*(_BYTE *)(v40 - 96))
  {
    v44 = *(WTF::StringImpl **)(v40 - 104);
    *(_QWORD *)(v40 - 104) = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebCore::PlatformTimeRanges,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  char v10;

  result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v8);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    result = (WTF *)WebCore::PlatformTimeRanges::PlatformTimeRanges();
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  if (v10)
  {
    result = v8;
    if (v8)
    {
      v8 = 0;
      v9 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_196E506D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, char a15)
{
  if (a15)
  {
    if (a12)
      WTF::fastFree(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E50754(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_QWORD *)v2 + 2);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LODWORD(v2) = v2[6];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (int *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      v9 = v8 & 0xFFFFFF00;
      v10 = v8;
      v11 = v3;
      goto LABEL_8;
    }
    v34 = v2;
    v35 = 0;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    *result = 0;
    result[1] = 0;
    v30 = (unsigned int *)result[3];
    if (v30)
      goto LABEL_62;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v104 = result;
      v113 = a2;
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v35, v34);
        v9 = 0;
        v10 = 0;
        result = v104;
        a2 = v113;
        v11 = *v104;
        v2 = v104[1];
        v7 = 1;
        v3 = *v104;
      }
      else
      {
        v11 = 0;
        v2 = 0;
        v3 = 0;
        v9 = 0;
        v10 = 0;
        v7 = 1;
      }
    }
    else
    {
      v11 = 0;
      v2 = 0;
      v9 = 0;
      v10 = 0;
      v7 = 1;
    }
LABEL_8:
    v12 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      v14 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v14 + 1;
      if (v3)
      {
        v15 = 0;
        v16 = *v14;
        v17 = v16 & 0xFFFFFF00;
        v18 = v16;
        goto LABEL_15;
      }
      v36 = v2;
    }
    else
    {
      v36 = 0;
      v11 = 0;
      *result = 0;
      result[1] = 0;
      v37 = result[3];
      if (v37)
      {
        v92 = v7;
        v100 = v10;
        v84 = v9;
        v109 = result;
        v119 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v3);
          result = v109;
          a2 = v119;
          v11 = *v109;
          v36 = v109[1];
        }
        else
        {
          v36 = 0;
          v11 = 0;
        }
        v9 = v84;
        v7 = v92;
        v10 = v100;
      }
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v88 = v7;
      v96 = v10;
      v80 = v9;
      v105 = result;
      v114 = a2;
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v11, v36);
        v17 = 0;
        v18 = 0;
        result = v105;
        a2 = v114;
        v11 = *v105;
        v2 = v105[1];
        v15 = 1;
        v3 = *v105;
      }
      else
      {
        v11 = 0;
        v2 = 0;
        v3 = 0;
        v17 = 0;
        v18 = 0;
        v15 = 1;
      }
      v9 = v80;
      v7 = v88;
      v10 = v96;
    }
    else
    {
      v11 = 0;
      v2 = 0;
      v17 = 0;
      v18 = 0;
      v15 = 1;
    }
LABEL_15:
    v19 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v19 || v2 - v19 <= 3)
    {
      v38 = 0;
      v11 = 0;
      *result = 0;
      result[1] = 0;
      v39 = result[3];
      if (v39)
      {
        v71 = v17;
        v77 = v15;
        v65 = v18;
        v93 = v7;
        v101 = v10;
        v85 = v9;
        v110 = result;
        v120 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v3);
          result = v110;
          a2 = v120;
          v11 = *v110;
          v38 = v110[1];
        }
        else
        {
          v38 = 0;
          v11 = 0;
        }
        v9 = v85;
        v7 = v93;
        v10 = v101;
        v18 = v65;
        v17 = v71;
        v15 = v77;
      }
    }
    else
    {
      v20 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v20 + 1;
      if (v3)
      {
        v21 = 0;
        v22 = *v20;
        v23 = v22 & 0xFFFFFF00;
        v24 = v22;
        goto LABEL_19;
      }
      v38 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v68 = v17;
      v74 = v15;
      v62 = v18;
      v89 = v7;
      v97 = v10;
      v81 = v9;
      v106 = result;
      v115 = a2;
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v11, v38);
        v23 = 0;
        v24 = 0;
        result = v106;
        a2 = v115;
        v11 = *v106;
        v2 = v106[1];
        v21 = 1;
        v3 = *v106;
      }
      else
      {
        v11 = 0;
        v2 = 0;
        v3 = 0;
        v23 = 0;
        v24 = 0;
        v21 = 1;
      }
      v9 = v81;
      v7 = v89;
      v10 = v97;
      v18 = v62;
      v17 = v68;
      v15 = v74;
    }
    else
    {
      v11 = 0;
      v2 = 0;
      v23 = 0;
      v24 = 0;
      v21 = 1;
    }
LABEL_19:
    v25 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v25 || v2 - v25 <= 7)
    {
      v40 = 0;
      v41 = 0;
      *result = 0;
      result[1] = 0;
      v42 = result[3];
      if (v42)
      {
        v56 = v24;
        v60 = v21;
        v52 = v23;
        v72 = v17;
        v78 = v15;
        v66 = v18;
        v94 = v7;
        v102 = v10;
        v86 = v9;
        v111 = result;
        v121 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v3);
          result = v111;
          a2 = v121;
          v41 = *v111;
          v40 = v111[1];
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        v9 = v86;
        v7 = v94;
        v10 = v102;
        v18 = v66;
        v17 = v72;
        v15 = v78;
        v23 = v52;
        v24 = v56;
        v21 = v60;
      }
    }
    else
    {
      v26 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v26 + 1;
      if (v3)
      {
        v27 = 0;
        v28 = *v26;
        goto LABEL_23;
      }
      v40 = v2;
      v41 = 0;
    }
    *result = 0;
    result[1] = 0;
    v28 = 0;
    v3 = result[3];
    if (v3)
    {
      v54 = v24;
      v58 = v21;
      v50 = v23;
      v69 = v17;
      v75 = v15;
      v63 = v18;
      v90 = v7;
      v98 = v10;
      v82 = v9;
      v107 = result;
      v116 = a2;
      if (v40)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v3 + 16))(v3, v41, v40, 0.0);
        result = v107;
        a2 = v116;
        v11 = *v107;
        v2 = v107[1];
        v27 = 1;
        v3 = *v107;
        v9 = v82;
        v7 = v90;
        v10 = v98;
        v18 = v63;
        v17 = v69;
        v15 = v75;
        v23 = v50;
        v24 = v54;
        v21 = v58;
        v28 = 0;
      }
      else
      {
        v11 = 0;
        v2 = 0;
        v3 = 0;
        v27 = 1;
      }
    }
    else
    {
      v11 = 0;
      v2 = 0;
      v27 = 1;
    }
LABEL_23:
    v29 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v29 || v2 - v29 <= 3)
    {
      v31 = 0;
      v11 = 0;
      *result = 0;
      result[1] = 0;
      v43 = result[3];
      if (v43)
      {
        v49 = v27;
        v53 = v23;
        v47 = v28;
        v57 = v24;
        v61 = v21;
        v73 = v17;
        v79 = v15;
        v67 = v18;
        v95 = v7;
        v103 = v10;
        v87 = v9;
        v112 = result;
        v122 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v3);
          result = v112;
          a2 = v122;
          v11 = *v112;
          v31 = v112[1];
        }
        else
        {
          v31 = 0;
          v11 = 0;
        }
        v9 = v87;
        v7 = v95;
        v10 = v103;
        v18 = v67;
        v17 = v73;
        v15 = v79;
        v23 = v53;
        v24 = v57;
        v21 = v61;
        v28 = v47;
        v27 = v49;
      }
    }
    else
    {
      v30 = (unsigned int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v30 + 1;
      v31 = v2;
      if (v3)
      {
        v32 = 0;
        v3 = *v30;
        if (v7)
          goto LABEL_61;
        goto LABEL_27;
      }
    }
    *result = 0;
    result[1] = 0;
    v44 = result[3];
    if (!v44)
      break;
    if (!v31)
      break;
    v45 = result;
    v117 = a2;
    v83 = v9;
    v99 = v10;
    v91 = v7;
    v64 = v18;
    v70 = v17;
    v76 = v15;
    v51 = v23;
    v55 = v24;
    v59 = v21;
    v46 = v28;
    v48 = v27;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(result[3], v11, v31);
    v27 = v48;
    v23 = v51;
    v28 = v46;
    v24 = v55;
    v21 = v59;
    v17 = v70;
    v15 = v76;
    v18 = v64;
    v9 = v83;
    v10 = v99;
    a2 = v117;
    if (!*v45)
      break;
    v3 = 0;
    v32 = 1;
    if (v91)
      goto LABEL_61;
LABEL_27:
    if (!v15 && !v21 && !v27 && !v32)
    {
      *(_DWORD *)a2 = v10 | v9;
      *(_DWORD *)(a2 + 4) = v18 | v17;
      *(_DWORD *)(a2 + 8) = v24 | v23;
      *(_QWORD *)(a2 + 16) = v28;
      v33 = 1;
      *(_DWORD *)(a2 + 24) = v3;
      goto LABEL_32;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    v108 = result;
    v118 = a2;
    if (v2)
    {
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v30 + 16))(v30, v3);
      result = v108;
      a2 = v118;
      v35 = *v108;
      v34 = v108[1];
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
  }
  v33 = 0;
  *(_BYTE *)a2 = 0;
LABEL_32:
  *(_BYTE *)(a2 + 32) = v33;
  return result;
}

char *IPC::ArgumentCoder<WebCore::SelectionGeometry,void>::encode(IPC::Encoder *a1, _OWORD *a2)
{
  _OWORD *v2;
  __int128 v4;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *result;
  _OWORD v12[2];

  v2 = a2;
  v4 = a2[1];
  v12[0] = *a2;
  v12[1] = v4;
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, (int *)v12);
  v5 = *((_BYTE *)v2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_DWORD *)v2 + 9);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *((_DWORD *)v2 + 10);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *((_DWORD *)v2 + 11);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = *((_DWORD *)v2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  LOBYTE(v10) = *((_BYTE *)v2 + 52);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  LOBYTE(v10) = *((_BYTE *)v2 + 53);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  LOBYTE(v10) = *((_BYTE *)v2 + 54);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  LOBYTE(v10) = *((_BYTE *)v2 + 55);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  LOBYTE(v10) = *((_BYTE *)v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  LOBYTE(v2) = *((_BYTE *)v2 + 57);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::SelectionGeometry,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t result;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD v122[5];
  int v123;
  _BYTE v124[36];

  IPC::Decoder::decode<WebCore::FloatQuad>(a1, (uint64_t)v124);
  LOWORD(v122[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v122);
  v4 = BYTE1(v122[0]);
  if (!BYTE1(v122[0]))
    goto LABEL_41;
  while (1)
  {
    v5 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a1);
    v6 = IPC::Decoder::decode<unsigned int>(a1);
    v7 = IPC::Decoder::decode<unsigned int>(a1);
    v8 = IPC::Decoder::decode<unsigned int>(a1);
    v9 = IPC::Decoder::decode<unsigned int>(a1);
    v10 = a1[1];
    v11 = *a1;
    v12 = a1[2] - *a1;
    if (v10 <= v12)
    {
      v35 = 0;
      v36 = 0;
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37)
      {
        v116 = v9;
        if (v10)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v37 + 16))(v37);
          v36 = *a1;
          v35 = a1[1];
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v9 = v116;
      }
      goto LABEL_44;
    }
    v13 = (unsigned __int8 *)(v11 + v12);
    v14 = v13 + 1;
    a1[2] = (unint64_t)(v13 + 1);
    if (!v11)
    {
      v35 = v10;
      v36 = 0;
LABEL_44:
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        v115 = v9;
        if (v35)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        v9 = v115;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_46;
    }
    v15 = *v13;
    if (v15 < 2)
    {
      v16 = 0;
      goto LABEL_6;
    }
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (!v39)
    {
      v40 = 0;
      v11 = 0;
      v16 = 1;
      goto LABEL_48;
    }
    v114 = v9;
    if (!v10)
    {
      v40 = 0;
      v11 = 0;
      v16 = 1;
LABEL_48:
      *a1 = 0;
      a1[1] = 0;
      v41 = a1[3];
      if (v41)
      {
        v98 = v16;
        v113 = v9;
        if (v40)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v11, v40);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        v9 = v113;
        v16 = v98;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v11);
    v11 = *a1;
    v10 = a1[1];
    v16 = 1;
    v14 = (unsigned __int8 *)a1[2];
    v9 = v114;
LABEL_6:
    if (v10 <= (unint64_t)&v14[-v11])
    {
      v99 = v16;
      v117 = v9;
      v40 = 0;
      v54 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v54 && v10)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v54 + 16))(v54);
        v11 = *a1;
        v40 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      v9 = v117;
      v16 = v99;
      goto LABEL_48;
    }
    v17 = v14 + 1;
    a1[2] = (unint64_t)(v14 + 1);
    if (!v11)
    {
      v40 = v10;
      goto LABEL_48;
    }
    v18 = *v14;
    if (v18 < 2)
    {
      v19 = 0;
      goto LABEL_10;
    }
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (!v42)
    {
      v43 = 0;
      v11 = 0;
      v19 = 1;
      goto LABEL_52;
    }
    v97 = v16;
    v112 = v9;
    if (!v10)
    {
      v43 = 0;
      v11 = 0;
      v19 = 1;
LABEL_52:
      *a1 = 0;
      a1[1] = 0;
      v44 = a1[3];
      if (v44)
      {
        v84 = v19;
        v96 = v16;
        v111 = v9;
        if (v43)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v11, v43);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        v9 = v111;
        v16 = v96;
        v19 = v84;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_54;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v11);
    v11 = *a1;
    v10 = a1[1];
    v19 = 1;
    v17 = (unsigned __int8 *)a1[2];
    v9 = v112;
    v16 = v97;
LABEL_10:
    if (v10 <= (unint64_t)&v17[-v11])
    {
      v85 = v19;
      v100 = v16;
      v118 = v9;
      v43 = 0;
      v55 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v55 && v10)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v55 + 16))(v55);
        v11 = *a1;
        v43 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      v9 = v118;
      v16 = v100;
      v19 = v85;
      goto LABEL_52;
    }
    v20 = v17 + 1;
    a1[2] = (unint64_t)(v17 + 1);
    if (!v11)
    {
      v43 = v10;
      goto LABEL_52;
    }
    v21 = *v17;
    if (v21 < 2)
    {
      v22 = 0;
      goto LABEL_14;
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (!v45)
    {
      v46 = 0;
      v11 = 0;
      v22 = 1;
      goto LABEL_56;
    }
    v83 = v19;
    v95 = v16;
    v110 = v9;
    if (!v10)
    {
      v46 = 0;
      v11 = 0;
      v22 = 1;
LABEL_56:
      *a1 = 0;
      a1[1] = 0;
      v47 = a1[3];
      if (v47)
      {
        v73 = v22;
        v82 = v19;
        v94 = v16;
        v109 = v9;
        if (v46)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v47 + 16))(v47, v11, v46);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        v9 = v109;
        v16 = v94;
        v19 = v82;
        v22 = v73;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_58;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v11);
    v11 = *a1;
    v10 = a1[1];
    v22 = 1;
    v20 = (unsigned __int8 *)a1[2];
    v9 = v110;
    v16 = v95;
    v19 = v83;
LABEL_14:
    if (v10 <= (unint64_t)&v20[-v11])
    {
      v74 = v22;
      v86 = v19;
      v101 = v16;
      v119 = v9;
      v46 = 0;
      v56 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v56 && v10)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v56 + 16))(v56);
        v11 = *a1;
        v46 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      v9 = v119;
      v16 = v101;
      v19 = v86;
      v22 = v74;
      goto LABEL_56;
    }
    v23 = v20 + 1;
    a1[2] = (unint64_t)(v20 + 1);
    if (!v11)
    {
      v46 = v10;
      goto LABEL_56;
    }
    v24 = *v20;
    if (v24 < 2)
    {
      v25 = 0;
      goto LABEL_18;
    }
LABEL_58:
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (!v48)
    {
      v49 = 0;
      v11 = 0;
      v25 = 1;
      goto LABEL_60;
    }
    v72 = v22;
    v81 = v19;
    v93 = v16;
    v108 = v9;
    if (!v10)
    {
      v49 = 0;
      v11 = 0;
      v25 = 1;
LABEL_60:
      *a1 = 0;
      a1[1] = 0;
      v50 = a1[3];
      if (v50)
      {
        v65 = v25;
        v71 = v22;
        v80 = v19;
        v92 = v16;
        v107 = v9;
        if (v49)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v50 + 16))(v50, v11, v49);
          v11 = *a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        v9 = v107;
        v16 = v92;
        v19 = v80;
        v22 = v71;
        v25 = v65;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_62;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v11);
    v11 = *a1;
    v10 = a1[1];
    v25 = 1;
    v23 = (unsigned __int8 *)a1[2];
    v9 = v108;
    v16 = v93;
    v19 = v81;
    v22 = v72;
LABEL_18:
    if (v10 <= (unint64_t)&v23[-v11])
    {
      v66 = v25;
      v75 = v22;
      v87 = v19;
      v102 = v16;
      v120 = v9;
      v49 = 0;
      v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v57 && v10)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v57 + 16))(v57);
        v11 = *a1;
        v49 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      v9 = v120;
      v16 = v102;
      v19 = v87;
      v22 = v75;
      v25 = v66;
      goto LABEL_60;
    }
    v26 = v23 + 1;
    a1[2] = (unint64_t)(v23 + 1);
    if (!v11)
    {
      v49 = v10;
      goto LABEL_60;
    }
    if (*v23 < 2u)
    {
      v27 = 0;
      goto LABEL_22;
    }
LABEL_62:
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (!v51)
    {
      v52 = 0;
      v11 = 0;
      v27 = 1;
      goto LABEL_64;
    }
    v64 = v25;
    v70 = v22;
    v79 = v19;
    v91 = v16;
    v106 = v9;
    if (!v10)
    {
      v52 = 0;
      v11 = 0;
      v27 = 1;
      goto LABEL_64;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v11);
    v11 = *a1;
    v10 = a1[1];
    v27 = 1;
    v26 = (unsigned __int8 *)a1[2];
    v9 = v106;
    v16 = v91;
    v19 = v79;
    v22 = v70;
    v25 = v64;
LABEL_22:
    if (v10 <= (unint64_t)&v26[-v11])
      break;
    a1[2] = (unint64_t)(v26 + 1);
    if (!v11)
    {
      v52 = v10;
      goto LABEL_64;
    }
    if (*v26 > 1u)
      goto LABEL_66;
    v28 = 0;
LABEL_26:
    if (v124[32]
      && v4
      && v5 > 0xFFu
      && (v6 & 0xFF00000000) != 0
      && (v7 & 0xFF00000000) != 0
      && (v8 & 0xFF00000000) != 0
      && (v9 & 0xFF00000000) != 0
      && !v16
      && !v19
      && !v22
      && !v25
      && !v27
      && !v28)
    {
      result = WebCore::SelectionGeometry::SelectionGeometry();
      v30 = v122[3];
      *(_OWORD *)(a2 + 32) = v122[2];
      *(_OWORD *)(a2 + 48) = v30;
      *(_OWORD *)(a2 + 64) = v122[4];
      *(_DWORD *)(a2 + 80) = v123;
      v31 = v122[1];
      *(_OWORD *)a2 = v122[0];
      *(_OWORD *)(a2 + 16) = v31;
      *(_BYTE *)(a2 + 84) = 1;
      return result;
    }
    __break(1u);
LABEL_41:
    v32 = *a1;
    v33 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v33)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
    }
  }
  v61 = v27;
  v67 = v25;
  v76 = v22;
  v88 = v19;
  v103 = v16;
  v121 = v9;
  v52 = 0;
  v58 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v58 && v10)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v58 + 16))(v58);
    v11 = *a1;
    v52 = a1[1];
  }
  else
  {
    v11 = 0;
  }
  v9 = v121;
  v16 = v103;
  v19 = v88;
  v22 = v76;
  v25 = v67;
  v27 = v61;
LABEL_64:
  *a1 = 0;
  a1[1] = 0;
  v53 = a1[3];
  if (v53)
  {
    v60 = v27;
    v63 = v25;
    v69 = v22;
    v78 = v19;
    v90 = v16;
    v105 = v9;
    if (v52)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v11, v52);
      v11 = *a1;
      v10 = a1[1];
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v9 = v105;
    v16 = v90;
    v19 = v78;
    v22 = v69;
    v25 = v63;
    v27 = v60;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
LABEL_66:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v10)
    {
      v104 = v9;
      v89 = v16;
      v77 = v19;
      v68 = v22;
      v62 = v25;
      v59 = v27;
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v11);
      v27 = v59;
      v25 = v62;
      v22 = v68;
      v19 = v77;
      v16 = v89;
      v9 = v104;
      if (*a1)
      {
        v28 = 1;
        goto LABEL_26;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 84) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t *v4;
  char v5;

  v4 = (uint64_t *)(a2 + 24);
  v5 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 8));
  return IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v4 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v14);
  result = IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a1, (uint64_t)&v12);
  if (*a1)
  {
    if (v4 > 0xFFu)
    {
      if (v16)
      {
        v7 = v14;
        v8 = v15;
        v14 = 0;
        v15 = 0;
        if (v13)
        {
          v9 = v12;
          v11 = v12;
          *(_BYTE *)a2 = v4;
          v10[0] = 0;
          v10[1] = 0;
          *(_QWORD *)(a2 + 8) = v7;
          *(_QWORD *)(a2 + 16) = v8;
          *(_OWORD *)(a2 + 24) = v9;
          *(_BYTE *)(a2 + 40) = 1;
          result = WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_6:
  if (v16)
    return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
  return result;
}

void sub_196E51B94(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 40))
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 56, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E51C04(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 8));
}

void IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)a1 + 2);
  if (v2 >= *((_QWORD *)a1 + 1)
    || (*(_BYTE *)(*(_QWORD *)a1 + v2) = *(_BYTE *)a2, *((_QWORD *)a1 + 2) = v2 + 1, v2 + 1 >= *((_QWORD *)a1 + 1)))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v2 + 1) = *(_BYTE *)(a2 + 1);
    *((_QWORD *)a1 + 2) = v2 + 2;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 8));
}

void IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  CFTypeRef cf;
  char v28;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_16;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v15 = v4;
    v16 = 0;
    goto LABEL_17;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_18;
  v9 = 0;
LABEL_5:
  if (v4 > a1[2] - v5)
  {
    v10 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v10 + 1);
    if (v5)
    {
      v11 = *v10;
      if (v11 <= 4)
      {
        v12 = 0;
        v13 = (_WORD)v11 << 8;
        goto LABEL_9;
      }
      goto LABEL_24;
    }
    v21 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
        v21 = *a1;
        v4 = a1[1];
      }
      else
      {
        v21 = 0;
      }
    }
    else
    {
      v21 = 0;
      v4 = 0;
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v21);
LABEL_24:
    v23 = *a1;
    v24 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    }
    v13 = 0;
    v12 = 1;
LABEL_9:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a1, (uint64_t)&cf);
    if (!*a1)
      break;
    if (!v9 && !v12 && v28)
    {
      v14 = cf;
      *(_WORD *)a2 = v13 | v8;
      *(_QWORD *)(a2 + 8) = v14;
      *(_BYTE *)(a2 + 16) = 1;
      return;
    }
    __break(1u);
LABEL_16:
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a1;
        v15 = a1[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
LABEL_17:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v5);
        LOWORD(v8) = 0;
        v5 = *a1;
        v4 = a1[1];
        v9 = 1;
        goto LABEL_5;
      }
      v5 = 0;
      LOWORD(v8) = 0;
    }
    else
    {
      v5 = 0;
      LOWORD(v8) = 0;
      v4 = 0;
    }
    v9 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v28)
  {
    v26 = cf;
    cf = 0;
    if (v26)
      CFRelease(v26);
  }
}

void IPC::ArgumentCoder<WebCore::PasteboardCustomData::Entry,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>((unsigned int *)a1, a2 + 16, v4);
}

void IPC::ArgumentCoder<WebCore::PasteboardCustomData,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _BYTE v7[16];
  char v8;
  WTF::StringImpl *v9;
  char v10;

  IPC::Decoder::decode<WTF::String>(a1, &v9);
  IPC::Decoder::decode<WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v7);
  if (*a1)
  {
    if (v10 && v8)
    {
      WebCore::PasteboardCustomData::PasteboardCustomData();
      WebCore::PasteboardCustomData::PasteboardCustomData();
      a2[24] = 1;
      WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)&v6);
      goto LABEL_5;
    }
    __break(1u);
  }
  *a2 = 0;
  a2[24] = 0;
LABEL_5:
  if (v8)
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v4);
  if (v10)
  {
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
}

void sub_196E5205C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  uint64_t v14;
  void *v16;
  WTF::StringImpl *v17;

  WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)&a9);
  if (a14)
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v16);
  if (*(_BYTE *)(v14 - 24))
  {
    v17 = *(WTF::StringImpl **)(v14 - 32);
    *(_QWORD *)(v14 - 32) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E52110(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  v4 = *(_QWORD *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

void IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  _BYTE v13[4];
  char v14;

  IPC::Decoder::takeLastAttachment(a1, v13);
  if (*(_QWORD *)a1 && v14)
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = ((*((_QWORD *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1;
    if (v4 >= v5 && v4 - v5 > 7)
    {
      *((_QWORD *)a1 + 2) = ((*((_QWORD *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebCore::SharedMemoryHandle::SharedMemoryHandle();
      WTF::MachSendRight::MachSendRight();
      *(_QWORD *)(a2 + 8) = v12;
      *(_BYTE *)(a2 + 16) = 1;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
      goto LABEL_9;
    }
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v7 = *((_QWORD *)a1 + 3);
    if (v7)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v8 = *(_QWORD *)a1;
        v9 = *((_QWORD *)a1 + 1);
        v10 = *((_QWORD *)a1 + 3);
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        if (v10)
        {
          if (v9)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
            if (*(_QWORD *)a1)
            {
              __break(1u);
              return;
            }
          }
        }
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  if (v14)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
}

void sub_196E52264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, __int16 a13, char a14, char a15)
{
  if (a14)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;

  result = IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, a2 + 48);
  if (*(_BYTE *)(a2 + 40))
  {
    v5 = *(_QWORD *)(a2 + 32);
    result = IPC::Encoder::grow(a1, 8uLL, 8);
    *(_QWORD *)result = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, a2 + 48);
  if (!*(_BYTE *)(a2 + 40))
  {
    __break(1u);
LABEL_10:
    a1[1] = 0;
    return result;
  }
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 8;
    if (v10 <= 0xFFFFFFFFFFFFFFF7 && v11 <= a1[1])
    {
      *(_QWORD *)(*a1 + v10) = *(_QWORD *)(a2 + 32);
      a1[2] = v11;
      return result;
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[56];

  IPC::Decoder::decode<WebCore::PositionedGlyphs>(a1, (uint64_t)v18);
  v5 = a1[1];
  v6 = (char *)*a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v4 = a1[3];
    if (v4)
      goto LABEL_22;
    while (1)
    {
LABEL_12:
      v5 = 0;
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v15 = a1[3];
      if (v15)
      {
        if (v13)
        {
          v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14, v13);
          v6 = (char *)*a1;
          if (*a1)
            goto LABEL_21;
          v5 = a1[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
      }
LABEL_13:
      *a1 = 0;
      a1[1] = 0;
      v16 = a1[3];
      if (!v16 || !v5 || (v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v6), !*a1))
      {
        *a2 = 0;
        a2[8] = 0;
        return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v6);
      }
LABEL_21:
      __break(1u);
LABEL_22:
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        v14 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
  }
  v9 = &v6[v7];
  a1[2] = (uint64_t)(v9 + 8);
  if (!v6)
  {
    v13 = v5;
    v14 = 0;
    goto LABEL_12;
  }
  if ((unint64_t)(*(_QWORD *)v9 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_13;
  if (!v18[48])
    goto LABEL_21;
  WebCore::DecomposedGlyphs::create();
  v10 = v17;
  v17 = 0;
  *(_QWORD *)a2 = v10;
  a2[8] = 1;
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v17, v11);
  return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v6);
}

void sub_196E524D0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v2;
  int v4;
  char v5;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, v2 + 4);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, v2 + 8);
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 12));
  v4 = v2[16];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)v2 + 9);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)v2 + 10);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)v2 + 11);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 24));
  v5 = *((_BYTE *)v2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOWORD(v2) = *((_WORD *)v2 + 53);
  result = IPC::Encoder::grow(a1, 2uLL, 2);
  *(_WORD *)result = (_WORD)v2;
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  int *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  __int16 v38;
  _BOOL4 v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  WTF *result;
  void *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  WTF *v103;
  uint64_t v104;
  int v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  unint64_t v109;
  char v110;
  __int16 v111;
  char v112[8];
  unsigned __int8 v113;
  WTF *v114;
  unsigned __int8 v115;
  WTF *v116;
  unsigned __int8 v117;
  WTF *v118;
  unsigned __int8 v119;
  WTF *v120;
  uint64_t v121;
  unsigned __int8 v122;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v53 = *a1;
    v54 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (v55 && v54 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
  }
  v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v10 = v7;
  if (!(_BYTE)v7)
  {
    v7 = (void *)*a1;
    v57 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (v58)
    {
      if (v57)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v58 + 16))(v58, v7);
    }
  }
  v11 = *a1;
  if (*a1)
  {
    if (!v6 || !v10)
      goto LABEL_78;
    v12 = v4 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v4) = 0;
    v12 = 0;
    v59 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v60 = a1[3];
    if (v60)
    {
      if (v59)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v60 + 16))(v60, 0);
      LOBYTE(v4) = 0;
      v12 = 0;
    }
  }
  v13 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v15 = v14;
  if (!v14)
  {
    v61 = *a1;
    v62 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v63 = a1[3];
    if (v63)
    {
      if (v62)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v63 + 16))(v63, v61);
    }
  }
  v16 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v17 = v7;
  if (!(_BYTE)v7)
  {
    v7 = (void *)*a1;
    v64 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
    {
      if (v64)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v65 + 16))(v65, v7);
    }
  }
  v8 = *a1;
  v96 = v16;
  v97 = *a1;
  if (*a1)
  {
    if (!v15 || !v17)
      goto LABEL_78;
    v18 = v13 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v13) = 0;
    v18 = 0;
    v66 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67)
    {
      if (v66)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v67 + 16))(v67, 0);
      LOBYTE(v13) = 0;
      v18 = 0;
    }
  }
  v95 = v13;
  v19 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v21 = v20;
  if (!v20)
  {
    v68 = *a1;
    v69 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v70 = a1[3];
    if (v70)
    {
      if (v69)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v70 + 16))(v70, v68);
    }
  }
  v94 = v18;
  v8 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v22 = v7;
  if (!(_BYTE)v7)
  {
    v7 = (void *)*a1;
    v71 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v72 = a1[3];
    if (v72)
    {
      if (v71)
      {
        v73 = v8;
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v72 + 16))(v72, v7);
        v8 = v73;
      }
    }
  }
  v23 = *a1;
  v93 = v8;
  if (*a1)
  {
    if (v21 && v22)
    {
      v91 = v19 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_19;
    }
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  LOBYTE(v19) = 0;
  v91 = 0;
  v74 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v75 = a1[3];
  if (v75)
  {
    if (v74)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v75 + 16))(v75, 0);
    LOBYTE(v19) = 0;
    v91 = 0;
  }
LABEL_19:
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v7, (uint64_t)&v120);
  v24 = *a1;
  v25 = a1[1];
  v26 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  v92 = v9;
  if (v25 < v26 || v25 - v26 <= 3)
  {
    v76 = 0;
    v77 = 0;
    *a1 = 0;
    a1[1] = 0;
    v78 = a1[3];
    if (v78)
    {
      if (v25)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v78 + 16))(v78);
        v77 = *a1;
        v76 = a1[1];
      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
    }
  }
  else
  {
    v27 = v4;
    v28 = (int *)(v24 + v26);
    a1[2] = (unint64_t)(v28 + 1);
    if (v24)
    {
      v89 = *v28;
      v90 = 0;
      goto LABEL_23;
    }
    v76 = v25;
    v77 = 0;
  }
  v27 = v4;
  *a1 = 0;
  a1[1] = 0;
  v79 = a1[3];
  if (v79 && v76)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v79 + 16))(v79, v77);
  v89 = 0;
  v90 = 1;
LABEL_23:
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((IPC::Decoder *)a1, &v118);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((IPC::Decoder *)a1, &v116);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((IPC::Decoder *)a1, &v114);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, v112);
  v29 = a1[1];
  if (!v113)
  {
    v80 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v81 = a1[3];
    if (!v81 || !v29)
    {
      v29 = 0;
      v30 = *a1;
LABEL_120:
      v82 = 0;
      v83 = 0;
      *a1 = 0;
      a1[1] = 0;
      v84 = a1[3];
      if (v84)
      {
        if (v29)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v84 + 16))(v84, v30);
          v83 = *a1;
          v82 = a1[1];
        }
        else
        {
          v82 = 0;
          v83 = 0;
        }
      }
      goto LABEL_121;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v81 + 16))(v81, v80);
    v29 = a1[1];
  }
  v30 = *a1;
  v31 = a1[2] - *a1;
  if (v29 <= v31)
    goto LABEL_120;
  v32 = (unsigned __int8 *)(v30 + v31);
  a1[2] = (unint64_t)(v32 + 1);
  if (!v30)
  {
    v82 = v29;
    v83 = 0;
LABEL_121:
    v29 = 0;
    v30 = 0;
    *a1 = 0;
    a1[1] = 0;
    v85 = a1[3];
    if (v85)
    {
      if (v82)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v85 + 16))(v85, v83, v82);
        v30 = *a1;
        v29 = a1[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
    goto LABEL_122;
  }
  v33 = v12;
  v34 = a2;
  v35 = *v32;
  if (v35 < 4)
  {
    v36 = v35 | 0x100;
    goto LABEL_28;
  }
LABEL_122:
  v33 = v12;
  v34 = a2;
  *a1 = 0;
  a1[1] = 0;
  v86 = a1[3];
  if (v86 && v29)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v86 + 16))(v86, v30);
  v36 = 0;
LABEL_28:
  v37 = IPC::Decoder::decode<unsigned short>(a1);
  v38 = v37;
  v39 = (v37 & 0xC000) != 0 || (v37 & 0xFF0000) == 0;
  if (v39)
  {
    v7 = (void *)*a1;
    v87 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v88 = a1[3];
    if (v88)
    {
      if (v87)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v88 + 16))(v88, v7);
    }
  }
  v8 = *a1;
  if (!*a1)
  {
    *v34 = 0;
    v34[112] = 0;
    goto LABEL_59;
  }
  if (!v11)
    goto LABEL_78;
  *(_QWORD *)&v98 = v33 | v27;
  *((_QWORD *)&v98 + 1) = v92;
  v8 = v97;
  if (!v97)
    goto LABEL_78;
  v99 = v94 | v95;
  v8 = v96;
  v100 = v96;
  if (!v23)
    goto LABEL_78;
  v101 = v91 | v19;
  v102 = v93;
  v8 = v122;
  if (!v122)
    goto LABEL_78;
  v103 = v120;
  v40 = v121;
  v120 = 0;
  v121 = 0;
  v104 = v40;
  v8 = v90;
  if (v90)
    goto LABEL_78;
  v105 = v89;
  v8 = v119;
  if (!v119)
    goto LABEL_78;
  v41 = v118;
  v118 = 0;
  v106 = v41;
  v8 = v117;
  if (!v117)
    goto LABEL_78;
  v42 = v116;
  v116 = 0;
  v107 = v42;
  v8 = v115;
  if (!v115)
    goto LABEL_78;
  v43 = v114;
  v114 = 0;
  v108 = v43;
  v8 = v113;
  if (!v113)
    goto LABEL_78;
  WebCore::Color::Color();
  if (v36 <= 0xFF)
    goto LABEL_78;
  v110 = v36;
  if (v39)
    goto LABEL_78;
  v111 = v38;
  WebCore::TextIndicatorData::TextIndicatorData((uint64_t)v34, &v98);
  v34[112] = 1;
  v8 = v109;
  if ((v109 & 0x8000000000000) != 0)
  {
LABEL_79:
    v50 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v7);
    }
  }
  v44 = v108;
  v108 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v44 + 8))(v44);
    else
      --*((_DWORD *)v44 + 2);
  }
  v45 = v107;
  v107 = 0;
  if (v45)
  {
    if (*((_DWORD *)v45 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v45 + 8))(v45);
    else
      --*((_DWORD *)v45 + 2);
  }
  v46 = v106;
  v106 = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v46 + 8))(v46);
    else
      --*((_DWORD *)v46 + 2);
  }
  v47 = v103;
  if (v103)
  {
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree(v47, v7);
  }
LABEL_59:
  result = (WTF *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v112, v7);
  if (v115)
  {
    result = v114;
    v114 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  if (v117)
  {
    result = v116;
    v116 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  if (v119)
  {
    result = v118;
    v118 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  if (v122)
  {
    result = v120;
    if (v120)
    {
      v120 = 0;
      LODWORD(v121) = 0;
      return (WTF *)WTF::fastFree(result, v49);
    }
  }
  return result;
}

void sub_196E52D6C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF *v37;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31, a2);
  if (*(_BYTE *)(v31 - 152))
  {
    v34 = *(_DWORD **)(v31 - 160);
    *(_QWORD *)(v31 - 160) = 0;
    if (v34)
    {
      if (v34[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
      else
        --v34[2];
    }
  }
  if (*(_BYTE *)(v31 - 136))
  {
    v35 = *(_DWORD **)(v31 - 144);
    *(_QWORD *)(v31 - 144) = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
  }
  if (*(_BYTE *)(v31 - 120))
  {
    v36 = *(_DWORD **)(v31 - 128);
    *(_QWORD *)(v31 - 128) = 0;
    if (v36)
    {
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
  }
  if (*(_BYTE *)(v31 - 96))
  {
    v37 = *(WTF **)(v31 - 112);
    if (v37)
    {
      *(_QWORD *)(v31 - 112) = 0;
      *(_DWORD *)(v31 - 104) = 0;
      WTF::fastFree(v37, v33);
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(IPC::Encoder *a1, _BYTE *a2)
{
  _BYTE *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::MediaTrackConstraintSetMap,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 944));
  LOBYTE(v2) = v2[960];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MediaConstraints,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  BOOL i;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[560];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  _BYTE v52[952];
  uint64_t v53;
  uint64_t v54;

  v2 = (uint64_t)a1;
  IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(v52, a1);
  v4 = IPC::Decoder::decode<unsigned long long>((_QWORD *)v2);
  if (!(_BYTE)v5)
  {
    LOBYTE(v49) = 0;
    v51 = 0;
LABEL_22:
    v17 = *(char **)v2;
    v18 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v19 = *(_QWORD *)(v2 + 24);
    if (v19 && v18)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v19 + 16))(v19, v17);
    goto LABEL_23;
  }
  v6 = v4;
  v53 = 0;
  v54 = 0;
  if (v4 >= 0x456)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(v41, (uint64_t *)v2);
      if (!(_BYTE)v46)
        goto LABEL_21;
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaTrackConstraintSetMap>((uint64_t)&v53, (unint64_t)v41);
      }
      else
      {
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v53 + 944 * HIDWORD(v54), (uint64_t)v41);
        ++HIDWORD(v54);
      }
      std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v41, v14);
      if (!--v6)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v53, HIDWORD(v54));
        v15 = v53;
        v53 = 0;
        v49 = v15;
        v13 = v54;
        v12 = HIDWORD(v54);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    v7 = 944 * v4;
    v8 = WTF::fastMalloc((WTF *)(944 * v4));
    LODWORD(v54) = v7 / 0x3B0;
    v53 = v8;
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(v41, (uint64_t *)v2);
      if (!(_BYTE)v46)
        break;
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaTrackConstraintSetMap>((uint64_t)&v53, (unint64_t)v41);
      }
      else
      {
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v53 + 944 * HIDWORD(v54), (uint64_t)v41);
        ++HIDWORD(v54);
      }
      std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v41, v10);
      if (!--v6)
      {
        v11 = v53;
        v13 = v54;
        v12 = HIDWORD(v54);
        goto LABEL_13;
      }
    }
LABEL_21:
    LOBYTE(v49) = 0;
    v51 = 0;
    std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v41, v9);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v16);
    goto LABEL_22;
  }
  v12 = 0;
  v13 = 0;
  v11 = 0;
LABEL_13:
  v53 = 0;
  v49 = v11;
LABEL_14:
  v54 = 0;
  v50 = __PAIR64__(v12, v13);
  v51 = 1;
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v5);
LABEL_23:
  v20 = *(_QWORD *)(v2 + 8);
  v21 = *(char **)v2;
  v22 = *(_QWORD *)(v2 + 16) - *(_QWORD *)v2;
  if (v20 <= v22)
    goto LABEL_37;
  v23 = &v21[v22];
  *(_QWORD *)(v2 + 16) = v23 + 1;
  if (!v21)
  {
    v36 = v20;
    v37 = 0;
    goto LABEL_38;
  }
  v24 = *v23;
  if (v24 > 1)
    goto LABEL_39;
  v2 = 0;
  for (i = v24 != 0; ; i = 0)
  {
    if (v52[944])
    {
      WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v41, (uint64_t)v52);
      if (v51)
      {
        v26 = v49;
        v49 = 0;
        v46 = v26;
        v27 = v50;
        v50 = 0;
        v47 = v27;
        if (!(_DWORD)v2)
        {
          v48 = i;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a2, (uint64_t)v41);
          v28 = v46;
          v46 = 0;
          *(_QWORD *)(a2 + 944) = v28;
          v29 = v47;
          v47 = 0;
          *(_QWORD *)(a2 + 952) = v29;
          *(_BYTE *)(a2 + 960) = v48;
          *(_BYTE *)(a2 + 968) = 1;
          WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v30);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v31);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v32);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v33);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v34);
          goto LABEL_31;
        }
      }
    }
    __break(1u);
LABEL_37:
    v36 = 0;
    v37 = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v38 = *(_QWORD *)(v2 + 24);
    if (v38)
    {
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = *(char **)v2;
        v36 = *(_QWORD *)(v2 + 8);
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
LABEL_38:
    v20 = 0;
    v21 = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v39 = *(_QWORD *)(v2 + 24);
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v21 = *(char **)v2;
        v20 = *(_QWORD *)(v2 + 8);
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
LABEL_39:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v40 = *(_QWORD *)(v2 + 24);
    if (!v40)
      break;
    if (!v20)
      break;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v40 + 16))(v40, v21);
    if (!*(_QWORD *)v2)
      break;
    v2 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 968) = 0;
LABEL_31:
  if (v51)
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v21);
  return std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, v21);
}

void sub_196E5333C(_Unwind_Exception *a1, void *a2)
{
  if (LOBYTE(STACK[0x3E0]))
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3D0], a2);
  std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x3E8], a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::MediaTrackConstraintSetMap>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(WebCore::IntConstraint *__hidden);
  char v13;
  _OWORD v14[2];
  char v15;
  void (**v16)(WebCore::IntConstraint *__hidden);
  char v17;
  _OWORD v18[2];
  char v19;
  void (**v20)(WebCore::IntConstraint *__hidden);
  char v21;
  _OWORD v22[2];
  char v23;
  void (**v24)(WebCore::IntConstraint *__hidden);
  char v25;
  _OWORD v26[2];
  char v27;
  void (**v28)(WebCore::DoubleConstraint *__hidden);
  char v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  char v33;
  void (**v34)(WebCore::DoubleConstraint *__hidden);
  char v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  char v39;
  void (**v40)(WebCore::DoubleConstraint *__hidden);
  char v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  char v45;
  void (**v46)(WebCore::BooleanConstraint *__hidden);
  char v47;
  int v48;
  char v49;
  void (**v50)(WebCore::BooleanConstraint *__hidden);
  char v51;
  int v52;
  char v53;
  void (**v54)(WebCore::BooleanConstraint *__hidden);
  char v55;
  int v56;
  char v57;
  _BYTE v58[56];
  _BYTE v59[56];
  _BYTE v60[56];
  _BYTE v61[56];
  void (**v62)(WebCore::DoubleConstraint *__hidden);
  char v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  char v67;
  void (**v68)(WebCore::BooleanConstraint *__hidden);
  char v69;
  int v70;
  char v71;
  void (**v72)(WebCore::BooleanConstraint *__hidden);
  char v73;
  int v74;
  char v75;
  void (**v76)(WebCore::BooleanConstraint *__hidden);
  char v77;
  int v78;
  char v79;
  _BYTE v80[8];
  char v81;
  int v82;
  char v83;
  char v84;
  _BYTE v85[8];
  char v86;
  int v87;
  char v88;
  char v89;
  _BYTE v90[8];
  char v91;
  int v92;
  char v93;
  char v94;
  _BYTE v95[8];
  char v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[2];
  char v100;
  char v101;
  _BYTE v102[56];
  char v103;
  _BYTE v104[56];
  char v105;
  _BYTE v106[56];
  char v107;
  _BYTE v108[56];
  char v109;
  _BYTE v110[9];
  int v111;
  char v112;
  char v113;
  _BYTE v114[9];
  int v115;
  char v116;
  char v117;
  _BYTE v118[9];
  int v119;
  char v120;
  char v121;
  _BYTE v122[16];
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  char v126;
  char v127;
  _BYTE v128[16];
  __int128 v129;
  __int128 v130;
  _OWORD v131[2];
  char v132;
  char v133;
  _BYTE v134[16];
  __int128 v135;
  __int128 v136;
  _OWORD v137[2];
  char v138;
  char v139;
  _BYTE v140[12];
  _OWORD v141[2];
  char v142;
  char v143;
  _BYTE v144[12];
  _OWORD v145[2];
  char v146;
  char v147;
  _BYTE v148[12];
  _OWORD v149[2];
  char v150;
  char v151;
  _BYTE v152[12];
  _OWORD v153[2];
  char v154;
  char v155;

  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>((uint64_t)v152, a2);
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>((uint64_t)v148, a2);
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>((uint64_t)v144, a2);
  IPC::Decoder::decode<std::optional<WebCore::IntConstraint>>((uint64_t)v140, a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v134, a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v128, a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v122, a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v118, a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v114, a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v110, a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v108, a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v106, a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v104, a2);
  IPC::Decoder::decode<std::optional<WebCore::StringConstraint>>((uint64_t)v102, a2);
  IPC::Decoder::decode<std::optional<WebCore::DoubleConstraint>>(v95, a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v90, a2);
  IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v85, a2);
  result = IPC::Decoder::decode<std::optional<WebCore::BooleanConstraint>>((uint64_t)v80, a2);
  if (!*a2)
    goto LABEL_76;
  LOBYTE(v12) = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v23 = 0;
  LOBYTE(v24) = 0;
  v27 = 0;
  LOBYTE(v28) = 0;
  v33 = 0;
  LOBYTE(v34) = 0;
  v39 = 0;
  LOBYTE(v40) = 0;
  v45 = 0;
  LOBYTE(v46) = 0;
  v49 = 0;
  LOBYTE(v50) = 0;
  v53 = 0;
  LOBYTE(v54) = 0;
  v57 = 0;
  v58[0] = 0;
  v58[48] = 0;
  v59[0] = 0;
  v59[48] = 0;
  v60[0] = 0;
  v60[48] = 0;
  v61[0] = 0;
  v61[48] = 0;
  LOBYTE(v62) = 0;
  v67 = 0;
  LOBYTE(v68) = 0;
  v71 = 0;
  LOBYTE(v72) = 0;
  v75 = 0;
  LOBYTE(v76) = 0;
  v79 = 0;
  if (!v155)
    goto LABEL_75;
  if (v154)
  {
    v13 = v152[8];
    v14[0] = v153[0];
    *(_OWORD *)((char *)v14 + 13) = *(_OWORD *)((char *)v153 + 13);
    v12 = &off_1E34ADA60;
    v15 = 1;
  }
  if (!v151)
    goto LABEL_75;
  if (v150)
  {
    v17 = v148[8];
    v18[0] = v149[0];
    *(_OWORD *)((char *)v18 + 13) = *(_OWORD *)((char *)v149 + 13);
    v16 = &off_1E34ADA60;
    v19 = 1;
  }
  if (!v147)
    goto LABEL_75;
  if (v146)
  {
    v21 = v144[8];
    v22[0] = v145[0];
    *(_OWORD *)((char *)v22 + 13) = *(_OWORD *)((char *)v145 + 13);
    v20 = &off_1E34ADA60;
    v23 = 1;
  }
  if (!v143)
    goto LABEL_75;
  if (v142)
  {
    v25 = v140[8];
    v26[0] = v141[0];
    *(_OWORD *)((char *)v26 + 13) = *(_OWORD *)((char *)v141 + 13);
    v24 = &off_1E34ADA60;
    v27 = 1;
  }
  if (!v139)
    goto LABEL_75;
  if (v138)
  {
    v29 = v134[8];
    *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)((char *)v137 + 9);
    v30 = v135;
    v31 = v136;
    v32[0] = v137[0];
    v28 = &off_1E34ADAB0;
    v33 = 1;
  }
  if (!v133)
    goto LABEL_75;
  if (v132)
  {
    v35 = v128[8];
    v36 = v129;
    v37 = v130;
    v38[0] = v131[0];
    *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)((char *)v131 + 9);
    v34 = &off_1E34ADAB0;
    v39 = 1;
  }
  if (!v127)
    goto LABEL_75;
  if (v126)
  {
    v41 = v122[8];
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v125 + 9);
    v42 = v123;
    v43 = v124;
    v44[0] = v125[0];
    v40 = &off_1E34ADAB0;
    v45 = 1;
  }
  if (!v121)
    goto LABEL_75;
  if (v120)
  {
    v47 = v118[8];
    v46 = &off_1E34ADB00;
    v48 = v119;
    v49 = 1;
  }
  if (!v117)
    goto LABEL_75;
  if (v116)
  {
    v51 = v114[8];
    v50 = &off_1E34ADB00;
    v52 = v115;
    v53 = 1;
  }
  if (!v113)
    goto LABEL_75;
  if (v112)
  {
    v55 = v110[8];
    v54 = &off_1E34ADB00;
    v56 = v111;
    v57 = 1;
  }
  if (!v109)
    goto LABEL_75;
  result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v58, (uint64_t)v108);
  if (!v107)
    goto LABEL_75;
  result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v59, (uint64_t)v106);
  if (!v105)
    goto LABEL_75;
  result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v60, (uint64_t)v104);
  if (!v103)
    goto LABEL_75;
  result = (uint64_t)std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)v61, (uint64_t)v102);
  if (!v101)
    goto LABEL_75;
  if (v67 == v100)
  {
    if (v67)
    {
      v63 = v96;
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v99 + 9);
      v64 = v97;
      v65 = v98;
      v66[0] = v99[0];
    }
  }
  else if (v67)
  {
    v67 = 0;
  }
  else
  {
    v63 = v96;
    *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v99 + 9);
    v64 = v97;
    v65 = v98;
    v66[0] = v99[0];
    v62 = &off_1E34ADAB0;
    v67 = 1;
  }
  if (!v94)
    goto LABEL_75;
  if (v71 == v93)
  {
    if (v71)
    {
      v69 = v91;
      v70 = v92;
    }
  }
  else if (v71)
  {
    v71 = 0;
  }
  else
  {
    v69 = v91;
    v68 = &off_1E34ADB00;
    v70 = v92;
    v71 = 1;
  }
  if (!v89)
    goto LABEL_75;
  if (v75 == v88)
  {
    if (v75)
    {
      v73 = v86;
      v74 = v87;
    }
  }
  else if (v75)
  {
    v75 = 0;
  }
  else
  {
    v73 = v86;
    v72 = &off_1E34ADB00;
    v74 = v87;
    v75 = 1;
  }
  if (!v84)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    *a1 = 0;
    a1[944] = 0;
    goto LABEL_65;
  }
  if (v79 == v83)
  {
    if (v79)
    {
      v77 = v81;
      v78 = v82;
    }
  }
  else if (v79)
  {
    v79 = 0;
  }
  else
  {
    v77 = v81;
    v76 = &off_1E34ADB00;
    v78 = v82;
    v79 = 1;
  }
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)a1, (uint64_t)&v12);
  a1[944] = 1;
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v7);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, v8);
  result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v9);
LABEL_65:
  if (v103)
    result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v102, v5);
  if (v105)
    result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v104, v5);
  if (v107)
    result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v106, v5);
  if (v109)
    result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v108, v5);
  if (!a1[944])
  {
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v11)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    }
  }
  return result;
}

void sub_196E53A80(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::MediaTrackConstraintSetMap,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PromisedAttachmentInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  void *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a1, &v13);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v10, a1);
  if (!*a1)
  {
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (!v14 || (v6 = v13, v13 = 0, !v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = v10;
  v10 = 0;
  v9[0] = 0;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  v9[1] = 0;
  v8 = v11;
  v11 = 0;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
LABEL_5:
  result = (WTF::StringImpl *)WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
LABEL_6:
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E53C2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(v2 - 24))
  {
    v4 = *(WTF::StringImpl **)(v2 - 32);
    *(_QWORD *)(v2 - 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::RecentSearch,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RecentSearch,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;

  IPC::Decoder::decode<WTF::String>(a1, &v7);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  if (*a1)
  {
    if (v8)
    {
      v6 = v7;
      v7 = 0;
      if ((_BYTE)v5)
      {
        *(_QWORD *)a2 = v6;
        *(_QWORD *)(a2 + 8) = result;
        *(_BYTE *)(a2 + 16) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E53D48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 17);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  return IPC::VectorArgumentCoder<false,WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 4));
}

uint64_t IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v2;
  __int128 *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  char v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  int v36;
  void *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  char v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[7];
  char v69;
  char v70;
  WTF::StringImpl *v71;
  uint64_t v72;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v64);
  v6 = a1[1];
  v7 = *a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    v40 = 0;
    v41 = 0;
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        v41 = *a1;
        v40 = a1[1];
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
    }
    goto LABEL_45;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  v10 = v7 + v8 + 1;
  a1[2] = v10;
  if (!v7)
  {
    v40 = v6;
    v41 = 0;
LABEL_45:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43 && v40)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41, v40);
      v11 = 0;
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v11 = 0;
    }
    goto LABEL_47;
  }
  v11 = *v9;
  if (v11 < 2)
  {
    v60 = 0;
    v12 = 1;
    goto LABEL_5;
  }
LABEL_47:
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (!v44 || !v6)
  {
    v45 = 0;
    v7 = 0;
    v59 = 0;
    v60 = 1;
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && v45)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v7, v45);
      v16 = 0;
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v16 = 0;
    }
    goto LABEL_51;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v7);
  v12 = 0;
  v7 = *a1;
  v6 = a1[1];
  v60 = 1;
  v10 = a1[2];
LABEL_5:
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = v10 - v7;
  v59 = v13;
  if (v6 <= v14)
  {
    v45 = 0;
    v57 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v57 && v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
      v7 = *a1;
      v45 = a1[1];
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_49;
  }
  v15 = (unsigned __int8 *)(v7 + v14);
  a1[2] = (uint64_t)(v15 + 1);
  if (!v7)
  {
    v45 = v6;
    goto LABEL_49;
  }
  v16 = *v15;
  if (v16 < 2)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_12;
  }
LABEL_51:
  *a1 = 0;
  a1[1] = 0;
  v47 = a1[3];
  if (v47 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v7);
  v18 = 0;
  v17 = 1;
LABEL_12:
  if (v16)
    v19 = v18;
  else
    v19 = 0;
  v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v58 = v21;
  v22 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v23)
  {
    LOBYTE(v61) = 0;
    v63 = 0;
    goto LABEL_31;
  }
  v2 = (WTF::StringImpl *)v22;
  v71 = 0;
  v72 = 0;
  if (v22 >= 0x2AAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextManipulationToken>((uint64_t)&v66, a1);
      if (!v70)
        break;
      v48 = v17;
      v49 = HIDWORD(v72);
      if (HIDWORD(v72) == (_DWORD)v72)
      {
        WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationToken>((uint64_t)&v71, (unint64_t)&v66);
      }
      else
      {
        v51 = v71;
        v52 = (_QWORD *)((char *)v71 + 96 * HIDWORD(v72));
        *v52 = v66;
        v53 = *((_QWORD *)&v66 + 1);
        *((_QWORD *)&v66 + 1) = 0;
        v52[1] = v53;
        v3 = (__int128 *)(v52 + 1);
        std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v3 + 8, (uint64_t)&v67);
        *((_BYTE *)v51 + 96 * v49 + 88) = v69;
        ++HIDWORD(v72);
      }
      std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v50);
      v2 = (WTF::StringImpl *)((char *)v2 - 1);
      v17 = v48;
      if (!v2)
      {
        v54 = HIDWORD(v72);
        v2 = v71;
        if (v72 > HIDWORD(v72))
        {
          v55 = v71;
          if (HIDWORD(v72))
          {
            if (HIDWORD(v72) >= 0x2AAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x196E543F4);
            }
            v56 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v72)));
            LODWORD(v72) = 96 * v54 / 0x60;
            v71 = (WTF::StringImpl *)v56;
            v55 = v2;
            if ((WTF::StringImpl *)v56 != v2)
            {
              WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v2, (WTF::StringImpl *)((char *)v2 + 96 * v54), v56);
              v55 = v71;
            }
          }
          if (v2)
          {
            if (v55 == v2)
            {
              v71 = 0;
              LODWORD(v72) = 0;
            }
            WTF::fastFree(v2, v23);
            v2 = v71;
          }
          else
          {
            v2 = v55;
          }
        }
        v71 = 0;
        v61 = v2;
        LODWORD(v2) = v72;
        LODWORD(v3) = HIDWORD(v72);
        LODWORD(v72) = 0;
        LODWORD(v62) = (_DWORD)v2;
        LODWORD(v17) = v48;
        goto LABEL_28;
      }
    }
LABEL_30:
    LOBYTE(v61) = 0;
    v63 = 0;
    std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v26);
    WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v37);
LABEL_31:
    v34 = (void *)*a1;
    v35 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_42;
    goto LABEL_32;
  }
  if (v22)
  {
    v24 = 96 * v22;
    v25 = WTF::fastMalloc((WTF *)(96 * v22));
    LODWORD(v72) = v24 / 0x60;
    v71 = (WTF::StringImpl *)v25;
    v3 = &v67;
    do
    {
      IPC::Decoder::decode<WebCore::TextManipulationToken>((uint64_t)&v66, a1);
      if (!v70)
        goto LABEL_30;
      v27 = HIDWORD(v72);
      if (HIDWORD(v72) == (_DWORD)v72)
      {
        WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationToken>((uint64_t)&v71, (unint64_t)&v66);
      }
      else
      {
        v29 = v71;
        v30 = (_QWORD *)((char *)v71 + 96 * HIDWORD(v72));
        *v30 = v66;
        v31 = *((_QWORD *)&v66 + 1);
        *((_QWORD *)&v66 + 1) = 0;
        v30[1] = v31;
        std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)(v30 + 2), (uint64_t)&v67);
        *((_BYTE *)v29 + 96 * v27 + 88) = v69;
        ++HIDWORD(v72);
      }
      std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v28);
      v2 = (WTF::StringImpl *)((char *)v2 - 1);
    }
    while (v2);
    v32 = v71;
    LODWORD(v2) = v72;
    LODWORD(v3) = HIDWORD(v72);
  }
  else
  {
    LODWORD(v3) = 0;
    v32 = 0;
  }
  v71 = 0;
  v61 = v32;
  LODWORD(v72) = 0;
  LODWORD(v62) = (_DWORD)v2;
LABEL_28:
  HIDWORD(v72) = 0;
  HIDWORD(v62) = (_DWORD)v3;
  v63 = 1;
  result = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v23);
  v36 = 0;
  if (*a1)
  {
    while (1)
    {
      if (v65)
      {
        v66 = v64;
        if (!v60)
        {
          LOBYTE(v67) = v59;
          if (!(_DWORD)v17)
          {
            BYTE1(v67) = v19;
            if (v58)
            {
              *((_QWORD *)&v67 + 1) = v20;
              if (!v36)
              {
                v38 = v61;
                v61 = 0;
                v62 = 0;
                v39 = v67;
                *(_OWORD *)a2 = v66;
                *(_OWORD *)(a2 + 16) = v39;
                v68[0] = 0;
                v68[1] = 0;
                *(_QWORD *)(a2 + 32) = v38;
                *(_DWORD *)(a2 + 40) = (_DWORD)v2;
                *(_DWORD *)(a2 + 44) = (_DWORD)v3;
                *(_BYTE *)(a2 + 48) = 1;
                WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v34);
                return WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v34);
              }
            }
          }
        }
      }
      __break(1u);
LABEL_42:
      if (v35)
        result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v34);
LABEL_32:
      if (!*a1)
        break;
      v36 = 1;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v34);
  }
  return result;
}

void sub_196E54400(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 104, v14);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::TextManipulationToken,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<std::optional<WebCore::TextManipulationTokenInfo>,void>::encode<IPC::Encoder,std::optional<WebCore::TextManipulationTokenInfo> const&>(a1, (uint64_t)(v2 + 2));
  LOBYTE(v2) = *((_BYTE *)v2 + 88);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::TextManipulationTokenInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DragData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  __int128 v9;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 9);
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 8));
  LOBYTE(v7) = *((_BYTE *)a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v7) = *((_BYTE *)a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v7) = *((_BYTE *)a2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v9 = *(_OWORD *)(a2 + 14);
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)&v9);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::DragData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[26];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  _BYTE v49[16];
  char v50;
  unint64_t v51;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  char v56;

  IPC::Decoder::decode<WTF::String>(a1, &v55);
  result = (WTF::StringImpl *)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  v6 = v5;
  v7 = v5;
  if (!(_BYTE)v5)
    goto LABEL_30;
  while (1)
  {
    v53 = result;
    v54 = v6;
    v8 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    v10 = (int)v9;
    v11 = v9;
    if (!(_BYTE)v9)
    {
      v9 = (void *)*a1;
      v28 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        if (v28)
        {
          v30 = v8;
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v29 + 16))(a1[3], v9);
          v8 = v30;
        }
      }
    }
    v51 = v8;
    v52 = v10;
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)v49);
    v6 = IPC::Decoder::decode<WTF::OptionSet<WebCore::DragOperation>>(a1);
    v12 = a1[1];
    v13 = *a1;
    v14 = a1[2] - *a1;
    if (v12 <= v14)
    {
      v31 = 0;
      v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
          v32 = *a1;
          v31 = a1[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
      }
      goto LABEL_37;
    }
    v15 = (unsigned __int8 *)(v13 + v14);
    a1[2] = (uint64_t)(v15 + 1);
    if (!v13)
    {
      v31 = v12;
      v32 = 0;
LABEL_37:
      v12 = 0;
      v13 = 0;
      *a1 = 0;
      a1[1] = 0;
      v34 = a1[3];
      if (v34)
      {
        if (v31)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
          v13 = *a1;
          v12 = a1[1];
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
      }
      goto LABEL_38;
    }
    v16 = *v15;
    if (v16 < 0x10)
    {
      v17 = v16 | 0x100;
      goto LABEL_7;
    }
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (!v35)
    {
      v13 = 0;
      v17 = 0;
      v12 = 0;
      goto LABEL_40;
    }
    if (!v12)
    {
      v13 = 0;
      v17 = 0;
LABEL_40:
      *a1 = 0;
      a1[1] = 0;
      v36 = a1[3];
      if (v36)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v13);
          v37 = *a1;
          v12 = a1[1];
        }
        else
        {
          v37 = 0;
        }
      }
      else
      {
        v37 = 0;
        v12 = 0;
      }
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v13);
    v17 = 0;
    v13 = *a1;
    v12 = a1[1];
LABEL_7:
    if (v12 <= a1[2] - v13)
      goto LABEL_40;
    v18 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v18 + 1);
    if (!v13)
    {
      v37 = 0;
LABEL_42:
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v37);
          v13 = *a1;
          v12 = a1[1];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = 0;
        v12 = 0;
      }
      goto LABEL_44;
    }
    v19 = *v18;
    if (v19 < 8)
    {
      v20 = v19 | 0x100;
      goto LABEL_11;
    }
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v13);
    v20 = 0;
LABEL_11:
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v47);
    if (!*a1)
      break;
    if (v56 && v7 && v11 && v50 && (unsigned __int16)v6 > 0xFFu && v17 > 0xFF && v20 > 0xFF && v48)
    {
      WebCore::DragData::DragData();
      *(_OWORD *)a2 = *(_OWORD *)v40;
      *(_OWORD *)(a2 + 10) = *(_OWORD *)&v40[10];
      *(_QWORD *)(a2 + 32) = v41;
      v22 = v42;
      v41 = 0;
      v42 = 0;
      *(_QWORD *)(a2 + 40) = v22;
      *(_OWORD *)(a2 + 48) = v43;
      *(_BYTE *)(a2 + 64) = v44;
      *(_QWORD *)(a2 + 72) = v45;
      *(_BYTE *)(a2 + 80) = v46;
      *(_BYTE *)(a2 + 88) = 1;
      v45 = 0;
      result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v23);
      goto LABEL_21;
    }
    __break(1u);
LABEL_30:
    v24 = *a1;
    v25 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v25)
    {
      v27 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(a1[3], v24);
      result = v27;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 88) = 0;
LABEL_21:
  if (v50)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v21);
  if (v56)
  {
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E54A10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  WTF::StringImpl *v30;

  if (a28)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, a2);
  if (*(_BYTE *)(v28 - 72))
  {
    v30 = *(WTF::StringImpl **)(v28 - 80);
    *(_QWORD *)(v28 - 80) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::DragOperation>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::DictationAlternative,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DictationAlternative,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v7);
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = *a1;
  if (!*a1)
    goto LABEL_7;
  LOBYTE(v6) = v8;
  if (!v8 || !v5)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = result;
  LOBYTE(v6) = 1;
LABEL_5:
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

char *IPC::ArgumentCoder<WebCore::UserStyleSheet,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  __int128 v7;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 48);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 64);
  v4 = *(_BYTE *)(a2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 81);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v7 = *(_OWORD *)(a2 + 88);
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)&v7);
}

_QWORD *IPC::ArgumentCoder<WebCore::NotificationResources,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  result = IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>(a1, &v7);
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    LOBYTE(v5) = 1;
    *(_DWORD *)result = 1;
    v6 = v7;
    v7 = 0;
    result[1] = v6;
    *(_QWORD *)a2 = result;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v5;
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void sub_196E54CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, char a10)
{
  if (a10 && a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::TransformOperationType>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 0x17)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

char *IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = v2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = v2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = v2[7];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = v2[8];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  LODWORD(v2) = v2[9];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<AudioStreamBasicDescription,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  int *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  int *v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int *v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int *v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  unsigned int *v53;
  unint64_t v54;
  int v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  int v120;
  _QWORD *v121;
  uint64_t v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  _QWORD *v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int v168;
  _QWORD *v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  _QWORD *v188;
  int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (uint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v261 = *v6;
      v8 = v3;
      goto LABEL_8;
    }
    v57 = v2;
    v58 = 0;
  }
  else
  {
    v57 = 0;
    v58 = 0;
    *result = 0;
    result[1] = 0;
    v33 = result[3];
    if (v33)
      goto LABEL_107;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v75 = result;
      v76 = a2;
      if (v57)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(result[3], v58, v57);
        v261 = 0;
        result = v75;
        v8 = *v75;
        v2 = v75[1];
        v7 = 1;
        v3 = *v75;
        a2 = v76;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v261 = 0;
        v7 = 1;
      }
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v261 = 0;
      v7 = 1;
    }
LABEL_8:
    v9 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v9 && v2 - v9 > 3)
    {
      v11 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v11 + 1;
      if (v3)
      {
        v12 = 0;
        v13 = *v11;
        v14 = v13 & 0xFFFFFF00;
        v15 = v13;
        goto LABEL_15;
      }
      v59 = v2;
    }
    else
    {
      v59 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v60 = result[3];
      if (v60)
      {
        v120 = v7;
        v121 = result;
        v122 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v60 + 16))(result[3], v3);
          result = v121;
          v8 = *v121;
          v59 = v121[1];
          a2 = v122;
        }
        else
        {
          v59 = 0;
          v8 = 0;
        }
        v7 = v120;
      }
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v77 = v7;
      v78 = result;
      v79 = a2;
      if (v59)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(result[3], v8, v59);
        v14 = 0;
        v15 = 0;
        result = v78;
        v8 = *v78;
        v2 = v78[1];
        v12 = 1;
        v3 = *v78;
        a2 = v79;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v14 = 0;
        v15 = 0;
        v12 = 1;
      }
      v7 = v77;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v14 = 0;
      v15 = 0;
      v12 = 1;
    }
LABEL_15:
    v16 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v16 || v2 - v16 <= 3)
    {
      v61 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v62 = result[3];
      if (v62)
      {
        v123 = v12;
        v124 = v15;
        v125 = v14;
        v126 = v7;
        v127 = result;
        v128 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v62 + 16))(result[3], v3);
          result = v127;
          v8 = *v127;
          v61 = v127[1];
          a2 = v128;
        }
        else
        {
          v61 = 0;
          v8 = 0;
        }
        v7 = v126;
        v14 = v125;
        v15 = v124;
        v12 = v123;
      }
    }
    else
    {
      v17 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v17 + 1;
      if (v3)
      {
        v18 = 0;
        v19 = *v17;
        v20 = v19 & 0xFFFFFF00;
        v21 = v19;
        goto LABEL_19;
      }
      v61 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v80 = v12;
      v81 = v15;
      v82 = v14;
      v83 = v7;
      v84 = result;
      v85 = a2;
      if (v61)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(result[3], v8, v61);
        v20 = 0;
        v21 = 0;
        result = v84;
        v8 = *v84;
        v2 = v84[1];
        v18 = 1;
        v3 = *v84;
        a2 = v85;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v20 = 0;
        v21 = 0;
        v18 = 1;
      }
      v7 = v83;
      v14 = v82;
      v15 = v81;
      v12 = v80;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v20 = 0;
      v21 = 0;
      v18 = 1;
    }
LABEL_19:
    v22 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v22 || v2 - v22 <= 3)
    {
      v63 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v64 = result[3];
      if (v64)
      {
        v129 = v18;
        v130 = v21;
        v131 = v20;
        v132 = v12;
        v133 = v15;
        v134 = v14;
        v135 = v7;
        v136 = result;
        v137 = a2;
        if (v2)
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v64 + 16))(result[3], v3);
          result = v136;
          v8 = *v136;
          v63 = v136[1];
          a2 = v137;
        }
        else
        {
          v63 = 0;
          v8 = 0;
        }
        v7 = v135;
        v14 = v134;
        v15 = v133;
        v12 = v132;
        v20 = v131;
        v21 = v130;
        v18 = v129;
      }
    }
    else
    {
      v23 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v23 + 1;
      if (v3)
      {
        v24 = 0;
        v25 = *v23;
        v26 = v25 & 0xFFFFFF00;
        v27 = v25;
        goto LABEL_23;
      }
      v63 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v86 = v18;
      v87 = v21;
      v88 = v20;
      v89 = v12;
      v90 = v15;
      v91 = v14;
      v92 = v7;
      v93 = result;
      v94 = a2;
      if (v63)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(result[3], v8, v63);
        v26 = 0;
        v27 = 0;
        result = v93;
        v8 = *v93;
        v2 = v93[1];
        v24 = 1;
        v3 = *v93;
        a2 = v94;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v26 = 0;
        v27 = 0;
        v24 = 1;
      }
      v7 = v92;
      v14 = v91;
      v15 = v90;
      v12 = v89;
      v20 = v88;
      v21 = v87;
      v18 = v86;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v26 = 0;
      v27 = 0;
      v24 = 1;
    }
LABEL_23:
    v28 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v28 || v2 - v28 <= 3)
    {
      v65 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v66 = result[3];
      if (v66)
      {
        v246 = v27;
        v256 = v24;
        v236 = v26;
        v138 = v18;
        v139 = v21;
        v140 = v20;
        v141 = v12;
        v142 = v15;
        v143 = v14;
        v144 = v7;
        v145 = result;
        v146 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v3);
          result = v145;
          v8 = *v145;
          v65 = v145[1];
          a2 = v146;
        }
        else
        {
          v65 = 0;
          v8 = 0;
        }
        v7 = v144;
        v14 = v143;
        v15 = v142;
        v12 = v141;
        v20 = v140;
        v21 = v139;
        v18 = v138;
        v26 = v236;
        v27 = v246;
        v24 = v256;
      }
    }
    else
    {
      v29 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v29 + 1;
      if (v3)
      {
        v30 = 0;
        v31 = *v29;
        v32 = v31 & 0xFFFFFF00;
        v33 = v31;
        goto LABEL_27;
      }
      v65 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v241 = v27;
      v251 = v24;
      v222 = v18;
      v231 = v26;
      v95 = v21;
      v96 = v20;
      v97 = v12;
      v98 = v15;
      v99 = v14;
      v100 = v7;
      v101 = result;
      v102 = a2;
      if (v65)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v8, v65);
        v32 = 0;
        v33 = 0;
        result = v101;
        v8 = *v101;
        v2 = v101[1];
        v30 = 1;
        v3 = *v101;
        a2 = v102;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v32 = 0;
        v33 = 0;
        v30 = 1;
      }
      v7 = v100;
      v14 = v99;
      v15 = v98;
      v12 = v97;
      v20 = v96;
      v21 = v95;
      v18 = v222;
      v26 = v231;
      v27 = v241;
      v24 = v251;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v32 = 0;
      v33 = 0;
      v30 = 1;
    }
LABEL_27:
    v34 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v34 || v2 - v34 <= 3)
    {
      v67 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v68 = result[3];
      if (v68)
      {
        v212 = v30;
        v218 = v33;
        v247 = v27;
        v257 = v24;
        v227 = v18;
        v237 = v26;
        v147 = v21;
        v148 = v20;
        v149 = v12;
        v150 = v15;
        v151 = v14;
        v152 = v7;
        v153 = result;
        v154 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v3);
          result = v153;
          v8 = *v153;
          v67 = v153[1];
          a2 = v154;
        }
        else
        {
          v67 = 0;
          v8 = 0;
        }
        v7 = v152;
        v14 = v151;
        v15 = v150;
        v12 = v149;
        v20 = v148;
        v21 = v147;
        v18 = v227;
        v26 = v237;
        v27 = v247;
        v24 = v257;
        v33 = v218;
        v30 = v212;
      }
    }
    else
    {
      v35 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v35 + 1;
      if (v3)
      {
        v36 = 0;
        v37 = *v35;
        v38 = v37 & 0xFFFFFF00;
        v39 = v37;
        goto LABEL_31;
      }
      v67 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v203 = v20;
      v209 = v30;
      v214 = v33;
      v242 = v27;
      v252 = v24;
      v223 = v18;
      v232 = v26;
      v197 = v21;
      v103 = v12;
      v104 = v15;
      v105 = v14;
      v106 = v7;
      v107 = result;
      v108 = a2;
      if (v67)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v8, v67);
        v38 = 0;
        v39 = 0;
        result = v107;
        v8 = *v107;
        v2 = v107[1];
        v36 = 1;
        v3 = *v107;
        a2 = v108;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v38 = 0;
        v39 = 0;
        v36 = 1;
      }
      v7 = v106;
      v14 = v105;
      v15 = v104;
      v12 = v103;
      v21 = v197;
      v20 = v203;
      v18 = v223;
      v26 = v232;
      v27 = v242;
      v24 = v252;
      v33 = v214;
      v30 = v209;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v38 = 0;
      v39 = 0;
      v36 = 1;
    }
LABEL_31:
    v40 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v40 || v2 - v40 <= 3)
    {
      v69 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v70 = result[3];
      if (v70)
      {
        v194 = v36;
        v183 = v38;
        v189 = v39;
        v213 = v30;
        v219 = v33;
        v248 = v27;
        v258 = v24;
        v228 = v18;
        v238 = v26;
        v155 = v21;
        v156 = v20;
        v157 = v12;
        v158 = v15;
        v159 = v14;
        v160 = v7;
        v161 = result;
        v162 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v3);
          result = v161;
          v8 = *v161;
          v69 = v161[1];
          a2 = v162;
        }
        else
        {
          v69 = 0;
          v8 = 0;
        }
        v7 = v160;
        v14 = v159;
        v15 = v158;
        v12 = v157;
        v20 = v156;
        v21 = v155;
        v18 = v228;
        v26 = v238;
        v27 = v248;
        v24 = v258;
        v33 = v219;
        v30 = v213;
        v38 = v183;
        v39 = v189;
        v36 = v194;
      }
    }
    else
    {
      v41 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v41 + 1;
      if (v3)
      {
        v42 = 0;
        v43 = *v41;
        v44 = v43 & 0xFFFFFF00;
        v45 = v43;
        goto LABEL_35;
      }
      v69 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v198 = v21;
      v181 = v38;
      v186 = v39;
      v204 = v20;
      v210 = v30;
      v215 = v33;
      v243 = v27;
      v253 = v24;
      v224 = v18;
      v233 = v26;
      v109 = v12;
      v110 = v15;
      v111 = v14;
      v112 = v7;
      v113 = result;
      v114 = a2;
      if (v69)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v8, v69);
        v44 = 0;
        v45 = 0;
        result = v113;
        v8 = *v113;
        v2 = v113[1];
        v42 = 1;
        v3 = *v113;
        a2 = v114;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v44 = 0;
        v45 = 0;
        v42 = 1;
      }
      v7 = v112;
      v14 = v111;
      v15 = v110;
      v12 = v109;
      v21 = v198;
      v20 = v204;
      v18 = v224;
      v26 = v233;
      v27 = v243;
      v24 = v253;
      v33 = v215;
      v30 = v210;
      v38 = v181;
      v39 = v186;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v44 = 0;
      v45 = 0;
      v42 = 1;
    }
LABEL_35:
    v46 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v46 || v2 - v46 <= 3)
    {
      v71 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v72 = result[3];
      if (v72)
      {
        v195 = v36;
        v201 = v21;
        v184 = v38;
        v190 = v39;
        v207 = v20;
        v220 = v33;
        v249 = v27;
        v259 = v24;
        v229 = v18;
        v239 = v26;
        v163 = v12;
        v179 = v15;
        v164 = v14;
        v165 = v7;
        v166 = result;
        v167 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v3);
          result = v166;
          v8 = *v166;
          v71 = v166[1];
          a2 = v167;
        }
        else
        {
          v71 = 0;
          v8 = 0;
        }
        v7 = v165;
        v14 = v164;
        v15 = v179;
        v38 = v184;
        v12 = v163;
        v21 = v201;
        v20 = v207;
        v18 = v229;
        v26 = v239;
        v27 = v249;
        v24 = v259;
        v33 = v220;
        v39 = v190;
        v36 = v195;
      }
    }
    else
    {
      v47 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v47 + 1;
      if (v3)
      {
        v48 = 0;
        v49 = *v47;
        v50 = v49 & 0xFFFFFF00;
        v51 = v49;
        goto LABEL_39;
      }
      v71 = v2;
    }
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
    {
      v192 = v36;
      v199 = v21;
      v182 = v38;
      v187 = v39;
      v205 = v20;
      v216 = v33;
      v244 = v27;
      v254 = v24;
      v225 = v18;
      v234 = v26;
      v174 = v12;
      v177 = v15;
      v115 = v14;
      v171 = v7;
      v116 = result;
      v117 = a2;
      if (v71)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v8, v71);
        v50 = 0;
        v51 = 0;
        result = v116;
        v8 = *v116;
        v2 = v116[1];
        v48 = 1;
        v3 = *v116;
        a2 = v117;
      }
      else
      {
        v8 = 0;
        v2 = 0;
        v3 = 0;
        v50 = 0;
        v51 = 0;
        v48 = 1;
      }
      v7 = v171;
      v12 = v174;
      v14 = v115;
      v15 = v177;
      v38 = v182;
      v21 = v199;
      v20 = v205;
      v18 = v225;
      v26 = v234;
      v27 = v244;
      v24 = v254;
      v33 = v216;
      v39 = v187;
      v36 = v192;
    }
    else
    {
      v8 = 0;
      v2 = 0;
      v50 = 0;
      v51 = 0;
      v48 = 1;
    }
LABEL_39:
    v52 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v52 || v2 - v52 <= 3)
    {
      v54 = 0;
      v8 = 0;
      *result = 0;
      result[1] = 0;
      v73 = result[3];
      if (v73)
      {
        v196 = v36;
        v202 = v21;
        v185 = v38;
        v191 = v39;
        v208 = v20;
        v221 = v33;
        v250 = v27;
        v260 = v24;
        v230 = v18;
        v240 = v26;
        v176 = v12;
        v180 = v15;
        v168 = v14;
        v173 = v7;
        v169 = result;
        v170 = a2;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v3);
          result = v169;
          v8 = *v169;
          v54 = v169[1];
          a2 = v170;
        }
        else
        {
          v54 = 0;
          v8 = 0;
        }
        v7 = v173;
        v12 = v176;
        v14 = v168;
        v15 = v180;
        v38 = v185;
        v21 = v202;
        v20 = v208;
        v18 = v230;
        v26 = v240;
        v27 = v250;
        v24 = v260;
        LODWORD(v33) = v221;
        v39 = v191;
        v36 = v196;
      }
    }
    else
    {
      v53 = (unsigned int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      result[2] = v53 + 1;
      v54 = v2;
      if (v3)
      {
        v55 = 0;
        v3 = *v53;
        if (v7)
          goto LABEL_106;
        goto LABEL_43;
      }
    }
    *result = 0;
    result[1] = 0;
    v74 = result[3];
    if (!v74)
      break;
    if (!v54)
      break;
    v188 = result;
    v211 = a2;
    v172 = v7;
    v175 = v12;
    v193 = v14;
    v200 = v21;
    v178 = v15;
    v206 = v20;
    v226 = v18;
    v235 = v26;
    v245 = v27;
    v255 = v24;
    v217 = v33;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v74 + 16))(v74, v8, v54);
    v33 = v217;
    v27 = v245;
    v24 = v255;
    v18 = v226;
    v26 = v235;
    v21 = v200;
    v20 = v206;
    v12 = v175;
    v15 = v178;
    v14 = v193;
    a2 = v211;
    if (!*v188)
      break;
    v3 = 0;
    v55 = 1;
    if (v172)
      goto LABEL_106;
LABEL_43:
    if (!v12 && !v18 && !v24 && !v30 && !v36 && !v42 && !v48 && !v55)
    {
      *(_QWORD *)a2 = v261;
      *(_DWORD *)(a2 + 8) = v15 | v14;
      *(_DWORD *)(a2 + 12) = v21 | v20;
      *(_DWORD *)(a2 + 16) = v27 | v26;
      *(_DWORD *)(a2 + 20) = v33 | v32;
      *(_DWORD *)(a2 + 24) = v39 | v38;
      *(_DWORD *)(a2 + 28) = v45 | v44;
      v56 = 1;
      *(_DWORD *)(a2 + 32) = v51 | v50;
      *(_DWORD *)(a2 + 36) = v3;
      goto LABEL_52;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    v118 = result;
    v119 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v3);
      result = v118;
      v58 = *v118;
      v57 = v118[1];
      a2 = v119;
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
  }
  v56 = 0;
  *(_BYTE *)a2 = 0;
LABEL_52:
  *(_BYTE *)(a2 + 40) = v56;
  return result;
}

void IPC::ArgumentCoder<WebCore::CAAudioStreamDescription,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[24];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  AudioStreamBasicDescription v9;
  char v10;

  IPC::Decoder::decode<AudioStreamBasicDescription>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if (v10)
    {
      WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4, &v9);
      *(_QWORD *)a2 = MEMORY[0x1E0DD8FD8] + 16;
      *(_OWORD *)(a2 + 24) = v5;
      *(_OWORD *)(a2 + 40) = v6;
      *(_OWORD *)(a2 + 56) = v7;
      *(_DWORD *)(a2 + 72) = v8;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&v4[8];
      *(_BYTE *)(a2 + 80) = 1;
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
}

_QWORD *IPC::Decoder::decode<AudioStreamBasicDescription>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<AudioStreamBasicDescription,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::Gradient::RadialData,void>::encode(IPC::Encoder *a1, int *a2)
{
  IPC::Encoder *v4;
  IPC::Encoder *v5;
  int v6;
  int v7;
  int v8;
  char *result;

  v4 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, a2);
  v5 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v4, a2 + 2);
  v6 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4) = v6;
  v7 = a2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[6];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v8;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::Gradient::RadialData,void>::decode(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;

  v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v6 = v5;
  v7 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v9 = v8;
  v10 = IPC::Decoder::decode<float>(a2);
  v11 = IPC::Decoder::decode<float>(a2);
  result = IPC::Decoder::decode<float>(a2);
  v13 = *a2;
  if (!*a2)
    goto LABEL_10;
  if (!v6 || !v9 || (v10 & 0xFF00000000) == 0 || (v11 & 0xFF00000000) == 0 || (result & 0xFF00000000) == 0)
  {
    __break(1u);
LABEL_10:
    *(_BYTE *)a1 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v11;
  LOBYTE(v13) = 1;
  *(_DWORD *)(a1 + 24) = result;
LABEL_8:
  *(_BYTE *)(a1 + 28) = v13;
  return result;
}

char *IPC::ArgumentCoder<WebCore::Gradient,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int *v4;
  int v5;
  int v6;
  __int128 v8;

  v4 = (int *)(a2 + 48);
  v5 = *(_DWORD *)(a2 + 76);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(a1, v4, v5);
  v6 = *(_DWORD *)(a2 + 88);
  *(_QWORD *)&v8 = *(_QWORD *)(a2 + 80);
  DWORD2(v8) = v6;
  IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::encode(a1, (uint64_t)&v8);
  LOBYTE(v4) = *(_BYTE *)(a2 + 92);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v4;
  IPC::VectorArgumentCoder<false,WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  v8 = *(_OWORD *)(a2 + 32);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t *)&v8);
}

uint64_t *WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::SourceImage>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE v21[8];
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;

  v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_19:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
      goto LABEL_28;
    goto LABEL_20;
  }
  v9 = (uint64_t *)(v5 + v7);
  a2[2] = (uint64_t)(v9 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
    goto LABEL_19;
  }
  v10 = *v9;
  if ((unint64_t)(v10 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_20:
    while (1)
    {
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (!v16)
        break;
      if (!v6)
        break;
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
      v12 = *a2;
      if (!*a2)
        break;
      while (1)
      {
        __break(1u);
LABEL_28:
        if (!v12)
          break;
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v12 = *a2;
        if (!*a2)
        {
          v5 = 0;
          v6 = a2[1];
          goto LABEL_20;
        }
      }
      v6 = 0;
      v5 = 0;
    }
    *a1 = 0;
    a1[40] = 0;
    goto LABEL_22;
  }
  v19 = v10;
  v20 = 2;
  WebCore::SourceImage::SourceImage();
  std::__optional_destruct_base<WebCore::SourceImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::SourceImage>((uint64_t)a1, (uint64_t)v21);
  if (v25)
  {
    if (v24 != -1)
      ((void (*)(char *, uint64_t *))off_1E34ADF00[v24])(&v26, &v23);
    v24 = -1;
  }
  if (v22 != -1)
    ((void (*)(char *, _BYTE *))off_1E34ADF00[v22])(&v26, v21);
  v22 = -1;
  result = ((uint64_t (*)(char *, uint64_t *))off_1E34ADF00[v20])(&v26, &v19);
  if (!a1[40])
  {
LABEL_22:
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v18)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
    }
  }
  return result;
}

void sub_196E563A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *IPC::ArgumentCoder<WebCore::SourceBrush,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  uint64_t *result;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  char *v13;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  v4 = *(_DWORD *)(a2 + 80);
  result = (uint64_t *)IPC::Encoder::grow(a1, 1uLL, 1);
  *(_BYTE *)result = v4;
  if (!(_BYTE)v4)
  {
    if (!*(_DWORD *)(a2 + 80))
      return result;
    goto LABEL_17;
  }
  if (v4 != 1)
    return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>((uint64_t *)a1, *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 80), v4);
  if (*(_DWORD *)(a2 + 80) != 1 || (v6 = *(unsigned int *)(a2 + 24), (_DWORD)v6 == -1))
  {
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  v13 = &v12;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_1E34AE098[v6])(&v10, &v13, a2 + 16);
  v7 = v11;
  v8 = v11;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  if (!v8)
  {
    if (!v11)
    {
      IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, v10);
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  if (v8 == 1)
  {
    if (v11 == 1)
    {
      v9 = v10;
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
      goto LABEL_11;
    }
LABEL_18:
    result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
LABEL_11:
  if (v11 != -1)
    ((void (*)(char **, uint64_t *))off_1E34AE060[v11])(&v13, &v10);
  return (uint64_t *)IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (uint64_t *)(a2 + 32));
}

void sub_196E565B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char a12)
{
  if (a10 != -1)
    ((void (*)(char *, uint64_t *))off_1E34AE060[a10])(&a12, &a9);
  _Unwind_Resume(exception_object);
}

void WebCore::SourceBrush::~SourceBrush(WebCore::SourceBrush *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v7;

  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v7, (char *)this + 16);
  *((_DWORD *)this + 20) = -1;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

char *IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = v2[5];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = v2[6];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = v2[7];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = v2[8];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  LOBYTE(v2) = v2[9];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::decode(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  char v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  char v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  char v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned int v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  _QWORD *v140;
  char v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  _QWORD *v150;
  char v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  _QWORD *v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  _QWORD *v168;
  char v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  _QWORD *v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  _QWORD *v187;
  char v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  _QWORD *v197;
  char v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  _QWORD *v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned int v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  _QWORD *v217;
  int v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  _QWORD *v226;
  unsigned int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  _QWORD *v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  _QWORD *v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  _QWORD *v243;
  int v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  char v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  char v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  unsigned int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  char v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  char v356;
  char v357;
  char v358;
  char v359;
  char v360;
  char v361;
  char v362;
  char v363;
  char v364;
  char v365;
  char v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  int v379;
  char v380;
  char v381;
  char v382;
  char v383;
  char v384;
  char v385;
  char v386;
  char v387;
  char v388;
  char v389;
  char v390;
  char v391;
  char v392;
  char v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;

  v1 = result[1];
  v2 = *result;
  v3 = result[2] - *result;
  if (v1 <= v3)
  {
    v65 = 0;
    v66 = 0;
    *result = 0;
    result[1] = 0;
    v67 = result[3];
    if (v67)
    {
      v249 = result;
      if (v1)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v67 + 16))(result[3]);
        result = v249;
        v66 = *v249;
        v65 = v249[1];
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
    }
    goto LABEL_70;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    v65 = v1;
    v66 = 0;
LABEL_70:
    *result = 0;
    result[1] = 0;
    v68 = result[3];
    if (v68)
    {
      v248 = result;
      if (v65)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v68 + 16))(result[3], v66, v65);
        v6 = 0;
        result = v248;
        v2 = *v248;
        v1 = v248[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
    goto LABEL_72;
  }
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
LABEL_72:
  *result = 0;
  result[1] = 0;
  v69 = result[3];
  if (!v69)
  {
    v9 = 0;
    v2 = 0;
    v7 = 1;
    goto LABEL_74;
  }
  v247 = result;
  if (!v1)
  {
    v9 = 0;
    v69 = 0;
    v2 = 0;
    v7 = 1;
LABEL_74:
    *result = 0;
    result[1] = 0;
    v70 = result[3];
    if (v70)
    {
      v244 = v7;
      v245 = v9;
      v246 = result;
      if (v69)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v70 + 16))(result[3], v2, v69);
        v13 = 0;
        result = v246;
        v2 = *v246;
        v1 = v246[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v13 = 0;
      }
      v9 = v245;
      v7 = v244;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v13 = 0;
    }
    goto LABEL_76;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v69 + 16))(result[3], v2);
  v8 = 0;
  result = v247;
  v2 = *v247;
  v1 = v247[1];
  v7 = 1;
  v5 = v247[2];
LABEL_5:
  if (v6)
    v9 = v8;
  else
    v9 = 0;
  v10 = v5 - v2;
  if (v1 <= v10)
  {
    v250 = v7;
    v251 = v9;
    v69 = 0;
    v252 = result[3];
    *result = 0;
    result[1] = 0;
    v253 = result;
    if (v252 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v252 + 16))(v252);
      result = v253;
      v2 = *v253;
      v69 = v253[1];
    }
    else
    {
      v2 = 0;
    }
    v9 = v251;
    v7 = v250;
    goto LABEL_74;
  }
  v11 = (unsigned __int8 *)(v2 + v10);
  v12 = v2 + v10 + 1;
  result[2] = v12;
  if (!v2)
  {
    v69 = v1;
    goto LABEL_74;
  }
  v13 = *v11;
  if (v13 < 2)
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_12;
  }
LABEL_76:
  *result = 0;
  result[1] = 0;
  v71 = result[3];
  if (!v71)
  {
    v15 = 0;
    v2 = 0;
    v14 = 1;
    goto LABEL_78;
  }
  v240 = v7;
  v241 = v13;
  v242 = v9;
  v243 = result;
  if (!v1)
  {
    v15 = 0;
    v71 = 0;
    v2 = 0;
    v14 = 1;
LABEL_78:
    *result = 0;
    result[1] = 0;
    v72 = result[3];
    if (v72)
    {
      v234 = v14;
      v235 = v7;
      v236 = v15;
      v237 = v13;
      v238 = v9;
      v239 = result;
      if (v71)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v72 + 16))(result[3], v2, v71);
        v19 = 0;
        result = v239;
        v2 = *v239;
        v1 = v239[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v19 = 0;
      }
      v9 = v238;
      v13 = v237;
      v15 = v236;
      v7 = v235;
      v14 = v234;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v19 = 0;
    }
    goto LABEL_80;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v71 + 16))(result[3], v2);
  v15 = 0;
  result = v243;
  v2 = *v243;
  v1 = v243[1];
  v14 = 1;
  v12 = v243[2];
  v9 = v242;
  v13 = v241;
  v7 = v240;
LABEL_12:
  v16 = v12 - v2;
  if (v1 <= v16)
  {
    v254 = v14;
    v255 = v7;
    v256 = v15;
    v257 = v13;
    v258 = v9;
    v71 = 0;
    v259 = result[3];
    *result = 0;
    result[1] = 0;
    v260 = result;
    if (v259 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v259 + 16))(v259);
      result = v260;
      v2 = *v260;
      v71 = v260[1];
    }
    else
    {
      v2 = 0;
    }
    v9 = v258;
    v13 = v257;
    v15 = v256;
    v7 = v255;
    v14 = v254;
    goto LABEL_78;
  }
  v17 = (unsigned __int8 *)(v2 + v16);
  v18 = v2 + v16 + 1;
  result[2] = v18;
  if (!v2)
  {
    v71 = v1;
    goto LABEL_78;
  }
  v19 = *v17;
  if (v19 < 2)
  {
    v20 = 0;
    v21 = 1;
    goto LABEL_16;
  }
LABEL_80:
  *result = 0;
  result[1] = 0;
  v73 = result[3];
  if (!v73)
  {
    v21 = 0;
    v2 = 0;
    v20 = 1;
    goto LABEL_82;
  }
  v227 = v19;
  v228 = v14;
  v229 = v7;
  v230 = v15;
  v231 = v13;
  v232 = v9;
  v233 = result;
  if (!v1)
  {
    v21 = 0;
    v73 = 0;
    v2 = 0;
    v20 = 1;
LABEL_82:
    *result = 0;
    result[1] = 0;
    v74 = result[3];
    if (v74)
    {
      v218 = v20;
      v219 = v21;
      v220 = v19;
      v221 = v14;
      v222 = v7;
      v223 = v15;
      v224 = v13;
      v225 = v9;
      v226 = result;
      if (v73)
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v74 + 16))(result[3], v2, v73);
        v25 = 0;
        result = v226;
        v2 = *v226;
        v1 = v226[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v25 = 0;
      }
      v9 = v225;
      v13 = v224;
      v15 = v223;
      v7 = v222;
      v14 = v221;
      v19 = v220;
      v21 = v219;
      v20 = v218;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v25 = 0;
    }
    goto LABEL_84;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v73 + 16))(result[3], v2);
  v21 = 0;
  result = v233;
  v2 = *v233;
  v1 = v233[1];
  v20 = 1;
  v18 = v233[2];
  v9 = v232;
  v13 = v231;
  v15 = v230;
  v7 = v229;
  v14 = v228;
  v19 = v227;
LABEL_16:
  v22 = v18 - v2;
  if (v1 <= v22)
  {
    v261 = v20;
    v262 = v21;
    v263 = v19;
    v264 = v14;
    v265 = v7;
    v266 = v15;
    v267 = v13;
    v268 = v9;
    v73 = 0;
    v269 = result[3];
    *result = 0;
    result[1] = 0;
    v270 = result;
    if (v269 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v269 + 16))(v269);
      result = v270;
      v2 = *v270;
      v73 = v270[1];
    }
    else
    {
      v2 = 0;
    }
    v9 = v268;
    v13 = v267;
    v15 = v266;
    v7 = v265;
    v14 = v264;
    v19 = v263;
    v21 = v262;
    v20 = v261;
    goto LABEL_82;
  }
  v23 = (unsigned __int8 *)(v2 + v22);
  v24 = v2 + v22 + 1;
  result[2] = v24;
  if (!v2)
  {
    v73 = v1;
    goto LABEL_82;
  }
  v25 = *v23;
  if (v25 < 2)
  {
    v26 = 0;
    v27 = 1;
    goto LABEL_20;
  }
LABEL_84:
  *result = 0;
  result[1] = 0;
  v75 = result[3];
  if (!v75)
  {
    v27 = 0;
    v2 = 0;
    v26 = 1;
    goto LABEL_86;
  }
  v208 = v25;
  v209 = v20;
  v210 = v21;
  v211 = v19;
  v212 = v14;
  v213 = v7;
  v214 = v15;
  v215 = v13;
  v216 = v9;
  v217 = result;
  if (!v1)
  {
    v27 = 0;
    v75 = 0;
    v2 = 0;
    v26 = 1;
LABEL_86:
    *result = 0;
    result[1] = 0;
    v76 = result[3];
    if (v76)
    {
      v423 = v26;
      v440 = v25;
      v198 = v27;
      v199 = v20;
      v200 = v21;
      v201 = v19;
      v202 = v14;
      v203 = v7;
      v204 = v15;
      v205 = v13;
      v206 = v9;
      v207 = result;
      if (v75)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v76 + 16))(v76, v2, v75);
        v31 = 0;
        result = v207;
        v2 = *v207;
        v1 = v207[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v31 = 0;
      }
      v9 = v206;
      v13 = v205;
      v15 = v204;
      v7 = v203;
      v14 = v202;
      v19 = v201;
      v21 = v200;
      v20 = v199;
      v26 = v423;
      v25 = v440;
      v27 = v198;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v31 = 0;
    }
    goto LABEL_88;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v75 + 16))(result[3], v2);
  v27 = 0;
  result = v217;
  v2 = *v217;
  v1 = v217[1];
  v26 = 1;
  v24 = v217[2];
  v9 = v216;
  v13 = v215;
  v15 = v214;
  v7 = v213;
  v14 = v212;
  v19 = v211;
  v21 = v210;
  v20 = v209;
  v25 = v208;
LABEL_20:
  v28 = v24 - v2;
  if (v1 <= v28)
  {
    v424 = v26;
    v441 = v25;
    v271 = v27;
    v272 = v20;
    v273 = v21;
    v274 = v19;
    v275 = v14;
    v276 = v7;
    v277 = v15;
    v278 = v13;
    v279 = v9;
    v75 = 0;
    v280 = result[3];
    *result = 0;
    result[1] = 0;
    v281 = result;
    if (v280 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
      result = v281;
      v2 = *v281;
      v75 = v281[1];
    }
    else
    {
      v2 = 0;
    }
    v9 = v279;
    v13 = v278;
    v15 = v277;
    v7 = v276;
    v14 = v275;
    v19 = v274;
    v21 = v273;
    v20 = v272;
    v26 = v424;
    v25 = v441;
    v27 = v271;
    goto LABEL_86;
  }
  v29 = (unsigned __int8 *)(v2 + v28);
  v30 = v2 + v28 + 1;
  result[2] = v30;
  if (!v2)
  {
    v75 = v1;
    goto LABEL_86;
  }
  v31 = *v29;
  if (v31 < 2)
  {
    v32 = 0;
    v33 = 1;
    goto LABEL_24;
  }
LABEL_88:
  *result = 0;
  result[1] = 0;
  v77 = result[3];
  if (!v77)
  {
    v33 = 0;
    v2 = 0;
    v32 = 1;
    goto LABEL_90;
  }
  v407 = v31;
  v422 = v26;
  v188 = v27;
  v439 = v25;
  v189 = v20;
  v190 = v21;
  v191 = v19;
  v192 = v14;
  v193 = v7;
  v194 = v15;
  v195 = v13;
  v196 = v9;
  v197 = result;
  if (!v1)
  {
    v33 = 0;
    v77 = 0;
    v2 = 0;
    v32 = 1;
LABEL_90:
    *result = 0;
    result[1] = 0;
    v78 = result[3];
    if (v78)
    {
      v392 = v33;
      v406 = v31;
      v421 = v26;
      v344 = v27;
      v438 = v25;
      v179 = v20;
      v180 = v21;
      v181 = v19;
      v182 = v14;
      v183 = v7;
      v184 = v15;
      v185 = v13;
      v186 = v9;
      v187 = result;
      if (v77)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v78 + 16))(v78, v2, v77);
        v36 = 0;
        result = v187;
        v2 = *v187;
        v1 = v187[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v36 = 0;
      }
      v9 = v186;
      v13 = v185;
      v15 = v184;
      v7 = v183;
      v14 = v182;
      v19 = v181;
      v21 = v180;
      v20 = v179;
      v26 = v421;
      v25 = v438;
      v27 = v344;
      v33 = v392;
      v31 = v406;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v36 = 0;
    }
    goto LABEL_92;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v2);
  v33 = 0;
  result = v197;
  v2 = *v197;
  v1 = v197[1];
  v32 = 1;
  v30 = v197[2];
  v9 = v196;
  v13 = v195;
  v15 = v194;
  v7 = v193;
  v14 = v192;
  v19 = v191;
  v21 = v190;
  v20 = v189;
  v26 = v422;
  v25 = v439;
  v27 = v188;
  v31 = v407;
LABEL_24:
  v34 = v30 - v2;
  if (v1 <= v34)
  {
    v393 = v33;
    v408 = v31;
    v425 = v26;
    v282 = v27;
    v442 = v25;
    v283 = v20;
    v284 = v21;
    v285 = v19;
    v286 = v14;
    v287 = v7;
    v288 = v15;
    v289 = v13;
    v290 = v9;
    v77 = 0;
    v291 = result[3];
    *result = 0;
    result[1] = 0;
    v292 = result;
    if (v291 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v291 + 16))(v291);
      result = v292;
      v2 = *v292;
      v77 = v292[1];
    }
    else
    {
      v2 = 0;
    }
    v9 = v290;
    v13 = v289;
    v15 = v288;
    v7 = v287;
    v14 = v286;
    v19 = v285;
    v21 = v284;
    v20 = v283;
    v26 = v425;
    v25 = v442;
    v27 = v282;
    v33 = v393;
    v31 = v408;
    goto LABEL_90;
  }
  v35 = (unsigned __int8 *)(v2 + v34);
  result[2] = v35 + 1;
  if (!v2)
  {
    v77 = v1;
    goto LABEL_90;
  }
  v36 = *v35;
  if (v36 < 2)
  {
    v37 = 0;
    v38 = 1;
    goto LABEL_28;
  }
LABEL_92:
  *result = 0;
  result[1] = 0;
  v79 = result[3];
  if (!v79)
  {
    v2 = 0;
    v38 = 0;
    v1 = 0;
    v37 = 1;
    goto LABEL_94;
  }
  v377 = v36;
  v390 = v33;
  v404 = v31;
  v419 = v26;
  v436 = v25;
  v343 = v27;
  v161 = v20;
  v326 = v21;
  v162 = v19;
  v163 = v14;
  v164 = v7;
  v165 = v15;
  v166 = v13;
  v167 = v9;
  v168 = result;
  if (!v1)
  {
    v2 = 0;
    v38 = 0;
    v37 = 1;
    v36 = v377;
LABEL_94:
    *result = 0;
    result[1] = 0;
    v80 = result[3];
    if (v80)
    {
      v355 = v37;
      v366 = v38;
      v378 = v36;
      v391 = v33;
      v405 = v31;
      v420 = v26;
      v437 = v25;
      v169 = v27;
      v170 = v20;
      v171 = v21;
      v172 = v19;
      v173 = v14;
      v174 = v7;
      v175 = v15;
      v176 = v13;
      v177 = v9;
      v178 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 16))(v80, v2);
        result = v178;
        v81 = *v178;
        v1 = v178[1];
      }
      else
      {
        v81 = 0;
      }
      v9 = v177;
      v13 = v176;
      v15 = v175;
      v7 = v174;
      v14 = v173;
      v19 = v172;
      v21 = v171;
      v20 = v170;
      v26 = v420;
      v25 = v437;
      v27 = v169;
      v33 = v391;
      v31 = v405;
      v36 = v378;
      v37 = v355;
      v38 = v366;
    }
    else
    {
      v81 = 0;
      v1 = 0;
    }
    goto LABEL_96;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v2);
  v38 = 0;
  result = v168;
  v2 = *v168;
  v1 = v168[1];
  v37 = 1;
  v9 = v167;
  v13 = v166;
  v15 = v165;
  v7 = v164;
  v14 = v163;
  v19 = v162;
  v21 = v326;
  v20 = v161;
  v26 = v419;
  v25 = v436;
  v27 = v343;
  v33 = v390;
  v31 = v404;
  v36 = v377;
LABEL_28:
  if (v1 <= result[2] - v2)
    goto LABEL_94;
  v39 = (unsigned __int8 *)result[2];
  result[2] = v39 + 1;
  if (!v2)
  {
    v81 = 0;
LABEL_96:
    *result = 0;
    result[1] = 0;
    v82 = result[3];
    if (v82)
    {
      v354 = v37;
      v365 = v38;
      v376 = v36;
      v389 = v33;
      v403 = v31;
      v418 = v26;
      v435 = v25;
      v151 = v27;
      v152 = v20;
      v153 = v21;
      v154 = v19;
      v155 = v14;
      v156 = v7;
      v157 = v15;
      v158 = v13;
      v159 = v9;
      v160 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v81);
        result = v160;
        v2 = *v160;
        v1 = v160[1];
      }
      else
      {
        v2 = 0;
      }
      v9 = v159;
      v13 = v158;
      v15 = v157;
      v7 = v156;
      v14 = v155;
      v19 = v154;
      v21 = v153;
      v20 = v152;
      v26 = v418;
      v25 = v435;
      v27 = v151;
      v33 = v389;
      v31 = v403;
      v36 = v376;
      v37 = v354;
      v38 = v365;
    }
    else
    {
      v2 = 0;
      v1 = 0;
    }
    goto LABEL_98;
  }
  v40 = *v39;
  if (v40 < 3)
  {
    v41 = v40 | 0x100;
    goto LABEL_32;
  }
LABEL_98:
  *result = 0;
  result[1] = 0;
  v83 = result[3];
  if (!v83)
  {
    v2 = 0;
    v41 = 0;
    v1 = 0;
    goto LABEL_100;
  }
  v352 = v37;
  v363 = v38;
  v374 = v36;
  v387 = v33;
  v401 = v31;
  v416 = v26;
  v433 = v25;
  v342 = v27;
  v132 = v20;
  v133 = v21;
  v134 = v19;
  v135 = v14;
  v136 = v7;
  v137 = v15;
  v138 = v13;
  v139 = v9;
  v140 = result;
  if (!v1)
  {
    v2 = 0;
    v41 = 0;
    v37 = v352;
    v36 = v374;
    v38 = v363;
LABEL_100:
    *result = 0;
    result[1] = 0;
    v84 = result[3];
    if (v84)
    {
      v334 = v41;
      v353 = v37;
      v364 = v38;
      v375 = v36;
      v388 = v33;
      v402 = v31;
      v417 = v26;
      v434 = v25;
      v141 = v27;
      v142 = v20;
      v143 = v21;
      v144 = v19;
      v145 = v14;
      v146 = v7;
      v147 = v15;
      v148 = v13;
      v149 = v9;
      v150 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v2);
        result = v150;
        v85 = *v150;
        v1 = v150[1];
      }
      else
      {
        v85 = 0;
      }
      v9 = v149;
      v13 = v148;
      v15 = v147;
      v7 = v146;
      v14 = v145;
      v19 = v144;
      v21 = v143;
      v20 = v142;
      v26 = v417;
      v25 = v434;
      v27 = v141;
      v33 = v388;
      v31 = v402;
      v36 = v375;
      v37 = v353;
      v38 = v364;
      v41 = v334;
    }
    else
    {
      v85 = 0;
      v1 = 0;
    }
    goto LABEL_102;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v2);
  v41 = 0;
  result = v140;
  v2 = *v140;
  v1 = v140[1];
  v9 = v139;
  v13 = v138;
  v15 = v137;
  v7 = v136;
  v14 = v135;
  v19 = v134;
  v21 = v133;
  v20 = v132;
  v26 = v416;
  v25 = v433;
  v27 = v342;
  v37 = v352;
  v33 = v387;
  v31 = v401;
  v36 = v374;
  v38 = v363;
LABEL_32:
  if (v1 <= result[2] - v2)
    goto LABEL_100;
  v42 = (unsigned __int8 *)result[2];
  v43 = v42 + 1;
  result[2] = v42 + 1;
  if (!v2)
  {
    v85 = 0;
LABEL_102:
    *result = 0;
    result[1] = 0;
    v86 = result[3];
    if (v86)
    {
      v333 = v41;
      v341 = v27;
      v351 = v37;
      v362 = v38;
      v373 = v36;
      v386 = v33;
      v400 = v31;
      v415 = v26;
      v432 = v25;
      v123 = v20;
      v124 = v21;
      v125 = v19;
      v126 = v14;
      v127 = v7;
      v128 = v15;
      v129 = v13;
      v130 = v9;
      v131 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v85);
        v44 = 0;
        result = v131;
        v2 = *v131;
        v1 = v131[1];
      }
      else
      {
        v2 = 0;
        v44 = 0;
      }
      v9 = v130;
      v13 = v129;
      v15 = v128;
      v7 = v127;
      v14 = v126;
      v19 = v125;
      v21 = v124;
      v20 = v123;
      v26 = v415;
      v25 = v432;
      v27 = v341;
      v37 = v351;
      v33 = v386;
      v31 = v400;
      v36 = v373;
      v38 = v362;
      v41 = v333;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v44 = 0;
    }
    goto LABEL_104;
  }
  v44 = *v42;
  if (v44 < 2)
  {
    v45 = 0;
    v46 = 1;
    goto LABEL_36;
  }
LABEL_104:
  *result = 0;
  result[1] = 0;
  v87 = result[3];
  if (!v87)
  {
    v46 = 0;
    v2 = 0;
    v45 = 1;
    goto LABEL_106;
  }
  v332 = v41;
  v340 = v27;
  v350 = v37;
  v361 = v38;
  v372 = v36;
  v379 = v32;
  v385 = v33;
  v399 = v31;
  v414 = v26;
  v431 = v25;
  v319 = v20;
  v325 = v21;
  v116 = v19;
  v117 = v14;
  v118 = v7;
  v119 = v15;
  v120 = v13;
  v121 = v9;
  v122 = result;
  if (!v1)
  {
    v46 = 0;
    v87 = 0;
    v2 = 0;
    v45 = 1;
LABEL_201:
    v20 = v319;
    v21 = v325;
    v26 = v414;
    v25 = v431;
    v27 = v340;
    v37 = v350;
    v33 = v385;
    v31 = v399;
    v36 = v372;
    v32 = v379;
    v38 = v361;
    v41 = v332;
    goto LABEL_106;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v2);
  v46 = 0;
  result = v122;
  v2 = *v122;
  v1 = v122[1];
  v45 = 1;
  v43 = (unsigned __int8 *)v122[2];
  v9 = v121;
  v13 = v120;
  v15 = v119;
  v7 = v118;
  v14 = v117;
  v19 = v116;
  v20 = v319;
  v21 = v325;
  v26 = v414;
  v25 = v431;
  v27 = v340;
  v37 = v350;
  v33 = v385;
  v31 = v399;
  v36 = v372;
  v38 = v361;
  v41 = v332;
LABEL_36:
  v47 = &v43[-v2];
  if (v1 <= (unint64_t)v47)
  {
    v332 = v41;
    v340 = v27;
    v350 = v37;
    v361 = v38;
    v372 = v36;
    v379 = v32;
    v385 = v33;
    v399 = v31;
    v414 = v26;
    v431 = v25;
    v319 = v20;
    v325 = v21;
    v293 = v19;
    v294 = v14;
    v295 = v7;
    v296 = v15;
    v297 = v13;
    v298 = v9;
    v87 = 0;
    v299 = result[3];
    *result = 0;
    result[1] = 0;
    v300 = result;
    if (v299 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v299 + 16))(v299);
      result = v300;
      v2 = *v300;
      v87 = v300[1];
    }
    else
    {
      v2 = 0;
    }
    v9 = v298;
    v13 = v297;
    v15 = v296;
    v7 = v295;
    v14 = v294;
    v19 = v293;
    goto LABEL_201;
  }
  v48 = &v47[v2];
  result[2] = v48 + 1;
  if (!v2)
  {
    v87 = v1;
LABEL_106:
    *result = 0;
    result[1] = 0;
    v88 = result[3];
    if (v88)
    {
      v331 = v41;
      v339 = v27;
      v349 = v37;
      v360 = v38;
      v371 = v36;
      v384 = v33;
      v398 = v31;
      v413 = v26;
      v430 = v25;
      v318 = v20;
      v324 = v21;
      v110 = v19;
      v305 = v14;
      v111 = v7;
      v112 = v15;
      v113 = v13;
      v114 = v9;
      v115 = result;
      if (v87)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v88 + 16))(v88, v2, v87);
        result = v115;
        v2 = *v115;
        v1 = v115[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v9 = v114;
      v13 = v113;
      v15 = v112;
      v7 = v111;
      v14 = v305;
      v19 = v110;
      v20 = v318;
      v21 = v324;
      v26 = v413;
      v25 = v430;
      v27 = v339;
      v37 = v349;
      v33 = v384;
      v31 = v398;
      v36 = v371;
      v38 = v360;
      v41 = v331;
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
    goto LABEL_108;
  }
  if (*v48 < 2u)
  {
    v49 = 0;
    goto LABEL_40;
  }
LABEL_108:
  *result = 0;
  result[1] = 0;
  v89 = result[3];
  if (!v89)
  {
    v2 = 0;
    v1 = 0;
    v49 = 1;
    goto LABEL_110;
  }
  v329 = v41;
  v337 = v27;
  v347 = v37;
  v358 = v38;
  v369 = v36;
  v382 = v33;
  v396 = v31;
  v411 = v26;
  v428 = v25;
  v316 = v20;
  v322 = v21;
  v308 = v15;
  v312 = v19;
  v303 = v14;
  v102 = v7;
  v103 = v13;
  v104 = v9;
  v105 = result;
  if (!v1)
  {
    v2 = 0;
    v49 = 1;
    v41 = v329;
    v37 = v347;
    v36 = v369;
    v38 = v358;
LABEL_110:
    *result = 0;
    result[1] = 0;
    v90 = result[3];
    if (v90)
    {
      v330 = v41;
      v338 = v27;
      v348 = v37;
      v359 = v38;
      v370 = v36;
      v383 = v33;
      v397 = v31;
      v412 = v26;
      v429 = v25;
      v317 = v20;
      v323 = v21;
      v309 = v15;
      v313 = v19;
      v304 = v14;
      v106 = v7;
      v107 = v13;
      v108 = v9;
      v109 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, v2);
        result = v109;
        v91 = *v109;
        v1 = v109[1];
      }
      else
      {
        v91 = 0;
      }
      v9 = v108;
      v13 = v107;
      v14 = v304;
      v15 = v309;
      v7 = v106;
      v19 = v313;
      v20 = v317;
      v21 = v323;
      v41 = v330;
      v26 = v412;
      v25 = v429;
      v27 = v338;
      v37 = v348;
      v33 = v383;
      v31 = v397;
      v36 = v370;
      v38 = v359;
    }
    else
    {
      v91 = 0;
      v1 = 0;
    }
    goto LABEL_112;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v2);
  result = v105;
  v2 = *v105;
  v1 = v105[1];
  v49 = 1;
  v9 = v104;
  v13 = v103;
  v14 = v303;
  v15 = v308;
  v7 = v102;
  v19 = v312;
  v20 = v316;
  v21 = v322;
  v41 = v329;
  v26 = v411;
  v25 = v428;
  v27 = v337;
  v37 = v347;
  v33 = v382;
  v31 = v396;
  v36 = v369;
  v38 = v358;
LABEL_40:
  if (v1 <= result[2] - v2)
    goto LABEL_110;
  v50 = (unsigned __int8 *)result[2];
  result[2] = v50 + 1;
  if (!v2)
  {
    v91 = 0;
LABEL_112:
    *result = 0;
    result[1] = 0;
    v92 = result[3];
    if (v92)
    {
      v328 = v41;
      v336 = v27;
      v346 = v37;
      v357 = v38;
      v368 = v36;
      v381 = v33;
      v395 = v31;
      v410 = v26;
      v427 = v25;
      v315 = v20;
      v321 = v21;
      v307 = v15;
      v311 = v19;
      v302 = v14;
      v98 = v7;
      v99 = v13;
      v100 = v9;
      v101 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v91);
        result = v101;
        v2 = *v101;
        v1 = v101[1];
      }
      else
      {
        v2 = 0;
      }
      v9 = v100;
      v13 = v99;
      v14 = v302;
      v15 = v307;
      v7 = v98;
      v19 = v311;
      v20 = v315;
      v21 = v321;
      v41 = v328;
      v26 = v410;
      v25 = v427;
      v27 = v336;
      v37 = v346;
      v33 = v381;
      v31 = v395;
      v36 = v368;
      v38 = v357;
    }
    else
    {
      v2 = 0;
      v1 = 0;
    }
    goto LABEL_114;
  }
  v51 = *v50;
  if (v51 <= 3)
  {
    if ((v7 & 1) != 0)
      goto LABEL_243;
    v52 = v51 | 0x100;
LABEL_45:
    if (!v14 && !v20 && !v26 && !v32 && !v37 && v41 > 0xFF && !v45 && !v49 && v52 > 0xFF)
      goto LABEL_54;
LABEL_243:
    __break(1u);
    return result;
  }
LABEL_114:
  *result = 0;
  result[1] = 0;
  v93 = result[3];
  if (v93)
  {
    v327 = v41;
    v335 = v27;
    v345 = v37;
    v356 = v38;
    v367 = v36;
    v380 = v33;
    v394 = v31;
    v409 = v26;
    v426 = v25;
    v314 = v20;
    v320 = v21;
    v306 = v15;
    v310 = v19;
    v301 = v7;
    v94 = v13;
    if (v1)
    {
      v95 = v14;
      v96 = v9;
      v97 = result;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v2);
      if (*v97)
      {
        v9 = v96;
        v13 = v94;
        v15 = v306;
        v19 = v310;
        v14 = v95;
        v20 = v314;
        v21 = v320;
        v26 = v409;
        v25 = v426;
        v27 = v335;
        v37 = v345;
        v33 = v380;
        v31 = v394;
        v36 = v367;
        v38 = v356;
        v41 = v327;
        v52 = v301;
        if (v301)
          goto LABEL_243;
        goto LABEL_45;
      }
    }
    v9 = 0;
    v13 = v94;
    v15 = v306;
    v19 = v310;
    v21 = v320;
    LOBYTE(v41) = v327;
    v25 = v426;
    v27 = v335;
    v33 = v380;
    v31 = v394;
    v38 = v356;
    v36 = v367;
  }
  else
  {
    v9 = 0;
  }
LABEL_54:
  v53 = v19 != 0;
  v54 = v13 != 0;
  v55 = 0x100000000000000;
  if ((v46 & (v44 != 0)) == 0)
    v55 = 0;
  v56 = v55 | ((unint64_t)v41 << 48);
  v57 = 0x10000000000;
  if ((v38 & (v36 != 0)) == 0)
    v57 = 0;
  v58 = 0x100000000;
  if ((v33 & (v31 != 0)) == 0)
    v58 = 0;
  v59 = v57 | v58;
  v60 = 0x1000000;
  if ((v27 & (v25 != 0)) == 0)
    v60 = 0;
  v61 = v56 | v59 | v60;
  v62 = (v21 & v53) == 0;
  v63 = 0x10000;
  if (v62)
    v63 = 0;
  v62 = (v15 & v54) == 0;
  v64 = 256;
  if (v62)
    v64 = 0;
  return (_QWORD *)(v9 | v63 | v64 | v61);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::StepsTimingFunction const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;

  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(unsigned __int16 *)(a2 + 16);
  v6 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v5 > 0xFF)
  {
    *v6 = 1;
    *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  }
  else
  {
    *v6 = 0;
  }
  return a1;
}

char *IPC::ArgumentCoder<WebCore::TransformOperation,void>::encode(char *this, uint64_t a2)
{
  IPC::Encoder *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = (IPC::Encoder *)this;
  v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 <= 0x12)
  {
    if (((1 << v4) & 0x6007) != 0)
    {
      *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 1;
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v9;
      v10 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v10;
      v8 = *(_QWORD *)(a2 + 32);
      goto LABEL_7;
    }
    if (((1 << v4) & 0x18038) != 0)
    {
      *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 0;
      LODWORD(v18) = 0;
      BYTE6(v18) = 0;
      WORD2(v18) = *(_WORD *)(a2 + 20);
      if (BYTE4(v18) - 2 >= 9)
      {
        if (BYTE4(v18) == 11)
        {
          LODWORD(v18) = *(_DWORD *)(a2 + 16);
          WebCore::Length::ref((WebCore::Length *)&v18);
        }
      }
      else
      {
        BYTE6(v18) = *(_BYTE *)(a2 + 22);
        LODWORD(v18) = *(_DWORD *)(a2 + 16);
      }
      IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)&v18);
      if (BYTE4(v18) == 11)
        WebCore::Length::deref((WebCore::Length *)&v18);
      LODWORD(v18) = 0;
      BYTE6(v18) = 0;
      WORD2(v18) = *(_WORD *)(a2 + 28);
      if (BYTE4(v18) - 2 >= 9)
      {
        if (BYTE4(v18) == 11)
        {
          LODWORD(v18) = *(_DWORD *)(a2 + 24);
          WebCore::Length::ref((WebCore::Length *)&v18);
        }
      }
      else
      {
        BYTE6(v18) = *(_BYTE *)(a2 + 30);
        LODWORD(v18) = *(_DWORD *)(a2 + 24);
      }
      IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)&v18);
      if (BYTE4(v18) == 11)
        WebCore::Length::deref((WebCore::Length *)&v18);
      LODWORD(v18) = 0;
      BYTE6(v18) = 0;
      WORD2(v18) = *(_WORD *)(a2 + 36);
      if (BYTE4(v18) - 2 >= 9)
      {
        if (BYTE4(v18) == 11)
        {
          LODWORD(v18) = *(_DWORD *)(a2 + 32);
          WebCore::Length::ref((WebCore::Length *)&v18);
        }
      }
      else
      {
        BYTE6(v18) = *(_BYTE *)(a2 + 38);
        LODWORD(v18) = *(_DWORD *)(a2 + 32);
      }
      IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)&v18);
      if (BYTE4(v18) == 11)
        WebCore::Length::deref((WebCore::Length *)&v18);
      goto LABEL_28;
    }
    if (((1 << v4) & 0x601C0) != 0)
    {
      *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 2;
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v5;
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v6;
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v7;
      v8 = *(_QWORD *)(a2 + 40);
LABEL_7:
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v8;
LABEL_28:
      v12 = *(_BYTE *)(a2 + 12);
      this = IPC::Encoder::grow(v3, 1uLL, 1);
      *this = v12;
      return this;
    }
  }
  if (v4 - 9 <= 2)
  {
    *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 3;
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v11;
    v8 = *(_QWORD *)(a2 + 24);
    goto LABEL_7;
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0xC:
      *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 4;
      v13 = *(_OWORD *)(a2 + 32);
      v18 = *(_OWORD *)(a2 + 16);
      v19 = 0uLL;
      v20 = v13;
      v21 = 0uLL;
      v22 = xmmword_1978CE4D0;
      v23 = unk_1978CE4E0;
      v24 = *(_OWORD *)(a2 + 48);
      v25 = xmmword_1978CE350;
      return IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(v3, (uint64_t *)&v18);
    case 0x13:
      *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 5;
      v14 = *(_OWORD *)(a2 + 96);
      v22 = *(_OWORD *)(a2 + 80);
      v23 = v14;
      v15 = *(_OWORD *)(a2 + 128);
      v24 = *(_OWORD *)(a2 + 112);
      v25 = v15;
      v16 = *(_OWORD *)(a2 + 32);
      v18 = *(_OWORD *)(a2 + 16);
      v19 = v16;
      v17 = *(_OWORD *)(a2 + 64);
      v20 = *(_OWORD *)(a2 + 48);
      v21 = v17;
      return IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(v3, (uint64_t *)&v18);
    case 0x14:
      *IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1) = 6;
      LOBYTE(v18) = 0;
      BYTE8(v18) = 0;
      if (*(_BYTE *)(a2 + 24))
      {
        LODWORD(v18) = 0;
        BYTE6(v18) = 0;
        WORD2(v18) = *(_WORD *)(a2 + 20);
        if (BYTE4(v18) - 2 >= 9)
        {
          if (BYTE4(v18) == 11)
          {
            LODWORD(v18) = *(_DWORD *)(a2 + 16);
            WebCore::Length::ref((WebCore::Length *)&v18);
          }
        }
        else
        {
          BYTE6(v18) = *(_BYTE *)(a2 + 22);
          LODWORD(v18) = *(_DWORD *)(a2 + 16);
        }
        BYTE8(v18) = 1;
        *IPC::Encoder::grow(v3, 1uLL, 1) = 1;
        if (!BYTE8(v18))
        {
          this = (char *)std::__throw_bad_optional_access[abi:sn180100]();
          __break(1u);
          return this;
        }
        this = IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)&v18);
      }
      else
      {
        this = IPC::Encoder::grow(v3, 1uLL, 1);
        *this = 0;
      }
      if (BYTE8(v18))
      {
        if (BYTE4(v18) == 11)
          this = (char *)WebCore::Length::deref((WebCore::Length *)&v18);
      }
      break;
    case 0x15:
      this = IPC::Encoder::grow((IPC::Encoder *)this, 1uLL, 1);
      *this = 7;
      return this;
    default:
      return this;
  }
  return this;
}

void sub_196E58368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12)
  {
    if (a10 == 11)
      WebCore::Length::deref((WebCore::Length *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::TransformOperation,void>::decode(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  int v27;
  unsigned __int16 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned __int16 v36;
  unint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[8];
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  char v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;

  v4 = result;
  v5 = a2[2];
  v6 = *a2;
  v7 = a2[1];
  v8 = v5 - v6;
  if (v7 <= v8)
  {
    v43 = 0;
    v44 = 0;
    *a2 = 0;
    a2[1] = 0;
    v45 = a2[3];
    if (v45)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
        v44 = *a2;
        v43 = a2[1];
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
    }
    goto LABEL_122;
  }
  v9 = (unsigned __int8 *)(v6 + v8);
  v10 = v6 + v8 + 1;
  a2[2] = v10;
  if (!v6)
  {
    v43 = v7;
    v44 = 0;
LABEL_122:
    v7 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v46 = a2[3];
    if (v46)
    {
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
        v6 = *a2;
        v7 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
    goto LABEL_123;
  }
  v11 = *v9;
  if (v11 < 8)
  {
    switch(v11)
    {
      case 0u:
        IPC::Decoder::decode<WebCore::Length>((uint64_t)&v110, a2);
        IPC::Decoder::decode<WebCore::Length>((uint64_t)&v114, a2);
        IPC::Decoder::decode<WebCore::Length>((uint64_t)v108, a2);
        result = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        v12 = *a2;
        if (*a2)
        {
          v12 = (unsigned __int16)result;
          if ((unsigned __int16)result <= 0xFFu)
            goto LABEL_194;
          v12 = 0;
          LODWORD(v2) = 1;
          if (result <= 0x10u && ((1 << result) & 0x18038) != 0)
          {
            v12 = v111;
            if (!v111)
              goto LABEL_194;
            v12 = v115;
            if (!v115)
              goto LABEL_194;
            v12 = v109;
            if (!v109)
              goto LABEL_194;
            result = WebCore::TranslateTransformOperation::create();
            LODWORD(v2) = 0;
            v12 = v107;
          }
        }
        else
        {
          LODWORD(v2) = 1;
        }
        if (v109 && v108[4] == 11)
        {
          v87 = v12;
          result = WebCore::Length::deref((WebCore::Length *)v108);
          v12 = v87;
        }
        if (v115 && BYTE4(v114) == 11)
        {
          v88 = v12;
          result = WebCore::Length::deref((WebCore::Length *)&v114);
          v12 = v88;
        }
        if (v111 && BYTE4(v110) == 11)
        {
          v89 = v12;
          result = WebCore::Length::deref((WebCore::Length *)&v110);
          v12 = v89;
          if (!(_DWORD)v2)
            goto LABEL_22;
        }
        else if (!(_DWORD)v2)
        {
LABEL_22:
          if (!*a2)
            goto LABEL_195;
          *(_QWORD *)v4 = v12;
          goto LABEL_106;
        }
        v90 = v12;
        v91 = *a2;
        v92 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v93 = a2[3];
        if (v93 && v92)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v91);
        v12 = v90;
        if (!*a2)
          goto LABEL_195;
        goto LABEL_194;
      case 1u:
        v29 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        v30 = a2[1];
        LODWORD(v2) = v30 < v29 || v30 - v29 < 8;
        if ((_DWORD)v2 != 1)
        {
          a2[2] = v6 + v29 + 8;
          goto LABEL_83;
        }
        *a2 = 0;
        a2[1] = 0;
        v51 = a2[3];
        if (!v51)
        {
          v30 = 0;
LABEL_142:
          v6 = 0;
          goto LABEL_83;
        }
        if (!v30)
          goto LABEL_142;
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
        v30 = 0;
        v101 = *a2;
        v102 = a2[1];
        v103 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v103 && v102)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v101, v102);
          v6 = *a2;
          v30 = a2[1];
        }
        else
        {
          v6 = 0;
        }
LABEL_83:
        v32 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v30 < v32 || v30 - v32 <= 7)
        {
          v75 = 0;
          v76 = 0;
          *a2 = 0;
          a2[1] = 0;
          v77 = a2[3];
          if (v77)
          {
            if (v30)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
              v76 = *a2;
              v75 = a2[1];
            }
            else
            {
              v75 = 0;
              v76 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            v33 = 0;
            goto LABEL_87;
          }
          v75 = v30;
          v76 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        v78 = a2[3];
        if (v78 && v75)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76, v75);
          v6 = *a2;
          v30 = a2[1];
        }
        else
        {
          v30 = 0;
          v6 = 0;
        }
        v33 = 1;
LABEL_87:
        v34 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v30 < v34 || v30 - v34 <= 7)
        {
          v79 = 0;
          v80 = 0;
          *a2 = 0;
          a2[1] = 0;
          v81 = a2[3];
          if (v81)
          {
            if (v30)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
              v80 = *a2;
              v79 = a2[1];
            }
            else
            {
              v79 = 0;
              v80 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            v35 = 0;
            goto LABEL_91;
          }
          v79 = v30;
          v80 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        v82 = a2[3];
        if (v82 && v79)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v80, v79);
        v35 = 1;
LABEL_91:
        v36 = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        if (!*a2)
          goto LABEL_116;
        v12 = v36;
        if (v36 <= 0xFFu)
          goto LABEL_194;
        if (v36 > 0xEu)
          goto LABEL_116;
        v12 = (1 << v36);
        if ((v12 & 0x6007) == 0)
          goto LABEL_116;
        if ((_DWORD)v2 || v33 || v35)
          goto LABEL_194;
        WebCore::ScaleTransformOperation::create();
        goto LABEL_99;
      case 2u:
        v13 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        v14 = a2[1];
        LODWORD(v2) = v14 < v13 || v14 - v13 < 8;
        if ((_DWORD)v2 != 1)
        {
          a2[2] = v6 + v13 + 8;
          goto LABEL_35;
        }
        *a2 = 0;
        a2[1] = 0;
        v49 = a2[3];
        if (!v49)
        {
          v14 = 0;
LABEL_136:
          v6 = 0;
          goto LABEL_35;
        }
        if (!v14)
          goto LABEL_136;
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        v14 = 0;
        v95 = *a2;
        v96 = a2[1];
        v97 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v97 && v96)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v95, v96);
          v6 = *a2;
          v14 = a2[1];
        }
        else
        {
          v6 = 0;
        }
LABEL_35:
        v16 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v14 < v16 || v14 - v16 <= 7)
        {
          v59 = 0;
          v60 = 0;
          *a2 = 0;
          a2[1] = 0;
          v61 = a2[3];
          if (v61)
          {
            if (v14)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
              v60 = *a2;
              v59 = a2[1];
            }
            else
            {
              v59 = 0;
              v60 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            v17 = 0;
            goto LABEL_39;
          }
          v59 = v14;
          v60 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        v62 = a2[3];
        if (v62 && v59)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v60, v59);
          v6 = *a2;
          v14 = a2[1];
        }
        else
        {
          v14 = 0;
          v6 = 0;
        }
        v17 = 1;
LABEL_39:
        v18 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v14 < v18 || v14 - v18 <= 7)
        {
          v63 = 0;
          v64 = 0;
          *a2 = 0;
          a2[1] = 0;
          v65 = a2[3];
          if (v65)
          {
            if (v14)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
              v64 = *a2;
              v63 = a2[1];
            }
            else
            {
              v63 = 0;
              v64 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            v19 = 0;
            goto LABEL_43;
          }
          v63 = v14;
          v64 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        v66 = a2[3];
        if (v66 && v63)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v64, v63);
          v6 = *a2;
          v14 = a2[1];
        }
        else
        {
          v14 = 0;
          v6 = 0;
        }
        v19 = 1;
LABEL_43:
        v20 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v14 < v20 || v14 - v20 <= 7)
        {
          v67 = 0;
          v68 = 0;
          *a2 = 0;
          a2[1] = 0;
          v69 = a2[3];
          if (v69)
          {
            if (v14)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
              v68 = *a2;
              v67 = a2[1];
            }
            else
            {
              v67 = 0;
              v68 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            v21 = 0;
            goto LABEL_47;
          }
          v67 = v14;
          v68 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        v70 = a2[3];
        if (v70 && v67)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v68, v67);
        v21 = 1;
LABEL_47:
        v22 = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        if (!*a2)
          goto LABEL_116;
        v12 = v22;
        if (v22 <= 0xFFu)
          goto LABEL_194;
        if (v22 > 0x12u)
          goto LABEL_116;
        v12 = (1 << v22);
        if ((v12 & 0x601C0) == 0)
          goto LABEL_116;
        if ((_DWORD)v2 || v17 || v19 || v21)
          goto LABEL_194;
        WebCore::RotateTransformOperation::create();
        goto LABEL_99;
      case 3u:
        v23 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        v24 = a2[1];
        LODWORD(v2) = v24 < v23 || v24 - v23 < 8;
        if ((_DWORD)v2 != 1)
        {
          a2[2] = v6 + v23 + 8;
          goto LABEL_64;
        }
        *a2 = 0;
        a2[1] = 0;
        v50 = a2[3];
        if (!v50)
        {
          v24 = 0;
LABEL_139:
          v6 = 0;
          goto LABEL_64;
        }
        if (!v24)
          goto LABEL_139;
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
        v24 = 0;
        v98 = *a2;
        v99 = a2[1];
        v100 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v100 && v99)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v98, v99);
          v6 = *a2;
          v24 = a2[1];
        }
        else
        {
          v6 = 0;
        }
LABEL_64:
        v26 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v24 < v26 || v24 - v26 <= 7)
        {
          v71 = 0;
          v72 = 0;
          *a2 = 0;
          a2[1] = 0;
          v73 = a2[3];
          if (v73)
          {
            if (v24)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
              v72 = *a2;
              v71 = a2[1];
            }
            else
            {
              v71 = 0;
              v72 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            v27 = 0;
            goto LABEL_68;
          }
          v71 = v24;
          v72 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        v74 = a2[3];
        if (v74 && v71)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v72, v71);
        v27 = 1;
LABEL_68:
        v28 = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        if (!*a2)
          goto LABEL_116;
        v12 = v28;
        if (v28 <= 0xFFu)
          goto LABEL_194;
        v12 = (v28 - 9);
        if (v12 > 2)
        {
LABEL_116:
          v42 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          result = a2[3];
          if (result)
          {
            if (v42)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              v12 = *a2;
              if (*a2)
                goto LABEL_194;
            }
          }
          goto LABEL_117;
        }
        if ((_DWORD)v2 || v27)
          goto LABEL_194;
        WebCore::SkewTransformOperation::create();
LABEL_99:
        result = v110;
LABEL_104:
        if (*a2)
        {
          *(_QWORD *)v4 = result;
          goto LABEL_106;
        }
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 8) = 0;
        if (result)
          goto LABEL_127;
        return result;
      case 4u:
        IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)&v110, (uint64_t)a2);
        if (!*a2)
          goto LABEL_116;
        v12 = v113;
        if (!v113)
          goto LABEL_194;
        WebCore::MatrixTransformOperation::create((WebCore::MatrixTransformOperation *)&v110, (const WebCore::TransformationMatrix *)*a2);
        goto LABEL_103;
      case 5u:
        IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)&v110, (uint64_t)a2);
        if (!*a2)
          goto LABEL_116;
        v12 = v113;
        if (!v113)
          goto LABEL_194;
        WebCore::Matrix3DTransformOperation::create((WebCore::Matrix3DTransformOperation *)&v110, (const WebCore::TransformationMatrix *)*a2);
LABEL_103:
        result = v114;
        goto LABEL_104;
      case 6u:
        v37 = a2[1];
        if (v37 <= a2[2] - v6)
        {
          v52 = 0;
          v53 = 0;
          *a2 = 0;
          a2[1] = 0;
          v54 = a2[3];
          if (v54)
          {
            if (v37)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
              v52 = 0;
              v104 = *a2;
              v105 = a2[1];
              v106 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              v53 = 0;
              if (v106 && v105)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104, v105);
                v53 = *a2;
                v52 = a2[1];
              }
            }
            else
            {
              v52 = 0;
              v53 = 0;
            }
          }
        }
        else
        {
          v38 = (unsigned __int8 *)a2[2];
          a2[2] = (uint64_t)(v38 + 1);
          v12 = *v38;
          if (v12 < 2)
          {
            if (!(_DWORD)v12)
            {
              v39 = 0;
              v40 = 0;
              LOBYTE(v110) = 0;
              v111 = 0;
              v41 = 1;
              v112 = 1;
              goto LABEL_147;
            }
            result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v114, a2);
            if (v115)
            {
              LODWORD(v110) = 0;
              BYTE4(v110) = BYTE4(v114);
              v12 = BYTE4(v114);
              *(_WORD *)((char *)&v110 + 5) = BYTE5(v114);
              if (BYTE4(v114) - 2 >= 9)
              {
                if (BYTE4(v114) != 11)
                  goto LABEL_120;
              }
              else
              {
                BYTE6(v110) = BYTE6(v114);
                if (BYTE6(v114))
                {
                  LODWORD(v110) = v114;
LABEL_120:
                  v40 = 0;
                  v39 = 1;
                  v111 = 1;
                  v112 = 1;
                  v41 = 1;
                  goto LABEL_147;
                }
              }
              LODWORD(v110) = v114;
              goto LABEL_120;
            }
LABEL_145:
            LOBYTE(v110) = 0;
            v112 = 0;
            v56 = *a2;
            v57 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            result = a2[3];
            if (result && v57)
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v56);
            v12 = 0;
            v39 = 0;
            v41 = 0;
            v40 = 1;
LABEL_147:
            v2 = *a2;
            if (*a2)
            {
              if (v40)
                goto LABEL_194;
              result = WebCore::PerspectiveTransformOperation::create();
              v58 = v114;
              v39 = v111;
              LODWORD(v12) = BYTE4(v110);
              if (v112)
                goto LABEL_150;
            }
            else
            {
              v58 = 0;
              if (v41)
              {
LABEL_150:
                if (v39 && (_DWORD)v12 == 11)
                {
                  v86 = v58;
                  result = WebCore::Length::deref((WebCore::Length *)&v110);
                  v58 = v86;
                }
              }
            }
            if (v2)
            {
              if (*a2)
              {
                *(_QWORD *)v4 = v58;
LABEL_106:
                *(_BYTE *)(v4 + 8) = 1;
                return result;
              }
              goto LABEL_184;
            }
            v83 = v58;
            v84 = *a2;
            v85 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            result = a2[3];
            if (result && v85)
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v84);
            v12 = *a2;
            v58 = v83;
            if (!*a2)
            {
LABEL_184:
              *(_BYTE *)v4 = 0;
              *(_BYTE *)(v4 + 8) = 0;
              if (!v2 || !v58)
                return result;
              result = v58;
              v47 = *(_DWORD *)(v58 + 8);
              goto LABEL_128;
            }
LABEL_194:
            __break(1u);
LABEL_195:
            *(_BYTE *)v4 = 0;
            *(_BYTE *)(v4 + 8) = 0;
            result = v12;
            if (v12)
              v94 = v2;
            else
              v94 = 1;
            if ((v94 & 1) != 0)
              return result;
LABEL_127:
            v47 = *(_DWORD *)(result + 8);
LABEL_128:
            v48 = v47 - 1;
            if (!v48)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            *(_DWORD *)(result + 8) = v48;
            return result;
          }
          v52 = v37;
          v53 = v6;
        }
        *a2 = 0;
        a2[1] = 0;
        v55 = a2[3];
        if (v55 && v52)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
        goto LABEL_145;
      case 7u:
        WebCore::IdentityTransformOperation::create((WebCore::IdentityTransformOperation *)result);
        goto LABEL_99;
      default:
        goto LABEL_117;
    }
  }
LABEL_123:
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v7)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
LABEL_117:
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

void sub_196E590D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, __int16 a15, char a16, char a17, __int16 a18, char a19, char a20,__int16 a21,char a22,char a23,__int16 a24,char a25,char a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a16 && a13 == 11)
    WebCore::Length::deref((WebCore::Length *)&a11);
  if (*(_BYTE *)(v29 - 104) && *(_BYTE *)(v29 - 108) == 11)
    WebCore::Length::deref((WebCore::Length *)(v29 - 112));
  if (a25)
  {
    if (a22 == 11)
      WebCore::Length::deref((WebCore::Length *)&a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _WORD v21[2];
  int v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;
  _DWORD v26[2];
  int v27;
  unsigned __int8 v28;
  char v29;
  unsigned __int8 v30;
  char v31;

  v21[0] = 0;
  IPC::Decoder::operator>><BOOL>(a2, v21);
  if (!HIBYTE(v21[0]))
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v27, a2);
    if (!*a2)
      goto LABEL_39;
    goto LABEL_38;
  }
  v4 = v21[0];
  result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v27, a2);
  if (!*a2)
  {
LABEL_39:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 20) = 0;
    v14 = 1;
    goto LABEL_28;
  }
  if (!v31)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  LOBYTE(v21[0]) = v4;
  v22 = 0;
  v25 = 0;
  v23 = v28;
  v24 = v29;
  if (v28 - 2 >= 9)
  {
    if (v28 != 11)
      goto LABEL_11;
    v6 = v27;
    v27 = 0;
  }
  else
  {
    v25 = v30;
    if (v30)
    {
      v22 = v27;
      goto LABEL_11;
    }
    v6 = v27;
  }
  v22 = v6;
LABEL_11:
  v28 = 0;
  memset(v26, 0, 7);
  result = WebCore::BasicShapeCenterCoordinate::updateComputedLength((WebCore::BasicShapeCenterCoordinate *)v21);
  *(_BYTE *)a1 = v21[0];
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  v7 = v23;
  *(_BYTE *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 9) = v24;
  if (v7 > 0xD)
    goto LABEL_20;
  v8 = 1 << v7;
  if ((v8 & 0x7FC) != 0)
  {
    v9 = v25;
    *(_BYTE *)(a1 + 10) = v25;
    if (v9)
    {
      *(_DWORD *)(a1 + 4) = v22;
      goto LABEL_20;
    }
    v10 = v22;
  }
  else
  {
    if ((v8 & 0x3003) != 0)
    {
      *(_DWORD *)(a1 + 4) = 0;
      goto LABEL_20;
    }
    v10 = v22;
    v22 = 0;
  }
  *(_DWORD *)(a1 + 4) = v10;
LABEL_20:
  v23 = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 18) = 0;
  v11 = LOBYTE(v26[1]);
  *(_WORD *)(a1 + 16) = v26[1];
  if (v11 <= 0xD)
  {
    v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      v13 = BYTE2(v26[1]);
      *(_BYTE *)(a1 + 18) = BYTE2(v26[1]);
      if (v13)
      {
        *(_DWORD *)(a1 + 12) = v26[0];
        goto LABEL_27;
      }
    }
    else if ((v12 & 0x3003) != 0)
    {
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_27;
    }
    *(_DWORD *)(a1 + 12) = v26[0];
  }
LABEL_27:
  v14 = 0;
  *(_BYTE *)(a1 + 20) = 1;
LABEL_28:
  if (v31 && v28 == 11)
  {
    result = WebCore::Length::deref((WebCore::Length *)&v27);
    if (!v14)
      return result;
  }
  else if (!v14)
  {
    return result;
  }
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v20)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  }
  return result;
}

void sub_196E593C8(_Unwind_Exception *a1)
{
  _BYTE *v1;

  std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::BasicShapeRadius>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  char v21;
  char v22;
  unsigned __int8 v23;

  result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v19, a2);
  v5 = a2[1];
  v6 = *a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v10 = *a2;
        v9 = a2[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
LABEL_19:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      goto LABEL_31;
    goto LABEL_20;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v9 = v5;
    v10 = 0;
    goto LABEL_19;
  }
  v9 = *v8;
  if (v9 >= 3)
    goto LABEL_20;
  v10 = v23;
  if (v23)
  {
    v11 = v20;
    v12 = v21;
    if (v20 - 2 >= 9)
    {
      if (v20 == 11)
      {
        v14 = v19;
        *(_DWORD *)a1 = 0;
        *(_BYTE *)(a1 + 6) = 0;
        *(_BYTE *)(a1 + 4) = 11;
        *(_BYTE *)(a1 + 5) = v12;
        goto LABEL_14;
      }
      v13 = 0;
      v14 = 0;
    }
    else
    {
      v13 = v22;
      v14 = v19;
    }
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 4) = v11;
    *(_BYTE *)(a1 + 5) = v12;
    if (v11 > 0xD)
    {
LABEL_15:
      *(_BYTE *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 12) = 1;
      return result;
    }
    if (((1 << v11) & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 6) = v13;
    }
    else
    {
      v14 = 0;
      if (((1 << v11) & 0x3003) == 0)
        goto LABEL_15;
    }
LABEL_14:
    *(_DWORD *)a1 = v14;
    goto LABEL_15;
  }
  while (1)
  {
    __break(1u);
LABEL_31:
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10, v9);
      v6 = *a2;
      v5 = a2[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (!v16)
      break;
    if (!v5)
      break;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v6);
    if (!*a2)
      break;
    v9 = v23;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 12) = 0;
  if (v23 && v20 == 11)
    WebCore::Length::deref((WebCore::Length *)&v19);
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v18)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

void sub_196E59630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, __int16 a14, char a15, char a16)
{
  if (a15)
  {
    if (a12 == 11)
      WebCore::Length::deref((WebCore::Length *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::LengthSize>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  char v21;
  char v22;
  char v23;
  int v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  char v28;

  IPC::Decoder::decode<WebCore::Length>((uint64_t)&v24, a2);
  result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v19, a2);
  v5 = *a2;
  if (*a2)
  {
    if (v28)
    {
      v6 = v25;
      if (v25 - 2 >= 9)
      {
        v7 = 0;
        if (v25 == 11)
        {
          v8 = v24;
          v24 = 0;
        }
        else
        {
          v8 = 0;
        }
      }
      else
      {
        v7 = v27;
        if (v27)
          v7 = 1;
        v8 = v24;
      }
      v9 = v26;
      v25 = 0;
      if (v23)
      {
        v10 = v20;
        if (v20 - 2 >= 9)
        {
          v11 = 0;
          if (v20 == 11)
          {
            v12 = v19;
            v19 = 0;
          }
          else
          {
            v12 = 0;
          }
        }
        else
        {
          v11 = v22;
          if (v22)
            v11 = 1;
          v12 = v19;
        }
        v13 = v21;
        v20 = 0;
        *(_DWORD *)a1 = 0;
        *(_BYTE *)(a1 + 6) = 0;
        *(_BYTE *)(a1 + 4) = v6;
        *(_BYTE *)(a1 + 5) = v9;
        if (v6 <= 0xD)
        {
          v14 = 1 << v6;
          if ((v14 & 0x7FC) != 0)
          {
            *(_BYTE *)(a1 + 6) = v7;
LABEL_15:
            *(_DWORD *)a1 = v8;
            goto LABEL_18;
          }
          if ((v14 & 0x3003) == 0)
            goto LABEL_15;
          *(_DWORD *)a1 = 0;
        }
LABEL_18:
        *(_DWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 14) = 0;
        *(_BYTE *)(a1 + 12) = v10;
        *(_BYTE *)(a1 + 13) = v13;
        if (v10 <= 0xD)
        {
          if (((1 << v10) & 0x7FC) != 0)
          {
            *(_BYTE *)(a1 + 14) = v11;
          }
          else if (((1 << v10) & 0x3003) != 0)
          {
            *(_DWORD *)(a1 + 8) = 0;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 8) = v12;
        }
LABEL_24:
        *(_BYTE *)(a1 + 16) = 1;
        goto LABEL_25;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v23 && v20 == 11)
  {
    v17 = v5;
    result = WebCore::Length::deref((WebCore::Length *)&v19);
    v5 = v17;
  }
LABEL_25:
  if (v28 && v25 == 11)
  {
    v18 = v5;
    result = WebCore::Length::deref((WebCore::Length *)&v24);
    if (v18)
      return result;
  }
  else if (v5)
  {
    return result;
  }
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

void sub_196E59884(_Unwind_Exception *a1)
{
  WebCore::Length *v1;

  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode(IPC::Encoder *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  if ((*(unsigned int (**)(WebCore::ByteArrayPixelBuffer *))(*(_QWORD *)a2 + 16))(a2))
  {
    *IPC::Encoder::grow(a1, 1uLL, 1) = 0;
    IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(a1, a2);
  }
}

_QWORD *IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode(WTF::StringImpl *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  _QWORD *result;
  unint64_t v5;

  result = (_QWORD *)(*(uint64_t (**)(WebCore::ByteArrayPixelBuffer *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a1 + 2);
    if (v5 >= *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)a1 + v5) = 0;
      *((_QWORD *)a1 + 2) = v5 + 1;
    }
    return IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(a1, a2);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::PixelBuffer,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  _DWORD *v5;
  _DWORD *v6;
  char v7;

  v4 = IPC::Decoder::decode<IPC::WebCore_PixelBuffer_Subclass>(a1);
  if (!*a1 || v4 < 0x100u || (_BYTE)v4)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  IPC::Decoder::decode<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>>(a1, &v6);
  if (*a1)
  {
    if (v7)
    {
      *(_QWORD *)a2 = v6;
      a2[8] = 1;
      return;
    }
    __break(1u);
LABEL_14:
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    return;
  }
  *a2 = 0;
  a2[8] = 0;
  if (v7)
  {
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (v5[2] != 1)
      {
        --v5[2];
        return;
      }
      goto LABEL_14;
    }
  }
}

uint64_t IPC::Decoder::decode<IPC::WebCore_PixelBuffer_Subclass>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<IPC::WebCore_PixelBuffer_Subclass,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::decode(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E59B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>>::~optional(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::optional<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>>::~optional(uint64_t a1)
{
  _QWORD *v1;
  _DWORD *v2;
  _QWORD *v4;

  v1 = (_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_DWORD **)a1;
    *v1 = 0;
    if (v2)
    {
      v4 = v1;
      if (v2[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
      else
        --v2[2];
      return v4;
    }
  }
  return v1;
}

char *IPC::ArgumentCoder<WebCore::TransformOperationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char *result;
  id v12;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  v4 = *(unsigned __int8 *)(a2 + 80);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    *v5 = 0;
    goto LABEL_5;
  }
  *v5 = 1;
  if (*(_BYTE *)(a2 + 80))
  {
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (int *)(a2 + 16));
    v6 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
    v7 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
    v8 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
    v9 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
LABEL_5:
    v10 = *(_BYTE *)(a2 + 84);
    result = IPC::Encoder::grow(a1, 1uLL, 1);
    *result = v10;
    return result;
  }
  v12 = std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)IPC::Decoder::decode<std::optional<WebCore::Path>>(v12);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::Path>>(_BYTE *a1, unint64_t *a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20[8];
  _BYTE v21[56];
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_15;
  }
  v8 = &v5[v7];
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_15:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_16;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v6)
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_23;
  }
  if (v9)
  {
    IPC::ArgumentCoder<WebCore::Path,void>::decode(a2, v5, v20);
    if (!v23)
    {
      v17 = *a2;
      v18 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (!result
        || !v18
        || (result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v17), !v23))
      {
LABEL_23:
        *a1 = 0;
        a1[80] = 0;
        goto LABEL_12;
      }
    }
    result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a1 + 8), (uint64_t)v21);
    a1[72] = 1;
    a1[80] = 1;
    if (v23 && v22 != -1)
      goto LABEL_11;
  }
  else
  {
    v20[0] = 0;
    v23 = 0;
    result = (uint64_t)std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v20);
    a1[80] = 1;
    if (v23 && v22 != -1)
LABEL_11:
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v22])(&v19, v21);
  }
LABEL_12:
  if (!a1[80])
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v16)
        return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v15);
    }
  }
  return result;
}

void sub_196E59EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  if (a23)
  {
    if (a21 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a21])(&a12, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::CSSBoxType>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 7u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::PathOperation,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  IPC::Encoder *v3;
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Length *v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  _BYTE v25[8];
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = this;
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      *IPC::Encoder::grow(this, 1uLL, 1) = 0;
      std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)v25, (const WebCore::Path *)(a2 + 40));
      v4 = v28;
      this = (IPC::Encoder *)IPC::Encoder::grow(v3, 1uLL, 1);
      if (v4)
      {
        *(_BYTE *)this = 1;
        if (!v28)
        {
          this = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
          __break(1u);
          return this;
        }
        this = IPC::ArgumentCoder<WebCore::Path,void>::encode(v3, (WebCore::Path *)v25);
      }
      else
      {
        *(_BYTE *)this = 0;
      }
      if (v28)
      {
        if (v27 != -1)
          return (IPC::Encoder *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v27])(&v24, &v26);
      }
      return this;
    case 1:
      *IPC::Encoder::grow(this, 1uLL, 1) = 1;
      v8 = *(_QWORD *)(a2 + 24);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 2)
      {
        *IPC::Encoder::grow(v3, 1uLL, 1) = 0;
        v9 = *(_BYTE *)(v8 + 16);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v9;
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 20));
        v10 = *(_BYTE *)(v8 + 36);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v10;
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 40));
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 56));
        v11 = *(_BYTE *)(v8 + 64);
LABEL_27:
        *IPC::Encoder::grow(v3, 1uLL, 1) = v11;
        goto LABEL_28;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 3)
      {
        *IPC::Encoder::grow(v3, 1uLL, 1) = 1;
        v12 = *(_BYTE *)(v8 + 16);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v12;
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 20));
        v13 = *(_BYTE *)(v8 + 36);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v13;
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 40));
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 56));
        v14 = *(_BYTE *)(v8 + 64);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v14;
        IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 68));
        v11 = *(_BYTE *)(v8 + 76);
        goto LABEL_27;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 1)
        {
          *IPC::Encoder::grow(v3, 1uLL, 1) = 3;
          v15 = *(_QWORD *)(v8 + 16);
          v16 = IPC::Encoder::grow(v3, 1uLL, 1);
          if (v15)
          {
            *v16 = 1;
            IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v3, *(const void **)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) + 8), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) + 20));
          }
          else
          {
            *v16 = 0;
          }
          v22 = *(_DWORD *)(v8 + 24);
          *(_DWORD *)IPC::Encoder::grow(v3, 4uLL, 4) = v22;
          v11 = *(_BYTE *)(v8 + 28);
          goto LABEL_27;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 4)
        {
          *IPC::Encoder::grow(v3, 1uLL, 1) = 4;
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 12));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 20));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 28));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 36));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 44));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 52));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 60));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 68));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 76));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 84));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 92));
          IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(v8 + 100));
        }
      }
      else
      {
        *IPC::Encoder::grow(v3, 1uLL, 1) = 2;
        v17 = *(_BYTE *)(v8 + 12);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v17;
        v18 = *(unsigned int *)(v8 + 28);
        *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v18;
        v19 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v19)
        {
          v20 = *(WebCore::Length **)(v8 + 16);
          v21 = 8 * v19;
          do
          {
            IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, v20);
            v20 = (WebCore::Length *)((char *)v20 + 8);
            v21 -= 8;
          }
          while (v21);
        }
      }
LABEL_28:
      v23 = *(_BYTE *)(a2 + 16);
      this = (IPC::Encoder *)IPC::Encoder::grow(v3, 1uLL, 1);
      *(_BYTE *)this = v23;
      return this;
    case 2:
      *IPC::Encoder::grow(this, 1uLL, 1) = 2;
      goto LABEL_28;
    case 3:
      *IPC::Encoder::grow(this, 1uLL, 1) = 3;
      v5 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)IPC::Encoder::grow(v3, 4uLL, 4) = v5;
      v6 = *(_BYTE *)(a2 + 24);
      *IPC::Encoder::grow(v3, 1uLL, 1) = v6;
      v7 = *(_BYTE *)(a2 + 25);
      *IPC::Encoder::grow(v3, 1uLL, 1) = v7;
      IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(a2 + 28));
      return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::Length,void>::encode(v3, (WebCore::Length *)(a2 + 36));
    default:
      return this;
  }
}

void sub_196E5A538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 8);
  IPC::VectorArgumentCoder<false,WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  IPC::VectorArgumentCoder<false,WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  v4 = *(_BYTE *)(a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  return IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 64);
}

WTF *IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *v2;
  uint64_t v3;
  unsigned __int16 v6;
  unsigned __int16 v7;
  WTF *result;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int i;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  WTF *v40;
  char v41;
  __int16 v42;

  IPC::Decoder::decode<WTF::String>(a1, &v40);
  IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v37, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v34, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v31, a1);
  v6 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v7 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  result = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v9)
    goto LABEL_40;
  v2 = result;
  v24 = 0;
  v25[0] = 0;
  if ((unint64_t)result >= 0x100000)
    goto LABEL_29;
  if (result)
  {
    v10 = (WTF::StringImpl *)WTF::fastMalloc(result);
    LODWORD(v3) = 0;
    LODWORD(v25[0]) = (_DWORD)v2;
    v24 = v10;
    do
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
      v42 = (__int16)result;
      if ((unsigned __int16)result < 0x100u)
        goto LABEL_39;
      if ((_DWORD)v3 == LODWORD(v25[0]))
      {
        result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, (WTF *)(v3 + 1), (unint64_t)&v42);
        LODWORD(v3) = HIDWORD(v25[0]);
        v10 = v24;
        *((_BYTE *)v24 + HIDWORD(v25[0])) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v10 + v3) = (_BYTE)result;
      }
      LODWORD(v3) = v3 + 1;
      HIDWORD(v25[0]) = v3;
      v2 = (WTF *)((char *)v2 - 1);
    }
    while (v2);
    LODWORD(v11) = v25[0];
LABEL_11:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      if (v10)
        result = (WTF *)WTF::fastFree(v10, v9);
      goto LABEL_42;
    }
  }
  else
  {
    if (!*a1)
    {
LABEL_41:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      goto LABEL_42;
    }
    v10 = 0;
    LODWORD(v11) = 0;
    LODWORD(v3) = 0;
  }
  for (i = 0; ; i = 1)
  {
    if (v41)
    {
      v13 = v40;
      v40 = 0;
      if (v39)
      {
        v14 = v37;
        v15 = v38;
        v37 = 0;
        v38 = 0;
        if (v36)
        {
          v16 = v34;
          v17 = v35;
          v34 = 0;
          v35 = 0;
          if (v33)
          {
            v18 = v31;
            v19 = v32;
            v31 = 0;
            v32 = 0;
            if (v6 > 0xFFu)
            {
              LOBYTE(v28) = v6;
              if (v7 > 0xFFu)
              {
                HIBYTE(v28) = v7;
                if (!i)
                  break;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_29:
    v22 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
      v42 = (__int16)result;
      if ((unsigned __int16)result < 0x100u)
        break;
      if ((_DWORD)v3 == LODWORD(v25[0]))
      {
        result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, (WTF *)(v3 + 1), (unint64_t)&v42);
        LODWORD(v3) = HIDWORD(v25[0]);
        v22 = v24;
        *((_BYTE *)v24 + HIDWORD(v25[0])) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v22 + v3) = (_BYTE)result;
      }
      v3 = (v3 + 1);
      HIDWORD(v25[0]) = v3;
      v2 = (WTF *)((char *)v2 - 1);
      if (!v2)
      {
        if (LODWORD(v25[0]) > v3)
        {
          if ((_DWORD)v3)
          {
            LODWORD(v25[0]) = v3;
            result = (WTF *)WTF::fastRealloc(v22, (void *)v3);
            v24 = result;
          }
          else
          {
            v24 = 0;
            LODWORD(v25[0]) = 0;
            result = (WTF *)WTF::fastFree(v22, v9);
          }
        }
        v10 = v24;
        LODWORD(v11) = v25[0];
        LODWORD(v3) = HIDWORD(v25[0]);
        goto LABEL_11;
      }
    }
    v10 = v24;
    if (!v24)
      goto LABEL_40;
LABEL_39:
    v24 = 0;
    LODWORD(v25[0]) = 0;
    WTF::fastFree(v10, v9);
LABEL_40:
    v9 = (void *)*a1;
    v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (!result)
      goto LABEL_41;
    if (!v23)
      goto LABEL_41;
    result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v9);
    v11 = *a1;
    if (!*a1)
      goto LABEL_41;
    v10 = 0;
  }
  v24 = 0;
  v25[0] = 0;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  v25[1] = 0;
  *(_QWORD *)(a2 + 16) = v15;
  v26[0] = 0;
  *(_QWORD *)(a2 + 24) = v16;
  v26[1] = 0;
  *(_QWORD *)(a2 + 32) = v17;
  v27[0] = 0;
  *(_QWORD *)(a2 + 40) = v18;
  v27[1] = 0;
  *(_QWORD *)(a2 + 48) = v19;
  *(_WORD *)(a2 + 56) = v28;
  v29 = 0;
  *(_QWORD *)(a2 + 64) = v10;
  v30 = 0;
  *(_DWORD *)(a2 + 72) = v11;
  *(_DWORD *)(a2 + 76) = v3;
  *(_BYTE *)(a2 + 80) = 1;
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v9);
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v20);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v21);
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_42:
  if (v33)
    result = (WTF *)WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v9);
  if (v36)
    result = (WTF *)WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v9);
  if (v39)
    result = (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v9);
  if (v41)
  {
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E5A9D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;
  WTF::StringImpl *v29;

  if (a9)
    WTF::fastFree(a9, a2);
  if (a21)
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  if (a27)
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  if (*(_BYTE *)(v27 - 96))
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 - 112, a2);
  if (*(_BYTE *)(v27 - 80))
  {
    v29 = *(WTF::StringImpl **)(v27 - 88);
    *(_QWORD *)(v27 - 88) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  int v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  WTF *v31;
  uint64_t v32;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_30:
    v24 = *a2;
    v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v26 = v25 == 0;
    else
      v26 = 1;
    if (!v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
    return result;
  }
  v6 = v4;
  v31 = 0;
  v32 = 0;
  if (v4 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebCore::CDMMediaCapability>((uint64_t)&v27, a2);
      if (!v30)
        goto LABEL_29;
      if (HIDWORD(v32) == (_DWORD)v32)
      {
        WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMMediaCapability>((unsigned int *)&v31, (unint64_t)&v27);
      }
      else
      {
        v15 = (char *)v31 + 24 * HIDWORD(v32);
        v16 = v27;
        v27 = 0;
        *(_QWORD *)v15 = v16;
        v17 = v28;
        v28 = 0;
        *((_QWORD *)v15 + 1) = v17;
        *((_WORD *)v15 + 8) = v29;
        ++HIDWORD(v32);
      }
      result = std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
      --v6;
    }
    while (v6);
    v18 = HIDWORD(v32);
    v19 = v31;
    if (v32 > HIDWORD(v32))
    {
      v20 = v31;
      if (HIDWORD(v32))
      {
        if (HIDWORD(v32) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v21 = 24 * HIDWORD(v32);
        v22 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v32)));
        LODWORD(v32) = v21 / 0x18;
        v31 = v22;
        v20 = v19;
        if (v22 != v19)
        {
          WTF::VectorMover<false,WebCore::CDMMediaCapability>::move(v19, (WTF::StringImpl *)((char *)v19 + 24 * v18), (uint64_t)v22);
          v20 = v31;
        }
      }
      if (v19)
      {
        if (v20 == v19)
        {
          v31 = 0;
          LODWORD(v32) = 0;
        }
        WTF::fastFree(v19, v5);
        v19 = v31;
      }
      else
      {
        v19 = v20;
      }
    }
    v31 = 0;
    *(_QWORD *)a1 = v19;
    v13 = v32;
    v12 = HIDWORD(v32);
    goto LABEL_14;
  }
  if (v4)
  {
    LODWORD(v32) = 24 * (int)v4 / 0x18u;
    v31 = (WTF *)WTF::fastMalloc((WTF *)(24 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::CDMMediaCapability>((uint64_t)&v27, a2);
      if (!v30)
        break;
      if (HIDWORD(v32) == (_DWORD)v32)
      {
        WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMMediaCapability>((unsigned int *)&v31, (unint64_t)&v27);
      }
      else
      {
        v8 = (char *)v31 + 24 * HIDWORD(v32);
        v9 = v27;
        v27 = 0;
        *(_QWORD *)v8 = v9;
        v10 = v28;
        v28 = 0;
        *((_QWORD *)v8 + 1) = v10;
        *((_WORD *)v8 + 8) = v29;
        ++HIDWORD(v32);
      }
      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
      if (!--v6)
      {
        v11 = v31;
        v13 = v32;
        v12 = HIDWORD(v32);
        goto LABEL_13;
      }
    }
LABEL_29:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v23);
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 0;
  v11 = 0;
LABEL_13:
  v31 = 0;
  *(_QWORD *)a1 = v11;
LABEL_14:
  v32 = 0;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v12;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v5);
}

void sub_196E5AD2C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::VideoConfiguration>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  WTF::StringImpl *v128;
  char v129;

  v3 = result;
  v4 = a2[2];
  v5 = (WTF::StringImpl *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 > v7)
  {
    v8 = (WTF::StringImpl *)((char *)v5 + v7);
    a2[2] = (uint64_t)v8 + 1;
    if (!v5)
    {
      v51 = v6;
      v52 = 0;
      goto LABEL_79;
    }
    LODWORD(v8) = *(unsigned __int8 *)v8;
    if (v8 >= 2)
      goto LABEL_131;
    if (!(_DWORD)v8)
    {
      *(_BYTE *)result = 0;
LABEL_75:
      *(_BYTE *)(v3 + 40) = (_BYTE)v8;
      *(_BYTE *)(v3 + 48) = 1;
      return result;
    }
    IPC::Decoder::decode<WTF::String>(a2, &v128);
    v9 = a2[1];
    v10 = *a2;
    v11 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
    if (v9 >= v11 && v9 - v11 > 3)
    {
      v13 = (int *)(v10 + v11);
      a2[2] = (uint64_t)(v13 + 1);
      if (v10)
      {
        v127 = 0;
        v14 = *v13;
        LODWORD(v125) = v14;
        HIDWORD(v125) = v14 & 0xFFFFFF00;
        v15 = v10;
        goto LABEL_12;
      }
      v15 = v9;
      v55 = 0;
    }
    else
    {
      v15 = 0;
      v55 = 0;
      *a2 = 0;
      a2[1] = 0;
      v56 = a2[3];
      if (v56)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
          v55 = *a2;
          v15 = a2[1];
        }
        else
        {
          v15 = 0;
          v55 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v57 = a2[3];
    if (v57)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v15);
        v125 = 0;
        v15 = *a2;
        v9 = a2[1];
        v127 = 1;
        v10 = *a2;
        goto LABEL_12;
      }
    }
    else
    {
      v15 = 0;
    }
    v9 = 0;
    v10 = 0;
    v125 = 0;
    v127 = 1;
LABEL_12:
    v16 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v10;
    if (v9 < v16 || v9 - v16 <= 3)
    {
      v73 = 0;
      v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      v74 = a2[3];
      if (v74)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
          v15 = *a2;
          v73 = a2[1];
        }
        else
        {
          v73 = 0;
          v15 = 0;
        }
      }
    }
    else
    {
      v17 = (_DWORD *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a2[2] = (uint64_t)(v17 + 1);
      if (v10)
      {
        v126 = 0;
        LODWORD(v124) = *v17;
        HIDWORD(v124) = *v17 & 0xFFFFFF00;
        goto LABEL_16;
      }
      v73 = v9;
    }
    *a2 = 0;
    a2[1] = 0;
    v75 = a2[3];
    if (v75 && v73)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v15, v73);
      v124 = 0;
      v10 = *a2;
      v9 = a2[1];
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v124 = 0;
    }
    v126 = 1;
LABEL_16:
    v18 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v10;
    if (v9 < v18 || v9 - v18 <= 7)
    {
      v76 = 0;
      v77 = 0;
      *a2 = 0;
      a2[1] = 0;
      v78 = a2[3];
      if (v78)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
          v77 = *a2;
          v76 = a2[1];
        }
        else
        {
          v76 = 0;
          v77 = 0;
        }
      }
    }
    else
    {
      v19 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v19 + 1);
      if (v10)
      {
        v20 = 0;
        v123 = *v19;
        goto LABEL_20;
      }
      v76 = v9;
      v77 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v79 = a2[3];
    if (v79 && v76)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v77, v76);
      v123 = 0;
      v10 = *a2;
      v9 = a2[1];
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v123 = 0;
    }
    v20 = 1;
LABEL_20:
    v21 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v10;
    if (v9 < v21 || v9 - v21 <= 7)
    {
      v80 = 0;
      v81 = 0;
      *a2 = 0;
      a2[1] = 0;
      v82 = a2[3];
      if (v82)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);
          v81 = *a2;
          v80 = a2[1];
        }
        else
        {
          v80 = 0;
          v81 = 0;
        }
      }
    }
    else
    {
      v22 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v22 + 1);
      if (v10)
      {
        v23 = 0;
        v24 = *v22;
        goto LABEL_24;
      }
      v80 = v9;
      v81 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v83 = a2[3];
    if (v83 && v80)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v81, v80);
    v24 = 0;
    v23 = 1;
LABEL_24:
    result = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    v25 = a2[1];
    v26 = *a2;
    v27 = a2[2] - *a2;
    if (v25 <= v27)
    {
      v58 = 0;
      v59 = 0;
      *a2 = 0;
      a2[1] = 0;
      v60 = a2[3];
      if (v60)
      {
        v101 = result;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(a2[3]);
          v59 = *a2;
          v58 = a2[1];
        }
        else
        {
          v58 = 0;
          v59 = 0;
        }
        result = v101;
      }
    }
    else
    {
      v28 = (unsigned __int8 *)(v26 + v27);
      a2[2] = (uint64_t)(v28 + 1);
      if (v26)
      {
        v29 = *v28;
        if (v29 < 2)
        {
          if (!*v28)
          {
            v31 = 0;
            LODWORD(v32) = 0x10000;
            goto LABEL_37;
          }
          if (v25 <= (unint64_t)&v28[-v26 + 1])
          {
            v91 = 0;
            v92 = 0;
            *a2 = 0;
            a2[1] = 0;
            v93 = a2[3];
            if (!v93)
              goto LABEL_127;
            v117 = result;
            (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(a2[3]);
            v91 = 0;
            v118 = *a2;
            v119 = a2[1];
            v120 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            v92 = 0;
            if (v120)
            {
              result = v117;
              if (!v119)
                goto LABEL_127;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 16))(v120, v118);
              v92 = *a2;
              v91 = a2[1];
            }
            result = v117;
          }
          else
          {
            a2[2] = (uint64_t)(v28 + 2);
            v30 = v28[1];
            if (v30 < 3)
            {
              v31 = v30 | 0x100;
LABEL_31:
              LODWORD(v32) = (v31 > 0xFF) << 16;
              if (v31 >= 0x100)
                v31 = v31;
              else
                v31 = 0;
              v29 = 256;
              goto LABEL_37;
            }
            v91 = v25;
            v92 = v26;
          }
LABEL_127:
          *a2 = 0;
          a2[1] = 0;
          v94 = a2[3];
          if (v94)
          {
            v110 = result;
            if (v91)
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v94 + 16))(a2[3], v92, v91);
            v31 = 0;
            result = v110;
          }
          else
          {
            v31 = 0;
          }
          goto LABEL_31;
        }
LABEL_88:
        *a2 = 0;
        a2[1] = 0;
        v32 = a2[3];
        if (v32)
        {
          v98 = result;
          if (v25)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(a2[3], v26);
          LODWORD(v32) = 0;
          v31 = 0;
          v29 = 0;
          result = v98;
        }
        else
        {
          v31 = 0;
          v29 = 0;
        }
LABEL_37:
        v33 = v31 | v32 | v29;
        v34 = a2[1];
        if (!WORD1(v32))
        {
          v62 = *a2;
          *a2 = 0;
          a2[1] = 0;
          v63 = a2[3];
          if (!v63)
          {
            v64 = 0;
            goto LABEL_92;
          }
          v102 = result;
          if (!v34)
            goto LABEL_226;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(a2[3], v62);
          v34 = a2[1];
          result = v102;
        }
        v35 = *a2;
        v36 = a2[2] - *a2;
        if (v34 > v36)
        {
          v37 = (unsigned __int8 *)(v35 + v36);
          a2[2] = (uint64_t)(v37 + 1);
          if (v35)
          {
            v38 = *v37;
            if (v38 < 2)
            {
              if (!*v37)
              {
                v40 = 0;
                LODWORD(v41) = 0x10000;
                goto LABEL_50;
              }
              if (v34 <= (unint64_t)&v37[-v35 + 1])
              {
                v84 = 0;
                v85 = 0;
                *a2 = 0;
                a2[1] = 0;
                v86 = a2[3];
                if (!v86)
                  goto LABEL_121;
                v111 = result;
                (*(void (**)(uint64_t))(*(_QWORD *)v86 + 16))(a2[3]);
                v84 = 0;
                v112 = *a2;
                v113 = a2[1];
                v114 = a2[3];
                *a2 = 0;
                a2[1] = 0;
                v85 = 0;
                if (v114)
                {
                  result = v111;
                  if (!v113)
                    goto LABEL_121;
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v112);
                  v85 = *a2;
                  v84 = a2[1];
                }
                result = v111;
              }
              else
              {
                a2[2] = (uint64_t)(v37 + 2);
                v39 = v37[1];
                if (v39 < 3)
                {
                  v40 = v39 | 0x100;
LABEL_45:
                  LODWORD(v41) = (v40 > 0xFF) << 16;
                  if (v40 >= 0x100)
                    v40 = v40;
                  else
                    v40 = 0;
                  v38 = 256;
                  goto LABEL_50;
                }
                v84 = v34;
                v85 = v35;
              }
LABEL_121:
              *a2 = 0;
              a2[1] = 0;
              v87 = a2[3];
              if (v87)
              {
                v108 = result;
                if (v84)
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v87 + 16))(a2[3], v85, v84);
                v40 = 0;
                result = v108;
              }
              else
              {
                v40 = 0;
              }
              goto LABEL_45;
            }
LABEL_94:
            *a2 = 0;
            a2[1] = 0;
            v41 = a2[3];
            if (v41)
            {
              v100 = result;
              if (v34)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(a2[3], v35);
              LODWORD(v41) = 0;
              v40 = 0;
              v38 = 0;
              result = v100;
            }
            else
            {
              v40 = 0;
              v38 = 0;
            }
LABEL_50:
            v42 = v40 | v41 | v38;
            v6 = a2[1];
            if (!WORD1(v41))
            {
              v66 = *a2;
              *a2 = 0;
              a2[1] = 0;
              v67 = a2[3];
              if (!v67)
              {
                v68 = 0;
                goto LABEL_98;
              }
              v103 = result;
              if (!v6)
                goto LABEL_227;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(a2[3], v66);
              v6 = a2[1];
              result = v103;
            }
            v5 = (WTF::StringImpl *)*a2;
            v43 = a2[2] - *a2;
            if (v6 > v43)
            {
              v44 = (unsigned __int8 *)v5 + v43;
              a2[2] = (uint64_t)(v44 + 1);
              if (v5)
              {
                if (*v44 < 2u)
                {
                  if (*v44)
                  {
                    if (v6 <= v44 + 1 - (unsigned __int8 *)v5)
                    {
                      v46 = 0;
                      v88 = 0;
                      *a2 = 0;
                      a2[1] = 0;
                      v89 = a2[3];
                      if (v89)
                      {
                        v115 = result;
                        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 16))(a2[3]);
                        v46 = 0;
                        v5 = (WTF::StringImpl *)*a2;
                        v6 = a2[1];
                        v116 = a2[3];
                        *a2 = 0;
                        a2[1] = 0;
                        v88 = 0;
                        if (v116)
                        {
                          result = v115;
                          if (v6)
                          {
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v116 + 16))(v116, v5);
                            result = v115;
                            v88 = *a2;
                            v46 = a2[1];
                          }
                        }
                        else
                        {
                          result = v115;
                        }
                      }
                    }
                    else
                    {
                      a2[2] = (uint64_t)(v44 + 2);
                      v45 = v44[1];
                      if (v45 < 3)
                      {
                        LODWORD(v46) = v45 | 0x100;
                        goto LABEL_58;
                      }
                      v46 = v6;
                      v88 = (uint64_t)v5;
                    }
                    *a2 = 0;
                    a2[1] = 0;
                    v90 = a2[3];
                    if (v90)
                    {
                      v109 = result;
                      if (!v46)
                        goto LABEL_58;
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v90 + 16))(a2[3], v88, v46);
                      result = v109;
                    }
                    LODWORD(v46) = 0;
LABEL_58:
                    v47 = (v46 > 0xFF) << 16;
                    if (v46 >= 0x100)
                      v48 = v46;
                    else
                      v48 = 0;
                    v49 = 256;
                    goto LABEL_63;
                  }
                  v48 = 0;
                  v49 = 0;
                  v47 = 0x10000;
LABEL_63:
                  if (!HIWORD(v47))
                  {
                    v5 = (WTF::StringImpl *)*a2;
                    v6 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    v71 = a2[3];
                    if (v71)
                    {
                      if (v6)
                      {
                        v121 = result;
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v71 + 16))(v71, v5);
                        result = v121;
                      }
                    }
                  }
                  if (!*a2)
                  {
                    if (v129)
                    {
                      v72 = v128;
                      v128 = 0;
                      if (v72)
                      {
                        if (*(_DWORD *)v72 == 2)
                          WTF::StringImpl::destroy(v72, v5);
                        else
                          *(_DWORD *)v72 -= 2;
                      }
                    }
                    goto LABEL_130;
                  }
                  if (v129)
                  {
                    v8 = v128;
                    v128 = 0;
                    if (!v127 && !v126 && !v20 && !v23 && (result & 0xFF0000) != 0)
                    {
                      if (HIWORD(v33))
                      {
                        if (HIWORD(v42))
                        {
                          v50 = v48 | v47 | v49;
                          if (HIWORD(v50))
                          {
                            *(_QWORD *)v3 = v8;
                            *(_DWORD *)(v3 + 8) = v125 | HIDWORD(v125);
                            *(_DWORD *)(v3 + 12) = v124 | HIDWORD(v124);
                            *(_QWORD *)(v3 + 16) = v123;
                            *(_QWORD *)(v3 + 24) = v24;
                            *(_WORD *)(v3 + 32) = result;
                            *(_WORD *)(v3 + 34) = v33;
                            *(_WORD *)(v3 + 36) = v42;
                            LOBYTE(v8) = 1;
                            *(_WORD *)(v3 + 38) = v50;
                            goto LABEL_75;
                          }
                        }
                      }
                    }
                  }
                  __break(1u);
                  goto LABEL_78;
                }
LABEL_100:
                *a2 = 0;
                a2[1] = 0;
                v70 = a2[3];
                if (v70)
                {
                  v122 = result;
                  if (!v6)
                  {
                    v47 = 0;
                    v48 = 0;
                    v49 = 0;
                    result = result;
                    goto LABEL_63;
                  }
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v70 + 16))(v70, v5);
                  result = v122;
                }
                v47 = 0;
                v48 = 0;
                v49 = 0;
                goto LABEL_63;
              }
              v67 = v6;
              v68 = 0;
LABEL_98:
              *a2 = 0;
              a2[1] = 0;
              v69 = a2[3];
              if (v69)
              {
                v105 = result;
                if (v67)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v69 + 16))(a2[3], v68, v67);
                  result = v105;
                  v5 = (WTF::StringImpl *)*a2;
                  v6 = a2[1];
                }
                else
                {
                  v6 = 0;
                  v5 = 0;
                }
              }
              else
              {
                v6 = 0;
                v5 = 0;
              }
              goto LABEL_100;
            }
            v67 = 0;
            v68 = 0;
            v107 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (!v107)
              goto LABEL_98;
            v103 = result;
            if (v6)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
              result = v103;
              v68 = *a2;
              v67 = a2[1];
              goto LABEL_98;
            }
LABEL_227:
            v67 = 0;
            v68 = 0;
            result = v103;
            goto LABEL_98;
          }
          v63 = v34;
          v64 = 0;
LABEL_92:
          *a2 = 0;
          a2[1] = 0;
          v65 = a2[3];
          if (v65)
          {
            v104 = result;
            if (v63)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v65 + 16))(a2[3], v64, v63);
              v35 = *a2;
              v34 = a2[1];
            }
            else
            {
              v34 = 0;
              v35 = 0;
            }
            result = v104;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          goto LABEL_94;
        }
        v63 = 0;
        v64 = 0;
        v106 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (!v106)
          goto LABEL_92;
        v102 = result;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106);
          v64 = *a2;
          v63 = a2[1];
LABEL_181:
          result = v102;
          goto LABEL_92;
        }
LABEL_226:
        v63 = 0;
        v64 = 0;
        goto LABEL_181;
      }
      v58 = v25;
      v59 = 0;
    }
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v61 = a2[3];
    if (v61)
    {
      v99 = result;
      if (v58)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v61 + 16))(a2[3], v59, v58);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
      result = v99;
    }
    goto LABEL_88;
  }
LABEL_78:
  v51 = 0;
  v52 = 0;
  *a2 = 0;
  a2[1] = 0;
  v53 = a2[3];
  if (v53)
  {
    if (v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v53 + 16))(v53, v5);
      v52 = *a2;
      v51 = a2[1];
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
  }
LABEL_79:
  v6 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  v54 = a2[3];
  if (!v54)
    goto LABEL_131;
  if (v51)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
LABEL_130:
    v5 = (WTF::StringImpl *)*a2;
    v6 = a2[1];
    goto LABEL_131;
  }
  v6 = 0;
  v5 = 0;
LABEL_131:
  *a2 = 0;
  a2[1] = 0;
  v95 = a2[3];
  if (v95 && v6)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v95 + 16))(v95, v5);
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 48) = 0;
  v96 = *a2;
  v97 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v97)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v96);
  }
  return result;
}

void sub_196E5B9D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::AudioConfiguration>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  __int128 v30;
  _BYTE v31[26];
  unsigned __int8 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;

  v4 = a2[2];
  v5 = (WTF::StringImpl *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v24 = 0;
    v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *a2;
        v24 = a2[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_32;
  }
  v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v24 = v6;
    v25 = 0;
LABEL_32:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
        v5 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_33;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_33:
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28 && v6)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v28 + 16))(v28, v5);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    goto LABEL_22;
  }
  if (!v9)
  {
    LOBYTE(v30) = 0;
    v32 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    goto LABEL_20;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v39);
  IPC::Decoder::decode<WTF::String>(a2, &v37);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v34);
  v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  v12 = v11;
  result = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  v15 = *a2;
  if (!*a2)
  {
    LOBYTE(v30) = 0;
    v32 = 0;
    if (v38)
    {
      v29 = v37;
      v37 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 != 2)
        {
          v18 = 0;
          *(_DWORD *)v29 -= 2;
          goto LABEL_12;
        }
        WTF::StringImpl::destroy(v29, v5);
      }
    }
    v18 = 0;
    goto LABEL_12;
  }
  if (v40)
  {
    v16 = v39;
    v39 = 0;
    if (v38)
    {
      v17 = v37;
      v37 = 0;
      if (v36)
      {
        *(_QWORD *)&v33 = v34;
        BYTE8(v33) = v35;
        if (v12)
        {
          if ((result & 0xFF0000) != 0)
          {
            *(_QWORD *)&v30 = v16;
            *((_QWORD *)&v30 + 1) = v17;
            *(_OWORD *)v31 = v33;
            *(_DWORD *)&v31[16] = v10;
            v31[20] = BYTE4(v10);
            *(_WORD *)&v31[24] = result;
            v18 = 1;
            v32 = 1;
LABEL_12:
            if (v40)
            {
              v19 = v39;
              v39 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                {
                  WTF::StringImpl::destroy(v19, v5);
                  if (v15)
                    goto LABEL_17;
                  goto LABEL_25;
                }
                *(_DWORD *)v19 -= 2;
              }
            }
            if (v15)
            {
LABEL_17:
              if (v18)
              {
                v20 = v30;
                v21 = *(_OWORD *)v31;
                v30 = 0uLL;
                *(_OWORD *)a1 = v20;
                *(_OWORD *)(a1 + 16) = v21;
                *(_OWORD *)(a1 + 26) = *(_OWORD *)&v31[10];
                *(_BYTE *)(a1 + 48) = 1;
LABEL_20:
                *(_BYTE *)(a1 + 56) = 1;
                return std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v5);
              }
              *(_BYTE *)a1 = 0;
              *(_BYTE *)(a1 + 56) = 0;
              std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v5);
LABEL_22:
              v5 = (WTF::StringImpl *)*a2;
              v14 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              result = a2[3];
              if (!result)
                return result;
              goto LABEL_29;
            }
LABEL_25:
            v5 = (WTF::StringImpl *)*a2;
            v22 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            v23 = a2[3];
            if (v23 && v22)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v23 + 16))(v23, v5);
              v18 = v32;
            }
            goto LABEL_17;
          }
        }
      }
    }
  }
  __break(1u);
LABEL_29:
  if (v14)
    return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
  return result;
}

void sub_196E5BD10(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<WebCore::VideoConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoConfiguration> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AudioConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::AudioConfiguration> const&>(a1, v2 + 48);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, v2 + 104);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, v2 + 128);
  LOBYTE(v2) = *(_BYTE *)(v2 + 152);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  char v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  _OWORD v52[2];
  char v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[2];
  unsigned __int8 v72;
  char v73;
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  unsigned __int8 v77;
  char v78;

  IPC::Decoder::decode<std::optional<WebCore::VideoConfiguration>>((uint64_t)&v74, a1);
  IPC::Decoder::decode<std::optional<WebCore::AudioConfiguration>>((uint64_t)&v69, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v65, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v61, a1);
  LOWORD(v47) = 0;
  result = (WTF::StringImpl *)IPC::Decoder::operator>><BOOL>(a1, &v47);
  v10 = BYTE1(v47);
  if (!BYTE1(v47))
    goto LABEL_67;
  v11 = (char)v47;
  while (1)
  {
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 160) = 0;
      goto LABEL_51;
    }
    if (v78)
    {
      LOBYTE(v33) = 0;
      v36 = 0;
      v12 = v77;
      if (v77)
      {
        v13 = v74;
        v74 = 0;
        v33 = v13;
        v34 = v75;
        v35 = v76;
        v36 = 1;
      }
      if (v73)
      {
        LOBYTE(v37) = 0;
        v40 = 0;
        v14 = v72;
        if (v72)
        {
          v15 = v69;
          v6 = v70;
          v69 = 0;
          v70 = 0;
          v37 = v15;
          v38 = v6;
          v39[0] = v71[0];
          *(_OWORD *)((char *)v39 + 10) = *(_OWORD *)((char *)v71 + 10);
          v40 = 1;
        }
        if (v68)
        {
          LOBYTE(v41) = 0;
          v43 = 0;
          v16 = v67;
          if (v67)
          {
            v41 = v65;
            v7 = v66;
            v8 = HIDWORD(v66);
            v65 = 0;
            v66 = 0;
            v42 = __PAIR64__(v8, v7);
            v17 = 1;
            v43 = 1;
          }
          else
          {
            v17 = 0;
          }
          v18 = v64;
          if (v64)
          {
            LOBYTE(v44) = 0;
            v46 = 0;
            v19 = v63;
            if (v63)
            {
              v44 = v61;
              v18 = v62;
              v9 = HIDWORD(v62);
              v61 = 0;
              v62 = 0;
              v45 = __PAIR64__(v9, v18);
              v46 = 1;
            }
            LOBYTE(v47) = 0;
            v50 = 0;
            if (v77)
            {
              v20 = v33;
              v33 = 0;
              v47 = v20;
              v48 = v34;
              v49 = v35;
              v50 = 1;
            }
            LOBYTE(v51) = 0;
            v53 = 0;
            if (v72)
            {
              v21 = v37;
              v37 = 0;
              v38 = 0;
              *(_QWORD *)&v51 = v21;
              *((_QWORD *)&v51 + 1) = v6;
              v52[0] = v39[0];
              *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)((char *)v39 + 10);
              v53 = 1;
            }
            LOBYTE(v54) = 0;
            v56 = 0;
            if (v67)
            {
              v22 = v41;
              v41 = 0;
              v42 = 0;
              v54 = v22;
              v55 = __PAIR64__(v8, v7);
              v6 = 1;
              v56 = 1;
            }
            else
            {
              v6 = 0;
            }
            LOBYTE(v57) = 0;
            v59 = 0;
            if (v63)
            {
              v23 = v44;
              v44 = 0;
              v45 = 0;
              v57 = v23;
              v58 = __PAIR64__(v9, v18);
              v7 = 1;
              v59 = 1;
            }
            if ((_DWORD)v10)
              break;
          }
        }
      }
    }
    __break(1u);
LABEL_67:
    v5 = (void *)*a1;
    v31 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      v32 = v10;
      if (v31)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(_QWORD *)result + 16))(result, v5);
      v11 = 0;
      v10 = v32;
    }
    else
    {
      v11 = 0;
    }
  }
  v60 = v11;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v12)
  {
    v24 = v47;
    v47 = 0;
    *(_QWORD *)a2 = v24;
    *(_OWORD *)(a2 + 8) = v48;
    *(_OWORD *)(a2 + 24) = v49;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  if (v14)
  {
    v25 = v51;
    v26 = v52[0];
    v51 = 0uLL;
    *(_OWORD *)(a2 + 48) = v25;
    *(_OWORD *)(a2 + 64) = v26;
    *(_OWORD *)(a2 + 74) = *(_OWORD *)((char *)v52 + 10);
    *(_BYTE *)(a2 + 96) = 1;
  }
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  if (v16)
  {
    *(_QWORD *)(a2 + 104) = v54;
    v27 = v55;
    v54 = 0;
    v55 = 0;
    *(_QWORD *)(a2 + 112) = v27;
    *(_BYTE *)(a2 + 120) = 1;
  }
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  if (v19)
  {
    *(_QWORD *)(a2 + 128) = v57;
    v28 = v58;
    v57 = 0;
    v58 = 0;
    *(_QWORD *)(a2 + 136) = v28;
    *(_BYTE *)(a2 + 144) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v5);
    LODWORD(v6) = v56;
  }
  *(_BYTE *)(a2 + 152) = v11;
  *(_BYTE *)(a2 + 160) = 1;
  if ((_DWORD)v6)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v5);
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, (WTF::StringImpl *)v5);
  if (v50)
  {
    v30 = v47;
    v47 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (v19)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v29);
    v17 = v43;
  }
  if (v17)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v29);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v29);
  if (v36)
  {
    result = v33;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
LABEL_51:
  if (v64 && v63)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v5);
  if (v68 && v67)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v5);
  if (v73)
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, (WTF::StringImpl *)v5);
  if (v78)
  {
    if (v77)
    {
      result = v74;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v74 -= 2;
      }
    }
  }
  return result;
}

void sub_196E5C260(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  BOOL v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(v2 - 200) && *(_BYTE *)(v2 - 208))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 224, a2);
  if (*(_BYTE *)(v2 - 136))
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2 - 192, (WTF::StringImpl *)a2);
  if (*(_BYTE *)(v2 - 72))
    v4 = *(_BYTE *)(v2 - 80) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(WTF::StringImpl **)(v2 - 120);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<WebCore::VideoConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoConfiguration> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AudioConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::AudioConfiguration> const&>(a1, v2 + 48);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, v2 + 104);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, v2 + 128);
  v4 = *(_BYTE *)(v2 + 152);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 153);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  char v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  __int16 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[2];
  char v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  char v71;
  __int128 v72;
  _OWORD v73[2];
  char v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[2];
  unsigned __int8 v93;
  char v94;
  WTF::StringImpl *v95;
  __int128 v96;
  __int128 v97;
  unsigned __int8 v98;
  char v99;

  IPC::Decoder::decode<std::optional<WebCore::VideoConfiguration>>((uint64_t)&v95, a1);
  IPC::Decoder::decode<std::optional<WebCore::AudioConfiguration>>((uint64_t)&v90, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v86, a1);
  LODWORD(result) = IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v82, a1);
  v7 = a1[1];
  v8 = (WTF::StringImpl *)*a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
    goto LABEL_74;
  v10 = (unsigned __int8 *)v8 + v9;
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v39 = v7;
    v40 = 0;
    goto LABEL_75;
  }
  v11 = *v10;
  if (v11 >= 3)
    goto LABEL_76;
  v12 = v11 | 0x100;
LABEL_5:
  if (v7 > a1[2] - (uint64_t)v8)
  {
    v13 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v13 + 1);
    if (v8)
    {
      v14 = *v13;
      if (v14 <= 1)
      {
        v15 = 0;
        v16 = v14 != 0;
        v17 = v12;
        goto LABEL_9;
      }
      v44 = v12;
      goto LABEL_82;
    }
    v44 = v12;
    v46 = 0;
    goto LABEL_80;
  }
  v44 = v12;
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45)
    {
      v52 = v44;
      v53 = v12;
      if (v7)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v45 + 16))(v45, v8);
        v46 = *a1;
        v7 = a1[1];
      }
      else
      {
        v46 = 0;
      }
      v12 = v53;
      v44 = v52;
    }
    else
    {
      v46 = 0;
      v7 = 0;
    }
LABEL_80:
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47)
    {
      v50 = v44;
      v51 = v12;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v46);
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v8 = 0;
      }
      v12 = v51;
      v44 = v50;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
LABEL_82:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result
      || !v7
      || (v48 = v44,
          v49 = v12,
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v8), !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 160) = 0;
      goto LABEL_58;
    }
    v12 = v49;
    v17 = v48;
    v16 = 0;
    v15 = 1;
LABEL_9:
    if (v99)
    {
      LOBYTE(v54) = 0;
      v57 = 0;
      v18 = v98;
      if (v98)
      {
        v19 = v95;
        v95 = 0;
        v54 = v19;
        v55 = v96;
        v56 = v97;
        v57 = 1;
      }
      if (v94)
      {
        LOBYTE(v58) = 0;
        v61 = 0;
        v20 = v93;
        if (v93)
        {
          v21 = v90;
          v5 = v91;
          v90 = 0;
          v91 = 0;
          v58 = v21;
          v59 = v5;
          v60[0] = v92[0];
          *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)((char *)v92 + 10);
          v61 = 1;
        }
        if (v89)
        {
          LOBYTE(v62) = 0;
          v64 = 0;
          v22 = v88;
          if (v88)
          {
            v62 = v86;
            v6 = v87;
            LODWORD(result) = HIDWORD(v87);
            v86 = 0;
            v87 = 0;
            v63 = __PAIR64__(result, v6);
            v23 = 1;
            v64 = 1;
          }
          else
          {
            v23 = 0;
          }
          v24 = v85;
          if (v85)
          {
            LOBYTE(v65) = 0;
            v67 = 0;
            v25 = v84;
            if (v84)
            {
              v65 = v82;
              v24 = v83;
              v7 = HIDWORD(v83);
              v82 = 0;
              v83 = 0;
              v66 = __PAIR64__(v7, v24);
              v67 = 1;
            }
            LOBYTE(v68) = 0;
            v71 = 0;
            if (v98)
            {
              v26 = v54;
              v54 = 0;
              v68 = v26;
              v69 = v55;
              v70 = v56;
              v71 = 1;
            }
            LOBYTE(v72) = 0;
            v74 = 0;
            if (v93)
            {
              v27 = v58;
              v58 = 0;
              v59 = 0;
              *(_QWORD *)&v72 = v27;
              *((_QWORD *)&v72 + 1) = v5;
              v73[0] = v60[0];
              *(_OWORD *)((char *)v73 + 10) = *(_OWORD *)((char *)v60 + 10);
              v74 = 1;
            }
            LOBYTE(v75) = 0;
            v77 = 0;
            if (v88)
            {
              v28 = v62;
              v62 = 0;
              v63 = 0;
              v75 = v28;
              v76 = __PAIR64__(result, v6);
              v29 = 1;
              v77 = 1;
            }
            else
            {
              v29 = 0;
            }
            LOBYTE(v78) = 0;
            v80 = 0;
            if (v84)
            {
              v30 = v65;
              v65 = 0;
              v66 = 0;
              v78 = v30;
              v79 = __PAIR64__(v7, v24);
              v80 = 1;
            }
            if (v12 > 0xFF)
            {
              LOBYTE(v81) = v17;
              if (!v15)
                break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_74:
    v39 = 0;
    v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v40 = *a1;
        v39 = a1[1];
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
    }
LABEL_75:
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v39);
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
LABEL_76:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v7)
      {
        LODWORD(result) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v43 + 16))(v43, v8);
        v12 = 0;
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
        goto LABEL_5;
      }
      v8 = 0;
      v44 = 0;
      v12 = 0;
    }
    else
    {
      v8 = 0;
      v44 = 0;
      v12 = 0;
      v7 = 0;
    }
  }
  HIBYTE(v81) = v16;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v18)
  {
    v31 = v68;
    v68 = 0;
    *(_QWORD *)a2 = v31;
    *(_OWORD *)(a2 + 8) = v69;
    *(_OWORD *)(a2 + 24) = v70;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  if (v20)
  {
    v32 = v72;
    v33 = v73[0];
    v72 = 0uLL;
    *(_OWORD *)(a2 + 48) = v32;
    *(_OWORD *)(a2 + 64) = v33;
    *(_OWORD *)(a2 + 74) = *(_OWORD *)((char *)v73 + 10);
    *(_BYTE *)(a2 + 96) = 1;
  }
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  if (v22)
  {
    *(_QWORD *)(a2 + 104) = v75;
    v34 = v76;
    v75 = 0;
    v76 = 0;
    *(_QWORD *)(a2 + 112) = v34;
    *(_BYTE *)(a2 + 120) = 1;
  }
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  if (v25)
  {
    *(_QWORD *)(a2 + 128) = v78;
    v35 = v79;
    v78 = 0;
    v79 = 0;
    *(_QWORD *)(a2 + 136) = v35;
    *(_BYTE *)(a2 + 144) = 1;
    v36 = v81;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, (void *)v24);
    v29 = v77;
  }
  else
  {
    v36 = v81;
  }
  *(_WORD *)(a2 + 152) = v36;
  *(_BYTE *)(a2 + 160) = 1;
  if (v29)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, (void *)v24);
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, (WTF::StringImpl *)v24);
  if (v71)
  {
    v38 = v68;
    v68 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (v25)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v37);
    v23 = v64;
  }
  if (v23)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v37);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v37);
  if (v57)
  {
    result = v54;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v54, v8);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
LABEL_58:
  if (v85 && v84)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v8);
  if (v89 && v88)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v86, v8);
  if (v94)
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v8);
  if (v99)
  {
    if (v98)
    {
      result = v95;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v95, v8);
        else
          *(_DWORD *)v95 -= 2;
      }
    }
  }
  return result;
}

void sub_196E5C9C4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  BOOL v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(v2 - 232) && *(_BYTE *)(v2 - 240))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 256, a2);
  if (*(_BYTE *)(v2 - 200) && *(_BYTE *)(v2 - 208))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 224, a2);
  if (*(_BYTE *)(v2 - 136))
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2 - 192, (WTF::StringImpl *)a2);
  if (*(_BYTE *)(v2 - 72))
    v4 = *(_BYTE *)(v2 - 80) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(WTF::StringImpl **)(v2 - 120);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::FetchOptionsDestination>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 0x15)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

uint64_t IPC::Decoder::decode<WebCore::FetchOptionsCache>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::FetchOptionsCache,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ReferrerPolicy>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 9)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

char *IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 4));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
  return IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, a2 + 8);
}

_QWORD *IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(uint64_t *a1, _DWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<int const&>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 1);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 4));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
  return IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::encode(a1, a2 + 8);
}

uint64_t IPC::ArgumentCoder<WebCore::ControlStyle,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[7];
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  unsigned __int8 v39;
  char v40[8];
  unsigned __int8 v41;
  char v42[8];
  unsigned __int8 v43;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v26 = 0;
    v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 = *a1;
        v26 = a1[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    goto LABEL_34;
  }
  v8 = (unsigned int *)(v5 + v6);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v26 = v4;
    v27 = 0;
LABEL_34:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_35;
  }
  v9 = *v8;
  if (v9 < 0x40000)
  {
    v10 = v9 | 0x100000000;
    goto LABEL_9;
  }
LABEL_35:
  v10 = 0;
  *a1 = 0;
  a1[1] = 0;
  v30 = a1[3];
  if (v30)
  {
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v5);
    v10 = 0;
  }
LABEL_9:
  v11 = IPC::Decoder::decode<float>(a1);
  v12 = IPC::Decoder::decode<float>(a1);
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v42);
  if (!v43)
  {
    v23 = *a1;
    v24 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v40);
  if (!v41)
  {
    v31 = *a1;
    v32 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
    }
  }
  IPC::Decoder::decode<WebCore::RectEdges<float>>(a1, (uint64_t)&v38);
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_20;
  }
  v14 = HIDWORD(v10);
  if (!HIDWORD(v10)
    || (LODWORD(v34) = v10, (v11 & 0xFF00000000) == 0)
    || (HIDWORD(v34) = v11, (v12 & 0xFF00000000) == 0)
    || (v14 = v43) == 0
    || (WebCore::Color::Color(), (v14 = v41) == 0)
    || (WebCore::Color::Color(), (v14 = v39) == 0))
  {
    __break(1u);
    goto LABEL_22;
  }
  v37 = v38;
  *(_QWORD *)a2 = v34;
  *(_DWORD *)(a2 + 8) = v12;
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_OWORD *)(a2 + 32) = v37;
  *(_BYTE *)(a2 + 48) = 1;
  v14 = v36;
  if ((v36 & 0x8000000000000) != 0)
  {
LABEL_22:
    v17 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v13);
    }
  }
  if ((*(_QWORD *)v35 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(*(_QWORD *)v35 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v13);
    }
  }
LABEL_20:
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v13);
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v15);
}

void sub_196E5D0D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v12 - 64, v14);
  _Unwind_Resume(a1);
}

void WebCore::ControlStyle::~ControlStyle(WebCore::ControlStyle *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::ControlStyle *v10;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v10 = this;
      WTF::fastFree((WTF *)v4, a2);
      this = v10;
    }
  }
  v3 = *((_QWORD *)this + 2);
  if ((v3 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  IPC::Encoder *v3;
  int v4;
  char v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  char *v10;
  char v11;
  char v12;
  int v13;
  char v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23[2];

  v3 = this;
  v4 = *(unsigned __int8 *)(a2 + 12);
  if ((v4 & 0xFC) == 4)
  {
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
LABEL_11:
    v8 = *(_BYTE *)(a2 + 12);
    this = (IPC::Encoder *)IPC::Encoder::grow(v3, 1uLL, 1);
    *(_BYTE *)this = v8;
    return this;
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 9:
      this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
      v5 = 3;
      goto LABEL_5;
    case 0xA:
      this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
      v5 = 2;
      goto LABEL_5;
    case 0xB:
      *IPC::Encoder::grow(this, 1uLL, 1) = 4;
      v18 = *(_BYTE *)(a2 + 32);
      *IPC::Encoder::grow(v3, 1uLL, 1) = v18;
      v19 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v19;
      v20 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v20;
      v21 = *(_QWORD *)(a2 + 56);
      goto LABEL_40;
    case 0xC:
      *IPC::Encoder::grow(this, 1uLL, 1) = 5;
      v22 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)IPC::Encoder::grow(v3, 8uLL, 8) = v22;
      v21 = *(_QWORD *)(a2 + 40);
LABEL_40:
      this = (IPC::Encoder *)IPC::Encoder::grow(v3, 8uLL, 8);
      *(_QWORD *)this = v21;
      return this;
    case 0xF:
      this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
      v5 = 6;
      goto LABEL_5;
    case 0x16:
      this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
      *(_BYTE *)this = 1;
      return this;
    default:
      if ((v4 - 25) <= 1)
      {
        v6 = IPC::Encoder::grow(this, 1uLL, 1);
        v7 = 7;
        goto LABEL_10;
      }
      if (v4 == 27)
      {
        this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
        v5 = 8;
        goto LABEL_5;
      }
      if ((v4 & 0xFE) == 0x1C)
      {
        v6 = IPC::Encoder::grow(this, 1uLL, 1);
        v7 = 9;
LABEL_10:
        *v6 = v7;
        goto LABEL_11;
      }
      if ((v4 - 13) <= 1)
      {
        *IPC::Encoder::grow(this, 1uLL, 1) = 10;
        v9 = *(_BYTE *)(a2 + 12);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v9;
        v23[0] = *(WTF::StringImpl **)(a2 + 32);
        IPC::Encoder::operator<<<WebCore::IntPoint>(v3, v23);
        *(_OWORD *)v23 = *(_OWORD *)(a2 + 40);
        IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v3, (uint64_t *)v23);
        return (IPC::Encoder *)IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v3, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
      }
      if (*(unsigned __int8 *)(a2 + 12) <= 0x13u)
      {
        if (v4 == 8 || v4 == 19)
        {
          v6 = IPC::Encoder::grow(this, 1uLL, 1);
          v7 = 13;
          goto LABEL_10;
        }
      }
      else
      {
        switch(v4)
        {
          case 20:
            this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
            v5 = 14;
LABEL_5:
            *(_BYTE *)this = v5;
            return this;
          case 32:
            v10 = IPC::Encoder::grow(this, 1uLL, 1);
            v11 = 12;
            goto LABEL_25;
          case 31:
            v10 = IPC::Encoder::grow(this, 1uLL, 1);
            v11 = 11;
LABEL_25:
            *v10 = v11;
            v12 = *(_BYTE *)(a2 + 32);
            *IPC::Encoder::grow(v3, 1uLL, 1) = v12;
            v13 = *(_DWORD *)(a2 + 36);
            this = (IPC::Encoder *)IPC::Encoder::grow(v3, 4uLL, 4);
            *(_DWORD *)this = v13;
            return this;
        }
      }
      if ((v4 & 0xFE) == 2)
      {
        v6 = IPC::Encoder::grow(this, 1uLL, 1);
        v7 = 15;
        goto LABEL_10;
      }
      if (v4 == 21)
      {
        this = (IPC::Encoder *)IPC::Encoder::grow(this, 1uLL, 1);
        v5 = 17;
        goto LABEL_5;
      }
      if (v4 == 16)
      {
        *IPC::Encoder::grow(this, 1uLL, 1) = 16;
        v14 = *(_BYTE *)(a2 + 32);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v14;
        v15 = *(_BYTE *)(a2 + 33);
        *IPC::Encoder::grow(v3, 1uLL, 1) = v15;
        v16 = *(WTF::StringImpl **)(a2 + 40);
        if (v16)
          *(_DWORD *)v16 += 2;
        v23[0] = v16;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v3, (uint64_t *)v23);
        this = v23[0];
        v23[0] = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (IPC::Encoder *)WTF::StringImpl::destroy(this, v17);
          else
            *(_DWORD *)this -= 2;
        }
      }
      return this;
  }
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  double v30;
  unint64_t v31;
  WTF::StringImpl *v32;

  v3 = (uint64_t *)result;
  v4 = *(unsigned __int8 *)(a2 + 12);
  if ((v4 & 0xFC) == 4)
  {
    v5 = *((_QWORD *)result + 2);
    if (v5 >= *((_QWORD *)result + 1))
      goto LABEL_78;
    v6 = v5 + 1;
    *(_BYTE *)(*(_QWORD *)result + v5) = 0;
LABEL_14:
    *((_QWORD *)result + 2) = v6;
    if (v6 < *((_QWORD *)result + 1))
    {
      *(_BYTE *)(*(_QWORD *)result + v6) = *(_BYTE *)(a2 + 12);
      *((_QWORD *)result + 2) = v5 + 2;
      return result;
    }
LABEL_78:
    *((_QWORD *)result + 1) = 0;
    return result;
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 9:
      v7 = *((_QWORD *)result + 2);
      if (v7 >= *((_QWORD *)result + 1))
        goto LABEL_78;
      v8 = v7 + 1;
      v9 = *(_QWORD *)result;
      v10 = 3;
      goto LABEL_7;
    case 0xA:
      v7 = *((_QWORD *)result + 2);
      if (v7 >= *((_QWORD *)result + 1))
        goto LABEL_78;
      v8 = v7 + 1;
      v9 = *(_QWORD *)result;
      v10 = 2;
      goto LABEL_7;
    case 0xB:
      v27 = *((_QWORD *)result + 2);
      if (v27 >= *((_QWORD *)result + 1))
      {
        *((_QWORD *)result + 1) = 0;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)result + v27) = 4;
        *((_QWORD *)result + 2) = v27 + 1;
        if (v27 + 1 < *((_QWORD *)result + 1))
        {
          *(_BYTE *)(*(_QWORD *)result + v27 + 1) = *(_BYTE *)(a2 + 32);
          *((_QWORD *)result + 2) = v27 + 2;
          goto LABEL_66;
        }
      }
      *((_QWORD *)result + 1) = 0;
LABEL_66:
      v28 = IPC::StreamConnectionEncoder::operator<<<double>(result, *(double *)(a2 + 40));
      v29 = IPC::StreamConnectionEncoder::operator<<<double>(v28, *(double *)(a2 + 48));
      v30 = *(double *)(a2 + 56);
      return (WTF::StringImpl *)IPC::StreamConnectionEncoder::operator<<<double>(v29, v30);
    case 0xC:
      v31 = *((_QWORD *)result + 2);
      if (v31 >= *((_QWORD *)result + 1))
      {
        *((_QWORD *)result + 1) = 0;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)result + v31) = 5;
        *((_QWORD *)result + 2) = v31 + 1;
      }
      v29 = IPC::StreamConnectionEncoder::operator<<<double>(result, *(double *)(a2 + 32));
      v30 = *(double *)(a2 + 40);
      return (WTF::StringImpl *)IPC::StreamConnectionEncoder::operator<<<double>(v29, v30);
    case 0xF:
      v7 = *((_QWORD *)result + 2);
      if (v7 >= *((_QWORD *)result + 1))
        goto LABEL_78;
      v8 = v7 + 1;
      v9 = *(_QWORD *)result;
      v10 = 6;
      goto LABEL_7;
    case 0x16:
      v7 = *((_QWORD *)result + 2);
      if (v7 >= *((_QWORD *)result + 1))
        goto LABEL_78;
      v8 = v7 + 1;
      v9 = *(_QWORD *)result;
      v10 = 1;
      goto LABEL_7;
    default:
      if ((v4 - 25) <= 1)
      {
        v5 = *((_QWORD *)result + 2);
        if (v5 >= *((_QWORD *)result + 1))
          goto LABEL_78;
        v6 = v5 + 1;
        v11 = *(_QWORD *)result;
        v12 = 7;
LABEL_13:
        *(_BYTE *)(v11 + v5) = v12;
        goto LABEL_14;
      }
      if (v4 == 27)
      {
        v7 = *((_QWORD *)result + 2);
        if (v7 >= *((_QWORD *)result + 1))
          goto LABEL_78;
        v8 = v7 + 1;
        v9 = *(_QWORD *)result;
        v10 = 8;
        goto LABEL_7;
      }
      if ((v4 & 0xFE) == 0x1C)
      {
        v5 = *((_QWORD *)result + 2);
        if (v5 >= *((_QWORD *)result + 1))
          goto LABEL_78;
        v6 = v5 + 1;
        v11 = *(_QWORD *)result;
        v12 = 9;
        goto LABEL_13;
      }
      if ((v4 - 13) <= 1)
      {
        v13 = *((_QWORD *)result + 2);
        if (v13 >= *((_QWORD *)result + 1))
        {
          *((_QWORD *)result + 1) = 0;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)result + v13) = 10;
          *((_QWORD *)result + 2) = v13 + 1;
          if (v13 + 1 < *((_QWORD *)result + 1))
          {
            *(_BYTE *)(*(_QWORD *)result + v13 + 1) = *(_BYTE *)(a2 + 12);
            *((_QWORD *)result + 2) = v13 + 2;
LABEL_21:
            v32 = *(WTF::StringImpl **)(a2 + 32);
            IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)result, &v32);
            v14 = *(WTF::StringImpl **)(a2 + 48);
            v32 = *(WTF::StringImpl **)(a2 + 40);
            IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(v3, &v32);
            v32 = v14;
            IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(v3, &v32);
            return (WTF::StringImpl *)IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(v3, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
          }
        }
        *((_QWORD *)result + 1) = 0;
        goto LABEL_21;
      }
      if (*(unsigned __int8 *)(a2 + 12) <= 0x13u)
      {
        if (v4 == 8 || v4 == 19)
        {
          v5 = *((_QWORD *)result + 2);
          if (v5 >= *((_QWORD *)result + 1))
            goto LABEL_78;
          v6 = v5 + 1;
          v11 = *(_QWORD *)result;
          v12 = 13;
          goto LABEL_13;
        }
        goto LABEL_43;
      }
      if (v4 == 20)
      {
        v7 = *((_QWORD *)result + 2);
        if (v7 >= *((_QWORD *)result + 1))
          goto LABEL_78;
        v8 = v7 + 1;
        v9 = *(_QWORD *)result;
        v10 = 14;
        goto LABEL_7;
      }
      if (v4 == 32)
      {
        v15 = *((_QWORD *)result + 2);
        if (v15 < *((_QWORD *)result + 1))
        {
          v16 = v15 + 1;
          v17 = *(_QWORD *)result;
          v18 = 12;
          goto LABEL_36;
        }
LABEL_81:
        *((_QWORD *)result + 1) = 0;
        goto LABEL_82;
      }
      if (v4 != 31)
      {
LABEL_43:
        if ((v4 & 0xFE) == 2)
        {
          v5 = *((_QWORD *)result + 2);
          if (v5 >= *((_QWORD *)result + 1))
            goto LABEL_78;
          v6 = v5 + 1;
          v11 = *(_QWORD *)result;
          v12 = 15;
          goto LABEL_13;
        }
        if (v4 != 21)
        {
          if (v4 != 16)
            return result;
          v24 = *((_QWORD *)result + 2);
          if (v24 >= *((_QWORD *)result + 1))
          {
            *((_QWORD *)result + 1) = 0;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)result + v24) = 16;
            *((_QWORD *)result + 2) = v24 + 1;
            if (v24 + 1 < *((_QWORD *)result + 1))
            {
              *(_BYTE *)(*(_QWORD *)result + v24 + 1) = *(_BYTE *)(a2 + 32);
              *((_QWORD *)result + 2) = v24 + 2;
              if (v24 + 2 < *((_QWORD *)result + 1))
              {
                *(_BYTE *)(*(_QWORD *)result + v24 + 2) = *(_BYTE *)(a2 + 33);
                *((_QWORD *)result + 2) = v24 + 3;
LABEL_52:
                v25 = *(WTF::StringImpl **)(a2 + 40);
                if (v25)
                  *(_DWORD *)v25 += 2;
                v32 = v25;
                IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(result, (uint64_t *)&v32);
                result = v32;
                v32 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
                  else
                    *(_DWORD *)result -= 2;
                }
                return result;
              }
LABEL_85:
              *((_QWORD *)result + 1) = 0;
              goto LABEL_52;
            }
          }
          *((_QWORD *)result + 1) = 0;
          goto LABEL_85;
        }
        v7 = *((_QWORD *)result + 2);
        if (v7 >= *((_QWORD *)result + 1))
          goto LABEL_78;
        v8 = v7 + 1;
        v9 = *(_QWORD *)result;
        v10 = 17;
LABEL_7:
        *(_BYTE *)(v9 + v7) = v10;
        *((_QWORD *)result + 2) = v8;
        return result;
      }
      v15 = *((_QWORD *)result + 2);
      if (v15 >= *((_QWORD *)result + 1))
        goto LABEL_81;
      v16 = v15 + 1;
      v17 = *(_QWORD *)result;
      v18 = 11;
LABEL_36:
      *(_BYTE *)(v17 + v15) = v18;
      *((_QWORD *)result + 2) = v16;
      if (v16 < *((_QWORD *)result + 1))
      {
        v15 += 2;
        *(_BYTE *)(*(_QWORD *)result + v16) = *(_BYTE *)(a2 + 32);
        *((_QWORD *)result + 2) = v15;
        goto LABEL_38;
      }
      v15 = v16;
LABEL_82:
      *((_QWORD *)result + 1) = 0;
LABEL_38:
      v19 = *(_QWORD *)result + v15;
      v20 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v21 = v20 >= v19;
      v22 = v20 - v19;
      if (v21)
      {
        v23 = v22 + v15;
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *((_QWORD *)result + 1))
        {
          *(_DWORD *)(*(_QWORD *)result + v23) = *(_DWORD *)(a2 + 36);
          *((_QWORD *)result + 2) = v23 + 4;
          return result;
        }
        goto LABEL_78;
      }
      return result;
  }
}

void sub_196E5DB5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ControlPart,void>::decode@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  uint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const WTF::Seconds *v14;
  void (**v15)(WebCore::InnerSpinButtonPart *__hidden);
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  unint64_t v24;
  unint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  double *v30;
  double v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  char v44;
  char v45;
  uint64_t v46;
  void (**v47)(WebCore::SwitchThumbPart *__hidden);
  unint64_t v48;
  unsigned __int8 *v49;
  char v50;
  uint64_t v51;
  WebCore::ControlPart *v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  const WTF::Seconds *v113;
  char v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  int v118;

  v5 = (uint64_t *)result;
  v7 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)(result + 16) - *(_QWORD *)result;
  if (v7 <= v9)
  {
    v37 = 0;
    v38 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v39 = *(_QWORD *)(result + 24);
    if (v39)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v8, v7);
        v38 = *v5;
        v37 = v5[1];
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
    }
    goto LABEL_97;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  *(_QWORD *)(result + 16) = v10 + 1;
  if (!v8)
  {
    v37 = v7;
    v38 = 0;
LABEL_97:
    *v5 = 0;
    v5[1] = 0;
    result = v5[3];
    if (result && v37)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v38);
    goto LABEL_98;
  }
  LODWORD(v11) = *v10;
  if (v11 >= 0x12)
  {
LABEL_98:
    LODWORD(v11) = 0;
    v12 = 0;
    goto LABEL_5;
  }
  v12 = 1;
LABEL_5:
  LODWORD(v13) = v11 | (v12 << 8);
  if (v13 <= 0xFF)
  {
    v40 = *v5;
    v41 = v5[1];
    *v5 = 0;
    v5[1] = 0;
    result = v5[3];
    if (result)
    {
      if (v41)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v40);
    }
  }
  v14 = (const WTF::Seconds *)*v5;
  if (!*v5)
    goto LABEL_154;
  if ((_DWORD)v11 || v13 < 0x100)
  {
    if ((_DWORD)v11 == 1 && v13 >= 0x100)
    {
      v11 = WTF::fastMalloc((WTF *)0x20);
      result = WebCore::ControlPart::ControlPart();
      v15 = off_1E34ADC58;
      goto LABEL_21;
    }
    if ((_DWORD)v11 == 2 && v13 >= 0x100)
    {
      v11 = WTF::fastMalloc((WTF *)0x20);
      result = WebCore::ControlPart::ControlPart();
      v15 = off_1E34ADC80;
      goto LABEL_21;
    }
    if ((_DWORD)v11 == 3 && v13 >= 0x100)
    {
      v11 = WTF::fastMalloc((WTF *)0x20);
      result = WebCore::ControlPart::ControlPart();
      v15 = off_1E34ADCA8;
      goto LABEL_21;
    }
    if ((_DWORD)v11 == 4 && v13 >= 0x100)
    {
      v16 = v5[1];
      if (v16 <= v5[2] - (uint64_t)v14)
      {
        v56 = 0;
        v57 = 0;
        *v5 = 0;
        v5[1] = 0;
        v58 = v5[3];
        if (v58)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
            v56 = 0;
            v89 = *v5;
            v90 = v5[1];
            v91 = v5[3];
            *v5 = 0;
            v5[1] = 0;
            v57 = 0;
            if (v91 && v90)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v89);
              v57 = *v5;
              v56 = v5[1];
            }
          }
          else
          {
            v56 = 0;
            v57 = 0;
          }
        }
      }
      else
      {
        v17 = (unsigned __int8 *)v5[2];
        v5[2] = (uint64_t)(v17 + 1);
        v18 = *v17;
        if (v18 < 3)
        {
          LODWORD(v11) = v18 | 0x100;
          goto LABEL_30;
        }
        v56 = v16;
        v57 = (uint64_t)v14;
      }
      *v5 = 0;
      v5[1] = 0;
      result = v5[3];
      if (result && v56)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v57, v56);
        LODWORD(v11) = 0;
        v14 = (const WTF::Seconds *)*v5;
        v16 = v5[1];
      }
      else
      {
        v16 = 0;
        v14 = 0;
        LODWORD(v11) = 0;
      }
LABEL_30:
      v19 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v14;
      if (v16 < v19 || v16 - v19 <= 7)
      {
        v59 = 0;
        v60 = 0;
        *v5 = 0;
        v5[1] = 0;
        v61 = v5[3];
        if (v61)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
            v60 = *v5;
            v59 = v5[1];
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
        }
      }
      else
      {
        v20 = (unint64_t *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        v5[2] = (uint64_t)(v20 + 1);
        if (v14)
        {
          LODWORD(v13) = 0;
          a3.n128_u64[0] = *v20;
          goto LABEL_34;
        }
        v59 = v16;
        v60 = 0;
      }
      *v5 = 0;
      v5[1] = 0;
      result = v5[3];
      if (result && v59)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v60, v59);
        v14 = (const WTF::Seconds *)*v5;
        v16 = v5[1];
      }
      else
      {
        v16 = 0;
        v14 = 0;
      }
      LODWORD(v13) = 1;
      a3.n128_u64[0] = 0;
LABEL_34:
      v21 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v14;
      if (v16 < v21 || v16 - v21 <= 7)
      {
        v62 = a3.n128_u64[0];
        v63 = 0;
        v64 = 0;
        *v5 = 0;
        v5[1] = 0;
        v65 = v5[3];
        if (v65)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
            v64 = *v5;
            v63 = v5[1];
          }
          else
          {
            v63 = 0;
            v64 = 0;
          }
        }
      }
      else
      {
        v22 = (unint64_t *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        v5[2] = (uint64_t)(v22 + 1);
        if (v14)
        {
          v23 = 0;
          a4.n128_u64[0] = *v22;
          goto LABEL_38;
        }
        v62 = a3.n128_u64[0];
        v63 = v16;
        v64 = 0;
      }
      *v5 = 0;
      v5[1] = 0;
      result = v5[3];
      if (result && v63)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v64, v63);
        v14 = (const WTF::Seconds *)*v5;
        v16 = v5[1];
      }
      else
      {
        v16 = 0;
        v14 = 0;
      }
      v23 = 1;
      a3.n128_u64[0] = v62;
      a4.n128_u64[0] = 0;
LABEL_38:
      v24 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v14;
      if (v16 < v24 || v16 - v24 <= 7)
      {
        v109 = v23;
        v108 = a4.n128_u64[0];
        v66 = a3.n128_u64[0];
        v67 = 0;
        v68 = 0;
        *v5 = 0;
        v5[1] = 0;
        v69 = v5[3];
        if (v69)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
            v68 = *v5;
            v67 = v5[1];
          }
          else
          {
            v67 = 0;
            v68 = 0;
          }
        }
      }
      else
      {
        v25 = (unint64_t *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        v5[2] = (uint64_t)(v25 + 1);
        if (v14)
        {
          v26 = 0;
          a5.n128_u64[0] = *v25;
LABEL_42:
          if (v11 <= 0xFF || (_DWORD)v13 || v23 || v26)
            goto LABEL_176;
          WebCore::MeterPart::create();
          result = (uint64_t)v112;
          goto LABEL_61;
        }
        v109 = v23;
        v108 = a4.n128_u64[0];
        v66 = a3.n128_u64[0];
        v67 = v16;
        v68 = 0;
      }
      *v5 = 0;
      v5[1] = 0;
      result = v5[3];
      if (!result || !v67)
        goto LABEL_154;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v68, v67);
      if (!*v5)
      {
        result = v5[3];
        v55 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        if (!result)
          goto LABEL_154;
        goto LABEL_174;
      }
      v26 = 1;
      a5.n128_u64[0] = 0;
      a3.n128_u64[0] = v66;
      a4.n128_u64[0] = v108;
      v23 = v109;
      goto LABEL_42;
    }
    if ((_DWORD)v11 == 5 && v13 >= 0x100)
    {
      v27 = v5[1];
      v28 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v14;
      LODWORD(v11) = v27 < v28 || v27 - v28 < 8;
      if ((_DWORD)v11 == 1)
      {
        *v5 = 0;
        v5[1] = 0;
        v31 = 0.0;
        v78 = v5[3];
        if (v78)
        {
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
            v79 = *v5;
            v80 = v5[1];
            v81 = v5[3];
            *v5 = 0;
            v5[1] = 0;
            if (v81)
            {
              if (v80)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v79);
            }
          }
        }
      }
      else
      {
        v30 = (double *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        v31 = *v30;
        v5[2] = (uint64_t)(v30 + 1);
      }
      result = IPC::Decoder::decode<WTF::MonotonicTime>(v5);
      v112 = (WTF::StringImpl *)result;
      v113 = v14;
      if (!*v5)
      {
LABEL_153:
        v55 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        result = v5[3];
        if (!result)
          goto LABEL_154;
LABEL_174:
        if (v55)
          goto LABEL_175;
        goto LABEL_154;
      }
      if ((_DWORD)v11 || !(_BYTE)v14)
        goto LABEL_176;
      WebCore::ProgressBarPart::create((WebCore::ProgressBarPart *)&v112, v31, v14);
      result = v115;
LABEL_61:
      if (!*v5)
      {
        *a2 = 0;
        a2[8] = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 8) == 1)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 8);
        }
        return result;
      }
      *(_QWORD *)a2 = result;
LABEL_23:
      a2[8] = 1;
      return result;
    }
    if ((_DWORD)v11 == 6 && v13 >= 0x100)
    {
      v11 = WTF::fastMalloc((WTF *)0x20);
      result = WebCore::ControlPart::ControlPart();
      v15 = off_1E34ADCD0;
      goto LABEL_21;
    }
    if ((_DWORD)v11 == 7 && v13 >= 0x100)
    {
      result = IPC::Decoder::decode<WebCore::StyleAppearance>(v5);
      if (*v5)
      {
        LODWORD(v13) = result;
        if ((unsigned __int16)result <= 0xFFu)
          goto LABEL_176;
        v11 = WTF::fastMalloc((WTF *)0x20);
        result = WebCore::ControlPart::ControlPart();
        v15 = off_1E34ADD20;
        goto LABEL_21;
      }
      goto LABEL_153;
    }
    if ((_DWORD)v11 == 8 && v13 >= 0x100)
    {
      v11 = WTF::fastMalloc((WTF *)0x20);
      result = WebCore::ControlPart::ControlPart();
      v15 = off_1E34ADD48;
      goto LABEL_21;
    }
    if ((_DWORD)v11 == 9 && v13 >= 0x100)
    {
      result = IPC::Decoder::decode<WebCore::StyleAppearance>(v5);
      if (*v5)
      {
        LODWORD(v13) = result;
        if ((unsigned __int16)result <= 0xFFu)
          goto LABEL_176;
        v11 = WTF::fastMalloc((WTF *)0x20);
        result = WebCore::ControlPart::ControlPart();
        v15 = off_1E34ADCF8;
        goto LABEL_21;
      }
      goto LABEL_153;
    }
    if ((_DWORD)v11 == 10 && v13 >= 0x100)
    {
      LODWORD(v11) = IPC::Decoder::decode<WebCore::StyleAppearance>(v5);
      v32 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v5);
      v34 = v33;
      v35 = v33;
      if (!(_BYTE)v33)
      {
        v82 = *v5;
        v83 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        v84 = v5[3];
        if (v84)
        {
          if (v83)
          {
            v110 = v32;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v82);
            v32 = v110;
          }
        }
      }
      v117 = v32;
      v118 = v34;
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v5, (uint64_t)&v115);
      result = IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, &v112);
      v13 = *v5;
      if (*v5)
      {
        if ((unsigned __int16)v11 <= 0xFFu || !v35 || !v116 || !v114)
          goto LABEL_176;
        result = WebCore::SliderTrackPart::create();
        v11 = v111;
      }
      else
      {
        v11 = 0;
      }
      if (v114)
      {
        result = (uint64_t)v112;
        if (v112)
        {
          v112 = 0;
          LODWORD(v113) = 0;
          result = WTF::fastFree((WTF *)result, v14);
        }
      }
      goto LABEL_91;
    }
    if ((_DWORD)v11 == 11 && v13 >= 0x100)
    {
      v42 = v5[1];
      if (v42 <= v5[2] - (uint64_t)v14)
      {
        *v5 = 0;
        v5[1] = 0;
        v85 = v5[3];
        if (v85)
        {
          if (v42)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
            LODWORD(v11) = 0;
            v42 = 0;
            v98 = *v5;
            v99 = v5[1];
            v100 = v5[3];
            *v5 = 0;
            v5[1] = 0;
            v14 = 0;
            if (v100 && v99)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v98, v99);
              LODWORD(v11) = 0;
              v14 = (const WTF::Seconds *)*v5;
              v42 = v5[1];
            }
            goto LABEL_217;
          }
        }
        else
        {
          v42 = 0;
        }
        v14 = 0;
        LODWORD(v11) = 0;
      }
      else
      {
        v43 = (unsigned __int8 *)v5[2];
        v5[2] = (uint64_t)(v43 + 1);
        LODWORD(v11) = *v43;
        if (v11 < 2)
        {
          LODWORD(v13) = 0;
          v44 = 1;
          goto LABEL_107;
        }
      }
LABEL_217:
      *v5 = 0;
      v5[1] = 0;
      v86 = v5[3];
      if (v86 && v42)
        (*(void (**)(uint64_t, const WTF::Seconds *))(*(_QWORD *)v86 + 16))(v86, v14);
      v44 = 0;
      LODWORD(v13) = 1;
LABEL_107:
      if ((_DWORD)v11)
        v45 = v44;
      else
        v45 = 0;
      result = IPC::Decoder::decode<float>(v5);
      v14 = (const WTF::Seconds *)*v5;
      if (*v5)
      {
        LODWORD(v11) = result;
        if ((result & 0xFF00000000) != 0)
        {
          a3.n128_u32[0] = result;
          if (*(float *)&result >= 0.0)
          {
            a4.n128_u32[0] = 1.0;
            if (*(float *)&result <= 1.0)
            {
              if ((_DWORD)v13)
                goto LABEL_176;
              v46 = WTF::fastMalloc((WTF *)0x28);
              result = WebCore::ControlPart::ControlPart();
              v47 = off_1E34ADE10;
              goto LABEL_132;
            }
          }
        }
      }
      goto LABEL_134;
    }
    if ((_DWORD)v11 != 12 || v13 < 0x100)
    {
      if ((_DWORD)v11 == 13 && v13 >= 0x100)
      {
        result = IPC::Decoder::decode<WebCore::StyleAppearance>(v5);
        if (*v5)
        {
          LODWORD(v13) = result;
          if ((unsigned __int16)result <= 0xFFu)
            goto LABEL_176;
          v11 = WTF::fastMalloc((WTF *)0x20);
          result = WebCore::ControlPart::ControlPart();
          v15 = off_1E34ADD70;
          goto LABEL_21;
        }
      }
      else
      {
        if ((_DWORD)v11 == 14 && v13 >= 0x100)
        {
          v11 = WTF::fastMalloc((WTF *)0x20);
          result = WebCore::ControlPart::ControlPart();
          v15 = off_1E34ADD98;
          goto LABEL_21;
        }
        if ((_DWORD)v11 != 15 || v13 < 0x100)
          goto LABEL_177;
        result = IPC::Decoder::decode<WebCore::StyleAppearance>(v5);
        if (*v5)
        {
          LODWORD(v13) = result;
          if ((unsigned __int16)result <= 0xFFu)
            goto LABEL_176;
          v11 = WTF::fastMalloc((WTF *)0x20);
          result = WebCore::ControlPart::ControlPart();
          v15 = off_1E34ADDC0;
          goto LABEL_21;
        }
      }
      goto LABEL_153;
    }
    v48 = v5[1];
    if (v48 <= v5[2] - (uint64_t)v14)
    {
      *v5 = 0;
      v5[1] = 0;
      v87 = v5[3];
      if (v87)
      {
        if (v48)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
          LODWORD(v11) = 0;
          v48 = 0;
          v101 = *v5;
          v102 = v5[1];
          v103 = v5[3];
          *v5 = 0;
          v5[1] = 0;
          v14 = 0;
          if (v103 && v102)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v101, v102);
            LODWORD(v11) = 0;
            v14 = (const WTF::Seconds *)*v5;
            v48 = v5[1];
          }
          goto LABEL_222;
        }
      }
      else
      {
        v48 = 0;
      }
      v14 = 0;
      LODWORD(v11) = 0;
    }
    else
    {
      v49 = (unsigned __int8 *)v5[2];
      v5[2] = (uint64_t)(v49 + 1);
      LODWORD(v11) = *v49;
      if (v11 < 2)
      {
        LODWORD(v13) = 0;
        v50 = 1;
        goto LABEL_123;
      }
    }
LABEL_222:
    *v5 = 0;
    v5[1] = 0;
    v88 = v5[3];
    if (v88 && v48)
      (*(void (**)(uint64_t, const WTF::Seconds *))(*(_QWORD *)v88 + 16))(v88, v14);
    v50 = 0;
    LODWORD(v13) = 1;
LABEL_123:
    if ((_DWORD)v11)
      v45 = v50;
    else
      v45 = 0;
    result = IPC::Decoder::decode<float>(v5);
    v14 = (const WTF::Seconds *)*v5;
    if (*v5)
    {
      LODWORD(v11) = result;
      if ((result & 0xFF00000000) != 0)
      {
        a3.n128_u32[0] = result;
        if (*(float *)&result >= 0.0)
        {
          a4.n128_u32[0] = 1.0;
          if (*(float *)&result <= 1.0)
          {
            if ((_DWORD)v13)
              goto LABEL_176;
            v46 = WTF::fastMalloc((WTF *)0x28);
            result = WebCore::ControlPart::ControlPart();
            v47 = off_1E34ADE38;
LABEL_132:
            *(_QWORD *)v46 = v47;
            *(_BYTE *)(v46 + 32) = v45;
            *(_DWORD *)(v46 + 36) = v11;
            if (*v5)
            {
              *(_QWORD *)a2 = v46;
              goto LABEL_23;
            }
            *a2 = 0;
            a2[8] = 0;
            if (*(_DWORD *)(v46 + 8) != 1)
            {
              --*(_DWORD *)(v46 + 8);
              return result;
            }
            v52 = (WebCore::ControlPart *)v46;
            goto LABEL_139;
          }
        }
      }
    }
LABEL_134:
    v51 = v5[1];
    goto LABEL_135;
  }
  result = IPC::Decoder::decode<WebCore::StyleAppearance>(v5);
  if (!*v5)
    goto LABEL_153;
  LODWORD(v13) = result;
  if ((unsigned __int16)result > 0xFFu)
  {
    v11 = WTF::fastMalloc((WTF *)0x20);
    result = WebCore::ControlPart::ControlPart();
    v15 = off_1E34ADC08;
LABEL_21:
    *(_QWORD *)v11 = v15;
    if (*v5)
    {
LABEL_22:
      *(_QWORD *)a2 = v11;
      goto LABEL_23;
    }
    *a2 = 0;
    a2[8] = 0;
    v36 = *(_DWORD *)(v11 + 8) - 1;
    if (*(_DWORD *)(v11 + 8) != 1)
    {
LABEL_117:
      *(_DWORD *)(v11 + 8) = v36;
      return result;
    }
    v52 = (WebCore::ControlPart *)v11;
LABEL_139:
    WebCore::ControlPart::~ControlPart(v52);
    return WTF::fastFree(v53, v54);
  }
LABEL_176:
  while (1)
  {
    __break(1u);
LABEL_177:
    if ((_DWORD)v11 != 16 || v13 < 0x100)
      break;
    v70 = v5[1];
    if (v70 <= v5[2] - (uint64_t)v14)
    {
      v92 = 0;
      v93 = 0;
      *v5 = 0;
      v5[1] = 0;
      v94 = v5[3];
      if (v94)
      {
        if (v70)
        {
          (*(void (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)v94 + 16))(v94, a3, a4, a5);
          v92 = 0;
          v105 = *v5;
          v106 = v5[1];
          v107 = v5[3];
          *v5 = 0;
          v5[1] = 0;
          v93 = 0;
          if (v107 && v106)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v105);
            v93 = *v5;
            v92 = v5[1];
          }
        }
        else
        {
          v92 = 0;
          v93 = 0;
        }
      }
    }
    else
    {
      v71 = (unsigned __int8 *)v5[2];
      v72 = v71 + 1;
      v5[2] = (uint64_t)(v71 + 1);
      v73 = *v71;
      if (v73 < 0xF)
      {
        LODWORD(v11) = v73 | 0x100;
        goto LABEL_182;
      }
      v92 = v70;
      v93 = (uint64_t)v14;
    }
    *v5 = 0;
    v5[1] = 0;
    v95 = v5[3];
    if (!v95 || !v92)
    {
      LODWORD(v11) = 0;
      goto LABEL_247;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128))(*(_QWORD *)v95 + 16))(v95, v93, v92, a3, a4, a5);
    LODWORD(v11) = 0;
    v14 = (const WTF::Seconds *)*v5;
    v70 = v5[1];
    v72 = (unsigned __int8 *)v5[2];
LABEL_182:
    v74 = v72 - (unsigned __int8 *)v14;
    if (v70 <= v74)
    {
      v104 = v5[3];
      *v5 = 0;
      v5[1] = 0;
      if (v70)
      {
        if (v104)
        {
          (*(void (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)v104 + 16))(v104, a3, a4, a5);
          v14 = (const WTF::Seconds *)*v5;
          v70 = v5[1];
          goto LABEL_249;
        }
LABEL_247:
        v70 = 0;
      }
      v14 = 0;
      goto LABEL_249;
    }
    v75 = (unsigned __int8 *)v14 + v74;
    v5[2] = (uint64_t)(v75 + 1);
    if (v14)
    {
      v76 = *v75;
      if (v76 < 3)
      {
        v77 = v76 | 0x100;
        goto LABEL_186;
      }
      goto LABEL_252;
    }
LABEL_249:
    *v5 = 0;
    v5[1] = 0;
    v96 = v5[3];
    if (!v96)
    {
      v70 = 0;
LABEL_251:
      v14 = 0;
      goto LABEL_252;
    }
    if (!v70)
      goto LABEL_251;
    (*(void (**)(uint64_t, const WTF::Seconds *, __n128, __n128, __n128))(*(_QWORD *)v96 + 16))(v96, v14, a3, a4, a5);
    v14 = (const WTF::Seconds *)*v5;
    v70 = v5[1];
LABEL_252:
    *v5 = 0;
    v5[1] = 0;
    v97 = v5[3];
    if (v97 && v70)
      (*(void (**)(uint64_t, const WTF::Seconds *, __n128, __n128, __n128))(*(_QWORD *)v97 + 16))(v97, v14, a3, a4, a5);
    v77 = 0;
LABEL_186:
    result = (uint64_t)IPC::Decoder::decode<WTF::String>(v5, &v112);
    v13 = *v5;
    if (!*v5)
    {
      v11 = 0;
      goto LABEL_191;
    }
    if (v11 > 0xFF && v77 > 0xFF && (_BYTE)v113)
    {
      result = WebCore::ApplePayButtonPart::create();
      v11 = v115;
LABEL_191:
      if ((_BYTE)v113)
      {
        result = (uint64_t)v112;
        v112 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
          else
            *(_DWORD *)result -= 2;
        }
      }
LABEL_91:
      if (v13)
      {
        if (*v5)
          goto LABEL_22;
        *a2 = 0;
        a2[8] = 0;
        if (v11)
        {
          v36 = *(_DWORD *)(v11 + 8) - 1;
          if (*(_DWORD *)(v11 + 8) != 1)
            goto LABEL_117;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        return result;
      }
      v51 = v5[1];
LABEL_135:
      *v5 = 0;
      v5[1] = 0;
      result = v5[3];
      if (!result || !v51)
        goto LABEL_154;
LABEL_175:
      result = (*(uint64_t (**)(__n128))(*(_QWORD *)result + 16))(a3);
      if (!*v5)
        goto LABEL_154;
    }
  }
  if ((_DWORD)v11 == 17 && v13 >= 0x100)
  {
    v11 = WTF::fastMalloc((WTF *)0x20);
    result = WebCore::ControlPart::ControlPart();
    v15 = off_1E34ADDE8;
    goto LABEL_21;
  }
LABEL_154:
  *a2 = 0;
  a2[8] = 0;
  return result;
}

void sub_196E5EA90(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, int a14, int a15, char a16)
{
  WTF *v16;

  WTF::fastFree(v16, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::StyleAppearance>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 0x21)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

void IPC::ArgumentCoder<WebCore::FEBlend,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)a1 + 2);
  if (v2 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v2) = *(_BYTE *)(a2 + 64);
    *((_QWORD *)a1 + 2) = v2 + 1;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 72), *(unsigned int *)(a2 + 84));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v4) = *(_BYTE *)(a2 + 64);
    *((_QWORD *)a1 + 2) = v4 + 1;
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 72), *(unsigned int *)(a2 + 84));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

uint64_t *WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v5 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v5);
LABEL_7:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v12 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v12 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

char *IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36));
}

_QWORD *IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4) = *(_BYTE *)a2;
    a1[2] = v4 + 1;
  }
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 4));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 8));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 12));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 16));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 20));
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36));
}

void IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  void *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  __int128 v12;
  uint64_t v13;
  WTF *v14;
  int v15;

  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 80);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 88);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v5 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v5, v4);
  }
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 120);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 128);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v7 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v7, v6);
  }
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 160);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 168);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v9 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v9, v8);
  }
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_QWORD *)(a2 + 200);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 208);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v11 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v11, v10);
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void sub_196E5F0AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13)
{
  if (a12)
    WTF::fastFree(a12, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  void *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  __int128 v12;
  uint64_t v13;
  WTF *v14;
  int v15;

  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 80);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 88);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v5 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v5, v4);
  }
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 120);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 128);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v7 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v7, v6);
  }
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 160);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 168);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v9 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v9, v8);
  }
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_QWORD *)(a2 + 200);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 208);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  v11 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v11, v10);
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void sub_196E5F220(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13)
{
  if (a12)
    WTF::fastFree(a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ComponentTransferFunction>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26[2];
  char v27;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_16;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v19 = v6;
    v20 = 0;
    goto LABEL_17;
  }
  v9 = *v8;
  if (v9 >= 6)
    goto LABEL_18;
  for (i = v9 | 0x100; ; i = 0)
  {
    v11 = IPC::Decoder::decode<float>(a2);
    v12 = IPC::Decoder::decode<float>(a2);
    v13 = IPC::Decoder::decode<float>(a2);
    v14 = IPC::Decoder::decode<float>(a2);
    v15 = IPC::Decoder::decode<float>(a2);
    result = IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v26, a2);
    if (!*a2)
      break;
    if (i > 0xFF
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && (v15 & 0xFF00000000) != 0
      && v27)
    {
      v18 = v26[0];
      *(_BYTE *)a1 = i;
      *(_DWORD *)(a1 + 4) = v11;
      *(_DWORD *)(a1 + 8) = v12;
      *(_DWORD *)(a1 + 12) = v13;
      *(_DWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 20) = v15;
      *(_QWORD *)(a1 + 24) = v18;
      *(WTF **)(a1 + 32) = v26[1];
      *(_BYTE *)(a1 + 40) = 1;
      return result;
    }
    __break(1u);
LABEL_16:
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
LABEL_17:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v5);
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v27 && v26[0])
    WTF::fastFree(v26[0], v17);
  v24 = *a2;
  v25 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v25)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
  return result;
}

void IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v21;
  unint64_t v22;

  v2 = *((_QWORD *)a1 + 2);
  if (v2 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v2++) = *(_BYTE *)(a2 + 64);
    *((_QWORD *)a1 + 2) = v2;
  }
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)a1 + v2;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v2;
    v9 = v7 + v2 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v8) = *(_DWORD *)(a2 + 68);
      *((_QWORD *)a1 + 2) = v9;
      v3 = *(_QWORD *)a1;
      v2 = v9;
    }
  }
  v11 = (v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v3 + v2);
  if (v11 >= v3 + v2)
  {
    v13 = v11 - v3;
    v14 = v12 + v2 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v13) = *(_DWORD *)(a2 + 72);
      *((_QWORD *)a1 + 2) = v14;
      v3 = *(_QWORD *)a1;
      v2 = v14;
    }
  }
  v16 = (v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v3 + v2);
  if (v16 >= v3 + v2)
  {
    v18 = v16 - v3;
    v19 = v17 + v2 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v18) = *(_DWORD *)(a2 + 76);
      *((_QWORD *)a1 + 2) = v19;
      v3 = *(_QWORD *)a1;
      v2 = v19;
    }
  }
  v21 = (_DWORD *)((v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v21 >= v3 + v2)
  {
    v22 = (unint64_t)v21 - v3 + 4;
    if ((unint64_t)v21 - v3 > 0xFFFFFFFFFFFFFFFBLL || v22 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *v21 = *(_DWORD *)(a2 + 80);
      *((_QWORD *)a1 + 2) = v22;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;

  v10 = *(_QWORD *)(a2 + 64);
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, &v10);
  v4 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v10 = *(_QWORD *)(a2 + 80);
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, &v10);
  v6 = *(_BYTE *)(a2 + 88);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_DWORD *)(a2 + 92);
  v8 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *(_BYTE *)(a2 + 100);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 104), *(unsigned int *)(a2 + 116));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *(_QWORD *)(a2 + 64);
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v22);
  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v7 >= v6;
  v8 = v7 - v6;
  if (v12)
  {
    v9 = v8 + v5;
    v10 = v8 + v5 + 4;
    v11 = a1[1];
    if (v9 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v12 = v10 >= v11;
      v13 = v10 == v11;
    }
    else
    {
      v12 = 1;
      v13 = 0;
    }
    if (!v13 && v12)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v9) = *(_DWORD *)(a2 + 72);
      a1[2] = v10;
      v4 = *a1;
      v5 = v10;
    }
  }
  v14 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v14 >= v4 + v5)
  {
    v15 = v14 - v4;
    v16 = v14 - v4 + 4;
    v17 = a1[1];
    if (v15 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v18 = v16 >= v17;
      v19 = v16 == v17;
    }
    else
    {
      v18 = 1;
      v19 = 0;
    }
    if (!v19 && v18)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 76);
      a1[2] = v16;
    }
  }
  v22 = *(_QWORD *)(a2 + 80);
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v22);
  v20 = a1[2];
  if (v20 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v20) = *(_BYTE *)(a2 + 88);
    a1[2] = v20 + 1;
  }
  v22 = *(_QWORD *)(a2 + 92);
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v22);
  v21 = a1[2];
  if (v21 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v21) = *(_BYTE *)(a2 + 100);
    a1[2] = v21 + 1;
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 104), *(unsigned int *)(a2 + 116));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

uint64_t IPC::Decoder::decode<WebCore::EdgeModeType>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 4)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

void IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  v4 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD **)(a2 + 96);
  ++v8[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode((char *)a1, (uint64_t)v8);
  if (v8[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  else
    --v8[2];
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v26;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 72);
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    v15 = v13 - v4;
    v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 76);
      a1[2] = v16;
      v4 = *a1;
      v5 = v16;
    }
  }
  v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    v20 = v18 - v4;
    v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 88);
      a1[2] = v21;
      v4 = *a1;
      v5 = v21;
    }
  }
  v23 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v23 >= v4 + v5)
  {
    v24 = (unint64_t)v23 - v4 + 4;
    if ((unint64_t)v23 - v4 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v23 = *(_DWORD *)(a2 + 92);
      a1[2] = v24;
    }
  }
  v26 = *(_DWORD **)(a2 + 96);
  ++v26[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode(a1, (uint64_t)v26);
  if (v26[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
  else
    --v26[2];
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

_DWORD *IPC::Decoder::decode<WTF::Ref<WebCore::LightSource,WTF::RawPtrTraits<WebCore::LightSource>,WTF::DefaultRefDerefTraits<WebCore::LightSource>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_23;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
LABEL_43:
    v19 = v6;
    v20 = v5;
LABEL_23:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_24;
  }
  v9 = *v8;
  if (v9 >= 3)
  {
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v5);
    goto LABEL_28;
  }
  if (v9 == 1)
  {
    IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    if (*a2)
    {
      if ((v5 & 0xFF00000000) != 0)
      {
        WebCore::PointLightSource::create();
        result = v29;
        goto LABEL_19;
      }
      goto LABEL_42;
    }
    goto LABEL_27;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    v14 = v13;
    IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    v16 = v15;
    v17 = IPC::Decoder::decode<float>(a2);
    v18 = IPC::Decoder::decode<float>(a2);
    if (*a2)
    {
      if ((v14 & 0xFF00000000) != 0
        && (v16 & 0xFF00000000) != 0
        && (v17 & 0xFF00000000) != 0
        && (v18 & 0xFF00000000) != 0)
      {
        WebCore::SpotLightSource::create();
        result = v28;
        goto LABEL_19;
      }
      goto LABEL_42;
    }
LABEL_27:
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (!v25 || !v24 || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, 0), !*a2))
    {
LABEL_28:
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_29;
    }
    goto LABEL_42;
  }
  v10 = IPC::Decoder::decode<float>(a2);
  v11 = IPC::Decoder::decode<float>(a2);
  if (!*a2)
    goto LABEL_27;
  if ((v10 & 0xFF00000000) == 0 || (v11 & 0xFF00000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  WebCore::DistantLightSource::create((WebCore::DistantLightSource *)v11, *(float *)&v10, *(float *)&v11);
  result = v30;
LABEL_19:
  if (*a2)
  {
    *(_QWORD *)a1 = result;
    a1[8] = 1;
    return result;
  }
  *a1 = 0;
  a1[8] = 0;
  if (result)
  {
    if (result[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
LABEL_29:
  v26 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_DWORD *)a2[3];
  if (result)
  {
    if (v27)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 16))(result, v26);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  int v6;

  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 65);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((_QWORD *)a1 + 2);
  if (v2 < *((_QWORD *)a1 + 1))
  {
    v3 = v2 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v2) = *(_BYTE *)(a2 + 64);
    *((_QWORD *)a1 + 2) = v2 + 1;
    if (v2 + 1 < *((_QWORD *)a1 + 1))
    {
      v2 += 2;
      *(_BYTE *)(*(_QWORD *)a1 + v3) = *(_BYTE *)(a2 + 65);
      *((_QWORD *)a1 + 2) = v2;
      goto LABEL_4;
    }
    ++v2;
  }
  *((_QWORD *)a1 + 1) = 0;
LABEL_4:
  v4 = *(_QWORD *)a1 + v2;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v2;
    v9 = v8 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v8) = *(_DWORD *)(a2 + 68);
      *((_QWORD *)a1 + 2) = v9;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v4 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 80));
  v8 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 64);
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    v15 = v13 - v4;
    v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 68);
      a1[2] = v16;
      v4 = *a1;
      v5 = v16;
    }
  }
  v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    v20 = v18 - v4;
    v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 72);
      a1[2] = v21;
      v4 = *a1;
      v5 = v21;
    }
  }
  v23 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v23 >= v4 + v5)
  {
    v24 = (unint64_t)v23 - v4 + 4;
    if ((unint64_t)v23 - v4 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v23 = *(_DWORD *)(a2 + 76);
      a1[2] = v24;
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 80));
  v26 = a1[2];
  v27 = *a1 + v26;
  v28 = (v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v28 >= v27;
  v29 = v28 - v27;
  if (v8)
  {
    v30 = v29 + v26;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v30) = *(_DWORD *)(a2 + 88);
      a1[2] = v30 + 4;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  v4 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 72);
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;

  v4 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_BYTE *)(a2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;

  v2 = *(_QWORD *)a1;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *(_QWORD *)a1 + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v5 >= v4;
  v6 = v5 - v4;
  if (v10)
  {
    v7 = v6 + v3;
    v8 = v6 + v3 + 4;
    v9 = *((_QWORD *)a1 + 1);
    if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v10 = v8 >= v9;
      v11 = v8 == v9;
    }
    else
    {
      v10 = 1;
      v11 = 0;
    }
    if (!v11 && v10)
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v7) = *(_DWORD *)(a2 + 64);
      *((_QWORD *)a1 + 2) = v8;
      v2 = *(_QWORD *)a1;
      v3 = v8;
    }
  }
  v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 - (v2 + v3);
  if (v12 >= v2 + v3)
  {
    v14 = v12 - v2;
    v15 = v13 + v3 + 4;
    v16 = *((_QWORD *)a1 + 1);
    if (v14 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v17 = v15 >= v16;
      v18 = v15 == v16;
    }
    else
    {
      v17 = 1;
      v18 = 0;
    }
    if (!v18 && v17)
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v14) = *(_DWORD *)(a2 + 68);
      *((_QWORD *)a1 + 2) = v15;
      v3 = v15;
    }
  }
  if (v3 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v3) = *(_BYTE *)(a2 + 72);
    *((_QWORD *)a1 + 2) = v3 + 1;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

char *IPC::ArgumentCoder<WebCore::FEImage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *result;
  __int128 v6;

  v2 = a2;
  v4 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(a2 + 64));
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v6 = *(_OWORD *)(v2 + 104);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v6);
  LOBYTE(v4) = *(_BYTE *)(v2 + 120);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 121);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::FEImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *result;
  unint64_t v14;
  __int128 v15;

  v4 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(a2 + 64));
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v10) = v4;
      a1[2] = v11;
    }
  }
  v15 = *(_OWORD *)(a2 + 104);
  result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v15);
  v14 = a1[2];
  if (v14 >= a1[1] || (*(_BYTE *)(*a1 + v14) = *(_BYTE *)(a2 + 120), a1[2] = v14 + 1, v14 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v14 + 1) = *(_BYTE *)(a2 + 121);
    a1[2] = v14 + 2;
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FEMerge,void>::encode(WTF::StringImpl *a1, CFTypeRef *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = (*((uint64_t (**)(CFTypeRef *))*a2 + 12))(a2);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *(_QWORD *)a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v10) = v4;
      *((_QWORD *)a1 + 2) = v11;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, a2 + 7);
}

void IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;

  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  unint64_t v12;

  v2 = *((_QWORD *)a1 + 2);
  if (v2 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v2++) = *(_BYTE *)(a2 + 64);
    *((_QWORD *)a1 + 2) = v2;
  }
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)a1 + v2;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v2;
    v9 = v7 + v2 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v8) = *(_DWORD *)(a2 + 68);
      *((_QWORD *)a1 + 2) = v9;
      v3 = *(_QWORD *)a1;
      v2 = v9;
    }
  }
  v11 = (_DWORD *)((v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v11 >= v3 + v2)
  {
    v12 = (unint64_t)v11 - v3 + 4;
    if ((unint64_t)v11 - v3 > 0xFFFFFFFFFFFFFFFBLL || v12 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *v11 = *(_DWORD *)(a2 + 72);
      *((_QWORD *)a1 + 2) = v12;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;

  v2 = *(_QWORD *)a1;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *(_QWORD *)a1 + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v5 >= v4;
  v6 = v5 - v4;
  if (v10)
  {
    v7 = v6 + v3;
    v8 = v6 + v3 + 4;
    v9 = *((_QWORD *)a1 + 1);
    if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v10 = v8 >= v9;
      v11 = v8 == v9;
    }
    else
    {
      v10 = 1;
      v11 = 0;
    }
    if (!v11 && v10)
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v7) = *(_DWORD *)(a2 + 64);
      *((_QWORD *)a1 + 2) = v8;
      v2 = *(_QWORD *)a1;
      v3 = v8;
    }
  }
  v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v12 >= v2 + v3)
  {
    v13 = v12 - v2;
    v14 = v12 - v2 + 4;
    v15 = *((_QWORD *)a1 + 1);
    if (v13 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v16 = v14 >= v15;
      v17 = v14 == v15;
    }
    else
    {
      v16 = 1;
      v17 = 0;
    }
    if (!v17 && v16)
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 68);
      *((_QWORD *)a1 + 2) = v14;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _DWORD *v9;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  v4 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *(_DWORD **)(a2 + 96);
  ++v9[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode((char *)a1, (uint64_t)v9);
  if (v9[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  else
    --v9[2];
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v28;
  char *v29;
  _DWORD *v30;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 72);
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    v15 = v13 - v4;
    v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 80);
      a1[2] = v16;
      v4 = *a1;
      v5 = v16;
    }
  }
  v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    v20 = v18 - v4;
    v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 84);
      a1[2] = v21;
      v4 = *a1;
      v5 = v21;
    }
  }
  v23 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v4 + v5);
  if (v23 >= v4 + v5)
  {
    v25 = v23 - v4;
    v26 = v24 + v5 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v25) = *(_DWORD *)(a2 + 88);
      a1[2] = v26;
      v4 = *a1;
      v5 = v26;
    }
  }
  v28 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v28 >= v4 + v5)
  {
    v29 = (char *)v28 - v4;
    if ((unint64_t)v28 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v28 = *(_DWORD *)(a2 + 92);
      a1[2] = (uint64_t)(v29 + 4);
    }
  }
  v30 = *(_DWORD **)(a2 + 96);
  ++v30[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode(a1, (uint64_t)v30);
  if (v30[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
  else
    --v30[2];
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  LOBYTE(v7) = *(_BYTE *)(a2 + 84);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v12;
  unint64_t v13;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v3++) = *(_BYTE *)(a2 + 64);
    a1[2] = v3;
  }
  v4 = *a1;
  v5 = *a1 + v3;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v3;
    v10 = v8 + v3 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v9) = *(_DWORD *)(a2 + 68);
      a1[2] = v10;
      v4 = *a1;
      v3 = v10;
    }
  }
  v12 = (_DWORD *)((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v12 >= v4 + v3)
  {
    v13 = (unint64_t)v12 - v4 + 4;
    if ((unint64_t)v12 - v4 > 0xFFFFFFFFFFFFFFFBLL || v13 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v12 = *(_DWORD *)(a2 + 72);
      a1[2] = v13;
    }
  }
  v15 = (WTF::StringImpl *)IPC::StreamConnectionEncoder::operator<<<int>(a1, *(_DWORD *)(a2 + 76));
  v17 = *((_QWORD *)v15 + 1);
  v16 = *((_QWORD *)v15 + 2);
  v18 = *(_QWORD *)v15 + v16;
  v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v19 >= v18;
  v20 = v19 - v18;
  if (v7)
  {
    v21 = v20 + v16;
    v22 = v20 + v16 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v17)
    {
      v17 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)v15 + v21) = *(_DWORD *)(a2 + 80);
      *((_QWORD *)v15 + 2) = v22;
      v17 = *((_QWORD *)v15 + 1);
      v16 = v22;
    }
  }
  if (v16 >= v17)
  {
    *((_QWORD *)v15 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v15 + v16) = *(_BYTE *)(a2 + 84);
    *((_QWORD *)v15 + 2) = v16 + 1;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v15, (CFTypeRef *)(a2 + 56));
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::FilterEffectGeometry::Flags>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 0x10)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::SVGFilterExpressionTerm,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  return IPC::ArgumentCoder<std::optional<WebCore::FilterEffectGeometry>,void>::encode<IPC::Encoder,std::optional<WebCore::FilterEffectGeometry> const&>(a1, (uint64_t)(a2 + 2));
}

_QWORD *IPC::ArgumentCoder<WebCore::GamepadEffectParameters,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v3 = result[1];
  v4 = *result;
  v5 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    result[2] = v7 + 1;
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      goto LABEL_8;
    }
    v32 = v3;
    v33 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (v2)
      goto LABEL_74;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (!v2)
    {
      v3 = 0;
      v4 = 0;
      v9 = 0;
LABEL_41:
      v8 = 1;
      goto LABEL_8;
    }
    v111 = result;
    v122 = a2;
    if (v32)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v33, v32);
      v9 = 0;
      result = v111;
      a2 = v122;
      v4 = *v111;
      v3 = v111[1];
      goto LABEL_41;
    }
    v3 = 0;
    v4 = 0;
    v9 = 0;
    v8 = 1;
LABEL_8:
    v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v12 + 1;
      if (v4)
      {
        v13 = 0;
        v14 = *v12;
        goto LABEL_15;
      }
      v34 = v3;
      v35 = 0;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      *result = 0;
      result[1] = 0;
      v36 = result[3];
      if (v36)
      {
        v106 = v8;
        v96 = v9;
        v117 = result;
        v129 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
          result = v117;
          a2 = v129;
          v35 = *v117;
          v34 = v117[1];
        }
        else
        {
          v34 = 0;
          v35 = 0;
        }
        v9 = v96;
        v8 = v106;
      }
    }
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (v2)
    {
      v101 = v8;
      v91 = v9;
      v112 = result;
      v123 = a2;
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v35, v34);
        v14 = 0;
        result = v112;
        a2 = v123;
        v4 = *v112;
        v3 = v112[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v14 = 0;
      }
      v13 = 1;
      v9 = v91;
      v8 = v101;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v14 = 0;
      v13 = 1;
    }
LABEL_15:
    v15 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v15 || v3 - v15 <= 7)
    {
      v37 = 0;
      v38 = 0;
      *result = 0;
      result[1] = 0;
      v39 = result[3];
      if (v39)
      {
        v87 = v13;
        v79 = v14;
        v107 = v8;
        v97 = v9;
        v118 = result;
        v130 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
          result = v118;
          a2 = v130;
          v38 = *v118;
          v37 = v118[1];
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        v9 = v97;
        v8 = v107;
        v14 = v79;
        v13 = v87;
      }
    }
    else
    {
      v16 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v16 + 1;
      if (v4)
      {
        v17 = 0;
        v18 = *v16;
        goto LABEL_19;
      }
      v37 = v3;
      v38 = 0;
    }
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (v2)
    {
      v83 = v13;
      v75 = v14;
      v102 = v8;
      v92 = v9;
      v113 = result;
      v124 = a2;
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v38, v37);
        v18 = 0;
        result = v113;
        a2 = v124;
        v4 = *v113;
        v3 = v113[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v18 = 0;
      }
      v17 = 1;
      v9 = v92;
      v8 = v102;
      v14 = v75;
      v13 = v83;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v18 = 0;
      v17 = 1;
    }
LABEL_19:
    v19 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v19 || v3 - v19 <= 7)
    {
      v40 = 0;
      v41 = 0;
      *result = 0;
      result[1] = 0;
      v42 = result[3];
      if (v42)
      {
        v72 = v17;
        v66 = v18;
        v88 = v13;
        v80 = v14;
        v108 = v8;
        v98 = v9;
        v119 = result;
        v131 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
          result = v119;
          a2 = v131;
          v41 = *v119;
          v40 = v119[1];
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        v9 = v98;
        v8 = v108;
        v14 = v80;
        v13 = v88;
        v18 = v66;
        v17 = v72;
      }
    }
    else
    {
      v20 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v20 + 1;
      if (v4)
      {
        v21 = 0;
        v22 = *v20;
        goto LABEL_23;
      }
      v40 = v3;
      v41 = 0;
    }
    *result = 0;
    result[1] = 0;
    v2 = result[3];
    if (v2)
    {
      v69 = v17;
      v63 = v18;
      v84 = v13;
      v76 = v14;
      v103 = v8;
      v93 = v9;
      v114 = result;
      v125 = a2;
      if (v40)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v41, v40);
        v22 = 0;
        result = v114;
        a2 = v125;
        v4 = *v114;
        v3 = v114[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v22 = 0;
      }
      v21 = 1;
      v9 = v93;
      v8 = v103;
      v14 = v76;
      v13 = v84;
      v18 = v63;
      v17 = v69;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v22 = 0;
      v21 = 1;
    }
LABEL_23:
    v23 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v23 || v3 - v23 <= 7)
    {
      v43 = 0;
      v44 = 0;
      *result = 0;
      result[1] = 0;
      v45 = result[3];
      if (v45)
      {
        v61 = v21;
        v57 = v22;
        v73 = v17;
        v67 = v18;
        v89 = v13;
        v81 = v14;
        v109 = v8;
        v99 = v9;
        v120 = result;
        v132 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          result = v120;
          a2 = v132;
          v44 = *v120;
          v43 = v120[1];
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
        v9 = v99;
        v8 = v109;
        v14 = v81;
        v13 = v89;
        v18 = v67;
        v17 = v73;
        v22 = v57;
        v21 = v61;
      }
    }
    else
    {
      v24 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v24 + 1;
      if (v4)
      {
        v25 = 0;
        v26 = *v24;
        goto LABEL_27;
      }
      v43 = v3;
      v44 = 0;
    }
    *result = 0;
    result[1] = 0;
    v26 = 0;
    v2 = result[3];
    if (v2)
    {
      v59 = v21;
      v55 = v22;
      v70 = v17;
      v64 = v18;
      v85 = v13;
      v77 = v14;
      v104 = v8;
      v94 = v9;
      v115 = result;
      v126 = a2;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v2 + 16))(v2, v44, v43, 0.0);
        result = v115;
        a2 = v126;
        v4 = *v115;
        v3 = v115[1];
        v25 = 1;
        v9 = v94;
        v8 = v104;
        v14 = v77;
        v13 = v85;
        v18 = v64;
        v17 = v70;
        v22 = v55;
        v21 = v59;
        v26 = 0;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v25 = 1;
      }
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v25 = 1;
    }
LABEL_27:
    v27 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v27 || v3 - v27 <= 7)
    {
      v46 = 0;
      v47 = 0;
      *result = 0;
      result[1] = 0;
      v48 = result[3];
      if (v48)
      {
        v54 = v25;
        v52 = v26;
        v62 = v21;
        v58 = v22;
        v74 = v17;
        v68 = v18;
        v90 = v13;
        v82 = v14;
        v110 = v8;
        v100 = v9;
        v121 = result;
        v133 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
          result = v121;
          a2 = v133;
          v47 = *v121;
          v46 = v121[1];
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
        v9 = v100;
        v8 = v110;
        v14 = v82;
        v13 = v90;
        v18 = v68;
        v17 = v74;
        v22 = v58;
        v21 = v62;
        v26 = v52;
        v25 = v54;
      }
    }
    else
    {
      v28 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v28 + 1;
      if (v4)
      {
        v29 = 0;
        v30 = *v28;
        if (v8)
          goto LABEL_73;
        goto LABEL_31;
      }
      v46 = v3;
      v47 = 0;
    }
    *result = 0;
    result[1] = 0;
    v49 = result[3];
    if (!v49)
      break;
    if (!v46)
      break;
    v50 = result;
    v127 = a2;
    v95 = v9;
    v105 = v8;
    v78 = v14;
    v86 = v13;
    v65 = v18;
    v71 = v17;
    v56 = v22;
    v60 = v21;
    v51 = v26;
    v53 = v25;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v49 + 16))(result[3], v47, v46);
    v25 = v53;
    v26 = v51;
    v21 = v60;
    v22 = v56;
    v17 = v71;
    v18 = v65;
    v13 = v86;
    v14 = v78;
    v9 = v95;
    a2 = v127;
    if (!*v50)
      break;
    v29 = 1;
    v30 = 0;
    if (v105)
      goto LABEL_73;
LABEL_31:
    if (!v13 && !v17 && !v21 && !v25 && !v29)
    {
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = v18;
      *(_QWORD *)(a2 + 24) = v22;
      v31 = 1;
      *(_QWORD *)(a2 + 32) = v26;
      *(_QWORD *)(a2 + 40) = v30;
      goto LABEL_37;
    }
LABEL_73:
    __break(1u);
LABEL_74:
    v116 = result;
    v128 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      result = v116;
      a2 = v128;
      v33 = *v116;
      v32 = v116[1];
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
  }
  v31 = 0;
  *(_BYTE *)a2 = 0;
LABEL_37:
  *(_BYTE *)(a2 + 48) = v31;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::StorageEstimate,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      goto LABEL_8;
    }
    v8 = v2;
    v15 = 0;
  }
  else
  {
    v8 = 0;
    v15 = 0;
    *result = 0;
    result[1] = 0;
    v12 = (_QWORD *)result[3];
    if (v12)
      goto LABEL_29;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (!v16)
    {
      v2 = 0;
      v3 = 0;
      v8 = 0;
LABEL_20:
      v7 = 1;
      goto LABEL_8;
    }
    v22 = result;
    v25 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v15, v8);
      v8 = 0;
      result = v22;
      a2 = v25;
      v3 = *v22;
      v2 = v22[1];
      goto LABEL_20;
    }
    v2 = 0;
    v3 = 0;
    v7 = 1;
LABEL_8:
    v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v9 || v2 - v9 <= 7)
      break;
    v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11 + 1;
    result[2] = v11 + 1;
    if (!v3)
    {
      v17 = v2;
      v18 = 0;
      goto LABEL_22;
    }
    if (!v7)
    {
      v13 = *v11;
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v13;
      v14 = 1;
      goto LABEL_16;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    v23 = result;
    v27 = a2;
    if (v2)
    {
      (*(void (**)(_QWORD *))(*v12 + 16))(v12);
      result = v23;
      a2 = v27;
      v15 = *v23;
      v8 = v23[1];
    }
    else
    {
      v8 = 0;
      v15 = 0;
    }
  }
  v17 = 0;
  v18 = 0;
  *result = 0;
  result[1] = 0;
  v19 = result[3];
  if (v19)
  {
    v24 = result;
    v28 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      result = v24;
      a2 = v28;
      v18 = *v24;
      v17 = v24[1];
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
  }
LABEL_22:
  *result = 0;
  result[1] = 0;
  v20 = result[3];
  if (v20)
  {
    if (v17)
    {
      v21 = result;
      v26 = a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(result[3], v18, v17);
      a2 = v26;
      if (*v21)
        goto LABEL_28;
    }
  }
  v14 = 0;
  *(_BYTE *)a2 = 0;
LABEL_16:
  *(_BYTE *)(a2 + 16) = v14;
  return result;
}

uint64_t std::optional<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>::~optional(uint64_t a1, void *a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
  }
  return a1;
}

char *IPC::ArgumentCoder<WebCore::TextList,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  v5 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v2) = v2[20];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::FontAttributes,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,void>::encode<IPC::Encoder,WebCore::Font>(a1, a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 1));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 2));
  IPC::ArgumentCoder<WebCore::FontShadow,void>::encode(a1, (uint64_t)(v2 + 3));
  v4 = *((_BYTE *)v2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 7));
  v6 = *((_BYTE *)v2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_BYTE *)v2 + 73);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v2) = *((_BYTE *)v2 + 74);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::FontAttributes,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  char v64;
  char v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  char v71;
  char v72;
  unint64_t v73;
  char *v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  void *v78;
  _DWORD *v79;
  void *v80;
  void *v81;
  _DWORD *result;
  char v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _DWORD *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  char v112;
  char v113;
  _QWORD v114[2];
  char v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121[8];
  __int128 v122;
  char v123;
  char v124[8];
  char v125;
  char v126[8];
  char v127;
  uint64_t v128;
  uint64_t v129;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *v2;
        v10 = v2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_9;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v10 = v4;
    v11 = 0;
LABEL_9:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v13 = v2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_10:
    *v2 = 0;
    v2[1] = 0;
    v14 = v2[3];
    if (v14 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    goto LABEL_11;
  }
  if (!v8)
  {
    v106 = 0;
    v9 = 0;
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::Font,void>::decode((uint64_t)&v107, a1);
  if ((_BYTE)v108)
  {
    v106 = 0;
    v9 = v107;
    goto LABEL_13;
  }
LABEL_11:
  v15 = *v2;
  v16 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v17 = v2[3];
  if (v17 && v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  v9 = 0;
  v106 = 1;
LABEL_13:
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v126);
  if (!v127)
  {
    v38 = *v2;
    v39 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v40 = v2[3];
    if (v40)
    {
      if (v39)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v124);
  if (!v125)
  {
    v41 = *v2;
    v42 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v43 = v2[3];
    if (v43)
    {
      if (v42)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
    }
  }
  IPC::Decoder::decode<WebCore::FontShadow>((uint64_t)v121, v2);
  v18 = v2[1];
  v19 = *v2;
  v20 = v2[2] - *v2;
  if (v18 <= v20)
  {
    v44 = 0;
    v45 = 0;
    *v2 = 0;
    v2[1] = 0;
    v46 = v2[3];
    if (v46)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
        v45 = *v2;
        v44 = v2[1];
      }
      else
      {
        v44 = 0;
        v45 = 0;
      }
    }
    goto LABEL_51;
  }
  v21 = (unsigned __int8 *)(v19 + v20);
  v2[2] = (uint64_t)(v21 + 1);
  if (!v19)
  {
    v44 = v18;
    v45 = 0;
LABEL_51:
    v18 = 0;
    v19 = 0;
    *v2 = 0;
    v2[1] = 0;
    v47 = v2[3];
    if (v47)
    {
      if (v44)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45, v44);
        v19 = *v2;
        v18 = v2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_52;
  }
  v22 = *v21;
  if (v22 < 3)
  {
    v23 = v22 | 0x100;
    goto LABEL_19;
  }
LABEL_52:
  *v2 = 0;
  v2[1] = 0;
  v48 = v2[3];
  if (!v48)
  {
    v19 = 0;
    v23 = 0;
    v18 = 0;
    goto LABEL_54;
  }
  if (!v18)
  {
    v19 = 0;
    v23 = 0;
LABEL_54:
    *v2 = 0;
    v2[1] = 0;
    v49 = v2[3];
    if (v49)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v19);
        v50 = *v2;
        v18 = v2[1];
      }
      else
      {
        v50 = 0;
      }
    }
    else
    {
      v50 = 0;
      v18 = 0;
    }
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v19);
  v23 = 0;
  v19 = *v2;
  v18 = v2[1];
LABEL_19:
  if (v18 <= v2[2] - v19)
    goto LABEL_54;
  v24 = (unsigned __int8 *)v2[2];
  v2[2] = (uint64_t)(v24 + 1);
  if (!v19)
  {
    v50 = 0;
LABEL_56:
    *v2 = 0;
    v2[1] = 0;
    v51 = v2[3];
    if (v51)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v50);
        v19 = *v2;
        v18 = v2[1];
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    goto LABEL_58;
  }
  v25 = *v24;
  if (v25 >= 5)
  {
LABEL_58:
    *v2 = 0;
    v2[1] = 0;
    v52 = v2[3];
    if (v52 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v19);
    v26 = 0;
    goto LABEL_23;
  }
  v26 = v25 | 0x100;
LABEL_23:
  v27 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v28)
  {
    v29 = v27;
    v128 = 0;
    v129 = 0;
    if (v27 < 0xAAAA)
    {
      if (v27)
      {
        v30 = 24 * v27;
        v31 = WTF::fastMalloc((WTF *)(24 * v27));
        LODWORD(v129) = v30 / 0x18;
        v128 = v31;
        do
        {
          IPC::Decoder::decode<WebCore::TextList>((uint64_t)&v107, v2);
          if (!(_BYTE)v110)
            goto LABEL_71;
          if (HIDWORD(v129) == (_DWORD)v129)
          {
            WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>((uint64_t)&v128, (unint64_t)&v107);
          }
          else
          {
            v32 = v128 + 24 * HIDWORD(v129);
            *(_BYTE *)v32 = (_BYTE)v107;
            v33 = v108;
            v108 = 0;
            *(_QWORD *)(v32 + 8) = v33;
            LODWORD(v33) = v109;
            *(_BYTE *)(v32 + 20) = BYTE4(v109);
            *(_DWORD *)(v32 + 16) = (_DWORD)v33;
            ++HIDWORD(v129);
          }
          if ((_BYTE)v110)
          {
            v34 = v108;
            v108 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v28);
              else
                *(_DWORD *)v34 -= 2;
            }
          }
          --v29;
        }
        while (v29);
        v35 = v128;
        v36 = v129;
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
      v128 = 0;
      v129 = 0;
      v118 = v35;
      v119 = v36;
LABEL_41:
      v120 = 1;
      v37 = WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v28);
      goto LABEL_73;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextList>((uint64_t)&v107, v2);
      if (!(_BYTE)v110)
        break;
      if (HIDWORD(v129) == (_DWORD)v129)
      {
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>((uint64_t)&v128, (unint64_t)&v107);
      }
      else
      {
        v53 = v128 + 24 * HIDWORD(v129);
        *(_BYTE *)v53 = (_BYTE)v107;
        v54 = v108;
        v108 = 0;
        *(_QWORD *)(v53 + 8) = v54;
        LODWORD(v54) = v109;
        *(_BYTE *)(v53 + 20) = BYTE4(v109);
        *(_DWORD *)(v53 + 16) = (_DWORD)v54;
        ++HIDWORD(v129);
      }
      if ((_BYTE)v110)
      {
        v55 = v108;
        v108 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v28);
          else
            *(_DWORD *)v55 -= 2;
        }
      }
      if (!--v29)
      {
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v128, HIDWORD(v129));
        v118 = v128;
        v56 = v129;
        v128 = 0;
        v129 = 0;
        v119 = v56;
        goto LABEL_41;
      }
    }
LABEL_71:
    LOBYTE(v118) = 0;
    v120 = 0;
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v28);
  }
  else
  {
    LOBYTE(v118) = 0;
    v120 = 0;
  }
  v57 = (char *)*v2;
  v58 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v37 = v2[3];
  if (v37)
    goto LABEL_115;
  while (1)
  {
LABEL_73:
    v58 = v2[1];
    v57 = (char *)*v2;
    v59 = v2[2] - *v2;
    if (v58 <= v59)
    {
      v93 = 0;
      v94 = 0;
      *v2 = 0;
      v2[1] = 0;
      v95 = v2[3];
      if (v95)
      {
        if (v58)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
          v94 = *v2;
          v93 = v2[1];
        }
        else
        {
          v93 = 0;
          v94 = 0;
        }
      }
      goto LABEL_130;
    }
    v60 = &v57[v59];
    v61 = (uint64_t)&v57[v59 + 1];
    v2[2] = v61;
    if (!v57)
    {
      v93 = v58;
      v94 = 0;
LABEL_130:
      *v2 = 0;
      v2[1] = 0;
      v96 = v2[3];
      if (v96 && v93)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v94, v93);
        v62 = 0;
        v57 = (char *)*v2;
        v58 = v2[1];
      }
      else
      {
        v58 = 0;
        v57 = 0;
        v62 = 0;
      }
      goto LABEL_132;
    }
    v62 = *v60;
    if (v62 < 2)
    {
      v63 = 0;
      v64 = 1;
      goto LABEL_77;
    }
LABEL_132:
    *v2 = 0;
    v2[1] = 0;
    v97 = v2[3];
    if (!v97 || !v58)
    {
      v65 = 0;
      v98 = 0;
      v57 = 0;
      v63 = 1;
LABEL_134:
      *v2 = 0;
      v2[1] = 0;
      v99 = v2[3];
      if (v99 && v98)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v99 + 16))(v99, v57, v98);
        v69 = 0;
        v57 = (char *)*v2;
        v58 = v2[1];
      }
      else
      {
        v58 = 0;
        v57 = 0;
        v69 = 0;
      }
      goto LABEL_136;
    }
    v37 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v97 + 16))(v97, v57);
    v64 = 0;
    v57 = (char *)*v2;
    v58 = v2[1];
    v63 = 1;
    v61 = v2[2];
LABEL_77:
    if (v62)
      v65 = v64;
    else
      v65 = 0;
    v66 = v61 - (_QWORD)v57;
    if (v58 <= v66)
    {
      v98 = 0;
      v105 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v105 && v58)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105);
        v57 = (char *)*v2;
        v98 = v2[1];
      }
      else
      {
        v57 = 0;
      }
      goto LABEL_134;
    }
    v67 = &v57[v66];
    v68 = (uint64_t)&v57[v66 + 1];
    v2[2] = v68;
    if (!v57)
    {
      v98 = v58;
      goto LABEL_134;
    }
    v69 = *v67;
    if (v69 < 2)
    {
      v70 = 0;
      v71 = 1;
      goto LABEL_84;
    }
LABEL_136:
    *v2 = 0;
    v2[1] = 0;
    v100 = v2[3];
    if (!v100 || !v58)
    {
      v72 = 0;
      v101 = 0;
      v57 = 0;
      v70 = 1;
LABEL_138:
      *v2 = 0;
      v2[1] = 0;
      v102 = v2[3];
      if (v102 && v101)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v102 + 16))(v102, v57, v101);
        v57 = (char *)*v2;
        v58 = v2[1];
      }
      else
      {
        v58 = 0;
        v57 = 0;
      }
      goto LABEL_140;
    }
    v37 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v100 + 16))(v100, v57);
    v71 = 0;
    v57 = (char *)*v2;
    v58 = v2[1];
    v70 = 1;
    v68 = v2[2];
LABEL_84:
    if (v69)
      v72 = v71;
    else
      v72 = 0;
    v73 = v68 - (_QWORD)v57;
    if (v58 <= v73)
    {
      v101 = 0;
      v104 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v104 && v58)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
        v57 = (char *)*v2;
        v101 = v2[1];
      }
      else
      {
        v57 = 0;
      }
      goto LABEL_138;
    }
    v74 = &v57[v73];
    v2[2] = (uint64_t)(v74 + 1);
    if (!v57)
    {
      v101 = v58;
      goto LABEL_138;
    }
    v75 = *v74;
    if (v75 <= 1)
    {
      v76 = 0;
      v2 = (uint64_t *)(v75 != 0);
      goto LABEL_91;
    }
LABEL_140:
    *v2 = 0;
    v2[1] = 0;
    v103 = v2[3];
    if (!v103 || !v58 || (v37 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v103 + 16))(v103, v57), !*v2))
    {
      *a2 = 0;
      a2[80] = 0;
      goto LABEL_107;
    }
    v2 = 0;
    v76 = 1;
LABEL_91:
    if (!v106)
    {
      v107 = v9;
      if (v127)
      {
        v37 = WebCore::Color::Color();
        if (v125)
        {
          v37 = WebCore::Color::Color();
          if (v123)
          {
            v37 = WebCore::Color::Color();
            v111 = v122;
            if (v23 > 0xFF)
            {
              v112 = v23;
              if (v26 > 0xFF)
              {
                v113 = v26;
                if (v120)
                {
                  v114[0] = v118;
                  v77 = v119;
                  v118 = 0;
                  v119 = 0;
                  v114[1] = v77;
                  if (!v63)
                  {
                    v115 = v65;
                    if (!v70)
                    {
                      v116 = v72;
                      if (!v76)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_115:
    if (v58)
      v37 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v37 + 16))(v37, v57);
  }
  v117 = (char)v2;
  WebCore::FontAttributes::FontAttributes((uint64_t)a2, (uint64_t *)&v107);
  a2[80] = 1;
  WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v114, v78);
  if ((v110 & 0x8000000000000) != 0)
  {
    v84 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFLL);
    do
    {
      v85 = __ldaxr(v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, v84));
    if (!v86)
    {
      atomic_store(1u, v84);
      WTF::fastFree((WTF *)v84, v57);
    }
  }
  if ((v109 & 0x8000000000000) != 0)
  {
    v87 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFLL);
    do
    {
      v88 = __ldaxr(v87);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, v87));
    if (!v89)
    {
      atomic_store(1u, v87);
      WTF::fastFree((WTF *)v87, v57);
    }
  }
  if (((unint64_t)v108 & 0x8000000000000) != 0)
  {
    v90 = (unsigned int *)((unint64_t)v108 & 0xFFFFFFFFFFFFLL);
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v90);
      WTF::fastFree((WTF *)v90, v57);
    }
  }
  v79 = v107;
  v107 = 0;
  if (v79)
    WTF::RefCounted<WebCore::Font>::deref(v79);
  v9 = 0;
LABEL_107:
  if (v120)
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v57);
  std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v121, v57);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v124, v80);
  result = (_DWORD *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v126, v81);
  v83 = v106;
  if (!v9)
    v83 = 1;
  if ((v83 & 1) == 0)
    return WTF::RefCounted<WebCore::Font>::deref(v9);
  return result;
}

void sub_196E624E4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  _DWORD *v28;
  uint64_t v29;
  void *v31;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v29 - 136, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v29 - 120, v31);
  if (!v28)
    a11 = 1;
  if ((a11 & 1) == 0)
    WTF::RefCounted<WebCore::Font>::deref(v28);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::FontShadow>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[8];
  unsigned __int8 v31;

  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v30);
  if (!v31)
  {
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v20 != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  }
  v5 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  v6 = (char)v4;
  v7 = a2[1];
  v8 = *a2;
  v9 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v7 >= v9 && v7 - v9 > 7)
  {
    v11 = (uint64_t *)(v8 + v9);
    a2[2] = (uint64_t)(v11 + 1);
    if (v8)
    {
      v12 = 0;
      v13 = *v11;
      goto LABEL_9;
    }
    v23 = v7;
    v4 = 0;
  }
  else
  {
    v23 = 0;
    v4 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v8, v7);
        v4 = (void *)*a2;
        v23 = a2[1];
      }
      else
      {
        v23 = 0;
        v4 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v25 = a2[3];
  if (!v25 || !v23 || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v25 + 16))(v25, v4), !*a2))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_13;
  }
  v12 = 1;
  v13 = 0;
LABEL_9:
  v14 = v31;
  if (v31 && (WebCore::Color::Color(), v6) && (*(_QWORD *)&v29 = v5, !v12))
  {
    *((_QWORD *)&v29 + 1) = v13;
    WebCore::Color::Color();
    *(_OWORD *)(a1 + 8) = v29;
    *(_BYTE *)(a1 + 24) = 1;
    v14 = v28;
    if ((v28 & 0x8000000000000) == 0)
      goto LABEL_13;
  }
  else
  {
    __break(1u);
  }
  v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v4);
  }
LABEL_13:
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30, v4);
  if (!*(_BYTE *)(a1 + 24))
  {
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v27)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
    }
  }
  return result;
}

void sub_196E628C4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::Font,void>::decode(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  CFTypeRef v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  BOOL v42;
  _BOOL4 v43;
  int *v44;
  int v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF *v48;
  CFTypeRef v49;
  __int128 v50;
  const void *v51;
  const void *v52;
  CFTypeRef v53;
  WTF *v54;
  __int128 v55;
  WTF::StringImpl *v56;
  char v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  char v95[32];
  char v96;
  _BYTE v97[32];
  WTF *v98;
  __int128 v99;
  char v100[384];
  uint64_t v101;
  int v102;
  char v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  WTF *v107;
  __int128 v108;
  _BYTE v109[153];
  uint64_t v110;
  char v111;
  WTF *v112;
  __int128 v113;
  _BYTE v114[384];
  uint64_t v115;
  CFTypeRef v116;
  char v117;
  _BYTE v118[384];
  char v119;
  char v120;
  WTF *v121;
  uint64_t v122;
  char v123;

  IPC::Decoder::decode<WebCore::FontInternalAttributes>(a2, v97);
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v74 = 0;
    v75 = 0;
    *a2 = 0;
    a2[1] = 0;
    v76 = a2[3];
    if (v76)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v76 + 16))(v76, v5, v4);
        v75 = *a2;
        v74 = a2[1];
      }
      else
      {
        v74 = 0;
        v75 = 0;
      }
    }
    goto LABEL_116;
  }
  a2[2] = v5 + v6 + 4;
  if (!v5)
  {
    v74 = v4;
    v75 = 0;
LABEL_116:
    *a2 = 0;
    a2[1] = 0;
    v77 = a2[3];
    if (v77 && v74)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v75);
    v8 = 1;
    goto LABEL_8;
  }
  v8 = 0;
LABEL_8:
  v9 = IPC::Decoder::decode<WebCore::LockHistory>(a2);
  v106 = v9;
  v10 = IPC::Decoder::decode<WebCore::EdgeModeType>(a2);
  v105 = v10;
  LODWORD(v11) = IPC::Decoder::decode<WebCore::EdgeModeType>(a2);
  v104 = v11;
  v12 = a2[1];
  v13 = *a2;
  v14 = a2[2] - *a2;
  if (v12 <= v14)
    goto LABEL_102;
  v15 = (unsigned __int8 *)(v13 + v14);
  v16 = v13 + v14 + 1;
  a2[2] = v16;
  if (!v13)
  {
    v64 = v12;
    v65 = 0;
    goto LABEL_103;
  }
  v17 = *v15;
  if (v17 < 2)
  {
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    v68 = a2[3];
    if (!v68 || !v12)
    {
      v20 = 0;
      v69 = 0;
      v13 = 0;
      v18 = 1;
LABEL_107:
      *a2 = 0;
      a2[1] = 0;
      v70 = a2[3];
      if (v70 && v69)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v13, v69);
        v24 = 0;
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v24 = 0;
      }
      goto LABEL_109;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v13);
    v19 = 0;
    v13 = *a2;
    v12 = a2[1];
    v18 = 1;
    v16 = a2[2];
LABEL_12:
    if (v17)
      v20 = v19;
    else
      v20 = 0;
    v21 = v16 - v13;
    if (v12 <= v21)
    {
      v69 = 0;
      v87 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v12 && v87)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
        v13 = *a2;
        v69 = a2[1];
      }
      else
      {
        v13 = 0;
      }
      goto LABEL_107;
    }
    v22 = (unsigned __int8 *)(v13 + v21);
    v23 = v13 + v21 + 1;
    a2[2] = v23;
    if (!v13)
    {
      v69 = v12;
      goto LABEL_107;
    }
    v24 = *v22;
    if (v24 < 2)
    {
      v25 = 0;
      v26 = 1;
      goto LABEL_19;
    }
LABEL_109:
    *a2 = 0;
    a2[1] = 0;
    v71 = a2[3];
    if (!v71)
    {
      v12 = 0;
LABEL_111:
      v72 = 0;
      *a2 = 0;
      a2[1] = 0;
      v25 = 1;
LABEL_112:
      *a2 = 0;
      a2[1] = 0;
      v73 = a2[3];
      if (v73 && v12)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v72);
LABEL_25:
      LOBYTE(v98) = 0;
      v103 = 0;
      goto LABEL_80;
    }
    if (!v12)
      goto LABEL_111;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v13);
    v26 = 0;
    v13 = *a2;
    v12 = a2[1];
    v25 = 1;
    v23 = a2[2];
LABEL_19:
    if (v24)
      v27 = v26;
    else
      v27 = 0;
    v28 = v23 - v13;
    if (v12 <= v28)
    {
      v88 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v88)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
          v72 = *a2;
          v12 = a2[1];
        }
        else
        {
          v72 = 0;
        }
      }
      else
      {
        v72 = 0;
        v12 = 0;
      }
      goto LABEL_112;
    }
    v29 = (unsigned __int8 *)(v13 + v28);
    v30 = v13 + v28 + 1;
    a2[2] = v30;
    if (!v13)
    {
      v72 = 0;
      goto LABEL_112;
    }
    v31 = *v29;
    if (v31 >= 2)
      goto LABEL_25;
    if (v31)
    {
      IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v121);
      IPC::Decoder::decode<std::optional<WebCore::FontPlatformSerializedAttributes>>(v118, a2);
      IPC::Decoder::decode<WTF::String>(a2, &v116);
      v94 = v11;
      if (*a2)
      {
        if (!v123)
          goto LABEL_101;
        v112 = v121;
        v33 = v122;
        v121 = 0;
        v122 = 0;
        *(_QWORD *)&v113 = v33;
        if (!v120)
          goto LABEL_101;
        v11 = v10;
        v10 = v9;
        v9 = v27;
        v34 = v25;
        v35 = a1;
        a1 = v20;
        std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100]((_BYTE *)&v113 + 8, (uint64_t)v118);
        if (!v117)
          goto LABEL_101;
        v36 = v116;
        v116 = 0;
        v115 = (uint64_t)v36;
        v37 = v112;
        v112 = 0;
        v107 = v37;
        v38 = v113;
        *(_QWORD *)&v113 = 0;
        *(_QWORD *)&v108 = v38;
        std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100]((_BYTE *)&v108 + 8, (uint64_t)&v113 + 8);
        v110 = v115;
        v111 = 1;
        v115 = 0;
        if (v114[376])
          WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)((char *)&v113 + 8), v32);
        v39 = v112;
        if (v112)
        {
          v112 = 0;
          LODWORD(v113) = 0;
          WTF::fastFree(v39, v32);
        }
      }
      else
      {
        v11 = v10;
        v10 = v9;
        v34 = v25;
        v35 = a1;
        LOBYTE(v107) = 0;
        v111 = 0;
      }
      if (v117)
      {
        v40 = (WTF::StringImpl *)v116;
        v116 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v32);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      if (v120 && v119)
        WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v118, v32);
      a1 = v35;
      if (v123)
      {
        v58 = v121;
        if (v121)
        {
          v121 = 0;
          LODWORD(v122) = 0;
          WTF::fastFree(v58, v32);
        }
      }
      v25 = v34;
      if (v111
        || (v61 = (WTF::StringImpl *)*a2, v82 = a2[1], *a2 = 0, a2[1] = 0, (v83 = a2[3]) != 0)
        && v82
        && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v83 + 16))(v83, v61), v111))
      {
        v59 = v107;
        v107 = 0;
        v98 = v59;
        v60 = v108;
        *(_QWORD *)&v108 = 0;
        *(_QWORD *)&v99 = v60;
        std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100]((_BYTE *)&v99 + 8, (uint64_t)&v108 + 8);
        v62 = v110;
        v110 = 0;
        v101 = v62;
        v63 = 1;
        v102 = 1;
      }
      else
      {
        v63 = 0;
        LOBYTE(v98) = 0;
      }
      v9 = v10;
      v103 = v63;
      std::__optional_destruct_base<WebCore::FontPlatformSerializedCreationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v107, v61);
      v10 = v11;
      LODWORD(v11) = v94;
      goto LABEL_80;
    }
    v92 = v18;
    v93 = v8;
    v41 = ((v30 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v13;
    v42 = v12 >= v41 && v12 - v41 >= 4;
    v43 = !v42;
    if (v43)
    {
      *a2 = 0;
      a2[1] = 0;
      v84 = a2[3];
      if (v84)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
        v46 = 0;
        v89 = *a2;
        v90 = a2[1];
        v91 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v8 = 0;
        if (!v91 || !v90)
          goto LABEL_47;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v89);
      }
      v46 = 0;
      v8 = 0;
    }
    else
    {
      v44 = (int *)(v13 + v41);
      v45 = *v44;
      a2[2] = (uint64_t)(v44 + 1);
      v46 = v45 & 0xFFFFFF00;
      v8 = v45;
    }
LABEL_47:
    IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(a2, (uint64_t)&v121);
    IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(a2, (uint64_t)&v116);
    IPC::Decoder::decode<std::optional<WebCore::FontPlatformSerializedAttributes>>(v118, a2);
    if (*a2)
    {
      if (v43)
        goto LABEL_101;
      LODWORD(v112) = v8 | v46;
      if (!(_BYTE)v122)
        goto LABEL_101;
      v48 = v121;
      v121 = 0;
      *(_QWORD *)&v113 = v48;
      v8 = v93;
      if (!v117)
        goto LABEL_101;
      v49 = v116;
      v116 = 0;
      *((_QWORD *)&v113 + 1) = v49;
      if (!v120)
        goto LABEL_101;
      std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](v114, (uint64_t)v118);
      LODWORD(v107) = (_DWORD)v112;
      v50 = v113;
      v113 = 0uLL;
      v108 = v50;
      std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](v109, (uint64_t)v114);
      v111 = 1;
      if ((_BYTE)v115)
        WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v114, v47);
      v51 = (const void *)*((_QWORD *)&v113 + 1);
      *((_QWORD *)&v113 + 1) = 0;
      if (v51)
        CFRelease(v51);
      v52 = (const void *)v113;
      *(_QWORD *)&v113 = 0;
      v18 = v92;
      if (v52)
        CFRelease(v52);
    }
    else
    {
      LOBYTE(v107) = 0;
      v111 = 0;
      v8 = v93;
      v18 = v92;
    }
    if (v120 && v119)
      WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v118, v47);
    if (v117)
    {
      v53 = v116;
      v116 = 0;
      if (v53)
        CFRelease(v53);
    }
    if ((_BYTE)v122)
    {
      v54 = v121;
      v121 = 0;
      if (v54)
        CFRelease(v54);
    }
    if (v111)
      goto LABEL_68;
    v56 = (WTF::StringImpl *)*a2;
    v85 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v86 = a2[3];
    if (!v86)
      goto LABEL_133;
    if (v85
      && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v86 + 16))(v86, v56),
          v8 = v93,
          v18 = v92,
          v111))
    {
LABEL_68:
      LODWORD(v98) = (_DWORD)v107;
      v55 = v108;
      v108 = 0uLL;
      v99 = v55;
      std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](v100, (uint64_t)v109);
      v102 = 0;
      v57 = 1;
    }
    else
    {
LABEL_133:
      v57 = 0;
      LOBYTE(v98) = 0;
    }
    v103 = v57;
    std::__optional_destruct_base<WebCore::FontPlatformSerializedData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v107, v56);
LABEL_80:
    if (!v103)
    {
      v78 = *a2;
      v12 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v79 = a2[3];
      if (v79)
      {
        if (v12)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v78);
      }
    }
    if (*a2)
    {
      if (v8
        || (unsigned __int16)v9 <= 0xFFu
        || (unsigned __int16)v10 <= 0xFFu
        || (unsigned __int16)v11 <= 0xFFu
        || v18
        || v25
        || !v103)
      {
        goto LABEL_101;
      }
      WebCore::FontPlatformData::fromIPCData();
    }
    else
    {
      v95[0] = 0;
      v96 = 0;
    }
    if (v103 && v102 != -1)
      ((void (*)(WTF **, WTF **))off_1E34ADE50[v102])(&v107, &v98);
    if (!v96)
    {
      v80 = *a2;
      v12 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v81 = a2[3];
      if (v81)
      {
        if (v12)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v80);
      }
    }
    if (!*a2)
      break;
    if (v97[24] && v96)
    {
      WebCore::Font::create();
      *(_QWORD *)a1 = v98;
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_98;
    }
LABEL_101:
    __break(1u);
LABEL_102:
    v64 = 0;
    v65 = 0;
    *a2 = 0;
    a2[1] = 0;
    v66 = a2[3];
    if (v66)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
        v65 = *a2;
        v64 = a2[1];
      }
      else
      {
        v64 = 0;
        v65 = 0;
      }
    }
LABEL_103:
    *a2 = 0;
    a2[1] = 0;
    v67 = a2[3];
    if (v67 && v64)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v65, v64);
      v17 = 0;
      v13 = *a2;
      v12 = a2[1];
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v17 = 0;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
LABEL_98:
  if (v96)
    WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v95);
}

void sub_196E632D0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::FontPlatformSerializedData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x218], a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::FontPlatformData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;

  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_BYTE *)(a2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 13);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 14);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  WebCore::FontPlatformData::toIPCData((WebCore::FontPlatformData *)a2);
  v10 = v13;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  if ((_DWORD)v10)
  {
    IPC::ArgumentCoder<std::variant<WebCore::FontPlatformSerializedData,WebCore::FontPlatformSerializedCreationData>,void>::encode<IPC::Encoder,std::variant<WebCore::FontPlatformSerializedData,WebCore::FontPlatformSerializedCreationData>,0ul>(a1, (uint64_t)&v11, v10);
  }
  else
  {
    if (v13)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return;
    }
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
    IPC::ArgumentCoder<__CFString const*,void>::encode((uint64_t)a1);
    IPC::ArgumentCoder<__CFString const*,void>::encode((uint64_t)a1);
    IPC::ArgumentCoder<std::optional<WebCore::FontPlatformSerializedAttributes>,void>::encode<IPC::Encoder,std::optional<WebCore::FontPlatformSerializedAttributes> const&>(a1, (uint64_t)&v12);
  }
  if (v13 != -1)
    ((void (*)(char *, int *))off_1E34ADE50[v13])(&v14, &v11);
}

void sub_196E63698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61)
{
  uint64_t v61;

  if (a61 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34ADE50[a61])(v61 - 49, &a9);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int v9;
  char *result;
  id v11;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&>(a1, (int *)(a2 + 4), v5);
  v6 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 17);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 18);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(unsigned __int8 *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v9)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 40))
    {
      return IPC::ArgumentCoder<std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping>,void>::encode<IPC::Encoder,std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping> const&,0ul,1ul,2ul,3ul>(a1, (char *)(a2 + 20));
    }
    else
    {
      v11 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>(v11);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v2)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v3, v2);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (!v17)
      goto LABEL_4;
    goto LABEL_21;
  }
  v5 = (_BYTE *)(v3 + v4);
  a1[2] = (unint64_t)(v5 + 1);
  if (!v3)
  {
    v14 = v2;
    v15 = 0;
    goto LABEL_20;
  }
  if (*v5 <= 1u)
  {
    if (*v5)
    {
      v10 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
      if (v11)
        v6 = v10 & 0xFFFFFFFFFFFFFF00;
      else
        v6 = 0;
      if (!v11)
        goto LABEL_5;
LABEL_16:
      v6 |= v10;
      return v6;
    }
    v10 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    if (v12)
    {
      v6 = v10 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_16;
    }
    v6 = 0;
    v15 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (!v17)
      goto LABEL_5;
LABEL_21:
    if (v14)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
LABEL_4:
  v6 = 0;
LABEL_5:
  v7 = *a1;
  v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v9 = a1[3];
  if (v9 && v8)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
  return v6;
}

char *IPC::ArgumentCoder<WebCore::SnapOffset<float>,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  char v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *((_BYTE *)a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)a2 + 5);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_QWORD *)a2 + 1);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LOBYTE(v7) = *((_BYTE *)a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  return IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)a2 + 3), a2[9]);
}

uint64_t IPC::Decoder::decode<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (v5)
  {
    v6 = v4;
    if (!v4)
    {
      v7 = 0;
LABEL_4:
      result = WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned long const,18446744073709551615ul>((uint64_t)a1, v7, v6);
      a1[16] = 1;
      return result;
    }
    v9 = IPC::Decoder::decodeSpan<unsigned long const>(a2, v4);
    if (v9)
    {
      v7 = (uint64_t *)v9;
      if (v10 == v6)
        goto LABEL_4;
    }
  }
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result)
  {
    v12 = 0;
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  if (!v12)
    goto LABEL_10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  v13 = *a2;
  v12 = a2[1];
  result = a2[3];
LABEL_11:
  *a1 = 0;
  a1[16] = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v12)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::CDMMediaCapability,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 16));
}

char *IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  LOBYTE(v2) = v2[16];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  v4 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v8);
  result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  if (*a1)
  {
    if (v4 > 0xFFu && v9 && (unsigned __int16)result > 0xFFu)
    {
      v7 = v8;
      if (v8)
        *(_DWORD *)v8 += 2;
      *(_BYTE *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v7;
      *(_BYTE *)(a2 + 16) = result;
      *(_BYTE *)(a2 + 24) = 1;
      goto LABEL_8;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (!v9)
    return result;
  v7 = v8;
LABEL_8:
  v8 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

void sub_196E63C24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 4u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

char *WebCore::BufferSource::span(WebCore::BufferSource *this)
{
  uint64_t v1;
  IPC::Encoder *v3;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1 == -1)
  {
    v3 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WebCore::FontShadow,void>::encode(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (char *)((uint64_t (*)(char **, WebCore::BufferSource *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v1])(&v6, this);
  }
}

char *IPC::ArgumentCoder<WebCore::FontShadow,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

void IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::encode(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *((_DWORD *)a2 + 1);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(a1, a2 + 24);
}

uint64_t IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t result;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  char v34;
  _BYTE v35[16];
  char v36;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (int *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      v11 = v10 & 0xFFFFFF00;
      v12 = v10;
      v13 = v5;
      goto LABEL_8;
    }
    v13 = v4;
    v25 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    v13 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v25 = 0;
      }
    }
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (!v27)
    {
      v13 = 0;
LABEL_30:
      v4 = 0;
      v5 = 0;
      v11 = 0;
      v12 = 0;
      v9 = 1;
      goto LABEL_8;
    }
    if (!v13)
      goto LABEL_30;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v13);
    v11 = 0;
    v12 = 0;
    v13 = *a1;
    v4 = a1[1];
    v9 = 1;
    v5 = *a1;
LABEL_8:
    v14 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
    if (v4 >= v14 && v4 - v14 > 3)
    {
      v16 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v16 + 1);
      v17 = v4;
      if (v5)
      {
        v18 = 0;
        v19 = *v16 & 0xFFFFFF00;
        v20 = *v16;
        goto LABEL_15;
      }
    }
    else
    {
      v17 = 0;
      v13 = 0;
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
          v13 = *a1;
          v17 = a1[1];
        }
        else
        {
          v17 = 0;
          v13 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v17)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v13, v17);
    v19 = 0;
    v20 = 0;
    v18 = 1;
LABEL_15:
    IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, v35);
    result = IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, v33);
    if (!*a1)
      break;
    if (!v9 && !v18 && v36 && v34)
    {
      WebCore::CompositionHighlight::CompositionHighlight(&v30, v12 | v11, v20 | v19, (uint64_t)v35, (uint64_t)v33);
      *(_QWORD *)a2 = v30;
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 8), (uint64_t)v31);
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 24), (uint64_t)v32);
      *(_BYTE *)(a2 + 40) = 1;
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v32, v23);
      result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v24);
      goto LABEL_21;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_21:
  if (v34)
    result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v22);
  if (v36)
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, v22);
  return result;
}

void sub_196E640AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, int a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  void *v26;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v22, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a13, v24);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v21, v25);
  if (a17)
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, v26);
  if (a21)
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a19, v26);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::FontChanges,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 48));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 50));
}

uint64_t IPC::ArgumentCoder<WebCore::FontChanges,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  _BYTE v11[16];
  char v12;
  _BYTE v13[16];
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  IPC::Decoder::decode<WTF::String>(a1, &v17);
  IPC::Decoder::decode<WTF::String>(a1, &v15);
  IPC::Decoder::decode<std::optional<double>>(a1, v13);
  result = (uint64_t)IPC::Decoder::decode<std::optional<double>>(a1, v11);
  if (!*a1)
    goto LABEL_6;
  if (!v14)
    goto LABEL_26;
  if (v13[8])
  {
    if (!v12)
      goto LABEL_26;
    if (v11[8])
    {
LABEL_6:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      goto LABEL_15;
    }
  }
  v6 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*a1)
    goto LABEL_6;
  if (!v18 || !v16 || !v14 || !v12 || (v6 & 0xFF0000) == 0 || (result & 0xFF0000) == 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  result = WebCore::FontChanges::FontChanges();
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 56) = 1;
LABEL_15:
  if (v16)
  {
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v18)
  {
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E642E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(v2 - 56))
  {
    v4 = *(WTF::StringImpl **)(v2 - 64);
    *(_QWORD *)(v2 - 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  if (*(_BYTE *)(v2 - 40))
  {
    v5 = *(WTF::StringImpl **)(v2 - 48);
    *(_QWORD *)(v2 - 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::FontAttributeChanges,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  void *v21;
  char v22;
  WTF::StringImpl *v23;
  __int128 v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t result;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  __int128 v50;
  _BYTE v51[16];
  _DWORD v52[10];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _BYTE v57[64];
  int v58;
  int v59;
  char v60[8];
  __int128 v61;
  char v62;
  char v63;
  _BYTE v64[16];
  char v65;
  _BYTE v66[16];
  char v67;
  int v68;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_46;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v30 = v4;
    v31 = 0;
    goto LABEL_47;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_48;
  if (v8)
  {
    v49 = 0;
    IPC::Decoder::operator>><unsigned char>(a1, &v49);
    v9 = v49;
    if (HIBYTE(v49))
      v10 = v49 > 2u;
    else
      v10 = 1;
    v11 = v10;
    if (v11 == 1)
    {
      v46 = *a1;
      v47 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v48 = a1[3];
      if (v48 && v47)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      v12 = 0;
    }
    else
    {
      v12 = 0x10000;
    }
    if (v11)
      v13 = 0;
    else
      v13 = v9;
    v14 = 256;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v12 = 0x10000;
  }
  while (1)
  {
    v15 = v13 | v12 | v14;
    if (!HIWORD(v12))
    {
      v35 = *a1;
      v36 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37)
      {
        if (v36)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      }
    }
    v68 = v15;
    IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, v66);
    IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, v64);
    v16 = a1[1];
    v17 = *a1;
    v18 = a1[2] - *a1;
    if (v16 <= v18)
    {
      v38 = 0;
      v39 = 0;
      *a1 = 0;
      a1[1] = 0;
      v40 = a1[3];
      if (v40)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
          v39 = *a1;
          v38 = a1[1];
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
      }
      goto LABEL_54;
    }
    v19 = (unsigned __int8 *)(v17 + v18);
    a1[2] = (uint64_t)(v19 + 1);
    if (!v17)
    {
      v38 = v16;
      v39 = 0;
LABEL_54:
      v16 = 0;
      v17 = 0;
      *a1 = 0;
      a1[1] = 0;
      v41 = a1[3];
      if (v41)
      {
        if (v38)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
          v17 = *a1;
          v16 = a1[1];
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
      }
      goto LABEL_55;
    }
    v20 = *v19;
    if (v20 < 2)
    {
      if (v20)
      {
        IPC::Decoder::decode<WebCore::FontShadow>((uint64_t)&v49, a1);
        v22 = v51[0];
        if (v51[0])
        {
          WebCore::Color::Color();
          v61 = v50;
          v22 = 1;
          v62 = 1;
        }
        else
        {
          v60[0] = 0;
        }
      }
      else
      {
        LOBYTE(v49) = 0;
        v51[0] = 0;
        std::__optional_move_base<WebCore::FontShadow,false>::__optional_move_base[abi:sn180100]((uint64_t)v60, (uint64_t)&v49);
        v22 = 1;
      }
      v63 = v22;
      std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v21);
      goto LABEL_28;
    }
LABEL_55:
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v17);
    v60[0] = 0;
    v63 = 0;
LABEL_28:
    if (!v63)
    {
      v43 = *a1;
      v44 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45)
      {
        if (v44)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
      }
    }
    v59 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    v58 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
    IPC::Decoder::decode<WebCore::FontChanges>(a1, (uint64_t)v57);
    if (!*a1)
      break;
    if (BYTE2(v68) && v67 && v65 && v63 && BYTE2(v59) && BYTE2(v58) && v57[56])
    {
      WebCore::FontAttributeChanges::FontAttributeChanges();
      *(_WORD *)a2 = v49;
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 8), (uint64_t)&v50);
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 24), (uint64_t)v51);
      std::__optional_move_base<WebCore::FontShadow,false>::__optional_move_base[abi:sn180100](a2 + 40, (uint64_t)v52);
      *(_DWORD *)(a2 + 72) = v52[8];
      v24 = v54;
      *(_OWORD *)(a2 + 80) = v53;
      *(_OWORD *)(a2 + 96) = v24;
      *(_OWORD *)(a2 + 112) = v55;
      *(_DWORD *)(a2 + 128) = v56;
      *(_BYTE *)(a2 + 136) = 1;
      v53 = 0uLL;
      std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, v25);
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51, v26);
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50, v27);
      goto LABEL_38;
    }
    __break(1u);
LABEL_46:
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
LABEL_47:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v5);
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 136) = 0;
LABEL_38:
  result = std::__optional_destruct_base<WebCore::FontChanges,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v23);
  if (v63)
    result = std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v29);
  if (v65)
    result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64, v29);
  if (v67)
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, v29);
  return result;
}

void sub_196E64820(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (*(_BYTE *)(v26 - 128))
    std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100](v26 - 160, a2);
  if (*(_BYTE *)(v26 - 104))
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v26 - 120, a2);
  if (*(_BYTE *)(v26 - 80))
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v26 - 96, a2);
  _Unwind_Resume(exception_object);
}

void sub_196E6491C()
{
  JUMPOUT(0x196E64904);
}

uint64_t IPC::Decoder::decode<WebCore::FontChanges>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::FontChanges,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E64978(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FontChanges,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>((uint64_t)a1, a2 + 8, v5);
}

uint64_t IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t result;
  _BYTE v6[8];
  _BYTE v7[16];
  int v8;
  _BYTE v9[16];
  int v10;
  char v11;
  char v12;

  v4 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  result = (uint64_t)IPC::Decoder::decode<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>>(a1, (uint64_t)v9);
  if (!*a1)
    goto LABEL_11;
  if (v4 <= 0xFFu || (v6[0] = v4, !v11))
  {
    __break(1u);
LABEL_11:
    *a2 = 0;
    a2[32] = 0;
    goto LABEL_6;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v9);
  *a2 = v6[0];
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v7);
  a2[32] = 1;
  if (v8 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v8])(&v12, v7);
LABEL_6:
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v10])(v6, v9);
  }
  return result;
}

void sub_196E64AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, int a17, int a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a13 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a13])(v20 - 33, v19);
  if (a19)
  {
    if (a17 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a17])(&a10, &a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 1u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t *IPC::Decoder::decode<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E64C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = v2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  _QWORD *result;
  char v15;
  BOOL v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  char v27;
  __int16 v28;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v26);
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = a1[1];
  v8 = *a1;
  v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v7 >= v9 && v7 - v9 > 7)
  {
    v11 = (uint64_t *)(v8 + v9);
    a1[2] = (uint64_t)(v11 + 1);
    if (v8)
    {
      v12 = 0;
      v13 = *v11;
      goto LABEL_8;
    }
    v21 = v7;
    v22 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v8, v7);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v24 = a1[3];
  if (v24 && v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  v13 = 0;
  v12 = 1;
LABEL_8:
  v28 = 0;
  result = IPC::Decoder::operator>><unsigned char>(a1, &v28);
  v15 = v28;
  if (HIBYTE(v28))
    v16 = v28 > 4u;
  else
    v16 = 1;
  v17 = v16;
  if (v17 == 1)
    goto LABEL_23;
  while (*a1)
  {
    if (v27 && v6 && !v12 && !v17)
    {
      *(_OWORD *)a2 = v26;
      *(_QWORD *)(a2 + 16) = v4;
      *(_QWORD *)(a2 + 24) = v13;
      *(_BYTE *)(a2 + 32) = v15;
      v18 = 1;
      goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    v19 = *a1;
    v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
    {
      v25 = v17;
      if (v20)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v19);
      v15 = 0;
      v17 = v25;
    }
    else
    {
      v15 = 0;
    }
  }
  v18 = 0;
  *(_BYTE *)a2 = 0;
LABEL_21:
  *(_BYTE *)(a2 + 40) = v18;
  return result;
}

char *IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  v5 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = v2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = *((_BYTE *)v2 + 50);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t result;
  WTF::StringImpl *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  WTF::StringImpl *v60;
  char v61;

  v58 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v59 = v4;
  IPC::Decoder::decode<WTF::String>(a1, &v60);
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (uint64_t *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (!v6)
    {
      v33 = v5;
      v34 = 0;
      goto LABEL_40;
    }
    v10 = 0;
    v57 = *v9;
    goto LABEL_8;
  }
  while (1)
  {
    v33 = 0;
    v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v34 = *a1;
        v33 = a1[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36 && v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34, v33);
      v57 = 0;
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v57 = 0;
    }
    v10 = 1;
LABEL_8:
    v11 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 >= v11 && v5 - v11 > 7)
    {
      v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v13 + 1);
      if (v6)
      {
        v14 = 0;
        v15 = *v13;
        goto LABEL_15;
      }
      v37 = v5;
      v38 = 0;
    }
    else
    {
      v37 = 0;
      v38 = 0;
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (v39)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
          v38 = *a1;
          v37 = a1[1];
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v37)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38, v37);
      v15 = 0;
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v15 = 0;
    }
    v14 = 1;
LABEL_15:
    v16 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v16 || v5 - v16 <= 7)
    {
      v41 = 0;
      v42 = 0;
      *a1 = 0;
      a1[1] = 0;
      v43 = a1[3];
      if (v43)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          v42 = *a1;
          v41 = a1[1];
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
      }
    }
    else
    {
      v17 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v17 + 1);
      if (v6)
      {
        v18 = 0;
        v19 = *v17;
        goto LABEL_19;
      }
      v41 = v5;
      v42 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v41)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42, v41);
      v19 = 0;
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v19 = 0;
    }
    v18 = 1;
LABEL_19:
    v20 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v20 || v5 - v20 <= 7)
    {
      v45 = 0;
      v46 = 0;
      *a1 = 0;
      a1[1] = 0;
      v47 = a1[3];
      if (v47)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
          v46 = *a1;
          v45 = a1[1];
        }
        else
        {
          v45 = 0;
          v46 = 0;
        }
      }
    }
    else
    {
      v21 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v21 + 1);
      if (v6)
      {
        v22 = 0;
        v23 = *v21;
        goto LABEL_23;
      }
      v45 = v5;
      v46 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48 && v45)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46, v45);
    v23 = 0;
    v22 = 1;
LABEL_23:
    v24 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    result = IPC::Decoder::decode<WebCore::BackgroundFetchFailureReason>(a1);
    v5 = a1[1];
    v26 = (WTF::StringImpl *)*a1;
    v27 = a1[2] - *a1;
    if (v5 <= v27)
      break;
    v28 = (unsigned __int8 *)v26 + v27;
    a1[2] = (uint64_t)(v28 + 1);
    if (!v26)
    {
      v49 = v5;
      v50 = 0;
      goto LABEL_55;
    }
    v29 = *v28;
    if (v29 > 1)
      goto LABEL_56;
    v30 = 0;
    v31 = v29 != 0;
LABEL_27:
    if (v59)
    {
      if (v61)
      {
        v32 = v60;
        v60 = 0;
        if (!v10 && !v14 && !v18 && !v22 && v24 > 0xFFu && (unsigned __int16)result > 0xFFu && !v30)
        {
          *(_QWORD *)a2 = v58;
          *(_QWORD *)(a2 + 8) = v32;
          *(_QWORD *)(a2 + 16) = v57;
          *(_QWORD *)(a2 + 24) = v15;
          *(_QWORD *)(a2 + 32) = v19;
          *(_QWORD *)(a2 + 40) = v23;
          *(_BYTE *)(a2 + 48) = v24;
          *(_BYTE *)(a2 + 49) = result;
          *(_BYTE *)(a2 + 50) = v31;
          *(_BYTE *)(a2 + 56) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  v49 = 0;
  v50 = 0;
  *a1 = 0;
  a1[1] = 0;
  v51 = a1[3];
  if (v51)
  {
    v56 = result;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
      v50 = *a1;
      v49 = a1[1];
    }
    else
    {
      v49 = 0;
      v50 = 0;
    }
    result = v56;
  }
LABEL_55:
  v5 = 0;
  v26 = 0;
  *a1 = 0;
  a1[1] = 0;
  v52 = a1[3];
  if (v52)
  {
    v55 = result;
    if (v49)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50, v49);
      v26 = (WTF::StringImpl *)*a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v26 = 0;
    }
    result = v55;
  }
LABEL_56:
  *a1 = 0;
  a1[1] = 0;
  v53 = a1[3];
  if (v53)
  {
    if (v5)
    {
      v54 = result;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v53 + 16))(v53, v26);
      result = v54;
      if (*a1)
      {
        v31 = 0;
        v30 = 1;
        goto LABEL_27;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (v61)
  {
    result = (uint64_t)v60;
    v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E654D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)a2);
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, a2 + 208);
  v4 = *(_BYTE *)(a2 + 256);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 264);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 280);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 296));
  return IPC::ArgumentCoder<WTF::Markable<WebCore::ContentSecurityPolicyResponseHeaders,WebCore::ContentSecurityPolicyResponseHeaders::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ContentSecurityPolicyResponseHeaders,WebCore::ContentSecurityPolicyResponseHeaders::MarkableTraits> const&>(a1, a2 + 304);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 Headers;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[188];
  const void *v55;
  char v56;
  _QWORD v57[2];
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  CFTypeRef cf;
  _DWORD v66[2];
  WTF::StringImpl *v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  char v78;
  _DWORD v79[2];
  WTF::StringImpl *v80;
  __int128 v81;
  __int128 v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v54);
  IPC::Decoder::decode<WebCore::FetchOptions>(a1, (uint64_t)v79);
  Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)&v49, a1);
  IPC::Decoder::decode<WTF::String>(a1, &v47);
  v5 = a1[1];
  v6 = (char *)*a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_40;
  v8 = &v6[v7];
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v36 = v5;
    v37 = 0;
    goto LABEL_41;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_42;
  if (v9)
  {
    v62 = 0;
    v63 = 1;
    v60 = 0;
    v42 = 0;
    v61 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 1;
    v46 = 1;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v6);
  }
  else
  {
    IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v60, a1);
    if (!v64)
      goto LABEL_43;
    v11 = v60;
    v60 = 0;
    v58 = v62;
    v59 = v63;
    v57[0] = 0;
    v42 = v11;
    v57[1] = 0;
    v12 = v61;
    v61 = 0;
    v43 = v12;
    v44 = v62;
    v45 = v63;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v10);
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v13);
    v46 = 1;
  }
  while (1)
  {
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 336) = 0;
      goto LABEL_26;
    }
    if (v56)
    {
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v60, (uint64_t)v54);
      v14 = v55;
      v55 = 0;
      cf = v14;
      if (v83)
      {
        v66[0] = v79[0];
        *(_DWORD *)((char *)v66 + 3) = *(_DWORD *)((char *)v79 + 3);
        v15 = v80;
        v80 = 0;
        v67 = v15;
        v68 = v81;
        v69 = v82;
        if (Headers > 0xFFu)
        {
          v70 = Headers;
          if (v53)
          {
            v16 = v49;
            v49 = 0;
            v71 = v16;
            v17 = v50;
            v50 = 0;
            v72 = v17;
            v18 = v51;
            v51 = 0;
            v73 = v18;
            v19 = v52;
            v52 = 0;
            v74 = v19;
            if (v48)
            {
              v20 = v47;
              v47 = 0;
              *(_QWORD *)&v75 = v20;
              if (v46)
                break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_40:
    v36 = 0;
    v37 = 0;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v38 + 16))(v38, v6);
        v37 = *a1;
        v36 = a1[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
LABEL_41:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v6 = (char *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v40 + 16))(v40, v6);
LABEL_43:
    LOBYTE(v42) = 0;
    v46 = 0;
    v6 = (char *)*a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41 && v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v41 + 16))(v41, v6);
  }
  *((_QWORD *)&v75 + 1) = v42;
  v21 = v43;
  v42 = 0;
  v43 = 0;
  v76 = v21;
  v77 = v44;
  v78 = v45;
  WebCore::ResourceRequestBase::ResourceRequestBase(a2, (uint64_t)&v60);
  v22 = v67;
  *(_QWORD *)(a2 + 192) = cf;
  *(_DWORD *)(a2 + 208) = v66[0];
  *(_DWORD *)(a2 + 211) = *(_DWORD *)((char *)v66 + 3);
  cf = 0;
  v67 = 0;
  *(_QWORD *)(a2 + 216) = v22;
  v23 = v69;
  *(_OWORD *)(a2 + 224) = v68;
  *(_OWORD *)(a2 + 240) = v23;
  *(_BYTE *)(a2 + 256) = v70;
  v24 = v71;
  v71 = 0;
  *(_QWORD *)(a2 + 264) = v24;
  *(_QWORD *)(a2 + 272) = v72;
  *(_QWORD *)&v23 = v76;
  *(_QWORD *)(a2 + 288) = v74;
  *(_OWORD *)(a2 + 296) = v75;
  v72 = 0;
  v25 = v73;
  v73 = 0;
  *(_QWORD *)(a2 + 280) = v25;
  v75 = 0uLL;
  v74 = 0;
  v76 = 0;
  *(_QWORD *)(a2 + 312) = v23;
  LODWORD(v25) = v77;
  *(_BYTE *)(a2 + 324) = v78;
  *(_DWORD *)(a2 + 320) = v25;
  *(_BYTE *)(a2 + 336) = 1;
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75 + 8, v26);
  v28 = (WTF::StringImpl *)v75;
  *(_QWORD *)&v75 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v73);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v71);
  v30 = v67;
  v67 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = cf;
  cf = 0;
  if (v31)
    CFRelease(v31);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v60);
LABEL_26:
  if (v46)
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v6);
  if (v48)
  {
    v32 = v47;
    v47 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&v49);
  if (v83)
  {
    v34 = v80;
    v80 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v54);
}

void sub_196E65AA0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl *a7, char a8, ...)
{
  uint64_t v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  if (a8 && a7)
  {
    if (*(_DWORD *)a7 == 2)
      WTF::StringImpl::destroy(a7, a2);
    else
      *(_DWORD *)a7 -= 2;
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)va);
  if (*(_BYTE *)(v8 - 96))
  {
    v11 = *(WTF::StringImpl **)(v8 - 136);
    *(_QWORD *)(v8 - 136) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)va1);
  _Unwind_Resume(a1);
}

void sub_196E65BCC()
{
  JUMPOUT(0x196E65BC4);
}

void IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 1));
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, (uint64_t)(a2 + 26));
  LOBYTE(v4) = *((_BYTE *)a2 + 256);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 33));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 35));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 37);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unsigned __int16 Headers;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _BYTE v29[192];
  CFTypeRef cf;
  _DWORD v31[2];
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[192];
  const void *v49;
  char v50;
  _DWORD v51[2];
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v48);
  IPC::Decoder::decode<WebCore::FetchOptions>(a1, (uint64_t)v51);
  Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)&v43, a1);
  IPC::Decoder::decode<WTF::String>(a1, &v41);
  if (!*a1)
    goto LABEL_27;
  if (!v6)
    goto LABEL_26;
  if (!v50)
    goto LABEL_26;
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v29, (uint64_t)v48);
  v9 = v49;
  v49 = 0;
  cf = v9;
  if (!v55)
    goto LABEL_26;
  v31[0] = v51[0];
  *(_DWORD *)((char *)v31 + 3) = *(_DWORD *)((char *)v51 + 3);
  v10 = v52;
  v52 = 0;
  v32 = v10;
  v33 = v53;
  v34 = v54;
  if (Headers <= 0xFFu)
    goto LABEL_26;
  v35 = Headers;
  if (!v47)
    goto LABEL_26;
  v11 = v43;
  v43 = 0;
  v36 = v11;
  v12 = v44;
  v44 = 0;
  v37 = v12;
  v13 = v45;
  v45 = 0;
  v38 = v13;
  v14 = v46;
  v46 = 0;
  v39 = v14;
  if (!v42)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 304) = 0;
    goto LABEL_15;
  }
  v15 = v41;
  v41 = 0;
  v40 = v15;
  *(_QWORD *)a2 = v4;
  WebCore::ResourceRequestBase::ResourceRequestBase(a2 + 8, (uint64_t)v29);
  v16 = v32;
  *(_QWORD *)(a2 + 200) = cf;
  *(_DWORD *)(a2 + 208) = v31[0];
  *(_DWORD *)(a2 + 211) = *(_DWORD *)((char *)v31 + 3);
  cf = 0;
  v32 = 0;
  *(_QWORD *)(a2 + 216) = v16;
  v17 = v34;
  *(_OWORD *)(a2 + 224) = v33;
  *(_OWORD *)(a2 + 240) = v17;
  *(_BYTE *)(a2 + 256) = v35;
  v18 = v36;
  v36 = 0;
  *(_QWORD *)(a2 + 264) = v18;
  v19 = v37;
  v37 = 0;
  *(_QWORD *)(a2 + 272) = v19;
  v20 = v38;
  v38 = 0;
  *(_QWORD *)(a2 + 280) = v20;
  v21 = v39;
  v39 = 0;
  *(_QWORD *)(a2 + 288) = v21;
  *(_QWORD *)(a2 + 296) = v40;
  *(_BYTE *)(a2 + 304) = 1;
  v40 = 0;
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v38);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v36);
  v23 = v32;
  v32 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = cf;
  cf = 0;
  if (v24)
    CFRelease(v24);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v29);
LABEL_15:
  if (v42)
  {
    v25 = v41;
    v41 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v8);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&v43);
  if (v55)
  {
    v27 = v52;
    v52 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v48);
}

void sub_196E65F48(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46,uint64_t a47,WTF::StringImpl *a48,char a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  WebCore::ResourceRequestBase *v58;
  WTF::ASCIILiteral *v59;
  WTF::ASCIILiteral *v60;
  uint64_t v61;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;

  if (a46)
  {
    if (*(_DWORD *)a46 == 2)
      WTF::StringImpl::destroy(a46, a2);
    else
      *(_DWORD *)a46 -= 2;
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(v60);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v59);
  if (a36)
  {
    if (*(_DWORD *)a36 == 2)
      WTF::StringImpl::destroy(a36, v63);
    else
      *(_DWORD *)a36 -= 2;
  }
  if (cf)
    CFRelease(cf);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v58);
  if (a49 && a48)
  {
    if (*(_DWORD *)a48 == 2)
      WTF::StringImpl::destroy(a48, v64);
    else
      *(_DWORD *)a48 -= 2;
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&a51);
  if (*(_BYTE *)(v61 - 80))
  {
    v66 = *(WTF::StringImpl **)(v61 - 120);
    *(_QWORD *)(v61 - 120) = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v65);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a58);
  _Unwind_Resume(a1);
}

void sub_196E66054()
{
  JUMPOUT(0x196E6604CLL);
}

char *IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::VectorArgumentCoder<false,WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  v4 = *(_QWORD *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  WTF *result;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (unint64_t *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v10 = *v9;
      v59 = 0;
      v60 = 0;
      if (v10 < 0x8000)
      {
        if (v10)
        {
          LODWORD(v60) = v10;
          v59 = WTF::fastMalloc((WTF *)(32 * v10));
          do
          {
            IPC::Decoder::decode<WebCore::ImageResource>((uint64_t)&v54, a1);
            if (!v58)
              goto LABEL_24;
            if (HIDWORD(v60) == (_DWORD)v60)
            {
              WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageResource>((unsigned int *)&v59, (unint64_t)&v54);
            }
            else
            {
              v12 = HIDWORD(v60) + 1;
              v13 = (_QWORD *)(v59 + 32 * HIDWORD(v60));
              v14 = v54;
              v54 = 0;
              *v13 = v14;
              v15 = v55;
              v55 = 0;
              v13[1] = v15;
              v16 = v56;
              v56 = 0;
              v13[2] = v16;
              v17 = v57;
              v57 = 0;
              v13[3] = v17;
              HIDWORD(v60) = v12;
            }
            std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
            --v10;
          }
          while (v10);
          v18 = v59;
          v20 = v60;
          v19 = HIDWORD(v60);
        }
        else
        {
          v19 = 0;
          v20 = 0;
          v18 = 0;
        }
        v59 = 0;
        v51 = (WTF *)v18;
LABEL_18:
        v60 = 0;
        v52 = __PAIR64__(v19, v20);
        v53 = 1;
        WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, a2);
        goto LABEL_26;
      }
      while (1)
      {
        IPC::Decoder::decode<WebCore::ImageResource>((uint64_t)&v54, a1);
        if (!v58)
          break;
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageResource>((unsigned int *)&v59, (unint64_t)&v54);
        }
        else
        {
          v21 = HIDWORD(v60) + 1;
          v22 = (_QWORD *)(v59 + 32 * HIDWORD(v60));
          v23 = v54;
          v54 = 0;
          *v22 = v23;
          v24 = v55;
          v55 = 0;
          v22[1] = v24;
          v25 = v56;
          v56 = 0;
          v22[2] = v25;
          v26 = v57;
          v57 = 0;
          v22[3] = v26;
          HIDWORD(v60) = v21;
        }
        std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
        if (!--v10)
        {
          v47 = HIDWORD(v60);
          result = (WTF *)v59;
          if (v60 > HIDWORD(v60))
          {
            v48 = (WTF *)v59;
            if (HIDWORD(v60))
            {
              v50 = (WTF::StringImpl *)v59;
              if (HIDWORD(v60) >> 27)
              {
                __break(0xC471u);
                return result;
              }
              v49 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(32 * HIDWORD(v60)));
              LODWORD(v60) = v47;
              v59 = (uint64_t)v49;
              result = v50;
              v48 = v50;
              if (v49 != (WTF::StringImpl **)v50)
              {
                WTF::VectorMover<false,WebCore::ImageResource>::move(v50, (WTF::StringImpl *)((char *)v50 + 32 * v47), v49);
                result = v50;
                v48 = (WTF *)v59;
              }
            }
            if (result)
            {
              if (v48 == result)
              {
                v59 = 0;
                LODWORD(v60) = 0;
              }
              WTF::fastFree(result, a2);
              result = (WTF *)v59;
            }
            else
            {
              result = v48;
            }
          }
          v59 = 0;
          v51 = result;
          v20 = v60;
          v19 = HIDWORD(v60);
          goto LABEL_18;
        }
      }
LABEL_24:
      LOBYTE(v51) = 0;
      v53 = 0;
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
      WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v27);
      goto LABEL_25;
    }
    v41 = v5;
    v42 = 0;
  }
  else
  {
    v41 = 0;
    v42 = 0;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v43 + 16))(v43, v6, v5);
        v42 = *a1;
        v41 = a1[1];
      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (v44 && v41)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
  LOBYTE(v51) = 0;
  v53 = 0;
LABEL_25:
  v28 = (void *)*a1;
  v29 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
    goto LABEL_46;
LABEL_26:
  while (1)
  {
    result = (WTF *)IPC::Decoder::decode<WTF::String>(a1, &v59);
    v31 = a1[1];
    v32 = *a1;
    v33 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v31 < v33 || v31 - v33 <= 7)
      break;
    v35 = (uint64_t *)(v32 + v33);
    a1[2] = (uint64_t)(v35 + 1);
    if (!v32)
    {
      v45 = v31;
      v28 = 0;
      goto LABEL_52;
    }
    v36 = 0;
    v37 = *v35;
LABEL_33:
    if (v53)
    {
      if ((_BYTE)v60)
      {
        v38 = v59;
        v59 = 0;
        if (!v36)
        {
          v39 = v51;
          v51 = 0;
          v54 = 0;
          *(_QWORD *)a3 = v39;
          v55 = 0;
          v40 = v52;
          v52 = 0;
          *(_QWORD *)(a3 + 8) = v40;
          *(_QWORD *)(a3 + 16) = v38;
          *(_QWORD *)(a3 + 24) = v37;
          *(_BYTE *)(a3 + 32) = 1;
          v56 = 0;
          v57 = v37;
          result = (WTF *)WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v28);
          goto LABEL_37;
        }
      }
    }
    __break(1u);
LABEL_46:
    if (v29)
      (*(void (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v28);
  }
  v45 = 0;
  v28 = 0;
  *a1 = 0;
  a1[1] = 0;
  v46 = a1[3];
  if (v46)
  {
    if (v31)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v32, v31);
      v28 = (void *)*a1;
      v45 = a1[1];
    }
    else
    {
      v45 = 0;
      v28 = 0;
    }
  }
LABEL_52:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
  {
    if (v45)
    {
      result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v28);
      if (*a1)
      {
        v37 = 0;
        v36 = 1;
        goto LABEL_33;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
LABEL_37:
  if ((_BYTE)v60)
  {
    result = (WTF *)v59;
    v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v53)
    return (WTF *)WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v28);
  return result;
}

void sub_196E66514(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  WTF::StringImpl *v19;

  if (*(_BYTE *)(v17 - 40))
  {
    v19 = *(WTF::StringImpl **)(v17 - 48);
    *(_QWORD *)(v17 - 48) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if (a13)
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  v5 = *(_BYTE *)(a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::VectorArgumentCoder<false,WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 104);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 128);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 152);
  return IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 176);
}

void IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  char v23;
  char v24;
  void *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  WTF *v67;
  uint64_t v68;
  char v69;
  WTF *v70;
  uint64_t v71;
  char v72;
  WTF *v73;
  WTF *v74;
  char v75;
  WTF *v76[2];
  unsigned __int8 v77;
  char v78;
  WTF *v79;
  uint64_t v80;
  unsigned __int8 v81;
  char v82;
  WTF *v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  WTF::StringImpl *v98;
  __int128 v99;
  __int128 v100;
  char v101;
  WTF::StringImpl *v102;
  char v103;
  char v104;

  v2 = a1;
  IPC::Decoder::decode<WebCore::ContentType>(a1, (uint64_t)&v102);
  IPC::Decoder::decode<WTF::URL>(v2, &v98);
  v4 = (unsigned __int8 *)v2[1];
  v5 = *v2;
  v6 = v2[2] - *v2;
  if ((unint64_t)v4 <= v6)
    goto LABEL_76;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  v2[2] = v8;
  if (!v5)
  {
    v38 = (uint64_t)v4;
    v39 = 0;
    goto LABEL_77;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v42 = v2[3];
    if (!v42 || !v4)
    {
      v12 = 0;
      v43 = 0;
      v5 = 0;
      v10 = 1;
LABEL_81:
      *v2 = 0;
      v2[1] = 0;
      v44 = v2[3];
      if (v44 && v43)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v5, v43);
        v16 = 0;
        v5 = *v2;
        v4 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v16 = 0;
      }
      goto LABEL_83;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v5);
    v11 = 0;
    v5 = *v2;
    v4 = (unsigned __int8 *)v2[1];
    v10 = 1;
    v8 = v2[2];
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - v5;
    if ((unint64_t)v4 <= v13)
    {
      v43 = 0;
      v50 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v50 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
        v5 = *v2;
        v43 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_81;
    }
    v14 = (unsigned __int8 *)(v5 + v13);
    v15 = v5 + v13 + 1;
    v2[2] = v15;
    if (!v5)
    {
      v43 = (uint64_t)v4;
      goto LABEL_81;
    }
    v16 = *v14;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_83:
    *v2 = 0;
    v2[1] = 0;
    v45 = v2[3];
    if (!v45 || !v4)
    {
      v19 = 0;
      v21 = 0;
      v5 = 0;
      v17 = 1;
      goto LABEL_85;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v5);
    v18 = 0;
    v5 = *v2;
    v4 = (unsigned __int8 *)v2[1];
    v17 = 1;
    v15 = v2[2];
LABEL_12:
    if (v16)
      v19 = v18;
    else
      v19 = 0;
    v20 = v15 - v5;
    if ((unint64_t)v4 <= v20)
    {
      v21 = 0;
      v49 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v49 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        v5 = *v2;
        v21 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_85;
    }
    v21 = (unsigned __int8 *)(v5 + v20);
    v2[2] = (uint64_t)(v21 + 1);
    if (!v5)
    {
      v21 = v4;
LABEL_85:
      *v2 = 0;
      v2[1] = 0;
      v46 = v2[3];
      if (v46)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v46 + 16))(v46, v5, v21);
          LODWORD(v21) = 0;
          v5 = *v2;
          v4 = (unsigned __int8 *)v2[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
        }
      }
      else
      {
        v4 = 0;
        v5 = 0;
        LODWORD(v21) = 0;
      }
      goto LABEL_87;
    }
    LODWORD(v21) = *v21;
    if (v21 < 2)
    {
      v22 = 0;
      v23 = 1;
      goto LABEL_19;
    }
LABEL_87:
    *v2 = 0;
    v2[1] = 0;
    v47 = v2[3];
    if (v47)
    {
      v48 = (int)v21;
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v5);
      v23 = 0;
      v22 = 1;
      LODWORD(v21) = v48;
    }
    else
    {
      v23 = 0;
      v22 = 1;
    }
LABEL_19:
    v24 = (_DWORD)v21 ? v23 : 0;
    IPC::Decoder::decode<WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v95, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v91, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v87, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v83, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v79, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)v76, v2);
    if (!*v2)
      break;
    if (v104)
    {
      v26 = (uint64_t)v102;
      v102 = 0;
      v51 = v26;
      v52 = v103;
      if (v101)
      {
        v27 = v98;
        v98 = 0;
        v53 = v27;
        v54 = v99;
        v55 = v100;
        LODWORD(v99) = v99 & 0xFFFFFFFE;
        if (!v10)
        {
          v56 = v12;
          if (!v17)
          {
            v57 = v19;
            if (!v22)
            {
              v58 = v24;
              if (v97)
              {
                v59 = v95;
                v28 = v96;
                v95 = 0;
                v96 = 0;
                v60 = v28;
                if (v94)
                {
                  LOBYTE(v61) = 0;
                  v63 = 0;
                  if (v93)
                  {
                    v61 = v91;
                    v29 = v92;
                    v91 = 0;
                    v92 = 0;
                    v62 = v29;
                    v63 = 1;
                  }
                  if (v90)
                  {
                    LOBYTE(v64) = 0;
                    v66 = 0;
                    if (v89)
                    {
                      v64 = v87;
                      v30 = v88;
                      v87 = 0;
                      v88 = 0;
                      v65 = v30;
                      v66 = 1;
                    }
                    if (v86)
                    {
                      LOBYTE(v67) = 0;
                      v69 = 0;
                      if (v85)
                      {
                        v67 = v83;
                        v31 = v84;
                        v83 = 0;
                        v84 = 0;
                        v68 = v31;
                        v69 = 1;
                      }
                      if (v82)
                      {
                        LOBYTE(v70) = 0;
                        v72 = 0;
                        v2 = (uint64_t *)v81;
                        if (v81)
                        {
                          v70 = v79;
                          v32 = v80;
                          v79 = 0;
                          v80 = 0;
                          v71 = v32;
                          v72 = 1;
                        }
                        if (v78)
                        {
                          LOBYTE(v73) = 0;
                          v75 = 0;
                          v33 = v77;
                          if (v77)
                          {
                            v34 = v76[0];
                            v76[0] = 0;
                            v73 = v34;
                            v74 = v76[1];
                            v75 = 1;
                          }
                          WebCore::MediaEngineSupportParameters::MediaEngineSupportParameters((uint64_t)a2, &v51);
                          a2[200] = 1;
                          WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v51, v35);
                          goto LABEL_45;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_76:
    v38 = 0;
    v39 = 0;
    *v2 = 0;
    v2[1] = 0;
    v40 = v2[3];
    if (v40)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        v39 = *v2;
        v38 = v2[1];
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
LABEL_77:
    *v2 = 0;
    v2[1] = 0;
    v41 = v2[3];
    if (v41 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
      v9 = 0;
      v5 = *v2;
      v4 = (unsigned __int8 *)v2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
  }
  *a2 = 0;
  a2[200] = 0;
  v33 = v77;
  if (!v78)
    goto LABEL_48;
LABEL_45:
  if (v33 && v76[0])
    WTF::fastFree(v76[0], v25);
LABEL_48:
  if (v82 && v81 && v79)
    WTF::fastFree(v79, v25);
  if (v86 && v85 && v83)
    WTF::fastFree(v83, v25);
  if (v90 && v89)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v25);
  if (v94 && v93)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v25);
  if (v97)
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v25);
  if (v101)
  {
    v36 = v98;
    v98 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (v104)
  {
    v37 = v102;
    v102 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
}

void sub_196E66C98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF *a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF *a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,WTF *a46,uint64_t a47,char a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  if (*(_BYTE *)(v52 - 112))
  {
    v54 = *(WTF::StringImpl **)(v52 - 152);
    *(_QWORD *)(v52 - 152) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, a2);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  if (*(_BYTE *)(v52 - 88))
  {
    v55 = *(WTF::StringImpl **)(v52 - 104);
    *(_QWORD *)(v52 - 104) = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, a2);
      else
        *(_DWORD *)v55 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ContentType>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ContentType,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 2);
  return IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 4);
}

int64_t IPC::ArgumentCoder<WebCore::SeekTarget,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v11);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v9);
  result = IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v7);
  if (!*a1)
    goto LABEL_8;
  if (!v12 || !v10 || !v8)
  {
    __break(1u);
LABEL_8:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return result;
  }
  v5 = v9;
  v6 = v7;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

char *IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 4);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 6);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 10);
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 12);
}

_QWORD *IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  __int128 v48;
  char v49;
  __int128 v50;
  char v51;
  __int128 v52;
  char v53;
  __int128 v54;
  char v55;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v30 = v4;
    v31 = 0;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v33 = a1[3];
  if (v33 && v30)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
    v10 = 0;
    v5 = *a1;
    v4 = a1[1];
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v10 = 0;
  }
  v9 = 1;
LABEL_8:
  v11 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v11 && v4 - v11 > 7)
  {
    v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v13 + 1);
    if (v5)
    {
      v14 = 0;
      v15 = *v13;
      goto LABEL_15;
    }
    v34 = v4;
    v35 = 0;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v35 = *a1;
        v34 = a1[1];
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v37 = a1[3];
  if (v37 && v34)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
    v15 = 0;
    v5 = *a1;
    v4 = a1[1];
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v15 = 0;
  }
  v14 = 1;
LABEL_15:
  v16 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v16 || v4 - v16 <= 7)
  {
    v38 = 0;
    v39 = 0;
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        v39 = *a1;
        v38 = a1[1];
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
  }
  else
  {
    v17 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v17 + 1);
    if (v5)
    {
      v18 = 0;
      v19 = *v17;
      goto LABEL_19;
    }
    v38 = v4;
    v39 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v19 = 0;
  v41 = a1[3];
  if (v41 && v38)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
    v5 = *a1;
    v4 = a1[1];
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v18 = 1;
LABEL_19:
  v20 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v20 || v4 - v20 <= 7)
  {
    v42 = 0;
    v43 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v43 = *a1;
        v42 = a1[1];
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
    }
  }
  else
  {
    v21 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a1[2] = (uint64_t)(v21 + 1);
    if (v5)
    {
      v22 = 0;
      v23 = *v21;
      goto LABEL_23;
    }
    v42 = v4;
    v43 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v23 = 0;
  v45 = a1[3];
  if (v45 && v42)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
  v22 = 1;
LABEL_23:
  IPC::Decoder::decode<std::optional<double>>(a1, &v54);
  IPC::Decoder::decode<std::optional<double>>(a1, &v52);
  IPC::Decoder::decode<std::optional<double>>(a1, &v50);
  IPC::Decoder::decode<std::optional<double>>(a1, &v48);
  result = IPC::Decoder::decode<std::optional<double>>(a1, &v46);
  v25 = *a1;
  if (!*a1)
  {
LABEL_36:
    *(_BYTE *)a2 = 0;
    goto LABEL_34;
  }
  if (v9
    || v14
    || v18
    || v22
    || (LOBYTE(v25) = v55) == 0
    || (LOBYTE(v25) = v53) == 0
    || (LOBYTE(v25) = v51) == 0
    || (LOBYTE(v25) = v49) == 0
    || (LOBYTE(v25) = v47) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  v26 = v54;
  v27 = v52;
  v28 = v50;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v23;
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v27;
  v29 = v48;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v29;
  LOBYTE(v25) = 1;
  *(_OWORD *)(a2 + 96) = v46;
LABEL_34:
  *(_BYTE *)(a2 + 112) = v25;
  return result;
}

char *IPC::ArgumentCoder<WebCore::AppHighlight,void>::encode(IPC::Encoder *a1, WebCore::FragmentedSharedBuffer **a2)
{
  WebCore::FragmentedSharedBuffer **v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(a1, *a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(v2 + 1));
  v4 = *((_BYTE *)v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 25);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::AppHighlight,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  unsigned int *result;
  WTF::StringImpl *v6;
  unsigned int *v7;
  int v8;
  WTF::StringImpl *v9;
  __int16 v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12;
  char v13;
  unsigned int *v14;
  char v15;

  IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(a1, &v14);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v11);
  v4 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  result = (unsigned int *)IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  if (!*a1)
  {
LABEL_21:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (!v13 || !v12)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (!v15
    || (v7 = v14, v14 = 0, !v13)
    || ((v8 = v12) == 0 ? (v9 = 0) : (v9 = v11, v11 = 0), v4 <= 0xFFu || (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)a2 = v7;
  v10 = v4 | (unsigned __int16)((_WORD)result << 8);
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (!v8)
  {
    *(_WORD *)(a2 + 24) = v10;
    *(_BYTE *)(a2 + 32) = 1;
    goto LABEL_16;
  }
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = 1;
  *(_WORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = 1;
LABEL_11:
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    else
      *result -= 2;
  }
LABEL_16:
  if (v15)
  {
    result = v14;
    v14 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v6);
  }
  return result;
}

void sub_196E67554(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, unsigned int *a16, char a17)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a17)
  {
    if (a16)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a16, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::decode(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E6760C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int *v4;

  if (*(_BYTE *)(v2 + 8))
  {
    v4 = *(unsigned int **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaDeviceHashSalts,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  char v11;

  IPC::Decoder::decode<WTF::String>(a1, &v10);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (*a1)
  {
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v9)
      {
        v7 = v8;
        *(_QWORD *)a2 = v6;
        *(_QWORD *)(a2 + 8) = v7;
        *(_BYTE *)(a2 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_5:
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E67704(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_DWORD *)a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(a2 + 2), v5);
}

uint64_t IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  void *v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char *v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _BYTE v52[16];
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  char v56[8];
  char v57;
  int v58;
  WTF *v59;
  WTF::StringImpl *v60;
  int v61;
  char v62;
  WTF *v63;
  WTF::StringImpl *v64;

  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5 = v4;
  LOWORD(v54) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v54);
  if (BYTE1(v54))
    v6 = v54 > 0xAu;
  else
    v6 = 1;
  v7 = v6;
  if (v7 == 1)
  {
    v29 = *a1;
    v30 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31)
    {
      if (v30)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
    }
  }
  v8 = a1[1];
  v9 = *a1;
  v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    v32 = 0;
    v33 = 0;
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v33 = *a1;
        v32 = a1[1];
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
    }
    goto LABEL_44;
  }
  v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    v32 = v8;
    v33 = 0;
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35 && v32)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v33, v32);
    goto LABEL_11;
  }
  v12 = *v11;
  if (v12 <= 2)
  {
    if (!*v11)
    {
      result = IPC::Decoder::decode<WebCore::DisplayList::ClearDropShadow>(a1);
      if ((unsigned __int16)result >= 0x100u)
      {
        v61 = 0;
        v62 = 1;
        goto LABEL_74;
      }
      goto LABEL_11;
    }
    if (v12 != 1)
    {
      v20 = IPC::Decoder::decode<unsigned long long>(a1);
      if ((_BYTE)v21)
      {
        v22 = (WTF *)v20;
        v63 = 0;
        v64 = 0;
        if (v20 >= 0xAAAA)
        {
          do
          {
            result = (uint64_t)IPC::Decoder::decode<WebCore::SpeechRecognitionResultData>((uint64_t)&v54, a1);
            if (!v57)
              goto LABEL_70;
            if (HIDWORD(v64) == (_DWORD)v64)
            {
              result = WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SpeechRecognitionResultData>((uint64_t)&v63, (unint64_t)&v54);
            }
            else
            {
              v41 = (char *)v63 + 24 * HIDWORD(v64);
              *(_QWORD *)v41 = 0;
              *((_QWORD *)v41 + 1) = 0;
              v42 = v54;
              v54 = 0;
              *(_QWORD *)v41 = v42;
              LODWORD(v42) = v55;
              LODWORD(v55) = 0;
              *((_DWORD *)v41 + 2) = (_DWORD)v42;
              LODWORD(v42) = HIDWORD(v55);
              HIDWORD(v55) = 0;
              *((_DWORD *)v41 + 3) = (_DWORD)v42;
              v41[16] = v56[0];
              ++HIDWORD(v64);
            }
            if (v57)
              result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v21);
            v22 = (WTF *)((char *)v22 - 1);
          }
          while (v22);
          v43 = HIDWORD(v64);
          v22 = v63;
          if (v64 > HIDWORD(v64))
          {
            v44 = v63;
            if (HIDWORD(v64))
            {
              if (HIDWORD(v64) >= 0xAAAAAAB)
              {
                __break(0xC471u);
                return result;
              }
              v45 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v64)));
              LODWORD(v64) = 24 * v43 / 0x18;
              v63 = (WTF *)v45;
              v44 = v22;
              if ((WTF *)v45 != v22)
              {
                WTF::VectorMover<false,WebCore::SpeechRecognitionResultData>::move((uint64_t)v22, (char *)v22 + 24 * v43, v45);
                v44 = v63;
              }
            }
            if (v22)
            {
              if (v44 == v22)
              {
                v63 = 0;
                LODWORD(v64) = 0;
              }
              WTF::fastFree(v22, v21);
LABEL_37:
              v22 = v63;
            }
            else
            {
              v22 = v44;
            }
          }
          v27 = v64;
          goto LABEL_40;
        }
        if (!v20)
        {
          v27 = 0;
LABEL_40:
          v51 = v27;
          v63 = 0;
          v64 = 0;
          v19 = 1;
          v56[0] = 1;
          WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v21);
          v54 = 0;
          v55 = 0;
          v59 = v22;
          v60 = v51;
          v61 = 2;
          result = WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v28);
          goto LABEL_73;
        }
        v23 = 24 * v20;
        v24 = WTF::fastMalloc((WTF *)(24 * v20));
        LODWORD(v64) = v23 / 0x18;
        v63 = (WTF *)v24;
        while (1)
        {
          IPC::Decoder::decode<WebCore::SpeechRecognitionResultData>((uint64_t)&v54, a1);
          if (!v57)
            break;
          if (HIDWORD(v64) == (_DWORD)v64)
          {
            WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SpeechRecognitionResultData>((uint64_t)&v63, (unint64_t)&v54);
          }
          else
          {
            v25 = (char *)v63 + 24 * HIDWORD(v64);
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            v26 = v54;
            v54 = 0;
            *(_QWORD *)v25 = v26;
            LODWORD(v26) = v55;
            LODWORD(v55) = 0;
            *((_DWORD *)v25 + 2) = (_DWORD)v26;
            LODWORD(v26) = HIDWORD(v55);
            HIDWORD(v55) = 0;
            *((_DWORD *)v25 + 3) = (_DWORD)v26;
            v25[16] = v56[0];
            ++HIDWORD(v64);
          }
          if (v57)
            WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v21);
          v22 = (WTF *)((char *)v22 - 1);
          if (!v22)
            goto LABEL_37;
        }
LABEL_70:
        WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v21);
      }
LABEL_71:
      v46 = *a1;
      v47 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result && v47)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v46);
      v19 = 0;
      LOBYTE(v59) = 0;
      goto LABEL_73;
    }
    if (v8 <= (unint64_t)&v11[-v9 + 1])
    {
      v36 = 0;
      v37 = 0;
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v36 = 0;
        v48 = *a1;
        v49 = a1[1];
        v50 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v37 = 0;
        if (v50)
        {
          if (v49)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
            v37 = *a1;
            v36 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v11 + 2);
      v16 = v11[1];
      if (v16 < 8)
      {
        v17 = v16 | 0x100;
LABEL_20:
        result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, &v54);
        if (*a1)
        {
          if (v17 <= 0xFF || !(_BYTE)v55)
          {
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          LOBYTE(v59) = v17;
          v60 = v54;
          v19 = 1;
          v61 = 1;
LABEL_73:
          v62 = v19;
          if (v19)
            goto LABEL_74;
          goto LABEL_12;
        }
        if ((_BYTE)v55)
        {
          v40 = v54;
          v54 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        goto LABEL_71;
      }
      v36 = v8;
      v37 = v9;
    }
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v36)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
    v17 = 0;
    goto LABEL_20;
  }
LABEL_11:
  LOBYTE(v59) = 0;
  v62 = 0;
LABEL_12:
  v13 = *a1;
  v14 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v14)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
LABEL_74:
  if (*a1)
  {
    if (v5 && !v7 && v62)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v52, (uint64_t)&v59);
      WebCore::SpeechRecognitionUpdate::SpeechRecognitionUpdate();
      *(_QWORD *)a2 = v54;
      *(_BYTE *)(a2 + 8) = v55;
      result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 16, (uint64_t)v56);
      *(_BYTE *)(a2 + 40) = 1;
      if (v58 != -1)
        result = ((uint64_t (*)(WTF **, char *))off_1E34ADEA0[v58])(&v63, v56);
      v58 = -1;
      if (v53 != -1)
        result = ((uint64_t (*)(WTF **, _BYTE *))off_1E34ADEA0[v53])(&v63, v52);
      v53 = -1;
      goto LABEL_83;
    }
    goto LABEL_87;
  }
LABEL_88:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_83:
  if (v62)
  {
    if (v61 != -1)
      return ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E34ADEA0[v61])(&v54, &v59);
  }
  return result;
}

void sub_196E67E18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a17)
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17 - 96, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(IPC::Encoder *a1, WebCore::ARKitBadgeSystemImage *this)
{
  uint64_t v4;
  int v5;
  int v6;
  char *result;

  v4 = WebCore::ARKitBadgeSystemImage::imageIdentifier(this);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *((_DWORD *)this + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *((_DWORD *)this + 9);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v6;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(uint64_t *a1, WebCore::ARKitBadgeSystemImage *this)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = WebCore::ARKitBadgeSystemImage::imageIdentifier(this);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v10) = v4;
      a1[2] = v11;
    }
  }
  return IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, (_DWORD *)this + 8);
}

uint64_t IPC::Decoder::decode<WebCore::VideoFrameRotation>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::VideoFrameRotation,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<__CVBuffer *>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

unint64_t IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  char v7;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)v2 + 2);
  v7 = *((_BYTE *)v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v2) = *((_BYTE *)v2 + 25);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  CFTypeRef v20;
  CFTypeRef cf;
  unsigned __int8 v22;

  v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  v6 = v5;
  v7 = a1[1];
  v8 = *a1;
  v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    v11 = (int *)(v8 + v9);
    a1[2] = (unint64_t)(v11 + 1);
    if (!v8)
    {
      v16 = v7;
      v17 = 0;
      goto LABEL_18;
    }
    v12 = 0;
    v13 = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v8, v7);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    v13 = 0;
    v19 = a1[3];
    if (v19 && v16)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    v12 = 1;
LABEL_8:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a1, (uint64_t)&cf);
    v14 = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>((uint64_t *)a1);
    v15 = IPC::Decoder::decode<WebCore::RenderingPurpose>((uint64_t *)a1);
    v8 = *a1;
    if (!*a1)
      break;
    if (v6)
    {
      if (!v12)
      {
        v8 = v22;
        if (v22)
        {
          v8 = (unint64_t)cf;
          cf = 0;
          v7 = v14;
          if (v14 > 0xFFu)
          {
            v7 = v15;
            if (v15 > 0xFFu)
            {
              *(_QWORD *)a2 = v4;
              *(_DWORD *)(a2 + 8) = v13;
              *(_QWORD *)(a2 + 16) = v8;
              *(_WORD *)(a2 + 24) = v14 | (unsigned __int16)(v15 << 8);
              *(_BYTE *)(a2 + 32) = 1;
              return;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v22)
  {
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
  }
}

void sub_196E68354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::RenderingPurpose>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::RenderingPurpose,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::HueInterpolationMethod>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 4)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  char *result;

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(a1, v2, v4);
  LOBYTE(v2) = *(_BYTE *)(v2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = v2[1];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      v25 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        a1 = v25;
        v14 = *v25;
        v13 = v25[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_12;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v4 + 1;
  a1[2] = v4 + 1;
  if (!v2)
  {
    v13 = v1;
    v14 = 0;
LABEL_12:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v24 = a1;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        a1 = v24;
        v2 = *v24;
        v1 = v24[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = *v4;
  if (v6 < 0xE)
  {
    v7 = 0;
    goto LABEL_5;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[3];
  if (!v6)
  {
    v2 = 0;
    v7 = 1;
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
      goto LABEL_23;
    v1 = 0;
    v2 = 0;
    goto LABEL_17;
  }
  v23 = a1;
  if (!v1)
  {
    v6 = 0;
    v2 = 0;
    v7 = 1;
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
  v6 = 0;
  a1 = v23;
  v2 = *v23;
  v1 = v23[1];
  v7 = 1;
  v5 = (unsigned __int8 *)v23[2];
LABEL_5:
  v8 = &v5[-v2];
  if (v1 <= (unint64_t)v8)
  {
    v20 = v7;
    v6 = 0;
    v17 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v26 = a1;
    if (v17 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      a1 = v26;
      v2 = *v26;
      v6 = v26[1];
    }
    else
    {
      v2 = 0;
    }
    v7 = v20;
    goto LABEL_15;
  }
  v9 = &v8[v2];
  a1[2] = v9 + 1;
  if (!v2)
  {
    v6 = v1;
    goto LABEL_15;
  }
  v10 = *v9;
  if ((v10 - 1) > 0x11)
    goto LABEL_17;
  if ((v7 & 1) != 0)
  {
    while (1)
    {
      __break(1u);
LABEL_23:
      v19 = v7;
      v22 = a1;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v6);
        a1 = v22;
        v2 = *v22;
        v1 = v22[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v7 = v19;
LABEL_17:
      *a1 = 0;
      a1[1] = 0;
      v6 = a1[3];
      if (!v6)
      {
LABEL_18:
        LODWORD(v10) = 0;
        v11 = 0;
        return v6 | ((_DWORD)v10 << 8) | (v11 << 16);
      }
      v18 = v7;
      v21 = a1;
      if (!v1)
        break;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
      v6 = *v21;
      if (!*v21)
        goto LABEL_18;
      v6 = v18;
    }
    LODWORD(v10) = 0;
    v11 = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    v11 = 1;
  }
  return v6 | ((_DWORD)v10 << 8) | (v11 << 16);
}

uint64_t *IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::encode(uint64_t *a1, _BYTE *a2)
{
  unint64_t v2;

  v2 = a1[2];
  if (v2 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v2) = *a2;
    a1[2] = v2 + 1;
  }
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 8));
}

uint64_t IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  void *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BYTE v13[7];
  _BYTE v14[8];
  char v15;

  v4 = IPC::Decoder::decode<JSC::MessageLevel>(a1);
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v14);
  if (!v15)
    goto LABEL_12;
  while (1)
  {
    if (!*a1)
    {
      *a2 = 0;
      a2[16] = 0;
      return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v5);
    }
    if (v4 > 0xFFu && v15)
      break;
    __break(1u);
LABEL_12:
    v5 = (void *)*a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v11 + 16))(v11, v5);
  }
  WebCore::Color::Color();
  *a2 = v4;
  WebCore::Color::Color();
  a2[16] = 1;
  if ((*(_QWORD *)v13 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(*(_QWORD *)v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v5);
}

void sub_196E68968(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  char v7;
  int v8;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 4));
  v7 = *((_BYTE *)a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = a2[7];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v8;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteCommandArgument,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;

  IPC::Decoder::decode<std::optional<double>>(a1, &v6);
  result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*a1)
    goto LABEL_7;
  if (!v8 || (*(_QWORD *)&v5 = v6, BYTE8(v5) = v7, (result & 0xFF0000) == 0))
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return result;
  }
  *(_OWORD *)a2 = v5;
  *(_WORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

char *IPC::ArgumentCoder<WebCore::GenericCueData,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 1);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 7);
  v5 = v2[8];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[9];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = v2[10];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = v2[11];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = v2[12];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 13));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 14));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 15));
  LOBYTE(v4) = *((_BYTE *)v2 + 128);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 129);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 130);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::GenericCueData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  void *v29;
  char v30;
  BOOL v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  void *v42;
  void *v43;
  WTF::StringImpl *result;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  _BYTE v84[40];
  __int128 v85;
  WTF::StringImpl *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  Color v95;
  char v96;
  Color v97;
  char v98;
  Color v99;
  char v100;
  WTF::StringImpl *v101;
  char v102;
  WTF::StringImpl *v103;
  char v104;
  WTF::StringImpl *v105;
  char v106;
  __int128 v107;
  char v108;
  __int128 v109;
  char v110;

  v81 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a1);
  v83 = v4;
  if (!v4)
    goto LABEL_77;
  while (1)
  {
    IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v109);
    IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v107);
    IPC::Decoder::decode<WTF::AtomString>(a1, &v105);
    IPC::Decoder::decode<WTF::String>(a1, &v103);
    IPC::Decoder::decode<WTF::String>(a1, &v101);
    v5 = a1[1];
    v6 = *a1;
    v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      v9 = (uint64_t *)(v6 + v7);
      a1[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        v82 = 0;
        v10 = *v9;
        goto LABEL_9;
      }
      v50 = v5;
      v51 = 0;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      *a1 = 0;
      a1[1] = 0;
      v52 = a1[3];
      if (v52)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
          v51 = *a1;
          v50 = a1[1];
        }
        else
        {
          v50 = 0;
          v51 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v10 = 0;
    v53 = a1[3];
    if (v53 && v50)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v82 = 1;
LABEL_9:
    v11 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v11 || v5 - v11 <= 7)
    {
      v57 = 0;
      v58 = 0;
      *a1 = 0;
      a1[1] = 0;
      v59 = a1[3];
      if (v59)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
          v58 = *a1;
          v57 = a1[1];
        }
        else
        {
          v57 = 0;
          v58 = 0;
        }
      }
    }
    else
    {
      v12 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v12 + 1);
      if (v6)
      {
        v13 = 0;
        v14 = *v12;
        goto LABEL_13;
      }
      v57 = v5;
      v58 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v14 = 0;
    v60 = a1[3];
    if (v60 && v57)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v60 + 16))(v60, v58, v57);
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v13 = 1;
LABEL_13:
    v15 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v15 || v5 - v15 <= 7)
    {
      v61 = 0;
      v62 = 0;
      *a1 = 0;
      a1[1] = 0;
      v63 = a1[3];
      if (v63)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
          v62 = *a1;
          v61 = a1[1];
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
      }
    }
    else
    {
      v16 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v16 + 1);
      if (v6)
      {
        v17 = 0;
        v18 = *v16;
        goto LABEL_17;
      }
      v61 = v5;
      v62 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v18 = 0;
    v64 = a1[3];
    if (v64 && v61)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v17 = 1;
LABEL_17:
    v19 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v19 || v5 - v19 <= 7)
    {
      v65 = 0;
      v66 = 0;
      *a1 = 0;
      a1[1] = 0;
      v67 = a1[3];
      if (v67)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
          v66 = *a1;
          v65 = a1[1];
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
      }
    }
    else
    {
      v20 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v20 + 1);
      if (v6)
      {
        v21 = 0;
        v22 = *v20;
        goto LABEL_21;
      }
      v65 = v5;
      v66 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v22 = 0;
    v68 = a1[3];
    if (v68 && v65)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v21 = 1;
LABEL_21:
    v23 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v23 || v5 - v23 <= 7)
    {
      v69 = 0;
      v70 = 0;
      *a1 = 0;
      a1[1] = 0;
      v71 = a1[3];
      if (v71)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
          v70 = *a1;
          v69 = a1[1];
        }
        else
        {
          v69 = 0;
          v70 = 0;
        }
      }
    }
    else
    {
      v24 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v24 + 1);
      if (v6)
      {
        v25 = 0;
        v26 = *v24;
        goto LABEL_25;
      }
      v69 = v5;
      v70 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v26 = 0;
    v72 = a1[3];
    if (v72 && v69)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v72 + 16))(v72, v70, v69);
    v25 = 1;
LABEL_25:
    IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v99);
    if (!v100)
    {
      v54 = *a1;
      v55 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v56 = a1[3];
      if (v56)
      {
        if (v55)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v97);
    if (!v98)
    {
      v73 = *a1;
      v74 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v75 = a1[3];
      if (v75)
      {
        if (v74)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73);
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v95);
    if (!v96)
    {
      v76 = *a1;
      v77 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v78 = a1[3];
      if (v78)
      {
        if (v77)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76);
      }
    }
    v27 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
    v28 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
    *(_WORD *)v84 = 0;
    IPC::Decoder::operator>><unsigned char>(a1, v84);
    v30 = v84[0];
    if (v84[1])
      v31 = v84[0] > 2u;
    else
      v31 = 1;
    v32 = v31;
    if (v32 == 1)
    {
      v29 = (void *)*a1;
      v79 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v80 = a1[3];
      if (v80 && v79)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v80 + 16))(v80, v29);
      v30 = 0;
    }
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 136) = 0;
      goto LABEL_60;
    }
    if (v83
      && v110
      && v108
      && v106
      && v104
      && v102
      && !v82
      && !v13
      && !v17
      && !v21
      && !v25
      && v100
      && v98
      && v96
      && v27 > 0xFFu
      && v28 > 0xFFu
      && !v32)
    {
      break;
    }
    __break(1u);
LABEL_77:
    v46 = *a1;
    v47 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48)
      v49 = v47 == 0;
    else
      v49 = 1;
    if (!v49)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
  }
  *(_QWORD *)v84 = v81;
  *(_OWORD *)&v84[8] = v109;
  *(_OWORD *)&v84[24] = v107;
  v33 = v105;
  if (v105)
    *(_DWORD *)v105 += 2;
  *(_QWORD *)&v85 = v33;
  v34 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  *((_QWORD *)&v85 + 1) = v34;
  v35 = v101;
  if (v101)
    *(_DWORD *)v101 += 2;
  v86 = v35;
  *(_QWORD *)&v87 = v10;
  *((_QWORD *)&v87 + 1) = v14;
  *(_QWORD *)&v88 = v18;
  *((_QWORD *)&v88 + 1) = v22;
  v89 = v26;
  WebCore::Color::Color((WebCore::Color *)&v90, &v99);
  WebCore::Color::Color((WebCore::Color *)&v91, &v97);
  WebCore::Color::Color((WebCore::Color *)&v92, &v95);
  LOBYTE(v93) = v27;
  HIBYTE(v93) = v28;
  v94 = v30;
  v36 = *(_OWORD *)&v84[16];
  *(_OWORD *)a2 = *(_OWORD *)v84;
  *(_OWORD *)(a2 + 16) = v36;
  *(_QWORD *)(a2 + 29) = *(_QWORD *)&v84[29];
  v37 = v85;
  v85 = 0uLL;
  *(_OWORD *)(a2 + 40) = v37;
  v38 = v86;
  v86 = 0;
  *(_QWORD *)(a2 + 56) = v38;
  v39 = v87;
  v40 = v88;
  *(_QWORD *)(a2 + 96) = v89;
  *(_OWORD *)(a2 + 64) = v39;
  *(_OWORD *)(a2 + 80) = v40;
  WebCore::Color::Color();
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_WORD *)(a2 + 128) = v93;
  *(_BYTE *)(a2 + 130) = v94;
  *(_BYTE *)(a2 + 136) = 1;
  WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)v84, v41);
LABEL_60:
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v95, v29);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v97, v42);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v99, v43);
  if (v102)
  {
    result = v101;
    v101 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v104)
  {
    result = v103;
    v103 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v106)
  {
    result = v105;
    v105 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E6944C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,WTF::StringImpl *a36,char a37)
{
  uint64_t v37;
  void *v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a30, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32, v39);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a34, v40);
  if (a37)
  {
    v42 = a36;
    a36 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  if (*(_BYTE *)(v37 - 208))
  {
    v43 = *(WTF::StringImpl **)(v37 - 216);
    *(_QWORD *)(v37 - 216) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v41);
      else
        *(_DWORD *)v43 -= 2;
    }
  }
  if (*(_BYTE *)(v37 - 192))
  {
    v44 = *(WTF::StringImpl **)(v37 - 200);
    *(_QWORD *)(v37 - 200) = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v41);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ImageDecoderFrameInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ImageDecoderFrameInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  char v9;
  char v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v4 = (unsigned __int8 *)a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6)
    goto LABEL_14;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v7 = v4;
    v14 = 0;
    goto LABEL_15;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2)
    goto LABEL_17;
  v8 = 0;
  v9 = 1;
  while (1)
  {
    v10 = (_DWORD)v7 ? v9 : 0;
    result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
    v13 = *a1;
    if (!*a1)
      break;
    if (!v8 && v12)
    {
      *(_BYTE *)a2 = v10;
      *(_QWORD *)(a2 + 8) = result;
      LOBYTE(v13) = 1;
      goto LABEL_12;
    }
    __break(1u);
LABEL_14:
    v7 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a1;
        v7 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v7 = 0;
        v14 = 0;
      }
    }
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v16 + 16))(v16, v14, v7);
        LODWORD(v7) = 0;
        v5 = *a1;
        v4 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
      LODWORD(v7) = 0;
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v18 = (int)v7;
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v5);
      v9 = 0;
      v8 = 1;
      LODWORD(v7) = v18;
    }
    else
    {
      v9 = 0;
      v8 = 1;
    }
  }
  *(_BYTE *)a2 = 0;
LABEL_12:
  *(_BYTE *)(a2 + 16) = v13;
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode(IPC::Encoder *a1, _OWORD *a2)
{
  _OWORD *v2;
  unsigned int *result;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;

  v2 = a2;
  v8 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v8);
  LOBYTE(v8) = *((_BYTE *)v2 + 16);
  WebCore::Color::Color((WebCore::Color *)((char *)&v8 + 8), (const Color *)v2 + 3);
  LOBYTE(v2) = v8;
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v2;
  result = (unsigned int *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)((char *)&v8 + 8));
  if ((*((_QWORD *)&v8 + 1) & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(*((_QWORD *)&v8 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_196E69980(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode(uint64_t *a1, __int128 *a2)
{
  unsigned int *result;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;

  v8 = *a2;
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v8);
  LOBYTE(v8) = *((_BYTE *)a2 + 16);
  WebCore::Color::Color((WebCore::Color *)((char *)&v8 + 8), (const Color *)a2 + 3);
  result = (unsigned int *)IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::encode(a1, &v8);
  if ((*((_QWORD *)&v8 + 1) & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(*((_QWORD *)&v8 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_196E69A50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  _BYTE v25[8];
  Color v26;
  char v27;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16 && v15 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
  }
  v8 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = v7;
  if (!(_BYTE)v7)
  {
    v7 = (void *)*a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v18)
      {
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v19 + 16))(v19, v7);
        v9 = 0;
      }
    }
  }
  if (!*a1)
  {
    v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21 && v20)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, 0);
    IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>((uint64_t *)a1, v25);
    if (!*a1)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!v6 || !v9)
    goto LABEL_24;
  IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>((uint64_t *)a1, v25);
  if (!*a1)
  {
LABEL_25:
    *a2 = 0;
    a2[32] = 0;
    return std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v7);
  }
  if (!v27)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(_QWORD *)&v22 = v4;
  *((_QWORD *)&v22 + 1) = v8;
  v23 = v25[0];
  WebCore::Color::Color((WebCore::Color *)&v24, &v26);
  *(_OWORD *)a2 = v22;
  a2[16] = v23;
  WebCore::Color::Color();
  a2[32] = 1;
  if ((v24 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v7);
    }
  }
  return std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v7);
}

void sub_196E69C34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  va_list va;

  va_start(va, a7);
  if ((a7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(a7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::decode(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E69CD0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(IPC::Encoder *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  char v4;
  char v5;
  int v6;
  int v7;
  char *result;

  v2 = a2;
  v4 = a2[1] & 0xF;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *v2 & 0x1F;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *v2 >> 5;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(unsigned __int16 *)v2 >> 12;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v2) = v2[2] & 0xF;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  LODWORD(v2) = *(_DWORD *)(v2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v2;
  return a1;
}

char *IPC::ArgumentCoder<WebCore::SubstituteData,void>::encode(IPC::Encoder *a1, WebCore::FragmentedSharedBuffer **a2)
{
  WebCore::FragmentedSharedBuffer **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,void>::encode<IPC::Encoder,WebCore::FragmentedSharedBuffer>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(v2 + 6));
  LOBYTE(v2) = *((_BYTE *)v2 + 304);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::SubstituteData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int *result;
  WTF::StringImpl *v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  CFTypeRef cf;
  _BYTE v16[264];
  _QWORD v17[5];
  char v18;
  unsigned int *v19;
  char v20;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(&v19, a1);
  IPC::Decoder::decode<WTF::URL>(a1, v17);
  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v16);
  v4 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  if (!*a1)
    goto LABEL_24;
  if (!v20 || !v18 || !v16[256] || v4 <= 0xFFu)
  {
    __break(1u);
LABEL_24:
    *a2 = 0;
    a2[312] = 0;
    goto LABEL_14;
  }
  WebCore::SubstituteData::SubstituteData((uint64_t)&v12, (uint64_t *)&v19, (uint64_t)v17, (WebCore::ResourceResponseBase *)v16, v4 != 0);
  WebCore::SubstituteData::SubstituteData((uint64_t)a2, (uint64_t *)&v12);
  a2[312] = 1;
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v14, v6);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v12;
  v12 = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v5);
LABEL_14:
  result = (unsigned int *)std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v16, v5);
  if (v18)
  {
    result = (unsigned int *)v17[0];
    v17[0] = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *result -= 2;
    }
  }
  if (v20)
  {
    result = v19;
    v19 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
  }
  return result;
}

void sub_196E69F94(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  uint64_t v49;
  WebCore::ResourceResponseBase *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int *v55;

  v51 = (WebCore::ResourceResponseBase *)(v48 + 48);
  if (cf)
    CFRelease(cf);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v51, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v52);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, v52);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&a48, v52);
  if (*(_BYTE *)(v49 - 56))
  {
    v54 = *(WTF::StringImpl **)(v49 - 96);
    *(_QWORD *)(v49 - 96) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v53);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  if (*(_BYTE *)(v49 - 40))
  {
    v55 = *(unsigned int **)(v49 - 48);
    *(_QWORD *)(v49 - 48) = 0;
    if (v55)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v55, v53);
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(_QWORD *)a1 = 0;
    goto LABEL_8;
  }
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::decode(a2, &v18);
  *a1 = 0;
  a1[8] = 0;
  if (v19)
  {
    *(_QWORD *)a1 = v18;
LABEL_8:
    a1[8] = 1;
    return;
  }
LABEL_13:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (v17)
  {
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t *)(a2 + 120));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)(a2 + 136));
  LOBYTE(v4) = *(_BYTE *)(a2 + 160);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOWORD(v4) = *(_WORD *)(a2 + 162);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 164);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 165);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 176);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v3;
  char v4;
  BOOL v5;
  int v6;
  unsigned __int16 v7;
  int v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  WTF::StringImpl *v65;
  __int128 v66;
  __int128 v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  char v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  char v82;
  char v83;
  __int16 v84;
  char v85;
  char v86;
  uint64_t v87;
  _QWORD v88[2];
  __int128 v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)&v89);
  v3 = IPC::Decoder::decode<WebCore::ServiceWorkerClientType>(a1);
  LOWORD(v69) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v69);
  v4 = v69;
  if (BYTE1(v69))
    v5 = v69 > 3u;
  else
    v5 = 1;
  v6 = v5;
  if (v6 == 1)
    goto LABEL_61;
  while (1)
  {
    IPC::Decoder::decode<WTF::URL>(a1, &v65);
    IPC::Decoder::decode<WTF::URL>(a1, &v61);
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v58);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)&v55);
    v7 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
    v8 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(a1);
    v9 = a1[1];
    v10 = (char *)*a1;
    v11 = a1[2] - *a1;
    if (v9 <= v11)
    {
      v36 = 0;
      v37 = 0;
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
          v37 = *a1;
          v36 = a1[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
      }
      goto LABEL_64;
    }
    v12 = &v10[v11];
    v13 = (uint64_t)&v10[v11 + 1];
    a1[2] = v13;
    if (!v10)
    {
      v36 = v9;
      v37 = 0;
LABEL_64:
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (v39 && v36)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v14 = 0;
        v10 = (char *)*a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v14 = 0;
      }
      goto LABEL_66;
    }
    v14 = *v12;
    if (v14 < 2)
    {
      v51 = 0;
      v15 = 1;
      goto LABEL_12;
    }
LABEL_66:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (!v40 || !v9)
    {
      v41 = 0;
      v10 = 0;
      v50 = 0;
      v51 = 1;
LABEL_68:
      *a1 = 0;
      a1[1] = 0;
      v42 = a1[3];
      if (v42 && v41)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v42 + 16))(v42, v10, v41);
        v18 = 0;
        v10 = (char *)*a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v18 = 0;
      }
      goto LABEL_70;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v40 + 16))(v40, v10);
    v15 = 0;
    v10 = (char *)*a1;
    v9 = a1[1];
    v51 = 1;
    v13 = a1[2];
LABEL_12:
    if (!v14)
      v15 = 0;
    v50 = v15;
    v16 = v13 - (_QWORD)v10;
    if (v9 <= v16)
    {
      v41 = 0;
      v48 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v48 && v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
        v10 = (char *)*a1;
        v41 = a1[1];
      }
      else
      {
        v10 = 0;
      }
      goto LABEL_68;
    }
    v17 = &v10[v16];
    a1[2] = (uint64_t)(v17 + 1);
    if (!v10)
    {
      v41 = v9;
      goto LABEL_68;
    }
    v18 = *v17;
    if (v18 < 2)
    {
      v19 = 0;
      v20 = 1;
      goto LABEL_18;
    }
LABEL_70:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v43 + 16))(v43, v10);
        v20 = 0;
        v10 = (char *)*a1;
        v9 = a1[1];
        goto LABEL_73;
      }
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    v20 = 0;
LABEL_73:
    v19 = 1;
LABEL_18:
    v21 = v18 ? v20 : 0;
    v22 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v10;
    if (v9 < v22 || v9 - v22 <= 7)
    {
      v44 = 0;
      v45 = 0;
      *a1 = 0;
      a1[1] = 0;
      v46 = a1[3];
      if (v46)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
          v45 = *a1;
          v44 = a1[1];
        }
        else
        {
          v44 = 0;
          v45 = 0;
        }
      }
    }
    else
    {
      v23 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v23 + 1);
      if (v10)
      {
        v24 = 0;
        v25 = *v23;
        goto LABEL_25;
      }
      v44 = v9;
      v45 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47 && v44)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45, v44);
    v25 = 0;
    v24 = 1;
LABEL_25:
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v52);
    if (!*a1)
    {
      *a2 = 0;
      a2[192] = 0;
      goto LABEL_45;
    }
    if (v91)
    {
      v69 = v89;
      v70 = v90;
      if (v3 > 0xFFu)
      {
        v71 = v3;
        if (!v6)
        {
          v72 = v4;
          if (v68)
          {
            v28 = v65;
            v65 = 0;
            v73 = v28;
            v74 = v66;
            v75 = v67;
            LODWORD(v66) = v66 & 0xFFFFFFFE;
            if (v64)
            {
              v29 = v61;
              v61 = 0;
              v76 = v29;
              v77 = v62;
              v78 = v63;
              LODWORD(v62) = v62 & 0xFFFFFFFE;
              if (v60)
              {
                v79 = v58;
                v80 = v59;
                if (v57)
                {
                  v81 = v55;
                  v82 = v56;
                  if (v7 > 0xFFu)
                  {
                    v83 = v7;
                    if ((v8 & 0xFF0000) != 0)
                    {
                      v84 = v8;
                      if (!v51)
                      {
                        v85 = v50;
                        if (!v19)
                        {
                          v86 = v21;
                          if (!v24)
                          {
                            v87 = v25;
                            if (v54)
                              break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_61:
    v33 = *a1;
    v34 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35 && v34)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
    v4 = 0;
  }
  v88[0] = v52;
  v30 = v53;
  v52 = 0;
  v53 = 0;
  v88[1] = v30;
  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)a2, &v69);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v31);
  v32 = v76;
  v76 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v27);
    else
      *(_DWORD *)v32 -= 2;
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_45:
  if (v54)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v27);
  if (v64)
  {
    result = v61;
    v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v68)
  {
    result = v65;
    v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E6A8BC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  WTF::StringImpl *v28;

  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, v28);
  _Unwind_Resume(a1);
}

void sub_196E6A914()
{
  JUMPOUT(0x196E6A904);
}

void sub_196E6A91C()
{
  JUMPOUT(0x196E6A90CLL);
}

uint64_t IPC::Decoder::decode<WebCore::ServiceWorkerClientType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::ServiceWorkerClientType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void WebCore::ServiceWorkerClientData::~ServiceWorkerClientData(WebCore::ServiceWorkerClientData *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t IPC::Decoder::decode<WebCore::MessageWithMessagePorts>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E6AA48(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 64))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E6AAB0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerClientQueryOptions,void>::decode(uint64_t *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  __int16 v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v2 = (unsigned __int8 *)a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if ((unint64_t)v2 <= v4)
    goto LABEL_14;
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v5 = v2;
    v12 = 0;
    goto LABEL_15;
  }
  LODWORD(v5) = *v5;
  if (v5 >= 2)
    goto LABEL_17;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (_DWORD)v5 ? v7 : 0;
    v9 = IPC::Decoder::decode<WebCore::ServiceWorkerClientType>(a1);
    v10 = *a1;
    if (!*a1)
      break;
    if (!v6 && v9 > 0xFFu)
    {
      LODWORD(v10) = 1;
      return (unsigned __int16)(v8 | (v9 << 8)) | ((_DWORD)v10 << 16);
    }
    __break(1u);
LABEL_14:
    v5 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a1;
        v5 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v5 = 0;
        v12 = 0;
      }
    }
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14, v12, v5);
        LODWORD(v5) = 0;
        v3 = *a1;
        v2 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    else
    {
      v2 = 0;
      v3 = 0;
      LODWORD(v5) = 0;
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      v16 = (int)v5;
      if (v2)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v3);
      v7 = 0;
      v6 = 1;
      LODWORD(v5) = v16;
    }
    else
    {
      v7 = 0;
      v6 = 1;
    }
  }
  v8 = 0;
  return (unsigned __int16)(v8 | (v9 << 8)) | ((_DWORD)v10 << 16);
}

char *IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  LOBYTE(v5) = *((_BYTE *)v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 57);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  unsigned __int16 v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  IPC::Decoder::decode<WTF::URL>(a1, &v19);
  v10 = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a1);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  if (!*a1)
    goto LABEL_18;
  if (!v6)
    goto LABEL_17;
  *(_QWORD *)&v14 = v4;
  if (!v9)
    goto LABEL_17;
  *((_QWORD *)&v14 + 1) = v7;
  if (!v22
    || (v13 = v19, v19 = 0, v15 = v13, v16 = v20, v17 = v21, LODWORD(v20) = v20 & 0xFFFFFFFE, v10 <= 0xFFu)
    || (LOBYTE(v18) = v10, (unsigned __int16)result <= 0xFFu))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    goto LABEL_11;
  }
  HIBYTE(v18) = (_BYTE)result;
  *(_OWORD *)a2 = v14;
  WTF::URL::URL(a2 + 16, (uint64_t *)&v15);
  *(_WORD *)(a2 + 56) = v18;
  *(_BYTE *)(a2 + 64) = 1;
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_11:
  if (v22)
  {
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E6AE30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a22 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ServiceWorkerState>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 5u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

char *IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = *(_QWORD *)(a2 + 256);
  v5 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  v6 = *(_DWORD *)(a2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 80, v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 112));
  v7 = *(_DWORD *)(a2 + 192);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&>((char *)a1, a2 + 160, v7);
  LOBYTE(v4) = *(_BYTE *)(a2 + 208);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 209);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 216));
  LOBYTE(v4) = *(_BYTE *)(a2 + 224);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationOptions>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationOptions> const&>(a1, a2 + 232);
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  _BYTE v51[32];
  WTF::StringImpl *v52;
  char v53;
  uint64_t v54[5];
  uint64_t v55;
  uint64_t v56[6];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  __int128 v66;
  _BYTE v67[64];
  _BYTE v68[24];
  int v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)v51);
  IPC::Decoder::decode<WTF::URL>(a1, &v49);
  IPC::Decoder::decode<WTF::URL>(a1, &v47);
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v68);
  IPC::Decoder::decode<WTF::URL>(a1, &v45);
  IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>(a1, v67);
  v4 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  LOWORD(v52) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v52);
  v5 = v52;
  if (BYTE1(v52))
    v6 = v52 > 2u;
  else
    v6 = 1;
  v7 = v6;
  if (v7 == 1)
    goto LABEL_79;
  while (1)
  {
    if (v7)
      v7 = 0;
    else
      v7 = v5 | 0x100;
    IPC::Decoder::decode<WTF::String>(a1, &v43);
    v8 = a1[1];
    v9 = (WTF::StringImpl *)*a1;
    v10 = a1[2] - *a1;
    if (v8 <= v10)
    {
      v27 = 0;
      v28 = 0;
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
          v28 = *a1;
          v27 = a1[1];
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
      }
      goto LABEL_83;
    }
    v11 = (unsigned __int8 *)v9 + v10;
    a1[2] = (uint64_t)(v11 + 1);
    if (!v9)
    {
      v27 = v8;
      v28 = 0;
LABEL_83:
      *a1 = 0;
      a1[1] = 0;
      v30 = a1[3];
      if (v30 && v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
        v5 = 0;
        v9 = (WTF::StringImpl *)*a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v5 = 0;
      }
      goto LABEL_85;
    }
    v5 = *v11;
    if (v5 < 2)
    {
      v12 = 0;
      goto LABEL_15;
    }
LABEL_85:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (!v31 || !v8)
    {
      v9 = 0;
      v8 = 0;
      v12 = 1;
LABEL_87:
      *a1 = 0;
      a1[1] = 0;
      v32 = a1[3];
      if (v32)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32, v9);
          v33 = *a1;
          v8 = a1[1];
        }
        else
        {
          v33 = 0;
        }
      }
      else
      {
        v33 = 0;
        v8 = 0;
      }
      goto LABEL_89;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v31 + 16))(v31, v9);
    v9 = (WTF::StringImpl *)*a1;
    v8 = a1[1];
    v12 = 1;
LABEL_15:
    if (v8 <= a1[2] - (uint64_t)v9)
      goto LABEL_87;
    v13 = (WTF::StringImpl *)a1[2];
    a1[2] = (uint64_t)v13 + 1;
    if (!v9)
    {
      v33 = 0;
LABEL_89:
      *a1 = 0;
      a1[1] = 0;
      v34 = a1[3];
      if (v34)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
          v9 = (WTF::StringImpl *)*a1;
          v8 = a1[1];
        }
        else
        {
          v9 = 0;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
      }
LABEL_91:
      *a1 = 0;
      a1[1] = 0;
      v35 = a1[3];
      if (v35 && v8)
        goto LABEL_93;
      goto LABEL_100;
    }
    LODWORD(v13) = *(unsigned __int8 *)v13;
    if (v13 >= 2)
      goto LABEL_91;
    if (!(_DWORD)v13)
    {
      LOBYTE(v40) = 0;
LABEL_25:
      v41 = (char)v13;
      v42 = 1;
      goto LABEL_26;
    }
    IPC::Decoder::decode<WTF::String>(a1, &v52);
    v5 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
    v14 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
    if (*a1)
    {
      if (!v53)
        goto LABEL_78;
      v13 = v52;
      v52 = 0;
      if ((unsigned __int16)v5 <= 0xFFu || (unsigned __int16)v14 <= 0xFFu)
        goto LABEL_78;
      v5 = v5 | (v14 << 8);
      v40 = v13;
      LOBYTE(v13) = 1;
      goto LABEL_25;
    }
    if (v53)
    {
      v36 = v52;
      v52 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v9);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    v9 = (WTF::StringImpl *)*a1;
    v37 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35 && v37)
LABEL_93:
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v35 + 16))(v35, v9);
LABEL_100:
    LOBYTE(v40) = 0;
    v42 = 0;
    v9 = (WTF::StringImpl *)*a1;
    v38 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (!v39 || !v38 || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v9), !*a1))
    {
LABEL_34:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 272) = 0;
      goto LABEL_48;
    }
LABEL_26:
    v15 = v7 >> 8;
    if (v7 >> 8 && !(_BYTE)v7)
    {
      if (!v42)
        goto LABEL_78;
      if (v41)
        goto LABEL_35;
    }
    if (v15 && !(_BYTE)v7)
      goto LABEL_34;
    if (v42)
      break;
LABEL_78:
    __break(1u);
LABEL_79:
    v24 = *a1;
    v25 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
  }
  if (v41)
    goto LABEL_34;
LABEL_35:
  if (!v51[16] || !v50 || !v48 || !v70 || !v46 || !v67[48] || v4 <= 0xFFu || !v15 || !v44 || v12)
    goto LABEL_78;
  WebCore::ServiceWorkerJobData::ServiceWorkerJobData();
  WTF::URL::URL(a2, (uint64_t *)&v52);
  WTF::URL::URL(a2 + 40, v54);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 80, (uint64_t)&v55);
  WTF::URL::URL(a2 + 112, v56);
  v17 = v58;
  *(_OWORD *)(a2 + 160) = v57;
  *(_OWORD *)(a2 + 176) = v17;
  *(_OWORD *)(a2 + 192) = v59;
  *(_WORD *)(a2 + 208) = v60;
  v18 = v61;
  v61 = 0;
  *(_QWORD *)(a2 + 216) = v18;
  *(_BYTE *)(a2 + 224) = v62;
  *(_BYTE *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  if (v65)
  {
    v19 = v63;
    v63 = 0;
    *(_QWORD *)(a2 + 232) = v19;
    *(_WORD *)(a2 + 240) = v64;
    *(_BYTE *)(a2 + 248) = 1;
  }
  *(_OWORD *)(a2 + 256) = v66;
  *(_BYTE *)(a2 + 272) = 1;
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)&v52, v16);
LABEL_48:
  if (v42 && v41 && v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v9);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (v44)
  {
    v20 = v43;
    v43 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v9);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (v46)
  {
    v21 = v45;
    v45 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v9);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (v70 && v69 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v69])(&v52, v68);
  if (v48)
  {
    v22 = v47;
    v47 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v9);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (v50)
  {
    v23 = v49;
    v49 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v9);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
}

void sub_196E6B6D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,WTF::StringImpl *a47,char a48)
{
  uint64_t v48;
  uint64_t v50;

  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a27 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (*(_BYTE *)(v48 - 80))
  {
    v50 = *(unsigned int *)(v48 - 88);
    if ((_DWORD)v50 != -1)
      ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v50])(v48 - 176, v48 - 112);
  }
  if (a33 && a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a39 && a34)
  {
    if (*(_DWORD *)a34 == 2)
      WTF::StringImpl::destroy(a34, a2);
    else
      *(_DWORD *)a34 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, a2);
  return IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
}

uint64_t IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>>(a1, &v12);
  IPC::Decoder::decode<WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if (v13)
    {
      v5 = v12;
      v12 = 0;
      if (v11)
      {
        v6 = v9;
        *(_QWORD *)a2 = v5;
        *(_QWORD *)(a2 + 8) = v6;
        *(_QWORD *)(a2 + 16) = v10;
        *(_BYTE *)(a2 + 24) = 1;
        return std::__optional_destruct_base<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12);
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v11)
  {
    v8 = v9;
    if (v9)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      WTF::fastFree(v8, v4);
    }
  }
  return std::__optional_destruct_base<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12);
}

void sub_196E6BA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__optional_destruct_base<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E6BA7C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 2);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  BOOL v5;
  int v6;
  int v7;
  char v8;
  unsigned __int16 v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;

  LOWORD(v22) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v22);
  v4 = (char)v22;
  if (BYTE1(v22))
    v5 = v22 > 2u;
  else
    v5 = 1;
  v6 = v5;
  if (v6 == 1)
    goto LABEL_24;
  while (1)
  {
    LOWORD(v22) = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v22);
    v7 = BYTE1(v22);
    if (BYTE1(v22))
    {
      v8 = (char)v22;
    }
    else
    {
      v17 = *a1;
      v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v19 = a1[3];
      if (v19 && v18)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
      v8 = 0;
    }
    v9 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
    IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v22);
    result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v20);
    if (!*a1)
      break;
    if (!v6)
    {
      if (v7)
      {
        if (v9 > 0xFFu)
        {
          if (v23)
          {
            v12 = v22;
            v22 = 0;
            if (v21)
            {
              v13 = v20;
              *(_BYTE *)a2 = v4;
              *(_BYTE *)(a2 + 1) = v8;
              *(_BYTE *)(a2 + 2) = v9;
              *(_QWORD *)(a2 + 8) = v12;
              *(_QWORD *)(a2 + 16) = v13;
              *(_BYTE *)(a2 + 24) = 1;
              goto LABEL_17;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_24:
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    v4 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v21)
  {
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_17:
  if (v23)
  {
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E6BCE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::Exception,void>::encode(IPC::Encoder *a1, char *a2)
{
  uint64_t *v3;
  char v4;

  v3 = (uint64_t *)(a2 + 8);
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v3);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Exception,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  v4 = IPC::Decoder::decode<WebCore::ExceptionCode>(a1);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (*a1)
  {
    if (v4 > 0xFFu && v9)
    {
      v7 = v8;
      *(_BYTE *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v7;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ExceptionCode>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::ExceptionCode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::SecurityPolicyViolationEventInit,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  int v9;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 8);
  v7 = v2[72];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *((_WORD *)v2 + 37);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v8;
  v9 = *((_DWORD *)v2 + 19);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  LODWORD(v2) = *((_DWORD *)v2 + 20);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::SecurityPolicyViolationEventInit,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int16 v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  __int16 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  WTF::StringImpl *v71;
  char v72;
  WTF::StringImpl *v73;
  char v74;
  WTF::StringImpl *v75;
  char v76;
  WTF::StringImpl *v77;
  char v78;
  WTF::StringImpl *v79;
  char v80;
  WTF::StringImpl *v81;
  char v82;
  WTF::StringImpl *v83;
  char v84;
  WTF::StringImpl *v85;
  char v86;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_79;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v40 = v4;
    v41 = 0;
    goto LABEL_80;
  }
  v9 = *v7;
  if (v9 >= 2)
    goto LABEL_82;
  v62 = 0;
LABEL_5:
  v10 = v8 - v5;
  if (v4 <= v10)
  {
    i = 0;
    v58 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v58 && v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
      v5 = *a1;
      i = a1[1];
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_84;
  }
  v11 = (unsigned __int8 *)(v5 + v10);
  v12 = v5 + v10 + 1;
  a1[2] = v12;
  if (v5)
  {
    if (*v11 >= 2u)
      goto LABEL_86;
    v13 = 0;
LABEL_9:
    v14 = v12 - v5;
    if (v4 <= v14)
    {
      v48 = 0;
      v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v57 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        v5 = *a1;
        v48 = a1[1];
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v15 = (unsigned __int8 *)(v5 + v14);
      a1[2] = (uint64_t)(v15 + 1);
      if (v5)
      {
        if (*v15 < 2u)
        {
          v16 = 0;
          goto LABEL_13;
        }
        goto LABEL_90;
      }
      v48 = v4;
    }
    goto LABEL_88;
  }
  for (i = v4; ; i = 0)
  {
LABEL_84:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && i)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v5, i);
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_86:
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v5);
      v5 = *a1;
      v4 = a1[1];
      v13 = 1;
      v12 = a1[2];
      goto LABEL_9;
    }
    v48 = 0;
    v5 = 0;
    v13 = 1;
LABEL_88:
    *a1 = 0;
    a1[1] = 0;
    v49 = a1[3];
    if (v49 && v48)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v5, v48);
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_90:
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v5);
    v16 = 1;
LABEL_13:
    IPC::Decoder::decode<WTF::String>(a1, &v85);
    IPC::Decoder::decode<WTF::String>(a1, &v83);
    IPC::Decoder::decode<WTF::String>(a1, &v81);
    IPC::Decoder::decode<WTF::String>(a1, &v79);
    IPC::Decoder::decode<WTF::String>(a1, &v77);
    IPC::Decoder::decode<WTF::String>(a1, &v75);
    IPC::Decoder::decode<WTF::String>(a1, &v73);
    IPC::Decoder::decode<WTF::String>(a1, &v71);
    v17 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
    v18 = IPC::Decoder::decode<unsigned short>(a1);
    v4 = a1[1];
    v19 = (WTF::StringImpl *)*a1;
    v20 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v4 < v20 || v4 - v20 <= 3)
    {
      v22 = 0;
      v51 = 0;
      *a1 = 0;
      a1[1] = 0;
      v52 = a1[3];
      if (v52)
      {
        v56 = v18;
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(a1[3]);
          v51 = *a1;
          v22 = a1[1];
        }
        else
        {
          v22 = 0;
          v51 = 0;
        }
        v18 = v56;
      }
    }
    else
    {
      a1[2] = (uint64_t)v19 + v20 + 4;
      if (v19)
      {
        v21 = 0;
        v22 = (uint64_t)v19;
        goto LABEL_17;
      }
      v22 = v4;
      v51 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53)
    {
      v59 = v18;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v22);
        v22 = *a1;
        v4 = a1[1];
        v21 = 1;
        v19 = (WTF::StringImpl *)*a1;
      }
      else
      {
        v4 = 0;
        v19 = 0;
        v21 = 1;
      }
      v18 = v59;
    }
    else
    {
      v22 = 0;
      v4 = 0;
      v19 = 0;
      v21 = 1;
    }
LABEL_17:
    v23 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v19;
    if (v4 < v23 || v4 - v23 <= 3)
    {
      v24 = 0;
      v22 = 0;
      *a1 = 0;
      a1[1] = 0;
      v54 = a1[3];
      if (v54)
      {
        v61 = v18;
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
          v22 = *a1;
          v24 = a1[1];
        }
        else
        {
          v24 = 0;
          v22 = 0;
        }
        v18 = v61;
      }
    }
    else
    {
      a1[2] = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v24 = v4;
      if (v19)
      {
        v25 = 0;
        goto LABEL_21;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (!v55
      || !v24
      || (v60 = v18,
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v22, v24),
          v18 = v60,
          !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_37;
    }
    v25 = 1;
LABEL_21:
    if (!v62
      && !v13
      && !v16
      && v86
      && v84
      && v82
      && v80
      && v78
      && v76
      && v74
      && v72
      && v17 > 0xFFu
      && (v18 & 0xFF0000) != 0
      && !v21
      && !v25)
    {
      break;
    }
    __break(1u);
LABEL_79:
    v40 = 0;
    v41 = 0;
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        v41 = *a1;
        v40 = a1[1];
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
    }
LABEL_80:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43 && v40)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41, v40);
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_82:
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v5);
      v5 = *a1;
      v4 = a1[1];
      v62 = 1;
      v8 = a1[2];
      goto LABEL_5;
    }
    v5 = 0;
    v62 = 1;
  }
  WebCore::SecurityPolicyViolationEventInit::SecurityPolicyViolationEventInit();
  *(_WORD *)a2 = v63;
  *(_BYTE *)(a2 + 2) = v64;
  v26 = v65;
  v65 = 0u;
  *(_OWORD *)(a2 + 8) = v26;
  v27 = v66;
  v66 = 0u;
  *(_OWORD *)(a2 + 24) = v27;
  v28 = v67;
  v67 = 0u;
  *(_OWORD *)(a2 + 40) = v28;
  v29 = v68;
  v68 = 0u;
  *(_OWORD *)(a2 + 56) = v29;
  v30 = v69;
  *(_DWORD *)(a2 + 80) = v70;
  *(_QWORD *)(a2 + 72) = v30;
  *(_BYTE *)(a2 + 88) = 1;
  WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)&v63, v31);
LABEL_37:
  if (v72)
  {
    v32 = v71;
    v71 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v19);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  if (v74)
  {
    v33 = v73;
    v73 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v19);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  if (v76)
  {
    v34 = v75;
    v75 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v19);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (v78)
  {
    v35 = v77;
    v77 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v19);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if (v80)
  {
    v36 = v79;
    v79 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v19);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (v82)
  {
    v37 = v81;
    v81 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v19);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (v84)
  {
    v38 = v83;
    v83 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v19);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (v86)
  {
    v39 = v85;
    v85 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v19);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
}

void sub_196E6C794(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29,WTF::StringImpl *a30,char a31)
{
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (*(_BYTE *)(v32 - 160))
  {
    v34 = *v31;
    *v31 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, a2);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (*(_BYTE *)(v32 - 144))
  {
    v35 = v31[2];
    v31[2] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, a2);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if (*(_BYTE *)(v32 - 128))
  {
    v36 = v31[4];
    v31[4] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, a2);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_BYTE *)(v32 - 112))
  {
    v37 = v31[6];
    v31[6] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, a2);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (*(_BYTE *)(v32 - 96))
  {
    v38 = v31[8];
    v31[8] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, a2);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2, v4);
}

uint64_t *IPC::Decoder::decode<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196E6C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 32))
  {
    v15 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::IntConstraint,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::Encoder,std::optional<int> const&>(a1, (int *)(a2 + 12));
  IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::Encoder,std::optional<int> const&>(a1, (int *)(a2 + 20));
  IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::Encoder,std::optional<int> const&>(a1, (int *)(a2 + 28));
  return IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::Encoder,std::optional<int> const&>(a1, (int *)(a2 + 36));
}

uint64_t IPC::Decoder::decode<std::optional<int>>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<std::optional<int>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::DoubleConstraint,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 48));
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 64));
}

char *IPC::ArgumentCoder<WebCore::BooleanConstraint,void>::encode(IPC::Encoder *a1, _BYTE *a2)
{
  char v4;

  v4 = a2[8];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 9);
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 11);
}

void IPC::ArgumentCoder<WebCore::StringConstraint,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
}

void WebCore::StringConstraint::~StringConstraint(WebCore::StringConstraint *this, void *a2)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = &off_1E34AE7C8;
  v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);
}

{
  char *v2;
  void *v3;

  *(_QWORD *)this = &off_1E34AE7C8;
  v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);
  JUMPOUT(0x19AEB936CLL);
}

char *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSupportedConstraints,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = v2[5];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = v2[6];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = v2[7];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = v2[8];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = v2[9];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = v2[10];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = v2[11];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v16 = v2[12];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  v17 = v2[13];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v18 = v2[14];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  v19 = v2[15];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v20 = v2[16];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v21 = v2[17];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  LOBYTE(v2) = v2[18];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LOBYTE(v5) = *((_BYTE *)a2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v7 = *((_QWORD *)a2 + 2);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = a2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = a2[7];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2 + 7);
  LOBYTE(v9) = *((_BYTE *)a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 65);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 66);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_QWORD *)a2 + 9);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  LOBYTE(v9) = *((_BYTE *)a2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 81);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 82);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  return IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSupportedConstraints,void>::encode(a1, (char *)a2 + 83);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  int v22;
  unint64_t v23;
  int *v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  int v29;
  char v30;
  char v31;
  BOOL v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  char v39;
  unsigned __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char v51;
  char v52;
  unint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  char v58;
  char v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  char v64;
  char v65;
  WTF::StringImpl *result;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  char v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int16 v126;
  uint64_t v127;
  int v128;
  int v129;
  _BYTE v130[19];
  char v131;
  WTF::StringImpl *v132;
  char v133;
  WTF::StringImpl *v134;
  char v135;
  WTF::StringImpl *v136;
  char v137;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (int *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v129 = 0;
      v9 = *v8;
      v118 = v9;
      v119 = v9 & 0xFFFFFF00;
      v10 = v5;
      goto LABEL_8;
    }
    v10 = v4;
    v71 = 0;
    goto LABEL_107;
  }
  while (1)
  {
    v10 = 0;
    v71 = 0;
    *a1 = 0;
    a1[1] = 0;
    v72 = a1[3];
    if (v72)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
        v71 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v71 = 0;
      }
    }
LABEL_107:
    *a1 = 0;
    a1[1] = 0;
    v73 = a1[3];
    if (!v73)
    {
      v10 = 0;
LABEL_109:
      v4 = 0;
      v5 = 0;
      v118 = 0;
      v119 = 0;
      v129 = 1;
      goto LABEL_8;
    }
    if (!v10)
      goto LABEL_109;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v71, v10);
    v118 = 0;
    v119 = 0;
    v10 = *a1;
    v4 = a1[1];
    v129 = 1;
    v5 = *a1;
LABEL_8:
    v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
    if (v4 >= v11 && v4 - v11 > 3)
    {
      v13 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v13 + 1);
      v14 = v4;
      if (v5)
      {
        v128 = 0;
        v116 = *v13;
        v117 = *v13 & 0xFFFFFF00;
        goto LABEL_15;
      }
    }
    else
    {
      v14 = 0;
      v10 = 0;
      *a1 = 0;
      a1[1] = 0;
      v74 = a1[3];
      if (v74)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
          v10 = *a1;
          v14 = a1[1];
        }
        else
        {
          v14 = 0;
          v10 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v75 = a1[3];
    if (v75 && v14)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v75 + 16))(v75, v10, v14);
    v116 = 0;
    v117 = 0;
    v128 = 1;
LABEL_15:
    v127 = IPC::Decoder::decode<float>(a1);
    v126 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
    v15 = a1[1];
    v16 = *a1;
    v17 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v15 < v17 || v15 - v17 <= 7)
    {
      v19 = 0;
      v76 = 0;
      *a1 = 0;
      a1[1] = 0;
      v77 = a1[3];
      if (v77)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
          v76 = *a1;
          v19 = a1[1];
        }
        else
        {
          v19 = 0;
          v76 = 0;
        }
      }
    }
    else
    {
      v18 = (uint64_t *)(v16 + v17);
      a1[2] = (uint64_t)(v18 + 1);
      if (v16)
      {
        v125 = 0;
        v115 = *v18;
        v19 = v16;
        goto LABEL_19;
      }
      v19 = v15;
      v76 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v78 = a1[3];
    if (v78)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76, v19);
        v115 = 0;
        v19 = *a1;
        v15 = a1[1];
        v125 = 1;
        v16 = *a1;
        goto LABEL_19;
      }
    }
    else
    {
      v19 = 0;
    }
    v15 = 0;
    v16 = 0;
    v115 = 0;
    v125 = 1;
LABEL_19:
    v20 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v16;
    if (v15 < v20 || v15 - v20 <= 3)
    {
      v79 = 0;
      v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      v80 = a1[3];
      if (v80)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
          v19 = *a1;
          v79 = a1[1];
        }
        else
        {
          v79 = 0;
          v19 = 0;
        }
      }
    }
    else
    {
      v21 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v21 + 1);
      if (v16)
      {
        v124 = 0;
        v22 = *v21;
        LODWORD(v114) = v22;
        HIDWORD(v114) = v22 & 0xFFFFFF00;
        goto LABEL_23;
      }
      v79 = v15;
    }
    *a1 = 0;
    a1[1] = 0;
    v81 = a1[3];
    if (v81 && v79)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v81 + 16))(v81, v19, v79);
      v114 = 0;
      v19 = *a1;
      v15 = a1[1];
      v124 = 1;
      v16 = *a1;
    }
    else
    {
      v19 = 0;
      v15 = 0;
      v16 = 0;
      v114 = 0;
      v124 = 1;
    }
LABEL_23:
    v23 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v16;
    if (v15 < v23 || v15 - v23 <= 3)
    {
      v82 = 0;
      v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      v83 = a1[3];
      if (v83)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
          v19 = *a1;
          v82 = a1[1];
        }
        else
        {
          v82 = 0;
          v19 = 0;
        }
      }
    }
    else
    {
      v24 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v25 = v24 + 1;
      a1[2] = (uint64_t)(v24 + 1);
      if (v16)
      {
        v123 = 0;
        v113 = *v24;
        goto LABEL_27;
      }
      v82 = v15;
    }
    *a1 = 0;
    a1[1] = 0;
    v84 = a1[3];
    if (!v84 || !v82)
    {
      v113 = 0;
      v19 = 0;
      v16 = 0;
      v123 = 1;
      goto LABEL_123;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v84 + 16))(v84, v19, v82);
    v113 = 0;
    v16 = *a1;
    v15 = a1[1];
    v25 = (_DWORD *)a1[2];
    v123 = 1;
    v19 = *a1;
LABEL_27:
    v26 = (char *)v25 - v16;
    if (v15 <= (unint64_t)v26)
    {
      v19 = 0;
      v105 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v105 && v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105);
        v16 = *a1;
        v19 = a1[1];
      }
      else
      {
        v16 = 0;
      }
LABEL_123:
      *a1 = 0;
      a1[1] = 0;
      v85 = a1[3];
      if (v85)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v16, v19);
          v28 = 0;
          v19 = *a1;
          v15 = a1[1];
          goto LABEL_126;
        }
        v15 = 0;
      }
      else
      {
        v15 = 0;
        v19 = 0;
      }
      v28 = 0;
      goto LABEL_126;
    }
    v27 = &v26[v16];
    a1[2] = (uint64_t)(v27 + 1);
    if (!v16)
    {
      v19 = v15;
      goto LABEL_123;
    }
    v28 = *v27;
    if (v28 < 2)
    {
      v29 = 0;
      v30 = 1;
      goto LABEL_31;
    }
LABEL_126:
    *a1 = 0;
    a1[1] = 0;
    v86 = a1[3];
    if (v86 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, v19);
    v30 = 0;
    v29 = 1;
LABEL_31:
    v31 = v28 ? v30 : 0;
    IPC::Decoder::decode<WTF::String>(a1, &v136);
    IPC::Decoder::decode<WTF::String>(a1, &v134);
    v122 = v29;
    v112 = v31;
    IPC::Decoder::decode<WTF::String>(a1, &v132);
    *(_WORD *)v130 = 0;
    IPC::Decoder::operator>><unsigned char>(a1, v130);
    v32 = !v130[1] || v130[0] > 4u;
    v33 = v32;
    v34 = a1[1];
    if (v33)
    {
      v87 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v88 = a1[3];
      if (!v88 || !v34)
      {
        v111 = 0;
        v34 = 0;
        v35 = *a1;
LABEL_130:
        *a1 = 0;
        a1[1] = 0;
        v89 = a1[3];
        if (v89)
        {
          if (v34)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v35);
            v90 = *a1;
            v34 = a1[1];
          }
          else
          {
            v90 = 0;
          }
        }
        else
        {
          v90 = 0;
          v34 = 0;
        }
        goto LABEL_132;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v87);
      v111 = 0;
      v34 = a1[1];
    }
    else
    {
      v111 = v130[0];
    }
    v35 = *a1;
    v36 = a1[2] - *a1;
    if (v34 <= v36)
      goto LABEL_130;
    v37 = (unsigned __int8 *)(v35 + v36);
    a1[2] = (uint64_t)(v37 + 1);
    if (v35)
    {
      v38 = *v37;
      if (v38 < 2)
      {
        v121 = 0;
        v39 = 1;
        goto LABEL_46;
      }
      goto LABEL_135;
    }
    v90 = 0;
LABEL_132:
    *a1 = 0;
    a1[1] = 0;
    v91 = a1[3];
    if (!v91)
    {
      v34 = 0;
LABEL_134:
      v35 = 0;
      v38 = 0;
      goto LABEL_135;
    }
    if (!v34)
      goto LABEL_134;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v90);
    v38 = 0;
    v35 = *a1;
    v34 = a1[1];
LABEL_135:
    *a1 = 0;
    a1[1] = 0;
    v92 = a1[3];
    if (v92 && v34)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v35);
    v39 = 0;
    v121 = 1;
LABEL_46:
    if (!v38)
      v39 = 0;
    v110 = v39;
    v40 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
    v41 = a1[1];
    v42 = *a1;
    v43 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v41 < v43 || v41 - v43 <= 7)
    {
      v93 = 0;
      v94 = 0;
      *a1 = 0;
      a1[1] = 0;
      v95 = a1[3];
      if (v95)
      {
        if (v41)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
          v94 = *a1;
          v93 = a1[1];
        }
        else
        {
          v93 = 0;
          v94 = 0;
        }
      }
    }
    else
    {
      v44 = (uint64_t *)(v42 + v43);
      v45 = v42 + v43 + 8;
      a1[2] = v45;
      if (v42)
      {
        v120 = 0;
        v109 = *v44;
        goto LABEL_52;
      }
      v93 = v41;
      v94 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v96 = a1[3];
    if (!v96)
    {
      v109 = 0;
      v93 = 0;
LABEL_144:
      v42 = 0;
      v120 = 1;
LABEL_145:
      *a1 = 0;
      a1[1] = 0;
      v97 = a1[3];
      if (v97 && v93)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v97 + 16))(v97, v42, v93);
        v49 = 0;
        v42 = *a1;
        v41 = a1[1];
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v49 = 0;
      }
      goto LABEL_147;
    }
    if (!v93)
    {
      v109 = 0;
      goto LABEL_144;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v96 + 16))(v96, v94, v93);
    v109 = 0;
    v42 = *a1;
    v41 = a1[1];
    v120 = 1;
    v45 = a1[2];
LABEL_52:
    v46 = v45 - v42;
    if (v41 <= v46)
    {
      v93 = 0;
      v106 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v106 && v41)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106);
        v42 = *a1;
        v93 = a1[1];
      }
      else
      {
        v42 = 0;
      }
      goto LABEL_145;
    }
    v47 = (unsigned __int8 *)(v42 + v46);
    v48 = v42 + v46 + 1;
    a1[2] = v48;
    if (!v42)
    {
      v93 = v41;
      goto LABEL_145;
    }
    v49 = *v47;
    if (v49 < 2)
    {
      v50 = 0;
      v51 = 1;
      goto LABEL_56;
    }
LABEL_147:
    *a1 = 0;
    a1[1] = 0;
    v98 = a1[3];
    if (!v98 || !v41)
    {
      v52 = 0;
      v99 = 0;
      v42 = 0;
      v50 = 1;
LABEL_149:
      *a1 = 0;
      a1[1] = 0;
      v100 = a1[3];
      if (v100 && v99)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v100 + 16))(v100, v42, v99);
        v56 = 0;
        v42 = *a1;
        v41 = a1[1];
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v56 = 0;
      }
      goto LABEL_151;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v42);
    v51 = 0;
    v42 = *a1;
    v41 = a1[1];
    v50 = 1;
    v48 = a1[2];
LABEL_56:
    if (v49)
      v52 = v51;
    else
      v52 = 0;
    v53 = v48 - v42;
    if (v41 <= v53)
    {
      v99 = 0;
      v108 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v108 && v41)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
        v42 = *a1;
        v99 = a1[1];
      }
      else
      {
        v42 = 0;
      }
      goto LABEL_149;
    }
    v54 = (unsigned __int8 *)(v42 + v53);
    v55 = v42 + v53 + 1;
    a1[2] = v55;
    if (!v42)
    {
      v99 = v41;
      goto LABEL_149;
    }
    v56 = *v54;
    if (v56 < 2)
    {
      v57 = 0;
      v58 = 1;
      goto LABEL_63;
    }
LABEL_151:
    *a1 = 0;
    a1[1] = 0;
    v101 = a1[3];
    if (!v101 || !v41)
    {
      v59 = 0;
      v102 = 0;
      v42 = 0;
      v57 = 1;
LABEL_153:
      *a1 = 0;
      a1[1] = 0;
      v103 = a1[3];
      if (v103 && v102)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v103 + 16))(v103, v42, v102);
        v62 = 0;
        v42 = *a1;
        v41 = a1[1];
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v62 = 0;
      }
      goto LABEL_155;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v42);
    v58 = 0;
    v42 = *a1;
    v41 = a1[1];
    v57 = 1;
    v55 = a1[2];
LABEL_63:
    if (v56)
      v59 = v58;
    else
      v59 = 0;
    v60 = v55 - v42;
    if (v41 <= v60)
    {
      v102 = 0;
      v107 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v107 && v41)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
        v42 = *a1;
        v102 = a1[1];
      }
      else
      {
        v42 = 0;
      }
      goto LABEL_153;
    }
    v61 = (unsigned __int8 *)(v42 + v60);
    a1[2] = (uint64_t)(v61 + 1);
    if (!v42)
    {
      v102 = v41;
      goto LABEL_153;
    }
    v62 = *v61;
    if (v62 < 2)
    {
      v63 = 0;
      v64 = 1;
      goto LABEL_70;
    }
LABEL_155:
    *a1 = 0;
    a1[1] = 0;
    v104 = a1[3];
    if (v104 && v41)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v42);
    v64 = 0;
    v63 = 1;
LABEL_70:
    v65 = v62 ? v64 : 0;
    result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::RealtimeMediaSourceSupportedConstraints>(v130, a1);
    if (!*a1)
      break;
    if (!v129
      && !v128
      && (v127 & 0xFF00000000) != 0
      && v126 > 0xFFu
      && !v125
      && !v124
      && !v123
      && !v122
      && v137
      && v135
      && v133
      && !v33
      && !v121
      && v40 > 0xFFu
      && !v120
      && !v50
      && !v57
      && !v63
      && v131)
    {
      v68 = v136;
      v136 = 0;
      v69 = v134;
      v134 = 0;
      v70 = v132;
      v132 = 0;
      *(_DWORD *)a2 = v118 | v119;
      *(_DWORD *)(a2 + 4) = v116 | v117;
      *(_DWORD *)(a2 + 8) = v127;
      *(_BYTE *)(a2 + 12) = v126;
      *(_QWORD *)(a2 + 16) = v115;
      *(_DWORD *)(a2 + 24) = v114 | HIDWORD(v114);
      *(_DWORD *)(a2 + 28) = v113;
      *(_BYTE *)(a2 + 32) = v112;
      *(_QWORD *)(a2 + 40) = v68;
      *(_QWORD *)(a2 + 48) = v69;
      *(_QWORD *)(a2 + 56) = v70;
      *(_BYTE *)(a2 + 64) = v111;
      *(_BYTE *)(a2 + 65) = v110;
      *(_BYTE *)(a2 + 66) = v40;
      *(_QWORD *)(a2 + 72) = v109;
      *(_BYTE *)(a2 + 80) = v52;
      *(_BYTE *)(a2 + 81) = v59;
      *(_BYTE *)(a2 + 82) = v65;
      *(_OWORD *)(a2 + 83) = *(_OWORD *)v130;
      *(_DWORD *)(a2 + 98) = *(_DWORD *)&v130[15];
      *(_BYTE *)(a2 + 104) = 1;
      goto LABEL_94;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v133)
  {
    result = v132;
    v132 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v67);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_94:
  if (v135)
  {
    result = v134;
    v134 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v67);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v137)
  {
    result = v136;
    v136 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v67);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E6DC58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,char a27)
{
  uint64_t v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (*(_BYTE *)(v27 - 112))
  {
    v29 = *(WTF::StringImpl **)(v27 - 120);
    *(_QWORD *)(v27 - 120) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (*(_BYTE *)(v27 - 96))
  {
    v30 = *(WTF::StringImpl **)(v27 - 104);
    *(_QWORD *)(v27 - 104) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, a2);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::Decoder::decode<WebCore::RealtimeMediaSourceSupportedConstraints>(char *result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  char v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char v46;
  char v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  char v53;
  char v54;
  unint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  char v67;
  char v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  char v74;
  char v75;
  unint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  char v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  char v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  char v94;
  int v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  char v101;
  char v102;
  unint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unsigned int v106;
  char v107;
  char v108;
  unint64_t v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unsigned int v113;
  char v114;
  int v115;
  char v116;
  char v117;
  int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned __int8 *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  char v128;
  char v129;
  char v130;
  unint64_t v131;
  unsigned __int8 *v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  char v136;
  char v137;
  unint64_t v138;
  unsigned __int8 *v139;
  unsigned int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  char *v179;
  unint64_t v180;
  uint64_t *v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t *v185;
  char *v186;
  uint64_t *v187;
  char *v188;
  uint64_t *v189;
  char *v190;
  uint64_t *v191;
  char *v192;
  int v193;
  uint64_t *v194;
  char *v195;
  uint64_t *v196;
  char *v197;
  char v198;
  int v199;
  uint64_t *v200;
  char *v201;
  uint64_t v202;
  uint64_t *v203;
  char *v204;
  char v205;
  int v206;
  uint64_t *v207;
  char *v208;
  int v209;
  uint64_t *v210;
  char *v211;
  uint64_t v212;
  char v213;
  char v214;
  char v215;
  int v216;
  char v217;
  uint64_t *v218;
  char *v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  int v224;
  char v225;
  uint64_t *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  int v232;
  char v233;
  int v234;
  char v235;
  uint64_t *v236;
  char *v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  char v241;
  int v242;
  char v243;
  int v244;
  char v245;
  uint64_t *v246;
  char *v247;
  char v248;
  uint64_t v249;
  char v250;
  int v251;
  char v252;
  int v253;
  char v254;
  uint64_t *v255;
  char *v256;
  char v257;
  char v258;
  int v259;
  char v260;
  int v261;
  char v262;
  uint64_t *v263;
  char *v264;
  char v265;
  uint64_t v266;
  int v267;
  char v268;
  int v269;
  char v270;
  uint64_t *v271;
  char *v272;
  char v273;
  int v274;
  char v275;
  int v276;
  char v277;
  uint64_t *v278;
  char *v279;
  char v280;
  char v281;
  int v282;
  char v283;
  int v284;
  char v285;
  uint64_t *v286;
  char *v287;
  char v288;
  uint64_t v289;
  char v290;
  int v291;
  char v292;
  int v293;
  char v294;
  uint64_t *v295;
  char *v296;
  char v297;
  uint64_t v298;
  char v299;
  int v300;
  char v301;
  int v302;
  char v303;
  uint64_t *v304;
  char *v305;
  char v306;
  uint64_t v307;
  char v308;
  int v309;
  char v310;
  int v311;
  char v312;
  uint64_t *v313;
  char *v314;
  char v315;
  uint64_t v316;
  char v317;
  int v318;
  char v319;
  int v320;
  char v321;
  uint64_t *v322;
  char *v323;
  char v324;
  char v325;
  uint64_t v326;
  int v327;
  char v328;
  int v329;
  char v330;
  uint64_t *v331;
  char *v332;
  char v333;
  char v334;
  uint64_t v335;
  int v336;
  char v337;
  int v338;
  char v339;
  uint64_t *v340;
  char *v341;
  char v342;
  uint64_t v343;
  int v344;
  char v345;
  int v346;
  char v347;
  uint64_t *v348;
  char *v349;
  char v350;
  uint64_t v351;
  int v352;
  char v353;
  int v354;
  char v355;
  uint64_t *v356;
  char *v357;
  char v358;
  int v359;
  char v360;
  int v361;
  char v362;
  uint64_t *v363;
  char *v364;
  char v365;
  int v366;
  char v367;
  int v368;
  char v369;
  uint64_t *v370;
  char *v371;
  int v372;
  char v373;
  int v374;
  char v375;
  uint64_t *v376;
  char *v377;
  int v378;
  char v379;
  int v380;
  char v381;
  uint64_t *v382;
  char *v383;
  int v384;
  char v385;
  uint64_t *v386;
  char *v387;
  int v388;
  char v389;
  uint64_t *v390;
  char *v391;
  uint64_t *v392;
  char *v393;
  uint64_t *v394;
  char *v395;
  uint64_t *v396;
  char *v397;
  int v398;
  char v399;
  char *v400;
  uint64_t v401;
  uint64_t *v402;
  int v403;
  char v404;
  int v405;
  char v406;
  char *v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  char v411;
  int v412;
  char v413;
  int v414;
  char v415;
  char *v416;
  uint64_t v417;
  uint64_t *v418;
  int v419;
  char v420;
  int v421;
  char v422;
  int v423;
  char v424;
  char *v425;
  uint64_t v426;
  uint64_t *v427;
  int v428;
  char v429;
  uint64_t v430;
  char v431;
  int v432;
  char v433;
  int v434;
  char v435;
  char *v436;
  uint64_t v437;
  uint64_t *v438;
  int v439;
  char v440;
  uint64_t v441;
  int v442;
  char v443;
  int v444;
  char v445;
  char *v446;
  uint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  char v450;
  int v451;
  char v452;
  int v453;
  char v454;
  char *v455;
  uint64_t v456;
  uint64_t *v457;
  int v458;
  char v459;
  uint64_t v460;
  char v461;
  int v462;
  char v463;
  int v464;
  char v465;
  char *v466;
  uint64_t v467;
  uint64_t *v468;
  int v469;
  uint64_t v470;
  char v471;
  char v472;
  int v473;
  char v474;
  int v475;
  char v476;
  char *v477;
  uint64_t v478;
  uint64_t *v479;
  int v480;
  char v481;
  uint64_t v482;
  int v483;
  char v484;
  int v485;
  char v486;
  char *v487;
  uint64_t v488;
  uint64_t *v489;
  int v490;
  char v491;
  uint64_t v492;
  char v493;
  int v494;
  char v495;
  int v496;
  char v497;
  char *v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  char v502;
  int v503;
  char v504;
  char *v505;
  uint64_t v506;
  uint64_t *v507;
  char *v508;
  uint64_t v509;
  uint64_t *v510;
  char *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  char *v519;
  uint64_t v520;
  uint64_t *v521;
  unsigned int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  char v529;
  char v530;
  char v531;
  char v532;
  char v533;
  char v534;
  char v535;
  char v536;
  char v537;
  char v538;
  char v539;
  char v540;
  int v541;
  int v542;
  int v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  char v565;
  char v566;
  char v567;
  char v568;
  char v569;
  char v570;
  char v571;
  char v572;
  char v573;
  char v574;
  char v575;
  char v576;
  char v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  char v631;
  char v632;
  char v633;
  char v634;
  char v635;
  char v636;
  char v637;
  char v638;
  char v639;
  char v640;
  char v641;
  char v642;
  char v643;
  char v644;
  char v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  int v668;
  int v669;
  int v670;
  int v671;
  int v672;
  int v673;
  char v674;
  char v675;
  char v676;
  char v677;
  char v678;
  char v679;
  char v680;
  char v681;
  char v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  int v695;
  int v696;
  int v697;
  int v698;
  int v699;
  int v700;
  int v701;
  int v702;
  int v703;
  int v704;
  int v705;
  int v706;
  int v707;
  char v708;
  char v709;
  char v710;
  char v711;
  char v712;
  char v713;
  char v714;
  char v715;
  char v716;
  char v717;
  char v718;
  char v719;
  char v720;
  char v721;
  char v722;
  char v723;
  char v724;
  char v725;
  char v726;
  char v727;
  char v728;
  char v729;
  char v730;
  char v731;
  char v732;
  char v733;
  char v734;
  int v735;
  int v736;
  int v737;
  int v738;
  int v739;
  int v740;
  int v741;
  int v742;
  int v743;
  int v744;
  int v745;
  int v746;
  int v747;
  int v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  int v755;
  int v756;
  int v757;
  int v758;
  int v759;
  int v760;
  int v761;
  int v762;
  int v763;
  int v764;
  int v765;
  int v766;
  int v767;
  int v768;
  int v769;
  int v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  int v777;
  int v778;
  int v779;
  int v780;
  int v781;
  int v782;
  int v783;
  int v784;
  int v785;
  int v786;
  int v787;
  int v788;
  int v789;
  int v790;
  int v791;
  int v792;
  int v793;
  int v794;
  int v795;
  char v796;
  char v797;
  char v798;
  char v799;
  char v800;
  char v801;
  char v802;
  char v803;
  char v804;
  char v805;
  char v806;
  char v807;
  char v808;
  char v809;
  char v810;
  char v811;
  char v812;
  char v813;
  char v814;
  char v815;
  char v816;
  char v817;
  char v818;
  char v819;
  char v820;
  char v821;
  char v822;
  char v823;
  char v824;
  char v825;
  char v826;
  char v827;
  char v828;
  char v829;
  char v830;
  char v831;
  char v832;
  char v833;
  char v834;
  char v835;
  char v836;
  char v837;
  char v838;
  char v839;
  char v840;
  char v841;
  char v842;
  char v843;
  char v844;
  char v845;
  char v846;
  char v847;
  char v848;
  char v849;
  char v850;
  char v851;
  char v852;
  char v853;
  char v854;
  char v855;
  char v856;
  char v857;
  char v858;
  char v859;
  char v860;
  char v861;
  char v862;
  char v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  int v871;
  int v872;
  int v873;
  int v874;
  int v875;
  int v876;
  int v877;
  int v878;
  int v879;
  int v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  int v887;
  int v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  char v903;
  char v904;
  char v905;
  char v906;
  char v907;
  char v908;
  char v909;
  char v910;
  char v911;
  char v912;
  char v913;
  char v914;
  char v915;
  char v916;
  char v917;
  char v918;
  char v919;
  int v920;
  int v921;
  int v922;
  int v923;
  unsigned int v924;

  v2 = (unint64_t)a2;
  v3 = a2[2];
  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = v3 - v4;
  if (v5 <= v6)
  {
    v142 = 0;
    v143 = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v144 = *(_QWORD *)(v2 + 24);
    if (v144)
    {
      v396 = (uint64_t *)v2;
      v397 = result;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v144 + 16))(v144);
        v2 = (unint64_t)v396;
        v143 = *v396;
        v142 = v396[1];
        result = v397;
      }
      else
      {
        v142 = 0;
        v143 = 0;
      }
    }
    goto LABEL_149;
  }
  v7 = (unsigned __int8 *)(v4 + v6);
  v8 = v4 + v6 + 1;
  *(_QWORD *)(v2 + 16) = v8;
  if (!v4)
    goto LABEL_406;
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v146 = *(_QWORD *)(v2 + 24);
    if (!v146)
    {
      v12 = 0;
      v4 = 0;
      v10 = 1;
      goto LABEL_153;
    }
    v392 = (uint64_t *)v2;
    v393 = result;
    if (!v5)
    {
      v12 = 0;
      v146 = 0;
      v4 = 0;
      v10 = 1;
LABEL_153:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v147 = *(_QWORD *)(v2 + 24);
      if (v147)
      {
        v388 = v10;
        v389 = v12;
        v390 = (uint64_t *)v2;
        v391 = result;
        if (v146)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v147 + 16))(v147, v4, v146);
          v16 = 0;
          v2 = (unint64_t)v390;
          v4 = *v390;
          v5 = v390[1];
          result = v391;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v16 = 0;
        }
        v12 = v389;
        v10 = v388;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v16 = 0;
      }
      goto LABEL_155;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v146 + 16))(v146, v4);
    v11 = 0;
    v2 = (unint64_t)v392;
    v4 = *v392;
    v5 = v392[1];
    v10 = 1;
    v8 = v392[2];
    result = v393;
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - v4;
    if (v5 <= v13)
    {
      v398 = v10;
      v399 = v12;
      v400 = result;
      v146 = 0;
      v401 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v402 = (uint64_t *)v2;
      if (v5 && v401)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v401 + 16))(v401);
        v2 = (unint64_t)v402;
        v4 = *v402;
        v146 = v402[1];
        result = v400;
      }
      else
      {
        v4 = 0;
        result = v400;
      }
      v12 = v399;
      v10 = v398;
      goto LABEL_153;
    }
    v14 = (unsigned __int8 *)(v4 + v13);
    v15 = v4 + v13 + 1;
    *(_QWORD *)(v2 + 16) = v15;
    if (!v4)
    {
      v146 = v5;
      goto LABEL_153;
    }
    v16 = *v14;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_155:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v148 = *(_QWORD *)(v2 + 24);
    if (!v148)
    {
      v19 = 0;
      v4 = 0;
      v17 = 1;
      goto LABEL_157;
    }
    v384 = v10;
    v385 = v12;
    v386 = (uint64_t *)v2;
    v387 = result;
    if (!v5)
    {
      v19 = 0;
      v148 = 0;
      v4 = 0;
      v17 = 1;
LABEL_157:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v149 = *(_QWORD *)(v2 + 24);
      if (v149)
      {
        v378 = v17;
        v379 = v19;
        v380 = v10;
        v381 = v12;
        v382 = (uint64_t *)v2;
        v383 = result;
        if (v148)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v149 + 16))(v149, v4, v148);
          v23 = 0;
          v2 = (unint64_t)v382;
          v4 = *v382;
          v5 = v382[1];
          result = v383;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v23 = 0;
        }
        v12 = v381;
        v10 = v380;
        v19 = v379;
        v17 = v378;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v23 = 0;
      }
      goto LABEL_159;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v4);
    v18 = 0;
    v2 = (unint64_t)v386;
    v4 = *v386;
    v5 = v386[1];
    v17 = 1;
    v15 = v386[2];
    result = v387;
    v12 = v385;
    v10 = v384;
LABEL_12:
    if (v16)
      v19 = v18;
    else
      v19 = 0;
    v20 = v15 - v4;
    if (v5 <= v20)
    {
      v403 = v17;
      v404 = v19;
      v405 = v10;
      v406 = v12;
      v407 = result;
      v148 = 0;
      v408 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v409 = (uint64_t *)v2;
      if (v5 && v408)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v408 + 16))(v408);
        v2 = (unint64_t)v409;
        v4 = *v409;
        v148 = v409[1];
        result = v407;
      }
      else
      {
        v4 = 0;
        result = v407;
      }
      v12 = v406;
      v10 = v405;
      v19 = v404;
      v17 = v403;
      goto LABEL_157;
    }
    v21 = (unsigned __int8 *)(v4 + v20);
    v22 = v4 + v20 + 1;
    *(_QWORD *)(v2 + 16) = v22;
    if (!v4)
    {
      v148 = v5;
      goto LABEL_157;
    }
    v23 = *v21;
    if (v23 < 2)
    {
      v24 = 0;
      v25 = 1;
      goto LABEL_19;
    }
LABEL_159:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v150 = *(_QWORD *)(v2 + 24);
    if (!v150)
    {
      v26 = 0;
      v4 = 0;
LABEL_161:
      v24 = 1;
      goto LABEL_162;
    }
    v372 = v17;
    v373 = v19;
    v374 = v10;
    v375 = v12;
    v376 = (uint64_t *)v2;
    v377 = result;
    if (!v5)
    {
      v150 = 0;
      v4 = 0;
      v26 = 0;
      goto LABEL_161;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v4);
    v25 = 0;
    v2 = (unint64_t)v376;
    v4 = *v376;
    v5 = v376[1];
    v22 = v376[2];
    result = v377;
    v12 = v375;
    v10 = v374;
    v19 = v373;
    v17 = v372;
    v24 = 1;
LABEL_19:
    if (v23)
      v26 = v25;
    else
      v26 = 0;
    v27 = v22 - v4;
    if (v5 <= v27)
    {
      v410 = v24;
      v411 = v26;
      v412 = v17;
      v413 = v19;
      v414 = v10;
      v415 = v12;
      v416 = result;
      v150 = 0;
      v417 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v418 = (uint64_t *)v2;
      if (v5 && v417)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v417 + 16))(v417);
        v2 = (unint64_t)v418;
        v4 = *v418;
        v150 = v418[1];
        result = v416;
      }
      else
      {
        v4 = 0;
        result = v416;
      }
      v12 = v415;
      v10 = v414;
      v19 = v413;
      v17 = v412;
      v26 = v411;
      v24 = v410;
      goto LABEL_162;
    }
    v28 = (unsigned __int8 *)(v4 + v27);
    v29 = v4 + v27 + 1;
    *(_QWORD *)(v2 + 16) = v29;
    if (!v4)
    {
      v150 = v5;
LABEL_162:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v151 = *(_QWORD *)(v2 + 24);
      if (v151)
      {
        v365 = v26;
        v366 = v17;
        v367 = v19;
        v368 = v10;
        v369 = v12;
        v370 = (uint64_t *)v2;
        v371 = result;
        if (v150)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v151 + 16))(v151, v4, v150);
          v30 = 0;
          v2 = (unint64_t)v370;
          v4 = *v370;
          v5 = v370[1];
          result = v371;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v30 = 0;
        }
        v12 = v369;
        v10 = v368;
        v19 = v367;
        v17 = v366;
        v26 = v365;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v30 = 0;
      }
      goto LABEL_164;
    }
    v30 = *v28;
    if (v30 < 2)
    {
      v31 = 0;
      v32 = 1;
      goto LABEL_26;
    }
LABEL_164:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v152 = *(_QWORD *)(v2 + 24);
    if (!v152)
    {
      v33 = 0;
      v4 = 0;
      v31 = 1;
      goto LABEL_166;
    }
    v358 = v26;
    v359 = v17;
    v360 = v19;
    v361 = v10;
    v362 = v12;
    v363 = (uint64_t *)v2;
    v364 = result;
    if (!v5)
    {
      v33 = 0;
      v152 = 0;
      v4 = 0;
      v31 = 1;
      v26 = v358;
LABEL_166:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v153 = *(_QWORD *)(v2 + 24);
      if (v153)
      {
        v893 = v31;
        v350 = v33;
        v351 = v24;
        v352 = v17;
        v353 = v19;
        v354 = v10;
        v355 = v12;
        v356 = (uint64_t *)v2;
        v357 = result;
        if (v152)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v153 + 16))(v153, v4, v152);
          v37 = 0;
          v2 = (unint64_t)v356;
          v4 = *v356;
          v5 = v356[1];
          result = v357;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v37 = 0;
        }
        v12 = v355;
        v10 = v354;
        v19 = v353;
        v17 = v352;
        v24 = v351;
        v33 = v350;
        v31 = v893;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v37 = 0;
      }
      goto LABEL_168;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v4);
    v32 = 0;
    v2 = (unint64_t)v363;
    v4 = *v363;
    v5 = v363[1];
    v31 = 1;
    v29 = v363[2];
    result = v364;
    v12 = v362;
    v10 = v361;
    v19 = v360;
    v17 = v359;
    v26 = v358;
LABEL_26:
    if (v30)
      v33 = v32;
    else
      v33 = 0;
    v34 = v29 - v4;
    if (v5 <= v34)
    {
      v419 = v31;
      v420 = v33;
      v421 = v17;
      v422 = v19;
      v423 = v10;
      v424 = v12;
      v425 = result;
      v152 = 0;
      v426 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v427 = (uint64_t *)v2;
      if (v5 && v426)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v426 + 16))(v426);
        v2 = (unint64_t)v427;
        v4 = *v427;
        v152 = v427[1];
        result = v425;
      }
      else
      {
        v4 = 0;
        result = v425;
      }
      v12 = v424;
      v10 = v423;
      v19 = v422;
      v17 = v421;
      v33 = v420;
      v31 = v419;
      goto LABEL_166;
    }
    v35 = (unsigned __int8 *)(v4 + v34);
    v36 = v4 + v34 + 1;
    *(_QWORD *)(v2 + 16) = v36;
    if (!v4)
    {
      v152 = v5;
      goto LABEL_166;
    }
    v37 = *v35;
    if (v37 < 2)
    {
      v38 = 0;
      v39 = 1;
      goto LABEL_33;
    }
LABEL_168:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v154 = *(_QWORD *)(v2 + 24);
    if (!v154)
    {
      v40 = 0;
      v4 = 0;
      v38 = 1;
      goto LABEL_170;
    }
    v892 = v31;
    v342 = v33;
    v343 = v24;
    v344 = v17;
    v345 = v19;
    v346 = v10;
    v347 = v12;
    v348 = (uint64_t *)v2;
    v349 = result;
    if (!v5)
    {
      v40 = 0;
      v154 = 0;
      v4 = 0;
      v38 = 1;
      v24 = v343;
      v33 = v342;
LABEL_170:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v155 = *(_QWORD *)(v2 + 24);
      if (v155)
      {
        v854 = v40;
        v891 = v31;
        v762 = v38;
        v333 = v26;
        v334 = v33;
        v335 = v24;
        v336 = v17;
        v337 = v19;
        v338 = v10;
        v339 = v12;
        v340 = (uint64_t *)v2;
        v341 = result;
        if (v154)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v155 + 16))(v155, v4, v154);
          v44 = 0;
          v2 = (unint64_t)v340;
          v4 = *v340;
          v5 = v340[1];
          result = v341;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v44 = 0;
        }
        v12 = v339;
        v10 = v338;
        v19 = v337;
        v17 = v336;
        v24 = v335;
        v33 = v334;
        v26 = v333;
        v40 = v854;
        v31 = v891;
        v38 = v762;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v44 = 0;
      }
      goto LABEL_172;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v154 + 16))(v154, v4);
    v39 = 0;
    v2 = (unint64_t)v348;
    v4 = *v348;
    v5 = v348[1];
    v38 = 1;
    v36 = v348[2];
    result = v349;
    v12 = v347;
    v10 = v346;
    v19 = v345;
    v17 = v344;
    v24 = v343;
    v33 = v342;
    v31 = v892;
LABEL_33:
    if (v37)
      v40 = v39;
    else
      v40 = 0;
    v41 = v36 - v4;
    if (v5 <= v41)
    {
      v855 = v40;
      v894 = v31;
      v428 = v38;
      v429 = v33;
      v430 = v24;
      v431 = v26;
      v432 = v17;
      v433 = v19;
      v434 = v10;
      v435 = v12;
      v436 = result;
      v154 = 0;
      v437 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v438 = (uint64_t *)v2;
      if (v5 && v437)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v437 + 16))(v437);
        v2 = (unint64_t)v438;
        v4 = *v438;
        v154 = v438[1];
        result = v436;
      }
      else
      {
        v4 = 0;
        result = v436;
      }
      v12 = v435;
      v10 = v434;
      v19 = v433;
      v17 = v432;
      v26 = v431;
      v24 = v430;
      v33 = v429;
      v40 = v855;
      v31 = v894;
      v38 = v428;
      goto LABEL_170;
    }
    v42 = (unsigned __int8 *)(v4 + v41);
    v43 = v4 + v41 + 1;
    *(_QWORD *)(v2 + 16) = v43;
    if (!v4)
    {
      v154 = v5;
      goto LABEL_170;
    }
    v44 = *v42;
    if (v44 < 2)
    {
      v45 = 0;
      v46 = 1;
      goto LABEL_40;
    }
LABEL_172:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v156 = *(_QWORD *)(v2 + 24);
    if (!v156)
    {
      v47 = 0;
      v4 = 0;
      v45 = 1;
      goto LABEL_174;
    }
    v853 = v40;
    v890 = v31;
    v761 = v38;
    v324 = v26;
    v325 = v33;
    v326 = v24;
    v327 = v17;
    v328 = v19;
    v329 = v10;
    v330 = v12;
    v331 = (uint64_t *)v2;
    v332 = result;
    if (!v5)
    {
      v156 = 0;
      v4 = 0;
      v45 = 1;
      v24 = v326;
      v47 = 0;
      v33 = v325;
      v26 = v324;
LABEL_174:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v157 = *(_QWORD *)(v2 + 24);
      if (v157)
      {
        v787 = v45;
        v819 = v47;
        v852 = v40;
        v889 = v31;
        v760 = v38;
        v315 = v33;
        v316 = v24;
        v317 = v26;
        v318 = v17;
        v319 = v19;
        v320 = v10;
        v321 = v12;
        v322 = (uint64_t *)v2;
        v323 = result;
        if (v156)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v157 + 16))(v157, v4, v156);
          v51 = 0;
          v2 = (unint64_t)v322;
          v4 = *v322;
          v5 = v322[1];
          result = v323;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v51 = 0;
        }
        v12 = v321;
        v10 = v320;
        v19 = v319;
        v17 = v318;
        v26 = v317;
        v24 = v316;
        v33 = v315;
        v40 = v852;
        v31 = v889;
        v38 = v760;
        v45 = v787;
        v47 = v819;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v51 = 0;
      }
      goto LABEL_176;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v4);
    v46 = 0;
    v2 = (unint64_t)v331;
    v4 = *v331;
    v5 = v331[1];
    v45 = 1;
    v43 = v331[2];
    result = v332;
    v12 = v330;
    v10 = v329;
    v19 = v328;
    v17 = v327;
    v24 = v326;
    v33 = v325;
    v26 = v324;
    v40 = v853;
    v31 = v890;
    v38 = v761;
LABEL_40:
    if (v44)
      v47 = v46;
    else
      v47 = 0;
    v48 = v43 - v4;
    if (v5 <= v48)
    {
      v788 = v45;
      v820 = v47;
      v856 = v40;
      v895 = v31;
      v439 = v38;
      v440 = v26;
      v441 = v24;
      v442 = v17;
      v443 = v19;
      v444 = v10;
      v445 = v12;
      v446 = result;
      v156 = 0;
      v447 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v448 = (uint64_t *)v2;
      if (v5 && v447)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v447 + 16))(v447);
        v2 = (unint64_t)v448;
        v4 = *v448;
        v156 = v448[1];
        result = v446;
      }
      else
      {
        v4 = 0;
        result = v446;
      }
      v12 = v445;
      v10 = v444;
      v19 = v443;
      v17 = v442;
      v24 = v441;
      v26 = v440;
      v40 = v856;
      v31 = v895;
      v38 = v439;
      v45 = v788;
      v47 = v820;
      goto LABEL_174;
    }
    v49 = (unsigned __int8 *)(v4 + v48);
    v50 = v4 + v48 + 1;
    *(_QWORD *)(v2 + 16) = v50;
    if (!v4)
    {
      v156 = v5;
      goto LABEL_174;
    }
    v51 = *v49;
    if (v51 < 2)
    {
      v52 = 0;
      v53 = 1;
      goto LABEL_47;
    }
LABEL_176:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v158 = *(_QWORD *)(v2 + 24);
    if (!v158)
    {
      v54 = 0;
      v4 = 0;
      v52 = 1;
      goto LABEL_178;
    }
    v786 = v45;
    v818 = v47;
    v851 = v40;
    v888 = v31;
    v759 = v38;
    v306 = v33;
    v307 = v24;
    v308 = v26;
    v309 = v17;
    v310 = v19;
    v311 = v10;
    v312 = v12;
    v313 = (uint64_t *)v2;
    v314 = result;
    if (!v5)
    {
      v158 = 0;
      v4 = 0;
      v26 = v308;
      v24 = v307;
      v33 = v306;
      v54 = 0;
      v52 = 1;
      v47 = v818;
LABEL_178:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v159 = *(_QWORD *)(v2 + 24);
      if (v159)
      {
        v701 = v52;
        v729 = v54;
        v785 = v45;
        v817 = v47;
        v850 = v40;
        v887 = v31;
        v758 = v38;
        v297 = v33;
        v298 = v24;
        v299 = v26;
        v300 = v17;
        v301 = v19;
        v302 = v10;
        v303 = v12;
        v304 = (uint64_t *)v2;
        v305 = result;
        if (v158)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v159 + 16))(v159, v4, v158);
          v58 = 0;
          v2 = (unint64_t)v304;
          v4 = *v304;
          v5 = v304[1];
          result = v305;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v58 = 0;
        }
        v12 = v303;
        v10 = v302;
        v19 = v301;
        v17 = v300;
        v26 = v299;
        v24 = v298;
        v33 = v297;
        v40 = v850;
        v31 = v887;
        v38 = v758;
        v45 = v785;
        v47 = v817;
        v52 = v701;
        v54 = v729;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v58 = 0;
      }
      goto LABEL_180;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v158 + 16))(v158, v4);
    v53 = 0;
    v2 = (unint64_t)v313;
    v4 = *v313;
    v5 = v313[1];
    v50 = v313[2];
    result = v314;
    v12 = v312;
    v10 = v311;
    v19 = v310;
    v17 = v309;
    v26 = v308;
    v24 = v307;
    v33 = v306;
    v52 = 1;
    v40 = v851;
    v31 = v888;
    v38 = v759;
    v45 = v786;
    v47 = v818;
LABEL_47:
    if (v51)
      v54 = v53;
    else
      v54 = 0;
    v55 = v50 - v4;
    if (v5 <= v55)
    {
      v702 = v52;
      v730 = v54;
      v789 = v45;
      v821 = v47;
      v857 = v40;
      v896 = v31;
      v763 = v38;
      v449 = v24;
      v450 = v26;
      v451 = v17;
      v452 = v19;
      v453 = v10;
      v454 = v12;
      v455 = result;
      v158 = 0;
      v456 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v457 = (uint64_t *)v2;
      if (v5 && v456)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v456 + 16))(v456);
        v2 = (unint64_t)v457;
        v4 = *v457;
        v158 = v457[1];
        result = v455;
      }
      else
      {
        v4 = 0;
        result = v455;
      }
      v12 = v454;
      v10 = v453;
      v19 = v452;
      v17 = v451;
      v26 = v450;
      v24 = v449;
      v40 = v857;
      v31 = v896;
      v38 = v763;
      v45 = v789;
      v47 = v821;
      v52 = v702;
      v54 = v730;
      goto LABEL_178;
    }
    v56 = (unsigned __int8 *)(v4 + v55);
    v57 = v4 + v55 + 1;
    *(_QWORD *)(v2 + 16) = v57;
    if (!v4)
    {
      v158 = v5;
      goto LABEL_178;
    }
    v58 = *v56;
    if (v58 < 2)
    {
      v59 = 0;
      v60 = 1;
      goto LABEL_54;
    }
LABEL_180:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v160 = *(_QWORD *)(v2 + 24);
    if (!v160)
    {
      v61 = 0;
      v4 = 0;
      v59 = 1;
      goto LABEL_182;
    }
    v700 = v52;
    v728 = v54;
    v784 = v45;
    v816 = v47;
    v849 = v40;
    v886 = v31;
    v757 = v38;
    v288 = v33;
    v289 = v24;
    v290 = v26;
    v291 = v17;
    v292 = v19;
    v293 = v10;
    v294 = v12;
    v295 = (uint64_t *)v2;
    v296 = result;
    if (!v5)
    {
      v61 = 0;
      v160 = 0;
      v4 = 0;
      v59 = 1;
      v26 = v290;
      v24 = v289;
      v33 = v288;
      v47 = v816;
      v52 = v700;
      v54 = v728;
LABEL_182:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v161 = *(_QWORD *)(v2 + 24);
      if (v161)
      {
        v667 = v59;
        v699 = v52;
        v727 = v54;
        v783 = v45;
        v815 = v47;
        v848 = v40;
        v885 = v31;
        v756 = v38;
        v280 = v33;
        v281 = v26;
        v282 = v17;
        v283 = v19;
        v284 = v10;
        v285 = v12;
        v286 = (uint64_t *)v2;
        v287 = result;
        if (v160)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v161 + 16))(v161, v4, v160);
          v65 = 0;
          v2 = (unint64_t)v286;
          v4 = *v286;
          v5 = v286[1];
          result = v287;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v65 = 0;
        }
        v12 = v285;
        v10 = v284;
        v19 = v283;
        v17 = v282;
        v26 = v281;
        v33 = v280;
        v40 = v848;
        v31 = v885;
        v38 = v756;
        v45 = v783;
        v47 = v815;
        v52 = v699;
        v54 = v727;
        v59 = v667;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v65 = 0;
      }
      goto LABEL_184;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v160 + 16))(v160, v4);
    v60 = 0;
    v2 = (unint64_t)v295;
    v4 = *v295;
    v5 = v295[1];
    v59 = 1;
    v57 = v295[2];
    result = v296;
    v12 = v294;
    v10 = v293;
    v19 = v292;
    v17 = v291;
    v26 = v290;
    v24 = v289;
    v33 = v288;
    v40 = v849;
    v31 = v886;
    v38 = v757;
    v45 = v784;
    v47 = v816;
    v52 = v700;
    v54 = v728;
LABEL_54:
    if (v58)
      v61 = v60;
    else
      v61 = 0;
    v62 = v57 - v4;
    if (v5 <= v62)
    {
      v668 = v59;
      v703 = v52;
      v731 = v54;
      v790 = v45;
      v822 = v47;
      v858 = v40;
      v897 = v31;
      v458 = v38;
      v459 = v33;
      v460 = v24;
      v461 = v26;
      v462 = v17;
      v463 = v19;
      v464 = v10;
      v465 = v12;
      v466 = result;
      v160 = 0;
      v467 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v468 = (uint64_t *)v2;
      if (v5 && v467)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v467 + 16))(v467);
        v2 = (unint64_t)v468;
        v4 = *v468;
        v160 = v468[1];
        result = v466;
      }
      else
      {
        v4 = 0;
        result = v466;
      }
      v12 = v465;
      v10 = v464;
      v19 = v463;
      v17 = v462;
      v26 = v461;
      v24 = v460;
      v33 = v459;
      v40 = v858;
      v31 = v897;
      v38 = v458;
      v45 = v790;
      v47 = v822;
      v52 = v703;
      v54 = v731;
      v59 = v668;
      goto LABEL_182;
    }
    v63 = (unsigned __int8 *)(v4 + v62);
    v64 = v4 + v62 + 1;
    *(_QWORD *)(v2 + 16) = v64;
    if (!v4)
    {
      v160 = v5;
      goto LABEL_182;
    }
    v65 = *v63;
    if (v65 < 2)
    {
      v66 = 0;
      v67 = 1;
      goto LABEL_61;
    }
LABEL_184:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v162 = *(_QWORD *)(v2 + 24);
    if (!v162)
    {
      v68 = 0;
      v4 = 0;
      v66 = 1;
      goto LABEL_186;
    }
    v666 = v59;
    v698 = v52;
    v782 = v45;
    v814 = v47;
    v847 = v40;
    v884 = v31;
    v755 = v38;
    v273 = v33;
    v549 = v24;
    v274 = v17;
    v275 = v19;
    v276 = v10;
    v277 = v12;
    v278 = (uint64_t *)v2;
    v279 = result;
    if (!v5)
    {
      v162 = 0;
      v4 = 0;
      v66 = 1;
      v68 = 0;
      v24 = v549;
      v33 = v273;
      v47 = v814;
      v52 = v698;
LABEL_186:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v163 = *(_QWORD *)(v2 + 24);
      if (v163)
      {
        v626 = v66;
        v641 = v68;
        v665 = v59;
        v697 = v52;
        v726 = v54;
        v781 = v45;
        v813 = v47;
        v846 = v40;
        v883 = v31;
        v754 = v38;
        v265 = v33;
        v266 = v24;
        v267 = v17;
        v268 = v19;
        v269 = v10;
        v270 = v12;
        v271 = (uint64_t *)v2;
        v272 = result;
        if (v162)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v163 + 16))(v163, v4, v162);
          v72 = 0;
          v2 = (unint64_t)v271;
          v4 = *v271;
          v5 = v271[1];
          result = v272;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v72 = 0;
        }
        v12 = v270;
        v10 = v269;
        v19 = v268;
        v17 = v267;
        v24 = v266;
        v33 = v265;
        v40 = v846;
        v31 = v883;
        v38 = v754;
        v45 = v781;
        v47 = v813;
        v52 = v697;
        v54 = v726;
        v59 = v665;
        v66 = v626;
        v68 = v641;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v72 = 0;
      }
      goto LABEL_188;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v162 + 16))(v162, v4);
    v67 = 0;
    v2 = (unint64_t)v278;
    v4 = *v278;
    v5 = v278[1];
    v64 = v278[2];
    result = v279;
    v12 = v277;
    v66 = 1;
    v10 = v276;
    v19 = v275;
    v17 = v274;
    v24 = v549;
    v33 = v273;
    v40 = v847;
    v31 = v884;
    v38 = v755;
    v45 = v782;
    v47 = v814;
    v52 = v698;
    v59 = v666;
LABEL_61:
    if (v65)
      v68 = v67;
    else
      v68 = 0;
    v69 = v64 - v4;
    if (v5 <= v69)
    {
      v627 = v66;
      v642 = v68;
      v669 = v59;
      v704 = v52;
      v732 = v54;
      v791 = v45;
      v823 = v47;
      v859 = v40;
      v898 = v31;
      v469 = v38;
      v470 = v24;
      v471 = v33;
      v472 = v26;
      v473 = v17;
      v474 = v19;
      v475 = v10;
      v476 = v12;
      v477 = result;
      v162 = 0;
      v478 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v479 = (uint64_t *)v2;
      if (v5 && v478)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v478 + 16))(v478);
        v2 = (unint64_t)v479;
        v4 = *v479;
        v162 = v479[1];
        result = v477;
      }
      else
      {
        v4 = 0;
        result = v477;
      }
      v12 = v476;
      v10 = v475;
      v19 = v474;
      v17 = v473;
      v26 = v472;
      v33 = v471;
      v24 = v470;
      v40 = v859;
      v31 = v898;
      v38 = v469;
      v45 = v791;
      v47 = v823;
      v52 = v704;
      v54 = v732;
      v59 = v669;
      v66 = v627;
      v68 = v642;
      goto LABEL_186;
    }
    v70 = (unsigned __int8 *)(v4 + v69);
    v71 = v4 + v69 + 1;
    *(_QWORD *)(v2 + 16) = v71;
    if (!v4)
    {
      v162 = v5;
      goto LABEL_186;
    }
    v72 = *v70;
    if (v72 < 2)
    {
      v73 = 0;
      v74 = 1;
      goto LABEL_68;
    }
LABEL_188:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v164 = *(_QWORD *)(v2 + 24);
    if (!v164)
    {
      v75 = 0;
      v4 = 0;
      v73 = 1;
      goto LABEL_190;
    }
    v640 = v68;
    v664 = v59;
    v696 = v52;
    v725 = v54;
    v780 = v45;
    v812 = v47;
    v845 = v40;
    v882 = v31;
    v753 = v38;
    v257 = v33;
    v548 = v24;
    v258 = v26;
    v259 = v17;
    v260 = v19;
    v261 = v10;
    v262 = v12;
    v263 = (uint64_t *)v2;
    v264 = result;
    if (!v5)
    {
      v75 = 0;
      v164 = 0;
      v4 = 0;
      v73 = 1;
      v26 = v258;
      v24 = v548;
      v33 = v257;
      v47 = v812;
      v52 = v696;
      v54 = v725;
      v68 = v640;
      goto LABEL_190;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v4);
    v74 = 0;
    v2 = (unint64_t)v263;
    v4 = *v263;
    v5 = v263[1];
    v71 = v263[2];
    result = v264;
    v73 = 1;
    v12 = v262;
    v10 = v261;
    v19 = v260;
    v17 = v259;
    v26 = v258;
    v24 = v548;
    v33 = v257;
    v40 = v845;
    v31 = v882;
    v38 = v753;
    v45 = v780;
    v47 = v812;
    v52 = v696;
    v54 = v725;
    v59 = v664;
    v68 = v640;
LABEL_68:
    v75 = v72 ? v74 : 0;
    v76 = v71 - v4;
    v916 = v75;
    if (v5 <= v76)
    {
      v611 = v73;
      v628 = v66;
      v643 = v68;
      v670 = v59;
      v705 = v52;
      v733 = v54;
      v792 = v45;
      v824 = v47;
      v860 = v40;
      v899 = v31;
      v480 = v38;
      v481 = v33;
      v482 = v24;
      v483 = v17;
      v484 = v19;
      v485 = v10;
      v486 = v12;
      v487 = result;
      v164 = 0;
      v488 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v489 = (uint64_t *)v2;
      if (!v5)
        goto LABEL_483;
      if (v488)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v488 + 16))(v488);
        v2 = (unint64_t)v489;
        v4 = *v489;
        v164 = v489[1];
        result = v487;
      }
      else
      {
LABEL_483:
        v4 = 0;
        result = v487;
      }
      v12 = v486;
      v10 = v485;
      v19 = v484;
      v17 = v483;
      v24 = v482;
      v33 = v481;
      v40 = v860;
      v31 = v899;
      v38 = v480;
      v45 = v792;
      v47 = v824;
      v52 = v705;
      v54 = v733;
      v59 = v670;
      v66 = v628;
      v68 = v643;
      v73 = v611;
      v75 = v916;
    }
    else
    {
      v77 = (unsigned __int8 *)(v4 + v76);
      v78 = v4 + v76 + 1;
      *(_QWORD *)(v2 + 16) = v78;
      if (v4)
      {
        v79 = *v77;
        if (v79 < 2)
        {
          v80 = 0;
          v81 = 1;
          goto LABEL_75;
        }
        goto LABEL_276;
      }
      v164 = v5;
    }
LABEL_190:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v165 = *(_QWORD *)(v2 + 24);
    if (v165)
    {
      v916 = v75;
      v610 = v73;
      v625 = v66;
      v639 = v68;
      v663 = v59;
      v695 = v52;
      v724 = v54;
      v752 = v38;
      v779 = v45;
      v811 = v47;
      v844 = v40;
      v881 = v31;
      v248 = v33;
      v249 = v24;
      v250 = v26;
      v251 = v17;
      v252 = v19;
      v253 = v10;
      v254 = v12;
      v255 = (uint64_t *)v2;
      v256 = result;
      if (v164)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v165 + 16))(v165, v4, v164);
        v79 = 0;
        v2 = (unint64_t)v255;
        v4 = *v255;
        v5 = v255[1];
        result = v256;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v79 = 0;
      }
      v12 = v254;
      v10 = v253;
      v19 = v252;
      v17 = v251;
      v26 = v250;
      v24 = v249;
      v33 = v248;
      v40 = v844;
      v31 = v881;
      v38 = v752;
      v45 = v779;
      v47 = v811;
      v52 = v695;
      v54 = v724;
      v59 = v663;
      v66 = v625;
      v68 = v639;
      v73 = v610;
LABEL_276:
      v75 = v916;
      goto LABEL_192;
    }
    v5 = 0;
    v4 = 0;
    v79 = 0;
LABEL_192:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v166 = *(_QWORD *)(v2 + 24);
    if (!v166)
    {
      v167 = 0;
      v4 = 0;
      v80 = 1;
      goto LABEL_194;
    }
    v916 = v75;
    v609 = v73;
    v624 = v66;
    v638 = v68;
    v662 = v59;
    v694 = v52;
    v723 = v54;
    v751 = v38;
    v778 = v45;
    v810 = v47;
    v843 = v40;
    v880 = v31;
    v239 = v33;
    v240 = v24;
    v241 = v26;
    v242 = v17;
    v243 = v19;
    v244 = v10;
    v245 = v12;
    v246 = (uint64_t *)v2;
    v247 = result;
    if (!v5)
    {
      v167 = 0;
      v166 = 0;
      v4 = 0;
      v80 = 1;
      v26 = v241;
      v24 = v240;
      v33 = v239;
      v47 = v810;
      v52 = v694;
      v54 = v723;
      v66 = v624;
      v68 = v638;
      v73 = v609;
      goto LABEL_194;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v166 + 16))(v166, v4);
    v81 = 0;
    v2 = (unint64_t)v246;
    v4 = *v246;
    v5 = v246[1];
    v80 = 1;
    v78 = v246[2];
    result = v247;
    v12 = v245;
    v10 = v244;
    v19 = v243;
    v17 = v242;
    v26 = v241;
    v24 = v240;
    v33 = v239;
    v40 = v843;
    v31 = v880;
    v38 = v751;
    v45 = v778;
    v47 = v810;
    v52 = v694;
    v54 = v723;
    v59 = v662;
    v66 = v624;
    v68 = v638;
    v73 = v609;
LABEL_75:
    if (!v79)
      v81 = 0;
    v912 = v81;
    v82 = v78 - v4;
    if (v5 <= v82)
    {
      v594 = v80;
      v612 = v73;
      v629 = v66;
      v644 = v68;
      v671 = v59;
      v706 = v52;
      v734 = v54;
      v793 = v45;
      v825 = v47;
      v861 = v40;
      v900 = v31;
      v490 = v38;
      v491 = v33;
      v492 = v24;
      v493 = v26;
      v494 = v17;
      v495 = v19;
      v496 = v10;
      v497 = v12;
      v498 = result;
      v166 = 0;
      v499 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v500 = (uint64_t *)v2;
      if (!v5)
        goto LABEL_484;
      if (v499)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v499 + 16))(v499);
        v2 = (unint64_t)v500;
        v4 = *v500;
        v166 = v500[1];
        result = v498;
      }
      else
      {
LABEL_484:
        v4 = 0;
        result = v498;
      }
      v12 = v497;
      v10 = v496;
      v19 = v495;
      v17 = v494;
      v26 = v493;
      v24 = v492;
      v33 = v491;
      v40 = v861;
      v31 = v900;
      v38 = v490;
      v45 = v793;
      v47 = v825;
      v52 = v706;
      v54 = v734;
      v59 = v671;
      v66 = v629;
      v68 = v644;
      v80 = v594;
      v73 = v612;
    }
    else
    {
      v83 = (unsigned __int8 *)(v4 + v82);
      v84 = v4 + v82 + 1;
      *(_QWORD *)(v2 + 16) = v84;
      if (v4)
      {
        v924 = v17;
        v85 = *v83;
        if (v85 < 2)
        {
          v86 = 0;
          v87 = 1;
          goto LABEL_81;
        }
        goto LABEL_270;
      }
      v166 = v5;
    }
    v167 = v912;
    v75 = v916;
LABEL_194:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(_QWORD *)(v2 + 24);
    if (v5)
    {
      v912 = v167;
      v916 = v75;
      v593 = v80;
      v608 = v73;
      v623 = v66;
      v637 = v68;
      v661 = v59;
      v693 = v52;
      v722 = v54;
      v777 = v45;
      v809 = v47;
      v842 = v40;
      v879 = v31;
      v750 = v38;
      v229 = v24;
      v230 = v26;
      v231 = v229;
      v232 = v17;
      v233 = v19;
      v234 = v10;
      v235 = v12;
      v236 = (uint64_t *)v2;
      v237 = result;
      if (v166)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v166);
        v85 = 0;
        v2 = (unint64_t)v236;
        v4 = *v236;
        v5 = v236[1];
        result = v237;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v85 = 0;
      }
      v12 = v235;
      v10 = v234;
      v19 = v233;
      v17 = v232;
      v238 = v231;
      v26 = v230;
      v24 = v238;
      v40 = v842;
      v31 = v879;
      v38 = v750;
      v45 = v777;
      v47 = v809;
      v52 = v693;
      v54 = v722;
      v59 = v661;
      v66 = v623;
      v68 = v637;
      v80 = v593;
      v73 = v608;
LABEL_270:
      v167 = v912;
      v75 = v916;
      goto LABEL_196;
    }
    v4 = 0;
    v85 = 0;
LABEL_196:
    v924 = v17;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v168 = *(_QWORD *)(v2 + 24);
    if (!v168)
    {
      v87 = 0;
      v4 = 0;
      v923 = 1;
      goto LABEL_198;
    }
    v912 = v167;
    v916 = v75;
    v592 = v80;
    v607 = v73;
    v622 = v66;
    v660 = v59;
    v692 = v52;
    v721 = v54;
    v776 = v45;
    v808 = v47;
    v841 = v40;
    v878 = v31;
    v749 = v38;
    v220 = v24;
    v221 = v26;
    v222 = v220;
    v223 = v19;
    v224 = v10;
    v225 = v12;
    v226 = (uint64_t *)v2;
    v227 = result;
    if (!v5)
    {
      v87 = 0;
      v168 = 0;
      v4 = 0;
      v923 = 1;
      v26 = v221;
      v24 = v220;
      v47 = v808;
      v52 = v692;
      v54 = v721;
      v66 = v622;
      v80 = v592;
      v73 = v607;
LABEL_420:
      v167 = v912;
      v75 = v916;
LABEL_198:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      if (v5)
      {
        v910 = v87;
        v915 = v167;
        v591 = v80;
        v919 = v75;
        v621 = v66;
        v636 = v68;
        v659 = v59;
        v691 = v52;
        v720 = v54;
        v775 = v45;
        v807 = v47;
        v840 = v40;
        v877 = v31;
        v748 = v38;
        v212 = v24;
        v213 = v33;
        v214 = v26;
        v215 = v19;
        v216 = v10;
        v217 = v12;
        v218 = (uint64_t *)v2;
        v219 = result;
        if (v168)
        {
          (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v168);
          v91 = 0;
          v2 = (unint64_t)v218;
          v4 = *v218;
          v5 = v218[1];
          result = v219;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v91 = 0;
        }
        v12 = v217;
        v10 = v216;
        v19 = v215;
        v26 = v214;
        v33 = v213;
        v24 = v212;
        v40 = v840;
        v31 = v877;
        v38 = v748;
        v45 = v775;
        v47 = v807;
        v52 = v691;
        v54 = v720;
        v59 = v659;
        v66 = v621;
        v68 = v636;
        v80 = v591;
        v167 = v915;
        v75 = v919;
        v87 = v910;
      }
      else
      {
        v4 = 0;
        v91 = 0;
      }
      goto LABEL_200;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v168 + 16))(v168, v4);
    v87 = 0;
    v2 = (unint64_t)v226;
    v4 = *v226;
    v5 = v226[1];
    v86 = 1;
    v84 = v226[2];
    result = v227;
    v12 = v225;
    v10 = v224;
    v19 = v223;
    v228 = v222;
    v26 = v221;
    v24 = v228;
    v40 = v841;
    v31 = v878;
    v38 = v749;
    v45 = v776;
    v47 = v808;
    v52 = v692;
    v54 = v721;
    v59 = v660;
    v66 = v622;
    v80 = v592;
    v73 = v607;
LABEL_81:
    v907 = v19;
    if (!v85)
      v87 = 0;
    v88 = v84 - v4;
    if (v5 <= v88)
    {
      v911 = v87;
      v923 = v86;
      v595 = v80;
      v630 = v66;
      v672 = v59;
      v707 = v52;
      v794 = v45;
      v826 = v47;
      v862 = v40;
      v901 = v31;
      v764 = v38;
      v501 = v24;
      v502 = v26;
      v503 = v10;
      v504 = v12;
      v505 = result;
      v168 = 0;
      v506 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v507 = (uint64_t *)v2;
      if (v5 && v506)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v506 + 16))(v506);
        v2 = (unint64_t)v507;
        v4 = *v507;
        v168 = v507[1];
        result = v505;
      }
      else
      {
        v4 = 0;
        result = v505;
      }
      v12 = v504;
      v10 = v503;
      v19 = v907;
      v26 = v502;
      v24 = v501;
      v40 = v862;
      v31 = v901;
      v38 = v764;
      v45 = v794;
      v47 = v826;
      v52 = v707;
      v59 = v672;
      v66 = v630;
      v80 = v595;
      v167 = v912;
      v75 = v916;
      v87 = v911;
      goto LABEL_198;
    }
    v89 = (unsigned __int8 *)(v4 + v88);
    v90 = v4 + v88 + 1;
    *(_QWORD *)(v2 + 16) = v90;
    if (!v4)
    {
      v923 = v86;
      v168 = v5;
      goto LABEL_420;
    }
    v906 = v12;
    v91 = *v89;
    if (v91 < 2)
    {
      v92 = v24;
      v93 = 0;
      v94 = 1;
      goto LABEL_87;
    }
    v923 = v86;
    v167 = v912;
    v75 = v916;
LABEL_200:
    v906 = v12;
    v907 = v19;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v169 = *(_QWORD *)(v2 + 24);
    if (!v169)
    {
      v94 = 0;
      v4 = 0;
      v93 = 1;
      goto LABEL_202;
    }
    v909 = v87;
    v912 = v167;
    v590 = v80;
    v916 = v75;
    v620 = v66;
    v658 = v59;
    v719 = v54;
    v774 = v45;
    v806 = v47;
    v839 = v40;
    v876 = v31;
    v747 = v38;
    v209 = v10;
    v210 = (uint64_t *)v2;
    v211 = result;
    if (!v5)
    {
      v94 = 0;
      v169 = 0;
      v4 = 0;
      v93 = 1;
      v47 = v806;
      v54 = v719;
      v66 = v620;
LABEL_202:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      v908 = v87;
      if (v5)
      {
        v563 = v93;
        v576 = v94;
        v914 = v167;
        v918 = v75;
        v589 = v80;
        v619 = v66;
        v657 = v59;
        v690 = v52;
        v718 = v54;
        v773 = v45;
        v838 = v40;
        v875 = v31;
        v746 = v38;
        v205 = v33;
        v206 = v10;
        v207 = (uint64_t *)v2;
        v208 = result;
        if (v169)
        {
          (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v169);
          v99 = 0;
          v2 = (unint64_t)v207;
          v4 = *v207;
          v5 = v207[1];
          result = v208;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v99 = 0;
        }
        v10 = v206;
        v33 = v205;
        v40 = v838;
        v31 = v875;
        v38 = v746;
        v45 = v773;
        v52 = v690;
        v54 = v718;
        v59 = v657;
        v66 = v619;
        v80 = v589;
        v167 = v914;
        v75 = v918;
        v93 = v563;
        v94 = v576;
      }
      else
      {
        v4 = 0;
        v99 = 0;
      }
      goto LABEL_204;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v169 + 16))(v169, v4);
    v94 = 0;
    v2 = (unint64_t)v210;
    v4 = *v210;
    v5 = v210[1];
    v93 = 1;
    v90 = v210[2];
    result = v211;
    v10 = v209;
    v92 = v24;
    v40 = v839;
    v31 = v876;
    v38 = v747;
    v45 = v774;
    v47 = v806;
    v54 = v719;
    v59 = v658;
    v66 = v620;
    v80 = v590;
    v86 = v923;
    v87 = v909;
LABEL_87:
    v95 = v10;
    if (!v91)
      v94 = 0;
    v96 = v90 - v4;
    v908 = v87;
    if (v5 <= v96)
    {
      v564 = v93;
      v577 = v94;
      v923 = v86;
      v596 = v80;
      v645 = v68;
      v673 = v59;
      v795 = v45;
      v863 = v40;
      v902 = v31;
      v765 = v38;
      v539 = v33;
      v550 = v92;
      v508 = result;
      v169 = 0;
      v509 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v510 = (uint64_t *)v2;
      if (v5 && v509)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v509 + 16))(v509);
        v2 = (unint64_t)v510;
        v4 = *v510;
        v169 = v510[1];
        result = v508;
      }
      else
      {
        v4 = 0;
        result = v508;
      }
      v10 = v95;
      v33 = v539;
      v24 = v550;
      v40 = v863;
      v31 = v902;
      v38 = v765;
      v45 = v795;
      v59 = v673;
      v68 = v645;
      v80 = v596;
      v167 = v912;
      v75 = v916;
      v87 = v908;
      v93 = v564;
      v94 = v577;
      goto LABEL_202;
    }
    v97 = (unsigned __int8 *)(v4 + v96);
    v98 = v4 + v96 + 1;
    *(_QWORD *)(v2 + 16) = v98;
    if (!v4)
    {
      v923 = v86;
      v169 = v5;
      v10 = v95;
      v167 = v912;
      v75 = v916;
      v24 = v92;
      goto LABEL_202;
    }
    v99 = *v97;
    if (v99 < 2)
    {
      v100 = v80;
      v922 = 0;
      v101 = 1;
      goto LABEL_93;
    }
    v923 = v86;
    v10 = v95;
    v167 = v912;
    v75 = v916;
    v24 = v92;
LABEL_204:
    v100 = v80;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v170 = *(_QWORD *)(v2 + 24);
    if (!v170)
    {
      v905 = 0;
      v4 = 0;
      v922 = 1;
      goto LABEL_206;
    }
    v562 = v93;
    v575 = v94;
    v912 = v167;
    v916 = v75;
    v588 = v80;
    v606 = v73;
    v618 = v66;
    v635 = v68;
    v656 = v59;
    v682 = v61;
    v689 = v52;
    v717 = v54;
    v772 = v45;
    v805 = v47;
    v837 = v40;
    v874 = v31;
    v745 = v38;
    v202 = v24;
    v95 = v10;
    v203 = (uint64_t *)v2;
    v204 = result;
    if (!v5)
    {
      v905 = 0;
      v170 = 0;
      v4 = 0;
      v922 = 1;
      v24 = v202;
      goto LABEL_385;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v4);
    v101 = 0;
    v2 = (unint64_t)v203;
    v4 = *v203;
    v5 = v203[1];
    v922 = 1;
    v98 = v203[2];
    result = v204;
    v92 = v202;
    v40 = v837;
    v31 = v874;
    v38 = v745;
    v45 = v772;
    v54 = v717;
    v59 = v656;
    v66 = v618;
    v100 = v588;
    v73 = v606;
    v86 = v923;
    v93 = v562;
    v94 = v575;
LABEL_93:
    if (v99)
      v102 = v101;
    else
      v102 = 0;
    v905 = v102;
    v103 = v98 - v4;
    if (v5 <= v103)
    {
      v562 = v93;
      v575 = v94;
      v923 = v86;
      v588 = v100;
      v606 = v73;
      v618 = v66;
      v635 = v68;
      v656 = v59;
      v682 = v61;
      v689 = v52;
      v717 = v54;
      v772 = v45;
      v805 = v47;
      v837 = v40;
      v874 = v31;
      v745 = v38;
      v540 = v33;
      v551 = v92;
      v511 = result;
      v170 = 0;
      v512 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v513 = (uint64_t *)v2;
      if (v5 && v512)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v512 + 16))(v512);
        v2 = (unint64_t)v513;
        v4 = *v513;
        v170 = v513[1];
        result = v511;
      }
      else
      {
        v4 = 0;
        result = v511;
      }
      v10 = v95;
      v33 = v540;
      v24 = v551;
LABEL_385:
      v40 = v837;
      v31 = v874;
      v38 = v745;
      v45 = v772;
      v47 = v805;
      v52 = v689;
      v54 = v717;
      v59 = v656;
      v61 = v682;
      v66 = v618;
      v68 = v635;
      v100 = v588;
      v73 = v606;
      v167 = v912;
      v75 = v916;
      v93 = v562;
      v94 = v575;
LABEL_206:
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      if (v5)
      {
        v561 = v93;
        v574 = v94;
        v913 = v167;
        v917 = v75;
        v587 = v100;
        v617 = v66;
        v655 = v59;
        v688 = v52;
        v716 = v54;
        v771 = v45;
        v836 = v40;
        v873 = v31;
        v744 = v38;
        v198 = v33;
        v199 = v10;
        v200 = (uint64_t *)v2;
        v201 = result;
        if (v170)
        {
          (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v170);
          v106 = 0;
          v2 = (unint64_t)v200;
          v4 = *v200;
          v5 = v200[1];
          result = v201;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v106 = 0;
        }
        v10 = v199;
        v33 = v198;
        v40 = v836;
        v31 = v873;
        v38 = v744;
        v45 = v771;
        v52 = v688;
        v54 = v716;
        v59 = v655;
        v66 = v617;
        v100 = v587;
        v167 = v913;
        v75 = v917;
        v93 = v561;
        v94 = v574;
      }
      else
      {
        v4 = 0;
        v106 = 0;
      }
      goto LABEL_208;
    }
    v104 = (unsigned __int8 *)(v4 + v103);
    v105 = v4 + v103 + 1;
    *(_QWORD *)(v2 + 16) = v105;
    if (!v4)
    {
      v923 = v86;
      v170 = v5;
      v10 = v95;
      v167 = v912;
      v75 = v916;
      v24 = v92;
      goto LABEL_206;
    }
    v106 = *v104;
    if (v106 < 2)
    {
      v921 = 0;
      v107 = 1;
      goto LABEL_100;
    }
    v923 = v86;
    v10 = v95;
    v167 = v912;
    v75 = v916;
    v24 = v92;
LABEL_208:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v171 = *(_QWORD *)(v2 + 24);
    v912 = v167;
    if (!v171)
    {
      v904 = 0;
      v4 = 0;
      v921 = 1;
      goto LABEL_210;
    }
    v560 = v93;
    v573 = v94;
    v586 = v100;
    v605 = v73;
    v916 = v75;
    v616 = v66;
    v634 = v68;
    v654 = v59;
    v681 = v61;
    v687 = v52;
    v715 = v54;
    v770 = v45;
    v804 = v47;
    v835 = v40;
    v872 = v31;
    v743 = v38;
    v547 = v24;
    v95 = v10;
    v196 = (uint64_t *)v2;
    v197 = result;
    if (!v5)
    {
      v904 = 0;
      v171 = 0;
      v4 = 0;
      v921 = 1;
      goto LABEL_443;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v171 + 16))(v171, v4);
    v107 = 0;
    v2 = (unint64_t)v196;
    v4 = *v196;
    v5 = v196[1];
    v921 = 1;
    v105 = v196[2];
    result = v197;
    v92 = v547;
    v93 = v560;
    v40 = v835;
    v31 = v872;
    v38 = v743;
    v45 = v770;
    v47 = v804;
    v52 = v687;
    v59 = v654;
    v100 = v586;
    v86 = v923;
    v94 = v573;
LABEL_100:
    if (v106)
      v108 = v107;
    else
      v108 = 0;
    v109 = v105 - v4;
    v923 = v86;
    v904 = v108;
    if (v5 <= v109)
    {
      v560 = v93;
      v573 = v94;
      v586 = v100;
      v605 = v73;
      v616 = v66;
      v634 = v68;
      v654 = v59;
      v681 = v61;
      v687 = v52;
      v715 = v54;
      v770 = v45;
      v804 = v47;
      v835 = v40;
      v872 = v31;
      v743 = v38;
      v547 = v92;
      v197 = result;
      v171 = 0;
      v514 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v196 = (uint64_t *)v2;
      if (v5 && v514)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v514 + 16))(v514);
        v2 = (unint64_t)v196;
        v4 = *v196;
        v171 = v196[1];
        result = v197;
      }
      else
      {
        v4 = 0;
LABEL_443:
        result = v197;
        v2 = (unint64_t)v196;
      }
      v10 = v95;
      v24 = v547;
      v93 = v560;
      v40 = v835;
      v31 = v872;
      v38 = v743;
      v45 = v770;
      v47 = v804;
      v52 = v687;
      v54 = v715;
      v59 = v654;
      v61 = v681;
      v66 = v616;
      v68 = v634;
      v100 = v586;
      v73 = v605;
      v75 = v916;
      v94 = v573;
LABEL_210:
      v110 = v73;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      v916 = v75;
      if (v5)
      {
        v559 = v93;
        v572 = v94;
        v585 = v100;
        v604 = v73;
        v653 = v59;
        v686 = v52;
        v769 = v45;
        v803 = v47;
        v834 = v40;
        v871 = v31;
        v742 = v38;
        v546 = v24;
        v193 = v10;
        v194 = (uint64_t *)v2;
        v195 = result;
        if (v171)
        {
          (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v171);
          v113 = 0;
          v2 = (unint64_t)v194;
          v4 = *v194;
          v5 = v194[1];
          result = v195;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v113 = 0;
        }
        v10 = v193;
        v24 = v546;
        v40 = v834;
        v31 = v871;
        v38 = v742;
        v45 = v769;
        v47 = v803;
        v52 = v686;
        v59 = v653;
        v100 = v585;
        v110 = v604;
        v93 = v559;
        v94 = v572;
      }
      else
      {
        v4 = 0;
        v113 = 0;
      }
      goto LABEL_212;
    }
    v110 = v73;
    v111 = (unsigned __int8 *)(v4 + v109);
    v112 = v4 + v109 + 1;
    *(_QWORD *)(v2 + 16) = v112;
    if (!v4)
    {
      v171 = v5;
      v10 = v95;
      v75 = v916;
      v24 = v92;
      goto LABEL_210;
    }
    v113 = *v111;
    if (v113 < 2)
    {
      v114 = v61;
      v115 = v59;
      v920 = 0;
      v116 = 1;
      goto LABEL_107;
    }
    v10 = v95;
    v24 = v92;
LABEL_212:
    v114 = v61;
    v115 = v59;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v172 = *(_QWORD *)(v2 + 24);
    if (!v172)
    {
      v117 = v54;
      v118 = v45;
      v903 = 0;
      v4 = 0;
      v920 = 1;
      goto LABEL_214;
    }
    v558 = v93;
    v571 = v94;
    v584 = v100;
    v603 = v110;
    v615 = v66;
    v633 = v68;
    v652 = v59;
    v680 = v61;
    v685 = v52;
    v714 = v54;
    v768 = v45;
    v802 = v47;
    v833 = v40;
    v870 = v31;
    v741 = v38;
    v538 = v33;
    v545 = v24;
    v528 = v10;
    v532 = v26;
    v191 = (uint64_t *)v2;
    v192 = result;
    if (!v5)
    {
      v903 = 0;
      v172 = 0;
      v4 = 0;
      v920 = 1;
      v26 = v532;
      goto LABEL_394;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v172 + 16))(v172, v4);
    v116 = 0;
    v2 = (unint64_t)v191;
    v4 = *v191;
    v5 = v191[1];
    v920 = 1;
    v112 = v191[2];
    result = v192;
    v95 = v528;
    v26 = v532;
    v92 = v545;
    v40 = v833;
    v31 = v870;
    v38 = v741;
    v45 = v768;
    v47 = v802;
    v115 = v652;
    v114 = v61;
    v100 = v584;
    v110 = v603;
    v93 = v558;
    v94 = v571;
LABEL_107:
    v117 = v54;
    v118 = v45;
    if (!v113)
      v116 = 0;
    v903 = v116;
    v119 = v112 - v4;
    if (v5 <= v119)
    {
      v558 = v93;
      v571 = v94;
      v584 = v100;
      v603 = v110;
      v615 = v66;
      v633 = v68;
      v652 = v115;
      v680 = v114;
      v685 = v52;
      v714 = v54;
      v768 = v45;
      v802 = v47;
      v833 = v40;
      v870 = v31;
      v741 = v38;
      v538 = v33;
      v545 = v92;
      v515 = result;
      v172 = 0;
      v516 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v517 = (uint64_t *)v2;
      if (v5 && v516)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v516 + 16))(v516);
        v2 = (unint64_t)v517;
        v4 = *v517;
        v172 = v517[1];
        result = v515;
      }
      else
      {
        v4 = 0;
        result = v515;
      }
      v10 = v95;
LABEL_394:
      v33 = v538;
      v24 = v545;
      v40 = v833;
      v31 = v870;
      v38 = v741;
      v118 = v768;
      v47 = v802;
      v52 = v685;
      v117 = v714;
      v115 = v652;
      v114 = v680;
      v66 = v615;
      v68 = v633;
      v100 = v584;
      v110 = v603;
      v93 = v558;
      v94 = v571;
LABEL_214:
      v120 = v47;
      v121 = v40;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      if (v5)
      {
        v557 = v93;
        v570 = v94;
        v583 = v100;
        v602 = v110;
        v651 = v115;
        v679 = v114;
        v713 = v117;
        v801 = v47;
        v832 = v40;
        v869 = v31;
        v740 = v38;
        v527 = v10;
        v531 = v26;
        v189 = (uint64_t *)v2;
        v190 = result;
        if (v172)
        {
          (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v172);
          v125 = 0;
          v2 = (unint64_t)v189;
          v4 = *v189;
          v5 = v189[1];
          result = v190;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v125 = 0;
        }
        v10 = v527;
        v26 = v531;
        v24 = v24;
        v121 = v832;
        v31 = v869;
        v124 = v740;
        v120 = v801;
        v117 = v713;
        v115 = v651;
        v114 = v679;
        v100 = v583;
        v110 = v602;
        v93 = v557;
        v94 = v570;
      }
      else
      {
        v124 = v38;
        v4 = 0;
        v125 = 0;
      }
      goto LABEL_216;
    }
    v120 = v47;
    v121 = v40;
    v122 = (unsigned __int8 *)(v4 + v119);
    v123 = v4 + v119 + 1;
    *(_QWORD *)(v2 + 16) = v123;
    if (!v4)
    {
      v172 = v5;
      v10 = v95;
      v24 = v92;
      goto LABEL_214;
    }
    v124 = v38;
    v125 = *v122;
    if (v125 < 2)
    {
      v126 = v31;
      v127 = 0;
      v128 = 1;
      goto LABEL_113;
    }
    v10 = v95;
    v24 = v92;
LABEL_216:
    v126 = v31;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v173 = *(_QWORD *)(v2 + 24);
    if (!v173)
    {
      v129 = v33;
      v130 = 0;
      v4 = 0;
      v127 = 1;
      goto LABEL_218;
    }
    v556 = v93;
    v569 = v94;
    v582 = v100;
    v601 = v110;
    v614 = v66;
    v632 = v68;
    v650 = v115;
    v678 = v114;
    v684 = v52;
    v712 = v117;
    v767 = v118;
    v800 = v120;
    v831 = v121;
    v868 = v31;
    v739 = v124;
    v537 = v33;
    v544 = v24;
    v526 = v10;
    v530 = v26;
    v187 = (uint64_t *)v2;
    v188 = result;
    if (!v5)
    {
      v130 = 0;
      v173 = 0;
      v4 = 0;
      v127 = 1;
      goto LABEL_438;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, v4);
    v128 = 0;
    v2 = (unint64_t)v187;
    v4 = *v187;
    v5 = v187[1];
    v127 = 1;
    v123 = v187[2];
    result = v188;
    v95 = v526;
    v26 = v530;
    v33 = v537;
    v92 = v544;
    v121 = v831;
    v126 = v868;
    v124 = v739;
    v117 = v712;
    v115 = v650;
    v114 = v678;
    v100 = v582;
    v110 = v601;
    v93 = v556;
    v94 = v569;
LABEL_113:
    v129 = v33;
    if (v125)
      v130 = v128;
    else
      v130 = 0;
    v131 = v123 - v4;
    if (v5 <= v131)
    {
      v556 = v93;
      v569 = v94;
      v582 = v100;
      v601 = v110;
      v614 = v66;
      v632 = v68;
      v650 = v115;
      v678 = v114;
      v684 = v52;
      v712 = v117;
      v767 = v118;
      v800 = v120;
      v831 = v121;
      v868 = v126;
      v739 = v124;
      v537 = v33;
      v544 = v92;
      v526 = v95;
      v530 = v26;
      v188 = result;
      v173 = 0;
      v518 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v187 = (uint64_t *)v2;
      if (v5 && v518)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v518 + 16))(v518);
        v2 = (unint64_t)v187;
        v4 = *v187;
        v173 = v187[1];
        result = v188;
      }
      else
      {
        v4 = 0;
LABEL_438:
        result = v188;
        v2 = (unint64_t)v187;
      }
      v10 = v526;
      v26 = v530;
      v129 = v537;
      v24 = v544;
      v121 = v831;
      v126 = v868;
      v124 = v739;
      v118 = v767;
      v120 = v800;
      v52 = v684;
      v117 = v712;
      v115 = v650;
      v114 = v678;
      v66 = v614;
      v68 = v632;
      v100 = v582;
      v110 = v601;
      v93 = v556;
      v94 = v569;
LABEL_218:
      LODWORD(v92) = v24;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      if (v5)
      {
        v555 = v93;
        v568 = v94;
        v581 = v100;
        v600 = v110;
        v649 = v115;
        v677 = v114;
        v711 = v117;
        v799 = v120;
        v830 = v121;
        v867 = v126;
        v738 = v124;
        v536 = v129;
        v525 = v10;
        v185 = (uint64_t *)v2;
        v186 = result;
        if (v173)
        {
          (*(void (**)(unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v173, v24);
          v134 = 0;
          v2 = (unint64_t)v185;
          v4 = *v185;
          v5 = v185[1];
          result = v186;
        }
        else
        {
          v5 = 0;
          v4 = 0;
          v134 = 0;
        }
        v10 = v525;
        v129 = v536;
        LODWORD(v92) = v24;
        v121 = v830;
        v126 = v867;
        v124 = v738;
        v120 = v799;
        v117 = v711;
        v115 = v649;
        v114 = v677;
        v100 = v581;
        v110 = v600;
        v93 = v555;
        v94 = v568;
      }
      else
      {
        v4 = 0;
        v134 = 0;
      }
      goto LABEL_220;
    }
    v132 = (unsigned __int8 *)(v4 + v131);
    v133 = v4 + v131 + 1;
    *(_QWORD *)(v2 + 16) = v133;
    if (!v4)
    {
      v173 = v5;
      v10 = v95;
      v24 = v92;
      goto LABEL_218;
    }
    v134 = *v132;
    if (v134 < 2)
    {
      v135 = 0;
      v136 = 1;
      goto LABEL_120;
    }
    v10 = v95;
LABEL_220:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v174 = *(_QWORD *)(v2 + 24);
    if (!v174)
    {
      v137 = 0;
      v175 = 0;
      v4 = 0;
      v135 = 1;
      goto LABEL_222;
    }
    v554 = v93;
    v567 = v94;
    v580 = v100;
    v599 = v110;
    v613 = v66;
    v631 = v68;
    v648 = v115;
    v676 = v114;
    v683 = v52;
    v710 = v117;
    v766 = v118;
    v798 = v120;
    v829 = v121;
    v866 = v126;
    v737 = v124;
    v535 = v129;
    v543 = v92;
    v524 = v10;
    v529 = v26;
    v183 = (uint64_t *)v2;
    v184 = result;
    if (!v5)
    {
      v137 = 0;
      v4 = 0;
      v135 = 1;
      v175 = 0;
LABEL_402:
      v10 = v524;
      v26 = v529;
      v129 = v535;
      LODWORD(v92) = v543;
      v121 = v829;
      v126 = v866;
      v124 = v737;
      v118 = v766;
      v120 = v798;
      v52 = v683;
      v117 = v710;
      v115 = v648;
      v114 = v676;
      v66 = v613;
      v68 = v631;
      v100 = v580;
      v110 = v599;
      v93 = v554;
      v94 = v567;
      goto LABEL_222;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v174 + 16))(v174, v4);
    v136 = 0;
    v2 = (unint64_t)v183;
    v4 = *v183;
    v5 = v183[1];
    v135 = 1;
    v133 = v183[2];
    result = v184;
    v95 = v524;
    v129 = v535;
    LODWORD(v92) = v543;
    v121 = v829;
    v126 = v866;
    v124 = v737;
    v120 = v798;
    v117 = v710;
    v115 = v648;
    v114 = v676;
    v100 = v580;
    v110 = v599;
    v93 = v554;
    v94 = v567;
LABEL_120:
    if (v134)
      v137 = v136;
    else
      v137 = 0;
    v138 = v133 - v4;
    if (v5 <= v138)
    {
      v554 = v93;
      v567 = v94;
      v580 = v100;
      v599 = v110;
      v613 = v66;
      v631 = v68;
      v648 = v115;
      v676 = v114;
      v683 = v52;
      v710 = v117;
      v766 = v118;
      v798 = v120;
      v829 = v121;
      v866 = v126;
      v737 = v124;
      v535 = v129;
      v543 = v92;
      v524 = v95;
      v529 = v26;
      v519 = result;
      v520 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v521 = (uint64_t *)v2;
      if (v5 && v520)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v520 + 16))(v520);
        v2 = (unint64_t)v521;
        v4 = *v521;
        v175 = v521[1];
        result = v519;
      }
      else
      {
        v4 = 0;
        result = v519;
        v175 = 0;
      }
      goto LABEL_402;
    }
    v139 = (unsigned __int8 *)(v4 + v138);
    *(_QWORD *)(v2 + 16) = v139 + 1;
    if (!v4)
      break;
    v140 = *v139;
    v10 = v95;
    if (v140 > 1)
      goto LABEL_224;
    v2 = v140 != 0;
    if ((v95 & 1) != 0)
      goto LABEL_405;
    v141 = 0;
LABEL_128:
    v4 = v924;
    if (!v924
      && !(_DWORD)v92
      && !v126
      && !v124
      && !v118
      && !v52
      && !v115
      && !v66
      && !v110
      && !v100
      && !v923
      && !v93
      && !v922
      && !v921
      && !v920
      && !v127
      && !v135
      && !v141)
    {
      *result = v906;
      result[1] = v907;
      result[2] = v26;
      result[3] = v129;
      result[4] = v121;
      result[5] = v120;
      result[6] = v117;
      result[7] = v114;
      result[8] = v68;
      result[9] = v916;
      result[10] = v912;
      result[11] = v908;
      result[12] = v94;
      result[13] = v905;
      result[14] = v904;
      result[15] = v903;
      result[16] = v130;
      result[17] = v137;
      result[18] = v2;
      result[19] = 1;
      return result;
    }
LABEL_405:
    __break(1u);
LABEL_406:
    v142 = v5;
    v143 = v4;
LABEL_149:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v145 = *(_QWORD *)(v2 + 24);
    if (v145)
    {
      v394 = (uint64_t *)v2;
      v395 = result;
      if (v142)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v145 + 16))(v145, v143, v142);
        v9 = 0;
        v2 = (unint64_t)v394;
        v4 = *v394;
        v5 = v394[1];
        result = v395;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v9 = 0;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
      v9 = 0;
    }
  }
  v10 = v95;
  v175 = v5;
LABEL_222:
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v176 = *(_QWORD *)(v2 + 24);
  if (v176)
  {
    v553 = v93;
    v566 = v94;
    v579 = v100;
    v598 = v110;
    v647 = v115;
    v675 = v114;
    v709 = v117;
    v797 = v120;
    v828 = v121;
    v865 = v126;
    v736 = v124;
    v534 = v129;
    v542 = v92;
    v523 = v10;
    v180 = v175;
    v181 = (uint64_t *)v2;
    v182 = result;
    v5 = v180;
    if (v180)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v176 + 16))(v176, v4, v180);
      v2 = (unint64_t)v181;
      v4 = *v181;
      v5 = v181[1];
      result = v182;
    }
    else
    {
      v4 = 0;
    }
    v10 = v523;
    v129 = v534;
    LODWORD(v92) = v542;
    v121 = v828;
    v126 = v865;
    v124 = v736;
    v120 = v797;
    v117 = v709;
    v115 = v647;
    v114 = v675;
    v100 = v579;
    v110 = v598;
    v93 = v553;
    v94 = v566;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
LABEL_224:
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v177 = *(_QWORD *)(v2 + 24);
  if (!v177)
  {
    v5 = 0;
    goto LABEL_226;
  }
  v552 = v93;
  v565 = v94;
  v578 = v100;
  v597 = v110;
  v646 = v115;
  v674 = v114;
  v708 = v117;
  v796 = v120;
  v827 = v121;
  v864 = v126;
  v735 = v124;
  v533 = v129;
  v541 = v92;
  v522 = v10;
  v178 = (uint64_t *)v2;
  v179 = result;
  if (!v5)
    goto LABEL_226;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v177 + 16))(v177, v4);
  v4 = *v178;
  if (*v178)
  {
    result = v179;
    v129 = v533;
    LODWORD(v92) = v541;
    v93 = v552;
    v121 = v827;
    v126 = v864;
    v124 = v735;
    v120 = v796;
    v117 = v708;
    v115 = v646;
    v114 = v674;
    v100 = v578;
    v110 = v597;
    v94 = v565;
    v2 = v522;
    if (v522)
      goto LABEL_405;
    v141 = 1;
    goto LABEL_128;
  }
  v2 = (unint64_t)v178;
  v5 = v178[1];
  v177 = v178[3];
  result = v179;
LABEL_226:
  *result = 0;
  result[19] = 0;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (v177)
  {
    if (v5)
      return (char *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v177 + 16))(v177, 0);
  }
  return result;
}

