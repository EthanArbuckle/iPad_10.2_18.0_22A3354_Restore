void sub_19774B2F4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::setDeniedPermissions(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int i;
  int v22;
  WTF *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  _QWORD *result;
  WTF::StringImpl **v28;
  _BYTE v29[24];
  _QWORD *v30;

  v30 = 0;
  v4 = (WTF::StringImpl ***)(a1 + 152);
  v5 = *(WTF::StringImpl ***)(a1 + 152);
  v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  v8 = v6;
  v10 = v9;
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 != v6)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v30, v8, v7, (uint64_t)v29);
      while (1)
      {
        v8 += 2;
        if (v8 == v10)
          break;
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_9;
      }
      v8 = v10;
LABEL_9:
      ;
    }
    while (v8 != v5);
  }
  *(_QWORD *)(a1 + 168) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired(a1, a2, (double *)(a1 + 168), 0);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(v4, (_QWORD **)a2);
  v28 = 0;
  v11 = *v4;
  v12 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
  v15 = v12;
  v16 = (WTF::StringImpl **)v13;
  if (v11)
    v11 += 2 * *((unsigned int *)v11 - 1);
  if (v11 == v12)
  {
    v26 = 0;
  }
  else
  {
    do
    {
      v17 = v30;
      if (!v30)
      {
LABEL_14:
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v28, v15, v14, (uint64_t)v29);
        goto LABEL_15;
      }
      v18 = *((_DWORD *)v30 - 2);
      v19 = *((_DWORD *)*v15 + 4);
      if (v19 >= 0x100)
        v20 = v19 >> 8;
      else
        v20 = WTF::StringImpl::hashSlowCase(*v15);
      for (i = 0; ; v20 = i + v22)
      {
        v22 = v20 & v18;
        v23 = (WTF *)v17[v20 & v18];
        if (v23 != (WTF *)-1)
        {
          if (!v23)
            goto LABEL_14;
          if ((WTF::equal(v23, *v15, v14) & 1) != 0)
            break;
        }
        ++i;
      }
      v24 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v30, v15, v14);
      v13 = (WTF::StringImpl *)v24;
      if (v30)
      {
        v25 = (WTF::StringImpl **)&v30[*((unsigned int *)v30 - 1)];
        if (v25 == v24)
          goto LABEL_15;
      }
      else
      {
        if (!v24)
          goto LABEL_15;
        v25 = 0;
      }
      if (v25 != v24)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)&v30, v24);
LABEL_15:
      while (1)
      {
        v15 += 2;
        if (v15 == v16)
          break;
        if ((unint64_t)*v15 + 1 > 1)
          goto LABEL_19;
      }
      v15 = v16;
LABEL_19:
      ;
    }
    while (v15 != v11);
    v26 = v28;
    if (v28 && *((_DWORD *)v28 - 3))
      goto LABEL_41;
  }
  if (v30 && *((_DWORD *)v30 - 3))
  {
LABEL_41:
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 144), (uint64_t *)&v28, (double *)(a1 + 160), CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"));
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextDeniedPermissionsWereRemoved"), &v30);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionsWereDenied"), &v28);
    v26 = v28;
  }
  if (v26)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v13);
  result = v30;
  if (v30)
    return (_QWORD *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v30, v13);
  return result;
}

void sub_19774B6F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionContext::removeExpired(WebKit::WebExtensionContext *a1, uint64_t *a2, double *a3, void *a4)
{
  WTF::WallTime *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v25;
  uint64_t *v27;
  _BYTE v28[24];

  v7 = a4;
  WTF::WallTime::now(v7);
  v10 = v9;
  if (*a3 <= v9)
  {
    *a3 = INFINITY;
    v27 = 0;
    v11 = *a2;
    if (*a2)
    {
      v12 = *(_DWORD *)(v11 - 4);
      if (v12)
      {
        v13 = 0;
        v14 = v12 - 1;
        do
        {
          v15 = v14;
          v16 = (uint64_t *)(v11 + 16 * v14);
          if ((unint64_t)(*v16 + 1) >= 2)
          {
            v17 = *(double *)(v11 + 16 * v14 + 8);
            if (v17 <= v10)
            {
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v27, (uint64_t *)(v11 + 16 * v14), (uint64_t)v28);
              v18 = *v16;
              *v16 = 0;
              if (v18)
                CFRelease(*(CFTypeRef *)(v18 + 8));
              *v16 = -1;
              ++v13;
            }
            else if (v17 < *a3)
            {
              *a3 = v17;
            }
          }
          --v14;
        }
        while (v15);
        v19 = *a2;
        if (v13)
        {
          *(_DWORD *)(v19 - 16) += v13;
          v20 = *a2;
          if (*a2)
            v21 = *(_DWORD *)(v20 - 12);
          else
            v21 = 0;
          *(_DWORD *)(v20 - 12) = v21 - v13;
          v19 = *a2;
        }
        if (v19)
        {
          v22 = *(_DWORD *)(v19 - 4);
          v23 = 6 * *(_DWORD *)(v19 - 12);
          if (v22 >= 9 && v23 < v22)
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::shrinkToBestSize(a2);
        }
      }
      v25 = v27;
      if (v27)
      {
        if (!v7
          || !*((_DWORD *)v27 - 3)
          || (WebKit::WebExtensionContext::clearCachedPermissionStates(a1, (WTF::StringImpl *)v8),
              WebKit::WebExtensionContext::removeInjectedContent((uint64_t)a1),
              WebKit::WebExtensionContext::addInjectedContent(a1),
              WebKit::WebExtensionContext::postAsyncNotification((uint64_t)a1, v7, &v27),
              (v25 = v27) != 0))
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v25, v8);
        }
      }
    }
  }

  return a2;
}

void sub_19774B8F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  void *v9;

  if (a9)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a9, a2);

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::setGrantedPermissionMatchPatterns(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *matched;
  uint64_t *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  _QWORD *result;
  uint64_t *v23;
  _BYTE v24[24];
  _QWORD *v25;

  v25 = 0;
  v4 = (uint64_t **)(a1 + 176);
  v5 = *(uint64_t **)(a1 + 176);
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  v7 = v6;
  v9 = v8;
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 != v6)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v25, v7, (uint64_t)v24);
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_9;
      }
      v7 = v9;
LABEL_9:
      ;
    }
    while (v7 != v5);
  }
  *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired((WebKit::WebExtensionContext *)a1, a2, (double *)(a1 + 160), 0);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(v4, (_QWORD **)a2);
  v23 = 0;
  v10 = *v4;
  v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
  v13 = v11;
  v14 = v12;
  if (v10)
    v15 = &v10[2 * *((unsigned int *)v10 - 1)];
  else
    v15 = 0;
  if (v15 == v11)
  {
    v20 = 0;
  }
  else
  {
    do
    {
      v16 = v25;
      v17 = *v13;
      if (!WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>((uint64_t)v25, *v13))
      {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v23, v13, (uint64_t)v24);
        goto LABEL_23;
      }
      matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>((uint64_t)v16, v17);
      v12 = matched;
      if (v16)
      {
        v19 = &v16[*((unsigned int *)v16 - 1)];
        if (v19 == matched)
          goto LABEL_23;
      }
      else
      {
        if (!matched)
          goto LABEL_23;
        v19 = 0;
      }
      if (v19 != matched)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::remove((uint64_t *)&v25, matched);
LABEL_23:
      while (1)
      {
        v13 += 2;
        if (v13 == v14)
          break;
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_27;
      }
      v13 = v14;
LABEL_27:
      ;
    }
    while (v13 != v15);
    v20 = v23;
    if (v23 && *((_DWORD *)v23 - 3))
      goto LABEL_34;
  }
  if (v25 && *((_DWORD *)v25 - 3))
  {
LABEL_34:
    WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(a1, (uint64_t *)&v23, 1);
    WebKit::WebExtensionContext::clearCachedPermissionStates((WebKit::WebExtensionContext *)a1, v21);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"), &v25);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionMatchPatternsWereGranted"), &v23);
    v20 = v23;
  }
  if (v20)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v20, v12);
  result = v25;
  if (v25)
    return (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v25, v12);
  return result;
}

void sub_19774BB44(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a14, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;

  v4 = WebKit::WebExtensionContext::removePermissionMatchPatterns((WebKit::WebExtensionContext *)a1, (uint64_t *)(a1 + 184), a2, a3, (double *)(a1 + 200), CFSTR("_WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved"));
  if ((_DWORD)v4)
  {
    WebKit::WebExtensionContext::removeInjectedContent(a1);
    WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)a1);
  }
  return v4;
}

uint64_t WebKit::WebExtensionContext::clearCachedPermissionStates(WebKit::WebExtensionContext *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t result;
  void *v5;
  uint64_t v6;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 29) = 0;
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(v3, a2);
  }
  result = WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::deleteAllNodes((uint64_t)this + 208, a2);
  v6 = *((_QWORD *)this + 26);
  if (v6)
  {
    *((_QWORD *)this + 26) = 0;
    result = WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  return result;
}

void sub_19774BF90(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, WTF::StringImpl **a13, uint64_t a14, CFTypeRef cf, uint64_t a16)
{
  void *v16;

  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::setDeniedPermissionMatchPatterns(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *matched;
  uint64_t *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  _QWORD *result;
  uint64_t *v23;
  _BYTE v24[24];
  _QWORD *v25;

  v25 = 0;
  v4 = (uint64_t **)(a1 + 184);
  v5 = *(uint64_t **)(a1 + 184);
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  v7 = v6;
  v9 = v8;
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 != v6)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v25, v7, (uint64_t)v24);
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_9;
      }
      v7 = v9;
LABEL_9:
      ;
    }
    while (v7 != v5);
  }
  *(_QWORD *)(a1 + 200) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired((WebKit::WebExtensionContext *)a1, a2, (double *)(a1 + 200), 0);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(v4, (_QWORD **)a2);
  v23 = 0;
  v10 = *v4;
  v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
  v13 = v11;
  v14 = v12;
  if (v10)
    v15 = &v10[2 * *((unsigned int *)v10 - 1)];
  else
    v15 = 0;
  if (v15 == v11)
  {
    v20 = 0;
  }
  else
  {
    do
    {
      v16 = v25;
      v17 = *v13;
      if (!WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>((uint64_t)v25, *v13))
      {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v23, v13, (uint64_t)v24);
        goto LABEL_23;
      }
      matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>((uint64_t)v16, v17);
      v12 = matched;
      if (v16)
      {
        v19 = &v16[*((unsigned int *)v16 - 1)];
        if (v19 == matched)
          goto LABEL_23;
      }
      else
      {
        if (!matched)
          goto LABEL_23;
        v19 = 0;
      }
      if (v19 != matched)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::remove((uint64_t *)&v25, matched);
LABEL_23:
      while (1)
      {
        v13 += 2;
        if (v13 == v14)
          break;
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_27;
      }
      v13 = v14;
LABEL_27:
      ;
    }
    while (v13 != v15);
    v20 = v23;
    if (v23 && *((_DWORD *)v23 - 3))
      goto LABEL_34;
  }
  if (v25 && *((_DWORD *)v25 - 3))
  {
LABEL_34:
    WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(a1, (uint64_t *)&v23, 1);
    WebKit::WebExtensionContext::clearCachedPermissionStates((WebKit::WebExtensionContext *)a1, v21);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved"), &v25);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionMatchPatternsWereDenied"), &v23);
    v20 = v23;
  }
  if (v20)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v20, v12);
  result = v25;
  if (v25)
    return (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v25, v12);
  return result;
}

void sub_19774C2D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a14, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v19;
  int v20;

  WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)&v19);
  if (v20)
  {
    v7 = v19;
    v8 = &v19[v20];
    do
    {
      v9 = *v7;
      *v9 = **v7 + 1;
      v10 = *((_QWORD *)v9 + 5);
      if (v10)
      {
        CFRetain(*(CFTypeRef *)(v10 + 8));
        v11 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)a2);
        v12 = v11;
        v14 = v13;
        if (*a2)
          v15 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
        else
          v15 = 0;
        if ((unsigned __int8 **)v15 != v11)
        {
          do
          {
            if (WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v10, *v12, 0))
            {
              v16 = *((_QWORD *)v9 + 5);
              *((_QWORD *)v9 + 5) = 0;
              if (v16)
                CFRelease(*(CFTypeRef *)(v16 + 8));
            }
            while (++v12 != v14)
            {
              if ((unint64_t)(*v12 + 1) > 1)
                goto LABEL_15;
            }
            v12 = v14;
LABEL_15:
            ;
          }
          while (v12 != (unsigned __int8 **)v15);
        }
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
      ++v7;
    }
    while (v7 != v8);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  v17 = WebKit::WebExtensionContext::removePermissionMatchPatterns((WebKit::WebExtensionContext *)a1, (uint64_t *)(a1 + 176), a2, a3, (double *)(a1 + 192), CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"));
  if ((v17 & 1) != 0)
    WebKit::WebExtensionContext::removeInjectedContent(a1, (_QWORD **)a2);
  return v17;
}

void sub_19774C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::enumerateExtensionPages(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WebKit::WebPageProxy *v12;
  void *v13;
  StringImpl *m_ptr;
  void *v15;
  WTF::StringImpl *v16;
  const URL *v17;
  int v18;
  StringImpl *v19;
  URL cf;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v28 = 0;
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v3 + 56), &v26);
      v6 = *(_QWORD *)(v3 + 56);
      if (v6)
      {
        v7 = *(unsigned int *)(v6 - 4);
        v8 = v6 + 8 * v7;
      }
      else
      {
        v8 = 0;
        v7 = 0;
      }
      v21 = v3 + 56;
      v22 = v8;
      v23 = v8;
      v24 = v8;
      v25 = v6 + 8 * v7;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v21);
      v9 = v27;
      if (v27 != v22)
      {
        v10 = (WTF *)(a1 + 72);
        while (1)
        {
          v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
          if (v11)
            v12 = (WebKit::WebPageProxy *)(v11 - 16);
          else
            v12 = 0;
          WebKit::WebPageProxy::cocoaView(v12, &cf);
          WTF::RetainPtr<NSMutableArray>::get((id *)&cf.m_string.m_impl.m_ptr);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          m_ptr = cf.m_string.m_impl.m_ptr;
          cf.m_string.m_impl.m_ptr = 0;
          if (m_ptr)
            CFRelease(m_ptr);
          objc_msgSend(v13, "_requiredWebExtensionBaseURL", cf.m_string.m_impl.m_ptr);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x19AEABB18](&cf, v15);
          v18 = (*((_BYTE *)&cf + 8) & 1) != 0 ? WTF::protocolHostAndPortAreEqual(v10, &cf, v17) : 0;
          v19 = cf.m_string.m_impl.m_ptr;
          cf.m_string.m_impl.m_ptr = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v19, v16);
            else
              *(_DWORD *)v19 -= 2;
          }

          if (v18)
          {
            (*(void (**)(_QWORD, WebKit::WebPageProxy *, char *))(*(_QWORD *)*a2 + 16))(*a2, v12, &v28);
            if (v28)
              break;
          }

          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v26);
          v9 = v27;
          if (v27 == v22)
            return;
        }

      }
    }
  }
}

void sub_19774C63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_19774C688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  JUMPOUT(0x19774C680);
}

void WTF::retainPtr<NSString * {__strong}>(_QWORD *a1, void *a2)
{
  id v3;
  void *cf;

  v3 = a2;
  *a1 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_19774C6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::openTabs@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebExtensionTab *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v26;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(result + 528);
  if (!v4)
  {
    LODWORD(v6) = 0;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  v5 = (char)a2;
  v6 = *(unsigned int *)(v4 - 12);
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      goto LABEL_50;
    }
    v7 = result;
    result = WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(a3 + 8) = v6;
    *(_QWORD *)a3 = result;
    v4 = *(_QWORD *)(v7 + 528);
    if (!v4)
      goto LABEL_12;
  }
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_12;
  v8 = *(unsigned int *)(v4 - 4);
  v9 = v4;
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    v9 = v4;
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 16;
      v10 -= 16;
      if (!v10)
        goto LABEL_12;
    }
  }
  v16 = v4 + 16 * v8;
  if (v16 == v9)
    goto LABEL_12;
LABEL_24:
  result = WebKit::WebExtensionTab::isOpen(*(WebKit::WebExtensionTab **)(v9 + 8));
  if ((_DWORD)result)
  {
    if ((v5 & 1) != 0
      || (v17 = *(WebKit::WebExtensionTab **)(v9 + 8), result = WebKit::WebExtensionTab::isPrivate(v17), !(_DWORD)result)
      || ((v18 = *(_QWORD *)(*((_QWORD *)v17 + 3) + 8)) != 0 ? (v19 = v18 - 16) : (v19 = 0), *(_BYTE *)(v19 + 249)))
    {
      v20 = *(_DWORD **)(v9 + 8);
      ++*v20;
      v26 = v20;
      v21 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(a3 + 8))
      {
        v22 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v21 + 1, (unint64_t)&v26);
        v21 = *(unsigned int *)(a3 + 12);
        v23 = *(WTF **)a3;
        v24 = *v22;
        *v22 = 0;
        *((_QWORD *)v23 + v21) = v24;
      }
      else
      {
        v25 = *(WTF **)a3;
        v26 = 0;
        *((_QWORD *)v25 + v21) = v20;
      }
      *(_DWORD *)(a3 + 12) = v21 + 1;
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
    }
  }
  while (1)
  {
    v9 += 16;
    if (v9 == v16)
      break;
    if ((unint64_t)(*(_QWORD *)v9 + 1) > 1)
    {
      if (v9 != v16)
        goto LABEL_24;
      break;
    }
  }
  LODWORD(v6) = *(_DWORD *)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 12);
LABEL_13:
  if (v11 >= v6)
    return result;
  v12 = *(unsigned int *)(a3 + 12);
  v13 = *(WTF **)a3;
  if (v11 < v12)
  {
    v14 = (uint64_t *)((char *)v13 + 8 * v11);
    v15 = 8 * v12 - 8 * v11;
    do
    {
      result = *v14;
      *v14 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
      ++v14;
      v15 -= 8;
    }
    while (v15);
    *(_DWORD *)(a3 + 12) = v11;
    v13 = *(WTF **)a3;
    LODWORD(v12) = v11;
  }
  if (v11)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      *(_DWORD *)(a3 + 8) = v11;
      result = WTF::fastRealloc(v13, (void *)(8 * v11));
      *(_QWORD *)a3 = result;
      return result;
    }
    if (!(v11 >> 29))
    {
      result = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a3 + 8) = v11;
      *(_QWORD *)a3 = result;
      if ((WTF *)result != v13)
        result = (uint64_t)memcpy((void *)result, v13, 8 * v12);
      goto LABEL_43;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x19774C974);
  }
LABEL_43:
  if (v13)
  {
    if (*(WTF **)a3 == v13)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
    }
    return WTF::fastFree(v13, a2);
  }
  return result;
}

void sub_19774C980(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didChangeTabProperties(uint64_t a1, WebKit::WebExtensionTab *this, unsigned __int16 a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  dispatch_time_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebExtensionTab::isOpen(this))
  {
    v6 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *((_QWORD *)this + 2);
      v17[0] = 67240448;
      v17[1] = a3;
      v18 = 2050;
      v19 = v16;
      _os_log_debug_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEBUG, "Changed tab properties (0x%{public}X) for tab %{public}llu", (uint8_t *)v17, 0x12u);
    }
    v7 = *(_QWORD *)(a1 + 64);
    if (v7 && *(_QWORD *)(v7 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(this)
        || ((v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0 ? (v9 = v8 - 16) : (v9 = 0), *(_BYTE *)(v9 + 249)))
      {
        v10 = *((unsigned __int16 *)this + 24);
        *((_WORD *)this + 24) = v10 | a3;
        if (!v10)
        {
          v11 = dispatch_time(0, 25000000);
          CFRetain(*(CFTypeRef *)(a1 + 8));
          v12 = *((_QWORD *)this + 2);
          v13 = malloc_type_malloc(0x38uLL, 0x10E00401F8A97B1uLL);
          *v13 = MEMORY[0x1E0C809A0];
          v13[1] = 50331650;
          v13[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::{lambda(void *)#1}::__invoke;
          v13[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::descriptor;
          v13[4] = a1;
          v13[5] = a1;
          v13[6] = v12;
          v14 = _Block_copy(v13);

          v15 = _Block_copy(v14);
          dispatch_after(v11, MEMORY[0x1E0C80D38], v15);

        }
      }
    }
  }
}

void sub_19774CB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::grantPermissions(uint64_t a1, uint64_t *a2, double a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v11 = a3;
  if (*a2 && *(_DWORD *)(*a2 - 12))
  {
    if (*(double *)(a1 + 160) > a3)
      *(double *)(a1 + 160) = a3;
    v5 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2);
    v6 = v5;
    v8 = v7;
    if (*a2)
      v9 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
    else
      v9 = 0;
    if ((WTF::StringImpl **)v9 != v5)
    {
      do
      {
        WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t *)(a1 + 144), v6, (const WTF::StringImpl *)&v11, (uint64_t)&v10);
        while (++v6 != v8)
        {
          if ((unint64_t)*v6 + 1 > 1)
            goto LABEL_13;
        }
        v6 = v8;
LABEL_13:
        ;
      }
      while (v6 != (WTF::StringImpl **)v9);
    }
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 152), a2, (double *)(a1 + 168), CFSTR("_WKWebExtensionContextDeniedPermissionsWereRemoved"));
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionsWereGranted"), (_QWORD **)a2);
  }
}

uint64_t WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * (v11 & v9);
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    *(_QWORD *)(v15 + 8) = *(_QWORD *)a3;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    v27 = v22 + 16 * v25;
    v26 = 1;
    goto LABEL_33;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v26 = 0;
  v27 = v20 + 16 * v21;
LABEL_33:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

void WebKit::WebExtensionContext::denyPermissions(uint64_t a1, uint64_t *a2, double a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v11 = a3;
  if (*a2 && *(_DWORD *)(*a2 - 12))
  {
    if (*(double *)(a1 + 168) > a3)
      *(double *)(a1 + 168) = a3;
    v5 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2);
    v6 = v5;
    v8 = v7;
    if (*a2)
      v9 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
    else
      v9 = 0;
    if ((WTF::StringImpl **)v9 != v5)
    {
      do
      {
        WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t *)(a1 + 152), v6, (const WTF::StringImpl *)&v11, (uint64_t)&v10);
        while (++v6 != v8)
        {
          if ((unint64_t)*v6 + 1 > 1)
            goto LABEL_13;
        }
        v6 = v8;
LABEL_13:
        ;
      }
      while (v6 != (WTF::StringImpl **)v9);
    }
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 144), a2, (double *)(a1 + 160), CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"));
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionsWereDenied"), (_QWORD **)a2);
  }
}

void WebKit::WebExtensionContext::grantPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BYTE v14[24];
  double v15;

  v15 = a4;
  if (*a2 && *(_DWORD *)(*a2 - 12))
  {
    if (*(double *)(a1 + 192) > a4)
      *(double *)(a1 + 192) = a4;
    v7 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)a2);
    v8 = v7;
    v10 = v9;
    if (*a2)
      v11 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
    else
      v11 = 0;
    if ((uint64_t *)v11 != v7)
    {
      do
      {
        WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t *)(a1 + 176), v8, (uint64_t *)&v15, (uint64_t)v14);
        while (++v8 != v10)
        {
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_14;
        }
        v8 = v10;
LABEL_14:
        ;
      }
      while (v8 != (uint64_t *)v11);
    }
    WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(a1, a2, a3);
    WebKit::WebExtensionContext::clearCachedPermissionStates((WebKit::WebExtensionContext *)a1, v12);
    WebKit::WebExtensionContext::injectedContents((WebKit::WebExtensionContext *)a1, (uint64_t)v14);
    WebKit::WebExtensionContext::addInjectedContent(a1, (uint64_t)v14, (_QWORD **)a2);
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v13);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionMatchPatternsWereGranted"), (_QWORD **)a2);
  }
}

void sub_19774D078(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (uint64_t *)(v8 + 16 * v17);
    v19 = *v18;
    if (*v18 != -1)
      break;
    v11 = (uint64_t *)(v8 + 16 * v17);
LABEL_10:
    v15 = i + v17;
  }
  if (!v19)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v18 = v11;
    }
    WTF::GenericHashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>::assignToEmpty<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&>(v18, a2);
    v18[1] = *a3;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_25:
        v18 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, v18);
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_25;
    }
    v24 = v25 + 16 * v28;
    v23 = 1;
    goto LABEL_30;
  }
  if (v19 != *a2)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  v23 = 0;
  v24 = v8 + 16 * v22;
LABEL_30:
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v23;
}

void WebKit::WebExtensionContext::addInjectedContent(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  WebKit::WebExtensionMatchPattern **v19;
  WebKit::WebExtensionMatchPattern **v20;
  WebKit::WebExtensionMatchPattern **v21;
  uint64_t *v22;
  WebKit::WebExtensionMatchPattern **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t *v31;

  v3 = *(_QWORD *)(a1 + 64);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    if (WebKit::WebExtensionContext::hasAccessToAllHosts((WebKit::WebExtensionContext *)a1))
    {
      if (!WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(a3))
        return;
      v31 = 0;
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 360));
      v8 = v7;
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 360);
      if (v11)
        v12 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
      else
        v12 = 0;
      if (v12 != v7)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v31, v8, (uint64_t)v30);
          while (1)
          {
            v8 += 3;
            if (v8 == v10)
              break;
            if ((unint64_t)(*v8 + 1) > 1)
              goto LABEL_14;
          }
          v8 = v10;
LABEL_14:
          ;
        }
        while (v8 != v12);
      }
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 368));
      v14 = v13;
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 368);
      if (v17)
        v18 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
      else
        v18 = 0;
      if (v18 != v13)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v31, v14, (uint64_t)v30);
          while (1)
          {
            v14 += 3;
            if (v14 == v16)
              break;
            if ((unint64_t)(*v14 + 1) > 1)
              goto LABEL_24;
          }
          v14 = v16;
LABEL_24:
          ;
        }
        while (v14 != v18);
      }
      v20 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v31);
      v21 = v19;
      v22 = v31;
      if (v31)
        v23 = (WebKit::WebExtensionMatchPattern **)&v31[*((unsigned int *)v31 - 1)];
      else
        v23 = 0;
      if (v23 != v20)
      {
        do
        {
          WebKit::WebExtensionContext::removeInjectedContent((_QWORD *)a1, *v20);
          while (++v20 != v21)
          {
            if ((unint64_t)*v20 + 1 > 1)
              goto LABEL_34;
          }
          v20 = v21;
LABEL_34:
          ;
        }
        while (v20 != v23);
        v22 = v31;
      }
      if (v22)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v22, v19);
    }
    v24 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a3);
    v25 = v24;
    v27 = v26;
    if (*a3)
      v28 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    else
      v28 = 0;
    if ((uint64_t *)v28 != v24)
    {
      do
      {
        v29 = *v25++;
        WebKit::WebExtensionContext::addInjectedContent(a1, a2, v29);
        while (v25 != v27)
        {
          if ((unint64_t)(*v25 + 1) > 1)
            goto LABEL_47;
          ++v25;
        }
        v25 = v27;
LABEL_47:
        ;
      }
      while (v25 != (uint64_t *)v28);
    }
  }
}

void sub_19774D470(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::denyPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  double v14;

  v14 = a4;
  if (*a2 && *(_DWORD *)(*a2 - 12))
  {
    if (*(double *)(a1 + 200) > a4)
      *(double *)(a1 + 200) = a4;
    v7 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)a2);
    v8 = v7;
    v10 = v9;
    if (*a2)
      v11 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
    else
      v11 = 0;
    if ((uint64_t *)v11 != v7)
    {
      do
      {
        WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t *)(a1 + 184), v8, (uint64_t *)&v14, (uint64_t)&v13);
        while (++v8 != v10)
        {
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_14;
        }
        v8 = v10;
LABEL_14:
        ;
      }
      while (v8 != (uint64_t *)v11);
    }
    WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(a1, a2, a3);
    WebKit::WebExtensionContext::clearCachedPermissionStates((WebKit::WebExtensionContext *)a1, v12);
    WebKit::WebExtensionContext::removeInjectedContent(a1);
    WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)a1);
    WebKit::WebExtensionContext::postAsyncNotification(a1, CFSTR("_WKWebExtensionContextPermissionMatchPatternsWereDenied"), (_QWORD **)a2);
  }
}

uint64_t WebKit::WebExtensionContext::removePermissions(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, void *a5)
{
  id v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  const WTF::StringImpl **v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  double v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int i;
  int v23;
  WTF *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl **v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  id v38;
  int v39;
  WTF::StringImpl **v40;
  _BYTE v41[24];

  v9 = a5;
  v12 = v9;
  if (!*a3)
    goto LABEL_43;
  if (!*(_DWORD *)(*a3 - 12))
    goto LABEL_43;
  *a4 = INFINITY;
  v40 = 0;
  v13 = *a2;
  if (!*a2)
    goto LABEL_43;
  v14 = *(_DWORD *)(v13 - 4);
  if (!v14)
    goto LABEL_33;
  v36 = a2;
  v37 = a1;
  v38 = v9;
  v39 = 0;
  do
  {
    v15 = (const WTF::StringImpl **)(v13 + 16 * --v14);
    v16 = *v15;
    if ((unint64_t)*v15 + 1 >= 2)
    {
      v17 = *a3;
      if (*a3)
      {
        v19 = *(_DWORD *)(v17 - 8);
        v20 = *((_DWORD *)v16 + 4);
        if (v20 >= 0x100)
          v21 = v20 >> 8;
        else
          v21 = WTF::StringImpl::hashSlowCase(v16);
        for (i = 0; ; v21 = i + v23)
        {
          v23 = v21 & v19;
          v24 = *(WTF **)(v17 + 8 * (v21 & v19));
          if (v24 != (WTF *)-1)
          {
            if (!v24)
              goto LABEL_10;
            if ((WTF::equal(v24, *v15, v11) & 1) != 0)
              break;
          }
          ++i;
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v40, (WTF::StringImpl **)(v13 + 16 * v14), v11, (uint64_t)v41);
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)(v13 + 16 * v14), v25);
        ++v39;
      }
      else
      {
LABEL_10:
        v18 = *(double *)(v13 + 16 * v14 + 8);
        if (v18 < *a4)
          *a4 = v18;
      }
    }
  }
  while (v14);
  v26 = *v36;
  if (v39)
  {
    *(_DWORD *)(v26 - 16) += v39;
    v27 = *v36;
    if (*v36)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    a1 = v37;
    v12 = v38;
    *(_DWORD *)(v27 - 12) = v28 - v39;
    v26 = *v36;
    if (!*v36)
      goto LABEL_33;
  }
  else
  {
    a1 = v37;
    v12 = v38;
    if (!v26)
      goto LABEL_33;
  }
  v29 = *(_DWORD *)(v26 - 4);
  v30 = 6 * *(_DWORD *)(v26 - 12);
  if (v29 >= 9 && v30 < v29)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(v36);
LABEL_33:
  v32 = v40;
  if (!v40)
  {
LABEL_43:
    v34 = 0;
    goto LABEL_44;
  }
  if (v12)
    v33 = *((_DWORD *)v40 - 3) == 0;
  else
    v33 = 1;
  v34 = !v33;
  if (v33 || (WebKit::WebExtensionContext::postAsyncNotification(a1, v12, &v40), (v32 = v40) != 0))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v10);
  else
    v34 = 1;
LABEL_44:

  return v34;
}

void sub_19774D7C4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, WTF::StringImpl **a13)
{
  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::removePermissionMatchPatterns(WebKit::WebExtensionContext *a1, uint64_t *a2, uint64_t *a3, int a4, double *a5, void *a6)
{
  id v10;
  unsigned __int8 **v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  CFTypeRef *v17;
  double v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  id v36;
  uint64_t *v37;
  double *v38;
  uint64_t *v40;
  uint64_t v41;
  _BYTE v42[24];

  v10 = a6;
  v12 = v10;
  if (!*a3 || !*(_DWORD *)(*a3 - 12) || (*a5 = INFINITY, v40 = 0, (v13 = *a2) == 0))
  {
LABEL_54:
    v34 = 0;
    goto LABEL_55;
  }
  v37 = a2;
  v38 = a5;
  v14 = *(_DWORD *)(v13 - 4);
  if (!v14)
    goto LABEL_44;
  v36 = v10;
  v15 = 0;
  do
  {
    v16 = (uint64_t *)(v13 + 16 * --v14);
    v11 = (unsigned __int8 **)*v16;
    if ((unint64_t)(*v16 + 1) < 2)
      continue;
    if (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(*a3, (uint64_t)v11))
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v40, (uint64_t *)(v13 + 16 * v14), (uint64_t)v42);
LABEL_9:
      v17 = (CFTypeRef *)*v16;
      *v16 = 0;
      if (v17)
        CFRelease(v17[1]);
      *v16 = -1;
      ++v15;
      continue;
    }
    if (a4)
    {
      v18 = *(double *)(v13 + 16 * v14 + 8);
      if (v18 < *v38)
        *v38 = v18;
    }
    else
    {
      v19 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)a3);
      v20 = v19;
      v21 = v11;
      if (*a3)
        v22 = *a3 + 8 * *(unsigned int *)(*a3 - 4);
      else
        v22 = 0;
      if ((unsigned __int8 **)v22 != v19)
      {
        while (1)
        {
          v23 = *v16;
          CFRetain(*(CFTypeRef *)(*v16 + 8));
          v41 = v23;
          if (WebKit::WebExtensionMatchPattern::matchesPattern(*v20, (unsigned __int8 *)v23, 2))
            break;
          CFRelease(*(CFTypeRef *)(v23 + 8));
          while (++v20 != v21)
          {
            if ((unint64_t)(*v20 + 1) > 1)
              goto LABEL_25;
          }
          v20 = v21;
LABEL_25:
          if (v20 == (unsigned __int8 **)v22)
            goto LABEL_26;
        }
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v40, &v41, (uint64_t)v42);
        v25 = v41;
        v41 = 0;
        if (v25)
          CFRelease(*(CFTypeRef *)(v25 + 8));
        goto LABEL_9;
      }
LABEL_26:
      v24 = *(double *)(v13 + 16 * v14 + 8);
      if (v24 < *v38)
        *v38 = v24;
    }
  }
  while (v14);
  v26 = *v37;
  if (v15)
  {
    *(_DWORD *)(v26 - 16) += v15;
    v27 = *v37;
    if (*v37)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v12 = v36;
    *(_DWORD *)(v27 - 12) = v28 - v15;
    v26 = *v37;
    if (*v37)
      goto LABEL_39;
  }
  else
  {
    v12 = v36;
    if (v26)
    {
LABEL_39:
      v29 = *(_DWORD *)(v26 - 4);
      v30 = 6 * *(_DWORD *)(v26 - 12);
      if (v29 >= 9 && v30 < v29)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::shrinkToBestSize(v37);
    }
  }
LABEL_44:
  v32 = v40;
  if (!v40)
    goto LABEL_54;
  if (v12)
    v33 = *((_DWORD *)v40 - 3) == 0;
  else
    v33 = 1;
  v34 = !v33;
  if (v33
    || (WebKit::WebExtensionContext::clearCachedPermissionStates(a1, (WTF::StringImpl *)v11),
        WebKit::WebExtensionContext::postAsyncNotification((uint64_t)a1, v12, &v40),
        (v32 = v40) != 0))
  {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v32, v11);
  }
  else
  {
    v34 = 1;
  }
LABEL_55:

  return v34;
}

void sub_19774DAB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a14, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::removeInjectedContent(uint64_t result, _QWORD **a2)
{
  uint64_t v2;
  WebKit::WebExtensionContext *v4;
  WebKit::WebExtensionMatchPattern **v5;
  WebKit::WebExtensionMatchPattern **v6;
  WebKit::WebExtensionMatchPattern **v7;
  WebKit::WebExtensionMatchPattern **v8;
  uint64_t v9;
  WebKit::WebExtensionMatchPattern *v10;

  v2 = *(_QWORD *)(result + 64);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = (WebKit::WebExtensionContext *)result;
    v5 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
    v6 = v5;
    v8 = v7;
    if (*a2)
      v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
    else
      v9 = 0;
    if ((WebKit::WebExtensionMatchPattern **)v9 != v5)
    {
      do
      {
        v10 = *v6++;
        WebKit::WebExtensionContext::removeInjectedContent(v4, v10);
        while (v6 != v8)
        {
          if ((unint64_t)*v6 + 1 > 1)
            goto LABEL_12;
          ++v6;
        }
        v6 = v8;
LABEL_12:
        ;
      }
      while (v6 != (WebKit::WebExtensionMatchPattern **)v9);
    }
    result = WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(a2);
    if ((result & 1) != 0)
      return WebKit::WebExtensionContext::addInjectedContent(v4);
  }
  return result;
}

_QWORD *WebKit::WebExtensionContext::requestPermissionMatchPatterns(uint64_t a1, _QWORD **a2, WebKit::WebExtensionTab **a3, uint64_t *a4, char a5, char a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  dispatch_time_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  WebKit::WebExtensionTab *v39;
  id WeakRetained;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *result;
  uint64_t *v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;

  v53 = 0;
  v12 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
  v13 = v12;
  v15 = v14;
  if (*a2)
    v16 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v16 = 0;
  if ((uint64_t *)v16 != v12)
  {
    do
    {
      if (((WebKit::WebExtensionContext::permissionState(a1, *v13, *a3, a6) + 1) & 0xFD) == 0)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v53, v13, (uint64_t)&v49);
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_11;
      }
      v13 = v15;
LABEL_11:
      ;
    }
    while (v13 != (uint64_t *)v16);
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0 && v53 && *((_DWORD *)v53 - 3))
  {
    WebKit::WebExtensionController::delegate((id *)(v18 - 16));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v49 = (uint64_t *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(_QWORD *)&v50 = a1;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v50 + 1, &v53);
      v51 = a5;
      v20 = *a4;
      *a4 = 0;
      v52 = v20;
      ++*(_QWORD *)(a1 + 240);
      v21 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v21 = 1;
      v22 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v22 = &off_1E34F8428;
      *(_QWORD *)(v22 + 8) = v49;
      *(_QWORD *)(v22 + 16) = v50;
      v23 = *((_QWORD *)&v50 + 1);
      v50 = 0u;
      *(_QWORD *)(v22 + 24) = v23;
      *(_BYTE *)(v22 + 32) = v51;
      v24 = v52;
      v52 = 0;
      *(_QWORD *)(v22 + 40) = v24;
      *(_QWORD *)(v21 + 8) = v22;
      *(_OWORD *)(v21 + 16) = 0u;
      v25 = dispatch_time(0, 120000000000);
      ++*(_DWORD *)v21;
      v26 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      v27 = MEMORY[0x1E0C809A0];
      *v26 = MEMORY[0x1E0C809A0];
      v26[1] = 50331650;
      v26[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke;
      v26[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::descriptor;
      v26[4] = v21;
      v28 = _Block_copy(v26);

      v29 = _Block_copy(v28);
      dispatch_after(v25, MEMORY[0x1E0C80D38], v29);

      v30 = *(_QWORD *)(a1 + 64);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v31)
          v32 = (id *)(v31 - 16);
        else
          v32 = 0;
      }
      else
      {
        v32 = 0;
      }
      WebKit::WebExtension::wrapper(v32);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::toAPI(&v53);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = *a3;
      if (*a3)
        WeakRetained = objc_loadWeakRetained((id *)v39 + 4);
      else
        WeakRetained = 0;
      WebKit::WebExtension::wrapper((id *)a1);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      ++*(_DWORD *)v21;
      v42 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v42 = v27;
      v42[1] = 50331650;
      v42[2] = WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke;
      v42[3] = &WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::descriptor;
      v42[4] = v21;
      v43 = _Block_copy(v42);

      v44 = _Block_copy(v43);
      objc_msgSend(v19, "webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler:", v37, v38, WeakRetained, v41, v44);

      if (v39)
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v21);
      v46 = v52;
      v52 = 0;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      if (*((_QWORD *)&v50 + 1))
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*((uint64_t **)&v50 + 1), v45);
      v47 = v50;
      *(_QWORD *)&v50 = 0;
      if (v47)
        CFRelease(*(CFTypeRef *)(v47 + 8));
    }
    else
    {
      v49 = 0;
      v35 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD **, uint64_t **, double))(*(_QWORD *)v35 + 16))(v35, &v53, &v49, INFINITY);
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      if (v49)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v49, v36);
    }

  }
  else
  {
    v49 = 0;
    v33 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD **, uint64_t **, double))(*(_QWORD *)v33 + 16))(v33, &v53, &v49, INFINITY);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (v49)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v49, v34);
  }
  result = v53;
  if (v53)
    return (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v53, v34);
  return result;
}

void sub_19774E03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v25;
  void *v26;

  v23 = v15;

  if (v22)
  WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v17);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a11, v25);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));

  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a14, v26);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::requestPermissionToAccessURLs(uint64_t a1, uint64_t *a2, URL **a3, uint64_t *a4, char a5, char a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl **v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  __int128 v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  unsigned int v29;
  _DWORD *v30;
  WTF **v31;
  WTF **v32;
  WTF **v33;
  WTF **v34;
  _DWORD *v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  _DWORD *v47;
  __int128 v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  dispatch_time_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id *v61;
  void *v62;
  void *v63;
  URL *v64;
  id WeakRetained;
  void *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  WTF::StringImpl **result;
  void *v74;
  WTF::StringImpl **v77;
  WTF::StringImpl **v78;

  v78 = 0;
  v6 = *((_DWORD *)a2 + 3);
  if (v6)
  {
    v7 = *a2;
    v8 = *a2 + 40 * v6;
    while (1)
    {
      if ((*(_BYTE *)(v7 + 8) & 2) == 0
        || ((WebKit::WebExtensionContext::permissionState(a1, (URL *)v7, *a3, a6) + 1) & 0xFD) != 0)
      {
        goto LABEL_5;
      }
      v9 = v78;
      if (v78
        || (WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v78, 0), (v9 = v78) != 0))
      {
        v10 = *((_DWORD *)v9 - 2);
      }
      else
      {
        v10 = 0;
      }
      v11 = *(_DWORD *)(*(_QWORD *)v7 + 16);
      if (v11 >= 0x100)
        v12 = v11 >> 8;
      else
        v12 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v7);
      v13 = v12 & v10;
      v14 = &v9[5 * (v12 & v10)];
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v14) & 1) == 0)
      {
        v16 = 0;
        v17 = 1;
        while (1)
        {
          v18 = v14;
          if (*v14 != (WTF::StringImpl *)-1)
          {
            v18 = v16;
            if ((WTF::equal(*v14, *(const WTF::StringImpl **)v7, v15) & 1) != 0)
              goto LABEL_5;
          }
          v13 = (v13 + v17) & v10;
          v14 = &v9[5 * v13];
          ++v17;
          v16 = v18;
          if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v14))
          {
            if (v18)
            {
              v18[4] = 0;
              *(_OWORD *)v18 = 0u;
              *((_OWORD *)v18 + 1) = 0u;
              --*((_DWORD *)v78 - 4);
              v14 = v18;
            }
            break;
          }
        }
      }
      WTF::String::operator=(v14, (WTF::StringImpl *)v7);
      v19 = *(_OWORD *)(v7 + 8);
      *(_OWORD *)(v14 + 3) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v14 + 1) = v19;
      v20 = v78 ? *((_DWORD *)v78 - 3) + 1 : 1;
      *((_DWORD *)v78 - 3) = v20;
      v21 = v78 ? *((_DWORD *)v78 - 3) : 0;
      v22 = (*((_DWORD *)v78 - 4) + v21);
      v23 = *((unsigned int *)v78 - 1);
      if (v23 > 0x400)
        break;
      if (3 * v23 <= 4 * v22)
        goto LABEL_28;
LABEL_5:
      v7 += 40;
      if (v7 == v8)
        goto LABEL_32;
    }
    if (v23 > 2 * v22)
      goto LABEL_5;
LABEL_28:
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v78, v14);
    goto LABEL_5;
  }
LABEL_32:
  v24 = a1;
  v25 = *(_QWORD *)(a1 + 64);
  if (v25 && (v26 = *(_QWORD *)(v25 + 8)) != 0 && v78 && *((_DWORD *)v78 - 3))
  {
    WebKit::WebExtensionController::delegate((id *)(v26 - 16));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v74 = v27;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      if (v78 && (v28 = *((_DWORD *)v78 - 3)) != 0)
      {
        v29 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v78 - 3));
        v30 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(40 * v29 + 16));
        v30[2] = v29 - 1;
        v30[3] = v29;
        *v30 = 0;
        v30[1] = v28;
        v31 = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin((uint64_t *)&v78);
        v32 = v31;
        v34 = v33;
        v35 = v30 + 4;
        if (v78)
          v36 = &v78[5 * *((unsigned int *)v78 - 1)];
        else
          v36 = 0;
        if (v36 != v31)
        {
          do
          {
            v41 = v30[2];
            v42 = *((_DWORD *)*v32 + 4);
            if (v42 >= 0x100)
              v43 = v42 >> 8;
            else
              v43 = WTF::StringImpl::hashSlowCase(*v32);
            v44 = 0;
            do
            {
              v45 = v43 & v41;
              v46 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)&v35[10 * (v43 & v41)]);
              v43 = ++v44 + v45;
            }
            while (!v46);
            WTF::String::operator=((WTF::StringImpl **)&v35[10 * v45], (WTF::StringImpl *)v32);
            v47 = &v35[10 * v45];
            v48 = *(_OWORD *)(v32 + 1);
            *(_OWORD *)(v47 + 6) = *(_OWORD *)(v32 + 3);
            *(_OWORD *)(v47 + 2) = v48;
            while (1)
            {
              v32 += 5;
              if (v32 == v34)
                break;
              v49 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v32);
              if (*v32 == (WTF *)-1)
                v50 = 1;
              else
                v50 = v49;
              if (v50 != 1)
                goto LABEL_61;
            }
            v32 = v34;
LABEL_61:
            ;
          }
          while (v32 != v36);
        }
        v24 = a1;
      }
      else
      {
        v35 = 0;
      }
      v51 = *a4;
      *a4 = 0;
      ++*(_QWORD *)(v24 + 240);
      v52 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v52 = 1;
      v53 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v53 = &off_1E34F8450;
      *(_QWORD *)(v53 + 8) = v24;
      *(_QWORD *)(v53 + 16) = v24;
      *(_QWORD *)(v53 + 24) = v35;
      *(_BYTE *)(v53 + 32) = a5;
      *(_QWORD *)(v53 + 40) = v51;
      *(_QWORD *)(v52 + 16) = 0;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 8) = v53;
      v54 = dispatch_time(0, 120000000000);
      ++*(_DWORD *)v52;
      v55 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      v56 = MEMORY[0x1E0C809A0];
      *v55 = MEMORY[0x1E0C809A0];
      v55[1] = 50331650;
      v55[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke;
      v55[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::descriptor;
      v55[4] = v52;
      v57 = _Block_copy(v55);

      v58 = _Block_copy(v57);
      dispatch_after(v54, MEMORY[0x1E0C80D38], v58);

      v59 = *(_QWORD *)(v24 + 64);
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 8);
        if (v60)
          v61 = (id *)(v60 - 16);
        else
          v61 = 0;
      }
      else
      {
        v61 = 0;
      }
      WebKit::WebExtension::wrapper(v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::toAPI((uint64_t *)&v78);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = *a3;
      if (*a3)
        WeakRetained = objc_loadWeakRetained((id *)&v64->m_pathEnd);
      else
        WeakRetained = 0;
      WebKit::WebExtension::wrapper((id *)v24);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      ++*(_DWORD *)v52;
      v67 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v67 = v56;
      v67[1] = 50331650;
      v67[2] = WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke;
      v67[3] = &WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::descriptor;
      v67[4] = v52;
      v68 = _Block_copy(v67);

      v69 = _Block_copy(v68);
      objc_msgSend(v74, "webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler:", v62, v63, WeakRetained, v66, v69);

      if (v64)
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v52);
      v27 = v74;
    }
    else
    {
      v77 = 0;
      v39 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl ***, WTF::StringImpl ***, double))(*(_QWORD *)v39 + 16))(v39, &v78, &v77, INFINITY);
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      if (v77)
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v77, v40);
    }

  }
  else
  {
    v77 = 0;
    v37 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***, WTF::StringImpl ***, double))(*(_QWORD *)v37 + 16))(v37, &v78, &v77, INFINITY);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    if (v77)
      WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v77, v38);
  }
  result = v78;
  if (v78)
    return (WTF::StringImpl **)WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v78, v38);
  return result;
}

void sub_19774E79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl **a16)
{
  WTF::StringImpl *v17;

  CFRelease(*(CFTypeRef *)(a14 + 8));

  if (a16)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a16, v17);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::requestPermissions(uint64_t a1, _QWORD **a2, WebKit::WebExtensionTab **a3, uint64_t *a4, char a5, char a6)
{
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  dispatch_time_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _QWORD *result;
  uint64_t v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  WebKit::WebExtensionTab *v41;
  id WeakRetained;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;

  v54 = 0;
  v12 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v13 = v12;
  v15 = v14;
  if (*a2)
    v16 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v16 = 0;
  if ((WTF::StringImpl **)v16 != v12)
  {
    do
    {
      if (((WebKit::WebExtensionContext::permissionState(a1, v13, *a3, a6) + 1) & 0xFD) == 0)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v54, v13, v17, (uint64_t)&v50);
      while (++v13 != v15)
      {
        if ((unint64_t)*v13 + 1 > 1)
          goto LABEL_10;
      }
      v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != (WTF::StringImpl **)v16);
  }
  v18 = *(_QWORD *)(a1 + 64);
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0 && v54 && *((_DWORD *)v54 - 3))
  {
    WebKit::WebExtensionController::delegate((id *)(v19 - 16));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v50 = (WTF::StringImpl **)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(_QWORD *)&v51 = a1;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v51 + 1, &v54);
      v52 = a5;
      v21 = *a4;
      *a4 = 0;
      v53 = v21;
      ++*(_QWORD *)(a1 + 240);
      v22 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v22 = 1;
      v23 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v23 = &off_1E34F8478;
      *(_QWORD *)(v23 + 8) = v50;
      *(_QWORD *)(v23 + 16) = v51;
      v24 = *((_QWORD *)&v51 + 1);
      v51 = 0u;
      *(_QWORD *)(v23 + 24) = v24;
      *(_BYTE *)(v23 + 32) = v52;
      v25 = v53;
      v53 = 0;
      *(_QWORD *)(v23 + 40) = v25;
      *(_QWORD *)(v22 + 8) = v23;
      *(_OWORD *)(v22 + 16) = 0u;
      v26 = dispatch_time(0, 120000000000);
      ++*(_DWORD *)v22;
      v27 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      v28 = MEMORY[0x1E0C809A0];
      *v27 = MEMORY[0x1E0C809A0];
      v27[1] = 50331650;
      v27[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke;
      v27[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::descriptor;
      v27[4] = v22;
      v29 = _Block_copy(v27);

      v30 = _Block_copy(v29);
      dispatch_after(v26, MEMORY[0x1E0C80D38], v30);

      v31 = *(_QWORD *)(a1 + 64);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
          v33 = (id *)(v32 - 16);
        else
          v33 = 0;
      }
      else
      {
        v33 = 0;
      }
      WebKit::WebExtension::wrapper(v33);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::toAPI(&v54);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = *a3;
      if (*a3)
        WeakRetained = objc_loadWeakRetained((id *)v41 + 4);
      else
        WeakRetained = 0;
      WebKit::WebExtension::wrapper((id *)a1);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      ++*(_DWORD *)v22;
      v44 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v44 = v28;
      v44[1] = 50331650;
      v44[2] = WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke;
      v44[3] = &WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::descriptor;
      v44[4] = v22;
      v45 = _Block_copy(v44);

      v46 = _Block_copy(v45);
      objc_msgSend(v20, "webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler:", v39, v40, WeakRetained, v43, v46);

      if (v41)
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v22);
      v48 = v53;
      v53 = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      if (*((_QWORD *)&v51 + 1))
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v51 + 1), v47);
      v49 = v51;
      *(_QWORD *)&v51 = 0;
      if (v49)
        CFRelease(*(CFTypeRef *)(v49 + 8));
    }
    else
    {
      v50 = 0;
      v37 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl ***, double))(*(_QWORD *)v37 + 16))(v37, &v54, &v50, INFINITY);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      if (v50)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v50, v38);
    }

  }
  else
  {
    v50 = 0;
    v34 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl ***, double))(*(_QWORD *)v34 + 16))(v34, &v54, &v50, INFINITY);
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    if (v50)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v50, v35);
  }
  result = v54;
  if (v54)
    return (_QWORD *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v54, v35);
  return result;
}

void sub_19774ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl **a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v23 = v15;

  if (v22)
  WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v17);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, v25);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));

  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, v26);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionState(uint64_t HasTemporaryPermission, WTF **a2, WebKit::WebExtensionTab *a3, char a4)
{
  uint64_t v6;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  const WTF::StringImpl *v12;
  uint64_t v13;
  char v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int i;
  int v20;
  WTF *v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WebKit::WebExtension *v24;
  __CFString *v25;
  char hasRequestedPermission;
  uint64_t v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int j;
  int v34;
  WTF *v35;
  WTF::StringImpl *v36;

  v6 = HasTemporaryPermission;
  if (!a3)
    goto LABEL_10;
  MEMORY[0x19AEABCC8](&v36, CFSTR("tabs"));
  v10 = WTF::equal(*a2, v36, v8);
  HasTemporaryPermission = (uint64_t)v36;
  v36 = 0;
  if (!HasTemporaryPermission)
    goto LABEL_5;
  if (*(_DWORD *)HasTemporaryPermission != 2)
  {
    *(_DWORD *)HasTemporaryPermission -= 2;
LABEL_5:
    if (!v10)
      goto LABEL_10;
    goto LABEL_8;
  }
  HasTemporaryPermission = WTF::StringImpl::destroy((WTF::StringImpl *)HasTemporaryPermission, v9);
  if (!v10)
    goto LABEL_10;
LABEL_8:
  HasTemporaryPermission = WebKit::WebExtensionTab::extensionHasTemporaryPermission(a3);
  if ((HasTemporaryPermission & 1) != 0)
    return 3;
LABEL_10:
  v13 = *WebKit::WebExtension::supportedPermissions((WebKit::WebExtension *)HasTemporaryPermission);
  if (!v13)
    return 0;
  v15 = a4;
  v16 = *(_DWORD *)(v13 - 8);
  v17 = *((_DWORD *)*a2 + 4);
  if (v17 >= 0x100)
    v18 = v17 >> 8;
  else
    v18 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v18 = i + v20)
  {
    v20 = v18 & v16;
    v21 = *(WTF **)(v13 + 8 * (v18 & v16));
    if (v21 != (WTF *)-1)
    {
      if (!v21)
        return 0;
      if ((WTF::equal(v21, *a2, v12) & 1) != 0)
        break;
    }
    ++i;
  }
  WebKit::WebExtensionContext::removeExpired(v6, (uint64_t *)(v6 + 152), (double *)(v6 + 168), CFSTR("_WKWebExtensionContextDeniedPermissionsWereRemoved"));
  if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v6 + 152), a2, v22) & 1) != 0)return -3;
  WebKit::WebExtensionContext::removeExpired(v6, (uint64_t *)(v6 + 144), (double *)(v6 + 160), CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"));
  if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v6 + 144), a2, v23) & 1) != 0)return 3;
  if ((v15 & 2) != 0)
    return 0;
  v24 = *(WebKit::WebExtension **)(v6 + 56);
  if (*a2)
    v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v25 = &stru_1E351F1B8;
  hasRequestedPermission = WebKit::WebExtension::hasRequestedPermission(v24, &v25->isa);

  if ((hasRequestedPermission & 1) != 0)
    return 1;
  if ((v15 & 4) == 0)
    return 0;
  v27 = *(_QWORD *)(v6 + 56);
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v27);
  v29 = *(_QWORD *)(v27 + 112);
  if (!v29)
    return 0;
  v30 = *(_DWORD *)(v29 - 8);
  v31 = *((_DWORD *)*a2 + 4);
  if (v31 >= 0x100)
    v32 = v31 >> 8;
  else
    v32 = WTF::StringImpl::hashSlowCase(*a2);
  for (j = 0; ; v32 = j + v34)
  {
    v34 = v32 & v30;
    v35 = *(WTF **)(v29 + 8 * (v32 & v30));
    if (v35 != (WTF *)-1)
    {
      if (!v35)
        return 0;
      if ((WTF::equal(v35, *a2, v28) & 1) != 0)
        break;
    }
    ++j;
  }
  return -1;
}

void sub_19774F0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionState(uint64_t a1, URL *a2, URL *a3, char a4)
{
  uint64_t v7;
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  StringImpl *m_ptr;
  char v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int j;
  int v27;
  WTF **v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int i;
  int v34;
  WTF *v35;
  uint64_t v36;
  WTF **v37;
  const WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  uint64_t (**v41)(void *, uint64_t);
  unsigned int (**v42)(void *, _QWORD);
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD **v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  unsigned int (**v55)(void *, _QWORD);
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t (**v72)(void *, uint64_t);
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  char v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  _QWORD **v84;
  _QWORD **v85;
  _QWORD v86[5];
  _QWORD v87[5];
  _QWORD aBlock[6];
  _QWORD *v89[3];
  WTF *v90[2];

  if (!a2->m_string.m_impl.m_ptr || !*((_DWORD *)a2->m_string.m_impl.m_ptr + 1))
    goto LABEL_19;
  v7 = a1;
  if ((*((_BYTE *)a2 + 8) & 1) != 0)
  {
    a1 = WTF::protocolHostAndPortAreEqual((WTF *)(a1 + 72), a2, a3);
    if ((a1 & 1) != 0)
    {
      LOBYTE(v8) = 2;
      return (char)v8;
    }
  }
  v9 = WebKit::WebExtensionMatchPattern::validSchemes((WebKit::WebExtensionMatchPattern *)a1);
  v89[0] = (_QWORD *)WTF::URL::protocol((WTF::URL *)a2);
  v89[1] = v10;
  WTF::StringView::toStringWithoutCopying((uint64_t)v89, v90);
  v13 = *v9;
  v14 = v90[0];
  if (v13)
  {
    v23 = *(_DWORD *)(v13 - 8);
    v24 = *((_DWORD *)v90[0] + 4);
    if (v24 >= 0x100)
      v25 = v24 >> 8;
    else
      v25 = WTF::StringImpl::hashSlowCase(v90[0]);
    for (i = 0; ; v25 = i + v34)
    {
      v34 = v25 & v23;
      v35 = *(WTF **)(v13 + 8 * (v25 & v23));
      if (v35 != (WTF *)-1)
      {
        if (!v35)
        {
          LOBYTE(v13) = 0;
          goto LABEL_40;
        }
        if ((WTF::equal(v35, v90[0], v12) & 1) != 0)
          break;
      }
      ++i;
    }
    LOBYTE(v13) = 1;
LABEL_40:
    v14 = v90[0];
  }
  v90[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v11);
      if ((v13 & 1) != 0)
        goto LABEL_11;
LABEL_19:
      LOBYTE(v8) = 0;
      return (char)v8;
    }
    *(_DWORD *)v14 -= 2;
  }
  if ((v13 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  if (a3)
  {
    m_ptr = a3[1].m_string.m_impl.m_ptr;
    if (m_ptr)
    {
      CFRetain(*((CFTypeRef *)m_ptr + 1));
      v16 = WebKit::WebExtensionMatchPattern::matchesURL(m_ptr, (WTF::URL *)a2, 0);
      CFRelease(*((CFTypeRef *)m_ptr + 1));
      if ((v16 & 1) != 0)
      {
        LOBYTE(v8) = 3;
        return (char)v8;
      }
    }
  }
  v83 = a4;
  v84 = (_QWORD **)(v7 + 176);
  WebKit::WebExtensionContext::removeExpired((WebKit::WebExtensionContext *)v7, (uint64_t *)(v7 + 176), (double *)(v7 + 192), CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"));
  v85 = (_QWORD **)(v7 + 184);
  WebKit::WebExtensionContext::removeExpired((WebKit::WebExtensionContext *)v7, (uint64_t *)(v7 + 184), (double *)(v7 + 200), CFSTR("_WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved"));
  v18 = *(_QWORD *)(v7 + 208);
  if (!v18)
  {
LABEL_52:
    v40 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke;
    aBlock[3] = &__block_descriptor_48_e8_c12__0c8l;
    aBlock[4] = v7;
    aBlock[5] = a2;
    v41 = (uint64_t (**)(void *, uint64_t))_Block_copy(aBlock);
    v87[0] = v40;
    v87[1] = 3221225472;
    v87[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2;
    v87[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v87[4] = a2;
    v42 = (unsigned int (**)(void *, _QWORD))_Block_copy(v87);
    v43 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v85);
    v44 = v43;
    v46 = v45;
    if (*v85)
      v47 = (uint64_t)&(*v85)[2 * *((unsigned int *)*v85 - 1)];
    else
      v47 = 0;
    v48 = (_QWORD **)(v7 + 176);
    if ((_QWORD *)v47 != v43)
    {
      while (!v42[2](v42, *v44))
      {
        while (1)
        {
          v44 += 2;
          if (v44 == v46)
            break;
          if ((unint64_t)(*v44 + 1) > 1)
            goto LABEL_61;
        }
        v44 = v46;
LABEL_61:
        if (v44 == (_QWORD *)v47)
          goto LABEL_62;
      }
      v54 = v41[2](v41, 4294967293);
      goto LABEL_76;
    }
LABEL_62:
    v49 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v84);
    v50 = v49;
    v52 = v51;
    if (*v84)
      v53 = (uint64_t)&(*v84)[2 * *((unsigned int *)*v84 - 1)];
    else
      v53 = 0;
    if ((_QWORD *)v53 != v49)
    {
      while (!v42[2](v42, *v50))
      {
        while (1)
        {
          v50 += 2;
          if (v50 == v52)
            break;
          if ((unint64_t)(*v50 + 1) > 1)
            goto LABEL_72;
        }
        v50 = v52;
LABEL_72:
        if (v50 == (_QWORD *)v53)
          goto LABEL_73;
      }
      v54 = v41[2](v41, 3);
LABEL_76:
      LOBYTE(v8) = v54;
LABEL_108:

      return (char)v8;
    }
LABEL_73:
    v86[0] = MEMORY[0x1E0C809B0];
    v86[1] = 3221225472;
    v86[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_3;
    v86[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v86[4] = a2;
    v55 = (unsigned int (**)(void *, _QWORD))_Block_copy(v86);
    v56 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v85);
    v57 = v56;
    v59 = v58;
    v82 = a4;
    if (*v85)
      v60 = (uint64_t)&(*v85)[2 * *((unsigned int *)*v85 - 1)];
    else
      v60 = 0;
    if ((_QWORD *)v60 != v56)
    {
      while (!v55[2](v55, *v57))
      {
        while (1)
        {
          v57 += 2;
          if (v57 == v59)
            break;
          if ((unint64_t)(*v57 + 1) > 1)
            goto LABEL_89;
        }
        v57 = v59;
LABEL_89:
        if (v57 == (_QWORD *)v60)
          goto LABEL_90;
      }
      v66 = v41[2](v41, 4294967294);
      goto LABEL_106;
    }
LABEL_90:
    v61 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v48);
    v62 = v61;
    v64 = v63;
    if (*v48)
      v65 = (uint64_t)&(*v48)[2 * *((unsigned int *)*v48 - 1)];
    else
      v65 = 0;
    if ((_QWORD *)v65 != v61)
    {
      while (!v55[2](v55, *v62))
      {
        while (1)
        {
          v62 += 2;
          if (v62 == v64)
            break;
          if ((unint64_t)(*v62 + 1) > 1)
            goto LABEL_100;
        }
        v62 = v64;
LABEL_100:
        if (v62 == (_QWORD *)v65)
          goto LABEL_101;
      }
      v66 = v41[2](v41, 2);
      goto LABEL_106;
    }
LABEL_101:
    if ((v83 & 2) != 0)
    {
      v66 = v41[2](v41, 0);
LABEL_106:
      LOBYTE(v8) = v66;
LABEL_107:

      goto LABEL_108;
    }
    WebKit::WebExtension::allRequestedMatchPatterns(*(id **)(v7 + 56), (uint64_t *)v89);
    v67 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v89);
    v68 = v67;
    v70 = v69;
    if (v89[0])
      v71 = &v89[0][*((unsigned int *)v89[0] - 1)];
    else
      v71 = 0;
    if (v71 == v67)
    {
LABEL_118:
      MEMORY[0x19AEABCC8](v90, CFSTR("webNavigation"));
      v72 = v41;
      v74 = WebKit::WebExtensionContext::permissionState(v7, v90, (WebKit::WebExtensionTab *)a3, v82 | 2u) & 0xFFFFFFFE;
      v75 = v90[0];
      v90[0] = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v73);
        else
          *(_DWORD *)v75 -= 2;
      }
      if (v74 == 2)
      {
        v76 = -1;
        v41 = v72;
      }
      else
      {
        if ((v83 & 1) != 0)
        {
          MEMORY[0x19AEABCC8](v90, CFSTR("tabs"));
          v78 = WebKit::WebExtensionContext::permissionState(v7, v90, (WebKit::WebExtensionTab *)a3, v82 | 2u) & 0xFFFFFFFE;
          v79 = v90[0];
          v90[0] = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2)
              WTF::StringImpl::destroy(v79, v77);
            else
              *(_DWORD *)v79 -= 2;
          }
          if (v78 == 2)
          {
            LOBYTE(v8) = -1;
            v41 = v72;
            goto LABEL_138;
          }
        }
        v41 = v72;
        if ((v83 & 4) != 0
          && (v80 = *(_QWORD *)(v7 + 56),
              WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v80),
              (WebKit::WebExtensionMatchPattern::patternsMatchURL((_QWORD **)(v80 + 96), (WTF::URL *)a2) & 1) != 0))
        {
          v76 = -1;
        }
        else
        {
          v76 = 0;
        }
      }
    }
    else
    {
      while (1)
      {
        if (v42[2](v42, *v68))
        {
          v76 = 1;
          goto LABEL_137;
        }
        if ((((uint64_t (*)(void *, _QWORD))v55[2])(v55, *v68) & 1) != 0)
          break;
        while (++v68 != v70)
        {
          if ((unint64_t)(*v68 + 1) > 1)
            goto LABEL_117;
        }
        v68 = v70;
LABEL_117:
        if (v68 == v71)
          goto LABEL_118;
      }
      v76 = -1;
    }
LABEL_137:
    LOBYTE(v8) = v41[2](v41, v76);
LABEL_138:
    if (v89[0])
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v89[0], v77);
    goto LABEL_107;
  }
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)a2->m_string.m_impl.m_ptr + 4);
  if (v20 >= 0x100)
    v21 = v20 >> 8;
  else
    v21 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)a2->m_string.m_impl.m_ptr);
  for (j = 0; ; v21 = j + v27)
  {
    v27 = v21 & v19;
    v28 = *(WTF ***)(v18 + 8 * (v21 & v19));
    if (v28 != (WTF **)-1)
    {
      if (!v28)
        goto LABEL_52;
      if ((WTF::equal(*v28, (const WTF::StringImpl *)a2->m_string.m_impl.m_ptr, v17) & 1) != 0)
        break;
    }
    ++j;
  }
  v29 = *(_QWORD *)(v7 + 232);
  if (v29
    && ((v30 = *(_DWORD *)(v29 - 8), v31 = *((_DWORD *)a2->m_string.m_impl.m_ptr + 4), v31 >= 0x100)
      ? (v32 = v31 >> 8)
      : (v32 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)a2->m_string.m_impl.m_ptr)),
        v36 = v32 & v30,
        v37 = (WTF **)(v29 + 48 * v36),
        (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v37) & 1) == 0))
  {
    v81 = a4;
    v39 = 1;
    while (*v37 == (WTF *)-1 || (WTF::equal(*v37, (const WTF::StringImpl *)a2->m_string.m_impl.m_ptr, v38) & 1) == 0)
    {
      v36 = ((_DWORD)v36 + v39) & v30;
      v37 = (WTF **)(v29 + 48 * v36);
      ++v39;
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v37) & 1) != 0)
      {
        v8 = 0;
        goto LABEL_50;
      }
    }
    v8 = *(unsigned __int8 *)(v29 + 48 * v36 + 40);
LABEL_50:
    a4 = v81;
    if (v8)
      goto LABEL_77;
  }
  else
  {
    v8 = 0;
  }
  if ((v83 & 2) == 0)
    goto LABEL_52;
LABEL_77:
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::appendOrMoveToLast((uint64_t)v89, (uint64_t *)(v7 + 208), (uint64_t)a2);
  if ((v8 == 255 || v8 == 1) && (v83 & 2) != 0)
    LOBYTE(v8) = 0;
  return (char)v8;
}

void sub_19774F8EC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  uint64_t *v8;

  v7 = *(WTF::StringImpl **)(v5 - 112);
  *(_QWORD *)(v5 - 112) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(uint64_t **)(v5 - 136);
  if (v8)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v8, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionState(uint64_t a1, uint64_t a2, WebKit::WebExtensionTab *a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t (**v20)(void *, _QWORD);
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (**v31)(void *, _QWORD);
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  WTF::StringImpl *v45;
  uint64_t *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int i;
  int v51;
  WTF *v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v57;
  uint64_t *v58;
  _QWORD v59[5];
  _QWORD aBlock[5];

  if (!*(_BYTE *)(a2 + 49))
    return 0;
  v8 = WebKit::WebExtensionMatchPattern::matchesURL((_BYTE *)a2, (WTF::URL *)(a1 + 72), 0);
  if ((v8 & 1) != 0)
    return 2;
  if (!*(_BYTE *)(a2 + 48))
  {
    v10 = WebKit::WebExtensionMatchPattern::validSchemes((WebKit::WebExtensionMatchPattern *)v8);
    if (!*(_BYTE *)(a2 + 49) || *(_BYTE *)(a2 + 48))
    {
      v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (!*MEMORY[0x1E0CBF6F0])
        goto LABEL_11;
    }
    else
    {
      v13 = *(WTF::StringImpl **)(a2 + 16);
      if (!v13)
      {
LABEL_11:
        v14 = *v10;
        if (*v10)
        {
          v47 = *(_DWORD *)(v14 - 8);
          v48 = *((_DWORD *)v13 + 4);
          if (v48 >= 0x100)
            v49 = v48 >> 8;
          else
            v49 = WTF::StringImpl::hashSlowCase(v13);
          for (i = 0; ; v49 = i + v51)
          {
            v51 = v49 & v47;
            v52 = *(WTF **)(v14 + 8 * (v49 & v47));
            if (v52 != (WTF *)-1)
            {
              if (!v52)
                goto LABEL_12;
              if ((WTF::equal(v52, v13, v12) & 1) != 0)
                break;
            }
            ++i;
          }
          v15 = 0;
          if (!v13)
          {
LABEL_16:
            if ((v15 & 1) != 0)
              return 0;
            goto LABEL_18;
          }
        }
        else
        {
LABEL_12:
          v15 = 1;
          if (!v13)
            goto LABEL_16;
        }
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
        goto LABEL_16;
      }
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_11;
  }
LABEL_18:
  if (a3
    && (v16 = *((_QWORD *)a3 + 5)) != 0
    && (CFRetain(*(CFTypeRef *)(v16 + 8)),
        v17 = WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v16, (unsigned __int8 *)a2, 0),
        CFRelease(*(CFTypeRef *)(v16 + 8)),
        (v17 & 1) != 0))
  {
    return 3;
  }
  else
  {
    v18 = (_QWORD *)(a1 + 176);
    WebKit::WebExtensionContext::removeExpired((WebKit::WebExtensionContext *)a1, (uint64_t *)(a1 + 176), (double *)(a1 + 192), CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"));
    v19 = (_QWORD *)(a1 + 184);
    WebKit::WebExtensionContext::removeExpired((WebKit::WebExtensionContext *)a1, (uint64_t *)(a1 + 184), (double *)(a1 + 200), CFSTR("_WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved"));
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke;
    aBlock[3] = &__block_descriptor_40_e9_B16__0_v8l;
    aBlock[4] = a2;
    v20 = (uint64_t (**)(void *, _QWORD))_Block_copy(aBlock);
    v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 184));
    v22 = v21;
    v24 = v23;
    if (*(_QWORD *)(a1 + 184))
      v25 = *(_QWORD *)(a1 + 184) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 184) - 4);
    else
      v25 = 0;
    if ((_QWORD *)v25 == v21)
    {
LABEL_32:
      v26 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 176));
      v27 = v26;
      v29 = v28;
      if (*v18)
        v30 = *v18 + 16 * *(unsigned int *)(*v18 - 4);
      else
        v30 = 0;
      if ((_QWORD *)v30 == v26)
      {
LABEL_43:
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 3221225472;
        v59[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2;
        v59[3] = &__block_descriptor_40_e9_B16__0_v8l;
        v59[4] = a2;
        v31 = (uint64_t (**)(void *, _QWORD))_Block_copy(v59);
        v32 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 184));
        v33 = v32;
        v35 = v34;
        if (*v19)
          v36 = *v19 + 16 * *(unsigned int *)(*v19 - 4);
        else
          v36 = 0;
        if ((_QWORD *)v36 == v32)
        {
LABEL_54:
          v37 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 176));
          v38 = v37;
          v40 = v39;
          if (*v18)
            v41 = *v18 + 16 * *(unsigned int *)(*v18 - 4);
          else
            v41 = 0;
          if ((_QWORD *)v41 == v37)
          {
LABEL_65:
            if ((a4 & 2) != 0)
            {
              v9 = 0;
            }
            else
            {
              WebKit::WebExtension::allRequestedMatchPatterns(*(id **)(a1 + 56), (uint64_t *)&v58);
              v42 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v58);
              v44 = v42;
              v45 = v43;
              if (v58)
                v46 = &v58[*((unsigned int *)v58 - 1)];
              else
                v46 = 0;
              if (v46 == v42)
              {
LABEL_89:
                if ((a4 & 1) != 0)
                {
                  MEMORY[0x19AEABCC8](&v57, CFSTR("tabs"));
                  v53 = WebKit::WebExtensionContext::permissionState(a1, &v57, a3, a4 | 2u) & 0xFFFFFFFE;
                  v54 = v57;
                  v57 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, v43);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  if (v53 == 2)
                    goto LABEL_98;
                }
                if ((a4 & 4) != 0
                  && (v55 = *(_QWORD *)(a1 + 56),
                      WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v55),
                      (WebKit::WebExtensionMatchPattern::patternsMatchPattern((_QWORD **)(v55 + 96), (unsigned __int8 *)a2) & 1) != 0))
                {
LABEL_98:
                  v9 = -1;
                }
                else
                {
                  v9 = 0;
                }
              }
              else
              {
                while ((v20[2](v20, *v44) & 1) == 0)
                {
                  if ((v31[2](v31, *v44) & 1) != 0)
                    goto LABEL_98;
                  while (++v44 != (uint64_t *)v45)
                  {
                    if ((unint64_t)(*v44 + 1) > 1)
                      goto LABEL_88;
                  }
                  v44 = (uint64_t *)v45;
LABEL_88:
                  if (v44 == v46)
                    goto LABEL_89;
                }
                v9 = 1;
              }
              if (v58)
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v58, v43);
            }
          }
          else
          {
            while ((v31[2](v31, *v38) & 1) == 0)
            {
              while (1)
              {
                v38 += 2;
                if (v38 == v40)
                  break;
                if ((unint64_t)(*v38 + 1) > 1)
                  goto LABEL_64;
              }
              v38 = v40;
LABEL_64:
              if (v38 == (_QWORD *)v41)
                goto LABEL_65;
            }
            v9 = 2;
          }
        }
        else
        {
          while ((v31[2](v31, *v33) & 1) == 0)
          {
            while (1)
            {
              v33 += 2;
              if (v33 == v35)
                break;
              if ((unint64_t)(*v33 + 1) > 1)
                goto LABEL_53;
            }
            v33 = v35;
LABEL_53:
            if (v33 == (_QWORD *)v36)
              goto LABEL_54;
          }
          v9 = -2;
        }

      }
      else
      {
        while ((v20[2](v20, *v27) & 1) == 0)
        {
          while (1)
          {
            v27 += 2;
            if (v27 == v29)
              break;
            if ((unint64_t)(*v27 + 1) > 1)
              goto LABEL_42;
          }
          v27 = v29;
LABEL_42:
          if (v27 == (_QWORD *)v30)
            goto LABEL_43;
        }
        v9 = 3;
      }
    }
    else
    {
      while ((v20[2](v20, *v22) & 1) == 0)
      {
        while (1)
        {
          v22 += 2;
          if (v22 == v24)
            break;
          if ((unint64_t)(*v22 + 1) > 1)
            goto LABEL_31;
        }
        v22 = v24;
LABEL_31:
        if (v22 == (_QWORD *)v25)
          goto LABEL_32;
      }
      v9 = -3;
    }

  }
  return v9;
}

void sub_19774FF4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t *a10)
{
  void *v10;
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::hasPermissions(uint64_t *a1, _QWORD **a2, _QWORD **a3)
{
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t result;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  char v20;
  unsigned __int8 **v21;
  char v22;
  uint64_t v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  unsigned __int8 **v26;

  v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v8 = v6;
  v10 = v9;
  if (*a2)
    v11 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v11 = 0;
  if ((WTF::StringImpl **)v11 == v6)
  {
LABEL_10:
    v13 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a3);
    v14 = v13;
    v16 = v15;
    if (*a3)
      v17 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    else
      v17 = 0;
    if ((unsigned __int8 **)v17 == v13)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        WebKit::WebExtensionContext::currentPermissionMatchPatterns((WebKit::WebExtensionContext *)a1, &v23);
        v18 = v24;
        v19 = v26;
        if (v24 == v26)
          return 0;
        v20 = 0;
        v21 = v25;
        do
        {
          v22 = WebKit::WebExtensionMatchPattern::matchesPattern(*v18, *v14, 2);
          if ((v22 & 1) != 0)
            goto LABEL_23;
          while (1)
          {
            v18 += 2;
            if (v18 == v21)
              break;
            if ((unint64_t)(*v18 + 1) > 1)
              goto LABEL_21;
          }
          v18 = v21;
LABEL_21:
          v20 |= v22;
        }
        while (v18 != v19);
        if ((v20 & 1) == 0)
          return 0;
LABEL_23:
        while (++v14 != v16)
        {
          if ((unint64_t)(*v14 + 1) > 1)
            goto LABEL_27;
        }
        v14 = v16;
LABEL_27:
        if (v14 == (unsigned __int8 **)v17)
          return 1;
      }
    }
  }
  else
  {
    while (1)
    {
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 18, v8, v7);
      if (!(_DWORD)result)
        break;
      while (++v8 != v10)
      {
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_9;
      }
      v8 = v10;
LABEL_9:
      if (v8 == (WTF::StringImpl **)v11)
        goto LABEL_10;
    }
  }
  return result;
}

WTF::StringImpl **WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::appendOrMoveToLast(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl ***v10;
  int i;
  unsigned int v12;
  WTF::StringImpl ***v13;
  WTF **v14;
  WTF::StringImpl **result;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  WTF::StringImpl **v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF::StringImpl ***)(v6 + 8 * (v9 & v7));
    v14 = *v13;
    if (*v13 != (WTF::StringImpl **)-1)
      break;
    v10 = (WTF::StringImpl ***)(v6 + 8 * v12);
LABEL_13:
    v9 = i + v12;
  }
  if (!v14)
  {
    if (v10)
    {
      *v10 = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = v10;
    }
    result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
    v16 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v16 += 2;
    *result = v16;
    v17 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(result + 3) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(result + 1) = v17;
    result[5] = 0;
    result[6] = 0;
    *v13 = result;
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_29;
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_29:
      v26 = 1;
      goto LABEL_35;
    }
    v13 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::expand(a2, v13);
    result = *v13;
    goto LABEL_29;
  }
  if (!WTF::equal(*v14, *(const WTF::StringImpl **)a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  result = *v13;
  v20 = (*v13)[5];
  v21 = (*v13)[6];
  if (v20)
  {
    *((_QWORD *)v20 + 6) = v21;
    v21 = result[6];
  }
  else
  {
    a2[1] = (uint64_t)v21;
  }
  v26 = 0;
  if (v21)
    v27 = (WTF::StringImpl **)((char *)v21 + 40);
  else
    v27 = (WTF::StringImpl **)(a2 + 2);
  *v27 = v20;
LABEL_35:
  v28 = (WTF::StringImpl ***)a2[2];
  result[5] = (WTF::StringImpl *)v28;
  result[6] = 0;
  if (v28)
    v29 = v28 + 6;
  else
    v29 = (WTF::StringImpl ***)(a2 + 1);
  *v29 = result;
  a2[2] = (uint64_t)result;
  v30 = *v13;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v26;
  return result;
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  WTF::URL *v13;
  const WTF::StringImpl *v14;
  uint64_t *v15;
  WTF::URL *v16;
  int v17;
  WTF::URL *v18;
  const WTF::StringImpl *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  uint64_t *v31;
  int v32;
  int i;
  uint64_t v34;
  WTF **v35;
  uint64_t *v36;
  uint64_t **v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  WTF **v58;
  const WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  WTF::StringImpl *v68;
  unsigned int v70;
  WTF::StringImpl *v71[5];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t *)(v4 + 208);
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::appendOrMoveToLast((uint64_t)v71, (uint64_t *)(v4 + 208), *(_QWORD *)(a1 + 40));
  v6 = (uint64_t *)(v4 + 232);
  v7 = *(_QWORD *)(v4 + 232);
  v8 = *(_QWORD *)(a1 + 40);
  if (v7
    || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)(v4 + 232), 0), (v7 = *v6) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_DWORD *)(*(_QWORD *)v8 + 16);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v8);
  v12 = v11 & v9;
  v13 = (WTF::URL *)(v7 + 48 * v12);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v13) & 1) != 0)
  {
    v15 = (uint64_t *)(v4 + 232);
  }
  else
  {
    v70 = a2;
    v16 = 0;
    v17 = 1;
    do
    {
      v18 = v13;
      if (*(_QWORD *)v13 != -1)
      {
        v18 = v16;
        if (WTF::equal(*(WTF **)v13, *(const WTF::StringImpl **)v8, v14))
        {
          a2 = v70;
          *(_BYTE *)(v7 + 48 * v12 + 40) = v70;
          v15 = (uint64_t *)(v4 + 232);
          v5 = (uint64_t *)(v4 + 208);
          goto LABEL_25;
        }
      }
      v12 = ((_DWORD)v12 + v17) & v9;
      v13 = (WTF::URL *)(v7 + 48 * v12);
      ++v17;
      v16 = v18;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v13));
    a2 = v70;
    v15 = (uint64_t *)(v4 + 232);
    v5 = (uint64_t *)(v4 + 208);
    if (v18)
    {
      WTF::URL::URL(v18);
      *((_BYTE *)v18 + 40) = 0;
      --*(_DWORD *)(*(_QWORD *)(v4 + 232) - 16);
      v13 = v18;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)v8);
  v20 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)((char *)v13 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)((char *)v13 + 24) = v20;
  *((_BYTE *)v13 + 40) = a2;
  v21 = *v15;
  if (*v15)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v15;
  if (*v15)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (3 * v26 <= 4 * v25)
LABEL_23:
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(v15, (WTF::StringImpl **)v13);
LABEL_25:
  v27 = *v5;
  if (!*v5 || *(_DWORD *)(v27 - 12) < 0x101u)
    return a2;
  v28 = *(_DWORD *)(v27 - 8);
  v29 = **(WTF::StringImpl ***)(v4 + 216);
  v30 = *((_DWORD *)v29 + 4);
  v31 = v5;
  if (v30 >= 0x100)
    v32 = v30 >> 8;
  else
    v32 = WTF::StringImpl::hashSlowCase(v29);
  for (i = 0; ; v32 = i + v34)
  {
    v34 = v32 & v28;
    v35 = *(WTF ***)(v27 + 8 * v34);
    if (v35 != (WTF **)-1)
    {
      if (!v35)
      {
        v36 = v31;
        v37 = (uint64_t **)(*v31 + 8 * *(unsigned int *)(*v31 - 4));
        goto LABEL_37;
      }
      if ((WTF::equal(*v35, **(const WTF::StringImpl ***)(v4 + 216), v19) & 1) != 0)
        break;
    }
    ++i;
  }
  v37 = (uint64_t **)(v27 + 8 * v34);
  v36 = v31;
LABEL_37:
  WTF::URL::URL((uint64_t)v71, *v37);
  v39 = *v36;
  if (*v36)
    v39 += 8 * *(unsigned int *)(v39 - 4);
  if ((uint64_t **)v39 != v37)
  {
    *v37 = (uint64_t *)-1;
    ++*(_DWORD *)(*v36 - 16);
    v40 = *v36;
    v41 = *v36 ? *(_DWORD *)(v40 - 12) - 1 : -1;
    *(_DWORD *)(v40 - 12) = v41;
    v42 = *v36;
    if (*v36)
    {
      v43 = 6 * *(_DWORD *)(v42 - 12);
      v44 = *(_DWORD *)(v42 - 4);
      if (v43 < v44 && v44 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(v36, v44 >> 1, 0);
    }
  }
  v46 = *(WTF::StringImpl ***)(v4 + 216);
  v47 = v46[5];
  v48 = v46[6];
  if (v47)
  {
    *((_QWORD *)v47 + 6) = v48;
    v48 = v46[6];
  }
  else
  {
    *(_QWORD *)(v4 + 216) = v48;
  }
  v49 = a2;
  if (v48)
    v50 = (WTF::StringImpl **)((char *)v48 + 40);
  else
    v50 = (WTF::StringImpl **)(v4 + 224);
  *v50 = v47;
  v51 = *v46;
  *v46 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v38);
    else
      *(_DWORD *)v51 -= 2;
  }
  WTF::fastFree((WTF *)v46, v38);
  v53 = *v15;
  if (*v15)
  {
    v54 = *(_DWORD *)(v53 - 8);
    v55 = *((_DWORD *)v71[0] + 4);
    if (v55 >= 0x100)
      v56 = v55 >> 8;
    else
      v56 = WTF::StringImpl::hashSlowCase(v71[0]);
    v57 = v56 & v54;
    v58 = (WTF **)(v53 + 48 * (v56 & v54));
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v58) & 1) != 0)
    {
LABEL_70:
      v61 = *v15;
      if (!*v15)
        goto LABEL_86;
      v58 = (WTF **)(v61 + 48 * *(unsigned int *)(v61 - 4));
    }
    else
    {
      v60 = 1;
      while (*v58 == (WTF *)-1 || (WTF::equal(*v58, v71[0], v59) & 1) == 0)
      {
        v57 = (v57 + v60) & v54;
        v58 = (WTF **)(v53 + 48 * v57);
        ++v60;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v58))
          goto LABEL_70;
      }
      v61 = *v15;
      if (!*v15)
        goto LABEL_73;
    }
    v61 += 48 * *(unsigned int *)(v61 - 4);
    if ((WTF **)v61 != v58)
    {
LABEL_73:
      if ((WTF **)v61 != v58)
      {
        WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(v58, v52);
        ++*(_DWORD *)(*v15 - 16);
        v62 = *v15;
        v63 = *v15 ? *(_DWORD *)(v62 - 12) - 1 : -1;
        *(_DWORD *)(v62 - 12) = v63;
        v64 = *v15;
        if (*v15)
        {
          v65 = 6 * *(_DWORD *)(v64 - 12);
          v66 = *(_DWORD *)(v64 - 4);
          if (v65 < v66 && v66 >= 9)
            WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(v15, v66 >> 1, 0);
        }
      }
    }
  }
LABEL_86:
  v68 = v71[0];
  v71[0] = 0;
  a2 = v49;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v52);
    else
      *(_DWORD *)v68 -= 2;
  }
  return a2;
}

void sub_197750848(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a2 + 49)
    && (*(_BYTE *)(a2 + 48) || *(_BYTE *)(a2 + 41) && ((v3 = *(_QWORD *)(a2 + 24)) == 0 || !*(_DWORD *)(v3 + 4))))
  {
    return 0;
  }
  else
  {
    return WebKit::WebExtensionMatchPattern::matchesURL((_BYTE *)a2, *(WTF::URL **)(a1 + 32), 0);
  }
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a2 + 49)
    && (*(_BYTE *)(a2 + 48) || *(_BYTE *)(a2 + 41) && ((v3 = *(_QWORD *)(a2 + 24)) == 0 || !*(_DWORD *)(v3 + 4))))
  {
    return WebKit::WebExtensionMatchPattern::matchesURL((_BYTE *)a2, *(WTF::URL **)(a1 + 32), 0);
  }
  else
  {
    return 0;
  }
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 49)
    && (*(_BYTE *)(v2 + 48) || *(_BYTE *)(v2 + 41) && ((v4 = *(_QWORD *)(v2 + 24)) == 0 || !*(_DWORD *)(v4 + 4))))
  {
    return 0;
  }
  else
  {
    return WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v2, a2, 0);
  }
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 49)
    && (*(_BYTE *)(v2 + 48) || *(_BYTE *)(v2 + 41) && ((v4 = *(_QWORD *)(v2 + 24)) == 0 || !*(_DWORD *)(v4 + 4))))
  {
    return WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v2, a2, 0);
  }
  else
  {
    return 0;
  }
}

WTF::StringImpl **WebKit::WebExtensionContext::setPermissionState(uint64_t a1, int a2, WTF::StringImpl **a3, double a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **result;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12[2];

  v12[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v12[0] = v7;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, v12, (const WTF::StringImpl *)1);
  v9 = v12[0];
  v12[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (a2 == -3)
  {
    WebKit::WebExtensionContext::denyPermissions(a1, (uint64_t *)&v11, a4);
  }
  else if (a2)
  {
    if (a2 == 3)
      WebKit::WebExtensionContext::grantPermissions(a1, (uint64_t *)&v11, a4);
  }
  else
  {
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 144), (uint64_t *)&v11, (double *)(a1 + 160), CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"));
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 152), (uint64_t *)&v11, (double *)(a1 + 168), CFSTR("_WKWebExtensionContextDeniedPermissionsWereRemoved"));
  }
  result = v11;
  if (v11)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v8);
  return result;
}

void sub_197750AB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, WTF::StringImpl *a11)
{
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::setPermissionState(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;

  WebKit::WebExtensionMatchPattern::getOrCreate(a3, 6, &v8);
  if (v8)
  {
    WebKit::WebExtensionContext::setPermissionState(a1, a2, v8, a4);
    v7 = v8;
    v8 = 0;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void sub_197750B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionContext::setPermissionState(uint64_t a1, int a2, uint64_t a3, double a4)
{
  void *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t *v13;
  uint64_t v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  CFRetain(*(CFTypeRef *)(a3 + 8));
  v14[0] = a3;
  WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, v14, 1);
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  if (!*(_BYTE *)(a3 + 49))
    goto LABEL_9;
  if (*(_BYTE *)(a3 + 48))
  {
LABEL_5:
    v10 = 1;
    goto LABEL_10;
  }
  if (*(_BYTE *)(a3 + 41))
  {
    v11 = *(_QWORD *)(a3 + 24);
    if (!v11)
      goto LABEL_5;
    v10 = *(_DWORD *)(v11 + 4) == 0;
  }
  else
  {
LABEL_9:
    v10 = 0;
  }
LABEL_10:
  if (a2 == -3)
  {
    WebKit::WebExtensionContext::denyPermissionMatchPatterns(a1, (uint64_t *)&v13, v10, a4);
  }
  else if (a2)
  {
    if (a2 == 3)
      WebKit::WebExtensionContext::grantPermissionMatchPatterns(a1, (uint64_t *)&v13, v10, a4);
  }
  else
  {
    WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(a1, (uint64_t *)&v13, v10);
    WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(a1, (uint64_t *)&v13, v10);
  }
  result = v13;
  if (v13)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v13, v8);
  return result;
}

void sub_197750CD4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::hasAccessToAllURLs(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  WebKit::WebExtensionContext::currentPermissionMatchPatterns(this, &v3);
  v1 = v4;
  if (v4 == v6)
    return 0;
  do
  {
    result = *(_BYTE *)(*(_QWORD *)v1 + 48) != 0;
    if (*(_BYTE *)(*(_QWORD *)v1 + 48))
      break;
    while (1)
    {
      v1 += 16;
      if (v1 == v5)
        break;
      if ((unint64_t)(*(_QWORD *)v1 + 1) > 1)
        goto LABEL_7;
    }
    v1 = v5;
LABEL_7:
    ;
  }
  while (v1 != v6);
  return result;
}

uint64_t WebKit::WebExtensionContext::hasAccessToAllHosts(WebKit::WebExtensionContext *this)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD **)((char *)this + 176);
  WebKit::WebExtensionContext::removeExpired(this, (char *)this + 176, (char *)this + 192, CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"));
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
  v5 = (_QWORD *)*((_QWORD *)this + 22);
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 == v3)
    return 0;
  while (1)
  {
    v6 = *v3;
    if (*(_BYTE *)(*v3 + 49))
    {
      if (*(_BYTE *)(v6 + 48))
        return 1;
      if (*(_BYTE *)(v6 + 41))
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (!v7 || !*(_DWORD *)(v7 + 4))
          return 1;
      }
    }
    while (1)
    {
      v3 += 2;
      if (v3 == v4)
        break;
      if ((unint64_t)(*v3 + 1) > 1)
        goto LABEL_13;
    }
    v3 = v4;
LABEL_13:
    if (v3 == v5)
      return 0;
  }
}

void WebKit::WebExtensionContext::getOrCreateWindow(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id WeakRetained;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 488);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(a1 + 488);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(_QWORD **)(a1 + 488);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v9 = (_QWORD *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_8:
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_13;
  }
  v11 = 0;
LABEL_13:
  if (v11 == v9)
  {
LABEL_21:
    v15 = WTF::fastMalloc((WTF *)0x30);
    WebKit::WebExtensionWindow::WebExtensionWindow(v15, a1, v5);
    v16 = (uint64_t *)(a1 + 488);
    *(_QWORD *)a3 = v15;
    v17 = *(_QWORD *)(v15 + 16);
    v18 = *v16;
    if (*v16
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16),
          (v18 = *v16) != 0))
    {
      v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      v19 = 0;
    }
    v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = (_QWORD *)(v18 + 16 * v23);
    v25 = *v24;
    if (*v24)
    {
      v26 = 0;
      v27 = 1;
      while (v25 != v17)
      {
        if (v25 == -1)
          v26 = v24;
        v23 = (v23 + v27) & v19;
        v24 = (_QWORD *)(v18 + 16 * v23);
        v25 = *v24;
        ++v27;
        if (!*v24)
        {
          if (v26)
          {
            *v26 = 0;
            v26[1] = 0;
            --*(_DWORD *)(*v16 - 16);
            v24 = v26;
          }
          goto LABEL_32;
        }
      }
      ++*(_DWORD *)v15;
      v32 = v24[1];
      v24[1] = v15;
      if (v32)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v32);
      goto LABEL_45;
    }
LABEL_32:
    *v24 = v17;
    v28 = *(_DWORD **)a3;
    *v28 = **(_DWORD **)a3 + 1;
    v29 = v24[1];
    v24[1] = v28;
    if (v29)
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v29);
    v30 = *v16;
    if (*v16)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v33 = *v16;
    if (*v16)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
      {
LABEL_45:
        v37 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
        {
          v38 = *(_QWORD *)(*(_QWORD *)a3 + 16);
          v39 = 134349056;
          v40 = v38;
          _os_log_debug_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEBUG, "Window %{public}llu was created", (uint8_t *)&v39, 0xCu);
        }
        goto LABEL_47;
      }
    }
    else if (3 * v36 > 4 * v35)
    {
      goto LABEL_45;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16);
    goto LABEL_45;
  }
  while (1)
  {
    v12 = v9[1];
    ++*(_DWORD *)v12;
    *(_QWORD *)a3 = v12;
    WeakRetained = objc_loadWeakRetained((id *)(v12 + 32));

    if (WeakRetained == v5)
      break;
    *(_QWORD *)a3 = 0;
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v12);
    v14 = v9 + 2;
    v9 = v8;
    if (v14 != v8)
    {
      v9 = v14;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v9 == v11)
      goto LABEL_21;
  }
LABEL_47:

}

void sub_197751190(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::getWindow(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 == -3)
  {
    v13 = a4;
    if (a4)
    {
      WebKit::WebExtensionContext::getCurrentTab(a1, a3, 1, a5, buf);
      v14 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        WebKit::WebExtensionTab::window(*(WebKit::WebExtensionTab **)buf, &v25);
        v11 = v25;
        WTF::RefCounted<WebKit::WebExtensionTab>::deref(v14);
        if (v11)
          goto LABEL_10;
      }
    }
    if (*(_DWORD *)(a1 + 508))
    {
      WebKit::WebExtensionContext::getWindow(buf, a1, **(_QWORD **)(a1 + 496), 0, 0, a5);
      v11 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        goto LABEL_10;
    }
    v18 = qword_1ECE710C8;
    v19 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v19)
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = a3;
        v20 = "Current window for page %{public}llu was not found";
LABEL_23:
        v21 = v18;
        v22 = 12;
LABEL_27:
        _os_log_error_impl(&dword_196BCC000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
      }
    }
    else if (v19)
    {
      *(_WORD *)buf = 0;
      v20 = "Current window not found (no frontmost window)";
      v21 = v18;
      v22 = 2;
      goto LABEL_27;
    }
LABEL_25:
    *a6 = 0;
    return;
  }
  if (a2 == -2)
    goto LABEL_25;
  v10 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 488), a2);
  if (!v10)
  {
    v18 = qword_1ECE710C8;
    if (!os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = a2;
    v20 = "Window %{public}llu was not found";
    goto LABEL_23;
  }
  v11 = (uint64_t)v10;
  ++*v10;
LABEL_10:
  v15 = *(_QWORD *)(v11 + 24);
  if (v15
    && *(_QWORD *)(v15 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(v11 + 32)))
  {
    if ((a5 & 1) != 0
      || !WebKit::WebExtensionWindow::isPrivate((WebKit::WebExtensionWindow *)v11)
      || ((v16 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8)) != 0 ? (v17 = v16 - 16) : (v17 = 0), *(_BYTE *)(v17 + 249)))
    {
      *a6 = v11;
      return;
    }
  }
  else
  {
    v23 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_QWORD *)(v11 + 16);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v24;
      _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "Window %{public}llu has nil delegate; reference not removed via didCloseWindow: before release",
        buf,
        0xCu);
    }
    WebKit::WebExtensionContext::forgetWindow(a1, *(_QWORD *)(v11 + 16));
  }
  *a6 = 0;
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
}

void sub_197751470(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::getCurrentTab(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _DWORD **v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _DWORD *v36;
  NSObject *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _OWORD buf[3];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebExtensionContext::isBackgroundPage(a1, a2))
  {
    if ((a3 & 1) == 0)
    {
LABEL_64:
      *a5 = 0;
      return;
    }
    if (!*(_DWORD *)(a1 + 508)
      || (WebKit::WebExtensionContext::getWindow(buf, a1, **(_QWORD **)(a1 + 496), 0, 0, 0),
          (v10 = *(_QWORD *)&buf[0]) == 0))
    {
LABEL_62:
      v37 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(_QWORD *)((char *)buf + 4) = a2;
        _os_log_debug_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEBUG, "Tab for page %{public}llu was not found", (uint8_t *)buf, 0xCu);
      }
      goto LABEL_64;
    }
    WebKit::WebExtensionWindow::activeTab(*(uint64_t *)&buf[0], 0, &v41);
    v11 = (_DWORD *)v41;
  }
  else
  {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(buf, (_QWORD *)(a1 + 552));
    v12 = *(_QWORD *)(a1 + 552);
    if (v12)
    {
      v13 = *(unsigned int *)(v12 - 4);
      v14 = v12 + 16 * v13;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v41 = a1 + 552;
    v42 = v14;
    v43 = v14;
    v44 = v14;
    v45 = v12 + 16 * v13;
    v46 = 0;
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v41);
    v15 = v42;
    while (1)
    {
      if (*((_QWORD *)&buf[0] + 1) == v15)
      {
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(buf, (_QWORD *)(a1 + 536));
        v18 = *(_QWORD *)(a1 + 536);
        if (v18)
        {
          v19 = *(unsigned int *)(v18 - 4);
          v20 = v18 + 16 * v19;
        }
        else
        {
          v20 = 0;
          v19 = 0;
        }
        v41 = a1 + 536;
        v42 = v20;
        v43 = v20;
        v44 = v20;
        v45 = v18 + 16 * v19;
        v46 = 0;
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v41);
        v23 = v42;
        while (1)
        {
          if (*((_QWORD *)&buf[0] + 1) == v23)
          {
            WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)buf);
            if (HIDWORD(buf[0]))
            {
              v27 = *(_DWORD ***)&buf[0];
              v28 = 8 * HIDWORD(buf[0]);
              while (1)
              {
                v11 = *v27;
                *v11 = **v27 + 1;
                WebKit::WebExtensionTab::mainWebView((WebKit::WebExtensionTab *)v11);
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                v30 = v29;
                if (v29)
                {
                  objc_msgSend(v29, "_page");
                  if (*(_QWORD *)(*(_QWORD *)(v41 + 32) + 744) == a2)
                    break;
                }

                WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
                ++v27;
                v28 -= 8;
                if (!v28)
                  goto LABEL_39;
              }
              ++*v11;

              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
            }
            else
            {
LABEL_39:
              v11 = 0;
            }
            WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v26);
            goto LABEL_44;
          }
          v24 = *(_QWORD *)(**((_QWORD **)&buf[0] + 1) + 8);
          v25 = v24 ? v24 - 16 : 0;
          if (*(_QWORD *)(*(_QWORD *)(v25 + 32) + 744) == a2)
            break;
          WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)buf);
        }
        v31 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 528), *(_QWORD *)(*((_QWORD *)&buf[0] + 1) + 8));
        v11 = v31;
        if (v31)
        {
          ++*v31;
          goto LABEL_45;
        }
LABEL_44:
        if (!v11)
          goto LABEL_62;
        goto LABEL_45;
      }
      v16 = *(_QWORD *)(**((_QWORD **)&buf[0] + 1) + 8);
      v17 = v16 ? v16 - 16 : 0;
      if (*(_QWORD *)(*(_QWORD *)(v17 + 32) + 744) == a2)
        break;
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)buf);
    }
    if (!a3)
      goto LABEL_64;
    v21 = *(_QWORD *)(*((_QWORD *)&buf[0] + 1) + 8);
    v11 = *(_DWORD **)(v21 + 32);
    if (v11)
    {
      ++*v11;
      WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)v11, &v40);
      v22 = v40;
      ++*v11;
      if (v22)
        goto LABEL_23;
      goto LABEL_24;
    }
    v36 = *(_DWORD **)(v21 + 40);
    if (!v36)
      goto LABEL_62;
    v10 = (uint64_t)v36;
    ++*v36;
    WebKit::WebExtensionWindow::activeTab((uint64_t)v36, 0, (uint64_t *)&v39);
    v11 = v39;
    if (v39)
    {
      ++*v39;
      v22 = v10;
LABEL_23:
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v22);
LABEL_24:
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
      if (v11)
        goto LABEL_45;
      goto LABEL_62;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
  if (!v11)
    goto LABEL_62;
LABEL_45:
  v32 = *((_QWORD *)v11 + 3);
  if (v32
    && *(_QWORD *)(v32 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)v11 + 4))
  {
    if ((a4 & 1) != 0
      || !WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)v11)
      || ((v33 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 8)) != 0 ? (v34 = v33 - 16) : (v34 = 0), *(_BYTE *)(v34 + 249)))
    {
      *a5 = v11;
      return;
    }
  }
  else
  {
    v35 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v38 = *((_QWORD *)v11 + 2);
      LODWORD(buf[0]) = 134349056;
      *(_QWORD *)((char *)buf + 4) = v38;
      _os_log_error_impl(&dword_196BCC000, v35, OS_LOG_TYPE_ERROR, "Tab %{public}llu has nil delegate; reference not removed via didCloseTab: before release",
        (uint8_t *)buf,
        0xCu);
    }
    WebKit::WebExtensionContext::forgetTab((uint64_t *)a1, *((_QWORD *)v11 + 2));
  }
  *a5 = 0;
  WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
}

void sub_197751908(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::forgetWindow(uint64_t result, uint64_t a2)
{
  BOOL v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;

  if (*(_BYTE *)(result + 520))
    v2 = *(_QWORD *)(result + 512) == a2;
  else
    v2 = 0;
  if (v2)
    *(_BYTE *)(result + 520) = 0;
  v3 = *(char **)(result + 496);
  v4 = *(unsigned int *)(result + 508);
  v5 = &v3[8 * v4];
  if ((_DWORD)v4)
  {
    LODWORD(v4) = 0;
    v6 = v5;
    v7 = v5;
    do
    {
      if (*(_QWORD *)v3 == a2)
      {
        v8 = v3;
        if (v7 != (char *)(*(_QWORD *)(result + 496) + 8 * *(unsigned int *)(result + 508)))
        {
          if (v6 == v3)
          {
            v8 = v7;
          }
          else
          {
            if (v6 <= v7)
            {
              v13 = 0;
              v12 = (v3 - v6) >> 3;
              do
              {
                *(_QWORD *)&v7[((v3 - v6) & 0xFFFFFFFFFFFFFFF8) - 8 + v13] = *(_QWORD *)&v3[v13 - 8];
                v13 -= 8;
              }
              while (&v3[v13] != v6);
            }
            else
            {
              v9 = v7;
              v10 = v6;
              do
              {
                v11 = *(_QWORD *)v10;
                v10 += 8;
                *(_QWORD *)v9 = v11;
                v9 += 8;
              }
              while (v10 != v3);
              v12 = (v3 - v6) >> 3;
            }
            v8 = &v7[8 * v12];
          }
        }
        v6 = v3 + 8;
        LODWORD(v4) = v4 + 1;
        v7 = v8;
      }
      v3 += 8;
    }
    while (v3 < v5);
    v3 = *(char **)(result + 496);
    v14 = *(unsigned int *)(result + 508);
    v5 = v7;
  }
  else
  {
    v14 = 0;
    v6 = &v3[8 * v4];
  }
  v15 = &v3[8 * v14];
  if (v6 != v15)
  {
    if (v6 <= v5)
    {
      v17 = &v5[((v15 - v6) & 0xFFFFFFFFFFFFFFF8) - 8];
      do
      {
        v18 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v17 = v18;
        v17 -= 8;
      }
      while (v15 != v6);
    }
    else
    {
      do
      {
        v16 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v5 = v16;
        v5 += 8;
      }
      while (v6 != v15);
    }
  }
  *(_DWORD *)(result + 508) -= v4;
  v19 = *(_QWORD *)(result + 488);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(_QWORD *)(v19 + 16 * v24);
    if (v25 != a2)
    {
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(_QWORD *)(v19 + 16 * v24);
        ++v26;
        if (v25 == a2)
          goto LABEL_37;
      }
      v24 = *(unsigned int *)(v19 - 4);
    }
LABEL_37:
    if (v24 != *(_DWORD *)(v19 - 4))
    {
      v27 = (uint64_t *)(result + 488);
      v28 = (_QWORD *)(v19 + 16 * v24);
      result = v28[1];
      *v28 = -1;
      v28[1] = 0;
      if (result)
        result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
      ++*(_DWORD *)(*v27 - 16);
      v29 = *v27;
      if (*v27)
        v30 = *(_DWORD *)(v29 - 12) - 1;
      else
        v30 = -1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *v27;
      if (*v27)
      {
        v32 = 6 * *(_DWORD *)(v31 - 12);
        v33 = *(_DWORD *)(v31 - 4);
        if (v32 < v33 && v33 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v27, v33 >> 1);
      }
    }
  }
  return result;
}

void WebKit::WebExtensionContext::getOrCreateTab(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = (void *)a1[71];
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v6);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "objectForKey:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    WebKit::WebExtensionContext::getTab(a1, objc_msgSend(v7, "unsignedLongLongValue"), 1, (WebKit::WebExtensionTab **)v34);
    if (*(_QWORD *)v34)
    {
      *(_QWORD *)a3 = *(_QWORD *)v34;

      goto LABEL_30;
    }
  }

  v8 = WTF::fastMalloc((WTF *)0x38);
  WebKit::WebExtensionTab::WebExtensionTab(v8, (uint64_t)a1, v5);
  *(_QWORD *)a3 = v8;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = a1 + 66;
  v11 = a1[66];
  if (v11
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 66),
        (v11 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (uint64_t *)(v11 + 16 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != v9)
    {
      if (v18 == -1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (uint64_t *)(v11 + 16 * v16);
      v18 = *v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          v17 = v19;
        }
        goto LABEL_15;
      }
    }
    ++*(_DWORD *)v8;
    v25 = v17[1];
    v17[1] = v8;
    if (v25)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref(v25);
    goto LABEL_28;
  }
LABEL_15:
  *v17 = v9;
  v21 = *(_DWORD **)a3;
  *v21 = **(_DWORD **)a3 + 1;
  v22 = v17[1];
  v17[1] = (uint64_t)v21;
  if (v22)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v22);
  v23 = *v10;
  if (*v10)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *v10;
  if (*v10)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 <= 0x400)
  {
    if (3 * v29 > 4 * v28)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (v29 <= 2 * v28)
LABEL_27:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 66);
LABEL_28:
  v30 = (void *)a1[71];
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v30);
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v9);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setObject:forKey:", v31, v5);

  v32 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    *(_DWORD *)v34 = 134349056;
    *(_QWORD *)&v34[4] = v33;
    _os_log_debug_impl(&dword_196BCC000, v32, OS_LOG_TYPE_DEBUG, "Tab %{public}llu was created", v34, 0xCu);
  }
LABEL_30:

}

void sub_197751ED0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::getTab(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WebKit::WebExtensionTab **a4@<X8>)
{
  uint64_t v8;
  WebKit::WebExtensionTab *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 == -2)
  {
LABEL_19:
    *a4 = 0;
    return;
  }
  v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1[66], a2);
  if (!v8)
  {
    v14 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v15 = 134349056;
      v16 = a2;
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "Tab %{public}llu was not found", (uint8_t *)&v15, 0xCu);
    }
    goto LABEL_19;
  }
  v9 = (WebKit::WebExtensionTab *)v8;
  ++*(_DWORD *)v8;
  v10 = *(_QWORD *)(v8 + 24);
  if (v10
    && *(_QWORD *)(v10 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(v8 + 32)))
  {
    if ((a3 & 1) != 0
      || !WebKit::WebExtensionTab::isPrivate(v9)
      || ((v11 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 8)) != 0 ? (v12 = v11 - 16) : (v12 = 0), *(_BYTE *)(v12 + 249)))
    {
      *a4 = v9;
      return;
    }
  }
  else
  {
    v13 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v15 = 134349056;
      v16 = a2;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Tab %{public}llu has nil delegate; reference not removed via didCloseTab: before release",
        (uint8_t *)&v15,
        0xCu);
    }
    WebKit::WebExtensionContext::forgetTab(a1, a2);
  }
  *a4 = 0;
  WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
}

void sub_1977520E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::forgetTab(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v20;
  id WeakRetained;

  v2 = result[66];
  if (v2)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      result += 66;
      v11 = (_QWORD *)(v2 + 16 * v8);
      v12 = v11 + 1;
      v13 = v11[1];
      if (v13 && (*v12 = 0, (v2 = *result) == 0) || (v2 += 16 * *(unsigned int *)(v2 - 4), (_QWORD *)v2 != v11))
      {
        if ((_QWORD *)v2 != v11)
        {
          *v11 = -1;
          *v12 = 0;
          ++*(_DWORD *)(*result - 16);
          v14 = *result;
          v15 = *result ? *(_DWORD *)(v14 - 12) - 1 : -1;
          *(_DWORD *)(v14 - 12) = v15;
          v16 = *result;
          if (*result)
          {
            v17 = 6 * *(_DWORD *)(v16 - 12);
            v18 = *(_DWORD *)(v16 - 4);
            if (v17 < v18 && v18 >= 9)
              result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v18 >> 1);
          }
        }
      }
      if (v13)
      {
        v20 = (void *)v3[71];
        WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v20);
        objc_claimAutoreleasedReturnValue();
        WeakRetained = objc_loadWeakRetained((id *)(v13 + 32));
        objc_msgSend(v20, "removeObjectForKey:", WeakRetained);

        return (uint64_t *)WTF::RefCounted<WebKit::WebExtensionTab>::deref(v13);
      }
    }
  }
  return result;
}

void sub_19775228C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::getTab(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, char a6@<W5>, WebKit::WebExtensionTab **a7@<X8>)
{
  if (a4)
    WebKit::WebExtensionContext::getTab(a1, a3, a6, a7);
  else
    WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, a5, a6, a7);
}

BOOL WebKit::WebExtensionContext::isBackgroundPage(uint64_t a1, uint64_t a2)
{
  void *v3;
  _BOOL8 v4;
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 304))
    return 0;
  WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 304));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_page");
  v4 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 744) == a2;

  return v4;
}

void sub_197752340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)*a2;
  if (!*a2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
    goto LABEL_10;
  }
  v5 = (_QWORD *)*a2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_QWORD *)*a2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  *result = a2;
  result[1] = v5;
  result[2] = v4;
  if (v2)
  {
    v7 = *((unsigned int *)v2 - 1);
    v8 = &v2[2 * v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  result[3] = v8;
  result[4] = &v2[2 * v7];
  *((_DWORD *)result + 10) = 0;
  return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(result);
}

uint64_t WebKit::WebExtensionContext::canOpenNewWindow(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  uint64_t v2;
  id *v3;
  void *v4;
  char v5;

  v1 = *((_QWORD *)this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = (id *)(v2 - 16);
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  WebKit::WebExtensionController::delegate(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  return v5 & 1;
}

void sub_19775243C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::openNewWindow(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v6 = *a3;
  *a3 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34F84A0;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = v6;
  v9 = v7;
  WebKit::WebExtensionContext::windowsCreate(a1, a2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1977524D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::openNewTab(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v6 = *a3;
  *a3 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34F84C8;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = v6;
  v9 = v7;
  WebKit::WebExtensionContext::tabsCreate(a1, 0, 0, a2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1977525AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didOpenWindow(uint64_t a1, WebKit::WebExtensionWindow *this, int a3, char a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  WebKit::WebExtensionTab **v15;
  uint64_t v16;
  WebKit::WebExtensionTab *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  _OWORD v29[2];
  char v30;
  uint8_t buf[16];
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  _OWORD v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtensionWindow::isOpen(this))
  {
    v8 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v23 = *((_QWORD *)this + 2);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v23;
      _os_log_debug_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEBUG, "Opened window %{public}llu", buf, 0xCu);
    }
    *((_WORD *)this + 20) |= 1u;
    if (a3)
    {
      v9 = *((_QWORD *)this + 2);
      if (!*(_BYTE *)(a1 + 520))
        *(_BYTE *)(a1 + 520) = 1;
      *(_QWORD *)(a1 + 512) = v9;
      *(_QWORD *)buf = *((_QWORD *)this + 2);
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1 + 496, (unint64_t)buf);
    }
    else
    {
      v10 = *(unsigned int *)(a1 + 508);
      if (!(_DWORD)v10)
      {
        v11 = *((_QWORD *)this + 2);
        if (!*(_BYTE *)(a1 + 520))
          *(_BYTE *)(a1 + 520) = 1;
        *(_QWORD *)(a1 + 512) = v11;
      }
      v12 = (_QWORD *)(a1 + 496);
      v13 = *((_QWORD *)this + 2);
      *(_QWORD *)buf = v13;
      if ((_DWORD)v10 == *(_DWORD *)(a1 + 504))
        *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * *(unsigned int *)(a1 + 508)) = *(_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v10 + 1, (unint64_t)buf);
      else
        *(_QWORD *)(*v12 + 8 * v10) = v13;
      ++*(_DWORD *)(a1 + 508);
    }
    WebKit::WebExtensionWindow::tabs((uint64_t)this, 0, (uint64_t *)buf);
    if (*(_DWORD *)&buf[12])
    {
      v15 = *(WebKit::WebExtensionTab ***)buf;
      v16 = 8 * *(unsigned int *)&buf[12];
      do
      {
        v17 = *v15;
        *(_DWORD *)v17 = *(_DWORD *)*v15 + 1;
        WebKit::WebExtensionContext::didOpenTab(a1, v17, 0);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v14);
    v18 = *(_QWORD *)(a1 + 64);
    if (v18 && *(_QWORD *)(v18 + 8))
    {
      if (!WebKit::WebExtensionWindow::isPrivate(this)
        || ((v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0 ? (v20 = v19 - 16) : (v20 = 0), *(_BYTE *)(v20 + 249)))
      {
        if ((a4 & 1) == 0)
        {
          WebKit::WebExtensionWindow::parameters((id *)this, 0, (uint64_t)buf);
          v24 = *(_OWORD *)buf;
          v25 = v32;
          LOBYTE(v26[0]) = 0;
          v27 = 0;
          if (v35)
          {
            v26[0] = v33;
            v21 = v34;
            v33 = 0;
            v34 = 0;
            v26[1] = v21;
            v27 = 1;
          }
          v28 = v36;
          v29[0] = v37[0];
          *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)((char *)v37 + 12);
          v30 = 1;
          WebKit::WebExtensionContext::fireWindowsEventIfNeeded(a1, 55, &v24);
          if (v30 && v27)
            WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
          if (v35)
            WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v22);
        }
      }
    }
  }
}

void sub_1977528C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a21 && a14)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, a2);
  if (a28)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didFocusWindow(uint64_t a1, WebKit::WebExtensionWindow *this, char a3)
{
  NSObject *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  void *v30;
  BOOL v31;
  char v32;
  uint8_t *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char v37[16];
  char v38;
  __int128 v39;
  _OWORD v40[2];
  char v41;
  uint8_t buf[16];
  int v43;
  char v44;
  char v45;
  __int128 v46;
  _BYTE v47[28];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    if (!WebKit::WebExtensionWindow::isOpen(this))
      return;
    v6 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v34 = *((_QWORD *)this + 2);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v34;
      _os_log_debug_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEBUG, "Focused window %{public}llu", buf, 0xCu);
    }
    *(_QWORD *)(a1 + 512) = *((_QWORD *)this + 2);
    *(_BYTE *)(a1 + 520) = 1;
    v7 = *(char **)(a1 + 496);
    v8 = *(unsigned int *)(a1 + 508);
    v9 = &v7[8 * v8];
    if ((_DWORD)v8)
    {
      LODWORD(v8) = 0;
      v10 = *((_QWORD *)this + 2);
      v11 = v9;
      v12 = v9;
      do
      {
        if (*(_QWORD *)v7 == v10)
        {
          v13 = v7;
          if (v12 != (char *)(*(_QWORD *)(a1 + 496) + 8 * *(unsigned int *)(a1 + 508)))
          {
            if (v11 == v7)
            {
              v13 = v12;
            }
            else
            {
              if (v11 <= v12)
              {
                v18 = 0;
                v17 = (v7 - v11) >> 3;
                do
                {
                  *(_QWORD *)&v12[((v7 - v11) & 0xFFFFFFFFFFFFFFF8) - 8 + v18] = *(_QWORD *)&v7[v18 - 8];
                  v18 -= 8;
                }
                while (&v7[v18] != v11);
              }
              else
              {
                v14 = v12;
                v15 = v11;
                do
                {
                  v16 = *(_QWORD *)v15;
                  v15 += 8;
                  *(_QWORD *)v14 = v16;
                  v14 += 8;
                }
                while (v15 != v7);
                v17 = (v7 - v11) >> 3;
              }
              v13 = &v12[8 * v17];
            }
          }
          v11 = v7 + 8;
          LODWORD(v8) = v8 + 1;
          v12 = v13;
        }
        v7 += 8;
      }
      while (v7 < v9);
      v7 = *(char **)(a1 + 496);
      v19 = *(unsigned int *)(a1 + 508);
      v9 = v12;
    }
    else
    {
      v19 = 0;
      v11 = &v7[8 * v8];
    }
    v21 = &v7[8 * v19];
    if (v11 != v21)
    {
      if (v11 <= v9)
      {
        v23 = &v9[((v21 - v11) & 0xFFFFFFFFFFFFFFF8) - 8];
        do
        {
          v24 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *(_QWORD *)v23 = v24;
          v23 -= 8;
        }
        while (v21 != v11);
      }
      else
      {
        do
        {
          v22 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v9 = v22;
          v9 += 8;
        }
        while (v11 != v21);
      }
    }
    *(_DWORD *)(a1 + 508) -= v8;
    *(_QWORD *)buf = *((_QWORD *)this + 2);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1 + 496, (unint64_t)buf);
  }
  else
  {
    v20 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEBUG, "No window focused", buf, 2u);
    }
    *(_QWORD *)(a1 + 512) = 0;
    *(_BYTE *)(a1 + 520) = 0;
  }
  v25 = *(_QWORD *)(a1 + 64);
  if (v25 && *(_QWORD *)(v25 + 8))
  {
    if (this)
    {
      if (WebKit::WebExtensionWindow::isPrivate(this))
      {
        v26 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        v27 = v26 ? v26 - 16 : 0;
        if (!*(_BYTE *)(v27 + 249))
          return;
      }
      if ((a3 & 1) != 0)
        return;
      *(_QWORD *)buf = *((_QWORD *)this + 2);
      v28 = 1;
      buf[8] = 1;
      LOWORD(v43) = 0;
      v29 = WebKit::WebExtensionWindow::type(this);
      LOBYTE(v46) = 0;
      v47[16] = 0;
      *(_DWORD *)&v47[24] = 0;
      v35 = *(_OWORD *)buf;
      v39 = v46;
      v40[0] = *(_OWORD *)v47;
      *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)&v47[12];
      BYTE2(v43) = v29;
      HIBYTE(v43) = 1;
      v44 = 0;
      v45 = 0;
      v36 = v43;
      v37[0] = 0;
      v38 = 0;
    }
    else
    {
      if ((a3 & 1) != 0)
        return;
      v28 = 0;
      LOBYTE(v35) = 0;
    }
    v41 = v28;
    WebKit::WebExtensionContext::fireWindowsEventIfNeeded(a1, 56, &v35);
    if (v41)
      v31 = v38 == 0;
    else
      v31 = 1;
    v32 = v31;
    if (!this)
    {
      if ((v32 & 1) != 0)
        return;
      v33 = (uint8_t *)&v35;
      goto LABEL_58;
    }
    if ((v32 & 1) == 0)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v30);
    if (v45)
    {
      v33 = buf;
LABEL_58:
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v33 + 24), v30);
    }
  }
}

void sub_197752CC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  BOOL v30;
  char v31;
  uint64_t *v32;

  if (a21)
    v30 = a14 == 0;
  else
    v30 = 1;
  v31 = v30;
  if (v28)
  {
    if ((v31 & 1) == 0)
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
    if (!a28)
LABEL_15:
      _Unwind_Resume(exception_object);
    v32 = (uint64_t *)&a23;
  }
  else
  {
    if ((v31 & 1) != 0)
      goto LABEL_15;
    v32 = &a9;
  }
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v32 + 3), a2);
  goto LABEL_15;
}

unsigned int *WebKit::WebExtensionContext::openWindows@<X0>(unsigned int *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WebKit::WebExtensionWindow *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  unsigned int **v22;
  uint64_t v23;
  unsigned int *v24;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = result[127];
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      goto LABEL_42;
    }
    v5 = (char)a2;
    v6 = result;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a3 + 8) = v4;
    *(_QWORD *)a3 = result;
    v7 = v6[127];
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)v6 + 62);
      v9 = 8 * v7;
      while (1)
      {
        v10 = (WebKit::WebExtensionWindow *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*((_QWORD *)v6 + 61), *v8);
        v11 = (uint64_t)v10;
        if (v10)
          ++*(_DWORD *)v10;
        if ((v5 & 1) != 0
          || !WebKit::WebExtensionWindow::isPrivate(v10)
          || ((v12 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8)) != 0 ? (v13 = v12 - 16) : (v13 = 0),
              *(_BYTE *)(v13 + 249)))
        {
          ++*(_DWORD *)v11;
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
          v24 = (unsigned int *)v11;
          v14 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v14 == *(_DWORD *)(a3 + 8))
          {
            v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v14 + 1, (unint64_t)&v24);
            v14 = *(unsigned int *)(a3 + 12);
            v16 = *(WTF **)a3;
            v17 = *v15;
            *v15 = 0;
            *((_QWORD *)v16 + v14) = v17;
          }
          else
          {
            v18 = *(WTF **)a3;
            v24 = 0;
            *((_QWORD *)v18 + v14) = v11;
          }
          *(_DWORD *)(a3 + 12) = v14 + 1;
          result = v24;
          v24 = 0;
          if (!result)
            goto LABEL_18;
        }
        else
        {
          result = (unsigned int *)v11;
        }
        result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
LABEL_18:
        ++v8;
        v9 -= 8;
        if (!v9)
        {
          LODWORD(v4) = *(_DWORD *)(a3 + 8);
          v19 = *(unsigned int *)(a3 + 12);
          goto LABEL_22;
        }
      }
    }
  }
  v19 = 0;
LABEL_22:
  if (v19 < v4)
  {
    v20 = *(unsigned int *)(a3 + 12);
    v21 = *(WTF **)a3;
    if (v19 < v20)
    {
      v22 = (unsigned int **)((char *)v21 + 8 * v19);
      v23 = 8 * v20 - 8 * v19;
      do
      {
        result = *v22;
        *v22 = 0;
        if (result)
          result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
        ++v22;
        v23 -= 8;
      }
      while (v23);
      *(_DWORD *)(a3 + 12) = v19;
      v21 = *(WTF **)a3;
      LODWORD(v20) = v19;
    }
    if (!v19)
      goto LABEL_35;
    if (*(_DWORD *)(a3 + 8))
    {
      *(_DWORD *)(a3 + 8) = v19;
      result = (unsigned int *)WTF::fastRealloc(v21, (void *)(8 * v19));
      *(_QWORD *)a3 = result;
      return result;
    }
    if (!(v19 >> 29))
    {
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a3 + 8) = v19;
      *(_QWORD *)a3 = result;
      if (result != (unsigned int *)v21)
        result = (unsigned int *)memcpy(result, v21, 8 * v20);
LABEL_35:
      if (v21)
      {
        if (*(WTF **)a3 == v21)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        return (unsigned int *)WTF::fastFree(v21, a2);
      }
      return result;
    }
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x197752F30);
  }
  return result;
}

void sub_197752F3C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(unint64_t result, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((_DWORD)v4 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v4 + 1, a2);
    v2 = (_QWORD *)result;
    LODWORD(v4) = *(_DWORD *)(v3 + 12);
  }
  v5 = *(_QWORD **)v3;
  if ((_DWORD)v4)
  {
    v6 = v4;
    do
    {
      v5[v6] = v5[v6 - 1];
      --v6;
    }
    while (v6 * 8);
  }
  *v5 = *v2;
  ++*(_DWORD *)(v3 + 12);
  return result;
}

void WebKit::WebExtensionContext::didOpenTab(uint64_t a1, WebKit::WebExtensionTab *this, char a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtensionTab::isOpen(this))
  {
    v6 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *((_QWORD *)this + 2);
      LODWORD(v14) = 134349056;
      *(_QWORD *)((char *)&v14 + 4) = v12;
      _os_log_debug_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEBUG, "Opened tab %{public}llu", (uint8_t *)&v14, 0xCu);
    }
    *(_DWORD *)((char *)this + 50) |= 2u;
    v7 = *(_QWORD *)(a1 + 64);
    if (v7 && *(_QWORD *)(v7 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(this)
        || ((v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0 ? (v9 = v8 - 16) : (v9 = 0), *(_BYTE *)(v9 + 249)))
      {
        if ((a3 & 1) == 0)
        {
          WebKit::WebExtensionTab::parameters(this, (uint64_t)&v14);
          WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(a1, &v14);
          if (v18)
          {
            v11 = v17;
            v17 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v10);
              else
                *(_DWORD *)v11 -= 2;
            }
          }
          if (v16)
          {
            v13 = v15;
            v15 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v10);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
    }
  }
}

void sub_19775317C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18)
{
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::didCloseWindow(WebKit::WebExtensionContext *this, WebKit::WebExtensionWindow *a2)
{
  uint64_t result;
  NSObject *v5;
  void *v6;
  WebKit::WebExtensionTab **v7;
  uint64_t v8;
  WebKit::WebExtensionTab *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  _BYTE v18[16];
  char v19;
  __int128 v20;
  _OWORD v21[2];
  char v22;
  uint8_t buf[16];
  int v24;
  _BYTE v25[16];
  char v26;
  __int128 v27;
  _BYTE v28[28];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = WebKit::WebExtensionWindow::isOpen(a2);
  if ((_DWORD)result)
  {
    v5 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *((_QWORD *)a2 + 2);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v15;
      _os_log_debug_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEBUG, "Closed window %{public}llu", buf, 0xCu);
    }
    ++*(_DWORD *)a2;
    *((_WORD *)a2 + 20) &= ~1u;
    WebKit::WebExtensionContext::forgetWindow((uint64_t)this, *((_QWORD *)a2 + 2));
    WebKit::WebExtensionWindow::tabs((uint64_t)a2, 0, (uint64_t *)buf);
    if (*(_DWORD *)&buf[12])
    {
      v7 = *(WebKit::WebExtensionTab ***)buf;
      v8 = 8 * *(unsigned int *)&buf[12];
      do
      {
        v9 = *v7;
        *(_DWORD *)v9 = *(_DWORD *)*v7 + 1;
        WebKit::WebExtensionContext::didCloseTab((uint64_t *)this, v9, 1, 0);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
    v10 = *((_QWORD *)this + 8);
    if (v10 && *(_QWORD *)(v10 + 8))
    {
      if (!WebKit::WebExtensionWindow::isPrivate(a2)
        || ((v11 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8)) != 0 ? (v12 = v11 - 16) : (v12 = 0), *(_BYTE *)(v12 + 249)))
      {
        *(_QWORD *)buf = *((_QWORD *)a2 + 2);
        buf[8] = 1;
        LOWORD(v24) = 0;
        v13 = WebKit::WebExtensionWindow::type(a2);
        LOBYTE(v27) = 0;
        v28[16] = 0;
        *(_DWORD *)&v28[24] = 0;
        v16 = *(_OWORD *)buf;
        v20 = v27;
        v21[0] = *(_OWORD *)v28;
        *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)&v28[12];
        BYTE2(v24) = v13;
        HIBYTE(v24) = 1;
        v25[0] = 0;
        v26 = 0;
        v17 = v24;
        v18[0] = 0;
        v19 = 0;
        v22 = 1;
        WebKit::WebExtensionContext::fireWindowsEventIfNeeded((uint64_t)this, 57, &v16);
        if (v22 && v19)
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v14);
        if (v26)
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v14);
      }
    }
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)a2);
  }
  return result;
}

void sub_19775341C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a21 && a14)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  if (a28)
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v28);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::didCloseTab(uint64_t *a1, WebKit::WebExtensionTab *this, int a3, char a4)
{
  NSObject *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  _BYTE v18[12];
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtensionTab::isOpen(this))
    return WebKit::WebExtensionContext::forgetTab(a1, *((_QWORD *)this + 2));
  v8 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    v16 = "";
    v17 = *((_QWORD *)this + 2);
    if (a3)
      v16 = "(window closing)";
    *(_DWORD *)v18 = 134349314;
    *(_QWORD *)&v18[4] = v17;
    v19 = 2082;
    v20 = v16;
    _os_log_debug_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEBUG, "Closed tab %{public}llu %{public}s", v18, 0x16u);
  }
  ++*(_DWORD *)this;
  v9 = *(_DWORD *)((_BYTE *)this + 50) & 0xFFFFFFFD | ((unint64_t)*((unsigned __int8 *)this + 54) << 32);
  *(_DWORD *)((char *)this + 50) &= ~2u;
  *((_BYTE *)this + 54) = BYTE4(v9);
  WebKit::WebExtensionContext::forgetTab(a1, *((_QWORD *)this + 2));
  v10 = a1[8];
  if (v10 && *(_QWORD *)(v10 + 8))
  {
    if (!WebKit::WebExtensionTab::isPrivate(this)
      || ((v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0 ? (v12 = v11 - 16) : (v12 = 0), *(_BYTE *)(v12 + 249)))
    {
      if ((a4 & 1) == 0)
      {
        WebKit::WebExtensionTab::window(this, v18);
        v14 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
          v15 = *(_QWORD *)(*(_QWORD *)v18 + 16);
        else
          v15 = -2;
        WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded((uint64_t)a1, *((_QWORD *)this + 2), v15, a3);
        if (v14)
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v14);
      }
    }
  }
  return (uint64_t *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)this);
}

void sub_197753674(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v2);
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didActivateTab(WebKit::WebExtensionContext *this, uint64_t a2, const WebKit::WebExtensionTab *a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  const WebKit::WebExtensionTab *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!WebKit::WebExtensionTab::isOpen((WebKit::WebExtensionTab *)a2))
    return;
  ++*(_DWORD *)a2;
  *(_QWORD *)v30 = 0;
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand((uint64_t *)v30, 0);
  if (*(_QWORD *)v30)
    v6 = *(_DWORD *)(*(_QWORD *)v30 - 8);
  else
    v6 = 0;
  v7 = 0;
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = (v10 >> 31) ^ v10;
  for (i = 1; ; ++i)
  {
    v13 = v11 & v6;
    v14 = (uint64_t *)(*(_QWORD *)v30 + 8 * v13);
    v15 = (const WebKit::WebExtensionTab *)*v14;
    if (*v14 == -1)
    {
      v7 = (uint64_t *)(*(_QWORD *)v30 + 8 * v13);
      goto LABEL_11;
    }
    if (!v15)
      break;
    if (v15 == (const WebKit::WebExtensionTab *)a2)
      goto LABEL_23;
LABEL_11:
    v11 = i + v13;
  }
  if (v7)
  {
    *v7 = 0;
    --*(_DWORD *)(*(_QWORD *)v30 - 16);
    v14 = v7;
  }
  v16 = *(_DWORD *)a2;
  *v14 = a2;
  *(_DWORD *)a2 = v16 + 1;
  if (*(_QWORD *)v30)
    v17 = *(_DWORD *)(*(_QWORD *)v30 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(*(_QWORD *)v30 - 12) = v17;
  if (*(_QWORD *)v30)
    v18 = *(_DWORD *)(*(_QWORD *)v30 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(*(_QWORD *)v30 - 16) + v18);
  v20 = *(unsigned int *)(*(_QWORD *)v30 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19)
LABEL_22:
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand((uint64_t *)v30, v14);
  }
  else if (3 * v20 <= 4 * v19)
  {
    goto LABEL_22;
  }
LABEL_23:
  WebKit::WebExtensionContext::didSelectOrDeselectTabs((uint64_t)this, (WebKit::WebExtensionTab ***)v30);
  if (*(_QWORD *)v30)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::deallocateTable(*(uint64_t **)v30, v21);
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(a2);
  v22 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    v29 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)v30 = 134349056;
    *(_QWORD *)&v30[4] = v29;
    _os_log_debug_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEBUG, "Activated tab %{public}llu", v30, 0xCu);
  }
  v23 = *((_QWORD *)this + 8);
  if (v23 && *(_QWORD *)(v23 + 8))
  {
    if (!WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)a2)
      || ((v24 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)) != 0 ? (v25 = v24 - 16) : (v25 = 0), *(_BYTE *)(v25 + 249)))
    {
      WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)a2, v30);
      v26 = *(_QWORD *)v30;
      if (*(_QWORD *)v30)
      {
        v27 = *(_QWORD *)(*(_QWORD *)v30 + 16);
        if (a3)
          goto LABEL_36;
LABEL_38:
        v28 = -2;
      }
      else
      {
        v27 = -2;
        if (!a3)
          goto LABEL_38;
LABEL_36:
        v28 = *((_QWORD *)a3 + 2);
      }
      WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded((uint64_t)this, v28, *(_QWORD *)(a2 + 16), v27);
      if (v26)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v26);
    }
  }
}

void sub_197753930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  if (v9)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v9);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::didSelectOrDeselectTabs(uint64_t result, WebKit::WebExtensionTab ***a2)
{
  WebKit::WebExtensionTab **v2;
  uint64_t v3;
  WebKit::WebExtensionTab **v4;
  WebKit::WebExtensionTab **v5;
  uint64_t v6;
  WebKit::WebExtensionTab **v7;
  WebKit::WebExtensionTab *v8;
  WebKit::WebExtensionWindow *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  NSObject *v23;
  _BOOL4 v24;
  void *v25;
  WebKit::WebExtensionTab **v26;
  uint64_t v27;
  WebKit::WebExtensionTab *v28;
  NSObject *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  WebKit::WebExtensionTab **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  WTF *v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  WebKit::WebExtensionWindow *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t buf[16];
  _BYTE v55[12];
  unsigned int v56;
  uint64_t v57;

  v47 = result;
  v57 = *MEMORY[0x1E0C80C00];
  v51 = 0;
  v2 = *a2;
  if (*a2)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[v3];
    if (*((_DWORD *)v2 - 3))
    {
      v5 = *a2;
      if ((_DWORD)v3)
      {
        v6 = 8 * v3;
        v5 = *a2;
        while ((unint64_t)*v5 + 1 <= 1)
        {
          ++v5;
          v6 -= 8;
          if (!v6)
          {
            v5 = v4;
            break;
          }
        }
      }
      if (v2)
        goto LABEL_9;
      goto LABEL_13;
    }
    v5 = &v2[v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &v2[v3];
  if (v2)
  {
LABEL_9:
    v7 = &v2[*((unsigned int *)v2 - 1)];
    goto LABEL_14;
  }
LABEL_13:
  v7 = 0;
LABEL_14:
  while (v5 != v7)
  {
    v8 = *v5;
    *(_DWORD *)v8 = *(_DWORD *)*v5 + 1;
    if (!WebKit::WebExtensionTab::isOpen(v8))
      goto LABEL_58;
    WebKit::WebExtensionTab::window(v8, &v50);
    v9 = v50;
    if (!v50)
      goto LABEL_58;
    if (WebKit::WebExtensionWindow::isPrivate(v50)
      && ((v10 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 8)) != 0 ? (v11 = v10 - 16) : (v11 = 0), !*(_BYTE *)(v11 + 249))
      || !WebKit::WebExtensionWindow::isOpen(v9))
    {
      v50 = 0;
LABEL_57:
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v9);
      goto LABEL_58;
    }
    v12 = *((_QWORD *)v9 + 2);
    v13 = (uint64_t)v51;
    if (v51
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)&v51),
          (v13 = (uint64_t)v51) != 0))
    {
      v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = (_QWORD *)(v13 + 24 * v18);
    v20 = *v19;
    if (*v19)
    {
      v21 = 0;
      v22 = 1;
      while (v20 != v12)
      {
        if (v20 == -1)
          v21 = v19;
        v18 = (v18 + v22) & v14;
        v19 = (_QWORD *)(v13 + 24 * v18);
        v20 = *v19;
        ++v22;
        if (!*v19)
        {
          if (v21)
          {
            *v21 = 0;
            v21[1] = 0;
            v21[2] = 0;
            --*(_DWORD *)(v13 - 16);
            v19 = v21;
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      *v19 = v12;
      v23 = qword_1ECE710C8;
      v24 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG);
      v9 = v50;
      if (v24)
      {
        v40 = *((_QWORD *)v50 + 2);
        *(_DWORD *)v55 = 134349056;
        *(_QWORD *)&v55[4] = v40;
        _os_log_debug_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEBUG, "Selected tabs changed for window %{public}llu", v55, 0xCu);
      }
      v52 = 0;
      v53 = 0;
      WebKit::WebExtensionWindow::tabs((uint64_t)v9, 0, (uint64_t *)v55);
      if (v56)
      {
        v26 = *(WebKit::WebExtensionTab ***)v55;
        v27 = 8 * v56;
        do
        {
          v28 = *v26;
          *(_DWORD *)v28 = *(_DWORD *)*v26 + 1;
          if (WebKit::WebExtensionTab::isSelected(v28))
          {
            v29 = qword_1ECE710C8;
            if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
            {
              v32 = *((_QWORD *)v28 + 2);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v32;
              _os_log_debug_impl(&dword_196BCC000, v29, OS_LOG_TYPE_DEBUG, "Selected tab %{public}llu", buf, 0xCu);
            }
            v30 = *((_QWORD *)v28 + 2);
            *(_QWORD *)buf = v30;
            if (HIDWORD(v53) == (_DWORD)v53)
            {
              v31 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)buf);
              *(_QWORD *)(v52 + 8 * HIDWORD(v53)) = *v31;
            }
            else
            {
              *(_QWORD *)(v52 + 8 * HIDWORD(v53)) = v30;
            }
            ++HIDWORD(v53);
          }
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v28);
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v25);
      v34 = (WTF *)v19[1];
      if (v34)
      {
        v19[1] = 0;
        *((_DWORD *)v19 + 4) = 0;
        WTF::fastFree(v34, v33);
      }
      v19[1] = v52;
      v19[2] = v53;
      v35 = (uint64_t)v51;
      if (v51)
        v36 = *((_DWORD *)v51 - 3) + 1;
      else
        v36 = 1;
      *((_DWORD *)v51 - 3) = v36;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 <= 0x400)
      {
        if (3 * v38 > 4 * v37)
          goto LABEL_56;
LABEL_55:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)&v51);
        goto LABEL_56;
      }
      if (v38 <= 2 * v37)
        goto LABEL_55;
    }
LABEL_56:
    v50 = 0;
    if (v9)
      goto LABEL_57;
LABEL_58:
    result = WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v8);
    v39 = v5 + 1;
    v5 = v4;
    if (v39 != v4)
    {
      v5 = v39;
      while ((unint64_t)*v5 + 1 <= 1)
      {
        if (++v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  v41 = *(_QWORD *)(v47 + 64);
  if (v41 && *(_QWORD *)(v41 + 8))
  {
    if (!v51)
      return result;
    if (*((_DWORD *)v51 - 3))
    {
      v42 = *((unsigned int *)v51 - 1);
      if ((_DWORD)v42)
      {
        v43 = 24 * v42;
        v44 = v51;
        while ((unint64_t)(*v44 + 1) <= 1)
        {
          v44 += 3;
          v43 -= 24;
          if (!v43)
            goto LABEL_84;
        }
      }
      else
      {
        v44 = v51;
      }
      v45 = &v51[3 * v42];
      if (v45 != v44)
      {
LABEL_79:
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v48, (uint64_t)(v44 + 1));
        WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(v47, (uint64_t)&v48, *v44);
        v46 = v48;
        if (v48)
        {
          v48 = 0;
          v49 = 0;
          WTF::fastFree(v46, a2);
        }
        while (1)
        {
          v44 += 3;
          if (v44 == v45)
            break;
          if ((unint64_t)(*v44 + 1) > 1)
          {
            if (v44 != v45)
              goto LABEL_79;
            break;
          }
        }
      }
    }
  }
LABEL_84:
  result = (uint64_t)v51;
  if (v51)
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable((uint64_t)v51, a2);
  return result;
}

void sub_197753E8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a13)
    WTF::fastFree(a13, a2);
  if (a16)
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(a16, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didMoveTab(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, uint64_t a3, const WebKit::WebExtensionWindow *a4)
{
  uint64_t v8;
  const WebKit::WebExtensionWindow *v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WebKit::WebExtensionWindow *v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a4 || WebKit::WebExtensionTab::isOpen(a2))
  {
    WebKit::WebExtensionTab::window(a2, &v35);
    v8 = WebKit::WebExtensionTab::index(a2);
    v9 = v35;
    if (v35)
    {
      v10 = qword_1ECE710C8;
      v11 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG);
      if (v9 == a4)
      {
        if (!v11)
          goto LABEL_20;
        v23 = *((_QWORD *)a2 + 2);
        *(_DWORD *)buf = 134349568;
        v37 = v23;
        v38 = 2050;
        v39 = a3;
        v40 = 2050;
        v41 = v8;
        v14 = "Moved tab %{public}llu from index %{public}zu to index %{public}zu (in same window)";
        goto LABEL_15;
      }
      if (a4)
      {
        if (!v11)
          goto LABEL_20;
        v12 = *((_QWORD *)a2 + 2);
        v13 = *((_QWORD *)v9 + 2);
        *(_DWORD *)buf = 134349568;
        v37 = v12;
        v38 = 2050;
        v39 = v13;
        v40 = 2050;
        v41 = v8;
        v14 = "Moved tab %{public}llu to window %{public}llu at index %{public}zu";
LABEL_15:
        v21 = v10;
        v22 = 32;
LABEL_16:
        _os_log_debug_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEBUG, v14, buf, v22);
        goto LABEL_20;
      }
      if (v11)
      {
        v33 = *((_QWORD *)a2 + 2);
        v34 = *((_QWORD *)v9 + 2);
        *(_DWORD *)buf = 134349568;
        v37 = v33;
        v38 = 2050;
        v39 = v34;
        v40 = 2050;
        v41 = v8;
        _os_log_debug_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEBUG, "Added tab %{public}llu to window %{public}llu at index %{public}zu", buf, 0x20u);
      }
    }
    else if (a4)
    {
      v18 = qword_1ECE710C8;
      if (!os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
      v19 = *((_QWORD *)a2 + 2);
      v20 = *((_QWORD *)a4 + 2);
      *(_DWORD *)buf = 134349312;
      v37 = v19;
      v38 = 2050;
      v39 = v20;
      v14 = "Moved tab %{public}llu out of window %{public}llu";
      v21 = v18;
      v22 = 22;
      goto LABEL_16;
    }
    WebKit::WebExtensionContext::didOpenTab((uint64_t)this, a2, 0);
LABEL_20:
    v24 = *((_QWORD *)this + 8);
    if (v24 && *(_QWORD *)(v24 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(a2)
        || ((v25 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8)) != 0 ? (v26 = v25 - 16) : (v26 = 0), *(_BYTE *)(v26 + 249)))
      {
        if (v9)
        {
          if (v9 == a4)
          {
            if (v8 != a3)
              WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded((uint64_t)this, *((_QWORD *)a2 + 2), *((_QWORD *)a4 + 2), a3, v8);
LABEL_39:
            WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v9);
            return;
          }
          v29 = *((_QWORD *)a2 + 2);
          v28 = (uint64_t *)((char *)a2 + 16);
          v27 = v29;
          if (a4)
            v30 = *((_QWORD *)a4 + 2);
          else
            v30 = -2;
          WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded((uint64_t)this, v27, v30, a3);
          v32 = *((_QWORD *)v9 + 2);
        }
        else
        {
          if (!a4)
            return;
          v31 = *((_QWORD *)a2 + 2);
          v28 = (uint64_t *)((char *)a2 + 16);
          WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded((uint64_t)this, v31, *((_QWORD *)a4 + 2), a3);
          v32 = -2;
        }
        WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded((uint64_t)this, *v28, v32, v8);
      }
    }
    if (!v9)
      return;
    goto LABEL_39;
  }
  v15 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
  {
    v16 = *((_QWORD *)a2 + 2);
    v17 = *((_QWORD *)a4 + 2);
    *(_DWORD *)buf = 134349568;
    v37 = v16;
    v38 = 2050;
    v39 = a3;
    v40 = 2050;
    v41 = v17;
    _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "Moved tab %{public}llu to index %{public}zu from window %{public}llu, but tab is not open", buf, 0x20u);
  }
}

void sub_19775428C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didReplaceTab(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  BOOL isOpen;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebExtensionTab::operator==((uint64_t)a2, (uint64_t)a3))
  {
    v8 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      v9 = a3[2];
      v19 = 134349056;
      v20 = v9;
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Replaced tab %{public}llu with the same tab", (uint8_t *)&v19, 0xCu);
    }
  }
  else
  {
    ++*(_DWORD *)a2;
    WebKit::WebExtensionContext::didOpenTab((uint64_t)a1, (WebKit::WebExtensionTab *)a3, a4);
    isOpen = WebKit::WebExtensionTab::isOpen((WebKit::WebExtensionTab *)a2);
    v11 = qword_1ECE710C8;
    if (isOpen)
    {
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
      {
        v15 = a2[2];
        v16 = a3[2];
        v19 = 134349312;
        v20 = v15;
        v21 = 2050;
        v22 = v16;
        _os_log_debug_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEBUG, "Replaced tab %{public}llu with tab %{public}llu", (uint8_t *)&v19, 0x16u);
      }
      v12 = a1[8];
      if (v12 && *(_QWORD *)(v12 + 8))
      {
        if (!WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)a3)
          || ((v13 = *(_QWORD *)(a3[3] + 8)) != 0 ? (v14 = v13 - 16) : (v14 = 0), *(_BYTE *)(v14 + 249)))
        {
          if (!a4)
            WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded((uint64_t)a1, a2[2], a3[2]);
        }
      }
      WebKit::WebExtensionContext::didCloseTab(a1, (WebKit::WebExtensionTab *)a2, 0, a4);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
        v17 = a2[2];
        v18 = a3[2];
        v19 = 134349312;
        v20 = v17;
        v21 = 2050;
        v22 = v18;
        _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "Replaced tab %{public}llu with tab %{public}llu, but old tab is not open", (uint8_t *)&v19, 0x16u);
      }
      WebKit::WebExtensionContext::forgetTab(a1, a2[2]);
    }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)a2);
  }
}

void sub_1977544F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebExtensionTab *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21[2];
  __int128 v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  WebKit::WebExtensionTab *v26;

  WebKit::WebExtensionContext::getCurrentTab(a1, a2, 0, 0, &v26);
  v11 = v26;
  if (v26)
  {
    MEMORY[0x19AEABCC8](v21, CFSTR("webNavigation"));
    v13 = (WebKit::WebExtensionContext::permissionState(a1, v21, v11, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a5, (URL *)v11, 3) & 0xFFFFFFFE) == 2;
    v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
        {
LABEL_23:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          return;
        }
LABEL_11:
        v24 = 41;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v25, &v24, 1);
        CFRetain(*(CFTypeRef *)(a1 + 8));
        ++*(_DWORD *)v11;
        v15 = *(WTF::StringImpl **)a5;
        if (*(_QWORD *)a5)
          *(_DWORD *)v15 += 2;
        v16 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)v21 = *(_OWORD *)(a5 + 8);
        v22 = v16;
        v17 = WTF::fastMalloc((WTF *)0x68);
        *(_QWORD *)v17 = &off_1E34F84F0;
        *(_QWORD *)(v17 + 8) = a1;
        *(_QWORD *)(v17 + 16) = a1;
        *(_QWORD *)(v17 + 24) = v11;
        *(_QWORD *)(v17 + 32) = a3;
        *(_QWORD *)(v17 + 40) = a4;
        if (v15)
          *(_DWORD *)v15 += 2;
        *(_QWORD *)(v17 + 48) = v15;
        v18 = v22;
        *(_OWORD *)(v17 + 56) = *(_OWORD *)v21;
        *(_OWORD *)(v17 + 72) = v18;
        *(double *)(v17 + 88) = a6;
        *(_BYTE *)(v17 + 96) = 41;
        v23 = v17;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v25, &v23);
        v20 = v23;
        v23 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v19);
          else
            *(_DWORD *)v15 -= 2;
        }
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v19);
        goto LABEL_23;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13)
      goto LABEL_23;
    goto LABEL_11;
  }
}

void sub_1977546E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  WTF::StringImpl *v16;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(uint64_t a1, unsigned __int8 **a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;

  if (WebKit::WebExtension::hasBackgroundContent(*(WebKit::WebExtension **)(a1 + 56)))
  {
    if (WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 56)))
    {
LABEL_3:
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(a1, a3);
      return;
    }
    v7 = *a2;
    if (*a2)
    {
      v8 = *((unsigned int *)v7 - 1);
      v9 = &v7[v8];
      if (*((_DWORD *)v7 - 3))
      {
        v10 = *a2;
        if ((_DWORD)v8)
        {
          v10 = *a2;
          while (*v10 >= 0xFEu)
          {
            ++v10;
            if (!--v8)
            {
              v10 = v9;
              goto LABEL_15;
            }
          }
        }
        goto LABEL_15;
      }
      v10 = &v7[v8];
    }
    else
    {
      v10 = 0;
      v8 = 0;
    }
    v9 = &v7[v8];
LABEL_15:
    if (v7)
      v7 += *((unsigned int *)v7 - 1);
    if (v7 != v10)
    {
      v11 = *(_QWORD *)(a1 + 272);
      do
      {
        if (v11)
        {
          v12 = *v10;
          v13 = *(_DWORD *)(v11 - 8);
          v14 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
          v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
          v16 = v13 & (v15 ^ HIWORD(v15));
          v17 = *(unsigned __int8 *)(v11 + 8 * v16);
          if (v17 == v12)
            goto LABEL_3;
          v18 = 1;
          while (v17 != 255)
          {
            v16 = (v16 + v18) & v13;
            v17 = *(unsigned __int8 *)(v11 + 8 * v16);
            ++v18;
            if (v17 == v12)
              goto LABEL_3;
          }
        }
        v19 = v10 + 1;
        v10 = v9;
        if (v19 != v9)
        {
          v10 = v19;
          while (*v10 >= 0xFEu)
          {
            if (++v10 == v9)
            {
              v10 = v9;
              break;
            }
          }
        }
      }
      while (v10 != v7);
    }
  }
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_197754968(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  WebKit::WebExtensionTab *v13;
  uint64_t v14;
  WebKit::WebExtensionAction *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  WebKit::WebUserContentControllerProxy *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  API::UserStyleSheet *v25;
  char *v26;
  API::UserStyleSheet *v27;
  char *v28;
  WTF::StringImpl *v29;
  _BOOL4 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebKit::WebExtensionTab *v40;
  uint64_t v41;
  WTF::StringImpl *v42[2];
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  unsigned __int8 *v46;
  WebKit::WebExtensionTab *v47;
  uint64_t v48;

  WebKit::WebProcessProxy::webPage(a2, &v48);
  v12 = v48;
  if (v48)
  {
    WebKit::WebExtensionContext::getCurrentTab(a1, a2, 0, 0, &v47);
    v13 = v47;
    if (!v47)
    {
LABEL_51:
      CFRelease(*(CFTypeRef *)(v12 + 8));
      return;
    }
    if (a3 == -2)
    {
      ++*(_DWORD *)(a1 + 440);
      v14 = *((_QWORD *)v13 + 1);
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8))
        {
          v15 = (WebKit::WebExtensionAction *)WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(a1 + 432), v14);
          if (v15)
            WebKit::WebExtensionAction::clearCustomizations(v15);
        }
      }
      v16 = *((_QWORD *)v13 + 5);
      if (v16)
      {
        CFRetain(*(CFTypeRef *)(v16 + 8));
        if ((WebKit::WebExtensionMatchPattern::matchesURL((_BYTE *)v16, (WTF::URL *)a5, 0) & 1) == 0)
          WebKit::WebExtensionContext::clearUserGesture(a1, (uint64_t)v13);
      }
      v41 = a5;
      v17 = *(_QWORD *)(a1 + 392);
      v18 = *(unsigned int *)(a1 + 404);
      v19 = (char *)(v17 + 8 * v18);
      if ((_DWORD)v18)
      {
        v38 = a4;
        v39 = v16;
        v40 = v13;
        v20 = 0;
        v21 = *(WebKit::WebUserContentControllerProxy **)(v12 + 232);
        v22 = *(_QWORD *)(a1 + 392);
        v23 = (char *)(v17 + 8 * v18);
        v24 = v23;
        do
        {
          v25 = *(API::UserStyleSheet **)v17;
          if (*(_BYTE *)(*(_QWORD *)v17 + 120)
            && *((_QWORD *)v25 + 14) == *(_QWORD *)(*(_QWORD *)(v12 + 32) + 1896))
          {
            WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v21, v25);
            v26 = (char *)v17;
            if (v24 != (char *)(*(_QWORD *)(a1 + 392) + 8 * *(unsigned int *)(a1 + 404)))
            {
              if ((char *)v17 == v23)
              {
                v26 = v24;
              }
              else
              {
                memmove(v24, v23, v22 - (_QWORD)v23);
                v26 = &v24[v22 - (_QWORD)v23];
              }
            }
            v27 = *(API::UserStyleSheet **)v17;
            *(_QWORD *)v17 = 0;
            v23 = (char *)(v17 + 8);
            if (v27)
              CFRelease(*((CFTypeRef *)v27 + 1));
            ++v20;
            v24 = v26;
          }
          v17 += 8;
          v22 += 8;
        }
        while (v17 < (unint64_t)v19);
        v17 = *(_QWORD *)(a1 + 392);
        LODWORD(v18) = *(_DWORD *)(a1 + 404);
        v19 = v24;
        v16 = v39;
        v13 = v40;
        a3 = -2;
        a4 = v38;
      }
      else
      {
        v20 = 0;
        v23 = (char *)(v17 + 8 * v18);
      }
      v28 = (char *)(v17 + 8 * v18);
      if (v23 != v28)
      {
        memmove(v19, v23, v28 - v23);
        LODWORD(v18) = *(_DWORD *)(a1 + 404);
      }
      *(_DWORD *)(a1 + 404) = v18 - v20;
      a5 = v41;
      if (v16)
        CFRelease(*(CFTypeRef *)(v16 + 8));
    }
    MEMORY[0x19AEABCC8](v42, CFSTR("webNavigation"));
    v30 = (WebKit::WebExtensionContext::permissionState(a1, v42, v13, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a5, (URL *)v13, 3) & 0xFFFFFFFE) == 2;
    v31 = v42[0];
    v42[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v29);
        if (!v30)
        {
LABEL_50:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v13);
          goto LABEL_51;
        }
LABEL_38:
        v45 = 11306;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v46, &v45, 2);
        CFRetain(*(CFTypeRef *)(a1 + 8));
        ++*(_DWORD *)v13;
        v32 = *(WTF::StringImpl **)a5;
        if (*(_QWORD *)a5)
          *(_DWORD *)v32 += 2;
        v33 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)v42 = *(_OWORD *)(a5 + 8);
        v43 = v33;
        v34 = WTF::fastMalloc((WTF *)0x68);
        *(_QWORD *)v34 = &off_1E34F8518;
        *(_QWORD *)(v34 + 8) = a1;
        *(_QWORD *)(v34 + 16) = a1;
        *(_QWORD *)(v34 + 24) = v13;
        *(_QWORD *)(v34 + 32) = a3;
        *(_QWORD *)(v34 + 40) = a4;
        if (v32)
          *(_DWORD *)v32 += 2;
        *(_QWORD *)(v34 + 48) = v32;
        v35 = v43;
        *(_OWORD *)(v34 + 56) = *(_OWORD *)v42;
        *(_OWORD *)(v34 + 72) = v35;
        *(double *)(v34 + 88) = a6;
        *(_WORD *)(v34 + 96) = 11306;
        v44 = v34;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v46, &v44);
        v37 = v44;
        v44 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v36);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (v46)
          WTF::fastFree((WTF *)(v46 - 16), v36);
        goto LABEL_50;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (!v30)
      goto LABEL_50;
    goto LABEL_38;
  }
}

void sub_197754D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v23);
  CFRelease(*(CFTypeRef *)(v22 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::clearUserGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = *(_DWORD *)(a2 + 50);
    v3 = (unsigned int *)(a2 + 50);
    *v3 = v4 & 0xFFFFFFFE;
    v5 = *(_QWORD *)((char *)v3 - 10);
    *(_QWORD *)((char *)v3 - 10) = 0;
    if (v5)
      CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebExtensionContext::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebExtensionTab *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21[2];
  __int128 v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  WebKit::WebExtensionTab *v26;

  WebKit::WebExtensionContext::getCurrentTab(a1, a2, 0, 0, &v26);
  v11 = v26;
  if (v26)
  {
    MEMORY[0x19AEABCC8](v21, CFSTR("webNavigation"));
    v13 = (WebKit::WebExtensionContext::permissionState(a1, v21, v11, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a5, (URL *)v11, 3) & 0xFFFFFFFE) == 2;
    v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
        {
LABEL_23:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          return;
        }
LABEL_11:
        v24 = 43;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v25, &v24, 1);
        CFRetain(*(CFTypeRef *)(a1 + 8));
        ++*(_DWORD *)v11;
        v15 = *(WTF::StringImpl **)a5;
        if (*(_QWORD *)a5)
          *(_DWORD *)v15 += 2;
        v16 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)v21 = *(_OWORD *)(a5 + 8);
        v22 = v16;
        v17 = WTF::fastMalloc((WTF *)0x68);
        *(_QWORD *)v17 = &off_1E34F8540;
        *(_QWORD *)(v17 + 8) = a1;
        *(_QWORD *)(v17 + 16) = a1;
        *(_QWORD *)(v17 + 24) = v11;
        *(_QWORD *)(v17 + 32) = a3;
        *(_QWORD *)(v17 + 40) = a4;
        if (v15)
          *(_DWORD *)v15 += 2;
        *(_QWORD *)(v17 + 48) = v15;
        v18 = v22;
        *(_OWORD *)(v17 + 56) = *(_OWORD *)v21;
        *(_OWORD *)(v17 + 72) = v18;
        *(double *)(v17 + 88) = a6;
        *(_BYTE *)(v17 + 96) = 43;
        v23 = v17;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v25, &v23);
        v20 = v23;
        v23 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v19);
          else
            *(_DWORD *)v15 -= 2;
        }
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v19);
        goto LABEL_23;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13)
      goto LABEL_23;
    goto LABEL_11;
  }
}

void sub_197755060(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  WTF::StringImpl *v16;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didFailLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebExtensionTab *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21[2];
  __int128 v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  WebKit::WebExtensionTab *v26;

  WebKit::WebExtensionContext::getCurrentTab(a1, a2, 0, 0, &v26);
  v11 = v26;
  if (v26)
  {
    MEMORY[0x19AEABCC8](v21, CFSTR("webNavigation"));
    v13 = (WebKit::WebExtensionContext::permissionState(a1, v21, v11, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a5, (URL *)v11, 3) & 0xFFFFFFFE) == 2;
    v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
        {
LABEL_23:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          return;
        }
LABEL_11:
        v24 = 45;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v25, &v24, 1);
        CFRetain(*(CFTypeRef *)(a1 + 8));
        ++*(_DWORD *)v11;
        v15 = *(WTF::StringImpl **)a5;
        if (*(_QWORD *)a5)
          *(_DWORD *)v15 += 2;
        v16 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)v21 = *(_OWORD *)(a5 + 8);
        v22 = v16;
        v17 = WTF::fastMalloc((WTF *)0x68);
        *(_QWORD *)v17 = &off_1E34F8568;
        *(_QWORD *)(v17 + 8) = a1;
        *(_QWORD *)(v17 + 16) = a1;
        *(_QWORD *)(v17 + 24) = v11;
        *(_QWORD *)(v17 + 32) = a3;
        *(_QWORD *)(v17 + 40) = a4;
        if (v15)
          *(_DWORD *)v15 += 2;
        *(_QWORD *)(v17 + 48) = v15;
        v18 = v22;
        *(_OWORD *)(v17 + 56) = *(_OWORD *)v21;
        *(_OWORD *)(v17 + 72) = v18;
        *(double *)(v17 + 88) = a6;
        *(_BYTE *)(v17 + 96) = 45;
        v23 = v17;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v25, &v23);
        v20 = v23;
        v23 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v19);
          else
            *(_DWORD *)v15 -= 2;
        }
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v19);
        goto LABEL_23;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13)
      goto LABEL_23;
    goto LABEL_11;
  }
}

void sub_197755310(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  WTF::StringImpl *v16;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, const WTF::URL *a3, const WebKit::ResourceLoadInfo *a4)
{
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  _BOOL8 result;
  WTF::StringImpl *v12;

  if (!a2)
    return 0;
  MEMORY[0x19AEABCC8](&v12, CFSTR("webRequest"));
  v9 = WebKit::WebExtensionContext::permissionState((uint64_t)this, &v12, a2, 2) & 0xFFFFFFFE;
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v9 != 2)
    return 0;
  result = WebKit::WebExtensionTab::extensionHasPermission((URL *)a2);
  if (!(_DWORD)result)
    return result;
  return ((*((_BYTE *)a3 + 8) & 1) == 0
       || (WebKit::WebExtensionContext::permissionState((uint64_t)this, (URL *)a3, (URL *)a2, 3) & 0xFFFFFFFE) == 2)
      && ((*((_BYTE *)a4 + 64) & 1) == 0
       || (WebKit::WebExtensionContext::permissionState((uint64_t)this, (URL *)((char *)a4 + 56), (URL *)a2, 3) & 0xFFFFFFFE) == 2);
}

void sub_1977554E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidSendRequest(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  WebKit::WebExtensionTab *v7;
  const WTF::URL *v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  __int128 v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::WebExtensionTab *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  __int128 v31;
  _DWORD *v32;
  __int16 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  CFTypeRef *v38;
  CFTypeRef *v39;
  __int128 v40;
  WebKit::WebExtensionTab *v41;
  uint64_t v42;
  _BYTE v43[152];
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  char v48;
  CFTypeRef v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  _DWORD *v54;
  __int128 v55;
  __int128 v56;
  _DWORD *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  unsigned __int8 *v61;
  _BYTE v62[3];
  uint64_t v63;
  WebKit::WebExtensionTab *v64;

  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v64);
  v7 = v64;
  v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4);
  result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v7, v8, a3);
  if ((result & 1) != 0)
  {
    WebKit::WebExtensionTab::window(v7, &v63);
    v37 = v63;
    if (v63)
      v10 = *(_QWORD *)(v63 + 16);
    else
      v10 = -2;
    qmemcpy(v62, "016", sizeof(v62));
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v61, v62, 3);
    v38 = a1;
    CFRetain(a1[1]);
    v39 = a1;
    *(_QWORD *)&v40 = v62;
    *((_QWORD *)&v40 + 1) = 3;
    if (v7)
      ++*(_DWORD *)v7;
    v41 = v7;
    v42 = v10;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v43, (const WebCore::ResourceRequestBase::RequestData *)a4);
    v11 = *(_DWORD **)(a4 + 152);
    if (v11)
      *v11 += 2;
    v44 = v11;
    v12 = *(_DWORD **)(a4 + 160);
    if (v12)
      *v12 += 2;
    v45 = v12;
    v13 = *(_DWORD **)(a4 + 168);
    if (v13)
      ++*v13;
    v14 = *(_QWORD *)(a4 + 176);
    v46 = v13;
    v47 = v14;
    v48 = *(_BYTE *)(a4 + 184);
    WTF::RetainPtr<NSURLRequest>::RetainPtr(&v49, (uint64_t *)(a4 + 192));
    v15 = *((_OWORD *)a3 + 2);
    v16 = *(_OWORD *)a3;
    v51 = *((_OWORD *)a3 + 1);
    v52 = v15;
    v50 = v16;
    v53 = *((_BYTE *)a3 + 48);
    v17 = (_DWORD *)*((_QWORD *)a3 + 7);
    if (v17)
      *v17 += 2;
    v54 = v17;
    v18 = *((_OWORD *)a3 + 5);
    v55 = *((_OWORD *)a3 + 4);
    v56 = v18;
    v19 = (_DWORD *)*((_QWORD *)a3 + 12);
    if (v19)
      *v19 += 2;
    v20 = *((_QWORD *)a3 + 13);
    v57 = v19;
    v58 = v20;
    v59 = *((_WORD *)a3 + 56);
    v21 = WTF::fastMalloc((WTF *)0x178);
    *(_QWORD *)v21 = off_1E34F8590;
    *(_QWORD *)(v21 + 8) = v38;
    *(_QWORD *)(v21 + 16) = v39;
    *(_OWORD *)(v21 + 24) = v40;
    v22 = v41;
    v39 = 0;
    v41 = 0;
    *(_QWORD *)(v21 + 40) = v22;
    *(_QWORD *)(v21 + 48) = v42;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v21 + 56), (const WebCore::ResourceRequestBase::RequestData *)v43);
    v23 = v44;
    if (v44)
      *v44 += 2;
    *(_QWORD *)(v21 + 208) = v23;
    v24 = v45;
    if (v45)
      *v45 += 2;
    *(_QWORD *)(v21 + 216) = v24;
    v25 = v46;
    if (v46)
      ++*v46;
    *(_QWORD *)(v21 + 224) = v25;
    v26 = v48;
    *(_QWORD *)(v21 + 232) = v47;
    *(_BYTE *)(v21 + 240) = v26;
    WTF::RetainPtr<NSURLRequest>::RetainPtr((CFTypeRef *)(v21 + 248), (uint64_t *)&v49);
    v27 = v50;
    v28 = v51;
    v29 = v52;
    *(_BYTE *)(v21 + 304) = v53;
    *(_OWORD *)(v21 + 272) = v28;
    *(_OWORD *)(v21 + 288) = v29;
    *(_OWORD *)(v21 + 256) = v27;
    v30 = v54;
    if (v54)
      *v54 += 2;
    *(_QWORD *)(v21 + 312) = v30;
    v31 = v56;
    *(_OWORD *)(v21 + 320) = v55;
    *(_OWORD *)(v21 + 336) = v31;
    v32 = v57;
    if (v57)
      *v57 += 2;
    *(_QWORD *)(v21 + 352) = v32;
    v33 = v59;
    *(_QWORD *)(v21 + 360) = v58;
    *(_WORD *)(v21 + 368) = v33;
    v60 = v21;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v61, &v60);
    v35 = v60;
    v60 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0(&v38, v34);
    if (v61)
      WTF::fastFree((WTF *)(v61 - 16), v36);
    result = v37;
    if (v37)
      result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v37);
  }
  if (v7)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  return result;
}

void sub_197755878(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a4);
  v7 = *(_QWORD *)(v5 - 128);
  *(_QWORD *)(v5 - 128) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0((uint64_t *)va, a2);
  v9 = *(_QWORD *)(v5 - 120);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v8);
  if (a4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a4);
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WTF::StringImpl *)a1[43];
  a1[43] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[38];
  a1[38] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)a1[30];
  a1[30] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 6));
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebExtensionTab *v10;
  const WTF::URL *v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  _DWORD *v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  WebKit::WebExtensionTab *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _DWORD *v27;
  __int128 v28;
  _DWORD *v29;
  __int16 v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  CFTypeRef *v38;
  CFTypeRef *v39;
  __int128 v40;
  WebKit::WebExtensionTab *v41;
  uint64_t v42;
  _BYTE v43[240];
  void *v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _DWORD *v50;
  __int128 v51;
  __int128 v52;
  _DWORD *v53;
  uint64_t v54;
  __int16 v55;
  _BYTE v56[152];
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  char v61;
  CFTypeRef v62;
  uint64_t v63;
  unsigned __int8 *v64;
  __int16 v65;
  uint64_t v66;
  WebKit::WebExtensionTab *v67;

  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v67);
  v10 = v67;
  v11 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a5);
  result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v10, v11, a3);
  if ((result & 1) != 0)
  {
    WebKit::WebExtensionTab::window(v10, &v66);
    v37 = v66;
    if (v66)
      v13 = *(_QWORD *)(v66 + 16);
    else
      v13 = -2;
    v65 = 12084;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v64, &v65, 2);
    v38 = a1;
    CFRetain(a1[1]);
    v39 = a1;
    *(_QWORD *)&v40 = &v65;
    *((_QWORD *)&v40 + 1) = 2;
    if (v10)
      ++*(_DWORD *)v10;
    v41 = v10;
    v42 = v13;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v43, (const WebCore::ResourceResponseBase *)a4);
    WTF::RetainPtr<NSURLResponse>::RetainPtr(&v44, *(void **)(a4 + 240));
    v45 = *(_BYTE *)(a4 + 248);
    v14 = *((_OWORD *)a3 + 1);
    v46 = *(_OWORD *)a3;
    v47 = v14;
    v48 = *((_OWORD *)a3 + 2);
    v49 = *((_BYTE *)a3 + 48);
    v15 = (_DWORD *)*((_QWORD *)a3 + 7);
    if (v15)
      *v15 += 2;
    v50 = v15;
    v16 = *((_OWORD *)a3 + 5);
    v51 = *((_OWORD *)a3 + 4);
    v52 = v16;
    v17 = (_DWORD *)*((_QWORD *)a3 + 12);
    if (v17)
      *v17 += 2;
    v18 = *((_QWORD *)a3 + 13);
    v53 = v17;
    v54 = v18;
    v55 = *((_WORD *)a3 + 56);
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v56, (const WebCore::ResourceRequestBase::RequestData *)a5);
    v19 = *(_DWORD **)(a5 + 152);
    if (v19)
      *v19 += 2;
    v57 = v19;
    v20 = *(_DWORD **)(a5 + 160);
    if (v20)
      *v20 += 2;
    v58 = v20;
    v21 = *(_DWORD **)(a5 + 168);
    if (v21)
      ++*v21;
    v59 = v21;
    v60 = *(_QWORD *)(a5 + 176);
    v61 = *(_BYTE *)(a5 + 184);
    WTF::RetainPtr<NSURLRequest>::RetainPtr(&v62, (uint64_t *)(a5 + 192));
    v22 = WTF::fastMalloc((WTF *)0x278);
    *(_QWORD *)v22 = off_1E34F85B8;
    *(_QWORD *)(v22 + 8) = v38;
    *(_QWORD *)(v22 + 16) = v39;
    *(_OWORD *)(v22 + 24) = v40;
    v23 = v41;
    v39 = 0;
    v41 = 0;
    *(_QWORD *)(v22 + 40) = v23;
    *(_QWORD *)(v22 + 48) = v42;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v22 + 56), (const WebCore::ResourceResponseBase *)v43);
    WTF::RetainPtr<NSURLResponse>::RetainPtr((_QWORD *)(v22 + 296), v44);
    *(_BYTE *)(v22 + 304) = v45;
    v24 = v46;
    v25 = v47;
    v26 = v48;
    *(_BYTE *)(v22 + 360) = v49;
    *(_OWORD *)(v22 + 328) = v25;
    *(_OWORD *)(v22 + 344) = v26;
    *(_OWORD *)(v22 + 312) = v24;
    v27 = v50;
    if (v50)
      *v50 += 2;
    *(_QWORD *)(v22 + 368) = v27;
    v28 = v52;
    *(_OWORD *)(v22 + 376) = v51;
    *(_OWORD *)(v22 + 392) = v28;
    v29 = v53;
    if (v53)
      *v53 += 2;
    *(_QWORD *)(v22 + 408) = v29;
    v30 = v55;
    *(_QWORD *)(v22 + 416) = v54;
    *(_WORD *)(v22 + 424) = v30;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v22 + 432), (const WebCore::ResourceRequestBase::RequestData *)v56);
    v31 = v57;
    if (v57)
      *v57 += 2;
    *(_QWORD *)(v22 + 584) = v31;
    v32 = v58;
    if (v58)
      *v58 += 2;
    *(_QWORD *)(v22 + 592) = v32;
    v33 = v59;
    if (v59)
      ++*v59;
    *(_QWORD *)(v22 + 600) = v33;
    v34 = v61;
    *(_QWORD *)(v22 + 608) = v60;
    *(_BYTE *)(v22 + 616) = v34;
    WTF::RetainPtr<NSURLRequest>::RetainPtr((CFTypeRef *)(v22 + 624), (uint64_t *)&v62);
    v63 = v22;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v64, &v63);
    v35 = v63;
    v63 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0(&v38);
    if (v64)
      WTF::fastFree((WTF *)(v64 - 16), v36);
    result = WebKit::WebExtensionContext::resourceLoadDidSendRequest(a1, a2, a3, a5);
    if (v37)
      result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v37);
  }
  if (v10)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  return result;
}

void sub_197755DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::ResourceResponseBase *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef cf,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,WTF::StringImpl *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,WTF::StringImpl *a61)
{
  uint64_t v61;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a10);
  if (v61)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v61);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (WebCore::ResourceRequestBase *)(a1 + 53);
  v3 = (const void *)a1[77];
  a1[77] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = (WTF::StringImpl *)a1[50];
  a1[50] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[45];
  a1[45] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)a1[36];
  a1[36] = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 6), v4);
  v8 = a1[4];
  a1[4] = 0;
  if (v8)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v8);
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

WTF::StringImpl *WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, id *a4)
{
  WebKit::WebExtensionTab *v7;
  WTF::StringImpl *v8;
  BOOL hasPermissionToSendWebRequestEvent;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _DWORD *v14;
  __int128 v15;
  _DWORD *v16;
  uint64_t v17;
  WebKit::WebExtensionTab *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;
  __int128 v23;
  _DWORD *v24;
  __int16 v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  WTF::StringImpl *v29;
  CFTypeRef *v30;
  __int128 v31;
  WebKit::WebExtensionTab *v32;
  uint64_t v33;
  _BYTE v34[416];
  id v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _DWORD *v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  char v49;
  uint64_t v50;
  WebKit::WebExtensionTab *v51;

  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v51);
  v7 = v51;
  WTF::URL::URL((WTF::URL *)&v29);
  hasPermissionToSendWebRequestEvent = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v7, (const WTF::URL *)&v29, a3);
  result = v29;
  v29 = 0;
  if (!result)
  {
LABEL_4:
    if (!hasPermissionToSendWebRequestEvent)
      goto LABEL_26;
    goto LABEL_7;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_4;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  if (!hasPermissionToSendWebRequestEvent)
    goto LABEL_26;
LABEL_7:
  WebKit::WebExtensionTab::window(v7, &v50);
  v11 = v50;
  if (v50)
    v12 = *(_QWORD *)(v50 + 16);
  else
    v12 = -2;
  v49 = 46;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v48, &v49, 1);
  v29 = (WTF::StringImpl *)a1;
  CFRetain(a1[1]);
  v30 = a1;
  *(_QWORD *)&v31 = &v49;
  *((_QWORD *)&v31 + 1) = 1;
  if (v7)
    ++*(_DWORD *)v7;
  v32 = v7;
  v33 = v12;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v34, (const WebCore::AuthenticationChallengeBase *)a4);
  WTF::RetainPtr<objc_object * {__strong}>::RetainPtr(&v35, a4 + 52);
  WTF::RetainPtr<NSURLAuthenticationChallenge>::RetainPtr(&v36, a4 + 53);
  v13 = *((_OWORD *)a3 + 1);
  v37 = *(_OWORD *)a3;
  v38 = v13;
  v39 = *((_OWORD *)a3 + 2);
  v40 = *((_BYTE *)a3 + 48);
  v14 = (_DWORD *)*((_QWORD *)a3 + 7);
  if (v14)
    *v14 += 2;
  v41 = v14;
  v15 = *((_OWORD *)a3 + 5);
  v42 = *((_OWORD *)a3 + 4);
  v43 = v15;
  v16 = (_DWORD *)*((_QWORD *)a3 + 12);
  if (v16)
    *v16 += 2;
  v44 = v16;
  v45 = *((_QWORD *)a3 + 13);
  v46 = *((_WORD *)a3 + 56);
  v17 = WTF::fastMalloc((WTF *)0x260);
  *(_QWORD *)v17 = off_1E34F85E0;
  *(_QWORD *)(v17 + 8) = v29;
  *(_QWORD *)(v17 + 16) = v30;
  *(_OWORD *)(v17 + 24) = v31;
  v18 = v32;
  v30 = 0;
  v32 = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = v33;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(v17 + 56), (const WebCore::AuthenticationChallengeBase *)v34);
  WTF::RetainPtr<objc_object * {__strong}>::RetainPtr((_QWORD *)(v17 + 472), &v35);
  WTF::RetainPtr<NSURLAuthenticationChallenge>::RetainPtr((_QWORD *)(v17 + 480), &v36);
  v19 = v37;
  v20 = v38;
  v21 = v39;
  *(_BYTE *)(v17 + 536) = v40;
  *(_OWORD *)(v17 + 504) = v20;
  *(_OWORD *)(v17 + 520) = v21;
  *(_OWORD *)(v17 + 488) = v19;
  v22 = v41;
  if (v41)
    *v41 += 2;
  *(_QWORD *)(v17 + 544) = v22;
  v23 = v43;
  *(_OWORD *)(v17 + 552) = v42;
  *(_OWORD *)(v17 + 568) = v23;
  v24 = v44;
  if (v44)
    *v44 += 2;
  *(_QWORD *)(v17 + 584) = v24;
  v25 = v46;
  *(_QWORD *)(v17 + 592) = v45;
  *(_WORD *)(v17 + 600) = v25;
  v47 = v17;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v48, &v47);
  v27 = v47;
  v47 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  result = (WTF::StringImpl *)WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(&v29, v26);
  if (v48)
    result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v48 - 16), v28);
  if (v11)
    result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
LABEL_26:
  if (v7)
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  return result;
}

void sub_197756398(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v13 = *(_QWORD *)(v11 - 120);
  *(_QWORD *)(v11 - 120) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(&a9, a2);
  v15 = *(_QWORD *)(v11 - 112);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v14);
  if (v10)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
  if (v9)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (WTF::StringImpl *)a1[72];
  a1[72] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[67];
  a1[67] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)a1[59];
  a1[59] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[58];
  a1[58] = 0;
  if (v6)
    CFRelease(v6);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 6), a2);
  v7 = a1[4];
  a1[4] = 0;
  if (v7)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v7);
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return a1;
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  WebKit::WebExtensionTab *v7;
  const WTF::URL *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _DWORD *v13;
  __int128 v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebExtensionTab *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;
  __int128 v23;
  _DWORD *v24;
  __int16 v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  CFTypeRef *v29;
  CFTypeRef *v30;
  __int128 v31;
  WebKit::WebExtensionTab *v32;
  uint64_t v33;
  _BYTE v34[240];
  void *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _DWORD *v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  __int16 v49;
  uint64_t v50;
  WebKit::WebExtensionTab *v51;

  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v51);
  v7 = v51;
  v8 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
  result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v7, v8, a3);
  if ((result & 1) != 0)
  {
    WebKit::WebExtensionTab::window(v7, &v50);
    v10 = v50;
    if (v50)
      v11 = *(_QWORD *)(v50 + 16);
    else
      v11 = -2;
    v49 = 13620;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v48, &v49, 2);
    v29 = a1;
    CFRetain(a1[1]);
    v30 = a1;
    *(_QWORD *)&v31 = &v49;
    *((_QWORD *)&v31 + 1) = 2;
    if (v7)
      ++*(_DWORD *)v7;
    v32 = v7;
    v33 = v11;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v34, (const WebCore::ResourceResponseBase *)a4);
    WTF::RetainPtr<NSURLResponse>::RetainPtr(&v35, *(void **)(a4 + 240));
    v36 = *(_BYTE *)(a4 + 248);
    v12 = *((_OWORD *)a3 + 1);
    v37 = *(_OWORD *)a3;
    v38 = v12;
    v39 = *((_OWORD *)a3 + 2);
    v40 = *((_BYTE *)a3 + 48);
    v13 = (_DWORD *)*((_QWORD *)a3 + 7);
    if (v13)
      *v13 += 2;
    v41 = v13;
    v14 = *((_OWORD *)a3 + 5);
    v42 = *((_OWORD *)a3 + 4);
    v43 = v14;
    v15 = (_DWORD *)*((_QWORD *)a3 + 12);
    if (v15)
      *v15 += 2;
    v16 = *((_QWORD *)a3 + 13);
    v44 = v15;
    v45 = v16;
    v46 = *((_WORD *)a3 + 56);
    v17 = WTF::fastMalloc((WTF *)0x1B0);
    *(_QWORD *)v17 = off_1E34F8608;
    *(_QWORD *)(v17 + 8) = v29;
    *(_QWORD *)(v17 + 16) = v30;
    *(_OWORD *)(v17 + 24) = v31;
    v18 = v32;
    v30 = 0;
    v32 = 0;
    *(_QWORD *)(v17 + 40) = v18;
    *(_QWORD *)(v17 + 48) = v33;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v17 + 56), (const WebCore::ResourceResponseBase *)v34);
    WTF::RetainPtr<NSURLResponse>::RetainPtr((_QWORD *)(v17 + 296), v35);
    *(_BYTE *)(v17 + 304) = v36;
    v19 = v37;
    v20 = v38;
    v21 = v39;
    *(_BYTE *)(v17 + 360) = v40;
    *(_OWORD *)(v17 + 328) = v20;
    *(_OWORD *)(v17 + 344) = v21;
    *(_OWORD *)(v17 + 312) = v19;
    v22 = v41;
    if (v41)
      *v41 += 2;
    *(_QWORD *)(v17 + 368) = v22;
    v23 = v43;
    *(_OWORD *)(v17 + 376) = v42;
    *(_OWORD *)(v17 + 392) = v23;
    v24 = v44;
    if (v44)
      *v44 += 2;
    *(_QWORD *)(v17 + 408) = v24;
    v25 = v46;
    *(_QWORD *)(v17 + 416) = v45;
    *(_WORD *)(v17 + 424) = v25;
    v47 = v17;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v48, &v47);
    v27 = v47;
    v47 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    result = (uint64_t)WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(&v29, v26);
    if (v48)
      result = WTF::fastFree((WTF *)(v48 - 16), v28);
    if (v10)
      result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
  }
  if (v7)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  return result;
}

void sub_197756858(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v13 = *(_QWORD *)(v11 - 120);
  *(_QWORD *)(v11 - 120) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(&a9, a2);
  v15 = *(_QWORD *)(v11 - 112);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v14);
  if (v10)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
  if (v9)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WTF::StringImpl *)a1[50];
  a1[50] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[45];
  a1[45] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)a1[36];
  a1[36] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 6), a2);
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebExtensionTab *v9;
  const WTF::URL *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _DWORD *v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WebKit::WebExtensionTab *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _DWORD *v24;
  __int128 v25;
  _DWORD *v26;
  __int16 v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  void *v30;
  CFTypeRef *v31;
  CFTypeRef *v32;
  __int128 v33;
  WebKit::WebExtensionTab *v34;
  uint64_t v35;
  _BYTE v36[240];
  void *v37;
  char v38;
  _BYTE v39[80];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  _DWORD *v44;
  __int128 v45;
  __int128 v46;
  _DWORD *v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  unsigned __int8 *v51;
  __int16 v52;
  uint64_t v53;
  WebKit::WebExtensionTab *v54;

  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v54);
  v9 = v54;
  v10 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
  result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v9, v10, a3);
  if ((result & 1) != 0)
  {
    WebKit::WebExtensionTab::window(v9, &v53);
    v12 = v53;
    if (v53)
      v13 = *(_QWORD *)(v53 + 16);
    else
      v13 = -2;
    v52 = 12851;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v51, &v52, 2);
    v31 = a1;
    CFRetain(a1[1]);
    v32 = a1;
    *(_QWORD *)&v33 = &v52;
    *((_QWORD *)&v33 + 1) = 2;
    if (v9)
      ++*(_DWORD *)v9;
    v34 = v9;
    v35 = v13;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v36, (const WebCore::ResourceResponseBase *)a4);
    WTF::RetainPtr<NSURLResponse>::RetainPtr(&v37, *(void **)(a4 + 240));
    v38 = *(_BYTE *)(a4 + 248);
    WebCore::ResourceError::ResourceError((uint64_t)v39, a5);
    v14 = *((_OWORD *)a3 + 1);
    v40 = *(_OWORD *)a3;
    v41 = v14;
    v42 = *((_OWORD *)a3 + 2);
    v43 = *((_BYTE *)a3 + 48);
    v15 = (_DWORD *)*((_QWORD *)a3 + 7);
    if (v15)
      *v15 += 2;
    v44 = v15;
    v16 = *((_OWORD *)a3 + 5);
    v45 = *((_OWORD *)a3 + 4);
    v46 = v16;
    v17 = (_DWORD *)*((_QWORD *)a3 + 12);
    if (v17)
      *v17 += 2;
    v18 = *((_QWORD *)a3 + 13);
    v47 = v17;
    v48 = v18;
    v49 = *((_WORD *)a3 + 56);
    v19 = WTF::fastMalloc((WTF *)0x200);
    *(_QWORD *)v19 = off_1E34F8630;
    *(_QWORD *)(v19 + 8) = v31;
    *(_QWORD *)(v19 + 16) = v32;
    *(_OWORD *)(v19 + 24) = v33;
    v20 = v34;
    v32 = 0;
    v34 = 0;
    *(_QWORD *)(v19 + 40) = v20;
    *(_QWORD *)(v19 + 48) = v35;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v19 + 56), (const WebCore::ResourceResponseBase *)v36);
    WTF::RetainPtr<NSURLResponse>::RetainPtr((_QWORD *)(v19 + 296), v37);
    *(_BYTE *)(v19 + 304) = v38;
    WebCore::ResourceError::ResourceError(v19 + 312, (uint64_t)v39);
    v21 = v40;
    v22 = v41;
    v23 = v42;
    *(_BYTE *)(v19 + 440) = v43;
    *(_OWORD *)(v19 + 408) = v22;
    *(_OWORD *)(v19 + 424) = v23;
    *(_OWORD *)(v19 + 392) = v21;
    v24 = v44;
    if (v44)
      *v44 += 2;
    *(_QWORD *)(v19 + 448) = v24;
    v25 = v46;
    *(_OWORD *)(v19 + 456) = v45;
    *(_OWORD *)(v19 + 472) = v25;
    v26 = v47;
    if (v47)
      *v47 += 2;
    *(_QWORD *)(v19 + 488) = v26;
    v27 = v49;
    *(_QWORD *)(v19 + 496) = v48;
    *(_WORD *)(v19 + 504) = v27;
    v50 = v19;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v51, &v50);
    v29 = v50;
    v50 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    result = (uint64_t)WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(&v31, v28);
    if (v51)
      result = WTF::fastFree((WTF *)(v51 - 16), v30);
    if (v12)
      result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v12);
  }
  if (v9)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
  return result;
}

void sub_197756CD4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  void *v50;
  uint64_t v51;

  v49 = *(_QWORD *)(v47 - 120);
  *(_QWORD *)(v47 - 120) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(&a9, a2);
  v51 = *(_QWORD *)(v47 - 112);
  if (v51)
    WTF::fastFree((WTF *)(v51 - 16), v50);
  if (v46)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v46);
  if (v45)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v45);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (WTF::StringImpl *)a1[60];
  a1[60] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[55];
  a1[55] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)a1[46];
  a1[46] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF::StringImpl *)a1[44];
  a1[44] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[39];
  a1[39] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[38];
  a1[38] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (const void *)a1[36];
  a1[36] = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 6), a2);
  v10 = a1[4];
  a1[4] = 0;
  if (v10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v10);
  v11 = a1[1];
  a1[1] = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  return a1;
}

uint64_t WebKit::WebExtensionContext::defaultAction(WebKit::WebExtensionContext *this)
{
  uint64_t result;
  WebKit::WebExtensionAction *v3;
  uint64_t v4;
  WebKit::WebExtensionAction *v5;
  WebKit::WebExtensionAction *v6;

  result = *((_QWORD *)this + 56);
  if (!result)
  {
    WebKit::WebExtensionAction::create<WebKit::WebExtensionContext &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = *((_QWORD *)this + 56);
    *((_QWORD *)this + 56) = v3;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      v5 = v6;
      v6 = 0;
      if (v5)
        CFRelease(*((CFTypeRef *)v5 + 1));
    }
    return *((_QWORD *)this + 56);
  }
  return result;
}

WebKit::WebExtensionAction *WebKit::WebExtensionAction::create<WebKit::WebExtensionContext &>@<X0>(WebKit::WebExtensionContext *a1@<X0>, WebKit::WebExtensionAction **a2@<X8>)
{
  WebKit::WebExtensionAction *v4;
  WebKit::WebExtensionAction *result;

  v4 = (WebKit::WebExtensionAction *)API::Object::newObject(0x80uLL, 111);
  result = WebKit::WebExtensionAction::WebExtensionAction(v4, a1);
  *a2 = v4;
  return result;
}

void sub_197756FDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::WebExtensionContext::getAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionWindow *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef result;

  if (!a2
    || (++*((_DWORD *)this + 106), (v5 = *((_QWORD *)a2 + 1)) == 0)
    || !*(_QWORD *)(v5 + 8)
    || (v6 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 52, v5)) == 0)
  {
    v6 = WebKit::WebExtensionContext::defaultAction(this);
  }
  result = CFRetain(*(CFTypeRef *)(v6 + 8));
  *a3 = v6;
  return result;
}

CFTypeRef WebKit::WebExtensionContext::getAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionTab *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef result;
  WebKit::WebExtensionWindow *v10;
  uint64_t v11;
  WebKit::WebExtensionWindow *v12;

  if (a2)
  {
    ++*((_DWORD *)this + 110);
    v6 = *((_QWORD *)a2 + 1);
    if (v6
      && *(_QWORD *)(v6 + 8)
      && (v7 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 54, v6)) != 0)
    {
      v8 = v7;
      result = CFRetain(*(CFTypeRef *)(v7 + 8));
      *a3 = v8;
    }
    else
    {
      WebKit::WebExtensionTab::window(a2, &v12);
      v10 = v12;
      result = WebKit::WebExtensionContext::getAction(this, v12, a3);
      if (v10)
        return (CFTypeRef)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v10);
    }
  }
  else
  {
    v11 = WebKit::WebExtensionContext::defaultAction(this);
    result = CFRetain(*(CFTypeRef *)(v11 + 8));
    *a3 = v11;
  }
  return result;
}

void sub_19775711C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::WebExtensionContext::getOrCreateAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionWindow *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  char v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int i;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v36;
  _QWORD *v37;
  WebKit::WebExtensionAction *v38;
  uint64_t v39;
  WebKit::WebExtensionAction *v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  CFTypeRef result;
  WebKit::WebExtensionAction *v50;

  if (!a2)
  {
    v11 = WebKit::WebExtensionContext::defaultAction(this);
    v12 = *(const void **)(v11 + 8);
    goto LABEL_68;
  }
  v6 = (_QWORD *)((char *)this + 416);
  v7 = *((_DWORD *)this + 106);
  *((_DWORD *)this + 106) = v7 + 1;
  if (v7 > *((_DWORD *)this + 107))
    WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 416, a2);
  v8 = *((_QWORD *)a2 + 1);
  if (v8
    || (v8 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v8 = 1,
        *(_QWORD *)(v8 + 8) = a2,
        v13 = (unsigned int *)*((_QWORD *)a2 + 1),
        *((_QWORD *)a2 + 1) = v8,
        !v13))
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
  }
  else
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
    v8 = *((_QWORD *)a2 + 1);
    do
      v16 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v16 + 1, (unsigned int *)v8));
    do
      v17 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v17 + 1, (unsigned int *)v8));
    if (!v8)
      goto LABEL_20;
  }
  do
  {
    v18 = __ldaxr((unsigned int *)v8);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v8));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, a2);
  }
LABEL_20:
  v20 = (_QWORD *)*v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 52, 0), (v20 = (_QWORD *)*v6) != 0))
  {
    v21 = 0;
    v22 = *((_DWORD *)v20 - 2);
  }
  else
  {
    v22 = 0;
    v21 = 1;
  }
  v23 = 0;
  v24 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = (v26 >> 31) ^ v26;
  for (i = 1; ; ++i)
  {
    v29 = v27 & v22;
    v30 = &v20[2 * (v27 & v22)];
    v31 = *v30;
    if (*v30 != -1)
      break;
    v23 = (uint64_t)&v20[2 * v29];
LABEL_29:
    v27 = i + v29;
  }
  if (!v31)
  {
    if (v23)
    {
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      *(_QWORD *)v23 = v8;
    }
    else
    {
      *v30 = v8;
      v23 = (uint64_t)v30;
    }
    WebKit::WebExtensionAction::create<WebKit::WebExtensionContext &>(this, &v50);
    v38 = v50;
    v50 = 0;
    v39 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v38;
    if (v39)
    {
      CFRelease(*(CFTypeRef *)(v39 + 8));
      v40 = v50;
      v50 = 0;
      if (v40)
        CFRelease(*((CFTypeRef *)v40 + 1));
    }
    v41 = (_QWORD *)*v6;
    if (*v6)
      v42 = *((_DWORD *)v41 - 3) + 1;
    else
      v42 = 1;
    *((_DWORD *)v41 - 3) = v42;
    v43 = (_QWORD *)*v6;
    if (*v6)
      v44 = *((_DWORD *)v43 - 3);
    else
      v44 = 0;
    v45 = (*((_DWORD *)v43 - 4) + v44);
    v46 = *((unsigned int *)v43 - 1);
    if (v46 > 0x400)
    {
      if (v46 <= 2 * v45)
      {
LABEL_51:
        v23 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 52, (unsigned int **)v23);
        v43 = (_QWORD *)*v6;
        if (*v6)
          v46 = *((unsigned int *)v43 - 1);
        else
          v46 = 0;
      }
    }
    else if (3 * v46 <= 4 * v45)
    {
      goto LABEL_51;
    }
    v33 = &v43[2 * v46];
    v30 = (_QWORD *)v23;
    goto LABEL_56;
  }
  if (v31 != v8)
    goto LABEL_29;
  if ((v21 & 1) != 0)
    v32 = 0;
  else
    v32 = *((unsigned int *)v20 - 1);
  v33 = &v20[2 * v32];
  if (v8)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)v8);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v8));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v8);
      v36 = (WTF *)v8;
      v37 = v30;
      WTF::fastFree(v36, a2);
      v30 = v37;
    }
  }
LABEL_56:
  v47 = (_QWORD *)*v6;
  if (*v6)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v30 != v47)
  {
    while (!*(_QWORD *)(*v30 + 8))
    {
      v48 = v30 + 2;
      v30 = v33;
      if (v48 != v33)
      {
        v30 = v48;
        while ((unint64_t)(*v30 + 1) <= 1)
        {
          v30 += 2;
          if (v30 == v33)
          {
            v30 = v33;
            break;
          }
        }
      }
      if (v30 == v47)
      {
        v30 = v47;
        break;
      }
    }
  }
  v11 = v30[1];
  v12 = *(const void **)(v11 + 8);
LABEL_68:
  result = CFRetain(v12);
  *a3 = v11;
  return result;
}

void sub_1977574E4(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::WebExtensionContext::getOrCreateAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionTab *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int i;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  WebKit::WebExtensionAction *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CFTypeRef result;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;

  if (!a2)
  {
    v11 = WebKit::WebExtensionContext::defaultAction(this);
    v12 = *(const void **)(v11 + 8);
    goto LABEL_59;
  }
  v6 = (_QWORD *)((char *)this + 432);
  v7 = *((_DWORD *)this + 110);
  *((_DWORD *)this + 110) = v7 + 1;
  if (v7 > *((_DWORD *)this + 111))
    WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 432, a2);
  v8 = *((_QWORD *)a2 + 1);
  if (v8
    || (v8 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v8 = 1,
        *(_QWORD *)(v8 + 8) = a2,
        v13 = (unsigned int *)*((_QWORD *)a2 + 1),
        *((_QWORD *)a2 + 1) = v8,
        !v13))
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
  }
  else
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
    v8 = *((_QWORD *)a2 + 1);
    do
      v16 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v16 + 1, (unsigned int *)v8));
    do
      v17 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v17 + 1, (unsigned int *)v8));
    if (!v8)
      goto LABEL_20;
  }
  do
  {
    v18 = __ldaxr((unsigned int *)v8);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v8));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, a2);
  }
LABEL_20:
  v20 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 54, 0), (v20 = *v6) != 0))
  {
    v21 = 0;
    v22 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v22 = 0;
    v21 = 1;
  }
  v23 = 0;
  v24 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = (v26 >> 31) ^ v26;
  for (i = 1; ; ++i)
  {
    v29 = v27 & v22;
    v30 = (_QWORD *)(v20 + 16 * (v27 & v22));
    v31 = *v30;
    if (*v30 != -1)
      break;
    v23 = v20 + 16 * v29;
LABEL_29:
    v27 = i + v29;
  }
  if (!v31)
  {
    if (v23)
    {
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      *(_QWORD *)v23 = v8;
    }
    else
    {
      *v30 = v8;
      v23 = (uint64_t)v30;
    }
    v37 = (WebKit::WebExtensionAction *)API::Object::newObject(0x80uLL, 111);
    WebKit::WebExtensionAction::WebExtensionAction(v37, this, a2);
    v38 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v37;
    if (v38)
      CFRelease(*(CFTypeRef *)(v38 + 8));
    v39 = *v6;
    if (*v6)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v6;
    if (*v6)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 <= 2 * v43)
      {
LABEL_50:
        v23 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 54, (unsigned int **)v23);
        v41 = *v6;
        if (*v6)
          v44 = *(unsigned int *)(v41 - 4);
        else
          v44 = 0;
      }
    }
    else if (3 * v44 <= 4 * v43)
    {
      goto LABEL_50;
    }
    v33 = v41 + 16 * v44;
    v30 = (_QWORD *)v23;
    goto LABEL_55;
  }
  if (v31 != v8)
    goto LABEL_29;
  if ((v21 & 1) != 0)
    v32 = 0;
  else
    v32 = *(unsigned int *)(v20 - 4);
  v33 = v20 + 16 * v32;
  if (v8)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)v8);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v8));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v8);
      v36 = v30;
      WTF::fastFree((WTF *)v8, a2);
      v30 = v36;
    }
  }
LABEL_55:
  v49 = v6;
  v50 = v30;
  v51 = v33;
  v45 = *v6;
  if (*v6)
  {
    v46 = *(unsigned int *)(v45 - 4);
    v47 = v45 + 16 * v46;
  }
  else
  {
    v47 = 0;
    v46 = 0;
  }
  v52 = v47;
  v53 = v45 + 16 * v46;
  v54 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v49);
  v11 = v50[1];
  v12 = *(const void **)(v11 + 8);
LABEL_59:
  result = CFRetain(v12);
  *a3 = v11;
  return result;
}

void sub_197757898(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::performAction(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, int a3)
{
  uint64_t v3;
  CFTypeRef *v6;
  WebKit::WebExtensionAction *v7;

  v3 = *((_QWORD *)this + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    if (a2 && a3)
      WebKit::WebExtensionContext::userGesturePerformed(this, a2);
    WebKit::WebExtensionContext::getOrCreateAction(this, a2, (uint64_t *)&v7);
    v6 = (CFTypeRef *)v7;
    if (WebKit::WebExtensionAction::presentsPopup(v7))
      WebKit::WebExtensionAction::presentPopupWhenReady((WebKit::WebExtensionAction *)v6);
    else
      WebKit::WebExtensionContext::fireActionClickedEventIfNeeded((CFTypeRef *)this, a2);
    if (v6)
      CFRelease(v6[1]);
  }
}

void sub_197757974(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::userGesturePerformed(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2)
{
  uint64_t v2;
  WTF::StringImpl *v5;
  int v6;
  StringImpl *m_ptr;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  StringImpl *v13;
  uint64_t v14;
  URL v15;

  v2 = *((_QWORD *)this + 8);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    *(_DWORD *)((char *)a2 + 50) |= 1u;
    MEMORY[0x19AEABCC8](&v15, CFSTR("activeTab"));
    v6 = WebKit::WebExtensionContext::permissionState((uint64_t)this, (WTF **)&v15, 0, 2) & 0xFFFFFFFE;
    m_ptr = v15.m_string.m_impl.m_ptr;
    v15.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v5);
      else
        *(_DWORD *)m_ptr -= 2;
    }
    if (v6 == 2)
    {
      if (WebKit::WebExtensionTab::shouldGrantTabPermissionsOnUserGesture(a2))
      {
        WebKit::WebExtensionTab::url(a2, (uint64_t)&v15);
        if (v15.m_string.m_impl.m_ptr)
        {
          if (*((_DWORD *)v15.m_string.m_impl.m_ptr + 1))
          {
            v9 = WebKit::WebExtensionContext::permissionState((uint64_t)this, &v15, (URL *)a2, 1);
            if ((v9 - 2) >= 2 && (v9 - 253) >= 2)
            {
              WebKit::WebExtensionMatchPattern::getOrCreate((uint64_t)&v15, 6, &v14);
              v10 = v14;
              if (v14)
                CFRetain(*(CFTypeRef *)(v14 + 8));
              v11 = *((_QWORD *)a2 + 5);
              *((_QWORD *)a2 + 5) = v10;
              if (v11)
                CFRelease(*(CFTypeRef *)(v11 + 8));
              WebKit::WebExtensionContext::didChangeTabProperties((uint64_t)this, a2, 0x180u);
              v12 = v14;
              v14 = 0;
              if (v12)
                CFRelease(*(CFTypeRef *)(v12 + 8));
            }
          }
          v13 = v15.m_string.m_impl.m_ptr;
          v15.m_string.m_impl.m_ptr = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
  }
}

void sub_197757B08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::commands(WebKit::WebExtensionContext *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_BYTE *)this + 592))
  {
    v2 = *((_QWORD *)this + 7);
    WebKit::WebExtension::populateCommandsIfNeeded((WebKit::WebExtension *)v2);
    v18 = 0;
    v19 = 0;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v19) = v4;
      v18 = v5;
      v6 = *(unsigned int *)(v2 + 68);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = *(_QWORD *)(v2 + 56);
        v9 = 32 * v6;
        do
        {
          v10 = API::Object::newObject(0x48uLL, 112);
          *(_QWORD *)(v5 + 8 * v7++) = WebKit::WebExtensionCommand::WebExtensionCommand(v10, (uint64_t)this, v8);
          v8 += 32;
          v9 -= 32;
        }
        while (v9);
        HIDWORD(v19) = v6;
      }
    }
    v11 = (WTF **)((char *)this + 576);
    v12 = *((unsigned int *)this + 147);
    if ((_DWORD)v12)
    {
      v13 = *v11;
      v14 = 8 * v12;
      do
      {
        v15 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
          CFRelease(*(CFTypeRef *)(v15 + 8));
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    v16 = *v11;
    if (*v11)
    {
      *((_QWORD *)this + 72) = 0;
      *((_DWORD *)this + 146) = 0;
      WTF::fastFree(v16, v3);
    }
    *((_QWORD *)this + 72) = v18;
    v17 = v19;
    v18 = 0;
    v19 = 0;
    *((_QWORD *)this + 73) = v17;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v3);
    *((_BYTE *)this + 592) = 1;
  }
}

void sub_197757C94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::command(WebKit::WebExtensionContext *this, const WTF::StringImpl **a2)
{
  uint64_t *v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*a2)
    return 0;
  if (!*((_DWORD *)*a2 + 1))
    return 0;
  WebKit::WebExtensionContext::commands(this);
  v5 = *((unsigned int *)v3 + 3);
  if (!(_DWORD)v5)
    return 0;
  v6 = *v3;
  v7 = 8 * v5;
  while (!WTF::equal(*(WTF **)(*(_QWORD *)v6 + 32), *a2, v4))
  {
    v6 += 8;
    v7 -= 8;
    if (!v7)
      return 0;
  }
  return *(_QWORD *)v6;
}

uint64_t WebKit::WebExtensionContext::performCommand(uint64_t result, WebKit::WebExtensionCommand *a2, int a3)
{
  uint64_t v3;
  WebKit::WebExtensionContext *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isActionCommand;
  WebKit::WebExtensionTab *v11;
  WebKit::WebExtensionTab *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(result + 64);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v6 = (WebKit::WebExtensionContext *)result;
    v7 = *((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v7 = v8 - 16;
      else
        v7 = 0;
    }
    if (v7 == result)
    {
      if (*(_DWORD *)(result + 508))
      {
        WebKit::WebExtensionContext::getWindow(result, **(_QWORD **)(result + 496), 0, 0, 0, &v13);
        v9 = v13;
        if (v13)
        {
          WebKit::WebExtensionWindow::activeTab(v13, 0, (uint64_t *)&v12);
LABEL_13:
          isActionCommand = WebKit::WebExtensionCommand::isActionCommand(a2);
          v11 = v12;
          if (isActionCommand)
          {
            WebKit::WebExtensionContext::performAction(v6, v12, a3);
          }
          else
          {
            if (v12 && a3)
            {
              WebKit::WebExtensionContext::userGesturePerformed(v6, v12);
              v11 = v12;
            }
            WebKit::WebExtensionContext::fireCommandEventIfNeeded((CFTypeRef *)v6, (CFTypeRef *)a2, v11);
          }
          result = (uint64_t)v12;
          v12 = 0;
          if (result)
            result = WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
          if (v9)
            return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v9);
          return result;
        }
      }
      else
      {
        v13 = 0;
      }
      v9 = 0;
      v12 = 0;
      goto LABEL_13;
    }
  }
  return result;
}

void sub_197757E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionCommand *WebKit::WebExtensionContext::commandMatchingKeyCommand(WebKit::WebExtensionContext *this, UIKeyCommand *a2)
{
  UIKeyCommand *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebExtensionCommand **v6;
  uint64_t v7;
  WebKit::WebExtensionCommand *v8;

  v3 = a2;
  WebKit::WebExtensionContext::commands(this);
  v5 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(WebKit::WebExtensionCommand ***)v4;
    v7 = 8 * v5;
    while (!WebKit::WebExtensionCommand::matchesKeyCommand(*v6, v3))
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
    v8 = *v6;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }

  return v8;
}

void sub_197757EF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::performCommand(WebKit::WebExtensionContext *this, UIKeyCommand *a2)
{
  UIKeyCommand *v3;
  uint64_t v4;
  WebKit::WebExtensionCommand *v5;
  CFTypeRef *v6;
  uint64_t v7;

  v3 = a2;
  v4 = *((_QWORD *)this + 8);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && (v5 = WebKit::WebExtensionContext::commandMatchingKeyCommand(this, v3), (v6 = (CFTypeRef *)v5) != 0))
  {
    CFRetain(*((CFTypeRef *)v5 + 1));
    WebKit::WebExtensionContext::performCommand((uint64_t)this, (WebKit::WebExtensionCommand *)v6, 1);
    CFRelease(v6[1]);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_197757F88(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::platformMenuItems(WebKit::WebExtensionContext *this, const WebKit::WebExtensionTab *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v20[5];
  __int128 v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionMenuItemContextParameters::WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)&v21);
  LOWORD(v21) = 256;
  v4 = *((_QWORD *)a2 + 2);
  if (!v22)
    v22 = 1;
  *((_QWORD *)&v21 + 1) = v4;
  WebKit::WebExtensionTab::url(a2, (uint64_t)v20);
  WTF::URL::operator=((uint64_t)&v23, (WTF::StringImpl *)v20);
  v6 = v20[0];
  v20[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebKit::WebExtensionMenuItem::matchingPlatformMenuItems((uint64_t)this + 672, &v21, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "count", v20[0]))
  {
    v9 = (void *)MEMORY[0x1E0C9AA60];
LABEL_14:

    goto LABEL_16;
  }
  if (objc_msgSend(v7, "count") == 1)
  {
    objc_msgSend(v7, "firstObject");
    v8 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = (void *)MEMORY[0x1E0CEA740];
    v11 = (uint64_t *)*((_QWORD *)this + 7);
    WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v11);
    WTF::RetainPtr<__IOHIDDevice *>::get(v11 + 25);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "menuWithTitle:children:", v12, v7);
    v8 = objc_claimAutoreleasedReturnValue();

  }
  if (v8)
  {
    v28[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)v8;
    goto LABEL_14;
  }
  v9 = (void *)MEMORY[0x1E0C9AA60];
LABEL_16:
  v14 = v27;
  v27 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v26;
  v26 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v25;
  v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v9;
}

void sub_1977581F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35)
{
  void *v35;
  void *v36;
  void *v37;
  WTF::StringImpl *v39;

  v37 = v35;

  if (a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, v39);
    else
      *(_DWORD *)a35 -= 2;
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, v39);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, v39);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, v39);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v39);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::performMenuItem(uint64_t *a1, WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionMenuItemContextParameters *a3, int a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  WebKit::WebExtensionTab *v11;
  CFTypeRef *v12;
  char v13;
  WebKit::WebExtensionTab *v14;

  v4 = a1[8];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v9 = (uint64_t *)*((_QWORD *)this + 2);
    if (v9)
    {
      v10 = v9[1];
      if (v10)
        v9 = (uint64_t *)(v10 - 16);
      else
        v9 = 0;
    }
    if (v9 == a1)
    {
      if (!*((_BYTE *)a3 + 16))
        goto LABEL_15;
      WebKit::WebExtensionContext::getTab(a1, *((_QWORD *)a3 + 1), 0, &v14);
      v11 = v14;
      if (v14 && a4)
      {
        WebKit::WebExtensionContext::userGesturePerformed((WebKit::WebExtensionContext *)a1, v14);
      }
      else if (!v14)
      {
        goto LABEL_15;
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
LABEL_15:
      v12 = (CFTypeRef *)*((_QWORD *)this + 6);
      if (v12)
      {
        CFRetain(v12[1]);
        WebKit::WebExtensionContext::performCommand((uint64_t)a1, (WebKit::WebExtensionCommand *)v12, 0);
        CFRelease(v12[1]);
      }
      else
      {
        v13 = WebKit::WebExtensionMenuItem::toggleCheckedIfNeeded(this, a3, a3);
        WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded((WebKit::WebExtensionContext *)a1, this, v13, a3);
      }
    }
  }
}

void sub_197758434(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtensionContext::backgroundPageIdentifier(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *((_QWORD *)this + 38);
  if (v1)
  {
    v3 = *((_QWORD *)this + 7);
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)v3);
    if (!*(_BYTE *)(v3 + 312))
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_page");
      v6 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 1896);
      v4 = v6 & 0xFFFFFFFFFFFFFF00;

      v1 = v6;
      return v4 | v1;
    }
    v1 = 0;
  }
  v4 = 0;
  return v4 | v1;
}

void sub_1977584F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::popupPageIdentifiers@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebExtensionTab *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[7];
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (char *)this + 552;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(&v39, (_QWORD *)this + 69);
  v5 = *((_QWORD *)this + 69);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (uint64_t *)(v5 + 16 * v6);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v33 = v4;
  v34 = v7;
  v35 = v7;
  v36 = v7;
  v37 = v5 + 16 * v6;
  v38 = 0;
  result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v33);
  v9 = v34;
  v10 = v40;
  if (v40 != v34)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v14 = *v10;
      v13 = v10[1];
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
        v16 = v15 - 16;
      else
        v16 = 0;
      v17 = *(WebKit::WebExtensionTab **)(v13 + 32);
      if (v17)
      {
        ++*(_DWORD *)v17;
        WebKit::WebExtensionTab::window(v17, &v32);
        v18 = *((_QWORD *)v17 + 2);
        v11 = v18 >> 8;
        v19 = 1;
        v20 = v32;
        if (!v32)
          goto LABEL_15;
      }
      else
      {
        v20 = *(_QWORD *)(v13 + 40);
        if (v20)
          ++*(_DWORD *)v20;
        v19 = 0;
        LOBYTE(v18) = 0;
        v32 = v20;
        if (!v20)
        {
LABEL_15:
          LOBYTE(v21) = 0;
          v22 = 0;
          goto LABEL_16;
        }
      }
      v21 = *(_QWORD *)(v20 + 16);
      v12 = v21 >> 8;
      v22 = 1;
LABEL_16:
      *(_QWORD *)&v28 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 1896);
      *((_QWORD *)&v28 + 1) = v18 | (v11 << 8);
      LOBYTE(v29) = v19;
      *(_DWORD *)((char *)&v29 + 1) = *(_DWORD *)v31;
      DWORD1(v29) = *(_DWORD *)&v31[3];
      *((_QWORD *)&v29 + 1) = v21 | (v12 << 8);
      LOBYTE(v30) = v22;
      v23 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a2 + 8))
      {
        v24 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v23 + 1, (unint64_t)&v28);
        LODWORD(v23) = *(_DWORD *)(a2 + 12);
        v25 = *(_QWORD *)a2 + 40 * v23;
        v26 = *(_OWORD *)v24;
        v27 = *(_OWORD *)(v24 + 16);
        *(_QWORD *)(v25 + 32) = *(_QWORD *)(v24 + 32);
      }
      else
      {
        v25 = *(_QWORD *)a2 + 40 * v23;
        v26 = v28;
        v27 = v29;
        *(_QWORD *)(v25 + 32) = v30;
      }
      *(_OWORD *)v25 = v26;
      *(_OWORD *)(v25 + 16) = v27;
      *(_DWORD *)(a2 + 12) = v23 + 1;
      if (v20)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v20);
      if (v17)
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
      result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v39);
      v10 = v40;
    }
    while (v40 != v9);
  }
  return result;
}

void sub_1977586F8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v6;

  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  v6 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebExtensionContext::tabPageIdentifiers@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::WebExtensionTab *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  WebKit::WebExtensionTab *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (char *)this + 536;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(&v36, (_QWORD *)this + 67);
  v5 = *((_QWORD *)this + 67);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (_QWORD *)(v5 + 16 * v6);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v30 = v4;
  v31 = v7;
  v32 = v7;
  v33 = v7;
  v34 = v5 + 16 * v6;
  v35 = 0;
  result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v30);
  v9 = v31;
  v10 = v37;
  if (v37 != v31)
  {
    v11 = 0;
    do
    {
      v12 = v10[1];
      v13 = *(_QWORD *)(*v10 + 8);
      if (v13)
        v14 = v13 - 16;
      else
        v14 = 0;
      WebKit::WebExtensionContext::getTab((uint64_t *)this, v12, 0, &v29);
      v15 = v29;
      if (v29)
      {
        WebKit::WebExtensionTab::window(v29, &v28);
        v16 = v28;
        if (v28)
        {
          v17 = *(_QWORD *)(v28 + 16);
          v11 = v17 >> 8;
          v18 = 1;
        }
        else
        {
          v18 = 0;
          LOBYTE(v17) = 0;
        }
        v19 = *((_QWORD *)v15 + 2);
        *(_QWORD *)&v25 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 1896);
        *((_QWORD *)&v25 + 1) = v19;
        LOBYTE(v26) = 1;
        *((_QWORD *)&v26 + 1) = v17 | (v11 << 8);
        LOBYTE(v27) = v18;
        v20 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v20 == *(_DWORD *)(a2 + 8))
        {
          v21 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v20 + 1, (unint64_t)&v25);
          LODWORD(v20) = *(_DWORD *)(a2 + 12);
          v22 = *(_QWORD *)a2 + 40 * v20;
          v23 = *(_OWORD *)v21;
          v24 = *(_OWORD *)(v21 + 16);
          *(_QWORD *)(v22 + 32) = *(_QWORD *)(v21 + 32);
        }
        else
        {
          v22 = *(_QWORD *)a2 + 40 * v20;
          v23 = v25;
          v24 = v26;
          *(_QWORD *)(v22 + 32) = v27;
        }
        *(_OWORD *)v22 = v23;
        *(_OWORD *)(v22 + 16) = v24;
        *(_DWORD *)(a2 + 12) = v20 + 1;
        if (v16)
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v16);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
      }
      result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v36);
      v10 = v37;
    }
    while (v37 != v9);
  }
  return result;
}

void sub_1977588E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  WTF *v6;

  if (v3)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  v6 = *(WTF **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    WTF::fastFree(v6, v5);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionContext::addPopupPage(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2, CFTypeRef *a3)
{
  uint64_t *v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int i;
  uint64_t v22;
  unsigned int **v23;
  unsigned int *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WebKit::WebExtensionTab *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  IPC::Encoder *result;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  IPC::Encoder *v56;

  v6 = (uint64_t *)((char *)this + 552);
  v7 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 140) = v7 + 1;
  if (v7 > *((_DWORD *)this + 141))
    WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 552, a2);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v9 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  if (v9)
  {
    do
    {
      v12 = __ldaxr(v9);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v9));
    if (!v13)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  v14 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, 0), (v14 = *v6) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = 0;
  v17 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = (v19 >> 31) ^ v19;
  for (i = 1; ; ++i)
  {
    v22 = v20 & v15;
    v23 = (unsigned int **)(v14 + 16 * v22);
    v24 = *v23;
    if (*v23 == (unsigned int *)-1)
    {
      v16 = v14 + 16 * v22;
      goto LABEL_19;
    }
    if (!v24)
    {
      if (v16)
      {
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        --*(_DWORD *)(*v6 - 16);
        *(_QWORD *)v16 = v9;
      }
      else
      {
        *v23 = v9;
        v16 = v14 + 16 * v22;
      }
      CFRetain(a3[1]);
      v30 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = a3;
      if (v30)
        CFRelease(*(CFTypeRef *)(v30 + 8));
      v31 = *v6;
      if (*v6)
        v32 = *(_DWORD *)(v31 - 12) + 1;
      else
        v32 = 1;
      *(_DWORD *)(v31 - 12) = v32;
      v33 = *v6;
      if (*v6)
        v34 = *(_DWORD *)(v33 - 12);
      else
        v34 = 0;
      v35 = (*(_DWORD *)(v33 - 16) + v34);
      v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
      {
        if (v36 > 2 * v35)
          goto LABEL_40;
      }
      else if (3 * v36 > 4 * v35)
      {
        goto LABEL_40;
      }
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, (unsigned int **)v16);
      goto LABEL_40;
    }
    if (v24 == v9)
      break;
LABEL_19:
    v20 = i + v22;
  }
  CFRetain(a3[1]);
  v26 = v14 + 16 * v22;
  v27 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = a3;
  if (v27)
    CFRelease(*(CFTypeRef *)(v27 + 8));
  if (v9)
  {
    do
    {
      v28 = __ldaxr(v9);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v9));
    if (!v29)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v25);
    }
  }
LABEL_40:
  v37 = (WebKit::WebExtensionTab *)a3[4];
  if (v37)
  {
    ++*(_DWORD *)v37;
    WebKit::WebExtensionTab::window(v37, &v53);
    v51 = *((_QWORD *)v37 + 2);
    v52 = 1;
    v38 = v53;
    if (v53)
      goto LABEL_42;
LABEL_49:
    v39 = 0;
    LOBYTE(v49) = 0;
  }
  else
  {
    v38 = (uint64_t)a3[5];
    if (v38)
      ++*(_DWORD *)v38;
    LOBYTE(v51) = 0;
    v52 = 0;
    if (!v38)
      goto LABEL_49;
LABEL_42:
    v49 = *(_QWORD *)(v38 + 16);
    v39 = 1;
  }
  v50 = v39;
  v40 = *((_QWORD *)a2 + 26);
  v48 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 1896);
  v41 = *((_QWORD *)this + 4);
  v42 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v42 = 1565;
  *(_QWORD *)(v42 + 8) = v41;
  *(_QWORD *)(v42 + 528) = v42 + 16;
  *(_QWORD *)(v42 + 536) = v42 + 16;
  *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v42 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
  v56 = (IPC::Encoder *)v42;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v42, &v48);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v42, &v51);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v42, &v49);
  LOBYTE(v54) = 0;
  v55 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v40, &v56, 0, (uint64_t)&v54, 1);
  if (v55)
  {
    v44 = v54;
    v54 = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  result = v56;
  v56 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v43);
    result = (IPC::Encoder *)WTF::fastFree(v46, v47);
  }
  if (v38)
    result = (IPC::Encoder *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v38);
  if (v37)
    return (IPC::Encoder *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v37);
  return result;
}

void sub_197758D00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  unsigned int *v18;
  unsigned int v20;
  unsigned int v21;

  if (v18)
  {
    do
    {
      v20 = __ldaxr(v18);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v18));
    if (!v21)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::addExtensionTabPage(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2, uint64_t **a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13[3];
  uint64_t v14;
  char v15;
  uint64_t v16;

  v13[0] = a3[2];
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t)this + 536, a2, v13);
  WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)a3, &v16);
  v6 = v16;
  if (v16)
  {
    v14 = *(_QWORD *)(v16 + 16);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v14) = 0;
  }
  v15 = v7;
  v8 = *((_QWORD *)a2 + 26);
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 1896);
  v11 = a3[2];
  v12 = v9;
  v13[0] = &v12;
  v13[1] = (uint64_t *)&v11;
  v13[2] = &v14;
  result = WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::AddTabPageIdentifier>(v8, v13, *((_QWORD *)this + 4), 0);
  if (v6)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v6);
  return result;
}

void sub_197758E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, void *a2, uint64_t **a3)
{
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPage>((uint64_t)a2, (unsigned int **)&v13);
  WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1, &v13, a3, (uint64_t)&v12);
  result = (unsigned int *)v13;
  v13 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

void sub_197758F14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int v13;
  unsigned int v14;

  if (a12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)a12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)a12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *WebKit::WebExtensionContext::websiteDataStore(uint64_t a1, const void *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;
  CFTypeRef *v8;
  unint64_t v9;
  CFTypeRef *v10;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = WebKit::WebExtensionController::websiteDataStore(v6, a2, a3);
  if (!v7)
    return 0;
  v8 = v7;
  CFRetain(v7[1]);
  v9 = (unint64_t)v8[3];
  if ((v9 & 0x8000000000000000) == 0 || v9 == -1 || *(_BYTE *)(a1 + 249))
    v10 = v8;
  else
    v10 = 0;
  CFRelease(v8[1]);
  return v10;
}

void WebKit::WebExtensionContext::backgroundContentURL(WebKit::WebExtension **this@<X0>, WTF::URL *a2@<X8>)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (WebKit::WebExtension::hasBackgroundContent(this[7]))
  {
    WebKit::WebExtension::backgroundContentPath(this[7]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](&v7, v4);
    MEMORY[0x19AEABB24](a2, this + 9, &v7, 0);
    v6 = v7;
    v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }

  }
  else
  {
    WTF::URL::URL(a2);
  }
}

void sub_197759084(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadBackgroundContent(uint64_t a1, uint64_t *a2)
{
  _BOOL8 hasBackgroundContent;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  hasBackgroundContent = WebKit::WebExtension::hasBackgroundContent(*(WebKit::WebExtension **)(a1 + 56));
  if (hasBackgroundContent)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v5 = *a2;
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = &off_1E34F8680;
    v6[1] = a1;
    v6[2] = a1;
    v6[3] = v5;
    v11 = v6;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(a1, (uint64_t *)&v11);
    v7 = (uint64_t)v11;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else if (*a2)
  {
    WebKit::WebExtensionContext::createError(hasBackgroundContent, 5, 0, 0);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *a2;
    *a2 = 0;
    v10 = (id)v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  }
}

void sub_1977591B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10[16];

  if (!WebKit::WebExtension::hasBackgroundContent(*(WebKit::WebExtension **)(a1 + 56))
    || (WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(a1), *(_QWORD *)(a1 + 304))
    && *(_BYTE *)(a1 + 352)
    && !*(_DWORD *)(a1 + 268))
  {
    v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v4 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v10 = 0;
      _os_log_debug_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEBUG, "Scheduled task for after background content loads", v10, 2u);
    }
    v5 = (_QWORD *)(a1 + 256);
    v6 = *(unsigned int *)(a1 + 268);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 264))
    {
      a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)a2);
      v6 = *(unsigned int *)(a1 + 268);
      v7 = (_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v6);
    }
    else
    {
      v7 = (_QWORD *)(*v5 + 8 * v6);
    }
    v9 = *a2;
    *a2 = 0;
    *v7 = v9;
    *(_DWORD *)(a1 + 268) = v6 + 1;
    if (WebKit::WebExtension::hasBackgroundContent(*(WebKit::WebExtension **)(a1 + 56)) && !*(_QWORD *)(a1 + 304))
    {
      if (*(_BYTE *)(a1 + 353))
        WebKit::WebExtensionContext::loadBackgroundWebView((WebKit::WebExtensionContext *)a1);
    }
  }
}

void sub_197759384(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadBackgroundWebView(WebKit::WebExtensionContext *this)
{
  NSObject *v2;
  WKWebView *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  WKWebView *v9;
  WKWebView *v10;
  const void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _BOOL8 v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  WTF::StringImpl *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;
  IPC::Encoder *v58;

  if (WebKit::WebExtension::hasBackgroundContent(*((WebKit::WebExtension **)this + 7)))
  {
    v2 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v54[0]) = 0;
      _os_log_debug_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEBUG, "Loading background content", (uint8_t *)v54, 2u);
    }
    *((_BYTE *)this + 352) = 0;
    v3 = [WKWebView alloc];
    v4 = *MEMORY[0x1E0C9D648];
    v5 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v6 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v7 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    WebKit::WebExtensionContext::webViewConfiguration((uint64_t)this, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[WKWebView initWithFrame:configuration:](v3, "initWithFrame:configuration:", v8, v4, v5, v6, v7);
    v10 = v9;
    if (v9)
      CFRetain(v9);

    v11 = (const void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = v10;
    if (v11)
      CFRelease(v11);

    v12 = (void *)*((_QWORD *)this + 40);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v12);
    objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setUIDelegate:", v12);

    v14 = (void *)*((_QWORD *)this + 40);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v14);
    objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setNavigationDelegate:", v14);

    v16 = *((unsigned __int8 *)this + 121);
    WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setInspectable:", v16);

    v18 = *((_QWORD *)this + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
        v20 = (id *)(v19 - 16);
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
    WebKit::WebExtensionController::delegate(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v22 = *((_QWORD *)this + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          v24 = (id *)(v23 - 16);
        else
          v24 = 0;
      }
      else
      {
        v24 = 0;
      }
      WebKit::WebExtension::wrapper(v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::wrapper((id *)this);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "_webExtensionController:didCreateBackgroundWebView:forExtensionContext:", v25, v26, v27);

    }
    WebKit::WebExtensionContext::backgroundWebViewInspectionName(this);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "_setRemoteInspectionNameOverride:", v28);

    v30 = (const void *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = 0;
    if (v30)
      CFRelease(v30);
    v31 = *((_QWORD *)this + 7);
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)v31);
    if (*(_BYTE *)(v31 + 312))
    {
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 38);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionContext::backgroundContentURL((WebKit::WebExtension **)this, (WTF::URL *)v54);
      WTF::URL::operator NSURL *();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = WebKit::WebExtension::backgroundContentUsesModules(*((id **)this + 7));
      CFRetain(*((CFTypeRef *)this + 1));
      v35 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      *v35 = MEMORY[0x1E0C809A0];
      v35[1] = 50331650;
      v35[2] = WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
      v35[3] = &WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::descriptor;
      v35[4] = this;
      v35[5] = this;
      v36 = _Block_copy(v35);

      v37 = _Block_copy(v36);
      objc_msgSend(v32, "_loadServiceWorker:usingModules:completionHandler:", v33, v34, v37);

    }
    else
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = v39;
      if (v39)
        objc_msgSend(v39, "_page");
      else
        v57 = 0;

      v41 = *(_QWORD *)(v57 + 208);
      v56 = *(_QWORD *)(*(_QWORD *)(v57 + 32) + 1896);
      v42 = *((_QWORD *)this + 4);
      v43 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v43 = 1597;
      *(_QWORD *)(v43 + 8) = v42;
      *(_QWORD *)(v43 + 528) = v43 + 16;
      *(_QWORD *)(v43 + 536) = v43 + 16;
      *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v43 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
      v58 = (IPC::Encoder *)v43;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v43, &v56);
      LOBYTE(v54[0]) = 0;
      v55 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v41, &v58, 0, (uint64_t)v54, 1);
      if (v55)
      {
        v45 = v54[0];
        v54[0] = 0;
        if (v45)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 8))(v45);
      }
      v46 = v58;
      v58 = 0;
      if (v46)
      {
        IPC::Encoder::~Encoder(v46, v44);
        WTF::fastFree(v47, v48);
      }
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 38);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = (void *)MEMORY[0x1E0C92C80];
      WebKit::WebExtensionContext::backgroundContentURL((WebKit::WebExtension **)this, (WTF::URL *)v54);
      WTF::URL::operator NSURL *();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "requestWithURL:", v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = (id)objc_msgSend(v32, "loadRequest:", v51);

    }
    v53 = v54[0];
    v54[0] = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v38);
      else
        *(_DWORD *)v53 -= 2;
    }

  }
}

void sub_197759888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

__CFString *WebKit::WebExtensionContext::backgroundWebViewInspectionName(WebKit::WebExtensionContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  const __CFString *v8;
  WTF::StringImpl *v9;
  __CFString *v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)this + 41);
  if (v2 && *(_DWORD *)(v2 + 4))
    goto LABEL_11;
  v3 = *((_QWORD *)this + 7);
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)v3);
  if (*(_BYTE *)(v3 + 312))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 7);
    WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v4);
    v12 = WTF::RetainPtr<__IOHIDDevice *>::get(v4 + 25);
    WebCore::formatLocalizedString((WebCore *)CFSTR("%@ — Extension Service Worker"), v5, v12);
  }
  else
  {
    v7 = (uint64_t *)*((_QWORD *)this + 7);
    WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v7);
    v13 = WTF::RetainPtr<__IOHIDDevice *>::get(v7 + 25);
    WebCore::formatLocalizedString((WebCore *)CFSTR("%@ — Extension Background Page"), v8, v13);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = v14;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (*((_QWORD *)this + 41))
LABEL_11:
    v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E351F1B8;
  return v10;
}

void WebKit::WebExtensionContext::setBackgroundWebViewInspectionName(WebKit::WebExtensionContext *this, const WTF::String *a2)
{
  const __CFString *v4;
  void *v5;
  __CFString *v6;

  WTF::String::operator=((WTF::StringImpl **)this + 41, a2);
  if (*(_QWORD *)a2)
    v4 = (const __CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  v6 = (__CFString *)v4;
  WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_setRemoteInspectionNameOverride:", v6);

}

void sub_197759B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  WebCore::TimerBase *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(this + 304))
  {
    v1 = this;
    this = WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(this + 56));
    if ((this & 1) == 0)
    {
      if ((byte_1ECE73259 & 1) == 0)
      {
        WebCore::applicationBundleIdentifier((WebCore *)this);
        v7 = MEMORY[0x19AEABBCC](v10[0], "com.apple.WebKit.TestWebKitAPI", 30);
        v8 = (WTF::StringImpl *)v10[0];
        v10[0] = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v6);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = 0x403E000000000000;
        if (v7)
          v9 = 0x4008000000000000;
        qword_1ECE73268 = v9;
        byte_1ECE73259 = 1;
      }
      v2 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v10[0]) = 134349056;
        *(_QWORD *)((char *)v10 + 4) = qword_1ECE73268;
        _os_log_debug_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEBUG, "Scheduling background content to unload in %{public}.0f seconds", (uint8_t *)v10, 0xCu);
      }
      if (!*(_QWORD *)(v1 + 336))
      {
        v3 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
        WebCore::TimerBase::TimerBase(v3);
        *(_QWORD *)v3 = off_1E34B3740;
        v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v4 = off_1E34F8270;
        v4[1] = WebKit::WebExtensionContext::unloadBackgroundContentIfPossible;
        v4[2] = 0;
        v4[3] = v1;
        *((_QWORD *)v3 + 6) = v4;
        v5 = *(_QWORD *)(v1 + 336);
        *(_QWORD *)(v1 + 336) = v3;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

void sub_197759CFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::unloadBackgroundContentIfPossible(WebKit::WebExtensionContext *this)
{
  _BOOL8 IsPersistent;
  NSObject *v3;
  void *v4;
  _BOOL8 HasOpenPorts;
  double v6;
  double v7;
  double v8;
  const char *v9;
  void *v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  double v16;
  WTF::StringImpl *v17[2];

  if (*((_QWORD *)this + 38))
  {
    IsPersistent = WebKit::WebExtension::backgroundContentIsPersistent(*((id **)this + 7));
    if (!IsPersistent)
    {
      if ((byte_1ECE7325A & 1) == 0)
      {
        WebCore::applicationBundleIdentifier((WebCore *)IsPersistent);
        v14 = MEMORY[0x19AEABBCC](v17[0], "com.apple.WebKit.TestWebKitAPI", 30);
        v15 = v17[0];
        v17[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = 120.0;
        if (v14)
          v16 = 6.0;
        qword_1ECE73270 = *(_QWORD *)&v16;
        byte_1ECE7325A = 1;
      }
      if (*((_QWORD *)this + 30))
      {
        v3 = qword_1ECE710C8;
        if (!os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
        {
LABEL_6:
          WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(this);
          return;
        }
        LOWORD(v17[0]) = 0;
        v9 = "Not unloading background content because it has pending permission requests";
LABEL_20:
        _os_log_debug_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)v17, 2u);
        goto LABEL_6;
      }
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_page");
      HasOpenPorts = WebKit::WebExtensionContext::pageHasOpenPorts(this, v17[0]);
      if (HasOpenPorts)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)HasOpenPorts);
        v7 = v6 - *((double *)this + 43);
        v8 = *(double *)&qword_1ECE73270;

        if (v7 < v8)
        {
          v3 = qword_1ECE710C8;
          if (!os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
            goto LABEL_6;
          LOWORD(v17[0]) = 0;
          v9 = "Not unloading background content because it has open, active ports";
          goto LABEL_20;
        }
      }
      else
      {

      }
      WTF::RetainPtr<NSMutableArray>::get((id *)this + 38);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "_isBeingInspected");

      v3 = qword_1ECE710C8;
      v12 = os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG);
      if (v11)
      {
        if (!v12)
          goto LABEL_6;
        LOWORD(v17[0]) = 0;
        v9 = "Not unloading background content because it is being inspected";
        goto LABEL_20;
      }
      if (v12)
      {
        LOWORD(v17[0]) = 0;
        _os_log_debug_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEBUG, "Unloading non-persistent background content", (uint8_t *)v17, 2u);
      }
      WebKit::WebExtensionContext::unloadBackgroundWebView(this);
    }
  }
}

void sub_197759F78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebKit::objectForKey<NSData>(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  WTF::RetainPtr<NSMutableArray>::get(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSData>(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_19775A038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::performTasksAfterBackgroundContentLoads(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  void *v19;
  unsigned __int8 *v20;
  void *v21;
  void *v22;
  void *v23;
  const void *v24;
  void *v25;
  void *v26;
  void *v27;
  const void *v28;
  void *v29;
  char v30;
  char v31;
  uint64_t v32;
  _BYTE cf[24];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(this + 64);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    v3 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)cf = 0;
      _os_log_debug_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEBUG, "Background content loaded", cf, 2u);
    }
    if (*(_BYTE *)(v2 + 288))
    {
      WebKit::WebExtensionContext::fireRuntimeStartupEventIfNeeded((WebKit::WebExtensionContext *)v2);
      *(_BYTE *)(v2 + 288) = 0;
    }
    if (*(_BYTE *)(v2 + 289))
    {
      WebKit::WebExtensionContext::fireRuntimeInstalledEventIfNeeded((WebKit::WebExtensionContext *)v2);
      *(_BYTE *)(v2 + 289) = 0;
      WTF::String::operator=((WTF::StringImpl **)(v2 + 296), MEMORY[0x1E0CBF6F0]);
    }
    v4 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(unsigned int *)(v2 + 268);
      *(_DWORD *)cf = 134349056;
      *(_QWORD *)&cf[4] = v17;
      _os_log_debug_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEBUG, "Performing %{public}zu task(s) after background content loaded", cf, 0xCu);
    }
    v5 = *(unsigned int *)(v2 + 268);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v2 + 256);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    *(_BYTE *)(v2 + 352) = 1;
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v2 + 256), 0);
    v9 = *(_QWORD *)(v2 + 40);
    if (!v9 || !*(_DWORD *)(v9 + 4) || WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(v2 + 56)))
      return WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(v2);
    v10 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(_QWORD *)(v2 + 272);
      if (v32)
        LODWORD(v32) = *(_DWORD *)(v32 - 12);
      *(_DWORD *)cf = 67240192;
      *(_DWORD *)&cf[4] = v32;
      _os_log_debug_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEBUG, "Saving %{public}u background content event listeners to storage", cf, 8u);
    }
    objc_msgSend(MEMORY[0x1E0CB3550], "set");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(v2 + 272);
    if (v12)
    {
      v13 = *(unsigned int *)(v12 - 4);
      v14 = (unsigned __int8 *)(v12 + 8 * v13);
      if (*(_DWORD *)(v12 - 12))
      {
        v15 = *(unsigned __int8 **)(v2 + 272);
        if ((_DWORD)v13)
        {
          v16 = 8 * v13;
          v15 = *(unsigned __int8 **)(v2 + 272);
          while (*v15 >= 0xFEu)
          {
            v15 += 8;
            v16 -= 8;
            if (!v16)
            {
              v15 = v14;
              goto LABEL_28;
            }
          }
        }
        goto LABEL_28;
      }
      v15 = (unsigned __int8 *)(v12 + 8 * v13);
    }
    else
    {
      v15 = 0;
      v13 = 0;
    }
    v14 = (unsigned __int8 *)(v12 + 8 * v13);
LABEL_28:
    if (v12)
      v18 = (unsigned __int8 *)(v12 + 8 * *(unsigned int *)(v12 - 4));
    else
      v18 = 0;
    while (v15 != v18)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v15);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v19);

      v20 = v15 + 8;
      v15 = v14;
      if (v20 != v14)
      {
        v15 = v20;
        while (*v15 >= 0xFEu)
        {
          v15 += 8;
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v11, 1, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v2 + 48));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v22);

    WebKit::objectForKey<NSData>((id *)cf, CFSTR("BackgroundContentEventListeners"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *(const void **)cf;
    *(_QWORD *)cf = 0;
    if (v24)
      CFRelease(v24);
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v2 + 48));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setObject:forKey:", v21, CFSTR("BackgroundContentEventListeners"));

    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v2 + 48));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v26);

    WebKit::objectForKey<NSNumber>((id *)cf, CFSTR("BackgroundContentEventListenersVersion"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = *(const void **)cf;
    *(_QWORD *)cf = 0;
    if (v28)
      CFRelease(v28);
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v2 + 48));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setObject:forKey:", &unk_1E356FE50, CFSTR("BackgroundContentEventListenersVersion"), *(_QWORD *)cf);

    v30 = objc_msgSend(v21, "isEqualToData:", v23);
    if (objc_msgSend(v27, "unsignedLongValue") == 3)
      v31 = v30;
    else
      v31 = 0;
    if ((v31 & 1) == 0)
      WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v2);

    return WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(v2);
  }
  return this;
}

void sub_19775A4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

BOOL WTF::operator==<WKWebView,WKWebView>(void *a1, id *a2)
{
  id v3;
  id v4;
  _BOOL8 v5;

  v3 = a1;
  WTF::RetainPtr<NSMutableArray>::get(a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v4 == v3;

  return v5;
}

void sub_19775A5BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::addInjectedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13[3];
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    if (WebKit::WebExtensionContext::hasAccessToAllHosts((WebKit::WebExtensionContext *)a1))
    {
      WebKit::WebExtensionMatchPattern::allHostsAndSchemesMatchPattern(v13);
      v5 = v13[0];
      WebKit::WebExtensionContext::addInjectedContent(a1, a2, v13[0]);
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
    else
    {
      v14 = 0;
      WebKit::WebExtensionContext::removeExpired(a1, a1 + 176, a1 + 192, CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"));
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 176));
      v7 = v6;
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 176);
      if (v10)
        v11 = (uint64_t *)(v10 + 16 * *(unsigned int *)(v10 - 4));
      else
        v11 = 0;
      if (v11 != v6)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v14, v7, (uint64_t)v13);
          while (1)
          {
            v7 += 2;
            if (v7 == v9)
              break;
            if ((unint64_t)(*v7 + 1) > 1)
              goto LABEL_14;
          }
          v7 = v9;
LABEL_14:
          ;
        }
        while (v7 != v11);
      }
      WebKit::WebExtensionContext::addInjectedContent(a1, a2, &v14);
      if (v14)
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v14, v12);
    }
  }
}

void sub_19775A6F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::addInjectedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WebKit::WebExtensionMatchPattern **v41;
  WebKit::WebExtensionMatchPattern **v42;
  WebKit::WebExtensionMatchPattern **v43;
  WebKit::WebExtensionMatchPattern **v44;
  uint64_t v45;
  WebKit::WebExtensionMatchPattern **v46;
  WebKit::WebExtensionMatchPattern *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 **v56;
  unsigned __int8 **v57;
  unsigned __int8 **v58;
  unsigned __int8 **v59;
  uint64_t v60;
  unsigned __int8 *v61;
  WTF::StringImpl *v62;
  unsigned __int8 *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  CFTypeRef *v68;
  unsigned __int8 *v69;
  WTF::StringImpl *v70;
  unsigned __int8 *v71;
  WTF::StringImpl *v72;
  CFTypeRef *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  void *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  BOOL v90;
  void *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t i;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  const WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v116;
  void *v117;
  WTF::StringImpl *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t j;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  void *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  const WTF::StringImpl *v141;
  uint64_t v142;
  WebKit::WebUserContentControllerProxy *v143;
  WTF *v144;
  WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *v145;
  void *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  WebKit::WebExtension::InjectedContentData *v154;
  void *v155;
  uint64_t v156;
  id obj;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  BOOL v163;
  void *v164;
  int v165;
  void *v166;
  uint64_t v167;
  void *v168;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  WTF::StringImpl *v178[2];
  WTF::StringImpl *v179[2];
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  _QWORD *v188;
  WTF::StringImpl *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  WTF::StringImpl *v194;
  _BYTE v195[128];
  _BYTE v196[128];
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return;
  v6 = (uint64_t *)(a1 + 360);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  v7 = *(_QWORD *)(a1 + 360);
  if (v7
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v6, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
  v156 = a3;
  v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  v14 = 1;
  v15 = v13;
  while (1)
  {
    v16 = v15 & v8;
    v17 = (uint64_t *)(v7 + 24 * v16);
    v18 = *v17;
    if (*v17 == -1)
    {
      v9 = (uint64_t *)(v7 + 24 * v16);
      goto LABEL_12;
    }
    if (!v18)
      break;
    if (v18 == v156)
    {
      v19 = v156;
      CFRelease(*(CFTypeRef *)(v156 + 8));
      goto LABEL_29;
    }
LABEL_12:
    v15 = v14 + v16;
    ++v14;
  }
  if (v9)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    --*(_DWORD *)(*v6 - 16);
    *v9 = v156;
  }
  else
  {
    *v17 = v156;
    v9 = (uint64_t *)(v7 + 24 * v16);
  }
  v187 = 0;
  v188 = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v9 + 1), &v187);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v187, v20);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_27;
LABEL_24:
    v17 = v9;
  }
  else
  {
    if (3 * v26 > 4 * v25)
      goto LABEL_24;
LABEL_27:
    v17 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v6, v9);
  }
  v19 = v156;
LABEL_29:
  CFRetain(*(CFTypeRef *)(v19 + 8));
  v27 = (uint64_t *)(a1 + 368);
  v28 = *(_QWORD *)(a1 + 368);
  if (v28
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand((uint64_t *)(a1 + 368), 0), (v28 = *v27) != 0))
  {
    v29 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    v29 = 0;
  }
  v30 = 0;
  v31 = 1;
  while (2)
  {
    v32 = v13 & v29;
    v33 = *(_QWORD *)(v28 + 24 * (v13 & v29));
    if (v33 == -1)
    {
      v30 = (uint64_t *)(v28 + 24 * v32);
LABEL_38:
      v13 = v31 + v32;
      ++v31;
      continue;
    }
    break;
  }
  v161 = (uint64_t *)(v28 + 24 * v32);
  if (v33)
  {
    if (v33 == v156)
    {
      CFRelease(*(CFTypeRef *)(v156 + 8));
      goto LABEL_54;
    }
    goto LABEL_38;
  }
  if (v30)
  {
    *v30 = 0;
    v30[1] = 0;
    v30[2] = 0;
    --*(_DWORD *)(*v27 - 16);
    *v30 = v156;
  }
  else
  {
    v30 = (uint64_t *)(v28 + 24 * v32);
    *v161 = v156;
  }
  v187 = 0;
  v188 = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v30 + 1), &v187);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v187, v34);
  v35 = *v27;
  if (*v27)
    v36 = *(_DWORD *)(v35 - 12) + 1;
  else
    v36 = 1;
  *(_DWORD *)(v35 - 12) = v36;
  v37 = *v27;
  if (*v27)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 <= 2 * v39)
      goto LABEL_53;
LABEL_50:
    v161 = v30;
  }
  else
  {
    if (3 * v40 > 4 * v39)
      goto LABEL_50;
LABEL_53:
    v161 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v27, v30);
  }
LABEL_54:
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionContext::removeExpired(a1, a1 + 184, a1 + 200, CFSTR("_WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved"));
  v41 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 184));
  v42 = v41;
  v44 = v43;
  v45 = *(_QWORD *)(a1 + 184);
  if (v45)
    v46 = (WebKit::WebExtensionMatchPattern **)(v45 + 16 * *(unsigned int *)(v45 - 4));
  else
    v46 = 0;
  if (v46 != v41)
  {
    do
    {
      v47 = *v42;
      if ((!*((_BYTE *)*v42 + 49)
         || !*((_BYTE *)v47 + 48)
         && (!*((_BYTE *)v47 + 41) || (v48 = *((_QWORD *)v47 + 3)) != 0 && *(_DWORD *)(v48 + 4)))
        && (WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v156, (unsigned __int8 *)v47, 6) & 1) != 0)
      {
        WebKit::WebExtensionMatchPattern::expandedStrings(*v42);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v153, "addObjectsFromArray:", v49);

      }
      while (1)
      {
        v42 += 2;
        if (v42 == v44)
          break;
        if ((unint64_t)*v42 + 1 > 1)
          goto LABEL_69;
      }
      v42 = v44;
LABEL_69:
      ;
    }
    while (v42 != v46);
  }
  v50 = *(_QWORD **)(a1 + 64);
  if (*(_BYTE *)(a1 + 249))
  {
    v51 = (unsigned __int8 *)v156;
    if (v50)
    {
      v52 = v50[1];
      if (v52)
        v50 = (_QWORD *)(v52 - 16);
      else
        v50 = 0;
    }
    v53 = (WTF::StringImpl *)(v50 + 15);
  }
  else
  {
    v51 = (unsigned __int8 *)v156;
    if (v50)
    {
      v54 = v50[1];
      if (v54)
        v50 = (_QWORD *)(v54 - 16);
      else
        v50 = 0;
    }
    v53 = (WTF::StringImpl *)(v50 + 17);
  }
  v55 = *(_DWORD *)(a2 + 12);
  if (v55)
  {
    v158 = v161 + 1;
    v154 = *(WebKit::WebExtension::InjectedContentData **)a2;
    v152 = *(_QWORD *)a2 + 72 * v55;
    v162 = a1 + 72;
    v159 = (uint64_t *)(a1 + 376);
    v160 = v17 + 1;
    while (1)
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set", v150, v151);
      v155 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)v154);
      v57 = v56;
      v59 = v58;
      v60 = *(_QWORD *)v154 ? *(_QWORD *)v154 + 8 * *(unsigned int *)(*(_QWORD *)v154 - 4) : 0;
      if ((unsigned __int8 **)v60 != v56)
        break;
LABEL_155:
      if (objc_msgSend(v155, "count"))
      {
        objc_msgSend(v155, "allObjects");
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        v84 = (void *)MEMORY[0x1E0C99E20];
        WebKit::WebExtension::InjectedContentData::expandedExcludeMatchPatternStrings(v154);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v84, "setWithArray:", v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v86, "unionSet:", v153);
        objc_msgSend(v86, "allObjects");
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        v165 = *((unsigned __int8 *)v154 + 33);
        v87 = *((unsigned __int8 *)v154 + 16);
        v167 = WebKit::WebExtensionContext::toContentWorld(a1, *((unsigned __int8 *)v154 + 34));
        CFRetain(*(CFTypeRef *)(v167 + 8));
        v88 = (WTF::StringImpl *)*((_QWORD *)v154 + 3);
        if (v88)
        {
          v89 = *((_DWORD *)v88 + 1);
          *(_DWORD *)v88 += 2;
          v90 = v89 == 0;
        }
        else
        {
          v90 = 1;
        }
        v163 = v90;
        v194 = v88;
        v192 = 0u;
        v193 = 0u;
        v190 = 0u;
        v191 = 0u;
        WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)v154 + 40, *((_QWORD *)v154 + 5));
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        obj = v91;
        v92 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", &v190, v196, 16);
        v164 = v86;
        if (v92)
        {
          v93 = v87 & 0xFFFFFFFD;
          v94 = *(_QWORD *)v191;
          do
          {
            for (i = 0; i != v92; ++i)
            {
              if (*(_QWORD *)v191 != v94)
                objc_enumerationMutation(obj);
              v96 = *(void **)(*((_QWORD *)&v190 + 1) + 8 * i);
              WebKit::WebExtension::resourceStringForPath(*(_QWORD *)(a1 + 56), v96, 1, 0);
              v97 = (void *)objc_claimAutoreleasedReturnValue();
              if (v97)
              {
                MEMORY[0x19AEABCC8](&v186, v97);
                MEMORY[0x19AEABCC8](&v180, v96);
                MEMORY[0x19AEABB24](&v181, v162, &v180, 0);
                WTF::makeVector<WTF::String>(v166, (uint64_t)v179);
                WTF::makeVector<WTF::String>(v168, (uint64_t)v178);
                MEMORY[0x19AEAC7C0](&v187, &v186, &v181, v179, v178, v93 == 0, v165 == 0, 0);
                API::UserScript::create((uint64_t *)&v187, v167, &v189);
                WebCore::UserScript::~UserScript((WebCore::UserScript *)&v187, v98);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v178, v99);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v179, v100);
                v102 = v181;
                v181 = 0;
                if (v102)
                {
                  if (*(_DWORD *)v102 == 2)
                    WTF::StringImpl::destroy(v102, v101);
                  else
                    *(_DWORD *)v102 -= 2;
                }
                v103 = v180;
                v180 = 0;
                if (v103)
                {
                  if (*(_DWORD *)v103 == 2)
                    WTF::StringImpl::destroy(v103, v101);
                  else
                    *(_DWORD *)v103 -= 2;
                }
                v104 = v186;
                v186 = 0;
                if (v104)
                {
                  if (*(_DWORD *)v104 == 2)
                    WTF::StringImpl::destroy(v104, v101);
                  else
                    *(_DWORD *)v104 -= 2;
                }
                v105 = *((unsigned int *)v17 + 5);
                if (v105 == *((_DWORD *)v17 + 4))
                {
                  v106 = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, v105 + 1, (unint64_t)&v189);
                  v105 = *((unsigned int *)v17 + 5);
                  v107 = v17[1];
                  v108 = *(WTF::StringImpl **)v106;
                  CFRetain(*(CFTypeRef *)(*(_QWORD *)v106 + 8));
                }
                else
                {
                  v107 = *v160;
                  v108 = v189;
                  CFRetain(*((CFTypeRef *)v189 + 1));
                }
                *(_QWORD *)(v107 + 8 * v105) = v108;
                ++*((_DWORD *)v17 + 5);
                WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v53, &v187);
                v109 = *(_QWORD **)v53;
                v86 = v164;
                if (*(_QWORD *)v53)
                {
                  v110 = *((unsigned int *)v109 - 1);
                  v111 = &v109[v110];
                }
                else
                {
                  v111 = 0;
                  v110 = 0;
                }
                v181 = v53;
                v182 = v111;
                v183 = v111;
                v184 = v111;
                v185 = &v109[v110];
                WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v181);
                while (v188 != v182)
                {
                  v113 = *(_QWORD *)(*v188 + 8);
                  if (v113)
                    v114 = v113 - 16;
                  else
                    v114 = 0;
                  WebKit::WebUserContentControllerProxy::addUserScript(v114, (uint64_t)v189, 1);
                  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v187);
                }
                if (!v163)
                {
                  v115 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v159, &v194, v112);
                  v116 = v115;
                  if (v115)
                  {
                    ++*(_DWORD *)v115;
                    WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserScript(v115, &v194, (CFTypeRef *)v189);
                    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v116, v117);
                  }
                }
                v118 = v189;
                v189 = 0;
                if (v118)
                  CFRelease(*((CFTypeRef *)v118 + 1));
              }

            }
            v91 = obj;
            v92 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v196, 16);
          }
          while (v92);
        }

        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)v154 + 48, *((_QWORD *)v154 + 6));
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        v120 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v174, v195, 16);
        if (v120)
        {
          v121 = *(_QWORD *)v175;
          do
          {
            for (j = 0; j != v120; ++j)
            {
              if (*(_QWORD *)v175 != v121)
                objc_enumerationMutation(v119);
              v123 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * j);
              WebKit::WebExtension::resourceStringForPath(*(_QWORD *)(a1 + 56), v123, 1, 0);
              v124 = (void *)objc_claimAutoreleasedReturnValue();
              if (v124)
              {
                MEMORY[0x19AEABCC8](&v189, v124);
                MEMORY[0x19AEABCC8](&v186, v123);
                MEMORY[0x19AEABB24](&v187, v162, &v186, 0);
                WTF::makeVector<WTF::String>(v166, (uint64_t)&v181);
                WTF::makeVector<WTF::String>(v168, (uint64_t)v179);
                v150 = 0;
                v151 = 0;
                WebCore::UserStyleSheet::UserStyleSheet();
                API::UserStyleSheet::create((uint64_t)&v170, v167, (uint64_t *)v178);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v173, v125);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v172, v126);
                v128 = v171;
                v171 = 0;
                if (v128)
                {
                  if (*(_DWORD *)v128 == 2)
                    WTF::StringImpl::destroy(v128, v127);
                  else
                    *(_DWORD *)v128 -= 2;
                }
                v129 = v170;
                v170 = 0;
                if (v129)
                {
                  if (*(_DWORD *)v129 == 2)
                    WTF::StringImpl::destroy(v129, v127);
                  else
                    *(_DWORD *)v129 -= 2;
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v179, v127);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v181, v130);
                v132 = v187;
                v187 = 0;
                if (v132)
                {
                  if (*(_DWORD *)v132 == 2)
                    WTF::StringImpl::destroy(v132, v131);
                  else
                    *(_DWORD *)v132 -= 2;
                }
                v133 = v186;
                v186 = 0;
                if (v133)
                {
                  if (*(_DWORD *)v133 == 2)
                    WTF::StringImpl::destroy(v133, v131);
                  else
                    *(_DWORD *)v133 -= 2;
                }
                v134 = v189;
                v189 = 0;
                if (v134)
                {
                  if (*(_DWORD *)v134 == 2)
                    WTF::StringImpl::destroy(v134, v131);
                  else
                    *(_DWORD *)v134 -= 2;
                }
                v135 = *((unsigned int *)v161 + 5);
                if ((_DWORD)v135 == *((_DWORD *)v161 + 4))
                {
                  WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>((uint64_t)v158, (unint64_t)v178);
                }
                else
                {
                  v136 = *v158;
                  v137 = v178[0];
                  CFRetain(*((CFTypeRef *)v178[0] + 1));
                  *(_QWORD *)(v136 + 8 * v135) = v137;
                  ++*((_DWORD *)v161 + 5);
                }
                WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v53, &v187);
                v138 = *(_QWORD **)v53;
                v86 = v164;
                if (*(_QWORD *)v53)
                {
                  v139 = *((unsigned int *)v138 - 1);
                  v140 = &v138[v139];
                }
                else
                {
                  v140 = 0;
                  v139 = 0;
                }
                v181 = v53;
                v182 = v140;
                v183 = v140;
                v184 = v140;
                v185 = &v138[v139];
                WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v181);
                while (v188 != v182)
                {
                  v142 = *(_QWORD *)(*v188 + 8);
                  if (v142)
                    v143 = (WebKit::WebUserContentControllerProxy *)(v142 - 16);
                  else
                    v143 = 0;
                  WebKit::WebUserContentControllerProxy::addUserStyleSheet(v143, v178[0]);
                  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v187);
                }
                if (!v163)
                {
                  v144 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v159, &v194, v141);
                  v145 = v144;
                  if (v144)
                  {
                    ++*(_DWORD *)v144;
                    WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserStyleSheet(v144, &v194, (CFTypeRef *)v178[0]);
                    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v145, v146);
                  }
                }
                v147 = v178[0];
                v178[0] = 0;
                if (v147)
                  CFRelease(*((CFTypeRef *)v147 + 1));
              }

            }
            v120 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v174, v195, 16);
          }
          while (v120);
        }

        v149 = v194;
        v194 = 0;
        if (v149)
        {
          if (*(_DWORD *)v149 == 2)
            WTF::StringImpl::destroy(v149, v148);
          else
            *(_DWORD *)v149 -= 2;
        }
        CFRelease(*(CFTypeRef *)(v167 + 8));

      }
      v154 = (WebKit::WebExtension::InjectedContentData *)((char *)v154 + 72);
      v51 = (unsigned __int8 *)v156;
      if (v154 == (WebKit::WebExtension::InjectedContentData *)v152)
        goto LABEL_248;
    }
    while (2)
    {
      v61 = *v57;
      if (!(*v57)[49])
      {
LABEL_101:
        if ((WebKit::WebExtensionMatchPattern::matchesPattern(v61, v51, 6) & 1) == 0)
          goto LABEL_145;
        v68 = (CFTypeRef *)*v57;
        CFRetain(*((CFTypeRef *)*v57 + 1));
        if (WebKit::WebExtensionMatchPattern::matchesPattern(*v57, v51, 3))
        {
          v69 = *v57;
          if ((*v57)[49] && !v69[48])
          {
            v70 = (WTF::StringImpl *)*((_QWORD *)v69 + 2);
            if (v70)
LABEL_106:
              *(_DWORD *)v70 += 2;
          }
          else
          {
            v70 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
            if (*MEMORY[0x1E0CBF6F0])
              goto LABEL_106;
          }
          v181 = v70;
          WebKit::WebExtensionMatchPattern::host(v51, v179);
          v71 = *v57;
          if ((*v57)[49] && !v71[48])
          {
            v72 = (WTF::StringImpl *)*((_QWORD *)v71 + 4);
            if (v72)
LABEL_110:
              *(_DWORD *)v72 += 2;
          }
          else
          {
            v72 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
            if (*MEMORY[0x1E0CBF6F0])
              goto LABEL_110;
          }
          v178[0] = v72;
          WebKit::WebExtensionMatchPattern::getOrCreate(&v181, v179, v178, &v187);
          v73 = (CFTypeRef *)v187;
          v187 = 0;
          CFRelease(v68[1]);
          v75 = v187;
          v187 = 0;
          if (v75)
            CFRelease(*((CFTypeRef *)v75 + 1));
          v76 = v178[0];
          v178[0] = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
              WTF::StringImpl::destroy(v76, v74);
            else
              *(_DWORD *)v76 -= 2;
          }
          v81 = v179[0];
          v179[0] = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v74);
            else
              *(_DWORD *)v81 -= 2;
          }
          v82 = v181;
          v181 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 != 2)
            {
              *(_DWORD *)v82 -= 2;
              goto LABEL_141;
            }
            WTF::StringImpl::destroy(v82, v74);
            if (!v73)
              goto LABEL_145;
          }
          else
          {
LABEL_141:
            if (!v73)
              goto LABEL_145;
          }
        }
        else
        {
          v73 = v68;
        }
        WebKit::WebExtensionMatchPattern::expandedStrings((WebKit::WebExtensionMatchPattern *)v73);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "addObjectsFromArray:", v83);

        CFRelease(v73[1]);
        v51 = (unsigned __int8 *)v156;
        goto LABEL_145;
      }
      if (v61[48])
      {
        v62 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          goto LABEL_90;
      }
      else
      {
        if (!v61[41])
          goto LABEL_101;
        v67 = *((_QWORD *)v61 + 3);
        if (v67)
        {
          if (*(_DWORD *)(v67 + 4))
            goto LABEL_101;
        }
        v62 = (WTF::StringImpl *)*((_QWORD *)v61 + 2);
        if (v62)
LABEL_90:
          *(_DWORD *)v62 += 2;
      }
      v181 = v62;
      WebKit::WebExtensionMatchPattern::host(v51, v179);
      v63 = *v57;
      if ((*v57)[49] && !v63[48])
      {
        v64 = (WTF::StringImpl *)*((_QWORD *)v63 + 4);
        if (v64)
LABEL_94:
          *(_DWORD *)v64 += 2;
      }
      else
      {
        v64 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          goto LABEL_94;
      }
      v178[0] = v64;
      WebKit::WebExtensionMatchPattern::getOrCreate(&v181, v179, v178, &v187);
      v66 = v178[0];
      v178[0] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v65);
        else
          *(_DWORD *)v66 -= 2;
      }
      v77 = v179[0];
      v179[0] = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v65);
        else
          *(_DWORD *)v77 -= 2;
      }
      v78 = v181;
      v181 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v65);
        else
          *(_DWORD *)v78 -= 2;
      }
      if (v187)
      {
        WebKit::WebExtensionMatchPattern::expandedStrings(v187);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "addObjectsFromArray:", v79);

        v80 = v187;
        v187 = 0;
        v51 = (unsigned __int8 *)v156;
        if (v80)
          CFRelease(*((CFTypeRef *)v80 + 1));
      }
LABEL_145:
      while (++v57 != v59)
      {
        if ((unint64_t)(*v57 + 1) > 1)
          goto LABEL_149;
      }
      v57 = v59;
LABEL_149:
      if (v57 == (unsigned __int8 **)v60)
        goto LABEL_155;
      continue;
    }
  }
LABEL_248:

}

void sub_19775B6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFRelease(*(CFTypeRef *)(a15 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::removeInjectedContent(_QWORD *this, WebKit::WebExtensionMatchPattern *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  WebKit::WebExtensionMatchPattern *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebExtensionMatchPattern *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int j;
  uint64_t v29;
  WebKit::WebExtensionMatchPattern *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WebKit::WebExtensionMatchPattern *v34;
  uint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebKit::WebUserContentControllerProxy *v45;
  API::UserScript **v46;
  uint64_t v47;
  API::UserStyleSheet **v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  API::UserStyleSheet **v63;
  uint64_t v64;
  API::UserScript **v65;
  uint64_t v66;

  v2 = this[8];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = this;
    v5 = this[45];
    if (!v5)
      goto LABEL_19;
    v6 = this + 45;
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; v11 = (v11 + i++) & v7)
    {
      v13 = v5 + 24 * v11;
      v14 = *(WebKit::WebExtensionMatchPattern **)v13;
      if (*(_QWORD *)v13 != -1)
      {
        if (!v14)
        {
          v15 = *(_DWORD *)(v5 - 4);
          v13 = v5 + 24 * v15;
          goto LABEL_11;
        }
        if (v14 == a2)
          break;
      }
    }
    v15 = *(_DWORD *)(v5 - 4);
LABEL_11:
    if (v5 + 24 * v15 == v13)
    {
LABEL_19:
      v61 = 0;
      v65 = 0;
      v62 = 0;
      v66 = 0;
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, a2);
    }
    else
    {
      v65 = *(API::UserScript ***)(v13 + 8);
      v16 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      v66 = v16;
      v17 = *v6;
      if (!*v6 || (v17 += 24 * *(unsigned int *)(v17 - 4), v17 != v13))
      {
        if (v17 != v13)
        {
          v18 = *(WebKit::WebExtensionMatchPattern **)v13;
          *(_QWORD *)v13 = 0;
          if (v18)
            CFRelease(*((CFTypeRef *)v18 + 1));
          *(_QWORD *)v13 = -1;
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 8, a2);
          ++*(_DWORD *)(*v6 - 16);
          v19 = *v6;
          if (*v6)
            v20 = *(_DWORD *)(v19 - 12) - 1;
          else
            v20 = -1;
          *(_DWORD *)(v19 - 12) = v20;
          v50 = *v6;
          if (*v6)
          {
            v51 = 6 * *(_DWORD *)(v50 - 12);
            v52 = *(_DWORD *)(v50 - 4);
            if (v51 < v52 && v52 >= 9)
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(v4 + 45, v52 >> 1, 0);
          }
        }
      }
    }
    v21 = v4[46];
    if (!v21)
      goto LABEL_36;
    v22 = v4 + 46;
    v23 = *(_DWORD *)(v21 - 8);
    v24 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    for (j = 1; ; v27 = (v27 + j++) & v23)
    {
      v29 = v21 + 24 * v27;
      v30 = *(WebKit::WebExtensionMatchPattern **)v29;
      if (*(_QWORD *)v29 != -1)
      {
        if (!v30)
        {
          v31 = *(_DWORD *)(v21 - 4);
          v29 = v21 + 24 * v31;
          goto LABEL_28;
        }
        if (v30 == a2)
          break;
      }
    }
    v31 = *(_DWORD *)(v21 - 4);
LABEL_28:
    if (v21 + 24 * v31 == v29)
    {
LABEL_36:
      v61 = 0;
      v63 = 0;
      v62 = 0;
      v64 = 0;
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, a2);
    }
    else
    {
      v63 = *(API::UserStyleSheet ***)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v29 + 16) = 0;
      v64 = v32;
      v33 = *v22;
      if (!*v22 || (v33 += 24 * *(unsigned int *)(v33 - 4), v33 != v29))
      {
        if (v33 != v29)
        {
          v34 = *(WebKit::WebExtensionMatchPattern **)v29;
          *(_QWORD *)v29 = 0;
          if (v34)
            CFRelease(*((CFTypeRef *)v34 + 1));
          *(_QWORD *)v29 = -1;
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29 + 8, a2);
          ++*(_DWORD *)(*v22 - 16);
          v35 = *v22;
          if (*v22)
            v36 = *(_DWORD *)(v35 - 12) - 1;
          else
            v36 = -1;
          *(_DWORD *)(v35 - 12) = v36;
          v53 = *v22;
          if (*v22)
          {
            v54 = 6 * *(_DWORD *)(v53 - 12);
            v55 = *(_DWORD *)(v53 - 4);
            if (v54 < v55 && v55 >= 9)
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(v4 + 46, v55 >> 1, 0);
          }
        }
      }
    }
    if (HIDWORD(v66) | HIDWORD(v64))
    {
      v38 = v4[8];
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 8);
        if (v39)
          v38 = v39 - 16;
        else
          v38 = 0;
      }
      v40 = (_QWORD *)(v38 + 120);
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v38 + 120), &v61);
      v41 = *v40;
      if (*v40)
      {
        v42 = *(unsigned int *)(v41 - 4);
        v43 = v41 + 8 * v42;
      }
      else
      {
        v43 = 0;
        v42 = 0;
      }
      v56 = v40;
      v57 = v43;
      v58 = v43;
      v59 = v43;
      v60 = v41 + 8 * v42;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v56);
      while (v62 != v57)
      {
        v44 = *(_QWORD *)(*(_QWORD *)v62 + 8);
        if (v44)
          v45 = (WebKit::WebUserContentControllerProxy *)(v44 - 16);
        else
          v45 = 0;
        if (HIDWORD(v66))
        {
          v46 = v65;
          v47 = 8 * HIDWORD(v66);
          do
          {
            WebKit::WebUserContentControllerProxy::removeUserScript(v45, *v46++);
            v47 -= 8;
          }
          while (v47);
        }
        if (HIDWORD(v64))
        {
          v48 = v63;
          v49 = 8 * HIDWORD(v64);
          do
          {
            WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v45, *v48++);
            v49 -= 8;
          }
          while (v49);
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v61);
      }
    }
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, a2);
    return (_QWORD *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v37);
  }
  return this;
}

void sub_19775C030(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 64, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::toContentWorld(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)API::ContentWorld::pageContentWorld + 4 * byte_1978D2576[a2]))();
}

uint64_t sub_19775C088(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

WTF::StringImpl *API::UserStyleSheet::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  __int128 v21;
  char v22;

  v6 = API::Object::newObject(0x88uLL, 29);
  v7 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  v17 = v7;
  WTF::URL::URL((uint64_t)&v18, (uint64_t *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v19[0] = v8;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v19[1] = v9;
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v20[0] = v10;
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v20[1] = v11;
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_BYTE *)(a1 + 96);
  API::UserStyleSheet::UserStyleSheet(v6, (uint64_t)&v17, a2);
  *a3 = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19775C1B0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::addInjectedContent(WebKit::WebExtensionContext *this)
{
  WTF::StringImpl *v2;
  _BYTE v4[16];

  WebKit::WebExtensionContext::injectedContents(this, (uint64_t)v4);
  WebKit::WebExtensionContext::addInjectedContent((uint64_t)this, (uint64_t)v4);
  return WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void sub_19775C228(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::removeDeclarativeNetRequestRules(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WebKit::WebUserContentControllerProxy *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = this[8];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v2 + 104), &v17);
      v4 = *(_QWORD *)(v2 + 104);
      if (v4)
      {
        v5 = *(unsigned int *)(v4 - 4);
        v6 = v4 + 8 * v5;
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
      v12 = v2 + 104;
      v13 = v6;
      v14 = v6;
      v15 = v6;
      v16 = v4 + 8 * v5;
      this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
      v8 = v18;
      if (v18 != v13)
      {
        v9 = (WTF::StringImpl **)(v3 + 14);
        do
        {
          v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
          if (v10)
            v11 = (WebKit::WebUserContentControllerProxy *)(v10 - 16);
          else
            v11 = 0;
          WebKit::WebUserContentControllerProxy::removeContentRuleList(v11, v9, v7);
          this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
          v8 = v18;
        }
        while (v18 != v13);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath(WTF::StringImpl *this, uint64_t a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = this;
  v4 = *(_DWORD **)(a2 + 600);
  if (v4 && v4[1])
  {
    *v4 += 2;
    *(_QWORD *)this = v4;
  }
  else
  {
    v5 = *(WTF::StringImpl **)(a2 + 40);
    if (v5 && *((_DWORD *)v5 + 1))
    {
      *(_DWORD *)v5 += 2;
      v11 = v5;
    }
    else
    {
      WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("DeclarativeNetRequest"), (NSString *)a2);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](&v11, v6);

    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    v8 = v10;
    v9 = *(WTF::StringImpl **)(a2 + 600);
    *(_QWORD *)(a2 + 600) = v10;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
      v8 = *(WTF::StringImpl **)(a2 + 600);
    }
    if (v8)
      *(_DWORD *)v8 += 2;
    *(_QWORD *)v3 = v8;
    this = v11;
    v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void sub_19775C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::hasContentModificationRules(WebKit::WebExtensionContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *((_QWORD *)this + 80);
  if (v1 && *(_DWORD *)(v1 - 12))
    return 1;
  v2 = *((_QWORD *)this + 81);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12))
      return 1;
  }
  v4 = *((_QWORD *)this + 82);
  return v4 && *(_DWORD *)(v4 - 12) != 0;
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(CFTypeRef *a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  CFTypeRef *v24;
  CFTypeRef *v25;
  CFTypeRef *v26;
  CFTypeRef *v27;
  CFTypeRef *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  void *v44;
  CFTypeRef *v45;
  WTF::StringImpl *v46;
  CFTypeRef *v47;
  CFTypeRef *v48;
  void *v49;
  id cf;
  WTF::StringImpl *v51;
  CFTypeRef *v52;
  CFTypeRef *v53;
  CFTypeRef *v54;
  CFTypeRef *v55;
  CFTypeRef *v56;
  CFTypeRef *v57;
  CFTypeRef *v58;
  uint64_t v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef v63[2];
  CFTypeRef *v64;
  CFTypeRef *v65;
  CFTypeRef *v66;
  CFTypeRef *v67;
  CFTypeRef *v68;
  uint64_t v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72[2];
  CFTypeRef *v73;
  CFTypeRef *v74;
  CFTypeRef *v75;
  uint64_t v76;
  CFTypeRef v77;
  CFTypeRef v78[2];
  CFTypeRef *v79;
  uint64_t v80;
  void *v81;
  WTF *v82;
  CFTypeRef *v83;
  CFTypeRef *v84;
  CFTypeRef *v85;
  CFTypeRef *v86;
  CFTypeRef *v87;
  CFTypeRef *v88;
  CFTypeRef *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;

  MEMORY[0x19AEABCC8](&v82, CFSTR("declarativeNetRequest"));
  if ((WebKit::WebExtensionContext::permissionState((uint64_t)a1, &v82, 0, 2) & 0xFFFFFFFE) == 2)
  {
    v5 = 0;
  }
  else
  {
    MEMORY[0x19AEABCC8](&v51, CFSTR("declarativeNetRequestWithHostAccess"));
    v5 = (WebKit::WebExtensionContext::permissionState((uint64_t)a1, &v51, 0, 2) & 0xFFFFFFFE) != 2;
    v6 = v51;
    v51 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  v7 = v82;
  v82 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v4);
      if (v5)
        goto LABEL_11;
      goto LABEL_13;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (v5)
  {
LABEL_11:
    v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return;
  }
LABEL_13:
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v78[1] = a1;
  CFRetain(a1[1]);
  v10 = *a2;
  *a2 = 0;
  v79 = a1;
  v80 = v10;
  v11 = v9;
  v12 = v11;
  v81 = v11;
  if (v11)
    CFRetain(v11);

  v72[1] = a1;
  CFRetain(a1[1]);
  v73 = a1;
  v74 = a1;
  v79 = 0;
  v80 = 0;
  v75 = a1;
  v76 = v10;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(&v81);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v77 = v13;
  v14 = v12;
  v15 = v14;
  v78[0] = v14;
  if (v12)
    CFRetain(v14);

  v63[1] = a1;
  CFRetain(a1[1]);
  v64 = a1;
  v65 = a1;
  v66 = a1;
  v67 = a1;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v68 = a1;
  v69 = v10;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v77);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v70 = v16;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)v78);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v71 = v17;
  v18 = v15;
  v19 = v18;
  v72[0] = v18;
  if (v12)
    CFRetain(v18);

  WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore((WebKit::WebExtensionContext *)a1);
  v20 = objc_claimAutoreleasedReturnValue();
  v51 = (WTF::StringImpl *)a1;
  v49 = (void *)v20;
  CFRetain(a1[1]);
  v52 = a1;
  v53 = a1;
  v54 = a1;
  v55 = a1;
  v64 = 0;
  v66 = 0;
  v56 = a1;
  v57 = a1;
  v68 = 0;
  v69 = 0;
  v58 = a1;
  v59 = v10;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v70);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v60 = v21;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v71);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v61 = v22;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)v72);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v62 = v23;
  cf = v19;
  v63[0] = cf;
  if (v12)
    CFRetain(cf);

  v46 = v51;
  v82 = v51;
  v83 = v52;
  v48 = v52;
  v24 = v54;
  v52 = 0;
  v54 = 0;
  v45 = v53;
  v84 = v53;
  v85 = v24;
  v47 = v24;
  v25 = v55;
  v26 = v56;
  v86 = v55;
  v87 = v56;
  v28 = v57;
  v27 = v58;
  v88 = v57;
  v89 = v58;
  v29 = v59;
  v56 = 0;
  v58 = 0;
  v59 = 0;
  v90 = v29;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v60);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v91 = v30;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v61);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v92 = v31;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v62);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v93 = v32;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)v63);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  v94 = v33;
  v34 = malloc_type_malloc(0x88uLL, 0x10E004047F73F55uLL);
  *v34 = MEMORY[0x1E0C809A0];
  v34[1] = 50331650;
  v34[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v34[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
  v34[4] = v46;
  v34[5] = v48;
  v83 = 0;
  v85 = 0;
  v34[6] = v45;
  v34[7] = v47;
  v34[8] = v25;
  v34[9] = v26;
  v34[10] = v28;
  v34[11] = v27;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v34[12] = v29;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(&v91);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  v34[13] = v35;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(&v92);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v34[14] = v36;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(&v93);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v34[15] = v37;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(&v94);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  v34[16] = v38;
  v39 = _Block_copy(v34);

  v40 = v94;
  v94 = 0;
  if (v40)
    CFRelease(v40);
  v41 = v93;
  v93 = 0;
  if (v41)
    CFRelease(v41);
  v42 = v92;
  v92 = 0;
  if (v42)
    CFRelease(v42);
  v43 = v91;
  v91 = 0;
  if (v43)
    CFRelease(v43);
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  if (v89)
    CFRelease(v89[1]);
  if (v87)
    CFRelease(v87[1]);
  if (v85)
    CFRelease(v85[1]);
  if (v83)
    CFRelease(v83[1]);
  v44 = _Block_copy(v39);
  objc_msgSend(v49, "getRulesWithCompletionHandler:", v44);

  if (v63[0])
    CFRelease(v63[0]);
  if (v62)
    CFRelease(v62);
  if (v61)
    CFRelease(v61);
  if (v60)
    CFRelease(v60);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  if (v58)
    CFRelease(v58[1]);
  if (v56)
    CFRelease(v56[1]);
  if (v54)
    CFRelease(v54[1]);
  if (v52)
    CFRelease(v52[1]);

  if (v72[0])
    CFRelease(v72[0]);
  if (v71)
    CFRelease(v71);
  if (v70)
    CFRelease(v70);
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  if (v68)
    CFRelease(v68[1]);
  if (v66)
    CFRelease(v66[1]);
  if (v64)
    CFRelease(v64[1]);
  if (v78[0])
    CFRelease(v78[0]);
  if (v77)
    CFRelease(v77);
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  if (v75)
    CFRelease(v75[1]);
  if (v73)
    CFRelease(v73[1]);
  if (v81)
    CFRelease(v81);
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  if (v79)
    CFRelease(v79[1]);

}

void sub_19775CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef cf,CFTypeRef a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef a37,CFTypeRef a38,CFTypeRef a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef a45,CFTypeRef a46)
{
  uint64_t v46;
  const void *v48;
  uint64_t v49;
  uint64_t v50;

  if (cf)
    CFRelease(cf);
  if (a27)
    CFRelease(a27);
  if (a26)
    CFRelease(a26);
  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  if (a24)
    CFRelease(*(CFTypeRef *)(a24 + 8));
  if (a22)
    CFRelease(*(CFTypeRef *)(a22 + 8));
  if (a20)
    CFRelease(*(CFTypeRef *)(a20 + 8));
  if (a18)
    CFRelease(*(CFTypeRef *)(a18 + 8));

  if (a39)
    CFRelease(a39);
  if (a38)
    CFRelease(a38);
  if (a37)
    CFRelease(a37);
  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 8))(a36);
  if (a35)
    CFRelease(*(CFTypeRef *)(a35 + 8));
  if (a33)
    CFRelease(*(CFTypeRef *)(a33 + 8));
  if (a31)
    CFRelease(*(CFTypeRef *)(a31 + 8));
  if (a46)
    CFRelease(a46);
  if (a45)
    CFRelease(a45);
  if (a44)
    (*(void (**)(uint64_t))(*(_QWORD *)a44 + 8))(a44);
  if (a43)
    CFRelease(*(CFTypeRef *)(a43 + 8));
  if (a41)
    CFRelease(*(CFTypeRef *)(a41 + 8));
  v48 = *(const void **)(v46 - 200);
  if (v48)
    CFRelease(v48);
  v49 = *(_QWORD *)(v46 - 208);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(v46 - 216);
  if (v50)
    CFRelease(*(CFTypeRef *)(v50 + 8));

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (const void *)a1[9];
  a1[9] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[8];
  a1[8] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  a1[7] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return a1;
}

BOOL WebKit::WebExtensionContext::handleContentRuleListNotificationForTab(uint64_t *a1, WebKit::WebExtensionTab *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;

  WebKit::WebExtensionContext::incrementActionCountForTab((WebKit::WebExtensionContext *)a1, a2, 1);
  MEMORY[0x19AEABCC8](&v18, CFSTR("declarativeNetRequestFeedback"));
  if ((WebKit::WebExtensionContext::permissionState((uint64_t)a1, &v18, 0, 2) & 0xFFFFFFFE) == 2)
  {
    v7 = 0;
  }
  else
  {
    MEMORY[0x19AEABCC8](&v22, CFSTR("declarativeNetRequest"));
    v7 = (WebKit::WebExtensionContext::permissionState((uint64_t)a1, &v22, 0, 2) & 0xFFFFFFFE) != 2
      || (WebKit::WebExtensionContext::permissionState((uint64_t)a1, (URL *)a3, (URL *)a2, 3) & 0xFFFFFFFE) != 2;
    v8 = v22;
    v22 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v6);
      if (v7)
        return !v7;
      goto LABEL_16;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (v7)
    return !v7;
LABEL_16:
  v10 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v10 += 2;
  v18 = v10;
  v19 = *(_OWORD *)(a3 + 8);
  v20 = *(_OWORD *)(a3 + 24);
  WTF::WallTime::now(v9);
  v11 = a1 + 76;
  *(_QWORD *)&v21 = v12;
  *((_QWORD *)&v21 + 1) = *((_QWORD *)a2 + 2);
  v13 = *((_DWORD *)a1 + 155);
  if (v13 == *((_DWORD *)a1 + 154))
  {
    WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)v11, (unint64_t)&v18);
  }
  else
  {
    v15 = *v11;
    WTF::URL::URL(*v11 + 56 * v13, (uint64_t *)&v18);
    *(_OWORD *)(v15 + 56 * v13 + 40) = v21;
    ++*((_DWORD *)a1 + 155);
  }
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  return !v7;
}

void sub_19775D210(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::purgeMatchedRulesFromBefore(WebKit::WebExtensionContext *this, const WTF::WallTime *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  int v14;
  _BOOL8 v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *((unsigned int *)this + 155);
  if (!(_DWORD)v2)
    return 0;
  v17 = 0;
  v18 = 0;
  v5 = *((_QWORD *)this + 76);
  v6 = 56 * v2;
  do
  {
    if (*(double *)(v5 + 40) >= *(double *)a2)
    {
      v7 = HIDWORD(v18);
      if (HIDWORD(v18) == (_DWORD)v18)
      {
        WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters&>((uint64_t)&v17, v5);
      }
      else
      {
        v8 = v17;
        v9 = *(_DWORD **)v5;
        if (*(_QWORD *)v5)
          *v9 += 2;
        v10 = v8 + 56 * v7;
        *(_QWORD *)v10 = v9;
        v11 = *(_OWORD *)(v5 + 8);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v5 + 24);
        *(_OWORD *)(v10 + 8) = v11;
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v5 + 40);
        ++HIDWORD(v18);
      }
    }
    v5 += 56;
    v6 -= 56;
  }
  while (v6);
  v12 = *((_DWORD *)this + 155);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  if (v12)
  {
    WTF::VectorDestructor<true,std::pair<WTF::URL,WebCore::CharacterRange>>::destruct(v13, (WTF::StringImpl *)((char *)v13 + 56 * v12));
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  }
  if (v13)
  {
    *((_QWORD *)this + 76) = 0;
    *((_DWORD *)this + 154) = 0;
    WTF::fastFree(v13, a2);
  }
  *((_QWORD *)this + 76) = v17;
  v14 = HIDWORD(v18);
  *((_DWORD *)this + 154) = v18;
  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 155) = v14;
  v15 = v14 != 0;
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, a2);
  return v15;
}

void sub_19775D3D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::registeredContentScriptsStore(WebKit::WebExtensionContext *this)
{
  void *v2;
  _WKWebExtensionRegisteredScriptsSQLiteStore *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  _BOOL8 v7;
  _WKWebExtensionRegisteredScriptsSQLiteStore *v8;
  _WKWebExtensionRegisteredScriptsSQLiteStore *v9;
  const void *v10;

  v2 = (void *)*((_QWORD *)this + 48);
  if (!v2)
  {
    v3 = [_WKWebExtensionRegisteredScriptsSQLiteStore alloc];
    if (*((_QWORD *)this + 14))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    if (*((_QWORD *)this + 5))
    {
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v6 = *((_QWORD *)this + 5);
      if (v6)
        v7 = *(_DWORD *)(v6 + 4) == 0;
      else
        v7 = 1;
    }
    else
    {
      v7 = 1;
      v5 = &stru_1E351F1B8;
    }
    v8 = -[_WKWebExtensionRegisteredScriptsSQLiteStore initWithUniqueIdentifier:directory:usesInMemoryDatabase:](v3, "initWithUniqueIdentifier:directory:usesInMemoryDatabase:", v4, v5, v7);
    v9 = v8;
    if (v8)
      CFRetain(v8);

    v10 = (const void *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = v9;
    if (v10)
      CFRelease(v10);

    v2 = (void *)*((_QWORD *)this + 48);
  }
  return v2;
}

void sub_19775D4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::setSessionStorageAllowedInContentScripts(WebKit::WebExtensionContext *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27[2];
  uint64_t v28;
  char v29;
  IPC::Encoder *v30;

  *((_BYTE *)this + 688) = a2;
  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("SessionStorageAllowedInContentScripts"));

  WebKit::WebExtensionContext::writeStateToStorage(this);
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *((_QWORD *)this + 4);
      WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)(v7 - 16), v27);
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v27, &v25);
      if (v27[0])
      {
        v9 = *((unsigned int *)v27[0] - 1);
        v10 = &v27[0][v9];
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      v20 = v27;
      v21 = v10;
      v22 = v10;
      v23 = v10;
      v24 = &v27[0][v9];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v20);
      while (v26 != v21)
      {
        v12 = *(_QWORD *)(*v26 + 8);
        v13 = *(_QWORD *)(v12 + 136);
        if (v13 && *(_BYTE *)(v13 + 104) || *(_QWORD *)(v12 + 144))
        {
          v14 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v14 = 1598;
          *(_QWORD *)(v14 + 8) = v8;
          *(_QWORD *)(v14 + 528) = v14 + 16;
          *(_QWORD *)(v14 + 536) = v14 + 16;
          *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v14 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
          v30 = (IPC::Encoder *)v14;
          *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = a2;
          LOBYTE(v28) = 0;
          v29 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v30, 0, (uint64_t)&v28, 1);
          if (v29)
          {
            v16 = v28;
            v28 = 0;
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v17 = v30;
          v30 = 0;
          if (v17)
          {
            IPC::Encoder::~Encoder(v17, v15);
            WTF::fastFree(v18, v19);
          }
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v25);
      }
      if (v27[0])
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v27[0], v11);
    }
  }
}

void sub_19775D6FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(a21, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::quoataForStorageType(uint64_t a1, int a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  if (a2 == 4)
    return 102400;
  if (a2 == 2)
    return 10485760;
  if (a2 != 1)
    return 0;
  MEMORY[0x19AEABCC8](&v6, CFSTR("unlimitedStorage"));
  WebKit::WebExtensionContext::permissionState(a1, &v6, 0, 2);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return 5242880;
}

void sub_19775D820(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionContext::localStorageStore(WebKit::WebExtensionContext *this)
{
  void *v2;
  _WKWebExtensionStorageSQLiteStore *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  _BOOL8 v7;
  _WKWebExtensionStorageSQLiteStore *v8;
  const void **v9;

  v2 = (void *)*((_QWORD *)this + 87);
  if (!v2)
  {
    v3 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (*((_QWORD *)this + 14))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    if (*((_QWORD *)this + 5))
    {
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v6 = *((_QWORD *)this + 5);
      if (v6)
        v7 = *(_DWORD *)(v6 + 4) == 0;
      else
        v7 = 1;
    }
    else
    {
      v7 = 1;
      v5 = &stru_1E351F1B8;
    }
    v8 = -[_WKWebExtensionStorageSQLiteStore initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:](v3, "initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:", v4, 1, v5, v7);
    v9 = (const void **)((char *)this + 696);
    WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(v9, v8);

    v2 = (void *)*v9;
  }
  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_19775D928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::sessionStorageStore(WebKit::WebExtensionContext *this)
{
  void *v2;
  _WKWebExtensionStorageSQLiteStore *v3;
  __CFString *v4;
  __CFString *v5;
  _WKWebExtensionStorageSQLiteStore *v6;
  const void **v7;

  v2 = (void *)*((_QWORD *)this + 88);
  if (!v2)
  {
    v3 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (*((_QWORD *)this + 14))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    if (*((_QWORD *)this + 5))
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v6 = -[_WKWebExtensionStorageSQLiteStore initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:](v3, "initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:", v4, 2, v5, 1);
    v7 = (const void **)((char *)this + 704);
    WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(v7, v6);

    v2 = (void *)*v7;
  }
  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_19775DA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::syncStorageStore(WebKit::WebExtensionContext *this)
{
  void *v2;
  _WKWebExtensionStorageSQLiteStore *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  _BOOL8 v7;
  _WKWebExtensionStorageSQLiteStore *v8;
  const void **v9;

  v2 = (void *)*((_QWORD *)this + 89);
  if (!v2)
  {
    v3 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (*((_QWORD *)this + 14))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    if (*((_QWORD *)this + 5))
    {
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v6 = *((_QWORD *)this + 5);
      if (v6)
        v7 = *(_DWORD *)(v6 + 4) == 0;
      else
        v7 = 1;
    }
    else
    {
      v7 = 1;
      v5 = &stru_1E351F1B8;
    }
    v8 = -[_WKWebExtensionStorageSQLiteStore initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:](v3, "initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:", v4, 4, v5, v7);
    v9 = (const void **)((char *)this + 712);
    WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(v9, v8);

    v2 = (void *)*v9;
  }
  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_19775DB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::storageForType(WebKit::WebExtensionContext *a1, int a2)
{
  void *v2;

  switch(a2)
  {
    case 4:
      WebKit::WebExtensionContext::syncStorageStore(a1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      WebKit::WebExtensionContext::sessionStorageStore(a1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 1:
      WebKit::WebExtensionContext::localStorageStore(a1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v2 = 0;
      break;
  }
  return v2;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      v6 = *(unsigned int **)v5;
      if (*(_QWORD *)v5 != -1)
      {
        v7 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v7)
        {
          CFRelease(*(CFTypeRef *)(v7 + 8));
          v6 = *(unsigned int **)v5;
        }
        *(_QWORD *)v5 = 0;
        if (v6)
        {
          do
          {
            v8 = __ldaxr(v6);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v6));
          if (!v9)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(unsigned __int8 *)(v4 - 16) != 254)
        v4 = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(_QWORD *)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254 && *v4)
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::deleteAllNodes(uint64_t result, void *a2)
{
  WTF *i;
  WTF *v3;
  WTF::StringImpl *v4;

  for (i = *(WTF **)(result + 8); i; result = WTF::fastFree(v3, a2))
  {
    v3 = i;
    i = (WTF *)*((_QWORD *)i + 6);
    v4 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19775DF04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(WTF::StringImpl ***a1, _QWORD **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  return a1;
}

uint64_t **WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(uint64_t **a1, _QWORD **a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t *v6;

  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v4, v3);
  return a1;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  const void *v4;
  uint64_t v5;

  v3 = (WTF::StringImpl **)a1[7];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (const void *)a1[6];
  a1[6] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v2 = *(id **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::wrapper(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = CFSTR("permissions");
  WebKit::toAPI((_QWORD **)(a1 + 56));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotificationName:object:userInfo:", v4, v5, v7);

}

void sub_19775E10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, void *a2)
{
  uint64_t *v3;
  const void *v4;
  uint64_t v5;

  v3 = (uint64_t *)a1[7];
  if (v3)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v3, a2);
  v4 = (const void *)a1[6];
  a1[6] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::postAsyncNotification(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v2 = *(id **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::wrapper(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = CFSTR("matchPatterns");
  WebKit::toAPI((_QWORD **)(a1 + 56));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotificationName:object:userInfo:", v4, v5, v7);

}

void sub_19775E2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(v1, v2, 0);

}

void sub_19775E350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, id, id))(*(_QWORD *)v6 + 16))(v6, v7, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }

}

void sub_19775E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(v1, v2, 0);

}

void sub_19775E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(v1, v2, 0);

}

void sub_19775E524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(*(_QWORD *)(a1 + 32), a2, a3);
}

BOOL WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL(id *a1)
{
  id WeakRetained;
  _BOOL8 v2;

  WeakRetained = objc_loadWeakRetained(a1);
  v2 = WeakRetained != 0;

  return v2;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::WebExtensionTab *v3;
  NSObject *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  WebKit::WebExtensionTab *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  _BYTE v21[14];
  char v22;
  WTF::StringImpl *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 64);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      WebKit::WebExtensionContext::getTab(*(uint64_t **)(a1 + 32), *(_QWORD *)(a1 + 48), 0, &v17);
      v3 = v17;
      if (v17)
      {
        v4 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
        {
          v10 = *((unsigned __int16 *)v3 + 24);
          v11 = *((_QWORD *)v3 + 2);
          *(_DWORD *)buf = 67240448;
          v19 = v10;
          v20 = 2050;
          *(_QWORD *)v21 = v11;
          _os_log_debug_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEBUG, "Firing updated tab properties (0x%{public}X) for tab %{public}llu", buf, 0x12u);
        }
        WebKit::WebExtensionTab::parameters(v3, (uint64_t)buf);
        WebKit::WebExtensionTab::changedParameters(v3, 0, (uint64_t)&v12);
        WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(v1, (__int128 *)buf, &v12);
        if (v16)
        {
          v6 = v15;
          v15 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, v5);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        if (v14)
        {
          v7 = v13;
          v13 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v5);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        if (v24)
        {
          v8 = v23;
          v23 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v5);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        if (v22)
        {
          v9 = *(WTF::StringImpl **)&v21[6];
          *(_QWORD *)&v21[6] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v5);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        *((_WORD *)v3 + 24) = 0;
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v3);
      }
    }
  }
}

void sub_19775E76C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,WTF::StringImpl *a41,char a42)
{
  uint64_t v42;

  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a42 && a41)
  {
    if (*(_DWORD *)a41 == 2)
      WTF::StringImpl::destroy(a41, a2);
    else
      *(_DWORD *)a41 -= 2;
  }
  if (a40 && a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, a2);
    else
      *(_DWORD *)a35 -= 2;
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v42);
  _Unwind_Resume(a1);
}

_QWORD *WTF::RetainPtr<NSURLResponse>::RetainPtr(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  *a1 = v3;
  if (v3)
    CFRetain(v3);

  return a1;
}

void sub_19775E898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WTF::RetainPtr<objc_object * {__strong}>::RetainPtr(_QWORD *a1, id *a2)
{
  id v3;
  void *v4;

  WTF::RetainPtr<NSMutableArray>::get(a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  *a1 = v3;
  if (v3)
    CFRetain(v3);

  return a1;
}

void sub_19775E904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WTF::RetainPtr<NSURLAuthenticationChallenge>::RetainPtr(_QWORD *a1, id *a2)
{
  id v3;
  void *v4;

  WTF::RetainPtr<NSMutableArray>::get(a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  *a1 = v3;
  if (v3)
    CFRetain(v3);

  return a1;
}

void sub_19775E970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if ((a2 & 1) != 0)
  {
    WebKit::WebExtensionContext::performTasksAfterBackgroundContentLoads(*(_QWORD *)(a1 + 32));
  }
  else
  {
    WebKit::WebExtensionContext::createError(a1, 6, 0, 0);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSError>::operator=((const void **)(v2 + 312), v3);

  }
}

void sub_19775EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebExtensionContext::*&)(void),WebKit::WebExtensionContext*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  CFTypeRef v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD *v20;
  WTF *v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  WTF::StringImpl *v44;
  WTF *v45;
  CFTypeRef cf;
  __int128 v47;
  WTF::StringImpl *v48[2];
  WTF::StringImpl *v49[12];

  v49[10] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  v2 = a1 + 48;
  v4 = *(_QWORD *)(v2 - 16);
  WTF::RetainPtr<__IOHIDDevice *>::fromStorageType(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0;
  +[_WKWebExtensionDeclarativeNetRequestTranslator jsonObjectsFromData:errorStrings:](_WKWebExtensionDeclarativeNetRequestTranslator, "jsonObjectsFromData:errorStrings:", v5, &v43);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v43;

  v42 = 0;
  +[_WKWebExtensionDeclarativeNetRequestTranslator translateRules:errorStrings:](_WKWebExtensionDeclarativeNetRequestTranslator, "translateRules:errorStrings:", v41, &v42);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v42;
  v40 = v7;
  WebKit::encodeJSONString(v7, 1, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v4 + 48));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v10);

    WebKit::objectForKey<NSString>((id *)&cf, CFSTR("LastLoadedDeclarativeNetRequestHash"), 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    v13 = v9;
    v38 = v8;
    v39 = v6;
    WTF::SHA1::SHA1((WTF::SHA1 *)&cf);
    WTF::SHA1::addUTF8Bytes((WTF::SHA1 *)&cf, v13);
    WTF::SHA1::computeHash();
    WTF::SHA1::hexDigest();
    WTF::String::fromUTF8();
    if (v44)
      v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E351F1B8;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("-%zu"), 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString stringByAppendingString:](v14, "stringByAppendingString:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = v44;
    v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v21 = v45;
    v45 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v17);
      else
        --*(_DWORD *)v21;
    }

    cf = (CFTypeRef)v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v22 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&v47 = v4;
    *((_QWORD *)&v47 + 1) = v22;
    MEMORY[0x19AEABCC8](v48, v11);
    MEMORY[0x19AEABCC8](&v48[1], v16);
    MEMORY[0x19AEABCC8](v49, v13);
    v23 = cf;
    v25 = *((_QWORD *)&v47 + 1);
    v24 = v47;
    v26 = v48[0];
    v28 = v48[1];
    v27 = v49[0];
    v47 = 0u;
    *(_OWORD *)v48 = 0u;
    v49[0] = 0;
    v29 = malloc_type_malloc(0x50uLL, 0x10E004008FFF3F5uLL);
    *v29 = MEMORY[0x1E0C809A0];
    v29[1] = 50331650;
    v29[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::{lambda(void *)#1}::__invoke;
    v29[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::descriptor;
    v29[4] = v23;
    v29[5] = v24;
    v29[6] = v25;
    v29[7] = v26;
    v29[8] = v28;
    v29[9] = v27;
    v8 = v38;
    v6 = v39;
    v30 = _Block_copy(v29);

    v31 = _Block_copy(v30);
    dispatch_async(MEMORY[0x1E0C80D38], v31);

    v33 = v49[0];
    v49[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v48[1];
    v48[1] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v48[0];
    v48[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = *((_QWORD *)&v47 + 1);
    *((_QWORD *)&v47 + 1) = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v47;
    *(_QWORD *)&v47 = 0;
    if (v37)
      CFRelease(*(CFTypeRef *)(v37 + 8));
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    v20 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v20 = MEMORY[0x1E0C809A0];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke;
    v20[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::descriptor;
    v20[4] = v19;
    v11 = _Block_copy(v20);

    v16 = _Block_copy(v11);
    dispatch_async(MEMORY[0x1E0C80D38], v16);
  }

}

void sub_19775EF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF *a17, CFTypeRef cf, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23)
{
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;

  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19775F1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[6];
  a1[6] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[5];
  a1[5] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::{lambda(void *)#1}::__invoke(API::ContentRuleListStore *a1)
{
  uint64_t v2;
  API::ContentRuleListStore *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)a1 + 4);
  v3 = API::ContentRuleListStore::defaultStore(a1);
  WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)&v14, v2);
  WTF::String::isolatedCopy();
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *((_QWORD *)a1 + 6);
  v5 = (_DWORD *)*((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 6) = 0;
  if (v5)
    *v5 += 2;
  v6 = (_DWORD *)*((_QWORD *)a1 + 8);
  if (v6)
    *v6 += 2;
  v7 = (_DWORD *)*((_QWORD *)a1 + 9);
  if (v7)
    *v7 += 2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v8 = &off_1E34F82F8;
  v8[1] = v2;
  v8[2] = v2;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v6;
  v8[6] = v7;
  v12 = v8;
  API::ContentRuleListStore::lookupContentRuleListFile((uint64_t)v3, (uint64_t)&v14, (uint64_t)&v13, (uint64_t *)&v12);
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19775F3E0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;

  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v18);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v18);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E34F82F8;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34F82F8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::call(API::ContentRuleListStore *a1, CFTypeRef **a2)
{
  CFTypeRef *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  CFTypeRef *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const WTF::URL *v28;
  uint64_t v29;
  WebKit::WebUserContentControllerProxy *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;

  v3 = *a2;
  *a2 = 0;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)(v4 + 64);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    v12 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    goto LABEL_17;
  }
  if (v3)
  {
    v6 = *((_QWORD *)a1 + 4) ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    v7 = *((_QWORD *)a1 + 5) ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    v8 = objc_msgSend(v6, "isEqualToString:", v7);

    if (v8)
    {
      v9 = *(_QWORD **)(v4 + 64);
      if (*(_BYTE *)(v4 + 249))
      {
        if (v9)
        {
          v10 = v9[1];
          if (v10)
            v9 = (_QWORD *)(v10 - 16);
          else
            v9 = 0;
        }
        v11 = (WTF::StringImpl *)(v9 + 15);
      }
      else
      {
        if (v9)
        {
          v23 = v9[1];
          if (v23)
            v9 = (_QWORD *)(v23 - 16);
          else
            v9 = 0;
        }
        v11 = (WTF::StringImpl *)(v9 + 17);
      }
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v11, &v38);
      v24 = *(_QWORD **)v11;
      if (*(_QWORD *)v11)
      {
        v25 = *((unsigned int *)v24 - 1);
        v26 = &v24[v25];
      }
      else
      {
        v26 = 0;
        v25 = 0;
      }
      v33 = v11;
      v34 = v26;
      v35 = v26;
      v36 = v26;
      v37 = &v24[v25];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v33);
      v27 = v39;
      if (v39 != v34)
      {
        v28 = (const WTF::URL *)(v4 + 72);
        do
        {
          v29 = *(_QWORD *)(*v27 + 8);
          if (v29)
            v30 = (WebKit::WebUserContentControllerProxy *)(v29 - 16);
          else
            v30 = 0;
          WebKit::WebUserContentControllerProxy::addContentRuleList(v30, (API::ContentRuleList *)v3, v28);
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v38);
          v27 = v39;
        }
        while (v39 != v34);
      }
      v12 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
      goto LABEL_16;
    }
  }
  v13 = (CFTypeRef *)API::ContentRuleListStore::defaultStore(a1);
  WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)&v38, v4);
  WTF::String::isolatedCopy();
  v14 = (WTF::StringImpl *)*((_QWORD *)a1 + 6);
  if (v14)
    *(_DWORD *)v14 += 2;
  v32 = v14;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v15 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  v16 = (_DWORD *)*((_QWORD *)a1 + 5);
  if (v16)
    *v16 += 2;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v17 = &off_1E34F8320;
  v17[1] = v4;
  v17[2] = v4;
  v17[3] = v15;
  v17[4] = v16;
  v31 = v17;
  API::ContentRuleListStore::compileContentRuleListFile(v13, (uint64_t)&v38, (uint64_t)&v33, (WebCore::ContentExtensions *)&v32, (uint64_t *)&v31);
  v19 = (uint64_t)v31;
  v31 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v33;
  v33 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v38;
  v38 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v18);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_17:
  if (v3)
    CFRelease(v3[1]);
}

void sub_19775F934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext33compileDeclarativeNetRequestRulesEP7NSArrayONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlvE0_clEvENUlNS_6RefPtrIN3API15ContentRuleListENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENSt3__110error_codeEE_clESJ_SL_EUlSJ_SL_E_vJSJ_SL_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F8320;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext33compileDeclarativeNetRequestRulesEP7NSArrayONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlvE0_clEvENUlNS_6RefPtrIN3API15ContentRuleListENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENSt3__110error_codeEE_clESJ_SL_EUlSJ_SL_E_vJSJ_SL_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8320;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext33compileDeclarativeNetRequestRulesEP7NSArrayONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlvE0_clEvENUlNS_6RefPtrIN3API15ContentRuleListENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENSt3__110error_codeEE_clESJ_SL_EUlSJ_SL_E_vJSJ_SL_EE4callESJ_SL_(_QWORD *a1, CFTypeRef **a2, uint64_t a3, const std::error_category *a4)
{
  CFTypeRef *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  std::string::size_type size;
  const WTF::URL *v20;
  uint64_t v21;
  WebKit::WebUserContentControllerProxy *v22;
  std::string *v23;
  std::string v24;
  std::error_code v25;
  __int128 buf;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)&v25.__val_ = a3;
  v25.__cat_ = a4;
  if ((_DWORD)a3)
  {
    v6 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      std::error_code::message(&v24, &v25);
      v23 = (v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v24
          : (std::string *)v24.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Error compiling declarativeNetRequest rules: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }

    v7 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
  }
  else
  {
    v8 = a1[1];
    v9 = *(_QWORD *)(v8 + 64);
    if (v9 && *(_QWORD *)(v9 + 8))
    {
      WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v8 + 48));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (a1[4])
        v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E351F1B8;
      objc_msgSend(v10, "setObject:forKey:", v11, CFSTR("LastLoadedDeclarativeNetRequestHash"));

      WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v8);
      v12 = *(_QWORD *)(v8 + 64);
      if (*(_BYTE *)(v8 + 249))
      {
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
            v12 = v13 - 16;
          else
            v12 = 0;
        }
        v14 = (_QWORD **)(v12 + 120);
      }
      else
      {
        if (v12)
        {
          v15 = *(_QWORD *)(v12 + 8);
          if (v15)
            v12 = v15 - 16;
          else
            v12 = 0;
        }
        v14 = (_QWORD **)(v12 + 136);
      }
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v14, &v24);
      v16 = *v14;
      if (*v14)
      {
        v17 = *((unsigned int *)v16 - 1);
        v18 = &v16[v17];
      }
      else
      {
        v18 = 0;
        v17 = 0;
      }
      *(_QWORD *)&buf = v14;
      *((_QWORD *)&buf + 1) = v18;
      v27 = v18;
      v28 = v18;
      v29 = &v16[v17];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&buf);
      size = v24.__r_.__value_.__l.__size_;
      if (v24.__r_.__value_.__l.__size_ != *((_QWORD *)&buf + 1))
      {
        v20 = (const WTF::URL *)(v8 + 72);
        do
        {
          v21 = *(_QWORD *)(*(_QWORD *)size + 8);
          if (v21)
            v22 = (WebKit::WebUserContentControllerProxy *)(v21 - 16);
          else
            v22 = 0;
          WebKit::WebUserContentControllerProxy::addContentRuleList(v22, (API::ContentRuleList *)v5, v20);
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v24);
          size = v24.__r_.__value_.__l.__size_;
        }
        while (v24.__r_.__value_.__l.__size_ != *((_QWORD *)&buf + 1));
      }
      v7 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 1);
    }
    else
    {
      v7 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v5)
    CFRelease(v5[1]);
}

void sub_19775FE04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  v2 = (const void *)a1[16];
  a1[16] = 0;
  if (v2)
    CFRelease(v2);
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(a1 + 6);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WebKit *v7;
  NSObject *v8;
  __CFString *v9;
  __CFString *v10;
  NSError *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  double v24[3];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  id v31;
  uint8_t buf[4];
  __CFString *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(v3, "count"))
  {
    v31 = 0;
    WebKit::encodeJSONData(v3, 1, (uint64_t)&v31);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (WebKit *)v31;
    v23 = (void *)v6;
    if (v7)
    {
      v8 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if (*(_QWORD *)(v4 + 112))
          v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v9 = &stru_1E351F1B8;
        v10 = v9;
        WebKit::privacyPreservingDescription(v7, v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138478083;
        v33 = v10;
        v34 = 2114;
        v35 = v12;
        _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Unable to serialize session declarativeNetRequest rules for extension with identifier %{private}@ with error: %{public}@", buf, 0x16u);

      }
    }
    else
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 128));
      v8 = objc_claimAutoreleasedReturnValue();
      -[NSObject addObject:](v8, "addObject:", v6);
    }

    v30 = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v14 = v3;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, buf, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v27 != v16)
            objc_enumerationMutation(v14);
          WebKit::objectForKey<NSNumber>(*(void **)(*((_QWORD *)&v26 + 1) + 8 * i), (uint64_t)CFSTR("id"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "doubleValue");
          v25 = v19;
          WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::add(v24, &v30, &v25);

        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, buf, 16);
      }
      while (v15);
      v20 = v30;
    }
    else
    {
      v20 = 0;
    }

    v22 = *(_QWORD *)(v4 + 648);
    *(_QWORD *)(v4 + 648) = v20;
    if (v22)
      WTF::fastFree((WTF *)(v22 - 16), v21);
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(a1 + 48);

  }
  else
  {
    v13 = *(_QWORD *)(v4 + 648);
    if (v13)
    {
      *(_QWORD *)(v4 + 648) = 0;
      WTF::fastFree((WTF *)(v13 - 16), v5);
    }
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(a1 + 48);
  }

}

void sub_197760148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t a1)
{
  WebKit::WebExtensionContext *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24[2];
  WebKit::WebExtensionContext *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;

  v2 = *(WebKit::WebExtensionContext **)a1;
  WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore(*(WebKit::WebExtensionContext **)a1);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  CFRetain(*((CFTypeRef *)v2 + 1));
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)(a1 + 56));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = v8;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)(a1 + 64));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = v9;
  WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 72));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  v24[0] = v10;
  if (v10)
    CFRetain(v10);

  v24[1] = v2;
  v25 = v2;
  v26 = v4;
  v27 = v3;
  v28 = v6;
  v29 = v5;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v22);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v31 = v12;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v23);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = v13;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)v24);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  cf = v14;
  v15 = malloc_type_malloc(0x70uLL, 0x10E0040923A9E41uLL);
  *v15 = MEMORY[0x1E0C809A0];
  v15[1] = 50331650;
  v15[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v15[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::descriptor;
  v15[4] = v2;
  v15[5] = v2;
  v25 = 0;
  v27 = 0;
  v15[6] = v4;
  v15[7] = v3;
  v15[8] = v6;
  v15[9] = v5;
  v29 = 0;
  v30 = 0;
  v15[10] = v7;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v31);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v15[11] = v16;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v32);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v15[12] = v17;
  WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v15[13] = v18;
  v19 = _Block_copy(v15);

  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v29)
    CFRelease(*(CFTypeRef *)(v29 + 8));
  if (v27)
    CFRelease(*(CFTypeRef *)(v27 + 8));
  if (v25)
    CFRelease(*((CFTypeRef *)v25 + 1));
  v20 = _Block_copy(v19);
  objc_msgSend(v21, "getRulesWithCompletionHandler:", v20);

  if (v24[0])
    CFRelease(v24[0]);
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);

}

void sub_1977604F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf)
{
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v26 = v21;

  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (!v25)
    {
LABEL_7:
      if (!v24)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if (!v25)
  {
    goto LABEL_7;
  }
  CFRelease(*(CFTypeRef *)(v25 + 8));
  if (!v24)
  {
LABEL_9:
    CFRelease(*(CFTypeRef *)(v19 + 8));

    _Unwind_Resume(a1);
  }
LABEL_8:
  CFRelease(*(CFTypeRef *)(v24 + 8));
  goto LABEL_9;
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (const void *)a1[13];
  a1[13] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[12];
  a1[12] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[11];
  a1[11] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[10];
  a1[10] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = a1[7];
  a1[7] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  v8 = a1[5];
  a1[5] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WebKit *v7;
  NSObject *v8;
  __CFString *v9;
  __CFString *v10;
  NSError *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  double v24[3];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  id v31;
  uint8_t buf[4];
  __CFString *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(v3, "count"))
  {
    v31 = 0;
    WebKit::encodeJSONData(v3, 1, (uint64_t)&v31);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (WebKit *)v31;
    v23 = (void *)v6;
    if (v7)
    {
      v8 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if (*(_QWORD *)(v4 + 112))
          v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v9 = &stru_1E351F1B8;
        v10 = v9;
        WebKit::privacyPreservingDescription(v7, v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138478083;
        v33 = v10;
        v34 = 2114;
        v35 = v12;
        _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Unable to serialize dynamic declarativeNetRequest rules for extension with identifier %{private}@ with error: %{public}@", buf, 0x16u);

      }
    }
    else
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)(a1 + 104));
      v8 = objc_claimAutoreleasedReturnValue();
      -[NSObject addObject:](v8, "addObject:", v6);
    }

    v30 = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v14 = v3;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, buf, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v27 != v16)
            objc_enumerationMutation(v14);
          WebKit::objectForKey<NSNumber>(*(void **)(*((_QWORD *)&v26 + 1) + 8 * i), (uint64_t)CFSTR("id"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "doubleValue");
          v25 = v19;
          WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::add(v24, &v30, &v25);

        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, buf, 16);
      }
      while (v15);
      v20 = v30;
    }
    else
    {
      v20 = 0;
    }

    v22 = *(_QWORD *)(v4 + 656);
    *(_QWORD *)(v4 + 656) = v20;
    if (v22)
      WTF::fastFree((WTF *)(v22 - 16), v21);
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::operator()((id *)(a1 + 48));

  }
  else
  {
    v13 = *(_QWORD *)(v4 + 656);
    if (v13)
    {
      *(_QWORD *)(v4 + 656) = 0;
      WTF::fastFree((WTF *)(v13 - 16), v5);
    }
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::operator()((id *)(a1 + 48));
  }

}

void sub_197760994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::operator()(id *a1)
{
  _QWORD *v2;
  uint64_t v3;
  const WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  WTF *v14;
  uint64_t v15;
  __CFString *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  id v24;
  int64x2_t v25;
  API::ContentRuleListStore *v26;
  API::ContentRuleListStore *v27;
  id v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  id v32;
  id v33;
  _QWORD *v34;
  __int128 v35;
  id v36;
  void *v37;
  id v38;
  CFTypeRef v39;
  WTF::StringImpl *v40;
  void *v41;
  id v42;
  CFTypeRef v43;
  uint64_t v44;
  int64x2_t v45;
  id v46;
  int64x2_t v47;
  CFTypeRef v48;
  id v49;
  WTF::StringImpl *v50[2];
  CFTypeRef cf;
  id v52;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 7);
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded((WebKit::WebExtension *)v3);
  v5 = *(_DWORD *)(v3 + 84);
  if (v5)
  {
    v6 = *(_QWORD *)(v3 + 72);
    v7 = v6 + 24 * v5;
    do
    {
      v8 = v2[80];
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = *(_DWORD *)(*(_QWORD *)v6 + 16);
        if (v10 >= 0x100)
          v11 = v10 >> 8;
        else
          v11 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v6);
        for (i = 0; ; v11 = i + v13)
        {
          v13 = v11 & v9;
          v14 = *(WTF **)(v8 + 8 * (v11 & v9));
          if (v14 != (WTF *)-1)
          {
            if (!v14)
              goto LABEL_4;
            if ((WTF::equal(v14, *(const WTF::StringImpl **)v6, v4) & 1) != 0)
              break;
          }
          ++i;
        }
        v15 = v2[7];
        if (*(_QWORD *)(v6 + 16))
          v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v16 = &stru_1E351F1B8;
        WebKit::WebExtension::resourceDataForPath(v15, v16, 0, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          WTF::RetainPtr<NSMutableArray>::get(a1 + 6);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "addObject:", v17);

        }
      }
LABEL_4:
      v6 += 24;
    }
    while (v6 != v7);
  }
  v19 = (unint64_t)a1[2];
  WTF::RetainPtr<NSMutableArray>::get(a1 + 5);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "count");

  if (v21)
  {
    WTF::RetainPtr<NSMutableArray>::get(a1 + 5);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    dispatch_get_global_queue(-32768, 0);
    v23 = objc_claimAutoreleasedReturnValue();
    v47.i64[0] = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    v47.i64[1] = v19;
    v24 = v22;
    v48 = v24;
    v46 = v24;
    if (v24)
    {
      CFRetain(v24);
      v25 = v47;
    }
    else
    {
      v25 = vdupq_n_s64(v19);
    }
    v45 = v25;

    v32 = a1[4];
    a1[4] = 0;
    v49 = v32;
    v47.i64[1] = 0;
    *(int64x2_t *)v50 = v45;
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)&cf, (uint64_t *)&v48);
    v33 = v49;
    v49 = 0;
    v52 = v33;
    v34 = malloc_type_malloc(0x40uLL, 0x10E00400E264627uLL);
    *v34 = MEMORY[0x1E0C809A0];
    v34[1] = 50331650;
    v34[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v34[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v35 = *(_OWORD *)v50;
    v50[1] = 0;
    *((_OWORD *)v34 + 2) = v35;
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v34 + 6, (uint64_t *)&cf);
    v36 = v52;
    v52 = 0;
    v34[7] = v36;
    v37 = _Block_copy(v34);

    v38 = v52;
    v52 = 0;
    if (v38)
      (*(void (**)(id))(*(_QWORD *)v38 + 8))(v38);
    v39 = cf;
    cf = 0;
    if (v39)
      CFRelease(v39);
    v40 = v50[1];
    v50[1] = 0;
    if (v40)
      CFRelease(*((CFTypeRef *)v40 + 1));
    v41 = _Block_copy(v37);
    dispatch_async(v23, v41);

    v42 = v49;
    v49 = 0;
    if (v42)
      (*(void (**)(id))(*(_QWORD *)v42 + 8))(v42);
    v43 = v48;
    v48 = 0;
    if (v43)
      CFRelease(v43);
    v44 = v47.i64[1];
    v47.i64[1] = 0;
    if (v44)
      CFRelease(*(CFTypeRef *)(v44 + 8));

  }
  else
  {
    v26 = (API::ContentRuleListStore *)WebKit::WebExtensionContext::removeDeclarativeNetRequestRules((_QWORD *)v19);
    v27 = API::ContentRuleListStore::defaultStore(v26);
    WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)v50, v19);
    v28 = a1[4];
    a1[4] = 0;
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = &off_1E34F8388;
    v29[1] = v28;
    v47.i64[0] = (uint64_t)v29;
    API::ContentRuleListStore::removeContentRuleListFile((uint64_t)v27, (uint64_t)v50, v47.i64);
    if (v47.i64[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v47.i64[0] + 8))(v47.i64[0]);
    v31 = v50[0];
    v50[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
}

void sub_197760E20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, CFTypeRef a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef cf, uint64_t a20)
{
  uint64_t v20;

  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197760F54()
{
  void *v0;

  JUMPOUT(0x197760F4CLL);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_2::operator()(void)::{lambda(std::error_code)#1},void,std::__1>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F8388;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_2::operator()(void)::{lambda(std::error_code)#1},void,std::__1>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F8388;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_2::operator()(void)::{lambda(std::error_code)#1},void,std::__1>::call(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v2 + 16))(v2, a2 == 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197761024(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double *WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::add(double *result, uint64_t *a2, uint64_t *a3)
{
  double *v5;
  uint64_t v6;
  char v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  double *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  double *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3 + ~(*a3 << 32);
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (double *)(v6 + 8 * v12);
  v14 = *v13;
  v15 = *a3;
  if (*v13 != INFINITY)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (*a3 == *(_QWORD *)&v14)
      {
        if ((v7 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v25 = v6 + 8 * v24;
        goto LABEL_26;
      }
      if (v14 == -INFINITY)
        v18 = v13;
      v12 = (v12 + v19) & v8;
      v13 = (double *)(v6 + 8 * v12);
      v14 = *v13;
      ++v19;
    }
    while (*v13 != INFINITY);
    if (v18)
    {
      *v18 = INFINITY;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v13 = v18;
    }
  }
  *(_QWORD *)v13 = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_20:
      result = WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::expand(a2, v13);
      v13 = result;
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_20;
  }
  v25 = v20 + 8 * v23;
  v26 = 1;
LABEL_26:
  *(_QWORD *)v5 = v13;
  *((_QWORD *)v5 + 1) = v25;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

double *WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::expand(uint64_t *a1, double *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  double v24;
  double *v25;
  double *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastMalloc((WTF *)(8 * v7 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (v7)
    memset_pattern16((void *)(v8 + 16), &unk_1978D25A0, 8 * v7);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (double *)(v4 + 8 * v12);
      v15 = *v14;
      if (fabs(*v14) != INFINITY)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*(_QWORD *)&v15 << 32) + *(_QWORD *)&v15) ^ ((~(*(_QWORD *)&v15 << 32) + *(_QWORD *)&v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(double *)(v16 + 8 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24 != INFINITY);
        v25 = (double *)(v16 + 8 * v23);
        *v25 = v15;
        if (v14 == a2)
          v13 = v25;
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::load(WebKit::WebExtensionController &,WTF::String,NSError * {__autoreleasing}*)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F83B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::load(WebKit::WebExtensionController &,WTF::String,NSError * {__autoreleasing}*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F83B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::load(WebKit::WebExtensionController &,WTF::String,NSError * {__autoreleasing}*)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  int v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  void *v44;
  _BOOL4 v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE cf[12];
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 64);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    if (WebKit::WebExtension::hasBackgroundContent(*(WebKit::WebExtension **)(v1 + 56)))
    {
      *(_BYTE *)(v1 + 353) = 1;
      if (WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(v1 + 56)))
        goto LABEL_58;
      v3 = *(_QWORD *)(v1 + 40);
      if (v3 && *(_DWORD *)(v3 + 4) && !WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(v1 + 56)))
      {
        v5 = (uint64_t *)(v1 + 272);
        v6 = *(_QWORD *)(v1 + 272);
        if (v6)
        {
          *v5 = 0;
          WTF::fastFree((WTF *)(v6 - 16), v4);
        }
        WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v1 + 48));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v7);

        WebKit::objectForKey<NSNumber>((id *)cf, CFSTR("BackgroundContentEventListenersVersion"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "unsignedLongValue");

        v10 = *(const void **)cf;
        *(_QWORD *)cf = 0;
        if (v10)
          CFRelease(v10);
        if (v9 == 3)
        {
          WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v1 + 48));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v11);

          WebKit::objectForKey<NSData>((id *)cf, CFSTR("BackgroundContentEventListeners"));
          v12 = objc_claimAutoreleasedReturnValue();
          v13 = *(const void **)cf;
          *(_QWORD *)cf = 0;
          if (v13)
            CFRelease(v13);
          v14 = (void *)MEMORY[0x1E0CB3710];
          v15 = (void *)MEMORY[0x1E0C99E60];
          v49 = (void *)v12;
          v16 = objc_opt_class();
          objc_msgSend(v15, "setWithObjects:", v16, objc_opt_class(), 0);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "_strictlyUnarchivedObjectOfClasses:fromData:error:", v17, v12, 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v19 = v18;
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v50, cf, 16);
          if (v20)
          {
            v21 = *(_QWORD *)v51;
            do
            {
              v22 = 0;
              do
              {
                if (*(_QWORD *)v51 != v21)
                  objc_enumerationMutation(v19);
                v23 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v22);
                v24 = objc_msgSend(v23, "unsignedIntValue");
                v25 = objc_msgSend(v19, "countForObject:", v23);
                v26 = *v5;
                if (*v5
                  || (WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(v1 + 272), 0), (v26 = *v5) != 0))
                {
                  v27 = *(_DWORD *)(v26 - 8);
                }
                else
                {
                  v27 = 0;
                }
                v28 = ~(v24 << 15) + v24;
                v29 = (9 * (v28 ^ (v28 >> 10))) ^ ((9 * (v28 ^ (v28 >> 10))) >> 6);
                v30 = v27 & ((v29 + ~(v29 << 11)) ^ ((v29 + ~(v29 << 11)) >> 16));
                v31 = (_QWORD *)(v26 + 8 * v30);
                v32 = *(unsigned __int8 *)v31;
                if (v32 == 255)
                {
LABEL_31:
                  *(_BYTE *)v31 = v24;
                  *((_DWORD *)v31 + 1) = 0;
                  v35 = *v5;
                  if (*v5)
                    v36 = *(_DWORD *)(v35 - 12) + 1;
                  else
                    v36 = 1;
                  *(_DWORD *)(v35 - 12) = v36;
                  v37 = *v5;
                  if (*v5)
                    v38 = *(_DWORD *)(v37 - 12);
                  else
                    v38 = 0;
                  v39 = (*(_DWORD *)(v37 - 16) + v38);
                  v40 = *(unsigned int *)(v37 - 4);
                  if (v40 <= 0x400)
                  {
                    if (3 * v40 > 4 * v39)
                      goto LABEL_40;
LABEL_39:
                    v31 = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(v1 + 272), (unsigned __int8 *)v31);
                    goto LABEL_40;
                  }
                  if (v40 <= 2 * v39)
                    goto LABEL_39;
                }
                else
                {
                  v33 = 0;
                  v34 = 1;
                  while (v32 != v24)
                  {
                    if (v32 == 254)
                      v33 = v31;
                    v30 = (v30 + v34) & v27;
                    v31 = (_QWORD *)(v26 + 8 * v30);
                    v32 = *(unsigned __int8 *)v31;
                    ++v34;
                    if (v32 == 255)
                    {
                      if (v33)
                      {
                        *(_BYTE *)v33 = -1;
                        *((_DWORD *)v33 + 1) = 0;
                        --*(_DWORD *)(*v5 - 16);
                        v31 = v33;
                      }
                      goto LABEL_31;
                    }
                  }
                }
LABEL_40:
                *((_DWORD *)v31 + 1) += v25;
                ++v22;
              }
              while (v22 != v20);
              v41 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v50, cf, 16);
              v20 = v41;
            }
            while (v41);
          }

        }
        else
        {
          v42 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)cf = 134349312;
            *(_QWORD *)&cf[4] = v9;
            v55 = 2050;
            v56 = 3;
            _os_log_debug_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEBUG, "Background listener version mismatch %{public}zu != %{public}zu", cf, 0x16u);
          }
          WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v1 + 48));
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "removeObjectForKey:", CFSTR("BackgroundContentEventListeners"));

          WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v1 + 48));
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "removeObjectForKey:", CFSTR("BackgroundContentEventListenersVersion"));

          WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v1);
        }
      }
      v45 = *(_BYTE *)(v1 + 288) || *(_BYTE *)(v1 + 289) != 0;
      v46 = *(_QWORD *)(v1 + 272);
      if (!v46)
        goto LABEL_58;
      if (!*(_DWORD *)(v46 - 12))
        v45 = 1;
      if (v45)
LABEL_58:
        WebKit::WebExtensionContext::loadBackgroundWebView((WebKit::WebExtensionContext *)v1);
    }
    WebKit::WebExtensionContext::loadRegisteredContentScripts((CFTypeRef *)v1);
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRulesetStateFromStorage((WebKit::WebExtensionContext *)v1, v47);
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v48 = off_1E34F83D8;
    *(_QWORD *)cf = v48;
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)v1, (uint64_t *)cf);
    if (*(_QWORD *)cf)
      (*(void (**)(_QWORD))(**(_QWORD **)cf + 8))(*(_QWORD *)cf);
    return WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)v1);
  }
  return result;
}

void sub_19776197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf)
{
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  WebKit::WebExtension::InjectedContentData *v6;
  uint64_t v7;
  const WebKit::WebExtension::InjectedContentData *v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x38E38E4)
  {
    v5 = 72 * v3;
    v6 = (WebKit::WebExtension::InjectedContentData *)WTF::fastMalloc((WTF *)(72 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(const WebKit::WebExtension::InjectedContentData **)a2;
      v9 = 72 * v7;
      do
      {
        v6 = (WebKit::WebExtension::InjectedContentData *)((char *)WebKit::WebExtension::InjectedContentData::InjectedContentData(v6, v8)+ 72);
        v8 = (const WebKit::WebExtension::InjectedContentData *)((char *)v8 + 72);
        v9 -= 72;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_197761AF0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData const&>(uint64_t a1, unint64_t a2)
{
  const WebKit::WebExtension::InjectedContentData *v3;

  v3 = (const WebKit::WebExtension::InjectedContentData *)WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::WebExtension::InjectedContentData::InjectedContentData((WebKit::WebExtension::InjectedContentData *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = *(_QWORD *)(result + 8 * v6);
      if (v8 != -1)
      {
        if (!v8)
          return 0;
        if (v8 == a2)
          break;
      }
      v6 = (v6 + i) & v2;
    }
    return 1;
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *a2;
  *a2 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  *a2 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v9 >> 1, 0);
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(result + 8 * v6);
      if (v9 != -1)
      {
        if (!v9)
        {
          result += 8 * *(unsigned int *)(result - 4);
          return result;
        }
        if (v9 == a2)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    result += 8 * v8;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsDidChange(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0,void,WebKit::WebPageProxy &,BOOL &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::WebPreferences::setJavaScriptCanAccessClipboard(*(WebKit::WebPreferences **)(a2 + 224), *(const BOOL **)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v4, 0);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v4, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *a1 = &off_1E34F8428;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[3];
  if (v4)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v4, a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8428;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (v4)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::call(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  WebKit *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSDate *v14;
  WebKit *v15;
  void *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v20 = v5;
  v7 = (WebKit *)v6;
  v8 = *(_QWORD *)(a1 + 8);
  --*(_QWORD *)(v8 + 240);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: is not a set"));
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: is not a date"));
  }
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v9 = v20;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v23;
    v19 = *MEMORY[0x1E0C99768];
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v12);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v19, CFSTR("Object returned in set by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: is not a _WKWebExtensionMatchPattern"));
        v26 = (_QWORD *)objc_msgSend(v13, "_webExtensionMatchPattern");
        if ((WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>((uint64_t *)(a1 + 24), &v26) & 1) == 0)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v19, CFSTR("Set returned by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: doesn't contain the requested match patterns"));
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v10);
  }

  WebKit::toPatterns((WebKit *)v9, (uint64_t *)&v26);
  v15 = v7;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
    v15 = (WebKit *)objc_claimAutoreleasedReturnValue();
  }
  v17 = WebKit::toImpl(v15, v14);
  if (!v7)

  if (*(_BYTE *)(a1 + 32))
  {
    if (v26)
    {
      if (*((_DWORD *)v26 - 3))
      {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v21, &v26);
        WebKit::WebExtensionContext::grantPermissionMatchPatterns(v8, (uint64_t *)&v21, 1, v17);
        if (v21)
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v21, v16);
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD **, double))(*(_QWORD *)v18 + 16))(v18, a1 + 24, &v26, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (v26)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v26, v16);

}

void sub_19776218C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  void *v22;

  if (a12)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a12, a2);
  if (a22)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a22, a2);

  _Unwind_Resume(a1);
}

uint64_t WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = result;
  if (*(_DWORD *)result == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = *(_QWORD *)(result + 24);
      *(_QWORD *)(result + 8) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }

    v6 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::fastFree((WTF *)v1, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_1977622B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *a1 = &off_1E34F8450;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[3];
  if (v4)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v4, a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8450;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v4)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::call(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  WTF **v19;
  const WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  NSDate *v28;
  WebKit *v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  WebKit *v53;
  uint64_t v54;
  id obj;
  WTF::StringImpl *v56[5];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t *v62;
  WTF::StringImpl **v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68[3];
  WTF::StringImpl *v69[16];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v52 = v5;
  v53 = (WebKit *)v6;
  v7 = *(_QWORD *)(a1 + 8);
  --*(_QWORD *)(v7 + 240);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: is not a set"));
  if (v53)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: is not a date"));
  }
  v49 = v7;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = v52;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v65;
    v51 = *MEMORY[0x1E0C99768];
    v10 = 0x1E0C99000uLL;
    do
    {
      v11 = 0;
      v54 = v8;
      do
      {
        if (*(_QWORD *)v65 != v9)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v51, CFSTR("Object returned in set by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: is not a URL"), v49);
        MEMORY[0x19AEABB18](v69, v12);
        v14 = *(_QWORD *)(a1 + 24);
        if (v14
          && ((v15 = *(_DWORD *)(v14 - 8), v16 = *((_DWORD *)v69[0] + 4), v16 >= 0x100)
            ? (v17 = v16 >> 8)
            : (v17 = WTF::StringImpl::hashSlowCase(v69[0])),
              v18 = v17 & v15,
              v19 = (WTF **)(v14 + 40 * (v17 & v15)),
              (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v19) & 1) == 0))
        {
          v22 = v9;
          v23 = v10;
          v24 = a1;
          v25 = 1;
          while (*v19 == (WTF *)-1 || (WTF::equal(*v19, v69[0], v20) & 1) == 0)
          {
            v18 = (v18 + v25) & v15;
            v19 = (WTF **)(v14 + 40 * v18);
            ++v25;
            if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v19))
            {
              v21 = 0;
              goto LABEL_25;
            }
          }
          v21 = 1;
LABEL_25:
          a1 = v24;
          v10 = v23;
          v9 = v22;
          v8 = v54;
        }
        else
        {
          v21 = 0;
        }
        v26 = v69[0];
        v69[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::destroy(v26, v13);
            if ((v21 & 1) != 0)
              goto LABEL_32;
            goto LABEL_34;
          }
          *(_DWORD *)v26 -= 2;
        }
        if ((v21 & 1) != 0)
          goto LABEL_32;
LABEL_34:
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v51, CFSTR("Result returned by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: doesn't contain the requested URLs"), v49);
LABEL_32:
        ++v11;
      }
      while (v11 != v8);
      v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
      v8 = v27;
    }
    while (v27);
  }

  v29 = v53;
  if (!v53)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
    v29 = (WebKit *)objc_claimAutoreleasedReturnValue();
  }
  v30 = WebKit::toImpl(v29, v28);
  if (!v53)

  v62 = 0;
  v31 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(objc_msgSend(obj, "count", v49));
  v32 = WTF::fastZeroedMalloc((WTF *)(40 * v31 + 16));
  v63 = (WTF::StringImpl **)(v32 + 16);
  *(_DWORD *)(v32 + 8) = v31 - 1;
  *(_DWORD *)(v32 + 12) = v31;
  *(_DWORD *)v32 = 0;
  *((_DWORD *)v63 - 3) = 0;
  v33 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(objc_msgSend(obj, "count"));
  if (v33 <= 8)
    v34 = 8;
  else
    v34 = v33;
  v35 = WTF::fastZeroedMalloc((WTF *)(8 * v34 + 16));
  v62 = (uint64_t *)(v35 + 16);
  *(_DWORD *)(v35 + 8) = v34 - 1;
  *(_DWORD *)(v35 + 12) = v34;
  *(_DWORD *)v35 = 0;
  *((_DWORD *)v62 - 3) = 0;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v36 = obj;
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v58, v69, 16);
  if (v37)
  {
    v38 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v59 != v38)
          objc_enumerationMutation(v36);
        v40 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * i);
        MEMORY[0x19AEABB18](v56, v40);
        WebKit::WebExtensionMatchPattern::getOrCreate((uint64_t)v56, 6, &v57);
        v42 = v56[0];
        v56[0] = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
        if (v57)
        {
          MEMORY[0x19AEABB18](v56, v40);
          WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add((uint64_t *)&v63, v56, (uint64_t)v68);
          v44 = v56[0];
          v56[0] = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v43);
            else
              *(_DWORD *)v44 -= 2;
          }
          v68[0] = v57;
          v57 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v62, v68, (uint64_t)v56);
          v45 = v68[0];
          v68[0] = 0;
          if (v45)
            CFRelease(*(CFTypeRef *)(v45 + 8));
          v46 = v57;
          v57 = 0;
          if (v46)
            CFRelease(*(CFTypeRef *)(v46 + 8));
        }
      }
      v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v58, v69, 16);
    }
    while (v37);
  }

  if (*(_BYTE *)(a1 + 32) && v62 && *((_DWORD *)v62 - 3))
    WebKit::WebExtensionContext::grantPermissionMatchPatterns(v50, (uint64_t *)&v62, 1, v30);
  v48 = *(_QWORD *)(a1 + 40);
  if (v48)
  {
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl ***, double))(*(_QWORD *)v48 + 16))(v48, a1 + 24, &v63, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  if (v62)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v62, v47);
  if (v63)
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v63, (WTF::StringImpl *)v47);

}

void sub_197762980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43)
{

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *a1 = &off_1E34F8478;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[3];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8478;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::call(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  WebKit *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int i;
  int v23;
  WTF *v24;
  uint64_t v25;
  NSDate *v26;
  WebKit *v27;
  WTF::StringImpl *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebKit *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = (WebKit *)v6;
  v31 = *(_QWORD *)(a1 + 8);
  --*(_QWORD *)(v31 + 240);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: is not a set"));
  if (v8)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: is not a date"));
  }
  v33 = v8;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v40, 16, v7);
  if (v10)
  {
    v11 = *(_QWORD *)v37;
    v32 = *MEMORY[0x1E0C99768];
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v37 != v11)
          objc_enumerationMutation(v9);
        v13 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * v12);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v32, CFSTR("Object returned in set by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: is not a _WKWebExtensionPermission"));
        MEMORY[0x19AEABCC8](&v35, v13);
        v16 = *(_QWORD *)(a1 + 24);
        v17 = v35;
        if (v16)
        {
          v19 = *(_DWORD *)(v16 - 8);
          v20 = *((_DWORD *)v35 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v35);
          for (i = 0; ; v21 = i + v23)
          {
            v23 = v21 & v19;
            v24 = *(WTF **)(v16 + 8 * (v21 & v19));
            if (v24 != (WTF *)-1)
            {
              if (!v24)
              {
                v18 = 0;
                goto LABEL_33;
              }
              if ((WTF::equal(v24, v35, v15) & 1) != 0)
                break;
            }
            ++i;
          }
          v18 = 1;
LABEL_33:
          v17 = v35;
        }
        else
        {
          v18 = 0;
        }
        v35 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v14);
            if ((v18 & 1) != 0)
              goto LABEL_21;
            goto LABEL_34;
          }
          *(_DWORD *)v17 -= 2;
        }
        if ((v18 & 1) != 0)
          goto LABEL_21;
LABEL_34:
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v32, CFSTR("Result returned by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: doesn't contain the requested permissions"));
LABEL_21:
        ++v12;
      }
      while (v12 != v10);
      v25 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      v10 = v25;
    }
    while (v25);
  }

  WebKit::toImpl((WebKit *)v9, (uint64_t *)&v35);
  v27 = v33;
  if (!v33)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
    v27 = (WebKit *)objc_claimAutoreleasedReturnValue();
  }
  v29 = WebKit::toImpl(v27, v26);
  if (!v33)

  if (*(_BYTE *)(a1 + 32))
  {
    if (v35)
    {
      if (*((_DWORD *)v35 - 3))
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v34, (_QWORD **)&v35);
        WebKit::WebExtensionContext::grantPermissions(v31, (uint64_t *)&v34, v29);
        if (v34)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v28);
      }
    }
  }
  v30 = *(_QWORD *)(a1 + 40);
  if (v30)
  {
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, double))(*(_QWORD *)v30 + 16))(v30, a1 + 24, &v35, v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  if (v35)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v35, v28);

}

void sub_197762F74(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, WTF::StringImpl **a13, WTF::StringImpl **a14)
{
  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);

  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::expand(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl ***)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = *v14;
        v18 = *((_DWORD *)*v14 + 4);
        if (v18 >= 0x100)
          v19 = v18 >> 8;
        else
          v19 = WTF::StringImpl::hashSlowCase(v17);
        v20 = 0;
        do
        {
          v21 = v19 & v16;
          v19 = ++v20 + v21;
        }
        while (*(_QWORD *)(v15 + 8 * v21));
        *(_QWORD *)(v15 + 8 * v21) = *v13;
        if (v13 == a3)
          v12 = v15 + 8 * v21;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WTF **v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  WTF **v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v9 = result;
  v10 = result + 16;
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(result + 56);
    do
    {
      result = (uint64_t)WTF::URL::URL((WTF::URL *)(v12 - 40));
      *v12 = 0;
      v12 += 48;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v30 = v5;
    do
    {
      v16 = (WTF::StringImpl **)(v4 + 48 * v13);
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v4 + 48 * v13)))
        {
          v17 = *v16;
          *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v8);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)*v16 + 4);
          v21 = v14;
          if (v20 >= 0x100)
            v22 = v20 >> 8;
          else
            v22 = WTF::StringImpl::hashSlowCase(*v16);
          v23 = 0;
          do
          {
            v24 = v22 & v19;
            v25 = (WTF **)(v18 + 48 * (v22 & v19));
            v27 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v25);
            v22 = ++v23 + v24;
          }
          while (!v27);
          v28 = *v25;
          *v25 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v26);
            else
              *(_DWORD *)v28 -= 2;
          }
          WTF::URL::URL(v18 + 48 * v24, (uint64_t *)(v4 + 48 * v13));
          *(_BYTE *)(v18 + 48 * v24 + 40) = *(_BYTE *)(v4 + 48 * v13 + 40);
          v29 = *v16;
          *v16 = 0;
          v14 = v21;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          v15 = v30;
          if (v16 == a3)
            v14 = v25;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_197763484(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t **v2;

  if (*v2)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_QWORD *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 2;
    *(_QWORD *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a1);
  ++*(_DWORD *)(*(_QWORD *)a1 + 8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewWindow(WebKit::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F84A0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewWindow(WebKit::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F84A0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewWindow(WebKit::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  _Unwind_Exception *v4;
  uint64_t v5;

  if (*(_DWORD *)(a2 + 112) || !*(_BYTE *)(a2 + 104))
  {
    v5 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)>::operator()((uint64_t *)(a1 + 24), &v5);
  }
  else
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v4 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if (v5)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v5);
      _Unwind_Resume(v4);
    }
    v2 = (uint64_t *)(a1 + 24);
    WebKit::WebExtensionContext::getWindow(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), 0, 0, 0, &v5);
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)>::operator()(v2, &v5);
  }
  result = v5;
  if (v5)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v5);
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197763AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewTab(WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F84C8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewTab(WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F84C8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::WebExtensionTab *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewTab(WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  WebKit::WebExtensionTab *result;
  _Unwind_Exception *v4;
  WebKit::WebExtensionTab *v5;

  if (*(_DWORD *)(a2 + 192) || !*(_BYTE *)(a2 + 184))
  {
    v5 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)>::operator()((uint64_t *)(a1 + 24), (uint64_t *)&v5);
  }
  else
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v4 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if (v5)
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v5);
      _Unwind_Resume(v4);
    }
    v2 = (uint64_t *)(a1 + 24);
    WebKit::WebExtensionContext::getTab(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 8), 0, &v5);
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)>::operator()(v2, (uint64_t *)&v5);
  }
  result = v5;
  if (v5)
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v5);
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197763CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  _QWORD *v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF *v35;

  v1 = *a1;
  if (*a1)
  {
    v2 = *(_DWORD *)(v1 - 4);
    v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      v4 = v2 << (6 * v3 >= 2 * v2);
      goto LABEL_6;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(24 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    v7 = 0;
    v8 = v2;
    do
    {
      v9 = (uint64_t *)(v1 + 24 * v7);
      v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (_QWORD *)(v15 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = v15 + 24 * v22;
          v28 = *(WTF **)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          if (v28)
          {
            *v27 = 0;
            *(_DWORD *)(v15 + 24 * v22 + 16) = 0;
            WTF::fastFree(v26, v6);
            v10 = *v9;
          }
          *v23 = v10;
          v29 = v1 + 24 * v7;
          *v27 = 0;
          v27[1] = 0;
          v31 = *(_QWORD *)(v29 + 8);
          v30 = v29 + 8;
          *(_QWORD *)v30 = 0;
          *v27 = v31;
          v32 = *(_DWORD *)(v30 + 8);
          *(_DWORD *)(v30 + 8) = 0;
          v33 = v15 + 24 * v24;
          *(_DWORD *)(v33 + 16) = v32;
          v34 = *(_DWORD *)(v30 + 12);
          *(_DWORD *)(v30 + 12) = 0;
          *(_DWORD *)(v33 + 20) = v34;
          v35 = *(WTF **)v30;
          if (*(_QWORD *)v30)
          {
            *(_QWORD *)v30 = 0;
            *(_DWORD *)(v30 + 8) = 0;
            WTF::fastFree(v35, v6);
          }
        }
        else
        {
          v11 = v1 + 24 * v7;
          v14 = *(WTF **)(v11 + 8);
          v13 = (_QWORD *)(v11 + 8);
          v12 = v14;
          if (v14)
          {
            *v13 = 0;
            *(_DWORD *)(v1 + 24 * v7 + 16) = 0;
            WTF::fastFree(v12, v6);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  else if (!v1)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v1 - 16), v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F84F0;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F84F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v4[0] = a1 + 96;
  v4[1] = &v3;
  v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v4[4] = a1 + 48;
  v4[5] = a1 + 88;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v1, 41, (uint64_t)v4);
}

uint64_t *WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  uint64_t *v25;
  uint64_t *result;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  IPC::Encoder *v34;

  WebKit::WebExtensionContext::processes((char *)a1, a2, 0, (uint64_t *)&v31);
  v28 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v31);
    v7 = v6;
    v8 = v4;
    v9 = v31 ? &v31[*((unsigned int *)v31 - 1)] : 0;
    if (v9 != v6)
    {
      v27 = v9;
      do
      {
        v30 = *v7;
        v10 = *(_BYTE **)a3;
        v11 = *(uint64_t **)(a3 + 8);
        v12 = *(uint64_t **)(a3 + 16);
        v13 = *(uint64_t **)(a3 + 24);
        v15 = *(uint64_t **)(a3 + 32);
        v14 = *(uint64_t **)(a3 + 40);
        v16 = *(_QWORD *)(v28 + 32);
        v17 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v17 = 1590;
        *(_QWORD *)(v17 + 8) = v16;
        *(_QWORD *)(v17 + 528) = v17 + 16;
        *(_QWORD *)(v17 + 536) = v17 + 16;
        *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v17 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
        v34 = (IPC::Encoder *)v17;
        LOBYTE(v10) = *v10;
        *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = (char)v10;
        v18 = *v11;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v18;
        v19 = *v12;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v19;
        v20 = *v13;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v20;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v15);
        IPC::ArgumentCoder<WTF::Seconds,void>::encode((IPC::Encoder *)v17, v14);
        LOBYTE(v32) = 0;
        v33 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v30, &v34, 0, (uint64_t)&v32, 1);
        if (v33)
        {
          v21 = v32;
          v32 = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
        v22 = v34;
        v34 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v4);
          WTF::fastFree(v23, v24);
        }
        if (++v7 == v8)
        {
          v7 = v8;
          v25 = v27;
        }
        else
        {
          v25 = v27;
          while ((unint64_t)(*v7 + 1) <= 1)
          {
            if (++v7 == v8)
            {
              v7 = v8;
              break;
            }
          }
        }
      }
      while (v7 != v25);
    }
  }
  result = v31;
  if (v31)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v31, v4);
  return result;
}

void sub_19776425C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, char a19, IPC::Encoder *a20)
{
  if (a16)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a16, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (v10 == a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return *(_QWORD *)(v2 + 16 * v9 + 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didCommitLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F8518;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didCommitLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8518;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didCommitLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v9 = a1 + 96;
  v3 = a1 + 32;
  v4 = a1 + 40;
  v5 = a1 + 48;
  v6 = a1 + 88;
  v10 = &v8;
  v11 = a1 + 32;
  v12 = a1 + 40;
  v13 = a1 + 48;
  v14 = a1 + 88;
  WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v2, 42, (uint64_t)&v9);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v9 = a1 + 97;
  v10 = &v8;
  v11 = v3;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v2, 44, (uint64_t)&v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFinishLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F8540;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFinishLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8540;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFinishLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v4[0] = a1 + 96;
  v4[1] = &v3;
  v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v4[4] = a1 + 48;
  v4[5] = a1 + 88;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v1, 43, (uint64_t)v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFailLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34F8568;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFailLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F8568;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFailLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v4[0] = a1 + 96;
  v4[1] = &v3;
  v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v4[4] = a1 + 48;
  v4[5] = a1 + 88;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v1, 45, (uint64_t)v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F8590;
  WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F8590;
  WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v19, *(_BYTE **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes((char *)v2, &v19, 0, (uint64_t *)&v20);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v6 = v5;
    v7 = v3;
    v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v2 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1596;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v23 = (IPC::Encoder *)v11;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v18;
        v12 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v12;
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v11, (WebCore::ResourceRequest *)(a1 + 56));
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v11, (_QWORD *)(a1 + 256));
        LOBYTE(v21) = 0;
        v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          v13 = v21;
          v21 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v20;
  if (v20)
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  if (v19)
    return (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), v3);
  return result;
}

void sub_1977649B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a14, a2);
  if (a13)
    WTF::fastFree((WTF *)(a13 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34F85B8;
  WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34F85B8;
  WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0((_QWORD *)a1 + 1);
  return WTF::fastFree(a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v19, *(_BYTE **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes((char *)v2, &v19, 0, (uint64_t *)&v20);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v6 = v5;
    v7 = v3;
    v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v2 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1593;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v23 = (IPC::Encoder *)v11;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v18;
        v12 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v12;
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v11, (WebCore::ResourceResponseBase *)(a1 + 56));
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v11, (_QWORD *)(a1 + 312));
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v11, (WebCore::ResourceRequest *)(a1 + 432));
        LOBYTE(v21) = 0;
        v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          v13 = v21;
          v21 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v20;
  if (v20)
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  if (v19)
    return (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), v3);
  return result;
}

void sub_197764C88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a14, a2);
  if (a13)
    WTF::fastFree((WTF *)(a13 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F85E0;
  WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F85E0;
  WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v19, *(_BYTE **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes((char *)v2, &v19, 0, (uint64_t *)&v20);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v6 = v5;
    v7 = v3;
    v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v2 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1594;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v23 = (IPC::Encoder *)v11;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v18;
        v12 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v12;
        IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode((IPC::Encoder *)v11, (WebCore::AuthenticationChallengeBase *)(a1 + 56));
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v11, (_QWORD *)(a1 + 488));
        LOBYTE(v21) = 0;
        v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          v13 = v21;
          v21 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v20;
  if (v20)
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  if (v19)
    return (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), v3);
  return result;
}

void sub_197764F4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a14, a2);
  if (a13)
    WTF::fastFree((WTF *)(a13 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F8608;
  WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F8608;
  WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v19, *(_BYTE **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes((char *)v2, &v19, 0, (uint64_t *)&v20);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v6 = v5;
    v7 = v3;
    v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v2 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1595;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v23 = (IPC::Encoder *)v11;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v18;
        v12 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v12;
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v11, (WebCore::ResourceResponseBase *)(a1 + 56));
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v11, (_QWORD *)(a1 + 312));
        LOBYTE(v21) = 0;
        v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          v13 = v21;
          v21 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v20;
  if (v20)
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  if (v19)
    return (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), v3);
  return result;
}

void sub_197765210(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a14, a2);
  if (a13)
    WTF::fastFree((WTF *)(a13 - 16), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34F8630;
  WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34F8630;
  WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *result;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v19, *(_BYTE **)(a1 + 24), *(_QWORD *)(a1 + 32));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes((char *)v2, &v19, 0, (uint64_t *)&v20);
  v4 = *(_QWORD *)(v2 + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v20);
    v6 = v5;
    v7 = v3;
    v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        v9 = *v6;
        v10 = *(_QWORD *)(v2 + 32);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1592;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v23 = (IPC::Encoder *)v11;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v18;
        v12 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v12;
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v11, (WebCore::ResourceResponseBase *)(a1 + 56));
        IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v11, (WebCore::ResourceError *)(a1 + 312));
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v11, (_QWORD *)(a1 + 392));
        LOBYTE(v21) = 0;
        v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          v13 = v21;
          v21 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v23;
        v23 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  result = v20;
  if (v20)
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  if (v19)
    return (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), v3);
  return result;
}

void sub_1977654E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a14, a2);
  if (a13)
    WTF::fastFree((WTF *)(a13 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  int v14;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_19;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v3 + 16 * v6;
      if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v9 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v10 = *(_DWORD *)(v9 - 12);
      else
        v10 = 0;
      *(_DWORD *)(v9 - 12) = v10 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v11 = *(_DWORD *)(v3 - 4);
      if (v11 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v11)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v13 = 0;
          goto LABEL_23;
        }
LABEL_20:
        v13 = *(_DWORD *)(v3 - 12);
        v14 = 0x7FFFFFFF;
        if (v13 >= 0x7FFFFFFF)
          goto LABEL_24;
        goto LABEL_23;
      }
LABEL_19:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_20;
    }
  }
  v13 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_23:
  v14 = v13;
LABEL_24:
  *(_DWORD *)(a1 + 12) = 2 * v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

void WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      v6 = a1;
      WTF::fastFree((WTF *)v2, a2);
      a1 = v6;
    }
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unsigned int **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = v20 + 16 * v27;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v30)
          {
            CFRelease(*(CFTypeRef *)(v30 + 8));
            v31 = *(unsigned int **)v29;
            *(_QWORD *)v29 = 0;
            if (v31)
            {
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v10);
              }
            }
          }
          else
          {
            *(_QWORD *)v29 = 0;
          }
          v34 = *v14;
          *v14 = 0;
          *(_QWORD *)v29 = v34;
          v35 = v6 + 16 * v11;
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          *(_QWORD *)(v29 + 8) = v36;
          v37 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v37)
            CFRelease(*(CFTypeRef *)(v37 + 8));
          v38 = *v14;
          *v14 = 0;
          if (v38)
          {
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v38);
              WTF::fastFree((WTF *)v38, v10);
            }
          }
          if (v14 == a3)
            v12 = v29;
        }
        else
        {
          v16 = v6 + 16 * v11;
          v17 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            CFRelease(*(CFTypeRef *)(v17 + 8));
            v15 = *v14;
          }
          *v14 = 0;
          if (v15)
          {
            do
            {
              v18 = __ldaxr(v15);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v15));
            if (!v19)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if (!(_DWORD)v4)
      goto LABEL_24;
    v5 = 0;
    do
    {
      LODWORD(v4) = v4 - 1;
      v6 = (uint64_t *)(v3 + 16 * v4);
      v7 = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
      {
        *v6 = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          WTF::fastFree((WTF *)v7, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while ((_DWORD)v4);
    v3 = *(_QWORD *)a1;
    v4 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v18 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13)
            goto LABEL_35;
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_33:
          v21 = (double)v13;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_36;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_33;
LABEL_35:
        v21 = (double)v13;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_36:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_28;
        }
LABEL_25:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_24:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v4 = 0;
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
  v16 = v15;
LABEL_29:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v4;
}

uint64_t *WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int i;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (uint64_t *)*a2;
  v13 = ~(*a2 << 32) + *a2;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (uint64_t **)(v8 + 16 * v18);
    v20 = *v19;
    if (*v19 != (uint64_t *)-1)
      break;
    v11 = (uint64_t **)(v8 + 16 * v18);
LABEL_10:
    v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v12 = (uint64_t *)*a2;
      v19 = v11;
    }
    *a2 = 0;
    result = *v19;
    *v19 = v12;
    if (result)
    {
      do
      {
        v23 = __ldaxr((unsigned int *)result);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, (unsigned int *)result));
      if (!v24)
      {
        atomic_store(1u, (unsigned int *)result);
        v25 = v19;
        result = (uint64_t *)WTF::fastFree((WTF *)result, v19);
        v19 = v25;
      }
    }
    v19[1] = *a3;
    v21 = *v6;
    if (*v6)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v27 = *v6;
    if (*v6)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
      {
LABEL_29:
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, (unsigned int **)v19);
        v19 = (uint64_t **)result;
        v27 = *v6;
        if (*v6)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
      }
    }
    else if (3 * v30 <= 4 * v29)
    {
      goto LABEL_29;
    }
    *(_QWORD *)a4 = v19;
    *(_QWORD *)(a4 + 8) = v27 + 16 * v30;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (v20 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(v8 + 16 * v18 + 8) = *a3;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::AddTabPageIdentifier>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1566;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197765EBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  v4 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2[2]);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::relatedWebView(void)::$_0,void,WebKit::WebPageProxy &,BOOL &>::call(uint64_t a1, WebKit::WebPageProxy *this, _BYTE *a3)
{
  uint64_t v5;
  CFTypeRef v6;
  void **v7;
  void *v8;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(this, &cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(void ***)(a1 + 8);
  v8 = *v7;
  *v7 = (void *)v5;

  *a3 = 1;
}

void sub_197765FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadBackgroundContent(WTF::CompletionHandler<void ()(NSError *)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F8680;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadBackgroundContent(WTF::CompletionHandler<void ()(NSError *)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F8680;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadBackgroundContent(WTF::CompletionHandler<void ()(NSError *)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)(a1 + 24))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(*(_QWORD *)(a1 + 8) + 312));
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v4 = (id)v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  }
}

void sub_197766120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (_QWORD *)(v15 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = (_QWORD *)(v15 + 24 * v22 + 8);
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          v27 = *v23;
          *v23 = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          v28 = *v12;
          *v12 = 0;
          *v23 = v28;
          v29 = v4 + 24 * v9;
          *v25 = 0;
          v25[1] = 0;
          v30 = *(_QWORD *)(v29 + 8);
          v29 += 8;
          *(_QWORD *)v29 = 0;
          *v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          v32 = *v12;
          *v12 = 0;
          if (v32)
            CFRelease(*(CFTypeRef *)(v32 + 8));
          if (v12 == a3)
            v10 = v23;
        }
        else
        {
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
            CFRelease(*(CFTypeRef *)(v14 + 8));
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

WTF *WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)a1;
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        CFRelease(*(CFTypeRef *)(v7 + 8));
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
}

uint64_t WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)v3;
  CFRetain(*(CFTypeRef *)(*(_QWORD *)v3 + 8));
  *(_QWORD *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::addDeclarativeNetRequestRulesToPrivateUserContentControllers(void)::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F86A8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::addDeclarativeNetRequestRulesToPrivateUserContentControllers(void)::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F86A8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::addDeclarativeNetRequestRulesToPrivateUserContentControllers(void)::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::call(uint64_t a1, CFTypeRef **a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  WebKit::WebUserContentControllerProxy *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (_QWORD *)(v5 + 136);
        WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v5 + 136), &v18);
        v7 = *v6;
        if (*v6)
        {
          v8 = *(unsigned int *)(v7 - 4);
          v9 = v7 + 8 * v8;
        }
        else
        {
          v9 = 0;
          v8 = 0;
        }
        v13 = v6;
        v14 = v9;
        v15 = v9;
        v16 = v9;
        v17 = v7 + 8 * v8;
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
        for (i = v19; v19 != v14; i = v19)
        {
          v11 = *(_QWORD *)(*(_QWORD *)i + 8);
          if (v11)
            v12 = (WebKit::WebUserContentControllerProxy *)(v11 - 16);
          else
            v12 = 0;
          WebKit::WebUserContentControllerProxy::addContentRuleList(v12, (API::ContentRuleList *)v2, (const WTF::URL *)(v3 + 72));
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
        }
      }
    }
    CFRelease(v2[1]);
  }
}

void sub_1977665A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebExtension *v3;
  int v4;
  int v5;
  double v6;
  double v7;
  void *v11;
  int v12;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  char v94;
  _QWORD *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  WTF::StringImpl *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  _QWORD *v127;
  uint64_t v128;
  void *v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int16 v134;
  char v135;
  unint64_t v136;
  char v137;
  _QWORD *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  double *v146;
  uint64_t v147;
  double v148;
  unint64_t v149;
  char v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  char v158;
  _QWORD *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  unint64_t v169;
  char v170;
  _QWORD *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  void *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  char v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  unsigned __int16 v196;
  unsigned __int8 v197;
  unsigned __int16 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  char v204;
  uint64_t v205;
  unsigned __int16 v206;
  unsigned __int8 v207;
  unsigned __int16 v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  NSString *v231;
  unint64_t v232;
  char v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  WTF::StringImpl *v245;
  unint64_t v246;
  WTF::StringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  unint64_t v258;
  void *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  WTF::StringImpl *v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  WTF::StringImpl *v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  unint64_t v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  unsigned __int16 v281;
  unsigned __int8 v282;
  unsigned __int16 v283;
  unsigned __int8 v284;
  unint64_t v285;
  char v286;
  uint64_t v287;
  unint64_t v288;
  char v289;
  uint64_t v290;
  _QWORD *v291;
  WTF::StringImpl *v292;
  unint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  unint64_t v297;
  char v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  int v307;
  uint64_t v308;
  int v309;
  _QWORD *v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  WTF::StringImpl *v321;
  uint64_t v322;
  uint64_t v323;
  WTF::StringImpl *v324;
  _QWORD *v325;
  unsigned __int16 v326;
  unsigned __int8 v327;
  unsigned __int16 v328;
  unsigned __int8 v329;
  unint64_t v330;
  char v331;
  uint64_t v332;
  int v333;
  _QWORD *v334;
  unint64_t v335;
  char v336;
  _QWORD *v337;
  uint64_t v338;
  _QWORD *v339;
  unint64_t v340;
  char v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  void *v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  void *v362;
  _QWORD *v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  _BYTE *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  char v389;
  uint64_t v390;
  unsigned __int16 v391;
  unsigned __int8 v392;
  WTF::StringImpl *v393;
  unint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  char v403;
  uint64_t v404;
  unsigned __int16 v405;
  unint64_t v406;
  char v407;
  uint64_t v408;
  unsigned __int16 v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unsigned __int8 *v413;
  unsigned int v414;
  unsigned __int8 v415;
  unint64_t v416;
  char v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  unint64_t v421;
  char v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unsigned __int8 *v427;
  unsigned int v428;
  __int16 v429;
  uint64_t v430;
  char v431;
  unint64_t v432;
  char v433;
  _QWORD *v434;
  uint64_t v435;
  unsigned __int8 v436;
  unint64_t v437;
  char v438;
  _QWORD *v439;
  uint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  char v443;
  unint64_t v444;
  WTF::StringImpl *v445;
  char v446;
  WTF::StringImpl *v447;
  _QWORD *v448;
  WTF *v449;
  uint64_t v450;
  unint64_t v451;
  void *v452;
  _QWORD *v453;
  uint64_t v454;
  void *v455;
  WTF *v456;
  _QWORD *v457;
  WTF::StringImpl *v458;
  unint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  _QWORD *v462;
  unint64_t v463;
  char v464;
  unint64_t v465;
  WTF::StringImpl *v466;
  char v467;
  _QWORD *v468;
  unint64_t v469;
  char v470;
  unint64_t v471;
  void *v472;
  uint64_t v473;
  int v474;
  _QWORD *v475;
  unint64_t v476;
  char v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  char v481;
  _QWORD *v482;
  unint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  unint64_t v487;
  char v488;
  _QWORD *v489;
  uint64_t v490;
  _QWORD *v491;
  unint64_t v492;
  char v493;
  uint64_t v494;
  unint64_t v495;
  char v496;
  _QWORD *v497;
  uint64_t v498;
  _QWORD *v499;
  unint64_t v500;
  char v501;
  unint64_t v502;
  unint64_t v503;
  char v504;
  unint64_t v505;
  WTF::StringImpl *v506;
  char v507;
  WTF::StringImpl *v508;
  _QWORD *v509;
  unint64_t v510;
  char v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  double *v516;
  double v517;
  uint64_t v518;
  char v519;
  unint64_t v520;
  char v521;
  _QWORD *v522;
  uint64_t v523;
  _QWORD *v524;
  unint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  char v530;
  uint64_t v531;
  unint64_t v532;
  char v533;
  _QWORD *v534;
  uint64_t v535;
  _QWORD *v536;
  unint64_t v537;
  char v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  unsigned __int8 *v543;
  unsigned int v544;
  uint64_t v545;
  char v546;
  unint64_t v547;
  char v548;
  _QWORD *v549;
  uint64_t v550;
  _QWORD *v551;
  unint64_t v552;
  char v553;
  uint64_t v554;
  unint64_t v555;
  char v556;
  _QWORD *v557;
  uint64_t v558;
  _QWORD *v559;
  unint64_t v560;
  char v561;
  _QWORD *v562;
  uint64_t v563;
  _QWORD *v564;
  unint64_t v565;
  char v566;
  _QWORD *v567;
  uint64_t v568;
  _QWORD *v569;
  unint64_t v570;
  char v571;
  _QWORD *v572;
  uint64_t v573;
  _QWORD *v574;
  unint64_t v575;
  char v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  unint64_t v581;
  char v582;
  uint64_t v583;
  unint64_t v584;
  char v585;
  uint64_t v586;
  unint64_t v587;
  char v588;
  _QWORD *v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  void *v596;
  uint64_t v597;
  int v598;
  _QWORD *v599;
  unint64_t v600;
  char v601;
  uint64_t v602;
  unint64_t v603;
  char v604;
  _QWORD *v605;
  uint64_t v606;
  _QWORD *v607;
  uint64_t v608;
  __int16 v609;
  unint64_t v610;
  char v611;
  _QWORD *v612;
  uint64_t v613;
  _QWORD *v614;
  uint64_t v615;
  __int16 v616;
  unint64_t v617;
  char v618;
  _QWORD *v619;
  uint64_t v620;
  _QWORD *v621;
  unint64_t v622;
  char v623;
  uint64_t v624;
  unint64_t v625;
  char v626;
  uint64_t v627;
  unsigned __int16 v628;
  unsigned __int8 v629;
  unsigned __int16 v630;
  _QWORD *v631;
  unint64_t v632;
  char v633;
  uint64_t v634;
  void *v635;
  int v636;
  unint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  uint64_t v640;
  WTF::StringImpl *v641;
  unint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  uint64_t v645;
  WTF::StringImpl *v646;
  unint64_t v647;
  _QWORD *v648;
  uint64_t v649;
  uint64_t v650;
  WTF::StringImpl *v651;
  WTF::StringImpl *v652;
  WTF::StringImpl *v653;
  unint64_t v654;
  WTF::StringImpl *v655;
  _QWORD *v656;
  uint64_t v657;
  uint64_t v658;
  WTF::StringImpl *v659;
  WTF::StringImpl *v660;
  unint64_t v661;
  WTF::StringImpl *v662;
  _QWORD *v663;
  uint64_t v664;
  __int128 v665;
  WTF::StringImpl *v666;
  uint64_t v667;
  WTF::StringImpl *v668;
  unint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  void *v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  _BYTE *v678;
  unint64_t v679;
  _QWORD *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  char v684;
  unint64_t v685;
  char v686;
  _QWORD *v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  WTF::StringImpl *v728[2];
  uint64_t v729;
  _BYTE v730[24];
  __int128 v731;
  uint64_t v732;
  _BYTE v733[152];
  __int128 v734;
  _BYTE v735[26];
  char v736;
  WTF::StringImpl *v737;
  WTF::StringImpl *v738;
  char v739;
  char v740;
  char v741;
  char v742;
  __int128 v743;
  _BYTE v744[80];
  __int128 v745;
  __int128 v746;
  __int128 v747;
  _BYTE v748[26];
  char v749;
  char v750;

  CFRetain(this[1]);
  v12 = *((unsigned __int16 *)a3 + 25);
  if (v12 == 1603)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[32])
        goto LABEL_772;
      v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v14)
        goto LABEL_772;
      *(_QWORD *)&v743 = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v15 = off_1E34F86D0;
      v15[1] = v743;
      v16 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v15[2] = v16;
      *(_QWORD *)v730 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionGetTitle((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (uint64_t *)v730);
LABEL_63:
      v56 = *(_QWORD *)v730;
      *(_QWORD *)v730 = 0;
      if (v56)
      {
LABEL_64:
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        goto LABEL_772;
      }
      goto LABEL_772;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1609)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[40])
        goto LABEL_772;
      v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if ((_BYTE)v18)
      {
        *(_QWORD *)&v743 = v17;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v19 = off_1E34F86F8;
        v19[1] = v743;
        v20 = *((_QWORD *)&v743 + 1);
        *((_QWORD *)&v743 + 1) = 0;
        v19[2] = v20;
        *(_QWORD *)v730 = v19;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
        WebKit::WebExtensionContext::actionSetTitle((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (WTF::StringImpl **)&v733[32], (uint64_t *)v730);
        goto LABEL_51;
      }
LABEL_54:
      v51 = *(WTF::StringImpl **)&v733[32];
      *(_QWORD *)&v733[32] = 0;
      if (!v51)
        goto LABEL_772;
      goto LABEL_55;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1607)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[40])
        goto LABEL_772;
      v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v18)
        goto LABEL_54;
      *(_QWORD *)&v743 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v22 = off_1E34F8720;
      v22[1] = v743;
      v23 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v22[2] = v23;
      *(_QWORD *)v730 = v22;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionSetIcon((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], &v733[32], (uint64_t *)v730);
      goto LABEL_51;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1602)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[32])
        goto LABEL_772;
      v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v25)
        goto LABEL_772;
      *(_QWORD *)&v743 = v24;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v26 = off_1E34F8748;
      v26[1] = v743;
      v27 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v26[2] = v27;
      *(_QWORD *)v730 = v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionGetPopup((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (uint64_t *)v730);
      goto LABEL_63;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1608)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[40])
        goto LABEL_772;
      v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v18)
        goto LABEL_54;
      *(_QWORD *)&v743 = v28;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v29 = off_1E34F8770;
      v29[1] = v743;
      v30 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v29[2] = v30;
      *(_QWORD *)v730 = v29;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionSetPopup((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (WTF::StringImpl **)&v733[32], (uint64_t *)v730);
      goto LABEL_51;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1604)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v32)
      {
        v33 = v31;
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v743);
        if (v744[0])
        {
          *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v733));
          if (v733[16])
          {
            if (v744[0])
            {
              v35 = v743;
              v36 = BYTE8(v743);
              v37 = *(_QWORD *)v733;
              v38 = v733[8];
              v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!v40)
                goto LABEL_772;
              *(_QWORD *)v733 = v39;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
              v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v41 = off_1E34F8798;
              v41[1] = *(_QWORD *)v733;
              v42 = *(_QWORD *)&v733[8];
              *(_QWORD *)&v733[8] = 0;
              v41[2] = v42;
              *(_QWORD *)&v743 = v41;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
              WebKit::WebExtensionContext::actionOpenPopup((uint64_t)this, v33, v35, v36, v37, v38, (uint64_t *)&v743);
              goto LABEL_275;
            }
LABEL_945:
            __break(1u);
LABEL_946:
            WTF::StringImpl::destroy(v34, v18);
LABEL_947:
            if (!v733[80])
              goto LABEL_772;
            v51 = *(WTF::StringImpl **)&v733[40];
            *(_QWORD *)&v733[40] = 0;
            if (!v51)
              goto LABEL_772;
            goto LABEL_55;
          }
        }
      }
      goto LABEL_354;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1600)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[32])
        goto LABEL_772;
      v43 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v44)
        goto LABEL_772;
      *(_QWORD *)&v743 = v43;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v45 = off_1E34F87C0;
      v45[1] = v743;
      v46 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v45[2] = v46;
      *(_QWORD *)v730 = v45;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionGetBadgeText((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (uint64_t *)v730);
      goto LABEL_63;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1605)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[40])
        goto LABEL_772;
      v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v18)
        goto LABEL_54;
      *(_QWORD *)&v743 = v47;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v48 = off_1E34F87E8;
      v48[1] = v743;
      v49 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v48[2] = v49;
      *(_QWORD *)v730 = v48;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionSetBadgeText((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (WTF::StringImpl **)&v733[32], (uint64_t *)v730);
LABEL_51:
      v50 = *(_QWORD *)v730;
      *(_QWORD *)v730 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
LABEL_53:
      if (!v733[40])
        goto LABEL_772;
      goto LABEL_54;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1601)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
      if (!v733[32])
        goto LABEL_772;
      v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v53)
        goto LABEL_772;
      *(_QWORD *)&v743 = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v54 = off_1E34F8810;
      v54[1] = v743;
      v55 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v54[2] = v55;
      *(_QWORD *)v730 = v54;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
      WebKit::WebExtensionContext::actionGetEnabled((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], *(uint64_t *)&v733[16], v733[24], (uint64_t *)v730);
      goto LABEL_63;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1606)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v733);
      if (!v733[16])
        goto LABEL_354;
      v57 = *((_QWORD *)a3 + 1);
      v58 = *(_QWORD *)a3;
      v59 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v57 <= v59)
      {
        v236 = 0;
        v237 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v238 = *((_QWORD *)a3 + 3);
        if (v238)
        {
          if (v57)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v238 + 16))(v238);
            v237 = *(_QWORD *)a3;
            v236 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v236 = 0;
            v237 = 0;
          }
        }
      }
      else
      {
        v60 = (unsigned __int8 *)(v58 + v59);
        *((_QWORD *)a3 + 2) = v60 + 1;
        if (v58)
        {
          v61 = *v60;
          if (v61 < 2)
          {
            v62 = *(_QWORD *)v733;
            v63 = v733[8];
            v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v65)
              goto LABEL_772;
            *(_QWORD *)v733 = v64;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
            v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v66 = off_1E34F8838;
            v66[1] = *(_QWORD *)v733;
            v67 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v733[8] = 0;
            v66[2] = v67;
            *(_QWORD *)&v743 = v66;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
            WebKit::WebExtensionContext::actionSetEnabled((WebKit::WebExtensionContext *)this, v62, v63, v61 != 0, (uint64_t *)&v743);
            goto LABEL_275;
          }
          goto LABEL_353;
        }
        v236 = v57;
        v237 = 0;
      }
      v57 = 0;
      v58 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v239 = *((_QWORD *)a3 + 3);
      if (v239)
      {
        if (v236)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v239 + 16))(v239, v237, v236);
          v58 = *(_QWORD *)a3;
          v57 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v57 = 0;
          v58 = 0;
        }
      }
LABEL_353:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v240 = *((_QWORD *)a3 + 3);
      if (v240 && v57)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v240 + 16))(v240, v58);
      goto LABEL_354;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1613)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v743);
      if (BYTE8(v743))
      {
        v68 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a3);
        if ((_BYTE)v18
          && (v69 = *(double *)&v68,
              *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a3)),
              (_BYTE)v18))
        {
          if (!BYTE8(v743))
            goto LABEL_945;
          v70 = 0;
          v71 = v743;
          *(_QWORD *)&v743 = 0;
          *(_QWORD *)v733 = v71;
          *(double *)&v733[8] = v69;
          *(_QWORD *)&v733[16] = v34;
          v7 = v69;
          v6 = *(double *)&v34;
          v72 = 1;
        }
        else
        {
          v72 = 0;
          v733[0] = 0;
          v70 = 1;
        }
        v733[24] = v72;
        if (BYTE8(v743))
        {
          v88 = (WTF::StringImpl *)v743;
          *(_QWORD *)&v743 = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
              WTF::StringImpl::destroy(v88, v18);
            else
              *(_DWORD *)v88 -= 2;
          }
        }
        if (!v70)
          goto LABEL_128;
      }
      else
      {
        v72 = 0;
        v733[0] = 0;
        v733[24] = 0;
      }
      v89 = *(_QWORD *)a3;
      v90 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v91 = *((_QWORD *)a3 + 3);
      if (v91 && v90)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v89);
LABEL_128:
      if (!v72)
        goto LABEL_772;
      WebKit::WebExtensionContext::alarmsCreate((uint64_t)this, (WTF::StringImpl **)v733, v7, v6);
      goto LABEL_130;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1614)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v733);
      if (!v733[8])
        goto LABEL_772;
      v73 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v18)
        goto LABEL_98;
      *(_QWORD *)&v743 = v73;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v74 = off_1E34F8860;
      v74[1] = v743;
      v75 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v74[2] = v75;
      *(_QWORD *)v730 = v74;
      *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
      if (!v733[8])
        goto LABEL_945;
      WebKit::WebExtensionContext::alarmsGet((uint64_t)this, (WTF::StringImpl **)v733, (const WTF::StringImpl *)v730);
      goto LABEL_96;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1611)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v733);
      if (!v733[8])
        goto LABEL_772;
      v76 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v18)
        goto LABEL_98;
      *(_QWORD *)&v743 = v76;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
      v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v77 = off_1E34F8888;
      v77[1] = v743;
      v78 = *((_QWORD *)&v743 + 1);
      *((_QWORD *)&v743 + 1) = 0;
      v77[2] = v78;
      *(_QWORD *)v730 = v77;
      *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
      if (!v733[8])
        goto LABEL_945;
      WebKit::WebExtensionContext::alarmsClear((uint64_t)this, (WTF::StringImpl **)v733, (const WTF::StringImpl *)v730);
      goto LABEL_96;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1615)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      v80 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v81)
        goto LABEL_772;
      *(_QWORD *)v733 = v80;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
      v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v82 = off_1E34F88B0;
      v82[1] = *(_QWORD *)v733;
      v83 = *(_QWORD *)&v733[8];
      *(_QWORD *)&v733[8] = 0;
      v82[2] = v83;
      *(_QWORD *)&v743 = v82;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
      WebKit::WebExtensionContext::alarmsGetAll((uint64_t)this, (uint64_t *)&v743);
      goto LABEL_275;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1612)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      v84 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v85)
        goto LABEL_772;
      *(_QWORD *)v733 = v84;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
      v86 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v86 = off_1E34F88D8;
      v86[1] = *(_QWORD *)v733;
      v87 = *(_QWORD *)&v733[8];
      *(_QWORD *)&v733[8] = 0;
      v86[2] = v87;
      *(_QWORD *)&v743 = v86;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
      WebKit::WebExtensionContext::alarmsClearAll((uint64_t)this, (WTF::StringImpl *)&v743);
      goto LABEL_275;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1616)
  {
    v92 = this[8];
    if (!v92 || !v92[1])
      goto LABEL_772;
    v3 = (WebKit::WebExtension *)this[7];
    WebKit::WebExtension::populateCommandsIfNeeded(v3);
    if (*((_DWORD *)v3 + 17))
    {
      v93 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v94)
        goto LABEL_772;
      *(_QWORD *)v733 = v93;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
      v95 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v95 = off_1E34F8900;
      v95[1] = *(_QWORD *)v733;
      v96 = *(_QWORD *)&v733[8];
      *(_QWORD *)&v733[8] = 0;
      v95[2] = v96;
      *(_QWORD *)&v743 = v95;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
      WebKit::WebExtensionContext::commandsGetAll((WebKit::WebExtensionContext *)this, (uint64_t *)&v743);
      goto LABEL_275;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 == 1617)
  {
    if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>>((uint64_t)v733, (uint64_t *)a3);
      if (v733[64])
      {
        v98 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if ((_BYTE)v97)
        {
          *(_QWORD *)&v743 = v98;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
          v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v99 = off_1E34F8928;
          v99[1] = v743;
          v100 = *((_QWORD *)&v743 + 1);
          *((_QWORD *)&v743 + 1) = 0;
          v99[2] = v100;
          *(_QWORD *)v730 = v99;
          *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
          if (!v733[64])
            goto LABEL_945;
          WebKit::WebExtensionContext::cookiesGet((uint64_t)this, *(const void **)v733, v733[8], (WTF::StringImpl *)&v733[16], (uint64_t)&v733[24], (uint64_t *)v730);
LABEL_173:
          v120 = *(_QWORD *)v730;
          *(_QWORD *)v730 = 0;
          if (v120)
            (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
          goto LABEL_175;
        }
      }
      goto LABEL_175;
    }
    v12 = *((unsigned __int16 *)a3 + 25);
  }
  if (v12 != 1618)
  {
LABEL_155:
    v107 = (WTF::StringImpl *)v733;
    if (v12 == 1621)
    {
      if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::optional<PAL::SessionID>>((uint64_t *)a3, v730);
        if (v730[16])
        {
          IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>((uint64_t *)a3, (uint64_t)&v743);
          if (v748[8])
          {
            if (!v730[16])
              goto LABEL_945;
            v108 = *(_OWORD *)v744;
            *(_OWORD *)v733 = *(_OWORD *)v730;
            *(_OWORD *)&v733[16] = v743;
            v109 = *(_OWORD *)&v744[16];
            memset(v744, 0, 32);
            *(_OWORD *)&v733[32] = v108;
            *(_OWORD *)&v733[48] = v109;
            *(_OWORD *)&v733[64] = *(_OWORD *)&v744[32];
            *(_OWORD *)&v733[75] = *(_OWORD *)&v744[43];
            v110 = *(_OWORD *)&v744[64];
            *(_OWORD *)&v744[64] = 0u;
            *(_OWORD *)&v733[96] = v110;
            *(_OWORD *)&v733[112] = v745;
            *(_OWORD *)&v733[128] = v746;
            LODWORD(v745) = v745 & 0xFFFFFFFE;
            v111 = *((_QWORD *)&v747 + 1);
            *(_QWORD *)&v733[144] = v747;
            v747 = 0uLL;
            *(_QWORD *)&v734 = v111;
            BYTE8(v734) = v748[0];
            v735[0] = 1;
            WebCore::Cookie::~Cookie((WebCore::Cookie *)v744, v18);
            v112 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v113)
            {
              *(_QWORD *)&v743 = v112;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v114 = off_1E34F8978;
              v114[1] = v743;
              v115 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v114[2] = v115;
              *(_QWORD *)v730 = v114;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v735[0])
                goto LABEL_945;
              WebKit::WebExtensionContext::cookiesSet((uint64_t)this, *(const void **)v733, v733[8], (__int128 *)&v733[16], (uint64_t *)v730);
              v116 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v116)
                (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
              if (!v735[0])
                goto LABEL_772;
            }
            WebCore::Cookie::~Cookie((WebCore::Cookie *)&v733[32], v113);
            goto LABEL_772;
          }
        }
        goto LABEL_354;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1620)
    {
      if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>>((uint64_t)v733, (uint64_t *)a3);
        if (v733[64])
        {
          v117 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if ((_BYTE)v97)
          {
            *(_QWORD *)&v743 = v117;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v118 = off_1E34F89A0;
            v118[1] = v743;
            v119 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v118[2] = v119;
            *(_QWORD *)v730 = v118;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[64])
              goto LABEL_945;
            WebKit::WebExtensionContext::cookiesRemove((uint64_t)this, *(const void **)v733, v733[8], (WTF::StringImpl **)&v733[16], (uint64_t)&v733[24], (uint64_t *)v730);
            goto LABEL_173;
          }
        }
LABEL_175:
        std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v97);
        goto LABEL_772;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1619)
    {
      if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        v121 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!v122)
          goto LABEL_772;
        *(_QWORD *)v733 = v121;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
        v123 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v123 = off_1E34F89C8;
        v123[1] = *(_QWORD *)v733;
        v124 = *(_QWORD *)&v733[8];
        *(_QWORD *)&v733[8] = 0;
        v123[2] = v124;
        *(_QWORD *)&v743 = v123;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
        WebKit::WebExtensionContext::cookiesGetAllCookieStores((uint64_t)this, (uint64_t *)&v743);
        goto LABEL_275;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1624)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        v125 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!v126)
          goto LABEL_772;
        *(_QWORD *)v733 = v125;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
        v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v127 = off_1E34F89F0;
        v127[1] = *(_QWORD *)v733;
        v128 = *(_QWORD *)&v733[8];
        *(_QWORD *)&v733[8] = 0;
        v127[2] = v128;
        *(_QWORD *)&v743 = v127;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
        WebKit::WebExtensionContext::declarativeNetRequestGetEnabledRulesets((uint64_t)this, (uint64_t *)&v743);
        goto LABEL_275;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1629)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, v11, v733);
        if (v733[32])
        {
          v130 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if ((_BYTE)v129)
          {
            *(_QWORD *)&v743 = v130;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v131 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v131 = off_1E34F8A18;
            v131[1] = v743;
            v132 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v131[2] = v132;
            *(_QWORD *)v730 = v131;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[32])
              goto LABEL_945;
            WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets((uint64_t)this, (uint64_t)v733, (uint64_t)&v733[16], (uint64_t *)v730);
            v133 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v133)
              (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
          }
        }
        std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v129);
        goto LABEL_772;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1622)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        v134 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
        if (v134 < 0x100u)
          goto LABEL_772;
        v135 = v134;
        v136 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!v137)
          goto LABEL_772;
        *(_QWORD *)v733 = v136;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
        v138 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v138 = off_1E34F8A40;
        v138[1] = *(_QWORD *)v733;
        v139 = *(_QWORD *)&v733[8];
        *(_QWORD *)&v733[8] = 0;
        v138[2] = v139;
        *(_QWORD *)&v743 = v138;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
        WebKit::WebExtensionContext::declarativeNetRequestDisplayActionCountAsBadgeText((uint64_t *)this, v135 != 0, (uint64_t *)&v743);
        goto LABEL_275;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1627)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        v141 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v142)
        {
          v143 = *((_QWORD *)a3 + 1);
          v144 = *(_QWORD *)a3;
          v145 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
          if (v143 < v145 || v143 - v145 <= 7)
          {
            v380 = 0;
            v381 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v382 = *((_QWORD *)a3 + 3);
            if (v382)
            {
              if (v143)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v382 + 16))(v382);
                v381 = *(_QWORD *)a3;
                v380 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v380 = 0;
                v381 = 0;
              }
            }
          }
          else
          {
            v146 = (double *)(v144 + v145);
            *((_QWORD *)a3 + 2) = v146 + 1;
            if (v144)
            {
              v147 = v141;
              v148 = *v146;
              v149 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!v150)
                goto LABEL_772;
              *(_QWORD *)v733 = v149;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
              v151 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v151 = off_1E34F8A68;
              v151[1] = *(_QWORD *)v733;
              v152 = *(_QWORD *)&v733[8];
              *(_QWORD *)&v733[8] = 0;
              v151[2] = v152;
              *(_QWORD *)&v743 = v151;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
              WebKit::WebExtensionContext::declarativeNetRequestIncrementActionCount((uint64_t *)this, v147, (uint64_t *)&v743, v148);
              goto LABEL_275;
            }
            v380 = v143;
            v381 = 0;
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v383 = *((_QWORD *)a3 + 3);
          if (v383 && v380)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v383 + 16))(v383, v381);
        }
        goto LABEL_354;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1625)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v743);
        if (v744[0])
        {
          *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<std::optional<WTF::WallTime>>((uint64_t *)a3, v733));
          if (v733[16])
          {
            if (v744[0])
            {
              v153 = v743;
              v154 = BYTE8(v743);
              v155 = *(_QWORD *)v733;
              v156 = v733[8];
              v157 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!v158)
                goto LABEL_772;
              *(_QWORD *)v733 = v157;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
              v159 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v159 = off_1E34F8A90;
              v159[1] = *(_QWORD *)v733;
              v160 = *(_QWORD *)&v733[8];
              *(_QWORD *)&v733[8] = 0;
              v159[2] = v160;
              *(_QWORD *)&v743 = v159;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
              WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules((uint64_t)this, v153, v154, v155, v156, (uint64_t *)&v743);
              goto LABEL_275;
            }
            goto LABEL_945;
          }
        }
        goto LABEL_354;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1623)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        v169 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!v170)
          goto LABEL_772;
        *(_QWORD *)v733 = v169;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
        v171 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v171 = off_1E34F8AB8;
        v171[1] = *(_QWORD *)v733;
        v172 = *(_QWORD *)&v733[8];
        *(_QWORD *)&v733[8] = 0;
        v171[2] = v172;
        *(_QWORD *)&v743 = v171;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
        WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(this, (uint64_t *)&v743);
        goto LABEL_275;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1628)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
        if (v733[24])
        {
          v176 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if ((_BYTE)v175)
          {
            *(_QWORD *)&v743 = v176;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v177 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v177 = off_1E34F8AE0;
            v177[1] = v743;
            v178 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v177[2] = v178;
            *(_QWORD *)v730 = v177;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[24])
              goto LABEL_945;
            WebKit::WebExtensionContext::declarativeNetRequestUpdateDynamicRules((WebKit::WebExtensionContext *)this, v733, (uint64_t)&v733[8], (uint64_t *)v730);
LABEL_284:
            v186 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v186)
              (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
            goto LABEL_286;
          }
        }
        goto LABEL_286;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1626)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        v179 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!v180)
          goto LABEL_772;
        *(_QWORD *)v733 = v179;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
        v181 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v181 = off_1E34F8B08;
        v181[1] = *(_QWORD *)v733;
        v182 = *(_QWORD *)&v733[8];
        *(_QWORD *)&v733[8] = 0;
        v181[2] = v182;
        *(_QWORD *)&v743 = v181;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
        WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(this, (uint64_t *)&v743);
        goto LABEL_275;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 == 1630)
    {
      if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
        if (v733[24])
        {
          v183 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if ((_BYTE)v175)
          {
            *(_QWORD *)&v743 = v183;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v184 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v184 = off_1E34F8B30;
            v184[1] = v743;
            v185 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v184[2] = v185;
            *(_QWORD *)v730 = v184;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[24])
              goto LABEL_945;
            WebKit::WebExtensionContext::declarativeNetRequestUpdateSessionRules((uint64_t *)this, v733, (uint64_t)&v733[8], (uint64_t *)v730);
            goto LABEL_284;
          }
        }
LABEL_286:
        std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v175);
        goto LABEL_772;
      }
      v12 = *((unsigned __int16 *)a3 + 25);
    }
    if (v12 > 1631)
    {
      if (v12 == 1632)
      {
        if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>((uint64_t *)a3, (uint64_t)v733);
          if (v733[120])
          {
            v210 = *(_QWORD *)v733;
            *(_QWORD *)v733 = 0;
            *(_QWORD *)&v743 = v210;
            BYTE8(v743) = 0;
            v744[0] = 0;
            if (v733[16])
            {
              v211 = *(_QWORD *)&v733[8];
              *(_QWORD *)&v733[8] = 0;
              *((_QWORD *)&v743 + 1) = v211;
              v744[0] = 1;
            }
            *(_WORD *)&v744[8] = *(_WORD *)&v733[24];
            v212 = *(_OWORD *)&v733[32];
            memset(&v733[32], 0, 24);
            *(_OWORD *)&v744[16] = v212;
            *(_QWORD *)&v744[32] = *(_QWORD *)&v733[48];
            *(_DWORD *)&v744[40] = *(_DWORD *)&v733[56];
            *(_WORD *)&v744[44] = *(_WORD *)&v733[60];
            v744[48] = 0;
            v744[64] = 0;
            if (v733[80])
            {
              *(_QWORD *)&v744[48] = *(_QWORD *)&v733[64];
              v213 = *(_QWORD *)&v733[72];
              *(_QWORD *)&v733[64] = 0;
              *(_QWORD *)&v733[72] = 0;
              *(_QWORD *)&v744[56] = v213;
              v744[64] = 1;
            }
            v744[72] = 0;
            BYTE8(v745) = 0;
            if (v733[104])
            {
              *(_QWORD *)&v744[72] = *(_QWORD *)&v733[88];
              v214 = *(_QWORD *)&v733[96];
              *(_QWORD *)&v733[88] = 0;
              *(_QWORD *)&v733[96] = 0;
              *(_QWORD *)&v745 = v214;
              BYTE8(v745) = 1;
            }
            LODWORD(v746) = *(_DWORD *)&v733[112];
            BYTE8(v746) = 1;
            WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v733, v209);
            v215 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v216)
            {
              *(_QWORD *)v733 = v215;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
              v217 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v217 = off_1E34F8B80;
              v217[1] = *(_QWORD *)v733;
              v218 = *(_QWORD *)&v733[8];
              *(_QWORD *)&v733[8] = 0;
              v217[2] = v218;
              *(_QWORD *)v730 = v217;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]));
              if (!BYTE8(v746))
                goto LABEL_945;
              WebKit::WebExtensionContext::menusCreate((uint64_t)this, (uint64_t)&v743, (const WTF::StringImpl *)v730);
              v219 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v219)
                (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
              if (!BYTE8(v746))
                goto LABEL_772;
            }
            WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v743, v216);
            goto LABEL_772;
          }
          goto LABEL_354;
        }
        v12 = *((unsigned __int16 *)a3 + 25);
        goto LABEL_327;
      }
      if (v12 != 1642)
        goto LABEL_327;
      v192 = this[8];
      if (!v192 || !v192[1])
        goto LABEL_772;
      v193 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v194)
      {
        v195 = v193;
        v196 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
        if (v196 >= 0x100u)
        {
          v197 = v196;
          v198 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
          if (v198 >= 0x100u)
          {
            v254 = *((_QWORD *)a3 + 1);
            v255 = *(_QWORD *)a3;
            v256 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
            if (v254 < v256 || v254 - v256 <= 7)
            {
              v591 = 0;
              v592 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v593 = *((_QWORD *)a3 + 3);
              if (v593)
              {
                if (v254)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v593 + 16))(v593);
                  v592 = *(_QWORD *)a3;
                  v591 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v591 = 0;
                  v592 = 0;
                }
              }
            }
            else
            {
              v257 = (uint64_t *)(v255 + v256);
              *((_QWORD *)a3 + 2) = v257 + 1;
              if (v255)
              {
                WebKit::WebExtensionContext::removeListener((uint64_t)this, v195, v197, v198, *v257);
                goto LABEL_772;
              }
              v591 = v254;
              v592 = 0;
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v594 = *((_QWORD *)a3 + 3);
            if (v594 && v591)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v594 + 16))(v594, v592);
          }
        }
      }
      v199 = *(_QWORD *)a3;
      v200 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v201 = *((_QWORD *)a3 + 3);
      if (!v201)
        goto LABEL_772;
    }
    else
    {
      if (v12 != 1610)
      {
        if (v12 == 1631)
        {
          v187 = this[8];
          if (!v187)
            goto LABEL_772;
          if (!v187[1])
            goto LABEL_772;
          v188 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (!v189)
            goto LABEL_772;
          *(_QWORD *)v733 = v188;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
          v190 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v190 = off_1E34F8B58;
          v190[1] = *(_QWORD *)v733;
          v191 = *(_QWORD *)&v733[8];
          *(_QWORD *)&v733[8] = 0;
          v190[2] = v191;
          *(_QWORD *)&v743 = v190;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
          WebKit::WebExtensionContext::extensionIsAllowedIncognitoAccess((uint64_t)this, (uint64_t *)&v743);
LABEL_275:
          v56 = v743;
          *(_QWORD *)&v743 = 0;
          if (!v56)
            goto LABEL_772;
          goto LABEL_64;
        }
LABEL_327:
        if (v12 == 1635)
        {
          if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
          {
            IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v730);
            if (v730[8])
            {
              IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>((uint64_t *)a3, (uint64_t)&v743);
              v220 = BYTE8(v746);
              if (BYTE8(v746))
              {
                if (!v730[8])
                  goto LABEL_945;
                v221 = *(_QWORD *)v730;
                *(_QWORD *)v730 = 0;
                v222 = v743;
                *(_QWORD *)&v743 = 0;
                *(_QWORD *)v733 = v221;
                *(_QWORD *)&v733[8] = v222;
                v733[16] = 0;
                v733[24] = 0;
                if (v744[0])
                {
                  v223 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = 0;
                  *(_QWORD *)&v733[16] = v223;
                  v733[24] = 1;
                }
                *(_WORD *)&v733[32] = *(_WORD *)&v744[8];
                v224 = *(_OWORD *)&v744[16];
                memset(&v744[16], 0, 24);
                *(_OWORD *)&v733[40] = v224;
                *(_QWORD *)&v733[56] = *(_QWORD *)&v744[32];
                *(_DWORD *)&v733[64] = *(_DWORD *)&v744[40];
                *(_WORD *)&v733[68] = *(_WORD *)&v744[44];
                v733[72] = 0;
                v733[88] = 0;
                if (v744[64])
                {
                  *(_QWORD *)&v733[72] = *(_QWORD *)&v744[48];
                  v225 = *(_QWORD *)&v744[56];
                  *(_QWORD *)&v744[48] = 0;
                  *(_QWORD *)&v744[56] = 0;
                  *(_QWORD *)&v733[80] = v225;
                  v733[88] = 1;
                }
                v733[96] = 0;
                v733[112] = 0;
                if (BYTE8(v745))
                {
                  *(_QWORD *)&v733[96] = *(_QWORD *)&v744[72];
                  v226 = v745;
                  *(_QWORD *)&v744[72] = 0;
                  *(_QWORD *)&v745 = 0;
                  *(_QWORD *)&v733[104] = v226;
                  v733[112] = 1;
                }
                *(_DWORD *)&v733[120] = v746;
                v227 = 1;
                v733[128] = 1;
                WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v743, v18);
              }
              else
              {
                v227 = 0;
                v733[0] = 0;
                v733[128] = 0;
              }
              if (v730[8])
              {
                v253 = *(WTF::StringImpl **)v730;
                *(_QWORD *)v730 = 0;
                if (v253)
                {
                  if (*(_DWORD *)v253 == 2)
                    WTF::StringImpl::destroy(v253, v18);
                  else
                    *(_DWORD *)v253 -= 2;
                }
              }
              if (v220)
                goto LABEL_380;
            }
            else
            {
              v227 = 0;
              v733[0] = 0;
              v733[128] = 0;
            }
            v250 = *(_QWORD *)a3;
            v251 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v252 = *((_QWORD *)a3 + 3);
            if (v252 && v251)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v252 + 16))(v252, v250);
LABEL_380:
            if (!v227)
              goto LABEL_772;
            v258 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v259)
            {
              *(_QWORD *)&v743 = v258;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v260 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v260 = off_1E34F8BA8;
              v260[1] = v743;
              v261 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v260[2] = v261;
              *(_QWORD *)v730 = v260;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v733[128])
                goto LABEL_945;
              WebKit::WebExtensionContext::menusUpdate((uint64_t *)this, (WTF::StringImpl **)v733, (uint64_t)&v733[8], (NSString *)v730);
              v262 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v262)
                (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
              if (!v733[128])
                goto LABEL_772;
            }
            WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v733[8], v259);
            goto LABEL_131;
          }
          v12 = *((unsigned __int16 *)a3 + 25);
        }
        if (v12 == 1633)
        {
          if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
          {
            IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v733);
            if (!v733[8])
              goto LABEL_772;
            v228 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v18)
              goto LABEL_98;
            *(_QWORD *)&v743 = v228;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v229 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v229 = off_1E34F8BD0;
            v229[1] = v743;
            v230 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v229[2] = v230;
            *(_QWORD *)v730 = v229;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[8])
              goto LABEL_945;
            WebKit::WebExtensionContext::menusRemove((uint64_t)this, (WTF::StringImpl **)v733, (const WTF::StringImpl *)v730, v231);
LABEL_96:
            v79 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v79)
              (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
LABEL_98:
            if (!v733[8])
              goto LABEL_772;
            goto LABEL_131;
          }
          v12 = *((unsigned __int16 *)a3 + 25);
        }
        if (v12 == 1634)
        {
          if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
          {
            v232 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v233)
              goto LABEL_772;
            *(_QWORD *)v733 = v232;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
            v234 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v234 = off_1E34F8BF8;
            v234[1] = *(_QWORD *)v733;
            v235 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v733[8] = 0;
            v234[2] = v235;
            *(_QWORD *)&v743 = v234;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
            WebKit::WebExtensionContext::menusRemoveAll((uint64_t)this, (uint64_t *)&v743);
            goto LABEL_275;
          }
          v12 = *((unsigned __int16 *)a3 + 25);
        }
        switch(v12)
        {
          case 1636:
            v244 = this[8];
            if (!v244 || !v244[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v733, a3);
            if (!v733[16])
              goto LABEL_467;
            v246 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v245)
              goto LABEL_467;
            *(_QWORD *)&v743 = v246;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v247 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v247 = off_1E34F8C48;
            *((_QWORD *)v247 + 1) = v743;
            v248 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            *((_QWORD *)v247 + 2) = v248;
            v728[0] = v247;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
            v249 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v743 = *(_QWORD *)v733;
            *(_QWORD *)v733 = 0;
            *(_QWORD *)&v733[8] = 0;
            *(_QWORD *)v730 = v249;
            WebKit::WebExtensionContext::permissionsContains((uint64_t *)this, (_QWORD **)&v743, (_QWORD **)v730, (uint64_t *)v728);
            goto LABEL_461;
          case 1637:
            v296 = this[8];
            if (!v296)
              goto LABEL_772;
            if (!v296[1])
              goto LABEL_772;
            v297 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v298)
              goto LABEL_772;
            *(_QWORD *)v733 = v297;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
            v299 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v299 = off_1E34F8C20;
            v299[1] = *(_QWORD *)v733;
            v300 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v733[8] = 0;
            v299[2] = v300;
            *(_QWORD *)&v743 = v299;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
            WebKit::WebExtensionContext::permissionsGetAll((WebKit::WebExtensionContext *)this, (uint64_t *)&v743);
            goto LABEL_275;
          case 1638:
            v275 = this[8];
            if (!v275 || !v275[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v733, a3);
            if (!v733[16])
              goto LABEL_467;
            v276 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v245)
              goto LABEL_467;
            *(_QWORD *)&v743 = v276;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v277 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v277 = off_1E34F8C98;
            *((_QWORD *)v277 + 1) = v743;
            v278 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            *((_QWORD *)v277 + 2) = v278;
            v728[0] = v277;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
            v279 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v743 = *(_QWORD *)v733;
            *(_QWORD *)v733 = 0;
            *(_QWORD *)&v733[8] = 0;
            *(_QWORD *)v730 = v279;
            WebKit::WebExtensionContext::permissionsRemove((uint64_t)this, (uint64_t *)&v743, (_QWORD **)v730, (uint64_t *)v728);
            goto LABEL_461;
          case 1639:
            v319 = this[8];
            if (!v319 || !v319[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v733, a3);
            if (!v733[16])
              goto LABEL_467;
            v320 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v245)
              goto LABEL_467;
            *(_QWORD *)&v743 = v320;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v321 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v321 = off_1E34F8C70;
            *((_QWORD *)v321 + 1) = v743;
            v322 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            *((_QWORD *)v321 + 2) = v322;
            v728[0] = v321;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
            v323 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v743 = *(_QWORD *)v733;
            *(_QWORD *)v733 = 0;
            *(_QWORD *)&v733[8] = 0;
            *(_QWORD *)v730 = v323;
            WebKit::WebExtensionContext::permissionsRequest((uint64_t)this, (_QWORD **)&v743, (_QWORD **)v730, (uint64_t *)v728);
LABEL_461:
            if (*(_QWORD *)v730)
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v730, v245);
            if ((_QWORD)v743)
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v743, v245);
            v324 = v728[0];
            v728[0] = 0;
            if (v324)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v324 + 8))(v324);
LABEL_467:
            std::__optional_destruct_base<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v245);
            goto LABEL_772;
          case 1640:
            v325 = this[8];
            if (!v325 || !v325[1])
              goto LABEL_772;
            v326 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
            if (v326 < 0x100u)
              goto LABEL_354;
            v327 = v326;
            v328 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
            if (v328 < 0x100u)
              goto LABEL_354;
            v329 = v328;
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v743);
            if (!v744[0])
              goto LABEL_354;
            v330 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v331)
              goto LABEL_354;
            v332 = v330;
            *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v730));
            if (!v730[8])
              goto LABEL_354;
            if (!v744[0])
              goto LABEL_945;
            v733[0] = v327;
            v733[1] = v329;
            *(_QWORD *)&v733[16] = *((_QWORD *)&v743 + 1);
            *(_QWORD *)&v733[24] = v332;
            *(_QWORD *)&v733[32] = *(_QWORD *)v730;
            v733[40] = 1;
            WebKit::WebExtensionContext::portPostMessage((uint64_t)this, v327, v329, v743, *((uint64_t *)&v743 + 1), v332, &v733[32], v333, v727, (uint64_t)v728[0], (uint64_t)v728[1], v729, *(uint64_t *)v730, *(uint64_t *)&v730[8], *(uint64_t *)&v730[16], v731, SDWORD2(v731), v732, *(__int16 *)v733,
              v743);
            goto LABEL_53;
          case 1641:
            v280 = this[8];
            if (!v280 || !v280[1])
              goto LABEL_772;
            v281 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
            if (v281 >= 0x100u)
            {
              v282 = v281;
              v283 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
              if (v283 >= 0x100u)
              {
                v284 = v283;
                v285 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (v286)
                {
                  v287 = v285;
                  v288 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v289)
                  {
                    v290 = v288;
                    WebKit::WebExtensionContext::removePort((uint64_t)this, v282, v284, v288, v287);
                    WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded((uint64_t)this, v282, v284, v290);
                    goto LABEL_772;
                  }
                }
              }
            }
            v199 = *(_QWORD *)a3;
            v200 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v201 = *((_QWORD *)a3 + 3);
            if (v201)
              goto LABEL_310;
            goto LABEL_772;
          case 1643:
            v301 = this[8];
            if (!v301 || !v301[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v733, (uint64_t *)a3);
            if (!v740)
              goto LABEL_434;
            v302 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v264)
              goto LABEL_434;
            *(_QWORD *)&v743 = v302;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v303 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v303 = off_1E34F8D38;
            v303[1] = v743;
            v304 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v303[2] = v304;
            *(_QWORD *)v730 = v303;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v740)
              goto LABEL_945;
            WebKit::WebExtensionContext::runtimeConnect((uint64_t)this, (const WTF::StringImpl **)v733, *(uint64_t *)&v733[8], (WTF::StringImpl **)&v733[16], (uint64_t)&v733[24], (WTF::StringImpl **)v730);
            goto LABEL_432;
          case 1644:
            v306 = this[8];
            if (!v306 || !v306[1])
              goto LABEL_772;
            IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v743);
            if (BYTE8(v743))
            {
              v3 = (WebKit::WebExtension *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if ((_BYTE)v18
                && (*(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3)),
                    (_BYTE)v18))
              {
                if (!BYTE8(v743))
                  goto LABEL_945;
                v107 = v34;
                v307 = 0;
                v308 = v743;
                *(_QWORD *)&v743 = 0;
                *(_QWORD *)v733 = v308;
                *(_QWORD *)&v733[8] = v3;
                *(_QWORD *)&v733[16] = v34;
                v309 = 1;
              }
              else
              {
                v309 = 0;
                v733[0] = 0;
                v307 = 1;
              }
              v733[24] = v309;
              if (BYTE8(v743))
              {
                v365 = (WTF::StringImpl *)v743;
                *(_QWORD *)&v743 = 0;
                if (v365)
                {
                  if (*(_DWORD *)v365 == 2)
                    WTF::StringImpl::destroy(v365, v18);
                  else
                    *(_DWORD *)v365 -= 2;
                }
              }
              if (!v307)
              {
LABEL_571:
                if (!v309)
                  goto LABEL_772;
                v384 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)v18)
                {
                  *(_QWORD *)&v743 = v384;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                  v385 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v385 = off_1E34F8D88;
                  v385[1] = v743;
                  v386 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = 0;
                  v385[2] = v386;
                  *(_QWORD *)v730 = v385;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                  WebKit::WebExtensionContext::runtimeConnectNative((uint64_t)this, (WTF::StringImpl **)v733, (uint64_t)v3, v107, (uint64_t *)v730);
                  v387 = *(_QWORD *)v730;
                  *(_QWORD *)v730 = 0;
                  if (v387)
                    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
LABEL_130:
                  if (!v733[24])
                    goto LABEL_772;
                }
LABEL_131:
                v51 = *(WTF::StringImpl **)v733;
                *(_QWORD *)v733 = 0;
                if (!v51)
                  goto LABEL_772;
LABEL_55:
                if (*(_DWORD *)v51 != 2)
                {
                  *(_DWORD *)v51 -= 2;
                  goto LABEL_772;
                }
                goto LABEL_771;
              }
            }
            else
            {
              v309 = 0;
              v733[0] = 0;
              v733[24] = 0;
            }
            v366 = *(_QWORD *)a3;
            v367 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v368 = *((_QWORD *)a3 + 3);
            if (v368 && v367)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v368 + 16))(v368, v366);
            goto LABEL_571;
          case 1645:
            v339 = this[8];
            if (!v339)
              goto LABEL_772;
            if (!v339[1])
              goto LABEL_772;
            v340 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v341)
              goto LABEL_772;
            *(_QWORD *)v733 = v340;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
            v342 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v342 = off_1E34F8CC0;
            v342[1] = *(_QWORD *)v733;
            v343 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v733[8] = 0;
            v342[2] = v343;
            *(_QWORD *)&v743 = v342;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
            WebKit::WebExtensionContext::runtimeGetBackgroundPage((uint64_t)this, (uint64_t *)&v743);
            goto LABEL_275;
          case 1646:
            v334 = this[8];
            if (!v334)
              goto LABEL_772;
            if (!v334[1])
              goto LABEL_772;
            v335 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v336)
              goto LABEL_772;
            *(_QWORD *)v733 = v335;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
            v337 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v337 = off_1E34F8CE8;
            v337[1] = *(_QWORD *)v733;
            v338 = *(_QWORD *)&v733[8];
            *(_QWORD *)&v733[8] = 0;
            v337[2] = v338;
            *(_QWORD *)&v743 = v337;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
            WebKit::WebExtensionContext::runtimeOpenOptionsPage((uint64_t)this, (uint64_t *)&v743);
            goto LABEL_275;
          case 1647:
            v268 = this[8];
            if (v268 && v268[1])
              WebKit::WebExtensionContext::reload((uint64_t)this, 0);
            goto LABEL_772;
          case 1648:
            v291 = this[8];
            if (!v291 || !v291[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v733, (uint64_t *)a3);
            if (!v739)
              goto LABEL_450;
            v293 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v292)
              goto LABEL_450;
            *(_QWORD *)&v743 = v293;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v294 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v294 = off_1E34F8D10;
            v294[1] = v743;
            v295 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v294[2] = v295;
            *(_QWORD *)v730 = v294;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v739)
              goto LABEL_945;
            WebKit::WebExtensionContext::runtimeSendMessage((uint64_t)this, (const WTF::StringImpl **)v733, (const WTF::StringImpl *)&v733[8], (uint64_t)&v733[16], (WTF::StringImpl **)v730);
            goto LABEL_448;
          case 1649:
            v269 = this[8];
            if (!v269 || !v269[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)a3, v733);
            if (!v733[16])
              goto LABEL_403;
            v271 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v270)
              goto LABEL_403;
            *(_QWORD *)&v743 = v271;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v272 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v272 = off_1E34F8D60;
            v272[1] = v743;
            v273 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v272[2] = v273;
            *(_QWORD *)v730 = v272;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[16])
              goto LABEL_945;
            WebKit::WebExtensionContext::runtimeSendNativeMessage((uint64_t)this, v733, &v733[8], (uint64_t *)v730);
            v274 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v274)
              (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
LABEL_403:
            std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v270);
            goto LABEL_772;
          case 1650:
            v263 = this[8];
            if (!v263 || !v263[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v733, (uint64_t *)a3);
            if (!v740)
              goto LABEL_434;
            v265 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v264)
              goto LABEL_434;
            *(_QWORD *)&v743 = v265;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v266 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v266 = off_1E34F8DD8;
            v266[1] = v743;
            v267 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v266[2] = v267;
            *(_QWORD *)v730 = v266;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v740)
              goto LABEL_945;
            WebKit::WebExtensionContext::runtimeWebPageConnect((uint64_t)this, (const WTF::StringImpl **)v733, *(uint64_t *)&v733[8], (WTF::StringImpl **)&v733[16], (uint64_t)&v733[24], (WTF::StringImpl **)v730);
LABEL_432:
            v305 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v305)
              (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
LABEL_434:
            std::__optional_destruct_base<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v264);
            goto LABEL_772;
          case 1651:
            v310 = this[8];
            if (!v310 || !v310[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v733, (uint64_t *)a3);
            if (!v739)
              goto LABEL_450;
            v311 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v292)
              goto LABEL_450;
            *(_QWORD *)&v743 = v311;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v312 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v312 = off_1E34F8DB0;
            v312[1] = v743;
            v313 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v312[2] = v313;
            *(_QWORD *)v730 = v312;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v739)
              goto LABEL_945;
            WebKit::WebExtensionContext::runtimeWebPageSendMessage((uint64_t)this, (const WTF::StringImpl **)v733, (WTF::StringImpl **)&v733[8], (uint64_t)&v733[16], (WTF::StringImpl **)v730);
LABEL_448:
            v314 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v314)
              (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
LABEL_450:
            std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v292);
            goto LABEL_772;
          case 1652:
            if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v733, (uint64_t *)a3);
              if (v733[136])
              {
                v316 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)v315)
                {
                  *(_QWORD *)&v743 = v316;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                  v317 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v317 = off_1E34F8E00;
                  v317[1] = v743;
                  v318 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = 0;
                  v317[2] = v318;
                  *(_QWORD *)v730 = v317;
                  *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                  if (!v733[136])
                    goto LABEL_945;
                  WebKit::WebExtensionContext::scriptingExecuteScript((uint64_t)this, (uint64_t)v733, (uint64_t *)v730);
LABEL_501:
                  v352 = *(_QWORD *)v730;
                  *(_QWORD *)v730 = 0;
                  if (v352)
                    (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
                  goto LABEL_503;
                }
              }
              goto LABEL_503;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
LABEL_486:
            if (v12 == 1654)
            {
              if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[136])
                {
                  v344 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if ((_BYTE)v315)
                  {
                    *(_QWORD *)&v743 = v344;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v345 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v345 = off_1E34F8E28;
                    v345[1] = v743;
                    v346 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v345[2] = v346;
                    *(_QWORD *)v730 = v345;
                    *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                    if (!v733[136])
                      goto LABEL_945;
                    WebKit::WebExtensionContext::scriptingInsertCSS((uint64_t)this, (uint64_t)v733, (uint64_t *)v730);
                    goto LABEL_501;
                  }
                }
LABEL_503:
                std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v315);
                goto LABEL_772;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 == 1656)
            {
              if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[136])
                {
                  v349 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if ((_BYTE)v315)
                  {
                    *(_QWORD *)&v743 = v349;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v350 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v350 = off_1E34F8E50;
                    v350[1] = v743;
                    v351 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v350[2] = v351;
                    *(_QWORD *)v730 = v350;
                    *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                    if (!v733[136])
                      goto LABEL_945;
                    WebKit::WebExtensionContext::scriptingRemoveCSS((uint64_t)this, (uint64_t)v733, (uint64_t *)v730);
                    goto LABEL_501;
                  }
                }
                goto LABEL_503;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 != 1655)
              goto LABEL_514;
            if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
              if (!v733[16])
                goto LABEL_772;
              v353 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!(_BYTE)v354)
                goto LABEL_523;
              *(_QWORD *)&v743 = v353;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v355 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v355 = off_1E34F8E78;
              v355[1] = v743;
              v356 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v355[2] = v356;
              *(_QWORD *)v730 = v355;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v733[16])
                goto LABEL_945;
              WebKit::WebExtensionContext::scriptingRegisterContentScripts(this, (uint64_t)v733, (uint64_t *)v730);
LABEL_520:
              v360 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v360)
                (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
              if (!v733[16])
                goto LABEL_772;
LABEL_523:
              WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v733, v354);
              goto LABEL_772;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
LABEL_514:
            if (v12 == 1658)
            {
              if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
                if (!v733[16])
                  goto LABEL_772;
                v357 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (!(_BYTE)v354)
                  goto LABEL_523;
                *(_QWORD *)&v743 = v357;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                v358 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v358 = off_1E34F8EA0;
                v358[1] = v743;
                v359 = *((_QWORD *)&v743 + 1);
                *((_QWORD *)&v743 + 1) = 0;
                v358[2] = v359;
                *(_QWORD *)v730 = v358;
                *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                if (!v733[16])
                  goto LABEL_945;
                WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts((uint64_t)this, (uint64_t)v733, (uint64_t *)v730);
                goto LABEL_520;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 != 1653)
              goto LABEL_541;
            if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, v11, (uint64_t)v733);
              if (!v733[16])
                goto LABEL_772;
              v361 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!(_BYTE)v362)
                goto LABEL_549;
              *(_QWORD *)&v743 = v361;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v363 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v363 = off_1E34F8EC8;
              v363[1] = v743;
              v364 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v363[2] = v364;
              *(_QWORD *)v730 = v363;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v733[16])
                goto LABEL_945;
              WebKit::WebExtensionContext::scriptingGetRegisteredScripts((uint64_t)this, (uint64_t)v733, (const WTF::StringImpl *)v730);
              goto LABEL_547;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
LABEL_541:
            if (v12 == 1657)
            {
              if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, v11, (uint64_t)v733);
                if (!v733[16])
                  goto LABEL_772;
                v369 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (!(_BYTE)v362)
                  goto LABEL_549;
                *(_QWORD *)&v743 = v369;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                v370 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v370 = off_1E34F8EF0;
                v370[1] = v743;
                v371 = *((_QWORD *)&v743 + 1);
                *((_QWORD *)&v743 + 1) = 0;
                v370[2] = v371;
                *(_QWORD *)v730 = v370;
                *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                if (!v733[16])
                  goto LABEL_945;
                WebKit::WebExtensionContext::scriptingUnregisterContentScripts((uint64_t)this, (uint64_t)v733, (uint64_t *)v730);
LABEL_547:
                v372 = *(_QWORD *)v730;
                *(_QWORD *)v730 = 0;
                if (v372)
                  (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
LABEL_549:
                if (!v733[16])
                  goto LABEL_772;
                v373 = v733;
LABEL_600:
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v373, v362);
                goto LABEL_772;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 != 1660)
              goto LABEL_559;
            if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
              if (!v733[32])
                goto LABEL_772;
              v374 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if ((_BYTE)v362)
              {
                *(_QWORD *)&v743 = v374;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                v375 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v375 = off_1E34F8F18;
                v375[1] = v743;
                v376 = *((_QWORD *)&v743 + 1);
                *((_QWORD *)&v743 + 1) = 0;
                v375[2] = v376;
                *(_QWORD *)v730 = v375;
                *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                if (!v733[32])
                  goto LABEL_945;
                WebKit::WebExtensionContext::storageGet((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], (uint64_t)&v733[16], (uint64_t *)v730);
LABEL_596:
                v401 = *(_QWORD *)v730;
                *(_QWORD *)v730 = 0;
                if (v401)
                  (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
                if (!v733[32])
                  goto LABEL_772;
                goto LABEL_599;
              }
              goto LABEL_599;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
LABEL_559:
            if (v12 == 1661)
            {
              if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
                if (!v733[32])
                  goto LABEL_772;
                v377 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)v362)
                {
                  *(_QWORD *)&v743 = v377;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                  v378 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v378 = off_1E34F8F40;
                  v378[1] = v743;
                  v379 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = 0;
                  v378[2] = v379;
                  *(_QWORD *)v730 = v378;
                  *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                  if (!v733[32])
                    goto LABEL_945;
                  WebKit::WebExtensionContext::storageGetBytesInUse((WebKit::WebExtensionContext *)this, *(uint64_t *)v733, v733[8], (uint64_t)&v733[16], (uint64_t *)v730);
                  goto LABEL_596;
                }
LABEL_599:
                v373 = &v733[16];
                goto LABEL_600;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 == 1663)
            {
              if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                v388 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (v389)
                {
                  v390 = v388;
                  v391 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a3);
                  if (v391 >= 0x100u)
                  {
                    v392 = v391;
                    IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v743);
                    if (BYTE8(v743))
                    {
                      *(_QWORD *)v733 = v390;
                      v733[8] = v392;
                      v393 = (WTF::StringImpl *)v743;
                      *(_QWORD *)&v733[16] = v743;
                      v733[24] = 1;
                      v394 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                      if ((_BYTE)v18)
                      {
                        *(_QWORD *)&v743 = v394;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                        v395 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                        *v395 = off_1E34F8F68;
                        v395[1] = v743;
                        v396 = *((_QWORD *)&v743 + 1);
                        *((_QWORD *)&v743 + 1) = 0;
                        v395[2] = v396;
                        *(_QWORD *)v730 = v395;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                        WebKit::WebExtensionContext::storageSet(this, v390, v392, &v733[16], (uint64_t *)v730);
                        v397 = *(_QWORD *)v730;
                        *(_QWORD *)v730 = 0;
                        if (v397)
                          (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
                        if (!v733[24])
                          goto LABEL_772;
                        v393 = *(WTF::StringImpl **)&v733[16];
                      }
                      *(_QWORD *)&v733[16] = 0;
                      if (!v393)
                        goto LABEL_772;
                      if (*(_DWORD *)v393 != 2)
                      {
                        *(_DWORD *)v393 -= 2;
                        goto LABEL_772;
                      }
                      v51 = v393;
LABEL_771:
                      WTF::StringImpl::destroy(v51, v18);
                      goto LABEL_772;
                    }
                  }
                }
                goto LABEL_354;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 == 1662)
            {
              if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v733, (uint64_t *)a3);
                if (!v733[32])
                  goto LABEL_772;
                v398 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)v362)
                {
                  *(_QWORD *)&v743 = v398;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                  v399 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v399 = off_1E34F8F90;
                  v399[1] = v743;
                  v400 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = 0;
                  v399[2] = v400;
                  *(_QWORD *)v730 = v399;
                  *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                  if (!v733[32])
                    goto LABEL_945;
                  WebKit::WebExtensionContext::storageRemove(this, *(uint64_t *)v733, v733[8], (uint64_t)&v733[16], (uint64_t *)v730);
                  goto LABEL_596;
                }
                goto LABEL_599;
              }
              v12 = *((unsigned __int16 *)a3 + 25);
            }
            if (v12 != 1659)
              goto LABEL_609;
            if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              v402 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (v403)
              {
                v404 = v402;
                v405 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a3);
                if (v405 > 0xFFu)
                {
                  v436 = v405;
                  v437 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (!v438)
                    goto LABEL_772;
                  *(_QWORD *)v733 = v437;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                  v439 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v439 = off_1E34F8FB8;
                  v439[1] = *(_QWORD *)v733;
                  v440 = *(_QWORD *)&v733[8];
                  *(_QWORD *)&v733[8] = 0;
                  v439[2] = v440;
                  *(_QWORD *)&v743 = v439;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                  WebKit::WebExtensionContext::storageClear(this, v404, v436, (uint64_t *)&v743);
                  goto LABEL_275;
                }
              }
              v241 = *(_QWORD *)a3;
              v242 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v243 = *((_QWORD *)a3 + 3);
              if (!v243)
                goto LABEL_772;
LABEL_355:
              if (v242)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 16))(v243, v241);
              goto LABEL_772;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
LABEL_609:
            if (v12 != 1664)
              break;
            if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              v406 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!v407)
                goto LABEL_967;
              v408 = v406;
              v409 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a3);
              if (v409 < 0x100u)
                goto LABEL_967;
              v410 = *((_QWORD *)a3 + 1);
              v411 = *(_QWORD *)a3;
              v412 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
              if (v410 <= v412)
              {
                v689 = 0;
                v690 = 0;
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v691 = *((_QWORD *)a3 + 3);
                if (v691)
                {
                  if (v410)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v691 + 16))(v691);
                    v690 = *(_QWORD *)a3;
                    v689 = *((_QWORD *)a3 + 1);
                  }
                  else
                  {
                    v689 = 0;
                    v690 = 0;
                  }
                }
              }
              else
              {
                v413 = (unsigned __int8 *)(v411 + v412);
                *((_QWORD *)a3 + 2) = v413 + 1;
                if (v411)
                {
                  v414 = *v413;
                  if (v414 < 2)
                  {
                    v415 = v409;
                    v416 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if (!v417)
                      goto LABEL_772;
                    *(_QWORD *)v733 = v416;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                    v418 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v418 = off_1E34F8FE0;
                    v418[1] = *(_QWORD *)v733;
                    v419 = *(_QWORD *)&v733[8];
                    *(_QWORD *)&v733[8] = 0;
                    v418[2] = v419;
                    *(_QWORD *)&v743 = v418;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                    WebKit::WebExtensionContext::storageSetAccessLevel((WebKit::WebExtensionContext *)this, v408, v415, v414, (uint64_t *)&v743);
                    goto LABEL_275;
                  }
                  goto LABEL_966;
                }
                v689 = v410;
                v690 = 0;
              }
              v410 = 0;
              v411 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v692 = *((_QWORD *)a3 + 3);
              if (v692)
              {
                if (v689)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v692 + 16))(v692, v690, v689);
                  v411 = *(_QWORD *)a3;
                  v410 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v410 = 0;
                  v411 = 0;
                }
              }
LABEL_966:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v693 = *((_QWORD *)a3 + 3);
              if (v693 && v410)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v693 + 16))(v693, v411);
LABEL_967:
              v241 = *(_QWORD *)a3;
              v242 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v243 = *((_QWORD *)a3 + 3);
              if (!v243)
                goto LABEL_772;
              goto LABEL_355;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
            break;
          default:
            goto LABEL_486;
        }
        switch(v12)
        {
          case 1665:
            v420 = this[8];
            if (!v420 || !v420[1])
              goto LABEL_772;
            v421 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v422)
              goto LABEL_1002;
            v423 = v421;
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v733);
            if (!v733[16])
              goto LABEL_1002;
            v424 = *((_QWORD *)a3 + 1);
            v425 = *(_QWORD *)a3;
            v426 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
            if (v424 <= v426)
            {
              v709 = 0;
              v710 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v711 = *((_QWORD *)a3 + 3);
              if (v711)
              {
                if (v424)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v711 + 16))(v711);
                  v710 = *(_QWORD *)a3;
                  v709 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v709 = 0;
                  v710 = 0;
                }
              }
            }
            else
            {
              v427 = (unsigned __int8 *)(v425 + v426);
              *((_QWORD *)a3 + 2) = v427 + 1;
              if (v425)
              {
                v428 = *v427;
                if (v428 < 2)
                {
                  if (v424 > (unint64_t)&v427[-v425 + 1])
                  {
                    *((_QWORD *)a3 + 2) = v427 + 2;
                    v429 = v427[1];
                    v430 = *(_QWORD *)v733;
                    v431 = v733[8];
                    v432 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if (v433)
                    {
                      *(_QWORD *)v733 = v432;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                      v434 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                      *v434 = off_1E34F91C0;
                      v434[1] = *(_QWORD *)v733;
                      v435 = *(_QWORD *)&v733[8];
                      *(_QWORD *)&v733[8] = 0;
                      v434[2] = v435;
                      *(_QWORD *)&v743 = v434;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                      WebKit::WebExtensionContext::tabsCaptureVisibleTab((uint64_t)this, v423, v430, v431, v428, v429, (uint64_t *)&v743);
                      goto LABEL_275;
                    }
                    goto LABEL_772;
                  }
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v723 = *((_QWORD *)a3 + 3);
                  if (!v723
                    || ((*(void (**)(uint64_t))(*(_QWORD *)v723 + 16))(v723),
                        v425 = *(_QWORD *)a3,
                        v424 = *((_QWORD *)a3 + 1),
                        v713 = *((_QWORD *)a3 + 3),
                        *(_QWORD *)a3 = 0,
                        *((_QWORD *)a3 + 1) = 0,
                        !v713))
                  {
LABEL_1002:
                    v199 = *(_QWORD *)a3;
                    v200 = *((_QWORD *)a3 + 1);
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    v201 = *((_QWORD *)a3 + 3);
                    if (v201)
                      goto LABEL_310;
                    goto LABEL_772;
                  }
LABEL_1017:
                  if (v424)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v713 + 16))(v713, v425);
                  goto LABEL_1002;
                }
LABEL_1001:
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v713 = *((_QWORD *)a3 + 3);
                if (!v713)
                  goto LABEL_1002;
                goto LABEL_1017;
              }
              v709 = v424;
              v710 = 0;
            }
            v424 = 0;
            v425 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v712 = *((_QWORD *)a3 + 3);
            if (v712)
            {
              if (v709)
              {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v712 + 16))(v712, v710, v709);
                v425 = *(_QWORD *)a3;
                v424 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v424 = 0;
                v425 = 0;
              }
            }
            goto LABEL_1001;
          case 1666:
            v499 = this[8];
            if (!v499 || !v499[1])
              goto LABEL_772;
            v500 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v501
              && (v502 = v500,
                  v503 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
                  v504))
            {
              v505 = v503;
              IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v728);
              if (LOBYTE(v728[1]))
              {
                IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v730);
                if (v730[16])
                {
                  *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>((uint64_t *)a3, (uint64_t)&v743));
                  v507 = v750;
                  if (v750)
                  {
                    if (!LOBYTE(v728[1]) || !v730[16])
                      goto LABEL_945;
                    *(_QWORD *)v733 = v502;
                    *(_QWORD *)&v733[8] = v505;
                    v508 = v728[0];
                    v728[0] = 0;
                    *(_QWORD *)&v733[16] = v508;
                    *(_OWORD *)&v733[24] = *(_OWORD *)v730;
                    std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v733[40], (uint64_t *)&v743);
                    v507 = 1;
                  }
                  else
                  {
                    v733[0] = 0;
                  }
                  v742 = v507;
                  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v743, v18);
                }
                else
                {
                  v733[0] = 0;
                  v742 = 0;
                }
                if (LOBYTE(v728[1]))
                {
                  v653 = v728[0];
                  v728[0] = 0;
                  if (v653)
                  {
                    if (*(_DWORD *)v653 == 2)
                      WTF::StringImpl::destroy(v653, v506);
                    else
                      *(_DWORD *)v653 -= 2;
                  }
                }
              }
              else
              {
                v733[0] = 0;
                v742 = 0;
              }
              if (v742)
                goto LABEL_908;
            }
            else
            {
              v733[0] = 0;
              v742 = 0;
            }
            v694 = *(_QWORD *)a3;
            v695 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v696 = *((_QWORD *)a3 + 3);
            if (!v696)
              goto LABEL_772;
            if (!v695)
              goto LABEL_772;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v696 + 16))(v696, v694);
            if (!v742)
              goto LABEL_772;
LABEL_908:
            v661 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v662)
            {
              *(_QWORD *)&v743 = v661;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v663 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v663 = off_1E34F9210;
              v663[1] = v743;
              v664 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v663[2] = v664;
              *(_QWORD *)v730 = v663;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v742)
                goto LABEL_945;
              v665 = *(_OWORD *)&v733[16];
              *(_QWORD *)&v733[16] = 0;
              *(_QWORD *)&v743 = v665;
              WebKit::WebExtensionContext::tabsConnect((uint64_t)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], (uint64_t)&v743, *((uint64_t *)&v665 + 1), *(uint64_t *)&v733[32], (uint64_t)&v733[40], (uint64_t *)v730);
              v666 = (WTF::StringImpl *)v743;
              *(_QWORD *)&v743 = 0;
              if (v666)
              {
                if (*(_DWORD *)v666 == 2)
                  WTF::StringImpl::destroy(v666, v662);
                else
                  *(_DWORD *)v666 -= 2;
              }
              v667 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v667)
                (*(void (**)(uint64_t))(*(_QWORD *)v667 + 8))(v667);
            }
            if (v742)
            {
              v668 = v738;
              v738 = 0;
              if (v668)
              {
                if (*(_DWORD *)v668 == 2)
                  WTF::StringImpl::destroy(v668, v662);
                else
                  *(_DWORD *)v668 -= 2;
              }
              std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v733[56], v662);
              if (v733[48])
              {
                v174 = *(WTF::StringImpl **)&v733[40];
                *(_QWORD *)&v733[40] = 0;
                if (v174)
                  goto LABEL_258;
              }
              goto LABEL_261;
            }
            goto LABEL_772;
          case 1667:
            v480 = this[8];
            if (!v480 || !v480[1])
              goto LABEL_772;
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v730);
            if (v730[16])
            {
              *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, &v743));
              v481 = v749;
              if (v749)
              {
                if (!v730[16])
                  goto LABEL_945;
                *(_OWORD *)v733 = *(_OWORD *)v730;
                std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)&v733[16], (uint64_t)&v743);
                v481 = 1;
              }
              else
              {
                v733[0] = 0;
              }
              v735[24] = v481;
              std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v743, v18);
              if (v735[24])
                goto LABEL_841;
            }
            else
            {
              v733[0] = 0;
              v735[24] = 0;
            }
            v703 = *(_QWORD *)a3;
            v704 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v705 = *((_QWORD *)a3 + 3);
            if (!v705)
              goto LABEL_772;
            if (!v704)
              goto LABEL_772;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v705 + 16))(v705, v703);
            if (!v735[24])
              goto LABEL_772;
LABEL_841:
            v642 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v18)
            {
              *(_QWORD *)&v743 = v642;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v643 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v643 = off_1E34F9008;
              v643[1] = v743;
              v644 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v643[2] = v644;
              *(_QWORD *)v730 = v643;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v735[24])
                goto LABEL_945;
              WebKit::WebExtensionContext::tabsCreate((uint64_t)this, *(uint64_t *)v733, v733[8], (uint64_t)&v733[16], (uint64_t *)v730);
              v645 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v645)
                (*(void (**)(uint64_t))(*(_QWORD *)v645 + 8))(v645);
            }
            if (v735[24])
            {
              if (v733[88])
              {
                v646 = *(WTF::StringImpl **)&v733[80];
                *(_QWORD *)&v733[80] = 0;
                if (v646)
                {
                  if (*(_DWORD *)v646 == 2)
                    WTF::StringImpl::destroy(v646, v18);
                  else
                    *(_DWORD *)v646 -= 2;
                }
              }
              if (v733[72])
                goto LABEL_54;
            }
            goto LABEL_772;
          case 1668:
            v486 = this[8];
            if (v486)
            {
              if (v486[1])
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[24])
                {
                  v487 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v488)
                  {
                    *(_QWORD *)&v743 = v487;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v489 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v489 = off_1E34F9170;
                    v489[1] = v743;
                    v490 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v489[2] = v490;
                    *(_QWORD *)v730 = v489;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                    WebKit::WebExtensionContext::tabsDetectLanguage((uint64_t *)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t *)v730);
                    goto LABEL_63;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1669:
            v462 = this[8];
            if (!v462 || !v462[1])
              goto LABEL_772;
            v463 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v464)
            {
              v465 = v463;
              IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, &v743);
              v467 = v749;
              if (v749)
              {
                *(_QWORD *)v733 = v465;
                std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)&v733[8], (uint64_t)&v743);
                v467 = 1;
              }
              else
              {
                v733[0] = 0;
              }
              v735[16] = v467;
              std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v743, v466);
              if (v735[16])
                goto LABEL_830;
            }
            else
            {
              v733[0] = 0;
              v735[16] = 0;
            }
            v700 = *(_QWORD *)a3;
            v701 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v702 = *((_QWORD *)a3 + 3);
            if (!v702)
              goto LABEL_772;
            if (!v701)
              goto LABEL_772;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v702 + 16))(v702, v700);
            if (!v735[16])
              goto LABEL_772;
LABEL_830:
            v637 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v18)
            {
              *(_QWORD *)&v743 = v637;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v638 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v638 = off_1E34F9058;
              v638[1] = v743;
              v639 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v638[2] = v639;
              *(_QWORD *)v730 = v638;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v735[16])
                goto LABEL_945;
              WebKit::WebExtensionContext::tabsDuplicate((uint64_t *)this, *(uint64_t *)v733, (uint64_t)&v733[8], (uint64_t *)v730);
              v640 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v640)
                (*(void (**)(uint64_t))(*(_QWORD *)v640 + 8))(v640);
            }
            if (v735[16])
            {
              if (v733[80])
              {
                v641 = *(WTF::StringImpl **)&v733[72];
                *(_QWORD *)&v733[72] = 0;
                if (v641)
                {
                  if (*(_DWORD *)v641 == 2)
                    WTF::StringImpl::destroy(v641, v18);
                  else
                    *(_DWORD *)v641 -= 2;
                }
              }
              if (v733[64])
              {
                v51 = *(WTF::StringImpl **)&v733[24];
                *(_QWORD *)&v733[24] = 0;
                if (v51)
                  goto LABEL_55;
              }
            }
            goto LABEL_772;
          case 1670:
            v524 = this[8];
            if (v524 && v524[1])
            {
              IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v733, (uint64_t *)a3);
              if (!BYTE8(v734))
                goto LABEL_726;
              v525 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!(_BYTE)v458)
                goto LABEL_726;
              *(_QWORD *)&v743 = v525;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v526 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v526 = off_1E34F92B0;
              v526[1] = v743;
              v527 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v526[2] = v527;
              *(_QWORD *)v730 = v526;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!BYTE8(v734))
                goto LABEL_945;
              WebKit::WebExtensionContext::tabsExecuteScript((uint64_t)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t)&v733[24], (uint64_t *)v730);
              goto LABEL_724;
            }
            goto LABEL_772;
          case 1671:
            v551 = this[8];
            if (v551)
            {
              if (v551[1])
              {
                v552 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
                if (v553)
                {
                  v554 = v552;
                  v555 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v556)
                  {
                    *(_QWORD *)v733 = v555;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                    v557 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v557 = off_1E34F9080;
                    v557[1] = *(_QWORD *)v733;
                    v558 = *(_QWORD *)&v733[8];
                    *(_QWORD *)&v733[8] = 0;
                    v557[2] = v558;
                    *(_QWORD *)&v743 = v557;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                    WebKit::WebExtensionContext::tabsGet((uint64_t *)this, v554, (uint64_t *)&v743);
                    goto LABEL_275;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1672:
            v491 = this[8];
            if (v491)
            {
              if (v491[1])
              {
                v492 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
                if (v493)
                {
                  v494 = v492;
                  v495 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v496)
                  {
                    *(_QWORD *)v733 = v495;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                    v497 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v497 = off_1E34F90A8;
                    v497[1] = *(_QWORD *)v733;
                    v498 = *(_QWORD *)&v733[8];
                    *(_QWORD *)&v733[8] = 0;
                    v497[2] = v498;
                    *(_QWORD *)&v743 = v497;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                    WebKit::WebExtensionContext::tabsGetCurrent((uint64_t)this, v494, (uint64_t *)&v743);
                    goto LABEL_275;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1673:
            v564 = this[8];
            if (v564)
            {
              if (v564[1])
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[24])
                {
                  v565 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v566)
                  {
                    *(_QWORD *)&v743 = v565;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v567 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v567 = off_1E34F9238;
                    v567[1] = v743;
                    v568 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v567[2] = v568;
                    *(_QWORD *)v730 = v567;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                    WebKit::WebExtensionContext::tabsGetZoom((uint64_t *)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t *)v730);
                    goto LABEL_63;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1674:
            v475 = this[8];
            if (v475)
            {
              if (v475[1])
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[24])
                {
                  v476 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v477)
                  {
                    *(_QWORD *)&v743 = v476;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v478 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v478 = off_1E34F9120;
                    v478[1] = v743;
                    v479 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v478[2] = v479;
                    *(_QWORD *)v730 = v478;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                    WebKit::WebExtensionContext::tabsGoBack((uint64_t *)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t *)v730);
                    goto LABEL_63;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1675:
            v569 = this[8];
            if (v569)
            {
              if (v569[1])
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[24])
                {
                  v570 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v571)
                  {
                    *(_QWORD *)&v743 = v570;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v572 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v572 = off_1E34F9148;
                    v572[1] = v743;
                    v573 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v572[2] = v573;
                    *(_QWORD *)v730 = v572;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                    WebKit::WebExtensionContext::tabsGoForward((uint64_t *)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t *)v730);
                    goto LABEL_63;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1676:
            v457 = this[8];
            if (v457 && v457[1])
            {
              IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v733, (uint64_t *)a3);
              if (!BYTE8(v734))
                goto LABEL_726;
              v459 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (!(_BYTE)v458)
                goto LABEL_726;
              *(_QWORD *)&v743 = v459;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v460 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v460 = off_1E34F92D8;
              v460[1] = v743;
              v461 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v460[2] = v461;
              *(_QWORD *)v730 = v460;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!BYTE8(v734))
                goto LABEL_945;
              WebKit::WebExtensionContext::tabsInsertCSS((uint64_t)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t)&v733[24], (uint64_t *)v730);
              goto LABEL_724;
            }
            goto LABEL_772;
          case 1677:
            v468 = this[8];
            if (!v468 || !v468[1])
              goto LABEL_772;
            v469 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v470)
              goto LABEL_354;
            v471 = v469;
            IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::decode((uint64_t *)a3, (uint64_t)&v743);
            if (!(_BYTE)v745)
            {
              v706 = *(_QWORD *)a3;
              v707 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v708 = *((_QWORD *)a3 + 3);
              if (!v708)
                goto LABEL_354;
              if (!v707)
                goto LABEL_354;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v708 + 16))(v708, v706);
              if (!(_BYTE)v745)
                goto LABEL_354;
            }
            *(_QWORD *)v733 = v471;
            v733[8] = 0;
            v733[24] = 0;
            if (v744[0])
            {
              v473 = *((_QWORD *)&v743 + 1);
              *(_QWORD *)&v733[8] = v743;
              v743 = 0uLL;
              *(_QWORD *)&v733[16] = v473;
              v733[24] = 1;
            }
            v733[32] = 0;
            v733[40] = 0;
            if (v744[16])
            {
              *(_QWORD *)&v733[32] = *(_QWORD *)&v744[8];
              v474 = 1;
              v733[40] = 1;
              *(_OWORD *)&v733[48] = *(_OWORD *)&v744[24];
              *(_OWORD *)&v733[64] = *(_OWORD *)&v744[40];
              *(_OWORD *)&v733[80] = *(_OWORD *)&v744[56];
              *(_QWORD *)&v733[94] = *(_QWORD *)&v744[70];
              *(_QWORD *)&v744[8] = 0;
            }
            else
            {
              v474 = 0;
              *(_OWORD *)&v733[48] = *(_OWORD *)&v744[24];
              *(_OWORD *)&v733[64] = *(_OWORD *)&v744[40];
              *(_OWORD *)&v733[80] = *(_OWORD *)&v744[56];
              *(_QWORD *)&v733[94] = *(_QWORD *)&v744[70];
            }
            v733[104] = 1;
            if (v744[0])
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v743, v472);
            v647 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v362)
              goto LABEL_860;
            *(_QWORD *)&v743 = v647;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v648 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v648 = off_1E34F90D0;
            v648[1] = v743;
            v649 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v648[2] = v649;
            *(_QWORD *)v730 = v648;
            *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
            if (!v733[104])
              goto LABEL_945;
            WebKit::WebExtensionContext::tabsQuery((unsigned int *)this, *(uint64_t *)v733, (uint64_t)&v733[8], (WebKit::WebExtensionWindow **)v730);
            v650 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v650)
              (*(void (**)(uint64_t))(*(_QWORD *)v650 + 8))(v650);
            if (v733[104])
            {
              v474 = v733[40];
LABEL_860:
              if (v474)
              {
                v651 = *(WTF::StringImpl **)&v733[32];
                *(_QWORD *)&v733[32] = 0;
                if (v651)
                {
                  if (*(_DWORD *)v651 == 2)
                    WTF::StringImpl::destroy(v651, (WTF::StringImpl *)v362);
                  else
                    *(_DWORD *)v651 -= 2;
                }
              }
              if (v733[24])
              {
                v373 = &v733[8];
                goto LABEL_600;
              }
            }
            goto LABEL_772;
          case 1678:
            v536 = this[8];
            if (!v536 || !v536[1])
              goto LABEL_772;
            v537 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v538)
              goto LABEL_1007;
            v539 = v537;
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v733);
            if (!v733[16])
              goto LABEL_1007;
            v540 = *((_QWORD *)a3 + 1);
            v541 = *(_QWORD *)a3;
            v542 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
            if (v540 <= v542)
            {
              v714 = 0;
              v715 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v716 = *((_QWORD *)a3 + 3);
              if (v716)
              {
                if (v540)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v716 + 16))(v716);
                  v715 = *(_QWORD *)a3;
                  v714 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v714 = 0;
                  v715 = 0;
                }
              }
            }
            else
            {
              v543 = (unsigned __int8 *)(v541 + v542);
              *((_QWORD *)a3 + 2) = v543 + 1;
              if (v541)
              {
                v544 = *v543;
                if (v544 < 2)
                {
                  v545 = *(_QWORD *)v733;
                  v546 = v733[8];
                  v547 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v548)
                  {
                    *(_QWORD *)v733 = v547;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                    v549 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v549 = off_1E34F90F8;
                    v549[1] = *(_QWORD *)v733;
                    v550 = *(_QWORD *)&v733[8];
                    *(_QWORD *)&v733[8] = 0;
                    v549[2] = v550;
                    *(_QWORD *)&v743 = v549;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                    WebKit::WebExtensionContext::tabsReload((uint64_t *)this, v539, v545, v546, v544 != 0, (uint64_t *)&v743);
                    goto LABEL_275;
                  }
                  goto LABEL_772;
                }
LABEL_1006:
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v718 = *((_QWORD *)a3 + 3);
                if (v718)
                {
                  if (v540)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v718 + 16))(v718, v541);
                    v724 = *((_QWORD *)a3 + 3);
                    v725 = *(_QWORD *)a3;
                    v726 = *((_QWORD *)a3 + 1);
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    if (v724)
                    {
                      if (v726)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v724 + 16))(v724, v725);
                    }
                  }
                }
LABEL_1007:
                v199 = *(_QWORD *)a3;
                v200 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v201 = *((_QWORD *)a3 + 3);
                if (v201)
                  goto LABEL_310;
                goto LABEL_772;
              }
              v714 = v540;
              v715 = 0;
            }
            v540 = 0;
            v541 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v717 = *((_QWORD *)a3 + 3);
            if (v717)
            {
              if (v714)
              {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v717 + 16))(v717, v715, v714);
                v541 = *(_QWORD *)a3;
                v540 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v540 = 0;
                v541 = 0;
              }
            }
            goto LABEL_1006;
          case 1679:
            v448 = this[8];
            if (v448 && v448[1])
            {
              IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v11, (uint64_t)v733);
              if (v733[16])
              {
                v449 = *(WTF **)v733;
                v450 = *(_QWORD *)&v733[8];
                v451 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)v452)
                {
                  *(_QWORD *)v733 = v451;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                  v453 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v453 = off_1E34F9288;
                  v453[1] = *(_QWORD *)v733;
                  v454 = *(_QWORD *)&v733[8];
                  *(_QWORD *)&v733[8] = 0;
                  v453[2] = v454;
                  *(_QWORD *)&v743 = v453;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                  *(_QWORD *)v733 = v449;
                  *(_QWORD *)&v733[8] = v450;
                  WebKit::WebExtensionContext::tabsRemove((uint64_t)this, (uint64_t *)v733, (uint64_t *)&v743);
                  v456 = *(WTF **)v733;
                  if (*(_QWORD *)v733)
                  {
                    *(_QWORD *)v733 = 0;
                    *(_DWORD *)&v733[8] = 0;
                    WTF::fastFree(v456, v455);
                  }
                  goto LABEL_275;
                }
                if (v449)
                  WTF::fastFree(v449, v452);
              }
              else
              {
                v199 = *(_QWORD *)a3;
                v200 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v201 = *((_QWORD *)a3 + 3);
                if (v201)
                  goto LABEL_310;
              }
            }
            goto LABEL_772;
          case 1680:
            v482 = this[8];
            if (v482 && v482[1])
            {
              IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v733, (uint64_t *)a3);
              if (BYTE8(v734))
              {
                v483 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)v458)
                {
                  *(_QWORD *)&v743 = v483;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                  v484 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v484 = off_1E34F9300;
                  v484[1] = v743;
                  v485 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = 0;
                  v484[2] = v485;
                  *(_QWORD *)v730 = v484;
                  *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
                  if (!BYTE8(v734))
                    goto LABEL_945;
                  WebKit::WebExtensionContext::tabsRemoveCSS((uint64_t *)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t)&v733[24], (uint64_t *)v730);
LABEL_724:
                  v528 = *(_QWORD *)v730;
                  *(_QWORD *)v730 = 0;
                  if (v528)
                    (*(void (**)(uint64_t))(*(_QWORD *)v528 + 8))(v528);
                }
              }
LABEL_726:
              std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v733, v458);
            }
            goto LABEL_772;
          case 1681:
            v441 = this[8];
            if (!v441 || !v441[1])
              goto LABEL_772;
            v442 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v443)
            {
              v444 = v442;
              IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v728);
              if (LOBYTE(v728[1]))
              {
                IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v730);
                if (v730[16])
                {
                  *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>((uint64_t *)a3, (uint64_t)&v743));
                  v446 = v750;
                  if (v750)
                  {
                    if (!LOBYTE(v728[1]) || !v730[16])
                      goto LABEL_945;
                    v447 = v728[0];
                    v728[0] = 0;
                    *(_QWORD *)v733 = v444;
                    *(_QWORD *)&v733[8] = v447;
                    *(_OWORD *)&v733[16] = *(_OWORD *)v730;
                    std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v733[32], (uint64_t *)&v743);
                    v446 = 1;
                  }
                  else
                  {
                    v733[0] = 0;
                  }
                  v741 = v446;
                  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v743, v18);
                }
                else
                {
                  v733[0] = 0;
                  v741 = 0;
                }
                if (LOBYTE(v728[1]))
                {
                  v652 = v728[0];
                  v728[0] = 0;
                  if (v652)
                  {
                    if (*(_DWORD *)v652 == 2)
                      WTF::StringImpl::destroy(v652, v445);
                    else
                      *(_DWORD *)v652 -= 2;
                  }
                }
              }
              else
              {
                v733[0] = 0;
                v741 = 0;
              }
              if (v741)
                goto LABEL_883;
            }
            else
            {
              v733[0] = 0;
              v741 = 0;
            }
            v697 = *(_QWORD *)a3;
            v698 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v699 = *((_QWORD *)a3 + 3);
            if (!v699)
              goto LABEL_772;
            if (!v698)
              goto LABEL_772;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v699 + 16))(v699, v697);
            if (!v741)
              goto LABEL_772;
LABEL_883:
            v654 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if ((_BYTE)v655)
            {
              *(_QWORD *)&v743 = v654;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
              v656 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v656 = off_1E34F91E8;
              v656[1] = v743;
              v657 = *((_QWORD *)&v743 + 1);
              *((_QWORD *)&v743 + 1) = 0;
              v656[2] = v657;
              *(_QWORD *)v730 = v656;
              *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1));
              if (!v741)
                goto LABEL_945;
              WebKit::WebExtensionContext::tabsSendMessage((uint64_t)this, *(uint64_t *)v733, (uint64_t)&v733[8], *(uint64_t *)&v733[16], *(uint64_t *)&v733[24], (uint64_t)&v733[32], (uint64_t *)v730);
              v658 = *(_QWORD *)v730;
              *(_QWORD *)v730 = 0;
              if (v658)
                (*(void (**)(uint64_t))(*(_QWORD *)v658 + 8))(v658);
            }
            if (v741)
            {
              v659 = v737;
              v737 = 0;
              if (v659)
              {
                if (*(_DWORD *)v659 == 2)
                  WTF::StringImpl::destroy(v659, v655);
                else
                  *(_DWORD *)v659 -= 2;
              }
              std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v733[48], v655);
              if (v733[40])
              {
                v660 = *(WTF::StringImpl **)&v733[32];
                *(_QWORD *)&v733[32] = 0;
                if (v660)
                {
                  if (*(_DWORD *)v660 == 2)
                    WTF::StringImpl::destroy(v660, v18);
                  else
                    *(_DWORD *)v660 -= 2;
                }
              }
              v51 = *(WTF::StringImpl **)&v733[8];
              *(_QWORD *)&v733[8] = 0;
              if (v51)
                goto LABEL_55;
            }
            goto LABEL_772;
          case 1682:
            v509 = this[8];
            if (!v509 || !v509[1])
              goto LABEL_772;
            v510 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v511)
              goto LABEL_1011;
            v512 = v510;
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v733);
            if (!v733[16])
              goto LABEL_1011;
            v513 = *((_QWORD *)a3 + 1);
            v514 = *(_QWORD *)a3;
            v515 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
            if (v513 < v515 || v513 - v515 <= 7)
            {
              v719 = 0;
              v720 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v721 = *((_QWORD *)a3 + 3);
              if (v721)
              {
                if (v513)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v721 + 16))(v721);
                  v720 = *(_QWORD *)a3;
                  v719 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v719 = 0;
                  v720 = 0;
                }
              }
            }
            else
            {
              v516 = (double *)(v514 + v515);
              *((_QWORD *)a3 + 2) = v516 + 1;
              if (v514)
              {
                v517 = *v516;
                v518 = *(_QWORD *)v733;
                v519 = v733[8];
                v520 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (v521)
                {
                  *(_QWORD *)v733 = v520;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                  v522 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v522 = off_1E34F9260;
                  v522[1] = *(_QWORD *)v733;
                  v523 = *(_QWORD *)&v733[8];
                  *(_QWORD *)&v733[8] = 0;
                  v522[2] = v523;
                  *(_QWORD *)&v743 = v522;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                  WebKit::WebExtensionContext::tabsSetZoom((uint64_t *)this, v512, v518, v519, (uint64_t *)&v743, v517);
                  goto LABEL_275;
                }
                goto LABEL_772;
              }
              v719 = v513;
              v720 = 0;
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v722 = *((_QWORD *)a3 + 3);
            if (v722 && v719)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v722 + 16))(v722, v720);
LABEL_1011:
            v199 = *(_QWORD *)a3;
            v200 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v201 = *((_QWORD *)a3 + 3);
            if (v201)
              goto LABEL_310;
            goto LABEL_772;
          case 1683:
            v559 = this[8];
            if (v559)
            {
              if (v559[1])
              {
                IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v733, (uint64_t *)a3);
                if (v733[24])
                {
                  v560 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (v561)
                  {
                    *(_QWORD *)&v743 = v560;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                    v562 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v562 = off_1E34F9198;
                    v562[1] = v743;
                    v563 = *((_QWORD *)&v743 + 1);
                    *((_QWORD *)&v743 + 1) = 0;
                    v562[2] = v563;
                    *(_QWORD *)v730 = v562;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                    WebKit::WebExtensionContext::tabsToggleReaderMode((uint64_t *)this, *(uint64_t *)v733, *(uint64_t *)&v733[8], v733[16], (uint64_t *)v730);
                    goto LABEL_63;
                  }
                }
              }
            }
            goto LABEL_772;
          case 1684:
            v574 = this[8];
            if (!v574 || !v574[1])
              goto LABEL_772;
            v575 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v576)
              goto LABEL_354;
            v577 = v575;
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v730);
            if (!v730[16])
              goto LABEL_354;
            *(double *)&v34 = COERCE_DOUBLE(IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, &v743));
            if (!v749)
            {
              std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v743, v18);
              goto LABEL_354;
            }
            if (!v730[16])
              goto LABEL_945;
            *(_QWORD *)v733 = v577;
            *(_OWORD *)&v733[8] = *(_OWORD *)v730;
            *(_OWORD *)&v733[24] = v743;
            v733[40] = 0;
            v733[80] = 0;
            if (v744[40])
            {
              v578 = *(_QWORD *)v744;
              *(_QWORD *)v744 = 0;
              *(_QWORD *)&v733[40] = v578;
              *(_OWORD *)&v733[48] = *(_OWORD *)&v744[8];
              *(_OWORD *)&v733[64] = *(_OWORD *)&v744[24];
              *(_DWORD *)&v744[8] &= ~1u;
              v733[80] = 1;
            }
            v733[88] = 0;
            v733[96] = 0;
            if (v744[56])
            {
              v579 = *(_QWORD *)&v744[48];
              *(_QWORD *)&v744[48] = 0;
              *(_QWORD *)&v733[88] = v579;
              v580 = 1;
              v733[96] = 1;
            }
            else
            {
              v580 = 0;
            }
            *(_OWORD *)&v733[136] = v746;
            v734 = v747;
            *(_OWORD *)v735 = *(_OWORD *)v748;
            *(_OWORD *)&v735[10] = *(_OWORD *)&v748[10];
            *(_OWORD *)&v733[104] = *(_OWORD *)&v744[64];
            *(_OWORD *)&v733[120] = v745;
            v736 = 1;
            std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v743, v18);
            v669 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!(_BYTE)v18)
              goto LABEL_930;
            *(_QWORD *)&v743 = v669;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
            v670 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v670 = off_1E34F9030;
            v670[1] = v743;
            v671 = *((_QWORD *)&v743 + 1);
            *((_QWORD *)&v743 + 1) = 0;
            v670[2] = v671;
            *(_QWORD *)v730 = v670;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
            WebKit::WebExtensionContext::tabsUpdate((uint64_t)this, v577, *(uint64_t *)&v733[8], v733[16], (__int128 *)&v733[24], (uint64_t *)v730);
            v672 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v672)
              (*(void (**)(uint64_t))(*(_QWORD *)v672 + 8))(v672);
            if (v736)
            {
              v580 = v733[96];
LABEL_930:
              if (v580)
              {
                v34 = *(WTF::StringImpl **)&v733[88];
                *(_QWORD *)&v733[88] = 0;
                if (*(double *)&v34 != 0.0)
                {
                  if (*(_DWORD *)v34 == 2)
                    goto LABEL_946;
                  *(_DWORD *)v34 -= 2;
                }
              }
              goto LABEL_947;
            }
            goto LABEL_772;
          case 1685:
            if (WebKit::WebExtensionContext::isWebNavigationMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              v529 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
              if (v530)
              {
                v531 = v529;
                v532 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (v533)
                {
                  *(_QWORD *)v733 = v532;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                  v534 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v534 = off_1E34F9328;
                  v534[1] = *(_QWORD *)v733;
                  v535 = *(_QWORD *)&v733[8];
                  *(_QWORD *)&v733[8] = 0;
                  v534[2] = v535;
                  *(_QWORD *)&v743 = v534;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                  WebKit::WebExtensionContext::webNavigationGetAllFrames((uint64_t)this, v531, (uint64_t *)&v743);
                  goto LABEL_275;
                }
              }
              goto LABEL_772;
            }
            v12 = *((unsigned __int16 *)a3 + 25);
LABEL_777:
            if (v12 != 1686)
              goto LABEL_788;
            if (!WebKit::WebExtensionContext::isWebNavigationMessageAllowed((WebKit::WebExtensionContext *)this))
            {
              v12 = *((unsigned __int16 *)a3 + 25);
LABEL_788:
              switch(v12)
              {
                case 1687:
                  v595 = this[8];
                  if (v595 && v595[1])
                  {
                    IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a3, (uint64_t)v733);
                    if (!v733[96])
                      goto LABEL_354;
                    v743 = *(_OWORD *)v733;
                    *(_DWORD *)v744 = *(_DWORD *)&v733[16];
                    v744[8] = 0;
                    v744[24] = 0;
                    if (v733[40])
                    {
                      *(_QWORD *)&v744[8] = *(_QWORD *)&v733[24];
                      v597 = *(_QWORD *)&v733[32];
                      *(_QWORD *)&v733[24] = 0;
                      *(_QWORD *)&v733[32] = 0;
                      *(_QWORD *)&v744[16] = v597;
                      v598 = 1;
                      v744[24] = 1;
                      *(_OWORD *)&v744[32] = *(_OWORD *)&v733[48];
                      *(_OWORD *)&v744[48] = *(_OWORD *)&v733[64];
                      *(_OWORD *)&v744[60] = *(_OWORD *)&v733[76];
                      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v733[24], v596);
                    }
                    else
                    {
                      v598 = 0;
                      *(_OWORD *)&v744[32] = *(_OWORD *)&v733[48];
                      *(_OWORD *)&v744[48] = *(_OWORD *)&v733[64];
                      *(_OWORD *)&v744[60] = *(_OWORD *)&v733[76];
                    }
                    LOBYTE(v745) = 1;
                    v673 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if (!(_BYTE)v674)
                      goto LABEL_943;
                    *(_QWORD *)v733 = v673;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                    v675 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v675 = off_1E34F9378;
                    v675[1] = *(_QWORD *)v733;
                    v676 = *(_QWORD *)&v733[8];
                    *(_QWORD *)&v733[8] = 0;
                    v675[2] = v676;
                    *(_QWORD *)v730 = v675;
                    *(double *)&v34 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]));
                    if (!(_BYTE)v745)
                      goto LABEL_945;
                    WebKit::WebExtensionContext::windowsCreate((uint64_t)this, (uint64_t)&v743, (uint64_t *)v730);
                    v677 = *(_QWORD *)v730;
                    *(_QWORD *)v730 = 0;
                    if (v677)
                      (*(void (**)(uint64_t))(*(_QWORD *)v677 + 8))(v677);
                    v598 = v744[24];
                    if ((_BYTE)v745)
                    {
LABEL_943:
                      if (v598)
                      {
                        v678 = &v744[8];
                        goto LABEL_960;
                      }
                    }
                  }
                  break;
                case 1688:
                  v621 = this[8];
                  if (v621 && v621[1])
                  {
                    v622 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if (v623
                      && (v624 = v622,
                          v625 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
                          v626)
                      && (v627 = v625,
                          v628 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3),
                          v628 >= 0x100u)
                      && (v629 = v628, v630 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3), v630 > 0xFFu))
                    {
                      v684 = v630;
                      v685 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                      if (v686)
                      {
                        *(_QWORD *)v733 = v685;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                        v687 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                        *v687 = off_1E34F93A0;
                        v687[1] = *(_QWORD *)v733;
                        v688 = *(_QWORD *)&v733[8];
                        *(_QWORD *)&v733[8] = 0;
                        v687[2] = v688;
                        *(_QWORD *)&v743 = v687;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                        WebKit::WebExtensionContext::windowsGet((uint64_t)this, v624, v627, v629, v684 != 0, (uint64_t *)&v743);
                        goto LABEL_275;
                      }
                    }
                    else
                    {
                      v241 = *(_QWORD *)a3;
                      v242 = *((_QWORD *)a3 + 1);
                      *(_QWORD *)a3 = 0;
                      *((_QWORD *)a3 + 1) = 0;
                      v243 = *((_QWORD *)a3 + 3);
                      if (v243)
                        goto LABEL_355;
                    }
                  }
                  break;
                case 1689:
                  v607 = this[8];
                  if (v607)
                  {
                    if (v607[1])
                    {
                      v608 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>((uint64_t *)a3);
                      if ((v608 & 0xFFFFFF) >= 0x10000)
                      {
                        v609 = v608;
                        v610 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                        if (v611)
                        {
                          *(_QWORD *)v733 = v610;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                          v612 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                          *v612 = off_1E34F93F0;
                          v612[1] = *(_QWORD *)v733;
                          v613 = *(_QWORD *)&v733[8];
                          *(_QWORD *)&v733[8] = 0;
                          v612[2] = v613;
                          *(_QWORD *)&v743 = v612;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                          WebKit::WebExtensionContext::windowsGetAll((unsigned int *)this, v609, (v609 & 0xFF00) != 0, (uint64_t *)&v743);
                          goto LABEL_275;
                        }
                      }
                    }
                  }
                  break;
                case 1690:
                  v614 = this[8];
                  if (v614)
                  {
                    if (v614[1])
                    {
                      v615 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>((uint64_t *)a3);
                      if ((v615 & 0xFFFFFF) >= 0x10000)
                      {
                        v616 = v615;
                        v617 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                        if (v618)
                        {
                          *(_QWORD *)v733 = v617;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                          v619 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                          *v619 = off_1E34F93C8;
                          v619[1] = *(_QWORD *)v733;
                          v620 = *(_QWORD *)&v733[8];
                          *(_QWORD *)&v733[8] = 0;
                          v619[2] = v620;
                          *(_QWORD *)&v743 = v619;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                          WebKit::WebExtensionContext::windowsGetLastFocused((uint64_t)this, v616, (v616 & 0xFF00) != 0, (NSString *)&v743);
                          goto LABEL_275;
                        }
                      }
                    }
                  }
                  break;
                case 1691:
                  v599 = this[8];
                  if (v599 && v599[1])
                  {
                    v600 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if (v601)
                    {
                      v602 = v600;
                      v603 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                      if (v604)
                      {
                        *(_QWORD *)v733 = v603;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                        v605 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                        *v605 = off_1E34F9440;
                        v605[1] = *(_QWORD *)v733;
                        v606 = *(_QWORD *)&v733[8];
                        *(_QWORD *)&v733[8] = 0;
                        v605[2] = v606;
                        *(_QWORD *)&v743 = v605;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                        WebKit::WebExtensionContext::windowsRemove((uint64_t)this, v602, (uint64_t *)&v743);
                        goto LABEL_275;
                      }
                    }
                    else
                    {
                      v241 = *(_QWORD *)a3;
                      v242 = *((_QWORD *)a3 + 1);
                      *(_QWORD *)a3 = 0;
                      *((_QWORD *)a3 + 1) = 0;
                      v243 = *((_QWORD *)a3 + 3);
                      if (v243)
                        goto LABEL_355;
                    }
                  }
                  break;
                case 1692:
                  v631 = this[8];
                  if (v631 && v631[1])
                  {
                    v632 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if (!v633)
                      goto LABEL_354;
                    v634 = v632;
                    IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a3, (uint64_t)&v743);
                    if (!(_BYTE)v745)
                      goto LABEL_354;
                    *(_QWORD *)v733 = v634;
                    *(_OWORD *)&v733[8] = v743;
                    *(_DWORD *)&v733[24] = *(_DWORD *)v744;
                    v733[32] = 0;
                    v733[48] = 0;
                    v636 = v744[24];
                    *(_OWORD *)&v733[56] = *(_OWORD *)&v744[32];
                    if (v744[24])
                    {
                      *(_QWORD *)&v733[32] = *(_QWORD *)&v744[8];
                      v5 = *(_DWORD *)&v744[16];
                      v4 = *(_DWORD *)&v744[20];
                      *(_QWORD *)&v744[8] = 0;
                      *(_QWORD *)&v744[16] = 0;
                      *(_DWORD *)&v733[40] = v5;
                      *(_DWORD *)&v733[44] = v4;
                      v733[48] = 1;
                      *(_OWORD *)&v733[72] = *(_OWORD *)&v744[48];
                      *(_OWORD *)&v733[84] = *(_OWORD *)&v744[60];
                      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v744[8], v635);
                    }
                    else
                    {
                      *(_OWORD *)&v733[72] = *(_OWORD *)&v744[48];
                      *(_OWORD *)&v733[84] = *(_OWORD *)&v744[60];
                    }
                    v733[104] = 1;
                    v679 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                    if ((_BYTE)v674)
                    {
                      *(_QWORD *)&v743 = v679;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
                      v680 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                      *v680 = off_1E34F9418;
                      v680[1] = v743;
                      v681 = *((_QWORD *)&v743 + 1);
                      *((_QWORD *)&v743 + 1) = 0;
                      v680[2] = v681;
                      *(_QWORD *)v730 = v680;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
                      v743 = *(_OWORD *)&v733[8];
                      *(_DWORD *)v744 = *(_DWORD *)&v733[24];
                      v744[8] = 0;
                      v744[24] = 0;
                      if (v636)
                      {
                        v682 = *(_QWORD *)&v733[32];
                        *(_QWORD *)&v733[32] = 0;
                        *(_QWORD *)&v733[40] = 0;
                        *(_QWORD *)&v744[8] = v682;
                        *(_DWORD *)&v744[16] = v5;
                        *(_DWORD *)&v744[20] = v4;
                        v744[24] = 1;
                      }
                      *(_OWORD *)&v744[32] = *(_OWORD *)&v733[56];
                      *(_OWORD *)&v744[48] = *(_OWORD *)&v733[72];
                      *(_OWORD *)&v744[60] = *(_OWORD *)&v733[84];
                      WebKit::WebExtensionContext::windowsUpdate((uint64_t)this, v634, &v743, (uint64_t *)v730);
                      if (v744[24])
                        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v744[8], v674);
                      v683 = *(_QWORD *)v730;
                      *(_QWORD *)v730 = 0;
                      if (v683)
                        (*(void (**)(uint64_t))(*(_QWORD *)v683 + 8))(v683);
                    }
                    if (v636)
                    {
                      v678 = &v733[32];
LABEL_960:
                      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v678, v674);
                    }
                  }
                  break;
                default:
                  goto LABEL_772;
              }
              goto LABEL_772;
            }
            v581 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v582)
            {
              v583 = v581;
              v584 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if (v585)
              {
                v586 = v584;
                v587 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if (!v588)
                  goto LABEL_772;
                *(_QWORD *)v733 = v587;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v733[8], a2);
                v589 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v589 = off_1E34F9350;
                v589[1] = *(_QWORD *)v733;
                v590 = *(_QWORD *)&v733[8];
                *(_QWORD *)&v733[8] = 0;
                v589[2] = v590;
                *(_QWORD *)&v743 = v589;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v733[8]);
                WebKit::WebExtensionContext::webNavigationGetFrame((uint64_t)this, v583, v586, (uint64_t *)&v743);
                goto LABEL_275;
              }
            }
            v241 = *(_QWORD *)a3;
            v242 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v243 = *((_QWORD *)a3 + 3);
            if (!v243)
              goto LABEL_772;
            goto LABEL_355;
          default:
            goto LABEL_777;
        }
      }
      v202 = this[8];
      if (!v202 || !v202[1])
        goto LABEL_772;
      v203 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v204)
      {
        v205 = v203;
        v206 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
        if (v206 >= 0x100u)
        {
          v207 = v206;
          v208 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
          if (v208 > 0xFFu)
          {
            WebKit::WebExtensionContext::addListener((uint64_t)this, v205, v207, v208);
            goto LABEL_772;
          }
        }
      }
      v199 = *(_QWORD *)a3;
      v200 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v201 = *((_QWORD *)a3 + 3);
      if (!v201)
        goto LABEL_772;
    }
LABEL_310:
    if (v200)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v201 + 16))(v201, v199);
    goto LABEL_772;
  }
  if (!WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
  {
    v12 = *((unsigned __int16 *)a3 + 25);
    goto LABEL_155;
  }
  IPC::Decoder::decode<std::optional<PAL::SessionID>>((uint64_t *)a3, v728);
  if (!(_BYTE)v729)
    goto LABEL_354;
  IPC::Decoder::decode<WTF::URL>((uint64_t *)a3, v730);
  if (!(_BYTE)v732)
    goto LABEL_354;
  *(double *)&v34 = COERCE_DOUBLE(IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::decode((uint64_t *)a3, (uint64_t)&v743));
  if (!v744[40])
  {
    v18 = *(WTF::StringImpl **)a3;
    v347 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v348 = *((_QWORD *)a3 + 3);
    if (!v348
      || !v347
      || (*(double *)&v34 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v348 + 16))(v348, v18)), !v744[40]))
    {
      v105 = 0;
      v733[0] = 0;
      v733[112] = 0;
      v162 = 1;
      goto LABEL_230;
    }
  }
  if (!(_BYTE)v729 || !(_BYTE)v732)
    goto LABEL_945;
  *(_OWORD *)v733 = *(_OWORD *)v728;
  v101 = *(_QWORD *)v730;
  *(_QWORD *)v730 = 0;
  *(_QWORD *)&v733[16] = v101;
  *(_OWORD *)&v733[24] = *(_OWORD *)&v730[8];
  *(_OWORD *)&v733[40] = v731;
  *(_DWORD *)&v730[8] &= ~1u;
  v733[56] = 0;
  v733[64] = 0;
  v102 = BYTE8(v743);
  if (BYTE8(v743))
  {
    v103 = v743;
    *(_QWORD *)&v743 = 0;
    *(_QWORD *)&v733[56] = v103;
    v733[64] = 1;
  }
  v733[72] = 0;
  v733[80] = 0;
  if (v744[8])
  {
    v104 = *(_QWORD *)v744;
    *(_QWORD *)v744 = 0;
    *(_QWORD *)&v733[72] = v104;
    v733[80] = 1;
  }
  v733[88] = 0;
  v733[96] = 0;
  if (v744[24])
  {
    *(_QWORD *)&v733[88] = *(_QWORD *)&v744[16];
    v105 = 1;
    v733[96] = 1;
    v106 = *(_DWORD *)&v744[32];
    *(_QWORD *)&v744[16] = 0;
  }
  else
  {
    v105 = 0;
    v106 = *(_DWORD *)&v744[32];
  }
  *(_DWORD *)&v733[104] = v106;
  v733[112] = 1;
  if (v744[8])
  {
    v140 = *(WTF::StringImpl **)v744;
    *(_QWORD *)v744 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
      {
        WTF::StringImpl::destroy(v140, v18);
        v102 = BYTE8(v743);
      }
      else
      {
        *(_DWORD *)v140 -= 2;
      }
    }
  }
  if (!v102)
    goto LABEL_229;
  v161 = (WTF::StringImpl *)v743;
  *(_QWORD *)&v743 = 0;
  if (!v161)
    goto LABEL_229;
  if (*(_DWORD *)v161 == 2)
  {
    WTF::StringImpl::destroy(v161, v18);
LABEL_229:
    v162 = 0;
    goto LABEL_230;
  }
  v162 = 0;
  *(_DWORD *)v161 -= 2;
LABEL_230:
  if ((_BYTE)v732)
  {
    v163 = *(WTF::StringImpl **)v730;
    *(_QWORD *)v730 = 0;
    if (v163)
    {
      if (*(_DWORD *)v163 == 2)
        WTF::StringImpl::destroy(v163, v18);
      else
        *(_DWORD *)v163 -= 2;
    }
  }
  if (v162)
  {
LABEL_354:
    v241 = *(_QWORD *)a3;
    v242 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v243 = *((_QWORD *)a3 + 3);
    if (!v243)
      goto LABEL_772;
    goto LABEL_355;
  }
  v164 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if ((_BYTE)v18)
  {
    *(_QWORD *)&v743 = v164;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v743 + 1, a2);
    v165 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v165 = off_1E34F8950;
    v165[1] = v743;
    v166 = *((_QWORD *)&v743 + 1);
    *((_QWORD *)&v743 + 1) = 0;
    v165[2] = v166;
    *(_QWORD *)v730 = v165;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v743 + 1);
    WebKit::WebExtensionContext::cookiesGetAll((uint64_t)this, *(const void **)v733, v733[8], (uint64_t)&v733[16], (uint64_t)&v733[56], (uint64_t *)v730);
    v167 = *(_QWORD *)v730;
    *(_QWORD *)v730 = 0;
    if (v167)
      (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
    if (!v733[112])
      goto LABEL_772;
    v105 = v733[96];
  }
  if (v105)
  {
    v168 = *(WTF::StringImpl **)&v733[88];
    *(_QWORD *)&v733[88] = 0;
    if (v168)
    {
      if (*(_DWORD *)v168 == 2)
        WTF::StringImpl::destroy(v168, v18);
      else
        *(_DWORD *)v168 -= 2;
    }
  }
  if (v733[80])
  {
    v173 = *(WTF::StringImpl **)&v733[72];
    *(_QWORD *)&v733[72] = 0;
    if (v173)
    {
      if (*(_DWORD *)v173 == 2)
        WTF::StringImpl::destroy(v173, v18);
      else
        *(_DWORD *)v173 -= 2;
    }
  }
  if (v733[64])
  {
    v174 = *(WTF::StringImpl **)&v733[56];
    *(_QWORD *)&v733[56] = 0;
    if (v174)
    {
LABEL_258:
      if (*(_DWORD *)v174 == 2)
        WTF::StringImpl::destroy(v174, v18);
      else
        *(_DWORD *)v174 -= 2;
    }
  }
LABEL_261:
  v51 = *(WTF::StringImpl **)&v733[16];
  *(_QWORD *)&v733[16] = 0;
  if (v51)
    goto LABEL_55;
LABEL_772:
  CFRelease(this[1]);
}

void `non-virtual thunk to'WebKit::WebExtensionContext::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebExtensionContext::didReceiveMessage(this - 2, a2, a3);
}

void `non-virtual thunk to'WebKit::WebExtensionContext::~WebExtensionContext(WebKit::WebExtensionContext *this, void *a2)
{
  WebKit::WebExtensionContext::~WebExtensionContext((WebKit::WebExtensionContext *)((char *)this - 16), a2);
}

{
  WebKit::WebExtensionContext::~WebExtensionContext((WebKit::WebExtensionContext *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v9);
  if (v10
    && (result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v11), v12))
  {
    if (v10)
    {
      v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(_BYTE *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v6);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F86D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F86D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3173;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t i;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
    goto LABEL_8;
  v8 = *(char **)(a1 + 528);
  for (i = *(_QWORD *)(a1 + 544); ; i = *(_QWORD *)(a1 + 544))
  {
    bzero(&v8[i], v5 - i);
    *(_QWORD *)(a1 + 544) = v6;
    v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    if (v4)
    {
      *v10 = 0;
      if (*(_DWORD *)(a2 + 8) == 1)
        goto LABEL_5;
    }
    else
    {
      *v10 = 1;
      if (!*(_DWORD *)(a2 + 8))
      {
LABEL_5:
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
        return;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_8:
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      break;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
  }
  __break(0xC471u);
}

_QWORD *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  char v14;

  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v9);
  if (v10
    && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v11), v12)&& (result = IPC::Decoder::decode<WTF::String>(a2, &v13), v14))
  {
    if (v10 && v12)
    {
      v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 32) = v13;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v6);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F86F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F86F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3179;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
    {
      __break(0xC471u);
      goto LABEL_14;
    }
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 1;
    return;
  }
  *v10 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13ActionSetIconEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13ActionSetIconEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13ActionSetIconEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3177;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3172;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8770;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8770;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3178;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15ActionOpenPopupEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEEEENSF_INS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15ActionOpenPopupEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEEEENSF_INS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15ActionOpenPopupEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEEEENSF_INS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3174;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionGetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F87C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionGetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F87C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionGetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESO_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3170;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionSetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F87E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionSetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F87E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionSetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSK_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3175;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionGetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8810;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionGetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8810;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionGetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  IPC::Encoder *v33;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3171;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v33 = (IPC::Encoder *)v5;
  v7 = *((_DWORD *)a2 + 2);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 1)
  {
    v25 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v9);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_26;
    v11 = v27;
    memcpy(v27, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v28 = *(void **)(v5 + 528);
    if (v28 != v6)
      munmap(v28, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v26;
    v12 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v5 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  if (v7)
  {
    *v13 = 0;
    if (*((_DWORD *)a2 + 2) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_10;
    }
    goto LABEL_25;
  }
  *v13 = 1;
  if (*((_DWORD *)a2 + 2))
  {
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_26;
  }
  v14 = *a2;
  v15 = *(_QWORD *)(v5 + 544);
  v16 = v15 + 1;
  v17 = *(_QWORD *)(v5 + 552);
  if (v17 < v15 + 1)
  {
    v29 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v30 = v29;
      v29 *= 2;
    }
    while (v30 < v16);
    v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
    if (v31 != (char *)-1)
    {
      v18 = v31;
      memcpy(v31, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
      v32 = *(void **)(v5 + 528);
      if (v32 != v6)
        munmap(v32, *(_QWORD *)(v5 + 552));
      *(_QWORD *)(v5 + 528) = v18;
      *(_QWORD *)(v5 + 552) = v30;
      v19 = *(_QWORD *)(v5 + 544);
      goto LABEL_9;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x19776CA6CLL);
  }
  v18 = *(char **)(v5 + 528);
  v19 = *(_QWORD *)(v5 + 544);
LABEL_9:
  bzero(&v18[v19], v15 - v19);
  *(_QWORD *)(v5 + 544) = v16;
  v20 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v15);
  *(_QWORD *)(v5 + 536) = v20 + 1;
  *v20 = v14;
LABEL_10:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v33, 0, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8838;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8838;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3176;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9AlarmsGetEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_27WebExtensionAlarmParametersEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8860;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9AlarmsGetEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_27WebExtensionAlarmParametersEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8860;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9AlarmsGetEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_27WebExtensionAlarmParametersEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3183;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v20 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 32);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v19 = *(void **)(v5 + 528);
    if (v19 != (void *)(v5 + 16))
      munmap(v19, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v18;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if (v6)
  {
    *v12 = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v12 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8888;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8888;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3181;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12AlarmsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_27WebExtensionAlarmParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F88B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12AlarmsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_27WebExtensionAlarmParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F88B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12AlarmsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_27WebExtensionAlarmParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  char *result;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3182;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v23 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 8)
  {
    v20 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v9);
    result = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v22 = *(void **)(v5 + 528);
    if (v22 != (void *)(v5 + 16))
      munmap(v22, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v21;
    v7 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v5 + 544) = v9;
  v12 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  *v12 = v6;
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(uint64_t **)a2;
    v15 = 32 * v13;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode((IPC::Encoder *)v5, v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v23, 0, 0);
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
    return (char *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14AlarmsClearAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F88D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14AlarmsClearAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F88D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14AlarmsClearAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3180;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14CommandsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvNS_6VectorINS7_29WebExtensionCommandParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14CommandsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvNS_6VectorINS7_29WebExtensionCommandParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14CommandsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvNS_6VectorINS7_29WebExtensionCommandParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  char *result;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3184;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v23 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 8)
  {
    v20 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v9);
    result = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v22 = *(void **)(v5 + 528);
    if (v22 != (void *)(v5 + 16))
      munmap(v22, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v21;
    v7 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v5 + 544) = v9;
  v12 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  *v12 = v6;
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(uint64_t **)a2;
    v15 = 24 * v13;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode(v5, v14);
      v14 += 3;
      v15 -= 24;
    }
    while (v15);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v23, 0, 0);
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
    return (char *)WTF::fastFree(v18, v19);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16[5];
  char v17;

  IPC::Decoder::decode<std::optional<PAL::SessionID>>(a2, &v12);
  if (!v13)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 64) = 0;
LABEL_21:
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v10 = a2[3];
    if (v10)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    return;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v14);
  if (v15)
  {
    IPC::Decoder::decode<WTF::URL>(a2, v16);
    if (v17)
    {
      if (!v13 || !v15)
      {
        __break(1u);
        return;
      }
      *(_OWORD *)a1 = v12;
      v5 = v14;
      v14 = 0;
      *(_QWORD *)(a1 + 16) = v5;
      WTF::URL::URL(a1 + 24, (uint64_t *)v16);
      *(_BYTE *)(a1 + 64) = 1;
      if (v17)
      {
        v6 = v16[0];
        v16[0] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v4);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 64) = 0;
    }
    if (v15)
    {
      v7 = v14;
      v14 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v4);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 64) = 0;
  }
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_21;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesGetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesGetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesGetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3187;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *(_DWORD *)(a2 + 168);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_27;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 0;
    if (*(_DWORD *)(a2 + 168) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      return;
    }
    goto LABEL_25;
  }
  *v10 = 1;
  if (*(_DWORD *)(a2 + 168))
  {
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_26;
  }
  v11 = *(unsigned __int8 *)(a2 + 160);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(a1 + 552);
  if (v14 >= v12 + 1)
  {
    v15 = *(char **)(a1 + 528);
    v16 = *(_QWORD *)(a1 + 544);
    goto LABEL_9;
  }
  v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v13);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x19776D7FCLL);
  }
  v15 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v15;
  *(_QWORD *)(a1 + 552) = v23;
  v16 = *(_QWORD *)(a1 + 544);
LABEL_9:
  bzero(&v15[v16], v12 - v16);
  *(_QWORD *)(a1 + 544) = v13;
  v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  if (v11)
  {
    *v17 = 1;
    if (!*(_BYTE *)(a2 + 160))
    {
LABEL_26:
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_27;
    }
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, (uint64_t *)(a2 + 8));
    IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)a1, (uint64_t *)(a2 + 24));
  }
  else
  {
    *v17 = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  IPC::Encoder *result;
  WTF *v26;
  void *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  IPC::Encoder *v36;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3186;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v36 = (IPC::Encoder *)v5;
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 1)
  {
    v28 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v29 = v28;
      v28 *= 2;
    }
    while (v29 < v9);
    v30 = (char *)mmap(0, v29, 3, 4098, -1, 0);
    if (v30 == (char *)-1)
      goto LABEL_28;
    v11 = v30;
    memcpy(v30, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v31 = *(void **)(v5 + 528);
    if (v31 != v6)
      munmap(v31, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v29;
    v12 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v5 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  if (v7)
  {
    *v13 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_12;
    }
    goto LABEL_27;
  }
  *v13 = 1;
  if (*(_DWORD *)(a2 + 16))
  {
LABEL_27:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  v14 = *(unsigned int *)(a2 + 12);
  v15 = *(_QWORD *)(v5 + 544);
  v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 8;
  v18 = *(_QWORD *)(v5 + 552);
  if (v18 < v16 + 8)
  {
    v32 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v33 = v32;
      v32 *= 2;
    }
    while (v33 < v17);
    v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
    if (v34 != (char *)-1)
    {
      v19 = v34;
      memcpy(v34, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
      v35 = *(void **)(v5 + 528);
      if (v35 != v6)
        munmap(v35, *(_QWORD *)(v5 + 552));
      *(_QWORD *)(v5 + 528) = v19;
      *(_QWORD *)(v5 + 552) = v33;
      v15 = *(_QWORD *)(v5 + 544);
      goto LABEL_9;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x19776DB04);
  }
  v19 = *(char **)(v5 + 528);
LABEL_9:
  bzero(&v19[v15], v16 - v15);
  *(_QWORD *)(v5 + 544) = v17;
  v20 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v16);
  *(_QWORD *)(v5 + 536) = v20 + 1;
  *v20 = v14;
  v21 = *(_DWORD *)(a2 + 12);
  if (v21)
  {
    v22 = *(uint64_t **)a2;
    v23 = &v22[19 * v21];
    do
    {
      IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v5, v22);
      IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)v5, v22 + 2);
      v22 += 19;
    }
    while (v22 != v23);
  }
LABEL_12:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v36, 0, 0);
  result = v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8978;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8978;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3189;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesRemoveEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F89A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesRemoveEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F89A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesRemoveEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3188;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25CookiesGetAllCookieStoresEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7HashMapIN3PAL9SessionIDENS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISF_EENS_10HashTraitsISF_EENSR_ISO_EENS_15HashTableTraitsEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F89C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25CookiesGetAllCookieStoresEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7HashMapIN3PAL9SessionIDENS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISF_EENS_10HashTraitsISF_EENSR_ISO_EENS_15HashTableTraitsEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F89C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25CookiesGetAllCookieStoresEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7HashMapIN3PAL9SessionIDENS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISF_EENS_10HashTraitsISF_EENSR_ISO_EENS_15HashTableTraitsEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EE4callESY_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  char *v43;
  void *v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  void *v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  void *v52;
  IPC::Encoder *v54;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 3185;
  *(_QWORD *)(v4 + 8) = v3;
  v5 = (void *)(v4 + 16);
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v54 = (IPC::Encoder *)v4;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(v4 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v4 + 552);
  if (v9 < v7 + 1)
  {
    v45 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v46 = v45;
      v45 *= 2;
    }
    while (v46 < v8);
    v47 = (char *)mmap(0, v46, 3, 4098, -1, 0);
    if (v47 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19776E1B4);
    }
    v10 = v47;
    memcpy(v47, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v48 = *(void **)(v4 + 528);
    if (v48 != v5)
      munmap(v48, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v10;
    *(_QWORD *)(v4 + 552) = v46;
    v11 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v10 = *(char **)(v4 + 528);
    v11 = *(_QWORD *)(v4 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v4 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v4 + 528) + v7);
  *(_QWORD *)(v4 + 536) = v12 + 1;
  if (v6)
  {
    *v12 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2);
      goto LABEL_6;
    }
    goto LABEL_59;
  }
  *v12 = 1;
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_59:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_62;
  }
  if (*(_QWORD *)a2)
    v17 = *(_DWORD *)(*(_QWORD *)a2 - 12);
  else
    v17 = 0;
  v18 = *(_QWORD *)(v4 + 544);
  v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 + 4;
  v21 = *(_QWORD *)(v4 + 552);
  if (v21 < v19 + 4)
  {
    v49 = (2 * v21 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v50 = v49;
      v49 *= 2;
    }
    while (v50 < v20);
    v51 = (char *)mmap(0, v50, 3, 4098, -1, 0);
    if (v51 == (char *)-1)
    {
LABEL_62:
      __break(0xC471u);
      JUMPOUT(0x19776E1ACLL);
    }
    v22 = v51;
    memcpy(v51, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v52 = *(void **)(v4 + 528);
    if (v52 != v5)
      munmap(v52, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v22;
    *(_QWORD *)(v4 + 552) = v50;
    v18 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v22 = *(char **)(v4 + 528);
  }
  bzero(&v22[v18], v19 - v18);
  *(_QWORD *)(v4 + 544) = v20;
  v23 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v19);
  *(_QWORD *)(v4 + 536) = v23 + 1;
  *v23 = v17;
  v24 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v25 = *(unsigned int *)(v24 - 4);
    v26 = v24 + 24 * v25;
    if (*(_DWORD *)(v24 - 12))
    {
      v27 = *(_QWORD *)a2;
      if ((_DWORD)v25)
      {
        v28 = 24 * v25;
        v27 = v24;
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 24;
          v28 -= 24;
          if (!v28)
          {
            v27 = v26;
            goto LABEL_25;
          }
        }
      }
      goto LABEL_25;
    }
    v27 = v24 + 24 * v25;
  }
  else
  {
    v27 = 0;
    LODWORD(v25) = 0;
  }
  v26 = v24 + 24 * v25;
LABEL_25:
  if (v24)
    v29 = v24 + 24 * *(unsigned int *)(v24 - 4);
  else
    v29 = 0;
  while (v27 != v29)
  {
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, (uint64_t *)v27);
    v30 = *(unsigned int *)(v27 + 20);
    v31 = *(_QWORD *)(v4 + 544);
    v32 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = v32 + 8;
    v34 = *(_QWORD *)(v4 + 552);
    if (v34 < v32 + 8)
    {
      v41 = (2 * v34 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v42 = v41;
        v41 *= 2;
      }
      while (v42 < v33);
      v43 = (char *)mmap(0, v42, 3, 4098, -1, 0);
      if (v43 == (char *)-1)
        goto LABEL_62;
      v35 = v43;
      memcpy(v43, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
      v44 = *(void **)(v4 + 528);
      if (v44 != v5)
        munmap(v44, *(_QWORD *)(v4 + 552));
      *(_QWORD *)(v4 + 528) = v35;
      *(_QWORD *)(v4 + 552) = v42;
      v31 = *(_QWORD *)(v4 + 544);
    }
    else
    {
      v35 = *(char **)(v4 + 528);
    }
    bzero(&v35[v31], v32 - v31);
    *(_QWORD *)(v4 + 544) = v33;
    v36 = (_QWORD *)(*(_QWORD *)(v4 + 528) + v32);
    *(_QWORD *)(v4 + 536) = v36 + 1;
    *v36 = v30;
    v37 = *(unsigned int *)(v27 + 20);
    if ((_DWORD)v37)
    {
      v38 = *(uint64_t **)(v27 + 8);
      v39 = 8 * v37;
      do
      {
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, v38++);
        v39 -= 8;
      }
      while (v39);
    }
    v40 = v27 + 24;
    v27 = v26;
    if (v40 != v26)
    {
      v27 = v40;
      while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
      {
        v27 += 24;
        if (v27 == v26)
        {
          v27 = v26;
          break;
        }
      }
    }
  }
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v54, 0, 0);
  result = v54;
  v54 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F89F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F89F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3192;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext42DeclarativeNetRequestUpdateEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8A18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext42DeclarativeNetRequestUpdateEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8A18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext42DeclarativeNetRequestUpdateEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3197;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext50DeclarativeNetRequestDisplayActionCountAsBadgeTextEN6WebKit19WebExtensionContextES8_FvbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8A40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext50DeclarativeNetRequestDisplayActionCountAsBadgeTextEN6WebKit19WebExtensionContextES8_FvbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8A40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext50DeclarativeNetRequestDisplayActionCountAsBadgeTextEN6WebKit19WebExtensionContextES8_FvbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3190;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext41DeclarativeNetRequestIncrementActionCountEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8A68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext41DeclarativeNetRequestIncrementActionCountEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8A68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext41DeclarativeNetRequestIncrementActionCountEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3195;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetMatchedRulesEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INS_8WallTimeEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_33WebExtensionMatchedRuleParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8A90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetMatchedRulesEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INS_8WallTimeEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_33WebExtensionMatchedRuleParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8A90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetMatchedRulesEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INS_8WallTimeEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_33WebExtensionMatchedRuleParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  IPC::Encoder *result;
  WTF *v26;
  void *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  IPC::Encoder *v36;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3193;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v36 = (IPC::Encoder *)v5;
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 1)
  {
    v28 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v29 = v28;
      v28 *= 2;
    }
    while (v29 < v9);
    v30 = (char *)mmap(0, v29, 3, 4098, -1, 0);
    if (v30 == (char *)-1)
      goto LABEL_28;
    v11 = v30;
    memcpy(v30, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v31 = *(void **)(v5 + 528);
    if (v31 != v6)
      munmap(v31, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v29;
    v12 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v5 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  if (v7)
  {
    *v13 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_12;
    }
    goto LABEL_27;
  }
  *v13 = 1;
  if (*(_DWORD *)(a2 + 16))
  {
LABEL_27:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  v14 = *(unsigned int *)(a2 + 12);
  v15 = *(_QWORD *)(v5 + 544);
  v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 8;
  v18 = *(_QWORD *)(v5 + 552);
  if (v18 < v16 + 8)
  {
    v32 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v33 = v32;
      v32 *= 2;
    }
    while (v33 < v17);
    v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
    if (v34 != (char *)-1)
    {
      v19 = v34;
      memcpy(v34, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
      v35 = *(void **)(v5 + 528);
      if (v35 != v6)
        munmap(v35, *(_QWORD *)(v5 + 552));
      *(_QWORD *)(v5 + 528) = v19;
      *(_QWORD *)(v5 + 552) = v33;
      v15 = *(_QWORD *)(v5 + 544);
      goto LABEL_9;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x19776E8C0);
  }
  v19 = *(char **)(v5 + 528);
LABEL_9:
  bzero(&v19[v15], v16 - v15);
  *(_QWORD *)(v5 + 544) = v17;
  v20 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v16);
  *(_QWORD *)(v5 + 536) = v20 + 1;
  *v20 = v14;
  v21 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(uint64_t **)a2;
    v23 = 56 * v21;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::encode((IPC::Encoder *)v5, v22);
      v22 += 7;
      v23 -= 56;
    }
    while (v23);
  }
LABEL_12:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v36, 0, 0);
  result = v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8AB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8AB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3191;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  unsigned __int8 v13;
  _QWORD v14[2];
  char v15;

  IPC::Decoder::decode<WTF::String>(a2, &v12);
  if (v13)
  {
    result = IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v14);
    if (v15)
    {
      if (v13)
      {
        v6 = v14[0];
        *(_QWORD *)a1 = v12;
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a1 + 16) = v14[1];
        *(_BYTE *)(a1 + 24) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(_BYTE *)a1 = 0;
    v7 = v13;
    *(_BYTE *)(a1 + 24) = 0;
    if (v7)
    {
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v5);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8AE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8AE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3196;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8B08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8B08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3194;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8B30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8B30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3198;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 0x3A)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ExtensionIsAllowedIncognitoAccessEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ExtensionIsAllowedIncognitoAccessEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ExtensionIsAllowedIncognitoAccessEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3199;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

void IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 120))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3200;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusUpdateEN6WebKit19WebExtensionContextES8_FvRKNS_6StringERKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusUpdateEN6WebKit19WebExtensionContextES8_FvRKNS_6StringERKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusUpdateEN6WebKit19WebExtensionContextES8_FvRKNS_6StringERKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3203;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusRemoveEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusRemoveEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusRemoveEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3202;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14MenusRemoveAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14MenusRemoveAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14MenusRemoveAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3201;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SF_EE4callESF_SF_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3205;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v7, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl **v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;

  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v11);
  if (v12)
  {
    result = IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v13);
    if (v14)
    {
      if (v12)
      {
        v6 = v13;
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v6;
        *(_BYTE *)(a1 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(_BYTE *)a1 = 0;
    v7 = v12;
    *(_BYTE *)(a1 + 16) = 0;
    if (v7 && v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v5);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  v8 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (result)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext19PermissionsContainsEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext19PermissionsContainsEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext19PermissionsContainsEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3204;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl ***)(a1 + 8);
    if (v3)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    if (*(_QWORD *)a1)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)a1, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18PermissionsRequestEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18PermissionsRequestEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18PermissionsRequestEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3207;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsRemoveEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsRemoveEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsRemoveEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3206;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeGetBackgroundPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeGetBackgroundPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeGetBackgroundPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3210;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 24);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_6;
    }
LABEL_9:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(v12);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 24))
    goto LABEL_9;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v5, (uint64_t *)(a2 + 8));
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3211;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  char v18;
  _BYTE v19[184];
  _OWORD v20[2];
  uint64_t v21[5];
  char v22;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v13);
  if (v14)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v15);
    if (v16)
    {
      result = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(a2, (uint64_t)&v17);
      v7 = v22;
      if (v22)
      {
        if (!v14 || !v16)
        {
          __break(1u);
          return result;
        }
        v8 = v13;
        v13 = 0;
        v9 = v15;
        v15 = 0;
        *(_QWORD *)a1 = v8;
        *(_QWORD *)(a1 + 8) = v9;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 24) = 0;
        if (v18)
        {
          v10 = v17;
          v17 = 0;
          *(_QWORD *)(a1 + 16) = v10;
          *(_BYTE *)(a1 + 24) = 1;
        }
        *(_BYTE *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 208) = 0;
        if (v19[176])
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(a1 + 32, (uint64_t)v19);
          *(_BYTE *)(a1 + 208) = 1;
        }
        *(_OWORD *)(a1 + 216) = v20[0];
        *(_OWORD *)(a1 + 225) = *(_OWORD *)((char *)v20 + 9);
        WTF::URL::URL(a1 + 248, v21);
        v7 = 1;
      }
      else
      {
        *(_BYTE *)a1 = 0;
      }
      *(_BYTE *)(a1 + 288) = v7;
      result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v6);
      if (v16)
      {
        result = v15;
        v15 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 288) = 0;
    }
    if (v14)
    {
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 288) = 0;
  }
  if (!*(_BYTE *)(a1 + 288))
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v12)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 272))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18RuntimeSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18RuntimeSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18RuntimeSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3212;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 288))
  {
    v3 = *(WTF::StringImpl **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a1 + 32, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, v4);
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WebKit::WebExtensionMessageSenderParameters>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17[34];
  char v18;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v13);
  if (v14)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v5 && (v6 = result, result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v15), v16))
    {
      result = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(a2, (uint64_t)v17);
      v8 = v18;
      if (v18)
      {
        if (!v14 || !v16)
        {
          __break(1u);
          return result;
        }
        v9 = v13;
        v13 = 0;
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = v6;
        v10 = v15;
        v15 = 0;
        *(_QWORD *)(a1 + 16) = v10;
        std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>(a1 + 24, v17);
        v8 = 1;
      }
      else
      {
        *(_BYTE *)a1 = 0;
      }
      *(_BYTE *)(a1 + 296) = v8;
      result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v7);
      if (v16)
      {
        result = v15;
        v15 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 296) = 0;
    }
    if (v14)
    {
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 296) = 0;
  }
  if (!*(_BYTE *)(a1 + 296))
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v12)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
    }
  }
  return result;
}

uint64_t std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (*((_BYTE *)a2 + 8))
  {
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  *(_BYTE *)(a1 + 16) = 0;
  v5 = a1 + 16;
  *(_BYTE *)(a1 + 192) = 0;
  if (*((_BYTE *)a2 + 192))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(v5, (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 192) = 1;
  }
  v6 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 209) = *(_OWORD *)((char *)a2 + 209);
  *(_OWORD *)(a1 + 200) = v6;
  WTF::URL::URL(a1 + 232, a2 + 29);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14RuntimeConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14RuntimeConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14RuntimeConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3209;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 296))
  {
    v3 = *(WTF::StringImpl **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v4);
    v6 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeSendNativeMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeSendNativeMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeSendNativeMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3213;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20RuntimeConnectNativeEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSC_INS7_26WebPageProxyIdentifierTypeESF_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20RuntimeConnectNativeEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSC_INS7_26WebPageProxyIdentifierTypeESF_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20RuntimeConnectNativeEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSC_INS7_26WebPageProxyIdentifierTypeESF_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3208;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25RuntimeWebPageSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25RuntimeWebPageSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25RuntimeWebPageSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3215;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21RuntimeWebPageConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21RuntimeWebPageConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21RuntimeWebPageConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3214;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  char v31;

  IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionParameters>((uint64_t)&v15, a2);
  if (v31)
  {
    *(_OWORD *)a1 = v15;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    if (v17)
    {
      v5 = v16;
      v16 = 0;
      *(_QWORD *)(a1 + 16) = v5;
      *(_BYTE *)(a1 + 24) = 1;
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if (v20)
    {
      *(_QWORD *)(a1 + 32) = v18;
      v6 = v19;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)(a1 + 40) = v6;
      *(_BYTE *)(a1 + 48) = 1;
    }
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    if (v23)
    {
      *(_QWORD *)(a1 + 56) = v21;
      v7 = v22;
      v21 = 0;
      v22 = 0;
      *(_QWORD *)(a1 + 64) = v7;
      *(_BYTE *)(a1 + 72) = 1;
    }
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    if (v25)
    {
      v8 = v24;
      v24 = 0;
      *(_QWORD *)(a1 + 80) = v8;
      *(_BYTE *)(a1 + 88) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v27)
    {
      v9 = v26;
      v26 = 0;
      *(_QWORD *)(a1 + 96) = v9;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    if (v29)
    {
      v10 = v28;
      v28 = 0;
      *(_QWORD *)(a1 + 112) = v10;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_WORD *)(a1 + 128) = v30;
    *(_BYTE *)(a1 + 136) = 1;
    return std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v4);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 136) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v4);
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  }
  return result;
}

void IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionParameters>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 136))
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 136))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 112, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 96, v3);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 80, v4);
    if (*(_BYTE *)(a1 + 72))
    {
      v6 = *(WTF **)(a1 + 56);
      if (v6)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v6, v5);
      }
    }
    if (*(_BYTE *)(a1 + 48))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, v5);
    if (*(_BYTE *)(a1 + 24))
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v7)
        CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22ScriptingExecuteScriptEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22ScriptingExecuteScriptEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22ScriptingExecuteScriptEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3216;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
      return;
    }
    goto LABEL_9;
  }
  *v5 = 1;
  if (*(_DWORD *)(a2 + 16))
  {
LABEL_9:
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(v10);
    return;
  }
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 48 * v7;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::encode(a1, v8);
      v8 += 48;
      v9 -= 48;
    }
    while (v9);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3218;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingRemoveCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingRemoveCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingRemoveCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3220;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v10);
  if (v12)
  {
    *(_QWORD *)a1 = v10;
    v5 = v11;
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    result = WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext31ScriptingRegisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext31ScriptingRegisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext31ScriptingRegisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3219;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext32ScriptingUpdateRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext32ScriptingUpdateRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext32ScriptingUpdateRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS7_38WebExtensionRegisteredScriptParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3222;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext29ScriptingGetRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_INS7_38WebExtensionRegisteredScriptParametersELm0ESB_Lm16ESC_EESA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext29ScriptingGetRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_INS7_38WebExtensionRegisteredScriptParametersELm0ESB_Lm16ESC_EESA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext29ScriptingGetRegisteredScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_INS7_38WebExtensionRegisteredScriptParametersELm0ESB_Lm16ESC_EESA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3217;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v17 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      v8 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
      v9 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)a2;
        v11 = 120 * v9;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::encode((IPC::Encoder *)v5, v10);
          v10 += 120;
          v11 -= 120;
        }
        while (v11);
      }
      goto LABEL_8;
    }
LABEL_11:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v16);
  }
  *v7 = 0;
  if (*(_DWORD *)(a2 + 16) != 1)
    goto LABEL_11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ScriptingUnregisterContentScriptsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3221;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unsigned __int16 v7;
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4, v7 = IPC::Decoder::decode<WebKit::WebExtensionDataType>(a2), v7 > 0xFFu)
    && (v9 = v7,
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v8, (uint64_t)&v16), v18))
  {
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v16;
    v11 = v17;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)(a1 + 24) = v11;
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v10);
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v13 = *a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v15 = v14 == 0;
    else
      v15 = 1;
    if (!v15)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionDataType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionDataType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionDataType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v13;
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (!v7)
    {
LABEL_10:
      LODWORD(v8) = 0;
      return v7 | ((_DWORD)v8 << 8);
    }
    if (v9)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v10);
LABEL_9:
    LOBYTE(v7) = 0;
    goto LABEL_10;
  }
  v5 = *v4;
  if (v5 > 4)
    goto LABEL_9;
  v6 = 8 * v5;
  v7 = 0x400020100uLL >> v6;
  v8 = 0x100010100uLL >> v6;
  return v7 | ((_DWORD)v8 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISG_SG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISG_SG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISG_SG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3225;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20StorageGetBytesInUseEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedImSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20StorageGetBytesInUseEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedImSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20StorageGetBytesInUseEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedImSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3224;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(v13);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 8))
    goto LABEL_9;
  v8 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10StorageSetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSF_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3228;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13StorageRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13StorageRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13StorageRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3226;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12StorageClearEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12StorageClearEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12StorageClearEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3223;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21StorageSetAccessLevelEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeENS7_30WebExtensionStorageAccessLevelEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F8FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21StorageSetAccessLevelEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeENS7_30WebExtensionStorageAccessLevelEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F8FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21StorageSetAccessLevelEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_20WebExtensionDataTypeENS7_30WebExtensionStorageAccessLevelEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3227;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    WTF::URL::URL(v4, (uint64_t *)(a2 + 16));
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v5 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v5;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 154) = *(_OWORD *)(a2 + 154);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsCreateEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISH_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsCreateEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISH_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsCreateEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISH_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3231;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  id v8;

  v4 = *(_DWORD *)(a2 + 192);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 192) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
      return;
    }
    goto LABEL_9;
  }
  *v5 = 1;
  if (*(_DWORD *)(a2 + 192))
  {
LABEL_9:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_10;
  }
  v6 = *(unsigned __int8 *)(a2 + 184);
  v7 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    *v7 = 0;
    return;
  }
  *v7 = 1;
  if (*(_BYTE *)(a2 + 184))
  {
    IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(a1, a2 + 8);
    return;
  }
LABEL_10:
  v8 = std::__throw_bad_optional_access[abi:sn180100]();
  _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSF_ISJ_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(v8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSF_ISJ_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSF_ISJ_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSF_ISJ_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3248;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsDuplicateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsDuplicateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsDuplicateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS7_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3233;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext7TabsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext7TabsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext7TabsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3236;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14TabsGetCurrentEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F90A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14TabsGetCurrentEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F90A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14TabsGetCurrentEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_25WebExtensionTabParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3235;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9TabsQueryEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS7_30WebExtensionTabQueryParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_25WebExtensionTabParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F90D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9TabsQueryEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS7_30WebExtensionTabQueryParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_25WebExtensionTabParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F90D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9TabsQueryEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS7_30WebExtensionTabQueryParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_25WebExtensionTabParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3241;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v17 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      v8 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
      v9 = *(_DWORD *)(a2 + 12);
      if (v9)
      {
        v10 = *(_QWORD *)a2;
        v11 = 176 * v9;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode((IPC::Encoder *)v5, v10);
          v10 += 176;
          v11 -= 176;
        }
        while (v11);
      }
      goto LABEL_8;
    }
LABEL_11:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEENS8_16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(v16);
  }
  *v7 = 0;
  if (*(_DWORD *)(a2 + 16) != 1)
    goto LABEL_11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEENS8_16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F90F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEENS8_16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F90F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsReloadEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEENS8_16ReloadFromOriginEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3242;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  char v12;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v11), v12))
  {
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsGoBackEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsGoBackEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsGoBackEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3238;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsGoForwardEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsGoForwardEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsGoForwardEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3239;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18TabsDetectLanguageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18TabsDetectLanguageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18TabsDetectLanguageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESN_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3232;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20TabsToggleReaderModeEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20TabsToggleReaderModeEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20TabsToggleReaderModeEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3247;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21TabsCaptureVisibleTabEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEEEENS7_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F91C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21TabsCaptureVisibleTabEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEEEENS7_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F91C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21TabsCaptureVisibleTabEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEEEENS7_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3229;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 40);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 40) == 1)
      goto LABEL_3;
LABEL_7:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_SE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(v12);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 40))
    goto LABEL_7;
LABEL_3:
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_SE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F91E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_SE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F91E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15TabsSendMessageEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_SE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3245;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsConnectEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_37WebExtensionPortChannelIdentifierTypeESC_yEENS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsConnectEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_37WebExtensionPortChannelIdentifierTypeESC_yEENS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsConnectEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_37WebExtensionPortChannelIdentifierTypeESC_yEENS_6StringENSt3__18optionalINS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3230;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsGetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIdNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsGetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIdNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsGetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIdNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3237;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(v13);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 8))
    goto LABEL_9;
  v8 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9260;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9260;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11TabsSetZoomEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3246;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsRemoveEN6WebKit19WebExtensionContextES8_FvNS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsRemoveEN6WebKit19WebExtensionContextES8_FvNS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10TabsRemoveEN6WebKit19WebExtensionContextES8_FvNS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3244;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int16 v35;
  char v36;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v18), v19))
  {
    IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionParameters>((uint64_t)&v20, a2);
    if (v36)
    {
      if (v19)
      {
        *(_QWORD *)a1 = v6;
        *(_OWORD *)(a1 + 8) = v18;
        *(_OWORD *)(a1 + 24) = v20;
        *(_BYTE *)(a1 + 40) = 0;
        *(_BYTE *)(a1 + 48) = 0;
        if (v22)
        {
          v8 = v21;
          v21 = 0;
          *(_QWORD *)(a1 + 40) = v8;
          *(_BYTE *)(a1 + 48) = 1;
        }
        *(_BYTE *)(a1 + 56) = 0;
        *(_BYTE *)(a1 + 72) = 0;
        if (v25)
        {
          *(_QWORD *)(a1 + 56) = v23;
          v9 = v24;
          v23 = 0;
          v24 = 0;
          *(_QWORD *)(a1 + 64) = v9;
          *(_BYTE *)(a1 + 72) = 1;
        }
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        if (v28)
        {
          *(_QWORD *)(a1 + 80) = v26;
          v10 = v27;
          v26 = 0;
          v27 = 0;
          *(_QWORD *)(a1 + 88) = v10;
          *(_BYTE *)(a1 + 96) = 1;
        }
        *(_BYTE *)(a1 + 104) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v30)
        {
          v11 = v29;
          v29 = 0;
          *(_QWORD *)(a1 + 104) = v11;
          *(_BYTE *)(a1 + 112) = 1;
        }
        *(_BYTE *)(a1 + 120) = 0;
        *(_BYTE *)(a1 + 128) = 0;
        if (v32)
        {
          v12 = v31;
          v31 = 0;
          *(_QWORD *)(a1 + 120) = v12;
          *(_BYTE *)(a1 + 128) = 1;
        }
        *(_BYTE *)(a1 + 136) = 0;
        *(_BYTE *)(a1 + 144) = 0;
        if (v34)
        {
          v13 = v33;
          v33 = 0;
          *(_QWORD *)(a1 + 136) = v13;
          *(_BYTE *)(a1 + 144) = 1;
        }
        *(_WORD *)(a1 + 152) = v35;
        *(_BYTE *)(a1 + 160) = 1;
        std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v7);
      }
      else
      {
        __break(1u);
      }
      return;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 160) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v7);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 160) = 0;
  }
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (!v17)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17TabsExecuteScriptEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F92B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17TabsExecuteScriptEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F92B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17TabsExecuteScriptEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EE4callESX_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3234;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionScriptInjectionParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 160))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 136, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 120, v3);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 104, v4);
    if (*(_BYTE *)(a1 + 96))
    {
      v6 = *(WTF **)(a1 + 80);
      if (v6)
      {
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 88) = 0;
        WTF::fastFree(v6, v5);
      }
    }
    if (*(_BYTE *)(a1 + 72))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v5);
    if (*(_BYTE *)(a1 + 48))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (v7)
        CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsInsertCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F92D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsInsertCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F92D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsInsertCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3240;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsRemoveCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsRemoveCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13TabsRemoveCSSEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINS9_INS7_29WebExtensionTabIdentifierTypeESC_yEEEERKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3243;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25WebNavigationGetAllFramesEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_27WebExtensionFrameParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25WebNavigationGetAllFramesEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_27WebExtensionFrameParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25WebNavigationGetAllFramesEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_27WebExtensionFrameParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3249;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v17 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      v8 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
      v9 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)a2;
        v11 = 80 * v9;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::encode((IPC::Encoder *)v5, v10);
          v10 += 80;
          v11 -= 80;
        }
        while (v11);
      }
      goto LABEL_8;
    }
LABEL_11:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(v16);
  }
  *v7 = 0;
  if (*(_DWORD *)(a2 + 16) != 1)
    goto LABEL_11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WebNavigationGetFrameEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_31WebExtensionFrameIdentifierTypeESC_yEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS7_27WebExtensionFrameParametersEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  id v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3250;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v15 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 96);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 96) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 96))
  {
LABEL_12:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_13;
  }
  v8 = *(unsigned __int8 *)(a2 + 88);
  v9 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    if (!*(_BYTE *)(a2 + 88))
    {
LABEL_13:
      v14 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v14);
    }
    IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::encode((IPC::Encoder *)v5, a2 + 8);
  }
  else
  {
    *v9 = 0;
  }
LABEL_9:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIS9_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  id v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3251;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v15 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 112);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 112) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 112))
  {
LABEL_12:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_13;
  }
  v8 = *(unsigned __int8 *)(a2 + 104);
  v9 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    if (!*(_BYTE *)(a2 + 104))
    {
LABEL_13:
      v14 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(v14);
    }
    IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode((IPC::Encoder *)v5, a2 + 8);
  }
  else
  {
    *v9 = 0;
  }
LABEL_9:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F93A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F93A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10WindowsGetEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_32WebExtensionWindowIdentifierTypeESC_yEENS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3254;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;

  v4 = *(_DWORD *)(a2 + 104);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 104) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
      return;
    }
  }
  else
  {
    *v5 = 1;
    if (!*(_DWORD *)(a2 + 104))
    {
      IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(a1, a2 + 8);
      return;
    }
  }
  v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>(v6);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>(uint64_t *a1)
{
  unsigned __int16 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  unsigned __int8 v6;
  unsigned __int16 v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  if (v2 >= 0x100u)
  {
    v6 = v2;
    v7 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a1);
    v5 = v7 > 0xFFu;
    if ((v7 & 0xFF00) != 0)
      v4 = v6;
    else
      v4 = 0;
    if ((v7 & 0xFF00) != 0)
      v3 = v7;
    else
      v3 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v8 = v5 << 16;
  result = v8 & 0xFFFF0000 | (v3 << 8) | v4;
  if (!v8)
  {
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v11)
      {
        v13 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
        return v13;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WindowsGetLastFocusedEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F93C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WindowsGetLastFocusedEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F93C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21WindowsGetLastFocusedEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_28WebExtensionWindowParametersENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3253;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsGetAllEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionWindowParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F93F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsGetAllEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionWindowParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F93F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsGetAllEN6WebKit19WebExtensionContextES8_FvNS_9OptionSetINS7_28WebExtensionWindowTypeFilterEEENS7_18WebExtensionWindow12PopulateTabsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionWindowParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3252;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v17 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      v8 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
      v9 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)a2;
        v11 = 96 * v9;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode((IPC::Encoder *)v5, v10);
          v10 += 96;
          v11 -= 96;
        }
        while (v11);
      }
      goto LABEL_8;
    }
LABEL_11:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v16);
  }
  *v7 = 0;
  if (*(_DWORD *)(a2 + 16) != 1)
    goto LABEL_11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9418;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9418;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsUpdateEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS7_28WebExtensionWindowParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISE_NS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3256;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13WindowsRemoveEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3255;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::get@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  v4 = a1;
  {
    WebKit::webExtensionContextProxies(void)::contexts = 0;
  }
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::webExtensionContextProxies(void)::contexts, &v4);
  if (result)
    ++*(_DWORD *)(result + 16);
  *a2 = result;
  return result;
}

WebKit::WebExtensionContextProxy *WebKit::WebExtensionContextProxy::WebExtensionContextProxy(WebKit::WebExtensionContextProxy *this, const WebKit::WebExtensionContextParameters *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  WebKit::WebProcess *v28;
  unsigned int *v29;
  _QWORD v30[2];

  *((_QWORD *)this + 1) = 0;
  v3 = (unsigned int *)((char *)this + 8);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34F94D0;
  *((_QWORD *)this + 3) = *(_QWORD *)a2;
  *((_QWORD *)this + 4) = 0;
  WTF::URL::URL((WebKit::WebExtensionContextProxy *)((char *)this + 40));
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0x7FF8000000000000;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  {
    v4 = WebKit::webExtensionContextProxies(void)::contexts;
    if (WebKit::webExtensionContextProxies(void)::contexts)
    {
LABEL_4:
      v5 = *(_DWORD *)(v4 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    WebKit::webExtensionContextProxies(void)::contexts = 0;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
  v4 = WebKit::webExtensionContextProxies(void)::contexts;
  if (WebKit::webExtensionContextProxies(void)::contexts)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  v6 = *((_QWORD *)this + 3);
  v7 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v5 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v4 + 16 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_13:
    *v11 = v6;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v3, (uint64_t)this);
    v16 = *(unsigned int **)v3;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v18 = (unsigned int *)v11[1];
    v11[1] = v16;
    if (v18)
    {
      do
      {
        v20 = __ldaxr(v18);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v18));
      if (!v21)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v15);
      }
    }
    if (WebKit::webExtensionContextProxies(void)::contexts)
      v19 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12) = v19;
    if (WebKit::webExtensionContextProxies(void)::contexts)
      v22 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 16) + v22);
    v24 = *(unsigned int *)(WebKit::webExtensionContextProxies(void)::contexts - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        goto LABEL_28;
    }
    else if (3 * v24 > 4 * v23)
    {
      goto LABEL_28;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
    goto LABEL_28;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != v6)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v5;
    v11 = (_QWORD *)(v4 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v4 - 16);
        v6 = *((_QWORD *)this + 3);
        v11 = v13;
      }
      goto LABEL_13;
    }
  }
LABEL_28:
  {
    v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v25 = WebKit::WebProcess::WebProcess(v28);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v25;
  }
  v26 = *((_QWORD *)this + 3);
  v30[0] = 161;
  v30[1] = v26;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v25 + 6, (unsigned __int8 *)v30, (uint64_t)this, &v29);
  return this;
}

void sub_1977746FC(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v5 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::~WebExtensionContextProxy(unsigned int **this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  WTF::StringImpl **v11;
  unsigned int *v12;
  unsigned int *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebKit::WebProcess *v20;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::WebProcess *)((char *)v2 + 40), (IPC::MessageReceiver *)this);
  v4 = (uint64_t)this[24];
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  v5 = (uint64_t)this[22];
  if (v5)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v5, v3);
  v6 = this[21];
  this[21] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v3);
    }
  }
  v9 = (uint64_t)this[19];
  if (v9)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v9, v3);
  v10 = this[18];
  this[18] = 0;
  if (v10)
    WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v10);
  v11 = (WTF::StringImpl **)this[16];
  if (v11)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, (WTF::StringImpl *)v3);
  v12 = this[13];
  this[13] = 0;
  if (v12)
    CFRelease(v12);
  v13 = this[12];
  this[12] = 0;
  if (v13)
    CFRelease(v13);
  v14 = (WTF::StringImpl **)this[11];
  if (v14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, (WTF::StringImpl *)v3);
  v15 = (WTF::StringImpl *)this[10];
  this[10] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)this[5];
  this[5] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = this[4];
  this[4] = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v3);
    }
  }
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionContextProxy::~WebExtensionContextProxy(this);
  WTF::fastFree(v1, v2);
}

void WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextProxy *this@<X0>, const WebKit::WebExtensionContextParameters *a2@<X1>, WebKit::WebExtensionControllerProxy *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  WebKit::WebExtensionContextProxy *v8;
  uint64_t v9;
  uint64_t v10[3];
  WebKit::WebExtensionControllerProxy *v11;

  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)this;
  v10[2] = (uint64_t)&v11;
  v11 = a3;
  WebKit::WebExtensionContextProxy::get(*(_QWORD *)this, &v9);
  v7 = v9;
  if (v9)
  {
    WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextParameters const&,WebKit::WebExtensionControllerProxy &,WebKit::WebPage *)::$_0::operator()(v10, v9);
    ++*(_DWORD *)(v7 + 16);
    *a4 = v7;
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v7 + 16));
  }
  else
  {
    v8 = (WebKit::WebExtensionContextProxy *)WTF::fastMalloc((WTF *)0xD0);
    WebKit::WebExtensionContextProxy::WebExtensionContextProxy(v8, this);
    *a4 = v8;
    WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextParameters const&,WebKit::WebExtensionControllerProxy &,WebKit::WebPage *)::$_0::operator()(v10, (uint64_t)v8);
  }
}

void sub_197774A94(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::getOrCreate(WebKit::WebExtensionContextParameters const&,WebKit::WebExtensionControllerProxy &,WebKit::WebPage *)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::URL *v15;
  _WKWebExtensionLocalization *v16;
  void *v17;
  uint64_t v18;
  __CFString *v19;
  _WKWebExtensionLocalization *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  WebKit::WebPage *v26;
  WebKit::WebProcess *v27;
  uint64_t v28;
  CFTypeRef *v29;
  uint64_t v30;
  _QWORD **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  WebKit::WebProcess *v37;
  uint64_t v38;
  CFTypeRef *v39;
  __int128 v40;
  WebKit::WebProcess *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  WebKit::WebProcess *v48;
  uint64_t v49;
  CFTypeRef *v50;
  __int128 v51;
  WebKit::WebProcess *v52;
  WebKit::WebProcess *v53;
  WTF::StringImpl *v54;
  _Unwind_Exception *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57[2];
  __int128 v58;

  v4 = *a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a1 + 8), *a1);
  v6 = *(unsigned int **)(v4 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(unsigned int **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
  }
  v11 = (_OWORD *)a1[1];
  WTF::String::operator=((WTF::StringImpl **)(a2 + 40), (WTF::StringImpl *)((char *)v11 + 8));
  v12 = v11[2];
  *(_OWORD *)(a2 + 48) = v11[1];
  *(_OWORD *)(a2 + 64) = v12;
  WTF::String::operator=((WTF::StringImpl **)(a2 + 80), (WTF::StringImpl *)(a1[1] + 48));
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(a2 + 88), (_QWORD **)(a1[1] + 56));
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(a2 + 128), (_QWORD **)(a1[1] + 64));
  v13 = a1[1];
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (WTF::URL *)(v13 + 8);
  v16 = [_WKWebExtensionLocalization alloc];
  WebKit::parseJSON(v14, 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::URL::host(v15);
  if ((v18 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  if (v57[0])
    v19 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v19 = &stru_1E351F1B8;
  v20 = -[_WKWebExtensionLocalization initWithLocalizedDictionary:uniqueIdentifier:](v16, "initWithLocalizedDictionary:uniqueIdentifier:", v17, v19);

  v22 = v57[0];
  v57[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }

  WTF::RetainPtr<_WKWebExtensionLocalization>::operator=((const void **)(a2 + 96), v20);
  WebKit::parseJSON(*(_QWORD *)(a1[1] + 80), 0, 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSDictionary>::RetainPtr(v57, v23);
  v24 = *(const void **)(a2 + 104);
  *(WTF::StringImpl **)(a2 + 104) = v57[0];
  v57[0] = 0;
  if (v24)
    CFRelease(v24);

  v25 = a1[1];
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v25 + 88);
  *(_BYTE *)(a2 + 120) = *(_BYTE *)(v25 + 96);
  if (*(_BYTE *)(v25 + 112))
  {
    v26 = *(WebKit::WebPage **)a1[2];
    if (v26 && *(_QWORD *)(v25 + 104) == *((_QWORD *)v26 + 5))
    {
      WebKit::WebExtensionContextProxy::setBackgroundPage((WebKit::WebExtensionContextProxy *)a2, v26);
    }
    else
    {
      {
        v27 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v27 = WebKit::WebProcess::WebProcess(v53);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v27;
        v25 = a1[1];
        if (!*(_BYTE *)(v25 + 112))
        {
          v55 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
          v56 = v57[0];
          v57[0] = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v54);
            else
              *(_DWORD *)v56 -= 2;
          }

          _Unwind_Resume(v55);
        }
      }
      v57[0] = *(WTF::StringImpl **)(v25 + 104);
      v28 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v27 + 14, v57);
      if (v28)
      {
        v29 = (CFTypeRef *)v28;
        CFRetain(*(CFTypeRef *)(v28 + 8));
        WebKit::WebExtensionContextProxy::setBackgroundPage((WebKit::WebExtensionContextProxy *)a2, (WebKit::WebPage *)v29);
        CFRelease(v29[1]);
      }
    }
  }
  v30 = a1[1];
  v31 = (_QWORD **)a1[2];
  v32 = *(unsigned int *)(v30 + 132);
  if ((_DWORD)v32)
  {
    v33 = *(_QWORD *)(v30 + 120);
    v34 = 40 * v32;
    do
    {
      v35 = *v31;
      if (*v31 && *(_QWORD *)v33 == v35[5])
      {
        v36 = *(_OWORD *)(v33 + 24);
        *(_OWORD *)v57 = *(_OWORD *)(v33 + 8);
        v58 = v36;
        WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2 + 176, v35, (uint64_t *)v57);
      }
      else
      {
        {
          v37 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v37 = WebKit::WebProcess::WebProcess(v41);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v37;
        }
        v57[0] = *(WTF::StringImpl **)v33;
        v38 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v37 + 14, v57);
        if (v38)
        {
          v39 = (CFTypeRef *)v38;
          CFRetain(*(CFTypeRef *)(v38 + 8));
          v40 = *(_OWORD *)(v33 + 24);
          *(_OWORD *)v57 = *(_OWORD *)(v33 + 8);
          v58 = v40;
          WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2 + 176, v39, (uint64_t *)v57);
          CFRelease(v39[1]);
        }
      }
      v33 += 40;
      v34 -= 40;
    }
    while (v34);
    v30 = a1[1];
  }
  v42 = *(unsigned int *)(v30 + 148);
  if ((_DWORD)v42)
  {
    v43 = *(_QWORD *)(v30 + 136);
    v44 = a2 + 192;
    v45 = 40 * v42;
    do
    {
      v46 = *v31;
      if (*v31 && *(_QWORD *)v43 == v46[5])
      {
        v47 = *(_OWORD *)(v43 + 24);
        *(_OWORD *)v57 = *(_OWORD *)(v43 + 8);
        v58 = v47;
        WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v44, v46, (uint64_t *)v57);
      }
      else
      {
        {
          v48 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v52 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v48 = WebKit::WebProcess::WebProcess(v52);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v48;
        }
        v57[0] = *(WTF::StringImpl **)v43;
        v49 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v48 + 14, v57);
        if (v49)
        {
          v50 = (CFTypeRef *)v49;
          CFRetain(*(CFTypeRef *)(v49 + 8));
          v51 = *(_OWORD *)(v43 + 24);
          *(_OWORD *)v57 = *(_OWORD *)(v43 + 8);
          v58 = v51;
          WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v44, v50, (uint64_t *)v57);
          CFRelease(v50[1]);
        }
      }
      v43 += 40;
      v45 -= 40;
    }
    while (v45);
  }
}

WTF::StringImpl *WebKit::WebExtensionContextProxy::isUnsupportedAPI(WebKit::WebExtensionContextProxy *this, WTF::StringImpl **a2, const WTF::ASCIILiteral *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  __int128 v18;

  v4 = *a2;
  if (*a2 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    v15 = v4;
    v18 = *(_OWORD *)a3;
    v17 = 46;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v15, &v17, (uint64_t *)&v18, &v16);
    result = v16;
    if (!v16)
    {
      __break(0xC471u);
      return result;
    }
    v6 = v15;
    v15 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        result = v16;
      }
      else
      {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v7)
    {
      a2 = (WTF::StringImpl **)(v7 - 1);
      if (v7 == 1)
      {
        result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        result = (WTF::StringImpl *)v18;
      }
      v16 = result;
    }
    else
    {
      result = 0;
      v16 = 0;
    }
  }
  v8 = *((_QWORD *)this + 11);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = *((_DWORD *)result + 4);
    if (v10 >= 0x100)
      v11 = v10 >> 8;
    else
      v11 = WTF::StringImpl::hashSlowCase(result);
    for (i = 0; ; v11 = i + v13)
    {
      v13 = v11 & v9;
      v14 = *(WTF **)(v8 + 8 * (v11 & v9));
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          v8 = 0;
          goto LABEL_28;
        }
        if ((WTF::equal(v14, v16, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v8 = 1;
LABEL_28:
    result = v16;
  }
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return (WTF::StringImpl *)v8;
}

void sub_197775114(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebExtensionContextProxy::hasPermission(WebKit::WebExtensionContextProxy *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  WTF::WallTime::now(this);
  v7 = v6;
  if (*((double *)this + 17) <= v6)
  {
    v8 = (uint64_t *)((char *)this + 128);
    v9 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = 0x7FF0000000000000;
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 4);
      if (v10)
      {
        v11 = 0;
        v12 = v10 - 1;
        do
        {
          v13 = v12;
          v14 = (WTF::StringImpl **)(v9 + 16 * v12);
          if ((unint64_t)*v14 + 1 >= 2)
          {
            v15 = *(double *)(v9 + 16 * v12 + 8);
            if (v15 <= v7)
            {
              WTF::HashTraits<WTF::String>::customDeleteBucket(v14, v4);
              ++v11;
            }
            else if (v15 < *((double *)this + 17))
            {
              *((double *)this + 17) = v15;
            }
          }
          --v12;
        }
        while (v13);
        v16 = *v8;
        if (v11)
        {
          *(_DWORD *)(v16 - 16) += v11;
          v17 = *v8;
          if (*v8)
            v18 = *(_DWORD *)(v17 - 12);
          else
            v18 = 0;
          *(_DWORD *)(v17 - 12) = v18 - v11;
          v16 = *v8;
        }
        if (v16)
        {
          v19 = *(_DWORD *)(v16 - 4);
          v20 = 6 * *(_DWORD *)(v16 - 12);
          if (v19 >= 9 && v20 < v19)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize((uint64_t *)this + 16);
        }
      }
    }
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 16, a2, v5);
}

uint64_t WebKit::WebExtensionContextProxy::toDOMWrapperWorld(WebCore *a1, int a2)
{
  uint64_t result;

  if (a2 != 1)
    return WebCore::mainThreadNormalWorld(a1);
  result = *((_QWORD *)a1 + 18);
  if (!result)
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (unsigned int **)(a1 + 40 * i);
      v6 = *v5;
      if (*v5 != (unsigned int *)-1)
      {
        *v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContextProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _DWORD *result;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  v0 = WebKit::webExtensionContextProxies(void)::contexts;
  if (WebKit::webExtensionContextProxies(void)::contexts)
  {
    v1 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 4);
    v2 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12);
    if (v1)
    {
      v3 = v1 << (6 * v2 >= (2 * v1));
      goto LABEL_6;
    }
  }
  else
  {
    v1 = 0;
    v2 = 0;
  }
  v3 = 8;
LABEL_6:
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v3 + 16));
  WebKit::webExtensionContextProxies(void)::contexts = (uint64_t)(result + 4);
  result[2] = v3 - 1;
  result[3] = v3;
  *result = 0;
  *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 12) = v2;
  if (v1)
  {
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t *)(v0 + 16 * v6);
      v8 = *v7;
      if (*v7 != -1)
      {
        if (v8)
        {
          if (WebKit::webExtensionContextProxies(void)::contexts)
            v13 = *(_DWORD *)(WebKit::webExtensionContextProxies(void)::contexts - 8);
          else
            v13 = 0;
          v14 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(WebKit::webExtensionContextProxies(void)::contexts + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (uint64_t *)(WebKit::webExtensionContextProxies(void)::contexts + 16 * v19);
          v22 = (unsigned int *)v21[1];
          v21[1] = 0;
          if (v22)
          {
            do
            {
              v25 = __ldaxr(v22);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v22));
            if (!v26)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v5);
            }
          }
          *v21 = *v7;
          v23 = v0 + 16 * v6;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          v21[1] = v24;
          v10 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (!v10)
            goto LABEL_21;
          do
          {
            v27 = __ldaxr(v10);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v10));
          if (v28)
            goto LABEL_21;
        }
        else
        {
          v9 = v0 + 16 * v6;
          v10 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (!v10)
            goto LABEL_21;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (v12)
            goto LABEL_21;
        }
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v5);
      }
LABEL_21:
      if (++v6 == v1)
        return (_DWORD *)WTF::fastFree((WTF *)(v0 - 16), v5);
    }
  }
  if (v0)
    return (_DWORD *)WTF::fastFree((WTF *)(v0 - 16), v5);
  return result;
}

unsigned int **WebKit::WebExtensionContextProxy::didReceiveMessage(WebKit::WebExtensionContextProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned __int8 v3;
  unsigned int **v4;
  uint64_t *v5;
  unsigned __int8 **v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  char v18;
  __int128 v19;
  const void *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  char v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  char v51;
  unsigned __int16 v52;
  char v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  char v67;
  WTF::StringImpl *v68;
  unsigned __int16 v69;
  WTF::StringImpl *v70;
  int v71;
  int v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  BOOL v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  __int128 v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  __int128 v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  WTF::StringImpl *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  WTF *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v122;
  uint64_t v123;
  unsigned __int16 v124;
  char v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  char v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  char v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unsigned __int16 v135;
  char v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  char v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  unint64_t v151;
  char v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned __int8 *v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  char v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  __int128 v186;
  const void *v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  unint64_t v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  char v196;
  WTF::StringImpl *v197;
  __int128 v198;
  unsigned __int16 v199;
  char v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  const void *v216;
  WTF::StringImpl *v217;
  const void *v218;
  const void *v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  CFTypeRef v230;
  WTF::StringImpl *v231;
  const void *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  unint64_t v236;
  WTF::StringImpl *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  unint64_t v243;
  WTF::StringImpl *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  void *v261;
  WTF::StringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _BYTE v325[56];
  WTF::StringImpl *v326[2];
  _BYTE v327[32];
  char v328;
  int v329;
  BOOL v330;
  _OWORD v331[2];
  char v332;
  WTF::StringImpl *v333;
  __int128 v334;
  WTF::StringImpl *v335[2];
  _BYTE v336[56];
  _BYTE v337[56];
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  CFTypeRef v340[2];
  __int128 v341;
  WTF::StringImpl *v342[2];
  __int128 v343;
  WTF::StringImpl *v344[2];
  __int128 v345;
  _BYTE cf[48];
  __int128 v347;
  uint64_t v348;
  WTF::StringImpl *v349;
  __int128 v350;
  __int128 v351;
  WTF::StringImpl *v352[2];
  WTF::StringImpl *v353;
  uint64_t v354;
  char v355;
  CFTypeRef v356;
  char v357;
  WTF::StringImpl *v358[2];
  __int128 v359;
  __int128 v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  __int128 v363;
  __int128 v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  int v367;
  char v368;
  _BYTE v369[48];
  __int128 v370;
  __int128 v371;
  _BYTE v372[32];
  __int128 v373;
  WTF::StringImpl *v374;
  __int128 v375;
  __int128 v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  char v379;
  const void *v380;
  char v381;
  _BYTE v382[24];
  __int128 v383;
  char v384;
  __int128 v385;
  _BYTE v386[28];
  char v387;
  char v388;
  char v389;
  char v390;
  char v391;
  char v392;
  char v393;
  __int128 v394;
  char v395;

  v4 = (unsigned int **)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  v5 = (uint64_t *)a3;
  v6 = a2;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x61D:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v325);
      if (v325[40])
        WebKit::WebExtensionContextProxy::addPopupPageIdentifier((uint64_t)this, *(uint64_t *)v325, *(uint64_t *)&v325[8], *(uint64_t *)&v325[16], *(uint64_t *)&v325[24], *(uint64_t *)&v325[32]);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x61E:
      v90 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v91)
        goto LABEL_491;
      v92 = v90;
      v93 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v94)
        goto LABEL_491;
      v95 = v93;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v5, v325);
      if (!v325[16])
        goto LABEL_491;
      WebKit::WebExtensionContextProxy::addTabPageIdentifier((uint64_t)this, v92, v95, *(uint64_t *)v325, *(uint64_t *)&v325[8]);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x61F:
      IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>((uint64_t *)a3, v325);
      if (BYTE8(v334))
      {
        v382[0] = 0;
        v389 = 0;
        if ((_BYTE)v334)
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)v382, (uint64_t)v325);
          v389 = 1;
          v390 = 1;
          if (!BYTE8(v334))
            goto LABEL_199;
        }
        else
        {
          v390 = 1;
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v325, v68);
        if (v390)
        {
LABEL_199:
          WebKit::WebExtensionContextProxy::dispatchActionClickedEvent((uint64_t)this, (uint64_t)v382);
          if (v390)
            std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v382, v206);
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      else
      {
        v382[0] = 0;
        v390 = 0;
      }
      v290 = *v5;
      v291 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v292 = v5[3];
      if (!v292)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v291)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v292 + 16))(v292, v290);
      if (!v390)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      goto LABEL_199;
    case 0x620:
      IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>((uint64_t *)a3, (uint64_t)v325);
      if (!v325[32])
        goto LABEL_491;
      *(_OWORD *)&v382[8] = *(_OWORD *)&v325[8];
      *(_QWORD *)v382 = *(_QWORD *)v325;
      *(_QWORD *)&v383 = *(_QWORD *)&v325[24];
      BYTE8(v383) = 1;
      WebKit::WebExtensionContextProxy::dispatchAlarmsEvent((uint64_t)this, (uint64_t)v382);
      if (BYTE8(v383))
      {
        v64 = *(WTF::StringImpl **)v382;
        *(_QWORD *)v382 = 0;
        if (v64)
          goto LABEL_438;
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x621:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>((uint64_t *)a3, v325);
      if (v325[24])
        WebKit::WebExtensionContextProxy::dispatchCommandsChangedEvent(this, (const WTF::String *)v325, (const WTF::String *)&v325[8], (const WTF::String *)&v325[16]);
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v325, v43);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x622:
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v369);
      if (!v369[8])
      {
        v325[0] = 0;
        LOBYTE(v335[0]) = 0;
        goto LABEL_339;
      }
      v16 = (CFTypeRef)IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(v5, v382);
      if (v390)
      {
        if (!v369[8])
          goto LABEL_456;
        v110 = *(_QWORD *)v369;
        *(_QWORD *)v369 = 0;
        *(_QWORD *)v325 = v110;
        v325[8] = 0;
        BYTE8(v334) = 0;
        if (v389)
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)&v325[8], (uint64_t)v382);
          BYTE8(v334) = 1;
          LOBYTE(v335[0]) = 1;
          if (!v390)
            goto LABEL_274;
        }
        else
        {
          LOBYTE(v335[0]) = 1;
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v382, v109);
      }
      else
      {
        v325[0] = 0;
        LOBYTE(v335[0]) = 0;
      }
LABEL_274:
      if (v369[8])
      {
        v222 = *(WTF::StringImpl **)v369;
        *(_QWORD *)v369 = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2)
            WTF::StringImpl::destroy(v222, v109);
          else
            *(_DWORD *)v222 -= 2;
        }
      }
LABEL_339:
      if (LOBYTE(v335[0])
        || (v302 = *v5, v303 = v5[1], *v5 = 0, v5[1] = 0, (v304 = v5[3]) != 0)
        && v303
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v304 + 16))(v304, v302), LOBYTE(v335[0])))
      {
        WebKit::WebExtensionContextProxy::dispatchCommandsCommandEvent((uint64_t)this, (uint64_t)v325, (uint64_t)&v325[8]);
        if (LOBYTE(v335[0]))
        {
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v325[8], v233);
          goto LABEL_342;
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x623:
      WebKit::WebExtensionContextProxy::dispatchCookiesChangedEvent(this);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x624:
      IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>((uint64_t *)a3, (uint64_t)v358);
      if (!v368)
      {
        v325[0] = 0;
        LOBYTE(v348) = 0;
        goto LABEL_413;
      }
      v73 = v5[1];
      v74 = (WTF::StringImpl *)*v5;
      v75 = v5[2] - *v5;
      if (v73 <= v75)
      {
        v308 = 0;
        v309 = 0;
        *v5 = 0;
        v5[1] = 0;
        v310 = v5[3];
        if (v310)
        {
          if (v73)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v310 + 16))(v310);
            v309 = *v5;
            v308 = v5[1];
          }
          else
          {
            v308 = 0;
            v309 = 0;
          }
        }
        goto LABEL_522;
      }
      v76 = (unsigned __int8 *)v74 + v75;
      v5[2] = (uint64_t)(v76 + 1);
      if (!v74)
      {
        v308 = v73;
        v309 = 0;
LABEL_522:
        v73 = 0;
        v74 = 0;
        *v5 = 0;
        v5[1] = 0;
        v311 = v5[3];
        if (v311)
        {
          if (v308)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, v309, v308);
            v74 = (WTF::StringImpl *)*v5;
            v73 = v5[1];
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
        }
        goto LABEL_523;
      }
      v77 = *v76;
      if (v77 >= 2)
      {
LABEL_523:
        *v5 = 0;
        v5[1] = 0;
        v312 = v5[3];
        if (v312 && v73)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v312 + 16))(v312, v74);
        goto LABEL_527;
      }
      v78 = v77 != 0;
      IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::decode(v5, (uint64_t)v369);
      if (!v379)
      {
        v74 = (WTF::StringImpl *)*v5;
        v313 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        v314 = v5[3];
        if (!v314
          || !v313
          || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v314 + 16))(v314, v74), !v379))
        {
LABEL_527:
          v325[0] = 0;
          LOBYTE(v348) = 0;
          goto LABEL_411;
        }
      }
      v16 = (CFTypeRef)IPC::Decoder::decode<std::optional<WebKit::WebExtensionTabParameters>>(v5, v382);
      if (v390)
      {
        if (!v368 || !v379)
          goto LABEL_456;
        v79 = v358[0];
        v358[0] = 0;
        *(_QWORD *)v325 = v79;
        v325[8] = 0;
        v325[16] = 0;
        if ((_BYTE)v359)
        {
          v80 = v358[1];
          v358[1] = 0;
          *(_QWORD *)&v325[8] = v80;
          v325[16] = 1;
        }
        *(_WORD *)&v325[24] = WORD4(v359);
        v81 = v360;
        v360 = 0uLL;
        *(_OWORD *)&v325[32] = v81;
        v82 = v361;
        v361 = 0;
        *(_QWORD *)&v325[48] = v82;
        LODWORD(v326[0]) = (_DWORD)v362;
        WORD2(v326[0]) = WORD2(v362);
        LOBYTE(v326[1]) = 0;
        v327[8] = 0;
        if ((_BYTE)v364)
        {
          v83 = *((_QWORD *)&v363 + 1);
          v326[1] = (WTF::StringImpl *)v363;
          v363 = 0uLL;
          *(_QWORD *)v327 = v83;
          v327[8] = 1;
        }
        v327[16] = 0;
        v328 = 0;
        if ((_BYTE)v366)
        {
          v84 = *((_QWORD *)&v364 + 1);
          *((_QWORD *)&v364 + 1) = 0;
          *(_QWORD *)&v327[16] = v84;
          v85 = v365;
          v365 = 0;
          *(_QWORD *)&v327[24] = v85;
          v328 = 1;
        }
        v329 = v367;
        v330 = v78;
        v331[0] = *(_OWORD *)v369;
        v331[1] = *(_OWORD *)&v369[16];
        v332 = v369[32];
        v86 = *(WTF::StringImpl **)&v369[40];
        v87 = v374;
        *(_QWORD *)&v369[40] = 0;
        v333 = v86;
        v334 = v370;
        *(_OWORD *)v335 = v371;
        LODWORD(v370) = v370 & 0xFFFFFFFE;
        v88 = *(_OWORD *)v372;
        *(_QWORD *)&v372[8] = 0;
        *(_QWORD *)v372 = 0;
        *(_OWORD *)v336 = v88;
        *(_OWORD *)&v336[16] = *(_OWORD *)&v372[16];
        *(_OWORD *)&v336[32] = v373;
        *(_DWORD *)&v372[16] &= ~1u;
        v374 = 0;
        *(_OWORD *)v337 = v375;
        *(_OWORD *)&v337[16] = v376;
        LODWORD(v375) = v375 & 0xFFFFFFFE;
        v89 = v377;
        v377 = 0;
        *(_QWORD *)&v336[48] = v87;
        *(_QWORD *)&v337[32] = v89;
        v337[40] = v378;
        v337[48] = 0;
        BYTE8(v347) = 0;
        if (v389)
        {
          std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>((uint64_t)&v337[48], (uint64_t)v382);
          BYTE8(v347) = 1;
        }
        LOBYTE(v348) = 1;
        if (v390)
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v382, v74);
      }
      else
      {
        v325[0] = 0;
        LOBYTE(v348) = 0;
      }
      if (v379)
      {
        v209 = v377;
        v377 = 0;
        if (v209)
        {
          if (*(_DWORD *)v209 == 2)
            WTF::StringImpl::destroy(v209, v74);
          else
            *(_DWORD *)v209 -= 2;
        }
        v250 = v374;
        v374 = 0;
        if (v250)
        {
          if (*(_DWORD *)v250 == 2)
            WTF::StringImpl::destroy(v250, v74);
          else
            *(_DWORD *)v250 -= 2;
        }
        v251 = *(WTF::StringImpl **)&v372[8];
        *(_QWORD *)&v372[8] = 0;
        if (v251)
        {
          if (*(_DWORD *)v251 == 2)
            WTF::StringImpl::destroy(v251, v74);
          else
            *(_DWORD *)v251 -= 2;
        }
        v252 = *(WTF::StringImpl **)v372;
        *(_QWORD *)v372 = 0;
        if (v252)
        {
          if (*(_DWORD *)v252 == 2)
            WTF::StringImpl::destroy(v252, v74);
          else
            *(_DWORD *)v252 -= 2;
        }
        v253 = *(WTF::StringImpl **)&v369[40];
        *(_QWORD *)&v369[40] = 0;
        if (v253)
        {
          if (*(_DWORD *)v253 == 2)
            WTF::StringImpl::destroy(v253, v74);
          else
            *(_DWORD *)v253 -= 2;
        }
      }
LABEL_411:
      if (v368)
        WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v358, v74);
LABEL_413:
      if ((_BYTE)v348
        || (v305 = *v5, v306 = v5[1], *v5 = 0, v5[1] = 0, (v307 = v5[3]) != 0)
        && v306
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v307 + 16))(v307, v305), (_BYTE)v348))
      {
        WebKit::WebExtensionContextProxy::dispatchMenusClickedEvent((uint64_t)this, v325, v330, (uint64_t)v331, (uint64_t)&v337[48]);
        if ((_BYTE)v348)
        {
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v337[48], v254);
          v256 = *(WTF::StringImpl **)&v337[32];
          *(_QWORD *)&v337[32] = 0;
          if (v256)
          {
            if (*(_DWORD *)v256 == 2)
              WTF::StringImpl::destroy(v256, v255);
            else
              *(_DWORD *)v256 -= 2;
          }
          v257 = *(WTF::StringImpl **)&v336[48];
          *(_QWORD *)&v336[48] = 0;
          if (v257)
          {
            if (*(_DWORD *)v257 == 2)
              WTF::StringImpl::destroy(v257, v255);
            else
              *(_DWORD *)v257 -= 2;
          }
          v258 = *(WTF::StringImpl **)&v336[8];
          *(_QWORD *)&v336[8] = 0;
          if (v258)
          {
            if (*(_DWORD *)v258 == 2)
              WTF::StringImpl::destroy(v258, v255);
            else
              *(_DWORD *)v258 -= 2;
          }
          v259 = *(WTF::StringImpl **)v336;
          *(_QWORD *)v336 = 0;
          if (v259)
          {
            if (*(_DWORD *)v259 == 2)
              WTF::StringImpl::destroy(v259, v255);
            else
              *(_DWORD *)v259 -= 2;
          }
          v260 = v333;
          v333 = 0;
          if (v260)
          {
            if (*(_DWORD *)v260 == 2)
              WTF::StringImpl::destroy(v260, v255);
            else
              *(_DWORD *)v260 -= 2;
          }
          WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v325, v255);
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x625:
      v135 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v135 < 0x100u)
        goto LABEL_491;
      v136 = v135;
      IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)v5, v382);
      if (!v382[8])
        goto LABEL_491;
      v16 = IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)v5, v325);
      if (!v325[8])
      {
        if (v382[8] && *(_QWORD *)v382)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v382, v137);
        goto LABEL_491;
      }
      if (!v382[8])
        goto LABEL_456;
      v138 = *(_QWORD *)v325;
      *(_QWORD *)v325 = *(_QWORD *)v382;
      *(_QWORD *)v382 = v138;
      WebKit::WebExtensionContextProxy::dispatchPermissionsEvent((uint64_t)this, v136, (_QWORD **)v325, (_QWORD **)v382);
      if (*(_QWORD *)v382)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v382, v139);
      if (*(_QWORD *)v325)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v325, v139);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x626:
      v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v51)
        goto LABEL_491;
      WebKit::WebExtensionContextProxy::dispatchPortDisconnectEvent((uint64_t)this, v50);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x627:
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v382);
      if (!v382[16])
        goto LABEL_491;
      v132 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v133)
        goto LABEL_491;
      v134 = v132;
      v16 = IPC::Decoder::decode<WTF::String>(v5, v369);
      if (!v369[8])
        goto LABEL_491;
      if (!v382[16])
        goto LABEL_456;
      *(_OWORD *)v325 = *(_OWORD *)v382;
      *(_QWORD *)&v325[16] = v134;
      *(_QWORD *)&v325[24] = *(_QWORD *)v369;
      v325[32] = 1;
      WebKit::WebExtensionContextProxy::dispatchPortMessageEvent((uint64_t)this, *(uint64_t *)v382, v382[8], v134, &v325[24]);
      if (v325[32])
      {
        v64 = *(WTF::StringImpl **)&v325[24];
        *(_QWORD *)&v325[24] = 0;
        if (v64)
          goto LABEL_438;
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x628:
      v34 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
      if (v34 >= 0x100u
        && (v35 = v34,
            v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5),
            v37))
      {
        v38 = v36;
        IPC::Decoder::decode<WTF::String>(v5, v358);
        if (LOBYTE(v358[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v5, v369);
          if (v369[16])
          {
            v16 = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(v5, (uint64_t)v382);
            v41 = v393;
            if (v393)
            {
              if (!LOBYTE(v358[1]) || !v369[16])
                goto LABEL_456;
              v325[0] = v35;
              v42 = v358[0];
              v358[0] = 0;
              *(_QWORD *)&v325[8] = v38;
              *(_QWORD *)&v325[16] = v42;
              *(_OWORD *)&v325[24] = *(_OWORD *)v369;
              std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v325[40], (uint64_t *)v382);
              v41 = 1;
            }
            else
            {
              v325[0] = 0;
            }
            v337[48] = v41;
            std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v382, v40);
          }
          else
          {
            v325[0] = 0;
            v337[48] = 0;
          }
          if (LOBYTE(v358[1]))
          {
            v229 = v358[0];
            v358[0] = 0;
            if (v229)
            {
              if (*(_DWORD *)v229 == 2)
                WTF::StringImpl::destroy(v229, v39);
              else
                *(_DWORD *)v229 -= 2;
            }
          }
        }
        else
        {
          v325[0] = 0;
          v337[48] = 0;
        }
        if (v337[48])
          goto LABEL_381;
      }
      else
      {
        v325[0] = 0;
        v337[48] = 0;
      }
      v266 = *v5;
      v267 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v268 = v5[3];
      if (!v268)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v267)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v268 + 16))(v268, v266);
      if (!v337[48])
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_381:
      v243 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if ((_BYTE)v244)
      {
        *(_QWORD *)v382 = v243;
        v5 = (uint64_t *)&v382[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v382[8], v6);
        v245 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v245 = off_1E34F9530;
        v245[1] = *(_QWORD *)v382;
        v246 = *(_QWORD *)&v382[8];
        *(_QWORD *)&v382[8] = 0;
        v245[2] = v246;
        *(_QWORD *)v369 = v245;
        v16 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v382[8]);
        if (!v337[48])
          goto LABEL_456;
        WebKit::WebExtensionContextProxy::dispatchRuntimeConnectEvent(this, v325[0], *(uint64_t *)&v325[8], (uint64_t)&v325[16], *(uint64_t *)&v325[24], *(uint64_t *)&v325[32], (uint64_t)&v325[40], (uint64_t *)v369);
        v247 = *(_QWORD *)v369;
        *(_QWORD *)v369 = 0;
        if (v247)
          (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
      }
      if (v337[48])
      {
        v248 = *(WTF::StringImpl **)&v337[8];
        *(_QWORD *)&v337[8] = 0;
        if (v248)
        {
          if (*(_DWORD *)v248 == 2)
            WTF::StringImpl::destroy(v248, v244);
          else
            *(_DWORD *)v248 -= 2;
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v326, v244);
        if (v325[48])
        {
          v249 = *(WTF::StringImpl **)&v325[40];
          *(_QWORD *)&v325[40] = 0;
          if (v249)
          {
            if (*(_DWORD *)v249 == 2)
              WTF::StringImpl::destroy(v249, v49);
            else
              *(_DWORD *)v249 -= 2;
          }
        }
        goto LABEL_437;
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x629:
      v44 = *((_QWORD *)a3 + 1);
      v45 = *v5;
      v46 = v5[2] - *v5;
      if (v44 <= v46)
      {
        v281 = 0;
        v282 = 0;
        *v5 = 0;
        v5[1] = 0;
        v283 = v5[3];
        if (v283)
        {
          if (v44)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v283 + 16))(v283);
            v282 = *v5;
            v281 = v5[1];
          }
          else
          {
            v281 = 0;
            v282 = 0;
          }
        }
      }
      else
      {
        v47 = (unsigned __int8 *)(v45 + v46);
        v5[2] = (uint64_t)(v47 + 1);
        if (v45)
        {
          v48 = *v47;
          if (v48 < 4)
          {
            IPC::Decoder::decode<WTF::String>(v5, v325);
            if (!v325[8])
              goto LABEL_491;
            WebKit::WebExtensionContextProxy::dispatchRuntimeInstalledEvent((uint64_t)this, v48, v325);
            goto LABEL_342;
          }
          goto LABEL_490;
        }
        v281 = v44;
        v282 = 0;
      }
      v44 = 0;
      v45 = 0;
      *v5 = 0;
      v5[1] = 0;
      v284 = v5[3];
      if (v284)
      {
        if (v281)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v284 + 16))(v284, v282, v281);
          v45 = *v5;
          v44 = v5[1];
        }
        else
        {
          v44 = 0;
          v45 = 0;
        }
      }
LABEL_490:
      *v5 = 0;
      v5[1] = 0;
      v285 = v5[3];
      if (v285)
        goto LABEL_541;
      goto LABEL_491;
    case 0x62A:
      v124 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
      if (v124 <= 0xFFu)
      {
        v325[0] = 0;
        v337[40] = 0;
      }
      else
      {
        v125 = v124;
        IPC::Decoder::decode<WTF::String>(v5, v358);
        if (LOBYTE(v358[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v5, v369);
          if (v369[16])
          {
            v16 = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(v5, (uint64_t)v382);
            v128 = v393;
            if (v393)
            {
              if (!LOBYTE(v358[1]) || !v369[16])
                goto LABEL_456;
              v325[0] = v125;
              v129 = v358[0];
              v358[0] = 0;
              *(_QWORD *)&v325[8] = v129;
              *(_OWORD *)&v325[16] = *(_OWORD *)v369;
              std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v325[32], (uint64_t *)v382);
              v128 = 1;
            }
            else
            {
              v325[0] = 0;
            }
            v337[40] = v128;
            std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v382, v127);
          }
          else
          {
            v325[0] = 0;
            v337[40] = 0;
          }
          if (LOBYTE(v358[1]))
          {
            v223 = v358[0];
            v358[0] = 0;
            if (v223)
            {
              if (*(_DWORD *)v223 == 2)
                WTF::StringImpl::destroy(v223, v126);
              else
                *(_DWORD *)v223 -= 2;
            }
          }
        }
        else
        {
          v325[0] = 0;
          v337[40] = 0;
        }
        if (v337[40])
        {
LABEL_363:
          v236 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v5);
          if ((_BYTE)v237)
          {
            *(_QWORD *)v382 = v236;
            v5 = (uint64_t *)&v382[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v382[8], v6);
            v238 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v238 = off_1E34F9508;
            v238[1] = *(_QWORD *)v382;
            v239 = *(_QWORD *)&v382[8];
            *(_QWORD *)&v382[8] = 0;
            v238[2] = v239;
            *(_QWORD *)v369 = v238;
            v16 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v382[8]);
            if (!v337[40])
              goto LABEL_456;
            WebKit::WebExtensionContextProxy::dispatchRuntimeMessageEvent(this, v325[0], (uint64_t *)&v325[8], *(uint64_t *)&v325[16], *(uint64_t *)&v325[24], (uint64_t)&v325[32], (uint64_t *)v369);
            v240 = *(_QWORD *)v369;
            *(_QWORD *)v369 = 0;
            if (v240)
              (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
          }
          if (!v337[40])
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          v241 = *(WTF::StringImpl **)v337;
          *(_QWORD *)v337 = 0;
          if (v241)
          {
            if (*(_DWORD *)v241 == 2)
              WTF::StringImpl::destroy(v241, v237);
            else
              *(_DWORD *)v241 -= 2;
          }
          std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v325[48], v237);
          if (v325[40])
          {
            v242 = *(WTF::StringImpl **)&v325[32];
            *(_QWORD *)&v325[32] = 0;
            if (v242)
            {
              if (*(_DWORD *)v242 == 2)
                WTF::StringImpl::destroy(v242, v49);
              else
                *(_DWORD *)v242 -= 2;
            }
          }
          v64 = *(WTF::StringImpl **)&v325[8];
          *(_QWORD *)&v325[8] = 0;
          if (!v64)
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_438:
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v49);
          else
            *(_DWORD *)v64 -= 2;
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      v293 = *v5;
      v294 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v295 = v5[3];
      if (!v295)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v294)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v295 + 16))(v295, v293);
      if (!v337[40])
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      goto LABEL_363;
    case 0x62B:
      WebKit::WebExtensionContextProxy::dispatchRuntimeStartupEvent(this);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x62C:
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v382);
      if (v382[8])
      {
        v69 = IPC::Decoder::decode<WebKit::WebExtensionDataType>(v5);
        LOBYTE(v6) = v69;
        if (v69 > 0xFFu
          && (v16 = (CFTypeRef)IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(v5),
              (unsigned __int16)v16 > 0xFFu))
        {
          if (!v382[8])
            goto LABEL_456;
          v3 = v16;
          v72 = 0;
          v220 = *(_QWORD *)v382;
          *(_QWORD *)v382 = 0;
          *(_QWORD *)v325 = v220;
          v325[8] = (_BYTE)v6;
          v325[9] = (_BYTE)v16;
          v71 = 1;
        }
        else
        {
          v71 = 0;
          v325[0] = 0;
          v72 = 1;
        }
        v325[16] = v71;
        if (v382[8])
        {
          v221 = *(WTF::StringImpl **)v382;
          *(_QWORD *)v382 = 0;
          if (v221)
          {
            if (*(_DWORD *)v221 == 2)
              WTF::StringImpl::destroy(v221, v70);
            else
              *(_DWORD *)v221 -= 2;
          }
        }
        if (!v72)
        {
LABEL_335:
          if (!v71)
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          WebKit::WebExtensionContextProxy::dispatchStorageChangedEvent(this, v325, (char)v6, v3);
          if (!v325[16])
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_342:
          v64 = *(WTF::StringImpl **)v325;
          *(_QWORD *)v325 = 0;
          if (!v64)
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          goto LABEL_438;
        }
      }
      else
      {
        v71 = 0;
        v325[0] = 0;
        v325[16] = 0;
      }
      v202 = *v5;
      v203 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v204 = v5[3];
      if (v204 && v203)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 16))(v204, v202);
      goto LABEL_335;
    case 0x62D:
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_491;
      v27 = v25;
      v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v29)
        goto LABEL_491;
      v30 = v28;
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v32)
        goto LABEL_491;
      WebKit::WebExtensionContextProxy::dispatchTabsActivatedEvent((uint64_t)this, v27, v30, v31);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x62E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long>>((uint64_t)v325, (uint64_t *)a3);
      if (v325[24])
        WebKit::WebExtensionContextProxy::dispatchTabsAttachedEvent((uint64_t)this, *(uint64_t *)v325, *(unint64_t *)&v325[8], *(uint64_t *)&v325[16]);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x62F:
      IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, v325);
      v131 = v334;
      if ((_BYTE)v334)
      {
        std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v382, (uint64_t)v325);
        v131 = 1;
      }
      else
      {
        v382[0] = 0;
      }
      v389 = v131;
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v325, v130);
      if (!v389)
      {
        v296 = *v5;
        v297 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        v298 = v5[3];
        if (!v298)
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        if (!v297)
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v298 + 16))(v298, v296);
        if (!v389)
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      WebKit::WebExtensionContextProxy::dispatchTabsCreatedEvent((uint64_t)this, (uint64_t)v382);
      if (!v389)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (v386[8])
      {
        v205 = *(WTF::StringImpl **)v386;
        *(_QWORD *)v386 = 0;
        if (v205)
        {
          if (*(_DWORD *)v205 == 2)
            WTF::StringImpl::destroy(v205, v49);
          else
            *(_DWORD *)v205 -= 2;
        }
      }
      if (!BYTE8(v385))
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      v64 = *(WTF::StringImpl **)&v382[16];
      *(_QWORD *)&v382[16] = 0;
      if (!v64)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      goto LABEL_438;
    case 0x630:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long>>((uint64_t)v325, (uint64_t *)a3);
      if (v325[24])
        WebKit::WebExtensionContextProxy::dispatchTabsDetachedEvent((uint64_t)this, *(uint64_t *)v325, *(unint64_t *)&v325[8], *(uint64_t *)&v325[16]);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x631:
      IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, a2, (uint64_t)v382);
      if (!v382[16])
        goto LABEL_491;
      v16 = (CFTypeRef)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!(_BYTE)v106)
      {
        if (v382[16])
        {
          v208 = *(WTF **)v382;
          if (*(_QWORD *)v382)
          {
            *(_QWORD *)v382 = 0;
            *(_DWORD *)&v382[8] = 0;
            WTF::fastFree(v208, v106);
          }
        }
        goto LABEL_491;
      }
      if (!v382[16])
        goto LABEL_456;
      *(_QWORD *)v325 = *(_QWORD *)v382;
      *(_QWORD *)&v325[8] = *(_QWORD *)&v382[8];
      *(_QWORD *)&v325[16] = v16;
      v325[24] = 1;
      WebKit::WebExtensionContextProxy::dispatchTabsHighlightedEvent((uint64_t)this, (uint64_t)v325, (unint64_t)v16);
      if (v325[24])
      {
        v108 = *(WTF **)v325;
        if (*(_QWORD *)v325)
        {
          *(_QWORD *)v325 = 0;
          *(_DWORD *)&v325[8] = 0;
          WTF::fastFree(v108, v107);
        }
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x632:
      v111 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v112)
        goto LABEL_491;
      v113 = v111;
      v114 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v115)
        goto LABEL_491;
      v116 = v5[1];
      v117 = *v5;
      v118 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v5;
      if (v116 < v118 || v116 - v118 <= 7)
      {
        v320 = 0;
        v321 = 0;
        *v5 = 0;
        v5[1] = 0;
        v322 = v5[3];
        if (v322)
        {
          if (v116)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v322 + 16))(v322);
            v321 = *v5;
            v320 = v5[1];
          }
          else
          {
            v320 = 0;
            v321 = 0;
          }
        }
      }
      else
      {
        v119 = (uint64_t *)(v117 + v118);
        v5[2] = (uint64_t)(v119 + 1);
        if (v117)
        {
          v120 = (((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFFFF8) - v117;
          if (v116 >= v120 && v116 - v120 > 7)
          {
            v122 = *v119;
            v123 = *(_QWORD *)(((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFFFF8);
            v5[2] = (((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            WebKit::WebExtensionContextProxy::dispatchTabsMovedEvent((uint64_t)this, v113, v114, v122, v123);
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
          *v5 = 0;
          v5[1] = 0;
          v324 = v5[3];
          if (v324 && v116)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v324 + 16))(v324);
            v45 = *v5;
            v44 = v5[1];
            v285 = v5[3];
            goto LABEL_540;
          }
LABEL_491:
          v286 = *v5;
          v287 = v5[1];
          *v5 = 0;
          v5[1] = 0;
          v288 = v5[3];
          if (v288 && v287)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v288 + 16))(v288, v286);
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
        v320 = v116;
        v321 = 0;
      }
      *v5 = 0;
      v5[1] = 0;
      v323 = v5[3];
      if (v323 && v320)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v323 + 16))(v323, v321, v320);
      goto LABEL_491;
    case 0x633:
      v153 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v154)
        goto LABEL_491;
      v155 = v153;
      v156 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v157)
        goto LABEL_491;
      v158 = v5[1];
      v159 = *v5;
      v160 = v5[2] - *v5;
      if (v158 <= v160)
      {
        v315 = 0;
        v316 = 0;
        *v5 = 0;
        v5[1] = 0;
        v317 = v5[3];
        if (v317)
        {
          if (v158)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v317 + 16))(v317);
            v316 = *v5;
            v315 = v5[1];
          }
          else
          {
            v315 = 0;
            v316 = 0;
          }
        }
      }
      else
      {
        v161 = (unsigned __int8 *)(v159 + v160);
        v5[2] = (uint64_t)(v161 + 1);
        if (v159)
        {
          v162 = *v161;
          if (v162 < 2)
          {
            WebKit::WebExtensionContextProxy::dispatchTabsRemovedEvent((uint64_t)this, v155, v156, v162 != 0);
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          }
LABEL_530:
          *v5 = 0;
          v5[1] = 0;
          v319 = v5[3];
          if (v319 && v158)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v159);
            v285 = v5[3];
            v45 = *v5;
            v44 = v5[1];
LABEL_540:
            *v5 = 0;
            v5[1] = 0;
            if (v285)
            {
LABEL_541:
              if (v44)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v285 + 16))(v285, v45);
            }
          }
          goto LABEL_491;
        }
        v315 = v158;
        v316 = 0;
      }
      v158 = 0;
      v159 = 0;
      *v5 = 0;
      v5[1] = 0;
      v318 = v5[3];
      if (v318)
      {
        if (v315)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v318 + 16))(v318, v316, v315);
          v159 = *v5;
          v158 = v5[1];
        }
        else
        {
          v158 = 0;
          v159 = 0;
        }
      }
      goto LABEL_530;
    case 0x634:
      v163 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v164)
        goto LABEL_491;
      v165 = v163;
      v166 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v167)
        goto LABEL_491;
      WebKit::WebExtensionContextProxy::dispatchTabsReplacedEvent((uint64_t)this, v165, v166);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x635:
      IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, v369);
      if ((_BYTE)v378)
      {
        v16 = IPC::Decoder::decode<WebKit::WebExtensionTabParameters>(v5, v382);
        v67 = v389;
        if (v389)
        {
          if (!(_BYTE)v378)
            goto LABEL_456;
          std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v325, (uint64_t)v369);
          std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)&v334, (uint64_t)v382);
          v67 = 1;
        }
        else
        {
          v325[0] = 0;
        }
        LOBYTE(v341) = v67;
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v382, v66);
      }
      else
      {
        v325[0] = 0;
        LOBYTE(v341) = 0;
      }
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v369, v65);
      if (!(_BYTE)v341)
      {
        v299 = *v5;
        v300 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        v301 = v5[3];
        if (!v301)
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        if (!v300)
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v299);
        if (!(_BYTE)v341)
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      }
      WebKit::WebExtensionContextProxy::dispatchTabsUpdatedEvent((uint64_t)this, (uint64_t)v325, (uint64_t)&v334);
      if (!(_BYTE)v341)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (v336[40])
      {
        v207 = *(WTF::StringImpl **)&v336[32];
        *(_QWORD *)&v336[32] = 0;
        if (v207)
        {
          if (*(_DWORD *)v207 == 2)
            WTF::StringImpl::destroy(v207, v49);
          else
            *(_DWORD *)v207 -= 2;
        }
      }
      if (v336[24])
      {
        v234 = v335[0];
        v335[0] = 0;
        if (v234)
        {
          if (*(_DWORD *)v234 == 2)
            WTF::StringImpl::destroy(v234, v49);
          else
            *(_DWORD *)v234 -= 2;
        }
      }
      if (v327[0])
      {
        v235 = v326[1];
        v326[1] = 0;
        if (v235)
        {
          if (*(_DWORD *)v235 == 2)
            WTF::StringImpl::destroy(v235, v49);
          else
            *(_DWORD *)v235 -= 2;
        }
      }
      if (!LOBYTE(v326[0]))
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_437:
      v64 = *(WTF::StringImpl **)&v325[16];
      *(_QWORD *)&v325[16] = 0;
      if (v64)
        goto LABEL_438;
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x636:
      v52 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v52 < 0x100u)
        goto LABEL_491;
      v53 = v52;
      v54 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v55)
        goto LABEL_491;
      v56 = v54;
      v57 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v58)
        goto LABEL_491;
      v59 = v57;
      v60 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5);
      if (!v61)
        goto LABEL_491;
      v62 = v60;
      IPC::Decoder::decode<WTF::URL>(v5, v382);
      if (!v384)
        goto LABEL_491;
      v16 = (CFTypeRef)IPC::Decoder::decode<WTF::MonotonicTime>(v5);
      if (!(_BYTE)v63)
      {
        v325[0] = 0;
        v327[8] = 0;
        if (v384)
        {
          v262 = *(WTF::StringImpl **)v382;
          *(_QWORD *)v382 = 0;
          if (v262)
          {
            if (*(_DWORD *)v262 == 2)
              WTF::StringImpl::destroy(v262, v63);
            else
              *(_DWORD *)v262 -= 2;
          }
        }
        goto LABEL_491;
      }
      if (!v384)
        goto LABEL_456;
      v325[0] = v53;
      *(_QWORD *)&v325[8] = v56;
      *(_QWORD *)&v325[16] = v59;
      *(_QWORD *)&v325[24] = v62;
      *(_QWORD *)&v325[32] = *(_QWORD *)v382;
      *(_OWORD *)&v325[40] = *(_OWORD *)&v382[8];
      *(_OWORD *)v326 = v383;
      *(_QWORD *)v327 = v16;
      v327[8] = 1;
      WebKit::WebExtensionContextProxy::dispatchWebNavigationEvent((uint64_t)this, v53, v56, v59, v62, &v325[32], *(double *)&v16);
      if (!v327[8])
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      v64 = *(WTF::StringImpl **)&v325[32];
      *(_QWORD *)&v325[32] = 0;
      if (!v64)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      goto LABEL_438;
    case 0x637:
      v199 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v199 < 0x100u)
        goto LABEL_491;
      v200 = v199;
      IPC::Decoder::decode<std::optional<WebKit::WebExtensionWindowParameters>>(v5, (uint64_t)v382);
      if (!v388)
        goto LABEL_491;
      v325[0] = v200;
      v325[8] = 0;
      v328 = 0;
      if (!v387)
        goto LABEL_446;
      *(_OWORD *)&v325[8] = *(_OWORD *)v382;
      *(_DWORD *)&v325[24] = *(_DWORD *)&v382[16];
      v325[32] = 0;
      v325[48] = 0;
      if (v384)
      {
        *(_OWORD *)v326 = v385;
        *(_OWORD *)&v325[32] = v383;
        v383 = 0uLL;
        v325[48] = 1;
        *(_OWORD *)v327 = *(_OWORD *)v386;
        *(_OWORD *)&v327[12] = *(_OWORD *)&v386[12];
        v328 = 1;
        LOBYTE(v329) = 1;
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v383, v201);
      }
      else
      {
        *(_OWORD *)v326 = v385;
        *(_OWORD *)v327 = *(_OWORD *)v386;
        *(_OWORD *)&v327[12] = *(_OWORD *)&v386[12];
        v328 = 1;
LABEL_446:
        LOBYTE(v329) = 1;
      }
      WebKit::WebExtensionContextProxy::dispatchWindowsEvent((uint64_t)this, v200, &v325[8]);
      if ((_BYTE)v329 && v328 && v325[48])
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v325[32], v261);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x638:
      v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v9
        && (v10 = v8,
            v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5),
            v12))
      {
        v13 = v11;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v5, v382);
        if (v392)
        {
          IPC::Decoder::decode<WebCore::ResourceError>(v5, (uint64_t)v358);
          if ((_BYTE)v364)
          {
            v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v369);
            v18 = BYTE8(v373);
            if (BYTE8(v373))
            {
              if (!v392 || !(_BYTE)v364)
                goto LABEL_456;
              *(_QWORD *)v325 = v10;
              *(_QWORD *)&v325[8] = v13;
              std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v325[16], (uint64_t)v382);
              v19 = *(_OWORD *)v358;
              v358[1] = 0;
              v358[0] = 0;
              *(_OWORD *)&v337[8] = v19;
              *(_OWORD *)&v337[24] = v359;
              *(_OWORD *)&v337[40] = v360;
              LODWORD(v359) = v359 & 0xFFFFFFFE;
              v338 = v361;
              LODWORD(v339) = (_DWORD)v362;
              WORD2(v339) = WORD2(v362);
              v20 = (const void *)v363;
              v361 = 0;
              *(_QWORD *)&v363 = 0;
              v340[0] = v20;
              LOBYTE(v340[1]) = BYTE8(v363);
              LOBYTE(v344[0]) = v370;
              *(_OWORD *)v342 = *(_OWORD *)&v369[16];
              v343 = *(_OWORD *)&v369[32];
              v341 = *(_OWORD *)v369;
              v21 = (WTF::StringImpl *)*((_QWORD *)&v370 + 1);
              v22 = *(_QWORD *)&v372[16];
              *((_QWORD *)&v370 + 1) = 0;
              v344[1] = v21;
              v345 = v371;
              *(_OWORD *)cf = *(_OWORD *)v372;
              LODWORD(v371) = v371 & 0xFFFFFFFE;
              *(_QWORD *)&v372[16] = 0;
              *(_WORD *)&cf[32] = v373;
              v18 = 1;
              *(_QWORD *)&cf[16] = v22;
              *(_QWORD *)&cf[24] = *(_QWORD *)&v372[24];
            }
            else
            {
              v325[0] = 0;
            }
            cf[40] = v18;
            std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v369, v17);
          }
          else
          {
            v325[0] = 0;
            cf[40] = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v358, v15);
        }
        else
        {
          v325[0] = 0;
          cf[40] = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v382, v14);
        if (cf[40])
        {
LABEL_288:
          v5 = (uint64_t *)&v325[16];
          WebKit::WebExtensionContextProxy::resourceLoadDidCompleteWithError((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v325, *(uint64_t *)&v325[8], (WebCore::ResourceResponse *)&v325[16], (uint64_t)&v337[8], (WebKit *)&v341);
          if (!cf[40])
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          v224 = *(WTF::StringImpl **)&cf[16];
          *(_QWORD *)&cf[16] = 0;
          if (v224)
          {
            if (*(_DWORD *)v224 == 2)
              WTF::StringImpl::destroy(v224, v212);
            else
              *(_DWORD *)v224 -= 2;
          }
          v225 = v344[1];
          v344[1] = 0;
          if (v225)
          {
            if (*(_DWORD *)v225 == 2)
              WTF::StringImpl::destroy(v225, v212);
            else
              *(_DWORD *)v225 -= 2;
          }
          v16 = v340[0];
          v340[0] = 0;
          if (v16)
LABEL_457:
            CFRelease(v16);
          v226 = v338;
          v338 = 0;
          if (v226)
          {
            if (*(_DWORD *)v226 == 2)
              WTF::StringImpl::destroy(v226, v212);
            else
              *(_DWORD *)v226 -= 2;
          }
          v227 = *(WTF::StringImpl **)&v337[16];
          *(_QWORD *)&v337[16] = 0;
          if (v227)
          {
            if (*(_DWORD *)v227 == 2)
              WTF::StringImpl::destroy(v227, v212);
            else
              *(_DWORD *)v227 -= 2;
          }
          v228 = *(WTF::StringImpl **)&v337[8];
          *(_QWORD *)&v337[8] = 0;
          if (!v228)
            goto LABEL_330;
LABEL_327:
          if (*(_DWORD *)v228 == 2)
            WTF::StringImpl::destroy(v228, v212);
          else
            *(_DWORD *)v228 -= 2;
LABEL_330:
          v232 = *(const void **)&v336[48];
          *(_QWORD *)&v336[48] = 0;
          if (v232)
            CFRelease(v232);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v5, v212);
          return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
        }
      }
      else
      {
        v325[0] = 0;
        cf[40] = 0;
      }
      v263 = *v5;
      v264 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v265 = v5[3];
      if (!v265)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v264)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v265 + 16))(v265, v263);
      if (!cf[40])
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      goto LABEL_288;
    case 0x639:
      v168 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v169
        && (v170 = v168,
            v171 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5),
            v172))
      {
        v173 = v171;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v5, v382);
        if (v392)
        {
          IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v358);
          if (v368)
          {
            IPC::Decoder::decode<WebCore::ResourceRequest>(v5, (uint64_t)v369);
            v176 = v381;
            if (v381)
            {
              if (!v392 || !v368)
                goto LABEL_456;
              *(_QWORD *)v325 = v170;
              *(_QWORD *)&v325[8] = v173;
              std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v325[16], (uint64_t)v382);
              *(_OWORD *)&v337[8] = *(_OWORD *)v358;
              *(_OWORD *)&v337[24] = v359;
              *(_OWORD *)&v337[40] = v360;
              LOBYTE(v338) = (_BYTE)v361;
              v177 = v362;
              v362 = 0;
              v339 = v177;
              *(_OWORD *)v340 = v363;
              v341 = v364;
              LODWORD(v363) = v363 & 0xFFFFFFFE;
              LOWORD(v343) = v367;
              v178 = v365;
              v365 = 0;
              v342[0] = v178;
              v342[1] = v366;
              v179 = *(_QWORD *)v369;
              v180 = *(_QWORD *)&v369[40];
              *(_QWORD *)v369 = 0;
              *((_QWORD *)&v343 + 1) = v179;
              *(_OWORD *)v344 = *(_OWORD *)&v369[8];
              v345 = *(_OWORD *)&v369[24];
              *(_DWORD *)&v369[8] &= ~1u;
              *(_QWORD *)&v369[40] = 0;
              *(_QWORD *)cf = v180;
              *(_OWORD *)&cf[8] = v370;
              *(_OWORD *)&cf[24] = v371;
              LODWORD(v370) = v370 & 0xFFFFFFFE;
              v181 = *(_QWORD *)&v372[24];
              *(_QWORD *)&cf[40] = *(_QWORD *)v372;
              v182 = *(_OWORD *)&v372[8];
              memset(&v372[8], 0, 24);
              v347 = v182;
              v348 = v181;
              v183 = *((_QWORD *)&v373 + 1);
              v349 = (WTF::StringImpl *)v373;
              v373 = 0uLL;
              *(_QWORD *)&v350 = v183;
              v184 = v374;
              v374 = 0;
              *((_QWORD *)&v350 + 1) = v184;
              v185 = v375;
              *(_QWORD *)&v375 = 0;
              *(_QWORD *)&v351 = v185;
              BYTE12(v351) = BYTE12(v375);
              DWORD2(v351) = DWORD2(v375);
              v186 = v376;
              v376 = 0u;
              *(_OWORD *)v352 = v186;
              v353 = v377;
              v355 = v379;
              v354 = v378;
              v187 = v380;
              v377 = 0;
              v380 = 0;
              v176 = 1;
              v356 = v187;
            }
            else
            {
              v325[0] = 0;
            }
            v357 = v176;
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v369);
          }
          else
          {
            v325[0] = 0;
            v357 = 0;
          }
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v358, v175);
        }
        else
        {
          v325[0] = 0;
          v357 = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v382, v174);
        if (v357)
        {
LABEL_318:
          v5 = (uint64_t *)&v325[16];
          WebKit::WebExtensionContextProxy::resourceLoadDidPerformHTTPRedirection((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v325, *(uint64_t *)&v325[8], (WebCore::ResourceResponse *)&v325[16], &v337[8], (WebCore::ResourceRequestBase *)((char *)&v343 + 8));
          if (!v357)
            return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
          v230 = v356;
          v356 = 0;
          if (v230)
            CFRelease(v230);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v343 + 8));
LABEL_322:
          v231 = v342[0];
          v342[0] = 0;
          if (v231)
          {
            if (*(_DWORD *)v231 == 2)
              WTF::StringImpl::destroy(v231, v212);
            else
              *(_DWORD *)v231 -= 2;
          }
          v228 = v339;
          v339 = 0;
          if (!v228)
            goto LABEL_330;
          goto LABEL_327;
        }
      }
      else
      {
        v325[0] = 0;
        v357 = 0;
      }
      v275 = *v5;
      v276 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v277 = v5[3];
      if (!v277)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v276)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v277 + 16))(v277, v275);
      if (!v357)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      goto LABEL_318;
    case 0x63A:
      v188 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v189
        && (v190 = v188,
            v191 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5),
            v192))
      {
        v193 = v191;
        IPC::Decoder::decode<WebCore::AuthenticationChallenge>(v5, (uint64_t)v382);
        if (v395)
        {
          v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v369);
          v196 = BYTE8(v373);
          if (BYTE8(v373))
          {
            if (!v395)
              goto LABEL_456;
            *(_QWORD *)v325 = v190;
            *(_QWORD *)&v325[8] = v193;
            WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v325[16], (uint64_t)v382);
            LOBYTE(v348) = v370;
            v197 = *(WTF::StringImpl **)&v372[16];
            v349 = (WTF::StringImpl *)*((_QWORD *)&v370 + 1);
            v198 = v394;
            v394 = 0uLL;
            *(_OWORD *)cf = v198;
            *(_OWORD *)&cf[16] = *(_OWORD *)v369;
            *(_OWORD *)&cf[32] = *(_OWORD *)&v369[16];
            v347 = *(_OWORD *)&v369[32];
            *((_QWORD *)&v370 + 1) = 0;
            v350 = v371;
            v351 = *(_OWORD *)v372;
            LODWORD(v371) = v371 & 0xFFFFFFFE;
            *(_QWORD *)&v372[16] = 0;
            v352[0] = v197;
            LOWORD(v353) = v373;
            v196 = 1;
            v352[1] = *(WTF::StringImpl **)&v372[24];
          }
          else
          {
            v325[0] = 0;
          }
          LOBYTE(v354) = v196;
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v369, v195);
        }
        else
        {
          v325[0] = 0;
          LOBYTE(v354) = 0;
        }
        std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v382, v194);
        if ((_BYTE)v354)
          goto LABEL_244;
      }
      else
      {
        v325[0] = 0;
        LOBYTE(v354) = 0;
      }
      v278 = *v5;
      v279 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v280 = v5[3];
      if (!v280)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v279)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v280 + 16))(v280, v278);
      if (!(_BYTE)v354)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_244:
      WebKit::WebExtensionContextProxy::resourceLoadDidReceiveChallenge((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v325, *(uint64_t *)&v325[8], (id *)&v325[16], (WebKit *)&cf[16]);
      if ((_BYTE)v354)
      {
        v214 = v352[0];
        v352[0] = 0;
        if (v214)
        {
          if (*(_DWORD *)v214 == 2)
            WTF::StringImpl::destroy(v214, v213);
          else
            *(_DWORD *)v214 -= 2;
        }
        v217 = v349;
        v349 = 0;
        if (v217)
        {
          if (*(_DWORD *)v217 == 2)
            WTF::StringImpl::destroy(v217, v213);
          else
            *(_DWORD *)v217 -= 2;
        }
        v218 = *(const void **)&cf[8];
        *(_QWORD *)&cf[8] = 0;
        if (v218)
          CFRelease(v218);
        v219 = *(const void **)cf;
        *(_QWORD *)cf = 0;
        if (v219)
          CFRelease(v219);
        WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v325[16], v213);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63B:
      v140 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v141
        && (v142 = v140,
            v143 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5),
            v144))
      {
        v145 = v143;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v5, v382);
        if (v392)
        {
          v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v369);
          v148 = BYTE8(v373);
          if (BYTE8(v373))
          {
            if (!v392)
              goto LABEL_456;
            *(_QWORD *)v325 = v142;
            *(_QWORD *)&v325[8] = v145;
            std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v325[16], (uint64_t)v382);
            *(_OWORD *)&v337[8] = *(_OWORD *)v369;
            *(_OWORD *)&v337[24] = *(_OWORD *)&v369[16];
            *(_OWORD *)&v337[40] = *(_OWORD *)&v369[32];
            LOBYTE(v338) = v370;
            v149 = (WTF::StringImpl *)*((_QWORD *)&v370 + 1);
            v150 = *(WTF::StringImpl **)&v372[16];
            *((_QWORD *)&v370 + 1) = 0;
            v339 = v149;
            *(_OWORD *)v340 = v371;
            v341 = *(_OWORD *)v372;
            LODWORD(v371) = v371 & 0xFFFFFFFE;
            *(_QWORD *)&v372[16] = 0;
            LOWORD(v343) = v373;
            v148 = 1;
            v342[0] = v150;
            v342[1] = *(WTF::StringImpl **)&v372[24];
          }
          else
          {
            v325[0] = 0;
          }
          BYTE8(v343) = v148;
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v369, v147);
        }
        else
        {
          v325[0] = 0;
          BYTE8(v343) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v382, v146);
        if (BYTE8(v343))
          goto LABEL_238;
      }
      else
      {
        v325[0] = 0;
        BYTE8(v343) = 0;
      }
      v272 = *v5;
      v273 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v274 = v5[3];
      if (!v274)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v273)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v274 + 16))(v274, v272);
      if (!BYTE8(v343))
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_238:
      v5 = (uint64_t *)&v325[16];
      WebKit::WebExtensionContextProxy::resourceLoadDidReceiveResponse((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v325, *(uint64_t *)&v325[8], (WebCore::ResourceResponse *)&v325[16], &v337[8]);
      if (BYTE8(v343))
        goto LABEL_322;
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63C:
      v96 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v97
        && (v98 = v96,
            v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5),
            v100))
      {
        v101 = v99;
        IPC::Decoder::decode<WebCore::ResourceRequest>(v5, (uint64_t)v382);
        if (v391)
        {
          v16 = IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v5, (uint64_t)v369);
          v103 = BYTE8(v373);
          if (BYTE8(v373))
          {
            if (!v391)
            {
LABEL_456:
              __break(1u);
              goto LABEL_457;
            }
            *(_QWORD *)v325 = v98;
            *(_QWORD *)&v325[8] = v101;
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v325[16], (uint64_t)v382);
            *(_OWORD *)&v336[8] = *(_OWORD *)v369;
            *(_OWORD *)&v336[24] = *(_OWORD *)&v369[16];
            *(_OWORD *)&v336[40] = *(_OWORD *)&v369[32];
            v337[0] = v370;
            v104 = *((_QWORD *)&v370 + 1);
            v105 = *(_QWORD *)&v372[16];
            *((_QWORD *)&v370 + 1) = 0;
            *(_OWORD *)&v337[16] = v371;
            *(_OWORD *)&v337[32] = *(_OWORD *)v372;
            LODWORD(v371) = v371 & 0xFFFFFFFE;
            *(_QWORD *)&v372[16] = 0;
            *(_QWORD *)&v337[8] = v104;
            LOWORD(v339) = v373;
            v103 = 1;
            *(_QWORD *)&v337[48] = v105;
            v338 = *(WTF::StringImpl **)&v372[24];
          }
          else
          {
            v325[0] = 0;
          }
          LOBYTE(v340[0]) = v103;
          std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v369, v102);
        }
        else
        {
          v325[0] = 0;
          LOBYTE(v340[0]) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v382);
        if (LOBYTE(v340[0]))
          goto LABEL_231;
      }
      else
      {
        v325[0] = 0;
        LOBYTE(v340[0]) = 0;
      }
      v269 = *v5;
      v270 = v5[1];
      *v5 = 0;
      v5[1] = 0;
      v271 = v5[3];
      if (!v271)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      if (!v270)
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v271 + 16))(v271, v269);
      if (!LOBYTE(v340[0]))
        return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
LABEL_231:
      WebKit::WebExtensionContextProxy::resourceLoadDidSendRequest((uint64_t)this, *(const WebKit::ResourceLoadInfo **)v325, *(uint64_t *)&v325[8], (WebCore::ResourceRequestBase *)&v325[16], (WebKit *)&v336[8]);
      if (LOBYTE(v340[0]))
      {
        v211 = *(WTF::StringImpl **)&v337[48];
        *(_QWORD *)&v337[48] = 0;
        if (v211)
        {
          if (*(_DWORD *)v211 == 2)
            WTF::StringImpl::destroy(v211, v210);
          else
            *(_DWORD *)v211 -= 2;
        }
        v215 = *(WTF::StringImpl **)&v337[8];
        *(_QWORD *)&v337[8] = 0;
        if (v215)
        {
          if (*(_DWORD *)v215 == 2)
            WTF::StringImpl::destroy(v215, v210);
          else
            *(_DWORD *)v215 -= 2;
        }
        v216 = *(const void **)v336;
        *(_QWORD *)v336 = 0;
        if (v216)
          CFRelease(v216);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v325[16]);
      }
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63D:
      v151 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v152)
        WebKit::WebExtensionContextProxy::setBackgroundPageIdentifier(this, v151);
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63E:
      v33 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v33 >= 0x100u)
        *((_BYTE *)this + 120) = v33 != 0;
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    case 0x63F:
      IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>(a3, v325);
      if (!v325[8])
        goto LABEL_491;
      v24 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = *(_QWORD *)v325;
      if (v24)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v23);
      *((_QWORD *)this + 17) = 0x7FF8000000000000;
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
    default:
      return WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeMessageEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINS7_31WebExtensionFrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvOSA_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeMessageEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINS7_31WebExtensionFrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvOSA_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeMessageEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINS7_31WebExtensionFrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvOSA_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3169;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeConnectEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINSA_INS7_31WebExtensionFrameIdentifierTypeESD_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONS_14HashCountedSetINSA_INS7_26WebPageProxyIdentifierTypeESD_yEENS_11DefaultHashIST_EENS_10HashTraitsIST_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeConnectEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINSA_INS7_31WebExtensionFrameIdentifierTypeESD_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONS_14HashCountedSetINSA_INS7_26WebPageProxyIdentifierTypeESD_yEENS_11DefaultHashIST_EENS_10HashTraitsIST_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24WebExtensionContextProxy27DispatchRuntimeConnectEventEN6WebKit24WebExtensionContextProxyES8_FvNS7_28WebExtensionContentWorldTypeENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS_6StringENSt3__18optionalINSA_INS7_31WebExtensionFrameIdentifierTypeESD_yEEEERKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONS_14HashCountedSetINSA_INS7_26WebPageProxyIdentifierTypeESD_yEENS_11DefaultHashIST_EENS_10HashTraitsIST_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EE4callESZ_(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  void *v29;
  IPC::Encoder *result;
  WTF *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;
  IPC::Encoder *v38;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 3168;
  *(_QWORD *)(v4 + 8) = v3;
  v5 = (void *)(v4 + 16);
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v38 = (IPC::Encoder *)v4;
  if (*a2)
    v6 = *((_DWORD *)*a2 - 3);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 544);
  v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 + 4;
  v10 = *(_QWORD *)(v4 + 552);
  if (v10 < v8 + 4)
  {
    v33 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v34 = v33;
      v33 *= 2;
    }
    while (v34 < v9);
    v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
    if (v35 == (char *)-1)
    {
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x197777D14);
    }
    v11 = v35;
    memcpy(v35, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v36 = *(void **)(v4 + 528);
    if (v36 != v5)
      munmap(v36, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v11;
    *(_QWORD *)(v4 + 552) = v34;
    v7 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v11 = *(char **)(v4 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v4 + 544) = v9;
  v12 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v8);
  *(_QWORD *)(v4 + 536) = v12 + 1;
  *v12 = v6;
  v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  v14 = v13;
  v16 = v15;
  if (*a2)
    v17 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  else
    v17 = 0;
  if ((uint64_t *)v17 != v13)
  {
    do
    {
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, v14);
      v18 = *((_DWORD *)v14 + 2);
      v19 = *(_QWORD *)(v4 + 544);
      v20 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v21 = v20 + 4;
      v22 = *(_QWORD *)(v4 + 552);
      if (v22 < v20 + 4)
      {
        v25 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v26 = v25;
          v25 *= 2;
        }
        while (v26 < v21);
        v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
        if (v27 == (char *)-1)
          goto LABEL_34;
        v23 = v27;
        memcpy(v27, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
        v28 = *(void **)(v4 + 528);
        if (v28 != v5)
          munmap(v28, *(_QWORD *)(v4 + 552));
        *(_QWORD *)(v4 + 528) = v23;
        *(_QWORD *)(v4 + 552) = v26;
        v19 = *(_QWORD *)(v4 + 544);
      }
      else
      {
        v23 = *(char **)(v4 + 528);
      }
      bzero(&v23[v19], v20 - v19);
      *(_QWORD *)(v4 + 544) = v21;
      v24 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v20);
      *(_QWORD *)(v4 + 536) = v24 + 1;
      *v24 = v18;
      while (1)
      {
        v14 += 2;
        if (v14 == v16)
          break;
        if ((unint64_t)(*v14 + 1) > 1)
          goto LABEL_17;
      }
      v14 = v16;
LABEL_17:
      ;
    }
    while (v14 != (uint64_t *)v17);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v38, 0, 0);
  result = v38;
  v38 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v29);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = v4;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v8)
    {
      v9 = a2[1];
      v10 = *a2;
      v11 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
      if (v9 >= v11 && v9 - v11 > 7)
      {
        v13 = (uint64_t *)(v10 + v11);
        a2[2] = (uint64_t)(v13 + 1);
        if (v10)
        {
          v14 = *v13;
          *(_QWORD *)a1 = v6;
          *(_QWORD *)(a1 + 8) = result;
          *(_QWORD *)(a1 + 16) = v14;
          *(_BYTE *)(a1 + 24) = 1;
          return result;
        }
        v15 = v9;
        v16 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        *a2 = 0;
        a2[1] = 0;
        v17 = a2[3];
        if (v17)
        {
          if (v9)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v10, v9);
            v16 = *a2;
            v15 = a2[1];
          }
          else
          {
            v15 = 0;
            v16 = 0;
          }
        }
      }
      *a2 = 0;
      a2[1] = 0;
      v18 = a2[3];
      if (v18 && v15)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v21 = v20 == 0;
  else
    v21 = 1;
  if (!v21)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  return result;
}

void WebKit::WebExtensionController::testResult(id *a1, uint64_t a2, WTF::StringImpl **a3, _QWORD *a4, uint64_t a5)
{
  void *v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  NSObject *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  _BYTE v24[12];
  __int16 v25;
  __CFString *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionController::delegate(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WebKit::WebExtension::wrapper(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (*a3)
      v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    if (*a4)
      v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    objc_msgSend(v10, "_webExtensionController:recordTestAssertionResult:withMessage:andSourceURL:lineNumber:", v11, a2, v12, v13, a5);

  }
  else
  {
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = *a3;
      *a3 = *(WTF::StringImpl **)v24;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = (id)qword_1ECE710C8;
    v17 = v16;
    if ((_DWORD)a2)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        if (*a3)
          v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v18 = &stru_1E351F1B8;
        v19 = v18;
        if (*a4)
          v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v20 = &stru_1E351F1B8;
        *(_DWORD *)v24 = 138543874;
        *(_QWORD *)&v24[4] = v19;
        v25 = 2114;
        v26 = v20;
        v27 = 1026;
        v28 = a5;
        _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_INFO, "Test assertion passed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);

      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (*a3)
        v21 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v21 = &stru_1E351F1B8;
      v22 = v21;
      if (*a4)
        v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v23 = &stru_1E351F1B8;
      *(_DWORD *)v24 = 138543874;
      *(_QWORD *)&v24[4] = v22;
      v25 = 2114;
      v26 = v23;
      v27 = 1026;
      v28 = a5;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Test assertion failed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);

    }
  }

}

void sub_197778124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testEqual(id *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, WTF::StringImpl **a5, _QWORD *a6, int a7)
{
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  NSObject *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  uint64_t v38;
  _BYTE buf[12];
  __int16 v40;
  __CFString *v41;
  __int16 v42;
  __CFString *v43;
  __int16 v44;
  __CFString *v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionController::delegate(a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WebKit::WebExtension::wrapper(a1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (*a3)
      v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v16 = &stru_1E351F1B8;
    if (*a4)
      v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E351F1B8;
    if (*a5)
      v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v18 = &stru_1E351F1B8;
    if (*a6)
      v19 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v19 = &stru_1E351F1B8;
    LODWORD(v38) = a7;
    objc_msgSend(v14, "_webExtensionController:recordTestEqualityResult:expectedValue:actualValue:withMessage:andSourceURL:lineNumber:", v15, a2, v16, v17, v18, v19, v38);

  }
  else
  {
    if (!*a5 || !*((_DWORD *)*a5 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v21 = *a5;
      *a5 = *(WTF::StringImpl **)buf;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v22 = (id)qword_1ECE710C8;
    v23 = v22;
    if ((_DWORD)a2)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        if (*a5)
          v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v24 = &stru_1E351F1B8;
        v25 = v24;
        if (*a3)
          v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v26 = &stru_1E351F1B8;
        v27 = v26;
        if (*a4)
          v28 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v28 = &stru_1E351F1B8;
        v29 = v28;
        if (*a6)
          v30 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v30 = &stru_1E351F1B8;
        *(_DWORD *)buf = 138544386;
        *(_QWORD *)&buf[4] = v25;
        v40 = 2114;
        v41 = v27;
        v42 = 2114;
        v43 = v29;
        v44 = 2114;
        v45 = v30;
        v46 = 1026;
        v47 = a7;
        _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_INFO, "Test equality passed: %{public}@: %{public}@ === %{public}@ (%{public}@:%{public}u)", buf, 0x30u);

      }
    }
    else if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if (*a5)
        v31 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v31 = &stru_1E351F1B8;
      v32 = v31;
      if (*a3)
        v33 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v33 = &stru_1E351F1B8;
      v34 = v33;
      if (*a4)
        v35 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v35 = &stru_1E351F1B8;
      v36 = v35;
      if (*a6)
        v37 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v37 = &stru_1E351F1B8;
      *(_DWORD *)buf = 138544386;
      *(_QWORD *)&buf[4] = v32;
      v40 = 2114;
      v41 = v34;
      v42 = 2114;
      v43 = v36;
      v44 = 2114;
      v45 = v37;
      v46 = 1026;
      v47 = a7;
      _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "Test equality failed: %{public}@: %{public}@ !== %{public}@ (%{public}@:%{public}u)", buf, 0x30u);

    }
  }

}

void sub_197778598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testMessage(id *a1, WTF::StringImpl **a2, _QWORD *a3, uint64_t a4)
{
  void *v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  _BYTE v18[12];
  __int16 v19;
  __CFString *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionController::delegate(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WebKit::WebExtension::wrapper(a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (*a2)
      v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    if (*a3)
      v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    objc_msgSend(v8, "_webExtensionController:recordTestMessage:andSourceURL:lineNumber:", v9, v10, v11, a4);

  }
  else
  {
    if (!*a2 || !*((_DWORD *)*a2 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = *a2;
      *a2 = *(WTF::StringImpl **)v18;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      if (*a2)
        v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v15 = &stru_1E351F1B8;
      v16 = v15;
      if (*a3)
        v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v17 = &stru_1E351F1B8;
      *(_DWORD *)v18 = 138543874;
      *(_QWORD *)&v18[4] = v16;
      v19 = 2114;
      v20 = v17;
      v21 = 1026;
      v22 = a4;
      _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_INFO, "Test message: %{public}@ (%{public}@:%{public}u)", v18, 0x1Cu);

    }
  }

}

void sub_197778874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testYielded(id *a1, WTF::StringImpl **a2, _QWORD *a3, uint64_t a4)
{
  void *v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  _BYTE v18[12];
  __int16 v19;
  __CFString *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionController::delegate(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WebKit::WebExtension::wrapper(a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (*a2)
      v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    if (*a3)
      v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    objc_msgSend(v8, "_webExtensionController:recordTestYieldedWithMessage:andSourceURL:lineNumber:", v9, v10, v11, a4);

  }
  else
  {
    if (!*a2 || !*((_DWORD *)*a2 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = *a2;
      *a2 = *(WTF::StringImpl **)v18;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      if (*a2)
        v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v15 = &stru_1E351F1B8;
      v16 = v15;
      if (*a3)
        v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v17 = &stru_1E351F1B8;
      *(_DWORD *)v18 = 138543874;
      *(_QWORD *)&v18[4] = v16;
      v19 = 2114;
      v20 = v17;
      v21 = 1026;
      v22 = a4;
      _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_INFO, "Test yielded: %{public}@ (%{public}@:%{public}u)", v18, 0x1Cu);

    }
  }

}

void sub_197778ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::testFinished(id *a1, uint64_t a2, WTF::StringImpl **a3, _QWORD *a4, uint64_t a5)
{
  void *v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  NSObject *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  _BYTE v24[12];
  __int16 v25;
  __CFString *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionController::delegate(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WebKit::WebExtension::wrapper(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (*a3)
      v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    if (*a4)
      v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    objc_msgSend(v10, "_webExtensionController:recordTestFinishedWithResult:message:andSourceURL:lineNumber:", v11, a2, v12, v13, a5);

  }
  else
  {
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = *a3;
      *a3 = *(WTF::StringImpl **)v24;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = (id)qword_1ECE710C8;
    v17 = v16;
    if ((_DWORD)a2)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        if (*a3)
          v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v18 = &stru_1E351F1B8;
        v19 = v18;
        if (*a4)
          v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v20 = &stru_1E351F1B8;
        *(_DWORD *)v24 = 138543874;
        *(_QWORD *)&v24[4] = v19;
        v25 = 2114;
        v26 = v20;
        v27 = 1026;
        v28 = a5;
        _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_INFO, "Test passed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);

      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (*a3)
        v21 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v21 = &stru_1E351F1B8;
      v22 = v21;
      if (*a4)
        v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v23 = &stru_1E351F1B8;
      *(_DWORD *)v24 = 138543874;
      *(_QWORD *)&v24[4] = v22;
      v25 = 2114;
      v26 = v23;
      v27 = 1026;
      v28 = a5;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Test failed: %{public}@ (%{public}@:%{public}u)", v24, 0x1Cu);

    }
  }

}

void sub_197778E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_197778F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197779054(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  void *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::extensionContext(WebKit::WebExtensionController *this@<X0>, const WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  int v14;
  const void *v15;

  v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
  v7 = v6;
  v9 = v8;
  v10 = *((_QWORD *)this + 7);
  if (v10)
    v11 = (_QWORD *)(v10 + 8 * *(unsigned int *)(v10 - 4));
  else
    v11 = 0;
  if (v11 == v6)
  {
LABEL_12:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      v12 = *v7;
      CFRetain(*(CFTypeRef *)(*v7 + 8));
      v14 = WTF::equal(*(WTF **)(v12 + 112), *a2, v13);
      v15 = *(const void **)(v12 + 8);
      if (v14)
        break;
      CFRelease(v15);
      while (++v7 != v9)
      {
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_11;
      }
      v7 = v9;
LABEL_11:
      if (v7 == v11)
        goto LABEL_12;
    }
    CFRetain(v15);
    *a3 = v12;
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

void sub_197779178(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::initializePlatform(WebKit::WebExtensionController *this)
{
  const void *v2;
  _WKWebExtensionControllerHelper *cf;

  cf = -[_WKWebExtensionControllerHelper initWithWebExtensionController:]([_WKWebExtensionControllerHelper alloc], "initWithWebExtensionController:", this);
  if (cf)
    CFRetain(cf);

  v2 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = cf;
  if (v2)
    CFRelease(v2);

}

void sub_197779250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionController::getDataRecords(WebKit::WebExtensionController *a1, unsigned __int8 a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  BOOL v6;
  void *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::String *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  _BOOL4 DisplayNameFromState;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  int i;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  WebKit::WebExtensionDataRecord *v30;
  WebKit::WebExtensionDataRecord *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  WebKit::WebExtensionContext *v40;
  WTF::StringImpl *v41;
  void *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  NSObject *v50;
  __CFString *v51;
  NSObject *v52;
  WTF::StringImpl *v53;
  __CFString *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl **v56;
  unsigned __int8 v57;
  _DWORD *v59;
  uint64_t *v60;
  WebKit::WebExtensionContext *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  int v64;
  uint64_t v65[2];
  _BYTE buf[24];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 40);
  if (!v4 || ((v5 = a2, *(_DWORD *)(v4 + 4)) ? (v6 = a2 == 0) : (v6 = 1), v6))
  {
    v65[0] = 0;
    v65[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v65);
    return (WTF *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v7);
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v9[1] = 0;
  v59 = v9;
  v60 = v9 + 1;
  *(_DWORD *)v9 = 2;
  v10 = *a3;
  *a3 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34F9658;
  v11[1] = v9;
  v11[2] = v10;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v11;
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(*((_QWORD *)a1 + 5) + 40), v13);
  if (!v64)
    goto LABEL_79;
  v15 = v63;
  v56 = &v63[v64];
  v57 = v5;
  do
  {
    v62 = 0;
    WebKit::WebExtensionController::stateFilePath((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((_QWORD *)a1 + 5) + 40));
    DisplayNameFromState = WebKit::WebExtensionContext::readDisplayNameFromState((WebKit::WebExtensionContext *)buf, (const WTF::String *)&v62, v16);
    v20 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v17);
        if (DisplayNameFromState)
          goto LABEL_14;
LABEL_67:
        v52 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          if (*v15)
            v54 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v54 = &stru_1E351F1B8;
          *(_DWORD *)buf = 138477827;
          *(_QWORD *)&buf[4] = v54;
          _os_log_error_impl(&dword_196BCC000, v52, OS_LOG_TYPE_ERROR, "Failed to read extension display name from State.plist for extension: %{private}@", buf, 0xCu);

        }
        goto LABEL_69;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (!DisplayNameFromState)
      goto LABEL_67;
    do
    {
LABEL_14:
      v21 = *v60;
      if (*v60
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v60, 0), (v21 = *v60) != 0))
      {
        v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v22 = 0;
      }
      v23 = *((_DWORD *)*v15 + 4);
      if (v23 >= 0x100)
        v24 = v23 >> 8;
      else
        v24 = WTF::StringImpl::hashSlowCase(*v15);
      v25 = 0;
      for (i = 1; ; ++i)
      {
        v27 = v24 & v22;
        v28 = v21 + 16 * (v24 & v22);
        v29 = *(WTF **)v28;
        if (*(_QWORD *)v28 == -1)
        {
          v25 = (_QWORD *)(v21 + 16 * v27);
          goto LABEL_26;
        }
        if (!v29)
          break;
        if ((WTF::equal(v29, *v15, v18) & 1) != 0)
          goto LABEL_40;
LABEL_26:
        v24 = i + v27;
      }
      if (v25)
      {
        *v25 = 0;
        v25[1] = 0;
        --*(_DWORD *)(*v60 - 16);
        v28 = (uint64_t)v25;
      }
      WTF::String::operator=((WTF::StringImpl **)v28, (WTF::StringImpl *)v15);
      v30 = (WebKit::WebExtensionDataRecord *)API::Object::newObject(0x30uLL, 116);
      v31 = WebKit::WebExtensionDataRecord::WebExtensionDataRecord(v30, (const WTF::String *)&v62, (const WTF::String *)v15);
      v32 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)(v28 + 8) = v31;
      if (v32)
        CFRelease(*(CFTypeRef *)(v32 + 8));
      v33 = *v60;
      if (*v60)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v35 = *v60;
      if (*v60)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 <= 2 * v37)
LABEL_39:
          v28 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v60, (WTF::StringImpl **)v28);
      }
      else if (3 * v38 <= 4 * v37)
      {
        goto LABEL_39;
      }
LABEL_40:
      v39 = *(_QWORD *)(v28 + 8);
      v9 = v59;
      CFRetain(*(CFTypeRef *)(v39 + 8));
      WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((_QWORD *)a1 + 5) + 40));
      WebKit::WebExtensionController::extensionContext(a1, v15, &v61);
      v40 = v61;
      WebKit::WebExtensionController::sqliteStore((WTF::FileSystemImpl *)buf, (const WTF::String *)(v5 & -v5), v61);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = 0;
      if (v40)
        CFRelease(*((CFTypeRef *)v40 + 1));
      v43 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (!v43)
      {
LABEL_45:
        if (!v42)
          goto LABEL_55;
LABEL_46:
        ++*v59;
        do
          v44 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v44 + 1, (unsigned int *)v12));
        v45 = *v15;
        if (*v15)
          *(_DWORD *)v45 += 2;
        v46 = v62;
        if (v62)
          *(_DWORD *)v62 += 2;
        CFRetain(*(CFTypeRef *)(v39 + 8));
        v47 = malloc_type_malloc(0x50uLL, 0x10E0040B7C787CEuLL);
        *v47 = MEMORY[0x1E0C809A0];
        v47[1] = 50331650;
        v47[2] = WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke;
        v47[3] = &WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::descriptor;
        v47[4] = v59;
        v47[5] = v12;
        v47[6] = v45;
        v47[7] = v46;
        *((_BYTE *)v47 + 64) = v5 & -v5;
        v47[9] = v39;
        v48 = _Block_copy(v47);

        v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v49 = off_1E34F9680;
        v49[1] = v48;
        *(_QWORD *)buf = v49;
        WebKit::WebExtensionController::calculateStorageSize(v42, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
        goto LABEL_57;
      }
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
        goto LABEL_45;
      }
      WTF::StringImpl::destroy(v43, v41);
      if (v42)
        goto LABEL_46;
LABEL_55:
      v50 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        if (*v15)
          v51 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v51 = &stru_1E351F1B8;
        *(_DWORD *)buf = 138477827;
        *(_QWORD *)&buf[4] = v51;
        _os_log_error_impl(&dword_196BCC000, v50, OS_LOG_TYPE_ERROR, "Failed to create sqlite store for extension: %{private}@", buf, 0xCu);

      }
      WebKit::WebExtensionDataRecord::addError(v39, CFSTR("Unable to calculate extension storage"), v5 & -v5);
LABEL_57:

      CFRelease(*(CFTypeRef *)(v39 + 8));
      v5 &= v5 - 1;
    }
    while (v5);
LABEL_69:
    v53 = v62;
    v62 = 0;
    v5 = v57;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v14);
      else
        *(_DWORD *)v53 -= 2;
    }
    ++v15;
  }
  while (v15 != v56);
LABEL_79:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v14);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
  return WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref((WTF *)v9, v55);
}

void sub_197779874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, char a19, uint64_t a20,char a21,uint64_t a22,WTF::StringImpl *a23)
{
  unsigned int *v23;
  WTF *v24;
  WTF::StringImpl *v26;

  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v23);
  WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v24, v26);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[2];

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v8[0] = 0;
  v9[0] = v3;
  v8[1] = 0;
  v4 = a2[1];
  a2[1] = 0;
  v9[1] = v4;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v9);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197779AE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v13;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionController::stateFilePath(WebKit::WebExtensionController *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[2];

  WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)v5, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v5[1];
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197779C0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WTF::StringImpl *v9;

  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_WKWebExtensionStorageSQLiteStore *WebKit::WebExtensionController::sqliteStore(WTF::FileSystemImpl *a1, const WTF::String *a2, WebKit::WebExtensionContext *this)
{
  _WKWebExtensionStorageSQLiteStore *v6;
  __CFString *v7;
  __CFString *v8;
  _WKWebExtensionStorageSQLiteStore *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if ((_DWORD)a2 == 2)
  {
    if (this)
    {
      WebKit::WebExtensionContext::sessionStorageStore(this);
      return (_WKWebExtensionStorageSQLiteStore *)(id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      return (_WKWebExtensionStorageSQLiteStore *)0;
    }
  }
  else
  {
    WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash(a1, a2);
    v6 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (v11)
      v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E351F1B8;
    if (*(_QWORD *)a1)
      v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v8 = &stru_1E351F1B8;
    v9 = -[_WKWebExtensionStorageSQLiteStore initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:](v6, "initWithUniqueIdentifier:storageType:directory:usesInMemoryDatabase:", v7, a2, v8, 0);

    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return v9;
  }
}

void sub_197779D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  WTF::StringImpl *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::storageDirectory(WebKit::WebExtensionController *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::pathByAppendingComponent();
}

void WebKit::WebExtensionController::calculateStorageSize(void *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a1;
  v3 = *a2;
  *a2 = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke;
  v4[3] = &WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::descriptor;
  v4[4] = v3;
  v5 = _Block_copy(v4);

  v6 = _Block_copy(v5);
  objc_msgSend(v7, "getStorageSizeForKeys:completionHandler:", MEMORY[0x1E0C9AA60], v6);

}

void sub_197779EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::getDataRecord(WebKit::WebExtensionController *a1, const WTF::String *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  WTF::FileSystemImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  BOOL v11;
  const WTF::StringImpl *v13;
  WTF **v14;
  uint64_t v15;
  WTF::String *v16;
  WTF::StringImpl *v17;
  _BOOL4 DisplayNameFromState;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  int i;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  WebKit::WebExtensionDataRecord *v35;
  WebKit::WebExtensionDataRecord *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WebKit::WebExtensionContext *v45;
  WTF::StringImpl *v46;
  void *v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  NSObject *v55;
  __CFString *v56;
  WTF::StringImpl *v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WebKit::WebExtensionController *v62;
  WebKit::WebExtensionContext *v63;
  uint64_t v64;
  WTF **v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  _BYTE buf[24];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 5);
  v9 = *(_QWORD *)(v6 + 40);
  v7 = (WTF::FileSystemImpl *)(v6 + 40);
  v8 = v9;
  if (!v9 || ((v10 = a2, *(_DWORD *)(v8 + 4)) ? (v11 = a2 == 0) : (v11 = 1), v11))
  {
    v69 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()(a4, &v69);
    if (v69)
      CFRelease(*(CFTypeRef *)(v69 + 8));
  }
  else
  {
    v67 = 0;
    v68 = 0;
    WTF::FileSystemImpl::listDirectory(v7, a2);
    if (v66)
    {
      v14 = v65;
      v15 = 8 * v66;
      while (1)
      {
        if (!WTF::equal(*v14, *(const WTF::StringImpl **)(a3 + 112), v13))
          goto LABEL_18;
        WebKit::WebExtensionController::stateFilePath((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((_QWORD *)a1 + 5) + 40));
        DisplayNameFromState = WebKit::WebExtensionContext::readDisplayNameFromState((WebKit::WebExtensionContext *)buf, (const WTF::String *)&v67, v16);
        v19 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (!v19)
          goto LABEL_15;
        if (*(_DWORD *)v19 != 2)
          break;
        WTF::StringImpl::destroy(v19, v17);
        if (DisplayNameFromState)
        {
LABEL_20:
          WTF::String::operator=(&v68, (WTF::StringImpl *)v14);
          goto LABEL_21;
        }
LABEL_18:
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_21;
      }
      *(_DWORD *)v19 -= 2;
LABEL_15:
      if (DisplayNameFromState)
        goto LABEL_20;
      goto LABEL_18;
    }
LABEL_21:
    if (v68)
    {
      v20 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      v20[1] = 0;
      v21 = v20 + 1;
      *(_DWORD *)v20 = 2;
      v22 = *a4;
      *a4 = 0;
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v23 = &off_1E34F96A8;
      v23[1] = v20;
      v23[2] = v22;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = v23;
      v62 = a1;
      while (1)
      {
        v26 = *v21;
        if (*v21
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v21, 0), (v26 = *v21) != 0))
        {
          v27 = *(_DWORD *)(v26 - 8);
        }
        else
        {
          v27 = 0;
        }
        v28 = *((_DWORD *)v68 + 4);
        if (v28 >= 0x100)
          v29 = v28 >> 8;
        else
          v29 = WTF::StringImpl::hashSlowCase(v68);
        v30 = 0;
        for (i = 1; ; ++i)
        {
          v32 = v29 & v27;
          v33 = v26 + 16 * (v29 & v27);
          v34 = *(WTF **)v33;
          if (*(_QWORD *)v33 == -1)
          {
            v30 = (_QWORD *)(v26 + 16 * v32);
            goto LABEL_35;
          }
          if (!v34)
            break;
          if ((WTF::equal(v34, v68, v24) & 1) != 0)
            goto LABEL_49;
LABEL_35:
          v29 = i + v32;
        }
        if (v30)
        {
          *v30 = 0;
          v30[1] = 0;
          --*(_DWORD *)(*v21 - 16);
          v33 = (uint64_t)v30;
        }
        WTF::String::operator=((WTF::StringImpl **)v33, (WTF::StringImpl *)&v68);
        v35 = (WebKit::WebExtensionDataRecord *)API::Object::newObject(0x30uLL, 116);
        v36 = WebKit::WebExtensionDataRecord::WebExtensionDataRecord(v35, (const WTF::String *)&v67, (const WTF::String *)&v68);
        v37 = *(_QWORD *)(v33 + 8);
        *(_QWORD *)(v33 + 8) = v36;
        if (v37)
          CFRelease(*(CFTypeRef *)(v37 + 8));
        v38 = *v21;
        if (*v21)
          v39 = *(_DWORD *)(v38 - 12) + 1;
        else
          v39 = 1;
        *(_DWORD *)(v38 - 12) = v39;
        v40 = *v21;
        if (*v21)
          v41 = *(_DWORD *)(v40 - 12);
        else
          v41 = 0;
        v42 = (*(_DWORD *)(v40 - 16) + v41);
        v43 = *(unsigned int *)(v40 - 4);
        if (v43 > 0x400)
        {
          if (v43 <= 2 * v42)
LABEL_48:
            v33 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v21, (WTF::StringImpl **)v33);
        }
        else if (3 * v43 <= 4 * v42)
        {
          goto LABEL_48;
        }
LABEL_49:
        v44 = *(_QWORD *)(v33 + 8);
        CFRetain(*(CFTypeRef *)(v44 + 8));
        WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((_QWORD *)v62 + 5) + 40));
        WebKit::WebExtensionController::extensionContext(v62, &v68, &v63);
        v45 = v63;
        WebKit::WebExtensionController::sqliteStore((WTF::FileSystemImpl *)buf, (const WTF::String *)(v10 & -v10), v63);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = 0;
        if (v45)
          CFRelease(*((CFTypeRef *)v45 + 1));
        v48 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (!v48)
        {
LABEL_54:
          if (!v47)
            goto LABEL_64;
LABEL_55:
          ++*(_DWORD *)v20;
          do
            v49 = __ldaxr((unsigned int *)v25);
          while (__stlxr(v49 + 1, (unsigned int *)v25));
          v50 = v68;
          if (v68)
            *(_DWORD *)v68 += 2;
          v51 = v67;
          if (v67)
            *(_DWORD *)v67 += 2;
          CFRetain(*(CFTypeRef *)(v44 + 8));
          v52 = malloc_type_malloc(0x50uLL, 0x10E0040B7C787CEuLL);
          *v52 = MEMORY[0x1E0C809A0];
          v52[1] = 50331650;
          v52[2] = WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke;
          v52[3] = &WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::descriptor;
          v52[4] = v20;
          v52[5] = v25;
          v52[6] = v50;
          v52[7] = v51;
          *((_BYTE *)v52 + 64) = v10 & -v10;
          v52[9] = v44;
          v53 = _Block_copy(v52);

          v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v54 = off_1E34F9680;
          v54[1] = v53;
          *(_QWORD *)buf = v54;
          WebKit::WebExtensionController::calculateStorageSize(v47, (uint64_t *)buf);
          if (*(_QWORD *)buf)
            (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
          goto LABEL_66;
        }
        if (*(_DWORD *)v48 != 2)
        {
          *(_DWORD *)v48 -= 2;
          goto LABEL_54;
        }
        WTF::StringImpl::destroy(v48, v46);
        if (v47)
          goto LABEL_55;
LABEL_64:
        v55 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          if (v68)
            v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v56 = &stru_1E351F1B8;
          *(_DWORD *)buf = 138477827;
          *(_QWORD *)&buf[4] = v56;
          _os_log_error_impl(&dword_196BCC000, v55, OS_LOG_TYPE_ERROR, "Failed to create sqlite store for extension: %{private}@", buf, 0xCu);

        }
        WebKit::WebExtensionDataRecord::addError(v44, CFSTR("Unable to calculcate extension storage"), v10 & -v10);
LABEL_66:

        CFRelease(*(CFTypeRef *)(v44 + 8));
        v10 &= v10 - 1;
        if (!v10)
        {
          WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v25);
          WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref((WTF *)v20, v57);
          goto LABEL_77;
        }
      }
    }
    v64 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()(a4, &v64);
    if (v64)
      CFRelease(*(CFTypeRef *)(v64 + 8));
LABEL_77:
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v58);
    v60 = v67;
    v67 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v59);
      else
        *(_DWORD *)v60 -= 2;
    }
    v61 = v68;
    v68 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v59);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
}

void sub_19777A4FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  v23 = a18;
  a18 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = a19;
  a19 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19777A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionController::removeData(WebKit::WebExtensionController *a1, unsigned __int8 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  BOOL v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  unsigned __int8 v16;
  CFTypeRef *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  WTF::StringImpl *v30;
  __CFString *v31;
  uint64_t v32;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t *v36;
  WebKit::WebExtensionContext *v37;
  const WTF::StringImpl *v38;
  uint8_t buf[24];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 40);
  if (!v4 || ((v5 = a2, *(_DWORD *)(v4 + 4)) ? (v6 = a2 == 0) : (v6 = 1), v6 || !*(_DWORD *)(a3 + 12)))
  {
    v32 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34F96D0;
  v10[1] = v9;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v12)
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
  v13 = *(uint64_t **)a3;
  v34 = *(_QWORD *)a3 + 8 * v12;
  v35 = v5;
  do
  {
    v14 = *v13;
    CFRetain(*(CFTypeRef *)(*v13 + 8));
    v36 = v13;
    v15 = *(const WTF::StringImpl **)(v14 + 24);
    if (v15)
      *(_DWORD *)v15 += 2;
    v38 = v15;
    v16 = v5;
    do
    {
      WebKit::WebExtensionController::extensionContext(a1, &v38, &v37);
      WebKit::WebExtensionController::storageDirectory((WebKit::WebExtensionController *)buf, *(const WTF::String **)(*((_QWORD *)a1 + 5) + 40));
      v17 = (CFTypeRef *)v37;
      if (v37)
        CFRetain(*((CFTypeRef *)v37 + 1));
      WebKit::WebExtensionController::sqliteStore((WTF::FileSystemImpl *)buf, (const WTF::String *)(v16 & -v16), (WebKit::WebExtensionContext *)v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
        CFRelease(v17[1]);
      v20 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (!v20)
        goto LABEL_19;
      if (*(_DWORD *)v20 != 2)
      {
        *(_DWORD *)v20 -= 2;
LABEL_19:
        if (!v19)
          goto LABEL_26;
        goto LABEL_22;
      }
      WTF::StringImpl::destroy(v20, v18);
      if (!v19)
      {
LABEL_26:
        v29 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          if (v15)
            v31 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v31 = &stru_1E351F1B8;
          *(_DWORD *)buf = 138477827;
          *(_QWORD *)&buf[4] = v31;
          _os_log_error_impl(&dword_196BCC000, v29, OS_LOG_TYPE_ERROR, "Failed to create sqlite store for extension: %{private}@", buf, 0xCu);

        }
        WebKit::WebExtensionDataRecord::addError(v14, CFSTR("Unable to delete extension storage"), v16 & -v16);
        goto LABEL_28;
      }
      do
LABEL_22:
        v21 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v21 + 1, (unsigned int *)v11));
      v15 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      v22 = malloc_type_malloc(0x40uLL, 0x10E004019769CA1uLL);
      *v22 = MEMORY[0x1E0C809A0];
      v22[1] = 50331650;
      v22[2] = WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<void,WTF::String> &)#1}::__invoke;
      v22[3] = &WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
      v22[4] = v11;
      v22[5] = v15;
      *((_BYTE *)v22 + 48) = v16 & -v16;
      v22[7] = v14;
      v23 = _Block_copy(v22);

      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E34F96F8;
      v24[1] = v23;
      v25 = v19;
      v26 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v26 = MEMORY[0x1E0C809A0];
      v26[1] = 50331650;
      v26[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
      v26[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
      v26[4] = v24;
      v27 = _Block_copy(v26);

      v28 = _Block_copy(v27);
      objc_msgSend(v25, "deleteDatabaseWithCompletionHandler:", v28);

LABEL_28:
      if (v37)
        CFRelease(*((CFTypeRef *)v37 + 1));
      v16 &= v16 - 1;
    }
    while (v16);
    v38 = 0;
    v5 = v35;
    if (!v15)
      goto LABEL_39;
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v30);
      if (v14)
        goto LABEL_40;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
LABEL_39:
      if (v14)
LABEL_40:
        CFRelease(*(CFTypeRef *)(v14 + 8));
    }
    v13 = v36 + 1;
  }
  while (v36 + 1 != (uint64_t *)v34);
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
}

void sub_19777AC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::load(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  WTF **v33;
  int v34;
  unsigned int v35;
  WTF **v36;
  WTF *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t *matched;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t j;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  WTF **v68;
  int v69;
  unsigned int v70;
  WTF **v71;
  WTF *v72;
  const WTF::String *v73;
  WebKit::WebExtensionURLSchemeHandler *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  WTF *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  WTF::StringImpl *v90;
  _QWORD *v91;
  NSObject *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  const WTF::StringImpl *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  IPC::Encoder *v115;
  WTF *v116;
  void *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  __CFString *v125;
  __CFString *v126;
  _QWORD **v127;
  uint64_t *v128;
  WTF::URL *v129;
  _QWORD *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  unsigned int *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144[2];
  _QWORD v145[2];
  char v146;
  IPC::Encoder *v147;
  _OWORD buf[9];
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  if (a3)
    *a3 = 0;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v7 = (uint64_t *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::expand((uint64_t *)(a1 + 56)),
        (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
  v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v8;
    v16 = (uint64_t *)(v6 + 8 * v15);
    v17 = *v16;
    if (*v16 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v15);
      goto LABEL_12;
    }
    if (!v17)
      break;
    if (v17 == a2)
    {
      CFRelease(*(CFTypeRef *)(a2 + 8));
      v18 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "Extension context already loaded", (uint8_t *)buf, 2u);
        if (a3)
          goto LABEL_17;
      }
      else if (a3)
      {
LABEL_17:
        WebKit::WebExtensionContext::createError(a2, 2, 0, 0);
        v19 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        return v19;
      }
      return 0;
    }
LABEL_12:
    v13 = i + v15;
  }
  if (v9)
  {
    *v9 = 0;
    --*(_DWORD *)(*v7 - 16);
    *v9 = a2;
  }
  else
  {
    *v16 = a2;
  }
  v20 = *v7;
  if (*v7)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v7;
  if (*v7)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v130 = a3;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
LABEL_27:
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::expand((uint64_t *)(a1 + 56));
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_27;
  }
  v129 = (WTF::URL *)(a2 + 72);
  WTF::URL::protocolHostAndPort((WTF::URL *)(a2 + 72));
  v28 = (uint64_t *)(a1 + 64);
  v29 = *(_QWORD *)(a1 + 64);
  if (v29
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 64)),
        (v29 = *v28) != 0))
  {
    v30 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v30 = 0;
  }
  v31 = *(_DWORD *)(*(_QWORD *)&buf[0] + 16);
  v128 = (uint64_t *)(a1 + 64);
  if (v31 >= 0x100)
    v32 = v31 >> 8;
  else
    v32 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)&buf[0]);
  v33 = 0;
  v34 = 1;
  while (2)
  {
    v35 = v32 & v30;
    v36 = (WTF **)(v29 + 16 * (v32 & v30));
    v37 = *v36;
    if (*v36 == (WTF *)-1)
    {
      v33 = (WTF **)(v29 + 16 * v35);
LABEL_40:
      v32 = v34 + v35;
      ++v34;
      continue;
    }
    break;
  }
  if (v37)
  {
    if ((WTF::equal(v37, *(const WTF::StringImpl **)&buf[0], v27) & 1) != 0)
    {
      v40 = 1;
      goto LABEL_60;
    }
    goto LABEL_40;
  }
  if (v33)
  {
    *v33 = 0;
    v33[1] = 0;
    --*(_DWORD *)(*v128 - 16);
    v36 = v33;
  }
  v38 = *(WTF **)&buf[0];
  *(_QWORD *)&buf[0] = 0;
  v39 = *v36;
  *v36 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v26);
    else
      *(_DWORD *)v39 -= 2;
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v41 = v36[1];
  v36[1] = (WTF *)a2;
  if (v41)
    CFRelease(*((CFTypeRef *)v41 + 1));
  v42 = *v128;
  if (*v128)
    v43 = *(_DWORD *)(v42 - 12) + 1;
  else
    v43 = 1;
  *(_DWORD *)(v42 - 12) = v43;
  v44 = *v128;
  if (*v128)
    v45 = *(_DWORD *)(v44 - 12);
  else
    v45 = 0;
  v46 = (*(_DWORD *)(v44 - 16) + v45);
  v47 = *(unsigned int *)(v44 - 4);
  if (v47 > 0x400)
  {
    if (v47 <= 2 * v46)
LABEL_58:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v128);
  }
  else if (3 * v47 <= 4 * v46)
  {
    goto LABEL_58;
  }
  v40 = 0;
LABEL_60:
  v48 = *(WTF::StringImpl **)&buf[0];
  *(_QWORD *)&buf[0] = 0;
  if (!v48)
  {
LABEL_63:
    if (!v40)
      goto LABEL_70;
LABEL_64:
    v49 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      WTF::URL::operator NSURL *();
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 138477827;
      *(_QWORD *)((char *)buf + 4) = v124;
      _os_log_error_impl(&dword_196BCC000, v49, OS_LOG_TYPE_ERROR, "Extension context already loaded with same base URL: %{private}@", (uint8_t *)buf, 0xCu);

    }
    v50 = *v7;
    matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(*v7, a2);
    if (v50)
    {
      v52 = (uint64_t *)(v50 + 8 * *(unsigned int *)(v50 - 4));
      v53 = v130;
      if (v52 == matched)
        goto LABEL_76;
    }
    else
    {
      v53 = v130;
      if (!matched)
        goto LABEL_76;
      v52 = 0;
    }
    if (v52 != matched)
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove(v7, matched);
      v53 = v130;
    }
LABEL_76:
    if (v53)
    {
      WebKit::WebExtensionContext::createError(a2, 4, 0, 0);
      v19 = 0;
      *v130 = (id)objc_claimAutoreleasedReturnValue();
      return v19;
    }
    return 0;
  }
  if (*(_DWORD *)v48 != 2)
  {
    *(_DWORD *)v48 -= 2;
    goto LABEL_63;
  }
  WTF::StringImpl::destroy(v48, v26);
  if (v40)
    goto LABEL_64;
LABEL_70:
  v127 = (_QWORD **)(a1 + 88);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 88), buf);
  v54 = *(_QWORD *)(a1 + 88);
  if (v54)
  {
    v55 = *(unsigned int *)(v54 - 4);
    v56 = (_QWORD *)(v54 + 8 * v55);
  }
  else
  {
    v56 = 0;
    v55 = 0;
  }
  v139 = a1 + 88;
  v140 = v56;
  v141 = v56;
  v142 = v56;
  v143 = (_QWORD *)(v54 + 8 * v55);
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v139);
  for (j = *((_QWORD *)&buf[0] + 1); *((_QWORD **)&buf[0] + 1) != v140; j = *((_QWORD *)&buf[0] + 1))
  {
    v58 = *(_QWORD *)(*(_QWORD *)j + 8);
    if (v58)
      v59 = v58 - 16;
    else
      v59 = 0;
    CFRetain(*(CFTypeRef *)(v59 + 8));
    v60 = *(_QWORD *)(a2 + 32);
    v145[0] = 160;
    v145[1] = v60;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v59 + 64), (unsigned __int8 *)v145, a2 + 16, &v134);
    if (v58)
      CFRelease(*(CFTypeRef *)(v58 - 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  WTF::URL::protocol(v129);
  if ((v61 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v64 = (uint64_t *)(a1 + 168);
  v63 = *(_QWORD *)(a1 + 168);
  if (v63
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 168)),
        (v63 = *v64) != 0))
  {
    v65 = *(_DWORD *)(v63 - 8);
  }
  else
  {
    v65 = 0;
  }
  v66 = *((_DWORD *)v133 + 4);
  if (v66 >= 0x100)
    v67 = v66 >> 8;
  else
    v67 = WTF::StringImpl::hashSlowCase(v133);
  v68 = 0;
  v69 = 1;
  while (2)
  {
    v70 = v67 & v65;
    v71 = (WTF **)(v63 + 16 * (v67 & v65));
    v72 = *v71;
    if (*v71 == (WTF *)-1)
    {
      v68 = (WTF **)(v63 + 16 * v70);
LABEL_100:
      v67 = v69 + v70;
      ++v69;
      continue;
    }
    break;
  }
  if (v72)
  {
    if ((WTF::equal(v72, v133, v62) & 1) != 0)
      goto LABEL_136;
    goto LABEL_100;
  }
  if (v68)
  {
    *v68 = 0;
    v68[1] = 0;
    --*(_DWORD *)(*v64 - 16);
    v71 = v68;
  }
  WTF::String::operator=(v71, (WTF::StringImpl *)&v133);
  v74 = (WebKit::WebExtensionURLSchemeHandler *)WTF::fastMalloc((WTF *)0x40);
  WebKit::WebExtensionURLSchemeHandler::WebExtensionURLSchemeHandler(v74, (WebKit::WebExtensionController *)a1);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 72), buf);
  v75 = *(_QWORD *)(a1 + 72);
  if (v75)
  {
    v76 = *(unsigned int *)(v75 - 4);
    v77 = (_QWORD *)(v75 + 8 * v76);
  }
  else
  {
    v77 = 0;
    v76 = 0;
  }
  v139 = a1 + 72;
  v140 = v77;
  v141 = v77;
  v142 = v77;
  v143 = (_QWORD *)(v75 + 8 * v76);
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v139);
  while (2)
  {
    if (*((_QWORD **)&buf[0] + 1) != v140)
    {
      v78 = *(_QWORD *)(**((_QWORD **)&buf[0] + 1) + 8);
      if (v78)
        v79 = v78 - 16;
      else
        v79 = 0;
      CFRetain(*(CFTypeRef *)(v79 + 8));
      ++*((_DWORD *)v74 + 2);
      v134 = (unsigned int *)v74;
      WebKit::WebPageProxy::setURLSchemeHandlerForScheme((_QWORD *)v79, (const WTF::StringImpl **)&v134);
      v80 = v134;
      v134 = 0;
      if (v80)
      {
        if (v80[2] != 1)
        {
          --v80[2];
          goto LABEL_115;
        }
        (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
        if (!v78)
        {
LABEL_117:
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
          continue;
        }
      }
      else
      {
LABEL_115:
        if (!v78)
          goto LABEL_117;
      }
      CFRelease(*(CFTypeRef *)(v78 - 8));
      goto LABEL_117;
    }
    break;
  }
  v81 = v71[1];
  v71[1] = v74;
  if (v81)
  {
    if (*((_DWORD *)v81 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v81 + 8))(v81);
    else
      --*((_DWORD *)v81 + 2);
  }
  v82 = *v64;
  if (*v64)
    v83 = *(_DWORD *)(v82 - 12) + 1;
  else
    v83 = 1;
  *(_DWORD *)(v82 - 12) = v83;
  v84 = *v64;
  if (*v64)
    v85 = *(_DWORD *)(v84 - 12);
  else
    v85 = 0;
  v86 = (*(_DWORD *)(v84 - 16) + v85);
  v87 = *(unsigned int *)(v84 - 4);
  if (v87 > 0x400)
  {
    if (v87 <= 2 * v86)
LABEL_135:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 168));
  }
  else if (3 * v87 <= 4 * v86)
  {
    goto LABEL_135;
  }
LABEL_136:
  v88 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
  if (!v88 || (*(_DWORD *)(v88 + 4) ? (v89 = *(_BYTE *)(a2 + 120) == 0) : (v89 = 1), v89))
  {
    v90 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    v91 = v130;
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v90 += 2;
    v132 = v90;
    if (v90)
    {
LABEL_147:
      if ((WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v132, v73) & 1) == 0)
      {
        v92 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          if (v132)
            v125 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v125 = &stru_1E351F1B8;
          v126 = v125;
          LODWORD(buf[0]) = 138477827;
          *(_QWORD *)((char *)buf + 4) = v126;
          _os_log_error_impl(&dword_196BCC000, v92, OS_LOG_TYPE_ERROR, "Failed to create directory: %{private}@", (uint8_t *)buf, 0xCu);

        }
      }
      v90 = v132;
      if (v132)
        *(_DWORD *)v132 += 2;
      v91 = v130;
    }
  }
  else
  {
    v91 = v130;
    WTF::FileSystemImpl::pathByAppendingComponent();
    v90 = v132;
    if (v132)
      goto LABEL_147;
  }
  v131 = v90;
  v19 = WebKit::WebExtensionContext::load(a2, a1, (WTF::StringImpl *)&v131, v91);
  v94 = v131;
  v131 = 0;
  if (!v94)
  {
LABEL_156:
    if ((v19 & 1) == 0)
      goto LABEL_160;
    goto LABEL_157;
  }
  if (*(_DWORD *)v94 != 2)
  {
    *(_DWORD *)v94 -= 2;
    goto LABEL_156;
  }
  WTF::StringImpl::destroy(v94, v93);
  if ((v19 & 1) != 0)
  {
LABEL_157:
    WebKit::WebExtensionContext::parameters((WebKit::WebExtensionContext *)a2, (uint64_t)buf);
    v95 = *(_QWORD *)(a1 + 32);
    WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)a1, v144);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v144, &v139);
    if (v144[0])
    {
      v96 = *((unsigned int *)v144[0] - 1);
      v97 = &v144[0][v96];
    }
    else
    {
      v97 = 0;
      v96 = 0;
    }
    v134 = (unsigned int *)v144;
    v135 = v97;
    v136 = v97;
    v137 = v97;
    v138 = &v144[0][v96];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v134);
    while (v140 != v135)
    {
      v110 = *(_QWORD *)(*v140 + 8);
      v111 = *(_QWORD *)(v110 + 136);
      if (v111 && *(_BYTE *)(v111 + 104) || *(_QWORD *)(v110 + 144))
      {
        v112 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v112 = 1693;
        *(_QWORD *)(v112 + 8) = v95;
        *(_QWORD *)(v112 + 528) = v112 + 16;
        *(_QWORD *)(v112 + 536) = v112 + 16;
        *(_OWORD *)(v112 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v112 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v112);
        v147 = (IPC::Encoder *)v112;
        IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::encode((IPC::Encoder *)v112, (uint64_t *)buf);
        LOBYTE(v145[0]) = 0;
        v146 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v110, &v147, 0, (uint64_t)v145, 1);
        if (v146)
        {
          v114 = v145[0];
          v145[0] = 0;
          if (v114)
            (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
        }
        v115 = v147;
        v147 = 0;
        if (v115)
        {
          IPC::Encoder::~Encoder(v115, v113);
          WTF::fastFree(v116, v117);
        }
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v139);
    }
    if (v144[0])
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v144[0], v109);
    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)buf, v109);
    goto LABEL_195;
  }
LABEL_160:
  v98 = *v7;
  v99 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(*v7, a2);
  if (v98)
  {
    v100 = (uint64_t *)(v98 + 8 * *(unsigned int *)(v98 - 4));
    if (v100 == v99)
      goto LABEL_167;
  }
  else
  {
    if (!v99)
      goto LABEL_167;
    v100 = 0;
  }
  if (v100 != v99)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove((uint64_t *)(a1 + 56), v99);
LABEL_167:
  WTF::URL::protocolHostAndPort(v129);
  v102 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v128, (WTF::StringImpl **)buf, v101);
  v103 = (WTF::StringImpl *)v102;
  if (*v128)
  {
    v104 = *v128 + 16 * *(unsigned int *)(*v128 - 4);
    if (v104 == v102)
      goto LABEL_174;
  }
  else
  {
    if (!v102)
      goto LABEL_174;
    v104 = 0;
  }
  if (v104 != v102)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v128, v102);
LABEL_174:
  v105 = *(WTF::StringImpl **)&buf[0];
  *(_QWORD *)&buf[0] = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, v103);
    else
      *(_DWORD *)v105 -= 2;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v127, buf);
  v106 = *v127;
  if (*v127)
  {
    v107 = *((unsigned int *)v106 - 1);
    v108 = &v106[v107];
  }
  else
  {
    v108 = 0;
    v107 = 0;
  }
  v139 = a1 + 88;
  v140 = v108;
  v141 = v108;
  v142 = v108;
  v143 = &v106[v107];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v139);
  while (*((_QWORD **)&buf[0] + 1) != v140)
  {
    v122 = *(_QWORD *)(**((_QWORD **)&buf[0] + 1) + 8);
    if (v122)
      v123 = v122 - 16;
    else
      v123 = 0;
    CFRetain(*(CFTypeRef *)(v123 + 8));
    IPC::MessageReceiverMap::removeMessageReceiver(v123 + 56, 0xA0u, *(_QWORD *)(a2 + 32));
    if (v122)
      CFRelease(*(CFTypeRef *)(v122 - 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
LABEL_195:
  v119 = v132;
  v132 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, v118);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = v133;
  v133 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, v118);
    else
      *(_DWORD *)v120 -= 2;
  }
  return v19;
}

void sub_19777BA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,IPC::Encoder *a34,WTF::StringImpl *a35)
{
  void *v35;
  WTF::StringImpl *v37;

  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v37);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v37);
    else
      *(_DWORD *)a18 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::unload(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *matched;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint8_t buf[8];
  _QWORD *v42;
  _QWORD *v43[2];
  uint64_t v44;
  char v45;
  IPC::Encoder *v46;

  if (a3)
    *a3 = 0;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v6 = a1[7];
  matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(v6, a2);
  if (v6)
  {
    v8 = (uint64_t *)(v6 + 8 * *(unsigned int *)(v6 - 4));
    if (v8 == matched)
    {
LABEL_13:
      v13 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Extension context not loaded", buf, 2u);
        if (a3)
          goto LABEL_15;
      }
      else if (a3)
      {
LABEL_15:
        WebKit::WebExtensionContext::createError(a2, 3, 0, 0);
        v14 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_52;
      }
      v14 = 0;
      goto LABEL_52;
    }
  }
  else
  {
    if (!matched)
      goto LABEL_13;
    v8 = 0;
  }
  if (v8 != matched)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove(a1 + 7, matched);
  WTF::URL::protocolHostAndPort((WTF::URL *)(a2 + 72));
  v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 8, (WTF::StringImpl **)buf, v9);
  v11 = (WTF::StringImpl *)v10;
  if (a1[8])
  {
    v12 = a1[8] + 16 * *(unsigned int *)(a1[8] - 4);
    if (v12 == v10)
      goto LABEL_20;
LABEL_18:
    if (v12 != v10)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1 + 8, v10);
    goto LABEL_20;
  }
  if (v10)
  {
    v12 = 0;
    goto LABEL_18;
  }
LABEL_20:
  v15 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  v35 = *(_QWORD *)(a2 + 32);
  v16 = a1[4];
  WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)a1, v43);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v43, buf);
  if (v43[0])
  {
    v17 = *((unsigned int *)v43[0] - 1);
    v18 = &v43[0][v17];
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v36 = v43;
  v37 = v18;
  v38 = v18;
  v39 = v18;
  v40 = &v43[0][v17];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
  while (v42 != v37)
  {
    v20 = *(_QWORD *)(*v42 + 8);
    v21 = *(_QWORD *)(v20 + 136);
    if (v21 && *(_BYTE *)(v21 + 104) || *(_QWORD *)(v20 + 144))
    {
      v22 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v22 = 1694;
      *(_QWORD *)(v22 + 8) = v16;
      *(_QWORD *)(v22 + 528) = v22 + 16;
      *(_QWORD *)(v22 + 536) = v22 + 16;
      *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v22 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
      v46 = (IPC::Encoder *)v22;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, &v35);
      LOBYTE(v44) = 0;
      v45 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v46, 0, (uint64_t)&v44, 1);
      if (v45)
      {
        v24 = v44;
        v44 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      v25 = v46;
      v46 = 0;
      if (v25)
      {
        IPC::Encoder::~Encoder(v25, v23);
        WTF::fastFree(v26, v27);
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if (v43[0])
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v43[0], v19);
  v28 = (_QWORD **)(a1 + 11);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v28, buf);
  v29 = *v28;
  if (*v28)
  {
    v30 = *((unsigned int *)v29 - 1);
    v31 = &v29[v30];
  }
  else
  {
    v31 = 0;
    v30 = 0;
  }
  v36 = v28;
  v37 = v31;
  v38 = v31;
  v39 = v31;
  v40 = &v29[v30];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
  while (v42 != v37)
  {
    v32 = *(_QWORD *)(*v42 + 8);
    if (v32)
      v33 = v32 - 16;
    else
      v33 = 0;
    CFRetain(*(CFTypeRef *)(v33 + 8));
    IPC::MessageReceiverMap::removeMessageReceiver(v33 + 56, 0xA0u, *(_QWORD *)(a2 + 32));
    if (v32)
      CFRelease(*(CFTypeRef *)(v32 - 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  v14 = WebKit::WebExtensionContext::unload((WebKit::WebExtensionContext *)a2, a3);
LABEL_52:
  CFRelease(*(CFTypeRef *)(a2 + 8));
  return v14;
}

void sub_19777BF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  CFRelease(*(CFTypeRef *)(v23 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionController::unloadAll(WebKit::WebExtensionController *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::HashTable((uint64_t *)&v8, (_QWORD **)this + 7);
  v3 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v8);
  v4 = v2;
  result = v8;
  if (v8)
    v6 = &v8[*((unsigned int *)v8 - 1)];
  else
    v6 = 0;
  if (v6 != v3)
  {
    do
    {
      v7 = *v3;
      CFRetain(*(CFTypeRef *)(*v3 + 8));
      WebKit::WebExtensionController::unload(this, v7, 0);
      CFRelease(*(CFTypeRef *)(v7 + 8));
      while (++v3 != v4)
      {
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v4;
LABEL_10:
      ;
    }
    while (v3 != v6);
    result = v8;
  }
  if (result)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(result, v2);
  return result;
}

void sub_19777C0E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::addPage(WebKit::WebExtensionController *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  WebKit::WebProcessPool *v13;
  unsigned int *v14;
  uint64_t *v15;
  WTF::StringImpl **v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  API::HTTPCookieStore *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52[2];
  char v53;

  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 72, (unsigned int *)a2, (uint64_t)v52);
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (_QWORD *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = (_QWORD *)*((_QWORD *)this + 21);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = (_QWORD *)*((_QWORD *)this + 21);
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v7 = (_QWORD *)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (v4)
  {
LABEL_8:
    v9 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  while (v7 != v9)
  {
    v10 = v7[1];
    ++*(_DWORD *)(v10 + 8);
    v52[0] = (uint64_t *)v10;
    WebKit::WebPageProxy::setURLSchemeHandlerForScheme(a2, (const WTF::StringImpl **)v52);
    v11 = v52[0];
    v52[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1)
        (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      else
        --*((_DWORD *)v11 + 2);
    }
    v12 = v7 + 2;
    v7 = v6;
    if (v12 != v6)
    {
      v7 = v12;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v13 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)a2 + 6) + 24));
  CFRetain(*((CFTypeRef *)v13 + 1));
  v14 = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 88, (unsigned int *)v13, (uint64_t)v52);
  if (v53)
  {
    v15 = WebKit::WebExtensionMatchPattern::extensionSchemes((WebKit::WebExtensionMatchPattern *)v14);
    v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v15);
    v18 = v16;
    v20 = v19;
    if (*v15)
      v21 = *v15 + 8 * *(unsigned int *)(*v15 - 4);
    else
      v21 = 0;
    if ((WTF::StringImpl **)v21 != v16)
    {
      do
      {
        WebKit::WebProcessPool::registerURLSchemeAsSecure(v13, v18, v17);
        WebKit::WebProcessPool::registerURLSchemeAsBypassingContentSecurityPolicy(v13, v18, v22);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v13 + 44, v18, v23, (uint64_t)v52);
        v52[0] = (uint64_t *)v18;
        WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>((uint64_t)v13, v52, 0);
        while (++v18 != v20)
        {
          if ((unint64_t)*v18 + 1 > 1)
            goto LABEL_33;
        }
        v18 = v20;
LABEL_33:
        ;
      }
      while (v18 != (WTF::StringImpl **)v21);
    }
    v24 = *((_QWORD *)this + 4);
    v50 = 162;
    v51 = v24;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v13 + 8, (unsigned __int8 *)&v50, (uint64_t)this + 16, (unsigned int **)v52);
    v25 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
    v26 = v25;
    v28 = v27;
    v29 = *((_QWORD *)this + 7);
    if (v29)
      v30 = (_QWORD *)(v29 + 8 * *(unsigned int *)(v29 - 4));
    else
      v30 = 0;
    if (v30 != v25)
    {
      do
      {
        v31 = *v26;
        CFRetain(*(CFTypeRef *)(*v26 + 8));
        v32 = *(_QWORD *)(v31 + 32);
        v50 = 160;
        v51 = v32;
        WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v13 + 8, (unsigned __int8 *)&v50, v31 + 16, (unsigned int **)v52);
        CFRelease(*(CFTypeRef *)(v31 + 8));
        while (++v26 != v28)
        {
          if ((unint64_t)(*v26 + 1) > 1)
            goto LABEL_43;
        }
        v26 = v28;
LABEL_43:
        ;
      }
      while (v26 != v30);
    }
  }
  v33 = *((_QWORD *)a2 + 33);
  CFRetain(*(CFTypeRef *)(v33 + 8));
  if (!*((_QWORD *)this + 24))
  {
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v34[1] = 0;
    *v34 = off_1E34F9608;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    v35 = (unsigned int *)*((_QWORD *)this + 3);
    if (v35)
    {
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
    }
    v34[2] = v35;
    v37 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v34;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>((uint64_t)this + 104, (unsigned int *)v33, (uint64_t)v52);
  v38 = WebKit::WebsiteDataStore::cookieStore((WebKit::WebsiteDataStore *)v33);
  API::HTTPCookieStore::registerObserver((uint64_t)v38, *((_QWORD **)this + 24));
  v39 = *((_QWORD *)a2 + 29);
  CFRetain(*(CFTypeRef *)(v39 + 8));
  v40 = *(_QWORD *)(v33 + 24);
  if ((v40 & 0x8000000000000000) == 0 || v40 == -1)
  {
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 136, (unsigned int *)v39, (uint64_t)v52);
    v41 = 1;
  }
  else
  {
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 152, (unsigned int *)v39, (uint64_t)v52);
    v41 = 0;
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 120, (unsigned int *)v39, (uint64_t)v52);
  if (v53)
  {
    v42 = (_QWORD *)((char *)this + 56);
    v43 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
    v44 = v43;
    v46 = v45;
    v47 = *v42 ? *v42 + 8 * *(unsigned int *)(*v42 - 4) : 0;
    if ((_QWORD *)v47 != v43)
    {
      do
      {
        v48 = *v44;
        CFRetain(*(CFTypeRef *)(*v44 + 8));
        if (*(_BYTE *)(v48 + 249))
          v49 = 1;
        else
          v49 = v41;
        if ((v49 & 1) != 0)
          WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)v48, (WebKit::WebUserContentControllerProxy *)v39);
        CFRelease(*(CFTypeRef *)(v48 + 8));
        while (++v44 != v46)
        {
          if ((unint64_t)(*v44 + 1) > 1)
            goto LABEL_66;
        }
        v44 = v46;
LABEL_66:
        ;
      }
      while (v44 != (_QWORD *)v47);
    }
  }
  CFRelease(*(CFTypeRef *)(v39 + 8));
  CFRelease(*(CFTypeRef *)(v33 + 8));
  CFRelease(*((CFTypeRef *)v13 + 1));
}

void sub_19777C590(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int **v5;
  void *v7;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v5, a2);
  WTF::fastFree(v4, v7);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::removePage(WebKit::WebExtensionController *this, WebKit::WebPageProxy *a2)
{
  CFTypeRef *v4;
  CFTypeRef *v5;
  CFTypeRef *v6;
  _QWORD *v7;
  CFTypeRef **v8;
  CFTypeRef **v9;
  CFTypeRef **v10;
  CFTypeRef **v11;
  uint64_t v12;
  CFTypeRef *v13;

  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 72, a2);
  v4 = (CFTypeRef *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)a2 + 6) + 24));
  CFRetain(v4[1]);
  WebKit::WebExtensionController::removeProcessPool(this, (WebKit::WebProcessPool *)v4);
  v5 = (CFTypeRef *)*((_QWORD *)a2 + 33);
  CFRetain(v5[1]);
  WebKit::WebExtensionController::removeWebsiteDataStore(this, (WebKit::WebsiteDataStore *)v5);
  v6 = (CFTypeRef *)*((_QWORD *)a2 + 29);
  CFRetain(v6[1]);
  WebKit::WebExtensionController::removeUserContentController(this, (WebKit::WebUserContentControllerProxy *)v6);
  v7 = (_QWORD *)((char *)this + 56);
  v8 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
  v9 = v8;
  v11 = v10;
  if (*v7)
    v12 = *v7 + 8 * *(unsigned int *)(*v7 - 4);
  else
    v12 = 0;
  if ((CFTypeRef **)v12 != v8)
  {
    do
    {
      v13 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::disconnectPortsForPage((WebKit::WebExtensionContext *)v13, a2);
      CFRelease(v13[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1)
          goto LABEL_10;
      }
      v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != (CFTypeRef **)v12);
  }
  CFRelease(v6[1]);
  CFRelease(v5[1]);
  CFRelease(v4[1]);
}

void sub_19777C724(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::removeProcessPool(WebKit::WebExtensionController *this, WebKit::WebProcessPool *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebProcessPool *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 9, &v23);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v18 = v4;
  v19 = v7;
  v20 = v7;
  v21 = v7;
  v22 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
  while (v24 != v19)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v24 + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v10 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v9 + 48) + 24));
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 - 8));
    if (v10 == a2)
      return;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)a2 + 56, 0xA2u, *((_QWORD *)this + 4));
  v11 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
  v12 = v11;
  v14 = v13;
  v15 = *((_QWORD *)this + 7);
  if (v15)
    v16 = (uint64_t *)(v15 + 8 * *(unsigned int *)(v15 - 4));
  else
    v16 = 0;
  if (v16 != v11)
  {
    do
    {
      v17 = *v12++;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)a2 + 56, 0xA0u, *(_QWORD *)(v17 + 32));
      CFRelease(*(CFTypeRef *)(v17 + 8));
      while (v12 != v14)
      {
        if ((unint64_t)(*v12 + 1) > 1)
          goto LABEL_22;
        ++v12;
      }
      v12 = v14;
LABEL_22:
      ;
    }
    while (v12 != v16);
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 88, a2);
}

void WebKit::WebExtensionController::removeWebsiteDataStore(WebKit::WebExtensionController *this, WebKit::WebsiteDataStore *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  API::HTTPCookieStore *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 9, &v19);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v14 = v4;
  v15 = v7;
  v16 = v7;
  v17 = v7;
  v18 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  while (v20 != v15)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 264) + 24);
    v11 = *((_QWORD *)a2 + 3);
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 - 8));
    if (v10 == v11)
      return;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
  }
  WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>((uint64_t)this + 104, a2);
  v12 = WebKit::WebsiteDataStore::cookieStore(a2);
  API::HTTPCookieStore::unregisterObserver((uint64_t)v12, *((_QWORD **)this + 24));
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 13))
  {
    v13 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void WebKit::WebExtensionController::removeUserContentController(WebKit::WebExtensionController *this, WebKit::WebUserContentControllerProxy *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebUserContentControllerProxy *v10;
  CFTypeRef **v11;
  CFTypeRef **v12;
  CFTypeRef **v13;
  CFTypeRef **v14;
  uint64_t v15;
  CFTypeRef **v16;
  CFTypeRef *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 9, &v23);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v18 = v4;
  v19 = v7;
  v20 = v7;
  v21 = v7;
  v22 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
  while (v24 != v19)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v24 + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v10 = *(WebKit::WebUserContentControllerProxy **)(v9 + 232);
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 - 8));
    if (v10 == a2)
      return;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
  }
  v11 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
  v12 = v11;
  v14 = v13;
  v15 = *((_QWORD *)this + 7);
  if (v15)
    v16 = (CFTypeRef **)(v15 + 8 * *(unsigned int *)(v15 - 4));
  else
    v16 = 0;
  if (v16 != v11)
  {
    do
    {
      v17 = *v12;
      CFRetain((*v12)[1]);
      WebKit::WebExtensionContext::removeInjectedContent((WebKit::WebExtensionContext *)v17, a2);
      CFRelease(v17[1]);
      while (++v12 != v14)
      {
        if ((unint64_t)*v12 + 1 > 1)
          goto LABEL_22;
      }
      v12 = v14;
LABEL_22:
      ;
    }
    while (v12 != v16);
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 136, a2);
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 152, a2);
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 120, a2);
}

void sub_19777CB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

CFTypeRef *WebKit::WebExtensionController::websiteDataStore(uint64_t a1, CFTypeRef a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a3
    || WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(*(WebKit::WebExtensionControllerConfiguration **)(a1 + 40))[3] == a2)
  {
    return WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(*(WebKit::WebExtensionControllerConfiguration **)(a1 + 40));
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 104), &v16);
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 8 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v11 = a1 + 104;
  v12 = v8;
  v13 = v8;
  v14 = v8;
  v15 = v6 + 8 * v7;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  while (v17 != v12)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v10 = *(CFTypeRef *)(v9 + 24);
    CFRelease(*(CFTypeRef *)(v9 + 8));
    if (v10 == a2)
      return (CFTypeRef *)v9;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
  }
  return 0;
}

void WebKit::WebExtensionController::extensionContext(WebKit::WebExtensionController *this@<X0>, const WebKit::WebExtension *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const void *v13;

  v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
  v7 = v6;
  v9 = v8;
  v10 = *((_QWORD *)this + 7);
  if (v10)
    v11 = (_QWORD *)(v10 + 8 * *(unsigned int *)(v10 - 4));
  else
    v11 = 0;
  if (v11 == v6)
  {
LABEL_12:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      v12 = *v7;
      CFRetain(*(CFTypeRef *)(*v7 + 8));
      v13 = *(const void **)(v12 + 8);
      if (*(const WebKit::WebExtension **)(v12 + 56) == a2)
        break;
      CFRelease(v13);
      while (++v7 != v9)
      {
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_11;
      }
      v7 = v9;
LABEL_11:
      if (v7 == v11)
        goto LABEL_12;
    }
    CFRetain(v13);
    *a3 = v12;
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

void sub_19777CD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionController::extensionContext@<X0>(WebKit::WebExtensionController *this@<X0>, const WTF::URL *a2@<X1>, WTF **a3@<X8>)
{
  uint64_t *v4;
  const WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v4 = (uint64_t *)((char *)this + 64);
  WTF::URL::protocolHostAndPort(a2);
  v6 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, &v10, v5);
  v8 = v6;
  if (v6)
    CFRetain(*((CFTypeRef *)v6 + 1));
  *a3 = v8;
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19777CDE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::extensions(WebKit::WebExtensionController *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD **v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[24];

  *a2 = 0;
  v4 = (_QWORD **)((char *)this + 56);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    v5 = *(_DWORD *)(v3 - 12);
  else
    v5 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, v5);
  v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v4);
  v7 = v6;
  v9 = v8;
  if (*v4)
    v10 = (uint64_t)&(*v4)[*((unsigned int *)*v4 - 1)];
  else
    v10 = 0;
  if ((_QWORD *)v10 != v6)
  {
    do
    {
      v11 = *v7;
      CFRetain(*(CFTypeRef *)(*v7 + 8));
      v12 = *(_QWORD *)(v11 + 56);
      CFRetain(*(CFTypeRef *)(v12 + 8));
      v14 = v12;
      WTF::HashTable<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>>::add(a2, &v14, (uint64_t)v15);
      v13 = v14;
      v14 = 0;
      if (v13)
        CFRelease(*(CFTypeRef *)(v13 + 8));
      CFRelease(*(CFTypeRef *)(v11 + 8));
      while (++v7 != v9)
      {
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_15;
      }
      v7 = v9;
LABEL_15:
      ;
    }
    while (v7 != (_QWORD *)v10);
  }
}

void sub_19777CF0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t **v9;

  if (*v9)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v9, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v12 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v13 = v12;
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    v17 = (uint64_t *)(v16 + 8 * *(unsigned int *)(v16 - 4));
  else
    v17 = 0;
  if (v17 != v12)
  {
    do
    {
      v18 = *v13;
      CFRetain(*(CFTypeRef *)(*v13 + 8));
      WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v18 + 8));
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_10;
      }
      v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_19777D034(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v12 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v13 = v12;
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    v17 = (uint64_t *)(v16 + 8 * *(unsigned int *)(v16 - 4));
  else
    v17 = 0;
  if (v17 != v12)
  {
    do
    {
      v18 = *v13;
      CFRetain(*(CFTypeRef *)(*v13 + 8));
      WebKit::WebExtensionContext::didCommitLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v18 + 8));
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_10;
      }
      v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_19777D124(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v12 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v13 = v12;
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    v17 = (uint64_t *)(v16 + 8 * *(unsigned int *)(v16 - 4));
  else
    v17 = 0;
  if (v17 != v12)
  {
    do
    {
      v18 = *v13;
      CFRetain(*(CFTypeRef *)(*v13 + 8));
      WebKit::WebExtensionContext::didFinishLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v18 + 8));
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_10;
      }
      v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_19777D214(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didFailLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v12 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v13 = v12;
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    v17 = (uint64_t *)(v16 + 8 * *(unsigned int *)(v16 - 4));
  else
    v17 = 0;
  if (v17 != v12)
  {
    do
    {
      v18 = *v13;
      CFRetain(*(CFTypeRef *)(*v13 + 8));
      WebKit::WebExtensionContext::didFailLoadForFrame(v18, a2, a3, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v18 + 8));
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_10;
      }
      v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != v17);
  }
}

void sub_19777D304(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::handleContentRuleListNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl **v7;
  _QWORD **v8;
  const WTF::StringImpl *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WebKit::WebExtensionTab *v17;
  void *v18;
  WebCore::TimerBase *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v25[16];
  WebKit::WebExtensionTab *v26;

  v4 = *(unsigned int *)(a4 + 52);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(const WTF::StringImpl ***)(a4 + 40);
    v7 = &v6[4 * v4];
    v8 = (_QWORD **)(a1 + 56);
    do
    {
      v9 = *v6;
      if (*v6)
        *(_DWORD *)v9 += 2;
      v10 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v8);
      v12 = v10;
      v13 = v11;
      if (*v8)
        v14 = (uint64_t)&(*v8)[*((unsigned int *)*v8 - 1)];
      else
        v14 = 0;
      if ((uint64_t *)v14 != v10)
      {
        while (1)
        {
          v15 = *v12;
          CFRetain(*(CFTypeRef *)(*v12 + 8));
          if ((WTF::equal(*(WTF **)(v15 + 112), v9, v16) & 1) != 0)
            break;
          CFRelease(*(CFTypeRef *)(v15 + 8));
          while (++v12 != (uint64_t *)v13)
          {
            if ((unint64_t)(*v12 + 1) > 1)
              goto LABEL_15;
          }
          v12 = (uint64_t *)v13;
LABEL_15:
          if (v12 == (uint64_t *)v14)
            goto LABEL_21;
        }
        WebKit::WebExtensionContext::getCurrentTab(v15, a2, 0, 0, &v26);
        v17 = v26;
        if (v26)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v25, (uint64_t)(v6 + 2));
          v5 |= WebKit::WebExtensionContext::handleContentRuleListNotificationForTab((uint64_t *)v15, v17, a3);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v18);
          if (v26)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v26);
        }
        CFRelease(*(CFTypeRef *)(v15 + 8));
      }
LABEL_21:
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v11);
        else
          *(_DWORD *)v9 -= 2;
      }
      v6 += 4;
    }
    while (v6 != v7);
    if ((v5 & 1) != 0 && !*(_QWORD *)(a1 + 184))
    {
      v19 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
      WebCore::TimerBase::TimerBase(v19);
      *(_QWORD *)v19 = off_1E34B3740;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v20 = off_1E34F9630;
      v20[1] = WebKit::WebExtensionController::purgeOldMatchedRules;
      v20[2] = 0;
      v20[3] = a1;
      *((_QWORD *)v19 + 6) = v20;
      v21 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v19;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      WebCore::TimerBase::start();
    }
  }
}

void sub_19777D534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WebCore::TimerBase *v16;
  void *v18;

  WebCore::TimerBase::~TimerBase(v16);
  WTF::fastFree(v16, v18);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::purgeOldMatchedRules(WebKit::WebExtensionController *this)
{
  double v2;
  CFTypeRef **v3;
  CFTypeRef **v4;
  CFTypeRef **v5;
  CFTypeRef **v6;
  uint64_t v7;
  CFTypeRef **v8;
  char v9;
  CFTypeRef *v10;
  BOOL v11;
  uint64_t v12;
  double v13;

  WTF::WallTime::now(this);
  v13 = v2 + -300.0;
  v3 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 7);
  v4 = v3;
  v6 = v5;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    v8 = (CFTypeRef **)(v7 + 8 * *(unsigned int *)(v7 - 4));
  else
    v8 = 0;
  if (v8 == v3)
    goto LABEL_13;
  v9 = 0;
  do
  {
    v10 = *v4;
    CFRetain((*v4)[1]);
    v11 = WebKit::WebExtensionContext::purgeMatchedRulesFromBefore((WebKit::WebExtensionContext *)v10, (const WTF::WallTime *)&v13);
    CFRelease(v10[1]);
    while (++v4 != v6)
    {
      if ((unint64_t)*v4 + 1 > 1)
        goto LABEL_11;
    }
    v4 = v6;
LABEL_11:
    v9 |= v11;
  }
  while (v4 != v8);
  if ((v9 & 1) == 0)
  {
LABEL_13:
    v12 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_19777D6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::updateWebsitePoliciesForNavigation(WebKit::WebExtensionController *this, API::WebsitePolicies *a2, API::NavigationAction *a3)
{
  uint64_t *v4;
  _QWORD **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  CFTypeRef **v16;
  CFTypeRef **v17;
  CFTypeRef **v18;
  CFTypeRef *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl **v38;
  int i;
  unsigned int v40;
  WTF::StringImpl **v41;
  WTF *v42;
  void *v43;
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t result;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  CFTypeRef **v63;
  CFTypeRef **v64;
  CFTypeRef **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = (uint64_t *)((char *)a2 + 24);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v68, (_QWORD **)a2 + 3);
  v5 = (_QWORD **)((char *)this + 56);
  v6 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v5);
  v8 = v6;
  v9 = v7;
  v57 = v4;
  if (*v5)
    v10 = (uint64_t)&(*v5)[*((unsigned int *)*v5 - 1)];
  else
    v10 = 0;
  if ((uint64_t *)v10 == v6)
    goto LABEL_72;
  v58 = v10;
  do
  {
    v11 = *v8;
    CFRetain(*(CFTypeRef *)(*v8 + 8));
    MEMORY[0x19AEABCC8](&v62, CFSTR("declarativeNetRequestWithHostAccess"));
    v13 = WebKit::WebExtensionContext::permissionState(v11, &v62, 0, 2);
    v14 = v62;
    v62 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    if ((v13 & 0xFFFFFFFE) != 2)
      goto LABEL_62;
    v66 = 0;
    v67 = 0;
    WebKit::WebExtensionContext::currentPermissionMatchPatterns((WebKit::WebExtensionContext *)v11, &v62);
    v16 = v63;
    v17 = v65;
    if (v63 != v65)
    {
      v18 = v64;
      do
      {
        v19 = *v16;
        CFRetain((*v16)[1]);
        WebKit::WebExtensionMatchPattern::expandedStrings((WebKit::WebExtensionMatchPattern *)v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        WTF::makeVector<WTF::String>(v20, (uint64_t)&v60);
        v22 = v61;
        v23 = v61 + (unint64_t)HIDWORD(v67);
        if (v23 > v67)
        {
          v24 = v67 + ((unint64_t)v67 >> 2);
          if (v24 >= 0x10)
            v25 = v24 + 1;
          else
            v25 = 16;
          if (v25 <= v23)
            v26 = v61 + (unint64_t)HIDWORD(v67);
          else
            v26 = v25;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v66, v26);
          v22 = v61;
        }
        if ((_DWORD)v22)
        {
          v27 = v60;
          v28 = HIDWORD(v67);
          v29 = 8 * v22;
          do
          {
            v30 = v66;
            v31 = *v27;
            *v27++ = 0;
            *(_QWORD *)(v30 + 8 * v28++) = v31;
            v29 -= 8;
          }
          while (v29);
          HIDWORD(v67) = v28;
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v21);

        if (v19)
          CFRelease(v19[1]);
        while (1)
        {
          v16 += 2;
          if (v16 == v18)
            break;
          if ((unint64_t)*v16 + 1 > 1)
            goto LABEL_31;
        }
        v16 = v18;
LABEL_31:
        ;
      }
      while (v16 != v17);
    }
    v32 = v68;
    if (v68
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v68, 0), (v32 = v68) != 0))
    {
      v33 = *(_DWORD *)(v32 - 8);
    }
    else
    {
      v33 = 0;
    }
    v34 = (const WTF::StringImpl **)(v11 + 112);
    v35 = *(WTF::StringImpl **)(v11 + 112);
    v36 = *((_DWORD *)v35 + 4);
    v59 = v11;
    if (v36 >= 0x100)
      v37 = v36 >> 8;
    else
      v37 = WTF::StringImpl::hashSlowCase(v35);
    v38 = 0;
    for (i = 1; ; ++i)
    {
      v40 = v37 & v33;
      v41 = (WTF::StringImpl **)(v32 + 24 * (v37 & v33));
      v42 = *v41;
      if (*v41 == (WTF::StringImpl *)-1)
      {
        v38 = (WTF::StringImpl **)(v32 + 24 * v40);
        goto LABEL_44;
      }
      if (!v42)
        break;
      if (WTF::equal(v42, *v34, v15))
      {
        v46 = v32 + 24 * v40;
        v47 = v46 + 8;
        v48 = *(unsigned int *)(v46 + 20);
        if ((_DWORD)v48)
          WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)v47, (WTF::StringImpl *)(*(_QWORD *)v47 + 8 * v48));
        v49 = *(WTF **)v47;
        v10 = v58;
        v11 = v59;
        if (*(_QWORD *)v47)
        {
          *(_QWORD *)v47 = 0;
          *(_DWORD *)(v47 + 8) = 0;
          WTF::fastFree(v49, v43);
        }
        v50 = v66;
        v66 = 0;
        *(_QWORD *)v47 = v50;
        LODWORD(v50) = v67;
        LODWORD(v67) = 0;
        *(_DWORD *)(v47 + 8) = v50;
        LODWORD(v50) = HIDWORD(v67);
        HIDWORD(v67) = 0;
        *(_DWORD *)(v47 + 12) = v50;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v43);
        goto LABEL_62;
      }
LABEL_44:
      v37 = i + v40;
    }
    v11 = v59;
    if (v38)
    {
      v38[1] = 0;
      v38[2] = 0;
      *v38 = 0;
      --*(_DWORD *)(v68 - 16);
      v41 = v38;
    }
    WTF::String::operator=(v41, (WTF::StringImpl *)v34);
    v10 = v58;
    WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v41 + 1), &v66);
    if (v68)
      v45 = *(_DWORD *)(v68 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v68 - 12) = v45;
    if (v68)
      v51 = *(_DWORD *)(v68 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v68 - 16) + v51);
    v53 = *(unsigned int *)(v68 - 4);
    if (v53 > 0x400)
    {
      if (v53 <= 2 * v52)
LABEL_60:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v68, (uint64_t)v41);
    }
    else if (3 * v53 <= 4 * v52)
    {
      goto LABEL_60;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v44);
    if (!v59)
      goto LABEL_63;
LABEL_62:
    CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_63:
    while (++v8 != v9)
    {
      if ((unint64_t)(*v8 + 1) > 1)
        goto LABEL_67;
    }
    v8 = v9;
LABEL_67:
    ;
  }
  while (v8 != (uint64_t *)v10);
LABEL_72:
  v54 = v68;
  v68 = 0;
  result = *v57;
  *v57 = v54;
  if (result)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v7);
    result = v68;
    if (v68)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v68, v56);
  }
  return result;
}

void sub_19777DAE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v22;

  v22 = *(_QWORD *)(v20 - 88);
  if (v22)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionController::resourceLoadDidSendRequest(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  CFTypeRef **v8;
  CFTypeRef **v9;
  CFTypeRef **v10;
  CFTypeRef **v11;
  uint64_t v12;
  CFTypeRef **v13;
  CFTypeRef *v14;

  v8 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    v13 = (CFTypeRef **)(v12 + 8 * *(unsigned int *)(v12 - 4));
  else
    v13 = 0;
  if (v13 != v8)
  {
    do
    {
      v14 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::resourceLoadDidSendRequest(v14, a2, a3, a4);
      CFRelease(v14[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1)
          goto LABEL_10;
      }
      v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != v13);
  }
}

void sub_19777DC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidPerformHTTPRedirection(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef **v10;
  CFTypeRef **v11;
  CFTypeRef **v12;
  CFTypeRef **v13;
  uint64_t v14;
  CFTypeRef **v15;
  CFTypeRef *v16;

  v10 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v11 = v10;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
    v15 = (CFTypeRef **)(v14 + 8 * *(unsigned int *)(v14 - 4));
  else
    v15 = 0;
  if (v15 != v10)
  {
    do
    {
      v16 = *v11;
      CFRetain((*v11)[1]);
      WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(v16, a2, a3, a4, a5);
      CFRelease(v16[1]);
      while (++v11 != v13)
      {
        if ((unint64_t)*v11 + 1 > 1)
          goto LABEL_10;
      }
      v11 = v13;
LABEL_10:
      ;
    }
    while (v11 != v15);
  }
}

void sub_19777DD4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidReceiveChallenge(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, id *a4)
{
  CFTypeRef **v8;
  CFTypeRef **v9;
  CFTypeRef **v10;
  CFTypeRef **v11;
  uint64_t v12;
  CFTypeRef **v13;
  CFTypeRef *v14;

  v8 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    v13 = (CFTypeRef **)(v12 + 8 * *(unsigned int *)(v12 - 4));
  else
    v13 = 0;
  if (v13 != v8)
  {
    do
    {
      v14 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(v14, a2, a3, a4);
      CFRelease(v14[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1)
          goto LABEL_10;
      }
      v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != v13);
  }
}

void sub_19777DE24(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidReceiveResponse(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  CFTypeRef **v8;
  CFTypeRef **v9;
  CFTypeRef **v10;
  CFTypeRef **v11;
  uint64_t v12;
  CFTypeRef **v13;
  CFTypeRef *v14;

  v8 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    v13 = (CFTypeRef **)(v12 + 8 * *(unsigned int *)(v12 - 4));
  else
    v13 = 0;
  if (v13 != v8)
  {
    do
    {
      v14 = *v9;
      CFRetain((*v9)[1]);
      WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(v14, a2, a3, a4);
      CFRelease(v14[1]);
      while (++v9 != v11)
      {
        if ((unint64_t)*v9 + 1 > 1)
          goto LABEL_10;
      }
      v9 = v11;
LABEL_10:
      ;
    }
    while (v9 != v13);
  }
}

void sub_19777DEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::resourceLoadDidCompleteWithError(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef **v10;
  CFTypeRef **v11;
  CFTypeRef **v12;
  CFTypeRef **v13;
  uint64_t v14;
  CFTypeRef **v15;
  CFTypeRef *v16;

  v10 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(a1 + 56));
  v11 = v10;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
    v15 = (CFTypeRef **)(v14 + 8 * *(unsigned int *)(v14 - 4));
  else
    v15 = 0;
  if (v15 != v10)
  {
    do
    {
      v16 = *v11;
      CFRetain((*v11)[1]);
      WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(v16, a2, a3, a4, a5);
      CFRelease(v16[1]);
      while (++v11 != v13)
      {
        if ((unint64_t)*v11 + 1 > 1)
          goto LABEL_10;
      }
      v11 = v13;
LABEL_10:
      ;
    }
    while (v11 != v15);
  }
}

void sub_19777DFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF *WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  WTF *result;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v6);
  result = (WTF *)a1[4];
  a1[4] = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(result, a2);
  return result;
}

void WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  __CFString *v5;
  uint64_t v6;
  _Unwind_Exception *v7;
  id v8;
  __CFString *v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    if (v3 != 1)
    {
      v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (*a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v9 = v5;
    WebKit::WebExtensionDataRecord::addError(v4, v5, *(unsigned __int8 *)(a1 + 64));

  }
  else
  {
    v6 = *a2;
    v12 = *(_BYTE *)(a1 + 64);
    v11 = v6;
    WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebKit::WebExtensionDataType const&,unsigned long &>(&v10, (uint64_t *)(v4 + 32), &v12, &v11);
  }
}

_OWORD *WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebKit::WebExtensionDataType const&,unsigned long &>(_OWORD *result, uint64_t *a2, _BYTE *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebKit::WebExtensionDataType,WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>>,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionDataType>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (unsigned __int8 *)(v8 + 16 * v14);
  v16 = *v15;
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)v7 = v15;
        *((_QWORD *)v7 + 1) = v8 + 16 * v25;
        *((_BYTE *)v7 + 16) = 0;
        *((_QWORD *)v15 + 1) = *a4;
        return result;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (unsigned __int8 *)(v8 + 16 * v14);
      v16 = *v15;
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *v17 = -1;
      *((_QWORD *)v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v11) = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  *((_QWORD *)v15 + 1) = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_20:
      result = WTF::HashTable<WebKit::WebExtensionDataType,WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>>,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionDataType>>::expand(a2, v15);
      v15 = (unsigned __int8 *)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_20;
  }
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v21 + 16 * v24;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebKit::WebExtensionDataType,WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionDataType,unsigned long>>,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionDataType>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    v10 = v7;
    v11 = (_QWORD *)(v8 + 24);
    do
    {
      *((_BYTE *)v11 - 8) = -1;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (unsigned __int8 *)(v4 + 16 * v12);
      v15 = *v14;
      if (v15 <= 0xFD)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
        v22 = (_OWORD *)(v16 + 16 * v21);
        *v22 = *(_OWORD *)v14;
        if (v14 == a2)
          v13 = v22;
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

WTF *WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  WTF *result;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v6);
  result = (WTF *)a1[4];
  a1[4] = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(result, a2);
  return result;
}

void WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0>(WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  __CFString *v5;
  uint64_t v6;
  _Unwind_Exception *v7;
  id v8;
  __CFString *v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    if (v3 != 1)
    {
      v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (*a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v9 = v5;
    WebKit::WebExtensionDataRecord::addError(v4, v5, *(unsigned __int8 *)(a1 + 64));

  }
  else
  {
    v6 = *a2;
    v12 = *(_BYTE *)(a1 + 64);
    v11 = v6;
    WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebKit::WebExtensionDataType const&,unsigned long &>(&v10, (uint64_t *)(v4 + 32), &v12, &v11);
  }
}

unsigned int *WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *result;

  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (unsigned int *)a1[4];
  a1[4] = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable<WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebExtensionController::removeData(WTF::OptionSet<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataType>,WTF::Vector<WTF::Ref<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::fromCallable::WebExtensionDataRecord,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,std::experimental::fundamentals_v3::expected<void,WTF::String> &)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __CFString *v4;
  void *v5;
  __CFString *v6;
  void *v7;
  __CFString *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = v4;
    WebKit::WebExtensionDataRecord::addError(v3, v4, *(unsigned __int8 *)(a1 + 48));

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = CFSTR("uniqueIdentifier");
    if (*(_QWORD *)(a1 + 40))
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v10[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "postNotificationName:object:userInfo:", CFSTR("WebExtensionLocalStorageWasDeleted"), 0, v7);

  }
}

void sub_19777E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::calculateStorageSize(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    MEMORY[0x19AEABCC8](&v12, v7);
    v10 = v12;
    v11 = 1;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v11 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F95C8[v11])(&v12, &v10);
    v11 = -1;

  }
  else
  {
    v10 = a2;
    v11 = 0;
    v9 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v11 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34F95C8[v11])(&v12, &v10);
  }

}

void sub_19777E90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F95C8[v7])(va1, (uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionController::removeStorage(_WKWebExtensionStorageSQLiteStore *,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    MEMORY[0x19AEABCC8](&v14, v5);
    v12 = v14;
    v13 = 1;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v13)
    {
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }

  }
  else
  {
    LOBYTE(v12) = 0;
    v13 = 0;
    v9 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v13)
    {
      v11 = v12;
      v12 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }

}

void sub_19777EAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(8 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a2);
  v14 = v13;
  v16 = v15;
  if (*a2)
    v17 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v17 = 0;
  if ((uint64_t *)v17 != v13)
  {
    do
    {
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 8);
      else
        v19 = 0;
      v20 = *v14;
      v21 = ~(*v14 << 32) + *v14;
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v19 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
      v25 = 1;
      do
      {
        v26 = v24;
        v27 = *(_QWORD *)(v18 + 8 * v24);
        v24 = (v24 + v25++) & v19;
      }
      while (v27);
      v28 = v26;
      CFRetain(*(CFTypeRef *)(v20 + 8));
      v29 = *(_QWORD *)(v18 + 8 * v28);
      *(_QWORD *)(v18 + 8 * v28) = v20;
      if (v29)
        CFRelease(*(CFTypeRef *)(v29 + 8));
      while (++v14 != v16)
      {
        if ((unint64_t)(*v14 + 1) > 1)
          goto LABEL_29;
      }
      v14 = v16;
LABEL_29:
      ;
    }
    while (v14 != (uint64_t *)v17);
  }
  return a1;
}

void WebKit::WebExtensionController::HTTPCookieStoreObserver::~HTTPCookieStoreObserver(WebKit::WebExtensionController::HTTPCookieStoreObserver *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34F9608;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *(_QWORD *)this = off_1E34F9608;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v6);
}

void WebKit::WebExtensionController::HTTPCookieStoreObserver::cookiesDidChange(WebKit::WebExtensionController::HTTPCookieStoreObserver *this, API::HTTPCookieStore *a2)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef **v4;
  CFTypeRef **v5;
  CFTypeRef **v6;
  CFTypeRef **v7;
  uint64_t v8;
  CFTypeRef **v9;
  CFTypeRef *v10;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v4 = (CFTypeRef **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(v3 + 40));
      v5 = v4;
      v7 = v6;
      v8 = *(_QWORD *)(v3 + 40);
      if (v8)
        v9 = (CFTypeRef **)(v8 + 8 * *(unsigned int *)(v8 - 4));
      else
        v9 = 0;
      if (v9 != v4)
      {
        do
        {
          v10 = *v5;
          CFRetain((*v5)[1]);
          WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(v10);
          CFRelease(v10[1]);
          while (++v5 != v7)
          {
            if ((unint64_t)*v5 + 1 > 1)
              goto LABEL_12;
          }
          v5 = v7;
LABEL_12:
          ;
        }
        while (v5 != v9);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_19777EF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebExtensionController::*&)(void),WebKit::WebExtensionController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF *WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = *((_QWORD *)this + 1);
        do
        {
          v6 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(_QWORD *)(v5 + 8);
            *(_QWORD *)(v5 + 8) = 0;
            if (v7)
            {
              CFRelease(*(CFTypeRef *)(v7 + 8));
              v6 = *(WTF::StringImpl **)v5;
            }
            *(_QWORD *)v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 16;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;

  *a1 = &off_1E34F9658;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34F9658;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

CFTypeRef WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecords(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::call(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
  v4 = v3;
  v6 = v5;
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 == v3)
  {
    v20 = 0;
    v21 = 0;
LABEL_21:
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()((uint64_t *)(a1 + 16), &v20);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v18);
    return (CFTypeRef)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v19);
  }
  LODWORD(v7) = 0;
  do
  {
    v8 = (unint64_t)(v4 + 1);
    if ((_DWORD)v7 == (_DWORD)v23)
    {
      v9 = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, v7 + 1, v8);
      LODWORD(v7) = HIDWORD(v23);
      v10 = v22;
      v11 = *(_QWORD *)v9;
      result = CFRetain(*(CFTypeRef *)(*(_QWORD *)v9 + 8));
    }
    else
    {
      v10 = v22;
      v11 = *(_QWORD *)v8;
      result = CFRetain(*(CFTypeRef *)(*(_QWORD *)v8 + 8));
    }
    *(_QWORD *)(v10 + 8 * v7) = v11;
    v7 = ++HIDWORD(v23);
    while (1)
    {
      v4 += 2;
      if (v4 == v6)
        break;
      if ((unint64_t)(*v4 + 1) > 1)
        goto LABEL_13;
    }
    v4 = v6;
LABEL_13:
    ;
  }
  while (v4 != v2);
  v20 = 0;
  LODWORD(v21) = 0;
  HIDWORD(v21) = v7;
  if (!(_DWORD)v7)
    goto LABEL_21;
  if (!(v7 >> 29))
  {
    v13 = WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v21) = v7;
    v20 = v13;
    if (HIDWORD(v23))
    {
      v14 = 0;
      v15 = v22;
      v16 = 8 * HIDWORD(v23);
      do
      {
        v17 = *(_QWORD *)(v15 + v14);
        CFRetain(*(CFTypeRef *)(v17 + 8));
        *(_QWORD *)(v13 + v14) = v17;
        v14 += 8;
      }
      while (v16 != v14);
    }
    goto LABEL_21;
  }
  __break(0xC471u);
  return result;
}

void sub_19777F228(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100)
            v20 = v19 >> 8;
          else
            v20 = WTF::StringImpl::hashSlowCase(v14);
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            CFRelease(*(CFTypeRef *)(v24 + 8));
            v25 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v23 = 0;
          }
          v26 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v26;
          v27 = v6 + 16 * v11;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          v29 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            CFRelease(*(CFTypeRef *)(v29 + 8));
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            CFRelease(*(CFTypeRef *)(v16 + 8));
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &>::~CallableWrapper(id *a1)
{
  void *v2;

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WebKit::WebExtensionDataType>,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;

  *a1 = &off_1E34F96A8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WebKit::WebExtensionDataType>,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34F96A8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionDataRecordHolder>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionController::getDataRecord(WTF::OptionSet<WebKit::WebExtensionDataType>,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(v2 + 8);
  v3 = (uint64_t *)(v2 + 8);
  v4 = (uint64_t)v5;
  v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  v8 = v6;
  if (v5)
    v9 = (WTF::StringImpl **)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v9 = 0;
  if (v9 == v6)
  {
    v19 = 0;
    goto LABEL_26;
  }
  v10 = (uint64_t)v6[1];
  if (v10)
  {
    v6[1] = 0;
    v4 = *v3;
  }
  v19 = v10;
  if (v4)
  {
    v11 = (WTF::StringImpl **)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v11 == v6)
      goto LABEL_26;
  }
  else
  {
    if (!v6)
      goto LABEL_26;
    v11 = 0;
  }
  if (v11 != v6)
  {
    WTF::HashTraits<WTF::String>::customDeleteBucket(v6, v7);
    v12 = v8[1];
    v8[1] = 0;
    if (v12)
      CFRelease(*((CFTypeRef *)v12 + 1));
    ++*(_DWORD *)(*v3 - 16);
    v13 = *v3;
    if (*v3)
      v14 = *(_DWORD *)(v13 - 12) - 1;
    else
      v14 = -1;
    *(_DWORD *)(v13 - 12) = v14;
    v15 = *v3;
    if (*v3)
    {
      v16 = 6 * *(_DWORD *)(v15 - 12);
      v17 = *(_DWORD *)(v15 - 4);
      if (v16 < v17 && v17 >= 9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v3, v17 >> 1, 0);
    }
  }
LABEL_26:
  WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>)>::operator()((uint64_t *)(a1 + 16), &v19);
  if (v19)
    CFRelease(*(CFTypeRef *)(v19 + 8));
}

void sub_19777F704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionController::removeData(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F96D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::removeData(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F96D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionController::removeData(WTF::OptionSet<WebKit::WebExtensionDataType>,WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19777F7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(id *a1)
{
  void *v2;

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
            CFRelease(*(CFTypeRef *)(v23 + 8));
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            CFRelease(*(CFTypeRef *)(v21 + 8));
            v22 = *(WTF::StringImpl **)v20;
            *(_QWORD *)v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v8);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *(_QWORD *)v20 = v23;
          v24 = v4 + 16 * v9;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v25;
          v26 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            CFRelease(*(CFTypeRef *)(v26 + 8));
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_33;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(*(CFTypeRef *)(v13 + 8));
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *a2;
  *a2 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  *a2 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::rehash(a1, v9 >> 1);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebExtensionURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (WTF::StringImpl **)(v2 + 16 * v8);
      v10 = *v9;
      if (*v9 == (WTF::StringImpl *)-1)
        goto LABEL_41;
      if (v10)
        break;
      v11 = v2 + 16 * v8;
      v12 = *(_DWORD **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v12)
      {
        if (v12[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          v10 = *v9;
        }
        else
        {
          --v12[2];
        }
      }
      *v9 = 0;
      if (!v10)
        goto LABEL_41;
      if (*(_DWORD *)v10 == 2)
      {
LABEL_40:
        WTF::StringImpl::destroy(v10, v7);
        goto LABEL_41;
      }
      *(_DWORD *)v10 -= 2;
LABEL_41:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
    v13 = *a1;
    if (*a1)
      v14 = *(_DWORD *)(v13 - 8);
    else
      v14 = 0;
    v15 = *((_DWORD *)v10 + 4);
    if (v15 >= 0x100)
      v16 = v15 >> 8;
    else
      v16 = WTF::StringImpl::hashSlowCase(v10);
    v17 = 0;
    do
    {
      v18 = v16 & v14;
      v16 = ++v17 + v18;
    }
    while (*(_QWORD *)(v13 + 16 * v18));
    v19 = v13 + 16 * v18;
    v20 = *(_DWORD **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v20)
    {
      if (v20[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        v25 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v7);
          else
            *(_DWORD *)v25 -= 2;
        }
        goto LABEL_25;
      }
      --v20[2];
    }
    *(_QWORD *)v19 = 0;
LABEL_25:
    v21 = *v9;
    *v9 = 0;
    *(_QWORD *)v19 = v21;
    v22 = v2 + 16 * v8;
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v19 + 8) = v23;
    v24 = *(_DWORD **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v10 = *v9;
    *v9 = 0;
    if (!v10)
      goto LABEL_41;
    if (*(_DWORD *)v10 == 2)
      goto LABEL_40;
    *(_DWORD *)v10 -= 2;
    goto LABEL_41;
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v9 >> 1);
  }
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtension,WTF::RawPtrTraits<WebKit::WebExtension>,WTF::DefaultRefDerefTraits<WebKit::WebExtension>>>>::add(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    v19 = *v17;
    *v17 = v10;
    if (v19)
      CFRelease(*(CFTypeRef *)(v19 + 8));
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        v17 = WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a1, v17);
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    v24 = v25 + 8 * v28;
    v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v23 = 0;
  v24 = v6 + 8 * v22;
LABEL_32:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v23;
}

WTF::StringImpl *WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath(WTF::UUID *a1)
{
  void *v2;
  void *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  unsigned int v9;
  void *v10;
  WTF *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  const char *v30;
  int v31;
  char v32;
  const char *v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "path");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](&v28, v4);

  if (!v28 || !*((_DWORD *)v28 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x197780300);
  }
  if (*((_BYTE *)a1 + 16))
  {
    WTF::UUID::toString(a1);
    WTF::String::convertToASCIIUppercase((WTF::String *)&v29);
    v6 = (WTF::StringImpl *)v29;
    *(_QWORD *)&v29 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v6 = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = (WTF::StringImpl *)v29;
  }
  if (WebKit::processHasContainer(v6))
  {
    *(_QWORD *)&v29 = "WebKit";
    DWORD2(v29) = 6;
    LOBYTE(v7) = 1;
    BYTE12(v29) = 1;
    v30 = "WebExtensions";
    v31 = 13;
    v32 = 1;
    v33 = 0;
    v8 = (int)v27;
    if (v27)
    {
      v9 = *((unsigned __int8 *)v27 + 16);
      v8 = *((_DWORD *)v27 + 1);
      v33 = (const char *)*((_QWORD *)v27 + 1);
      v7 = (v9 >> 2) & 1;
    }
    v34 = v8;
    v35 = v7;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, &v29, 3uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    v11 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v11, v10);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "bundleIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (!v13)
    {
      objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "processName");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    MEMORY[0x19AEABCC8](&v24, v14);
    if (!v13)
    {

    }
    LOBYTE(v15) = 1;
    *(_QWORD *)&v29 = "WebKit";
    DWORD2(v29) = 6;
    BYTE12(v29) = 1;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    v16 = (int)v24;
    if (v24)
    {
      v17 = *((unsigned __int8 *)v24 + 16);
      v16 = *((_DWORD *)v24 + 1);
      v30 = (const char *)*((_QWORD *)v24 + 1);
      v15 = (v17 >> 2) & 1;
    }
    v31 = v16;
    v32 = v15;
    v33 = "WebExtensions";
    v34 = 13;
    LOBYTE(v15) = 1;
    v35 = 1;
    v36 = 0;
    v37 = 0;
    v38 = 1;
    v18 = (int)v27;
    if (v27)
    {
      v19 = *((unsigned __int8 *)v27 + 16);
      v18 = *((_DWORD *)v27 + 1);
      v36 = *((_QWORD *)v27 + 1);
      v15 = (v19 >> 2) & 1;
    }
    v37 = v18;
    v38 = v15;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, &v29, 4uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    v20 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v20, v10);
    }
    v21 = v24;
    v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v22 = v27;
  v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1977805D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10, int a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v18;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v18);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v18);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionControllerConfiguration::createTemporaryStorageDirectoryPath(NSString *a1@<X1>, uint64_t a2@<X8>)
{
  id v4;

  WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("WebExtensions"), a1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](a2);

}

void sub_197780760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionControllerConfiguration::copy(WebKit::WebExtensionControllerConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit::WebExtensionControllerConfiguration *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v4 = (WebKit::WebExtensionControllerConfiguration *)((char *)this + 16);
  if (v5 | v6)
  {
    WebKit::WebExtensionControllerConfiguration::create(v4, &v12);
  }
  else
  {
    if (*((_BYTE *)this + 32))
    {
      v7 = API::Object::newObject(0x40uLL, 115);
      WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(v7, v8, MEMORY[0x1E0CBF6F0]);
      goto LABEL_10;
    }
    v9 = *((_QWORD *)this + 5);
    if (!v9 || !*(_DWORD *)(v9 + 4))
    {
      v7 = API::Object::newObject(0x40uLL, 115);
      WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(v7, 0);
      goto LABEL_10;
    }
    WebKit::WebExtensionControllerConfiguration::createDefault(&v12);
  }
  v7 = v12;
LABEL_10:
  WTF::String::operator=((WTF::StringImpl **)(v7 + 40), (WebKit::WebExtensionControllerConfiguration *)((char *)this + 40));
  WTF::RetainPtr<NSMutableArray>::get((id *)this + 6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "copy");
  WTF::RetainPtr<WKWebViewConfiguration>::operator=((const void **)(v7 + 48), v11);

  WebKit::WebExtensionControllerConfiguration::setDefaultWebsiteDataStore((WebKit::WebExtensionControllerConfiguration *)v7, *((CFTypeRef **)this + 7));
  *a2 = v7;
}

void sub_19778086C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionControllerConfiguration::webViewConfiguration(WebKit::WebExtensionControllerConfiguration *this)
{
  void *v1;
  const void **v2;
  WKWebViewConfiguration *v3;

  v2 = (const void **)((char *)this + 48);
  v1 = (void *)*((_QWORD *)this + 6);
  if (!v1)
  {
    v3 = objc_alloc_init(WKWebViewConfiguration);
    WTF::RetainPtr<WKWebViewConfiguration>::operator=(v2, v3);

    v1 = (void *)*v2;
  }
  return v1;
}

void sub_1977808E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionController::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  CFRetain(this[1]);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x69F:
      v6 = this[7];
      if (v6 && *(v6 - 3))
        IPC::handleMessage<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double))WebKit::WebExtensionController::didCommitLoadForFrame, 0);
      break;
    case 0x6A0:
      v7 = this[7];
      if (v7 && *(v7 - 3))
        IPC::handleMessage<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double))WebKit::WebExtensionController::didFailLoadForFrame, 0);
      break;
    case 0x6A1:
      v8 = this[7];
      if (v8 && *(v8 - 3))
        IPC::handleMessage<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double))WebKit::WebExtensionController::didFinishLoadForFrame, 0);
      break;
    case 0x6A2:
      v9 = this[7];
      if (v9 && *(v9 - 3))
        IPC::handleMessage<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double))WebKit::WebExtensionController::didStartProvisionalLoadForFrame, 0);
      break;
    case 0x6A3:
      if (((_BYTE)this[22] & 2) != 0)
        IPC::handleMessage<Messages::WebExtensionController::TestEqual,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t)WebKit::WebExtensionController::testEqual, 0);
      break;
    case 0x6A4:
      if (((_BYTE)this[22] & 2) != 0)
        IPC::handleMessage<Messages::WebExtensionController::TestResult,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD))WebKit::WebExtensionController::testFinished, 0);
      break;
    case 0x6A5:
      if (((_BYTE)this[22] & 2) != 0)
        IPC::handleMessage<Messages::WebExtensionController::TestMessage,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))WebKit::WebExtensionController::testMessage, 0);
      break;
    case 0x6A6:
      if (((_BYTE)this[22] & 2) != 0)
        IPC::handleMessage<Messages::WebExtensionController::TestResult,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD))WebKit::WebExtensionController::testResult, 0);
      break;
    case 0x6A7:
      if (((_BYTE)this[22] & 2) != 0)
        IPC::handleMessage<Messages::WebExtensionController::TestMessage,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))WebKit::WebExtensionController::testYielded, 0);
      break;
    default:
      break;
  }
  CFRelease(this[1]);
}

void IPC::handleMessage<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double), uint64_t a5)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _BYTE v10[24];
  WTF::StringImpl *v11;
  char v12;

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>>(a2, v10);
  if (v12)
  {
    IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime),std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>>(a3, a4, a5, (uint64_t)v10);
    if (v12)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

uint64_t IPC::handleMessage<Messages::WebExtensionController::TestResult,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int)>(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD), uint64_t a5)
{
  WTF::StringImpl *v8;
  unsigned __int8 v10[40];

  IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>(a2, (uint64_t)v10);
  if (v10[32])
    IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int),std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>(a3, a4, a5, v10);
  return std::__optional_destruct_base<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
}

uint64_t IPC::handleMessage<Messages::WebExtensionController::TestEqual,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl *v8;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  char v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;

  IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>>(a2, (uint64_t)v10);
  if (v16)
  {
    v18[1] = a5;
    v19 = a3;
    v18[0] = a4;
    v17[0] = &v19;
    v17[1] = v18;
    IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int),std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>>(WebKit::WebExtensionController *,void ()(BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int) WebKit::WebExtensionController::*,std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int> &&)::{lambda(WebKit::WebExtensionController &&)#1}::operator()<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>((uint64_t)v17, v10, &v11, &v12, &v13, &v14, &v15);
  }
  return std::__optional_destruct_base<std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
}

uint64_t IPC::handleMessage<Messages::WebExtensionController::TestMessage,WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int)>(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, _QWORD), uint64_t a5)
{
  WTF::StringImpl *v8;
  _BYTE v10[32];

  IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,unsigned int>>(a2, v10);
  if (v10[24])
    IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int),std::tuple<WTF::String,WTF::String,unsigned int>>(a3, a4, a5, (uint64_t)v10);
  return std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
}

void `non-virtual thunk to'WebKit::WebExtensionController::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebExtensionController::didReceiveMessage(this - 2, a2, a3);
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::WallTime),std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double);
  _QWORD *v5;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, double))(*v5 + a2);
  return v4(v5, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), a4 + 24, *(double *)(a4 + 64));
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7[2];

  v7[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[1] = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, v7, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL,WTF::WallTime>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];
  char v18;

  v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!v9 || (v10 = v8, IPC::Decoder::decode<WTF::URL>(a1, v17), !v18))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 72) = 0;
    return;
  }
  v11 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  if ((_BYTE)v12)
  {
    if (!*(_BYTE *)(a2 + 8) || !*((_BYTE *)a3 + 8) || !v18)
    {
      __break(1u);
      return;
    }
    v13 = v11;
    v14 = *a3;
    *(_QWORD *)a4 = *(_QWORD *)a2;
    *(_QWORD *)(a4 + 8) = v14;
    *(_QWORD *)(a4 + 16) = v10;
    WTF::URL::URL(a4 + 24, (uint64_t *)v17);
    *(_QWORD *)(a4 + 64) = v13;
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 72) = v15;
  if (v18)
  {
    v16 = v17[0];
    v17[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,unsigned int),std::tuple<BOOL,WTF::String,WTF::String,unsigned int>>(uint64_t a1, void (*a2)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD), uint64_t a3, unsigned __int8 *a4)
{
  void (*v4)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*v5
                                                                                                  + a2);
  v6 = *a4;
  v7 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  v11 = (WTF::StringImpl *)*((_QWORD *)a4 + 2);
  v12 = v7;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  v4(v5, v6, &v12, &v11, *((unsigned int *)a4 + 6));
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  unsigned __int8 v30;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_21;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v20 = v4;
    v21 = 0;
LABEL_21:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_22;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_22:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v4)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_23;
  }
  v9 = v8 != 0;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v27);
  if (!v28)
  {
LABEL_23:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v29);
  if (v30)
  {
    v12 = a1[1];
    v13 = *a1;
    v14 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v12 < v14 || v12 - v14 <= 3)
    {
      v24 = 0;
      v11 = 0;
      *a1 = 0;
      a1[1] = 0;
      v25 = a1[3];
      if (v25)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v13, v12);
          v11 = (WTF::StringImpl *)*a1;
          v24 = a1[1];
        }
        else
        {
          v24 = 0;
          v11 = 0;
        }
      }
LABEL_26:
      *a1 = 0;
      a1[1] = 0;
      result = (WTF::StringImpl *)a1[3];
      if (result && v24)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v11);
      *(_BYTE *)a2 = 0;
      v26 = v30;
      *(_BYTE *)(a2 + 32) = 0;
      if (!v26)
        goto LABEL_15;
      result = v29;
      v29 = 0;
      if (!result)
        goto LABEL_15;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_15;
      }
LABEL_32:
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      goto LABEL_15;
    }
    v16 = (int *)(v13 + v14);
    a1[2] = (uint64_t)(v16 + 1);
    if (!v13)
    {
      v24 = v12;
      v11 = 0;
      goto LABEL_26;
    }
    if (!v28)
    {
      __break(1u);
      goto LABEL_32;
    }
    v17 = *v16;
    *(_BYTE *)a2 = v9;
    v18 = v27;
    v27 = 0;
    v19 = v29;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v19;
    *(_DWORD *)(a2 + 24) = v17;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
LABEL_15:
  if (v28)
  {
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WTF::String,WTF::String,unsigned int>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned __int8 v29;
  WTF::StringImpl *v30;
  unsigned __int8 v31;
  WTF::StringImpl *v32;
  unsigned __int8 v33;
  WTF::StringImpl *v34;
  unsigned __int8 v35;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_34;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v20 = v4;
    v21 = 0;
LABEL_34:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_35;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v4)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_36;
  }
  v9 = v8 != 0;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v28);
  if (!v29)
  {
LABEL_36:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v30);
  if (v31)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v32);
    if (!v33)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
LABEL_23:
      if (v31)
      {
        result = v30;
        v30 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      goto LABEL_28;
    }
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v34);
    if (!v35)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
      goto LABEL_18;
    }
    v12 = a1[1];
    v11 = (WTF::StringImpl *)*a1;
    v13 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v12 >= v13 && v12 - v13 > 3)
    {
      v14 = (int *)((char *)v11 + v13);
      a1[2] = (uint64_t)(v14 + 1);
      if (!v11)
      {
        v24 = v12;
        v25 = 0;
LABEL_40:
        *a1 = 0;
        a1[1] = 0;
        result = (WTF::StringImpl *)a1[3];
        if (result && v24)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v25);
        *(_BYTE *)a2 = 0;
        v27 = v35;
        *(_BYTE *)(a2 + 48) = 0;
        if (v27)
        {
          result = v34;
          v34 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_18;
      }
      v12 = v29;
      if (v29)
      {
        v12 = v31;
        if (v31)
        {
          v12 = v33;
          if (v33)
          {
            v15 = *v14;
            *(_BYTE *)a2 = v9;
            v16 = v28;
            v28 = 0;
            v17 = v30;
            v30 = 0;
            *(_QWORD *)(a2 + 8) = v16;
            *(_QWORD *)(a2 + 16) = v17;
            v18 = v32;
            v32 = 0;
            v19 = v34;
            *(_QWORD *)(a2 + 24) = v18;
            *(_QWORD *)(a2 + 32) = v19;
            *(_DWORD *)(a2 + 40) = v15;
            *(_BYTE *)(a2 + 48) = 1;
LABEL_18:
            if (v33)
            {
              result = v32;
              v32 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
                else
                  *(_DWORD *)result -= 2;
              }
            }
            goto LABEL_23;
          }
        }
      }
      __break(1u);
    }
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_40;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
LABEL_28:
  if (v29)
  {
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int),std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>>(WebKit::WebExtensionController *,void ()(BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int) WebKit::WebExtensionController::*,std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int> &&)::{lambda(WebKit::WebExtensionController &&)#1}::operator()<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>(uint64_t a1, unsigned __int8 *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WTF::StringImpl **a6, unsigned int *a7)
{
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(void (**)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _QWORD))v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = (_QWORD *)(**(_QWORD **)a1 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*v10 + v8);
  v11 = *a2;
  v12 = *a3;
  *a3 = 0;
  v24 = v12;
  v13 = *a4;
  *a4 = 0;
  v14 = *a5;
  *a5 = 0;
  v22 = v14;
  v23 = v13;
  v15 = *a6;
  *a6 = 0;
  v21 = v15;
  v8(v10, v11, &v24, &v23, &v22, &v21, *a7);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WTF::String,WTF::String,WTF::String,WTF::String,unsigned int>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,unsigned int>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::WebExtensionController,WebKit::WebExtensionController,void ()(WTF::String,WTF::String,unsigned int),std::tuple<WTF::String,WTF::String,unsigned int>>(uint64_t a1, void (*a2)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, _QWORD), uint64_t a3, uint64_t a4)
{
  void (*v4)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, _QWORD);
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*v5 + a2);
  v6 = *(WTF::StringImpl **)a4;
  v10 = *(WTF::StringImpl **)(a4 + 8);
  v11 = v6;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v4(v5, &v11, &v10, *(unsigned int *)(a4 + 16));
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,unsigned int>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  unsigned __int8 v20;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v19);
  if (!v20)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  v9 = a1[1];
  v10 = *a1;
  v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v9 < v11 || v9 - v11 <= 3)
  {
    v8 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v10, v9);
        v7 = (WTF::StringImpl *)*a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v7 = 0;
      }
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      goto LABEL_18;
    goto LABEL_21;
  }
  v13 = (int *)(v10 + v11);
  a1[2] = (uint64_t)(v13 + 1);
  if (!v10)
  {
    v8 = v9;
    v7 = 0;
    goto LABEL_17;
  }
  if (!*((_BYTE *)a2 + 8))
  {
    __break(1u);
LABEL_21:
    if (v8)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v7);
LABEL_18:
    *(_BYTE *)a3 = 0;
    v18 = v20;
    *(_BYTE *)(a3 + 24) = 0;
    if (!v18)
      return result;
    goto LABEL_10;
  }
  v14 = *v13;
  v15 = *a2;
  *a2 = 0;
  v16 = v19;
  v19 = 0;
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 24) = 1;
LABEL_10:
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebExtensionControllerProxy::globalObjectIsAvailableForFrame(WebKit::WebExtensionControllerProxy *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  int v6;
  WTF *v7;
  BOOL v8;
  const OpaqueJSContext *v9;
  OpaqueJSValue *v10;
  OpaqueJSString *v11;
  const OpaqueJSValue *v12;
  _DWORD *v13;
  uint64_t v14;
  const OpaqueJSValue *v15;
  const OpaqueJSContext *v16;
  OpaqueJSValue *GlobalObject;
  OpaqueJSString *v18;
  const OpaqueJSValue *Property;
  uint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  const OpaqueJSValue *v24;
  OpaqueJSString *v25;
  OpaqueJSString *v26;
  OpaqueJSString *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  WebKit::WebExtensionControllerProxy::extensionContext(this, a3, a4, &v28);
  v6 = *((_DWORD *)a4 + 12);
  v7 = v28;
  if (v28)
    v8 = 0;
  else
    v8 = v6 == 0;
  if (v8)
  {
    v16 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a3, a4);
    GlobalObject = JSContextGetGlobalObject(v16);
    v18 = JSStringCreateWithUTF8CString("browser");
    Property = JSObjectGetProperty(v16, GlobalObject, v18, 0);
    if (v18)
      JSStringRelease(v18);
    if (!Property || !JSValueIsObject(v16, Property))
    {
      v20 = WTF::fastMalloc((WTF *)0x48);
      *(_BYTE *)(v20 + 8) = 3;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 40) = &unk_1E34F6748;
      v21 = (void *)(v20 + 40);
      *(_DWORD *)(v20 + 48) = 1;
      *(_QWORD *)v20 = off_1E34F6710;
      *(_QWORD *)(v20 + 56) = 0;
      *(_QWORD *)(v20 + 64) = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = v30;
      WTF::String::operator=((WTF::StringImpl **)(v20 + 32), (WTF::StringImpl *)&v29);
      v23 = v29;
      v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = WebKit::JSWebExtensionWrapper::wrap(v16, v21);
      if (*(_DWORD *)(v20 + 48) == 1)
        (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
      else
        --*(_DWORD *)(v20 + 48);
      v25 = JSStringCreateWithUTF8CString("browser");
      JSObjectSetProperty(v16, GlobalObject, v25, v24, 0, 0);
      if (v25)
        JSStringRelease(v25);
    }
  }
  else if (v28)
  {
    v9 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a3, a4);
    v10 = JSContextGetGlobalObject(v9);
    v11 = JSStringCreateWithUTF8CString("browser");
    v12 = JSObjectGetProperty(v9, v10, v11, 0);
    if (v11)
      JSStringRelease(v11);
    if (!v12 || !JSValueIsObject(v9, v12))
    {
      WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>((uint64_t)v7 + 152, (unsigned int *)a3, (uint64_t)&v30);
      if (v6)
      {
        ++*(_DWORD *)a4;
        v13 = (_DWORD *)*((_QWORD *)v7 + 18);
        *((_QWORD *)v7 + 18) = a4;
        if (v13)
          WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v13);
      }
      v14 = WTF::fastMalloc((WTF *)0xC8);
      WebKit::WebExtensionAPINamespace::WebExtensionAPINamespace(v14, v6 != 0, (uint64_t)v7);
      v15 = WebKit::JSWebExtensionWrapper::wrap(v9, (void *)(v14 + 40));
      if (*(_DWORD *)(v14 + 48) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
      else
        --*(_DWORD *)(v14 + 48);
      v26 = JSStringCreateWithUTF8CString("browser");
      JSObjectSetProperty(v9, v10, v26, v15, 0, 0);
      if (v26)
        JSStringRelease(v26);
      v27 = JSStringCreateWithUTF8CString("chrome");
      JSObjectSetProperty(v9, v10, v27, v15, 0, 0);
      if (v27)
        JSStringRelease(v27);
    }
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)v7 + 2);
  }
}

void sub_197781E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;

  WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v11 + 16));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionControllerProxy::serviceWorkerGlobalObjectIsAvailableForFrame(WebKit::WebExtensionControllerProxy *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t result;
  WTF *v7;
  const OpaqueJSContext *v8;
  OpaqueJSValue *GlobalObject;
  OpaqueJSString *v10;
  const OpaqueJSValue *Property;
  uint64_t v12;
  const OpaqueJSValue *v13;
  OpaqueJSString *v14;
  OpaqueJSString *v15;
  WTF *v16;
  _BYTE v17[24];

  if (*((_DWORD *)a4 + 12))
  {
    result = 94;
    __break(0xC471u);
  }
  else
  {
    result = WebKit::WebExtensionControllerProxy::extensionContext(this, a3, a4, &v16);
    v7 = v16;
    if (v16)
    {
      v8 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForServiceWorkerWorld(a3, a4);
      GlobalObject = JSContextGetGlobalObject(v8);
      v10 = JSStringCreateWithUTF8CString("browser");
      Property = JSObjectGetProperty(v8, GlobalObject, v10, 0);
      if (v10)
        JSStringRelease(v10);
      if (!Property || !JSValueIsObject(v8, Property))
      {
        WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>((uint64_t)v7 + 152, (unsigned int *)a3, (uint64_t)v17);
        v12 = WTF::fastMalloc((WTF *)0xC8);
        WebKit::WebExtensionAPINamespace::WebExtensionAPINamespace(v12, 0, (uint64_t)v7);
        v13 = WebKit::JSWebExtensionWrapper::wrap(v8, (void *)(v12 + 40));
        if (*(_DWORD *)(v12 + 48) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
        else
          --*(_DWORD *)(v12 + 48);
        v14 = JSStringCreateWithUTF8CString("browser");
        JSObjectSetProperty(v8, GlobalObject, v14, v13, 0, 0);
        if (v14)
          JSStringRelease(v14);
        v15 = JSStringCreateWithUTF8CString("chrome");
        JSObjectSetProperty(v8, GlobalObject, v15, v13, 0, 0);
        if (v15)
          JSStringRelease(v15);
      }
      return (uint64_t)WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)v7 + 2);
    }
  }
  return result;
}

void sub_197782120(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v1 + 16));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionControllerProxy::didStartProvisionalLoadForFrame(_QWORD *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WebKit *v8;
  const WebKit::WebFrame *v9;
  char *v10;
  const WebKit::WebFrame *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  WTF::WallTime *v17;
  uint64_t v18;
  WebKit *v19[5];
  uint64_t v20;

  v4 = this[5];
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v14 = this;
    v6 = *((_QWORD *)a3 + 3);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7)
    {
      v20 = -3;
    }
    else
    {
      WebKit::WebFrame::parentFrame((unsigned int *)a3, v19);
      v8 = v19[0];
      v20 = WebKit::toWebExtensionFrameIdentifier(v19[0], v9);
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    v10 = (char *)WebKit::WebProcess::singleton((WebKit::WebProcess *)this) + 16;
    v18 = *((_QWORD *)a2 + 265);
    v17 = (WTF::WallTime *)WebKit::toWebExtensionFrameIdentifier(a3, v11);
    WTF::WallTime::now(v17);
    v16 = v12;
    v19[0] = (WebKit *)&v18;
    v19[1] = (WebKit *)&v17;
    v19[2] = (WebKit *)&v20;
    v19[3] = a4;
    v19[4] = (WebKit *)&v16;
    return (_QWORD *)IPC::MessageSender::send<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v10, (uint64_t **)v19, v14[3]);
  }
  return this;
}

void sub_197782288(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::toWebExtensionFrameIdentifier(WebKit *this, const WebKit::WebFrame *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WebKit *v13;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_7;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  if (v7 == v4)
    return -2;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
LABEL_7:
    v8 = *(_QWORD *)(v3 + 8);
    if (!v8)
      goto LABEL_13;
    v9 = *(_QWORD *)(v8 + 24);
    if (!v9)
      goto LABEL_13;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_13;
    v11 = *(_QWORD **)(*(_QWORD *)(v10 + 48) + 16);
    if (((*(uint64_t (**)(_QWORD *, const WebKit::WebFrame *))(*v11 + 1368))(v11, a2) & 1) != 0)
      goto LABEL_13;
    v12 = *(_QWORD *)(v11[2] + 8);
    if (!v12)
      goto LABEL_13;
    CFRetain(*(CFTypeRef *)(v12 - 8));
    v13 = *(WebKit **)(v12 + 72);
    CFRelease(*(CFTypeRef *)(v12 - 8));
    if (v13 != this)
      goto LABEL_13;
    return -2;
  }
LABEL_13:
  if ((unint64_t)(*((_QWORD *)this + 10) - 1) >= 0xFFFFFFFFFFFFFFFELL)
    return -3;
  else
    return *((_QWORD *)this + 10);
}

uint64_t IPC::MessageSender::send<Messages::WebExtensionController::DidStartProvisionalLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1698;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v6, a2);
  v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v13, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

void sub_19778242C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebExtensionControllerProxy::didCommitLoadForFrame(_QWORD *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WebKit *v8;
  const WebKit::WebFrame *v9;
  char *v10;
  const WebKit::WebFrame *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  WTF::WallTime *v17;
  uint64_t v18;
  WebKit *v19[5];
  uint64_t v20;

  v4 = this[5];
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v14 = this;
    v6 = *((_QWORD *)a3 + 3);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7)
    {
      v20 = -3;
    }
    else
    {
      WebKit::WebFrame::parentFrame((unsigned int *)a3, v19);
      v8 = v19[0];
      v20 = WebKit::toWebExtensionFrameIdentifier(v19[0], v9);
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    v10 = (char *)WebKit::WebProcess::singleton((WebKit::WebProcess *)this) + 16;
    v18 = *((_QWORD *)a2 + 265);
    v17 = (WTF::WallTime *)WebKit::toWebExtensionFrameIdentifier(a3, v11);
    WTF::WallTime::now(v17);
    v16 = v12;
    v19[0] = (WebKit *)&v18;
    v19[1] = (WebKit *)&v17;
    v19[2] = (WebKit *)&v20;
    v19[3] = a4;
    v19[4] = (WebKit *)&v16;
    return (_QWORD *)IPC::MessageSender::send<Messages::WebExtensionController::DidCommitLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v10, (uint64_t **)v19, v14[3]);
  }
  return this;
}

void sub_197782534(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebExtensionController::DidCommitLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1695;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v6, a2);
  v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v13, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

void sub_1977825FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebExtensionControllerProxy::didFinishLoadForFrame(_QWORD *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WebKit *v8;
  const WebKit::WebFrame *v9;
  char *v10;
  const WebKit::WebFrame *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  WTF::WallTime *v17;
  uint64_t v18;
  WebKit *v19[5];
  uint64_t v20;

  v4 = this[5];
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v14 = this;
    v6 = *((_QWORD *)a3 + 3);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7)
    {
      v20 = -3;
    }
    else
    {
      WebKit::WebFrame::parentFrame((unsigned int *)a3, v19);
      v8 = v19[0];
      v20 = WebKit::toWebExtensionFrameIdentifier(v19[0], v9);
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    v10 = (char *)WebKit::WebProcess::singleton((WebKit::WebProcess *)this) + 16;
    v18 = *((_QWORD *)a2 + 265);
    v17 = (WTF::WallTime *)WebKit::toWebExtensionFrameIdentifier(a3, v11);
    WTF::WallTime::now(v17);
    v16 = v12;
    v19[0] = (WebKit *)&v18;
    v19[1] = (WebKit *)&v17;
    v19[2] = (WebKit *)&v20;
    v19[3] = a4;
    v19[4] = (WebKit *)&v16;
    return (_QWORD *)IPC::MessageSender::send<Messages::WebExtensionController::DidFinishLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v10, (uint64_t **)v19, v14[3]);
  }
  return this;
}

void sub_197782704(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebExtensionController::DidFinishLoadForFrame,WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1697;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v6, a2);
  v8 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v13, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

void sub_1977827CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionControllerProxy::didFailLoadForFrame(uint64_t this, WebKit::WebPage *a2, WebKit::WebFrame *a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WebKit::WebProcess *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WebKit::WebFrame *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46[5];
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD *)(this + 40);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v42 = this;
    v7 = *((_QWORD *)a3 + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8)
        {
          v47 = -3;
          goto LABEL_26;
        }
      }
    }
    this = (uint64_t)WebKit::WebFrame::parentFrame((unsigned int *)a3, v46);
    v9 = v46[0];
    v10 = v46[0][3];
    if (!v10)
      goto LABEL_19;
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
      this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
      if (v14 == v11)
        goto LABEL_23;
      v10 = v9[3];
      if (!v10)
        goto LABEL_19;
    }
    v15 = *(_QWORD *)(v10 + 8);
    if (!v15)
      goto LABEL_19;
    v16 = *(_QWORD *)(v15 + 24);
    if (!v16
      || (v17 = *(_QWORD *)(v16 + 8)) == 0
      || (v18 = *(_QWORD **)(*(_QWORD *)(v17 + 48) + 16),
          this = (*(uint64_t (**)(_QWORD *))(*v18 + 1368))(v18),
          (this & 1) != 0)
      || (v19 = *(_QWORD *)(v18[2] + 8)) == 0
      || (CFRetain(*(CFTypeRef *)(v19 - 8)), v20 = *(uint64_t **)(v19 + 72),
                                             CFRelease(*(CFTypeRef *)(v19 - 8)),
                                             v20 != v9))
    {
LABEL_19:
      v21 = v9[10];
      if ((unint64_t)(v21 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        v21 = -3;
      goto LABEL_24;
    }
LABEL_23:
    v21 = -2;
LABEL_24:
    v47 = v21;
    if (v46[0])
      CFRelease(*((CFTypeRef *)v46[0] + 1));
LABEL_26:
    {
      v22 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      this = (uint64_t)WebKit::WebProcess::WebProcess(v22);
      WebKit::WebProcess::singleton(void)::process = this;
    }
    v45 = *((_QWORD *)a2 + 265);
    v23 = *((_QWORD *)a3 + 3);
    if (!v23)
      goto LABEL_40;
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      v25 = (unsigned int *)(v24 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
      this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
      if (v27 == v24)
        goto LABEL_43;
      v23 = *((_QWORD *)a3 + 3);
      if (!v23)
        goto LABEL_40;
    }
    v28 = *(_QWORD *)(v23 + 8);
    if (!v28)
      goto LABEL_40;
    v29 = *(_QWORD *)(v28 + 24);
    if (!v29
      || (v30 = *(_QWORD *)(v29 + 8)) == 0
      || (v31 = *(_QWORD **)(*(_QWORD *)(v30 + 48) + 16),
          this = (*(uint64_t (**)(_QWORD *))(*v31 + 1368))(v31),
          (this & 1) != 0)
      || (v32 = *(_QWORD *)(v31[2] + 8)) == 0
      || (CFRetain(*(CFTypeRef *)(v32 - 8)),
          v33 = *(WebKit::WebFrame **)(v32 + 72),
          CFRelease(*(CFTypeRef *)(v32 - 8)),
          v33 != a3))
    {
LABEL_40:
      v34 = *((_QWORD *)a3 + 10);
      if ((unint64_t)(v34 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        v34 = -3;
      goto LABEL_44;
    }
LABEL_43:
    v34 = -2;
LABEL_44:
    v44 = v34;
    WTF::WallTime::now((WTF::WallTime *)this);
    v43 = v35;
    v46[0] = &v45;
    v46[1] = &v44;
    v46[2] = &v47;
    v46[3] = (uint64_t *)a4;
    v46[4] = &v43;
    v36 = *(_QWORD *)(v42 + 24);
    v37 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v37 = 1696;
    *(_QWORD *)(v37 + 8) = v36;
    *(_QWORD *)(v37 + 528) = v37 + 16;
    *(_QWORD *)(v37 + 536) = v37 + 16;
    *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v37 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
    v48 = v37;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v37, v46);
    (*(void (**)(_QWORD *, uint64_t *, _QWORD))(*((_QWORD *)v22 + 2) + 32))((_QWORD *)v22 + 2, &v48, 0);
    this = v48;
    v48 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v38);
      return WTF::fastFree(v39, v40);
    }
  }
  return this;
}

void sub_197782AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    CFRelease(*(CFTypeRef *)(a14 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPINamespace::WebExtensionAPINamespace(uint64_t a1, char a2, uint64_t a3)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  ++*(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (WTF::StringImpl **)(a1 + 32);
  *(_DWORD *)(a1 + 48) = 1;
  *(_QWORD *)a1 = off_1E34F51D0;
  *(_QWORD *)(a1 + 40) = &unk_1E34F5208;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WTF::String::operator=(v4, (WTF::StringImpl *)v8);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

void sub_197782C04(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 24);
  *((_QWORD *)v9 + 24) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 23);
  *((_QWORD *)v9 + 23) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)v9 + 22);
  *((_QWORD *)v9 + 22) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *((_QWORD *)v9 + 21);
  *((_QWORD *)v9 + 21) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  v16 = *((_QWORD *)v9 + 20);
  *((_QWORD *)v9 + 20) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
    else
      --*(_DWORD *)(v16 + 48);
  }
  v17 = *((_QWORD *)v9 + 19);
  *((_QWORD *)v9 + 19) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  v18 = *((_QWORD *)v9 + 18);
  *((_QWORD *)v9 + 18) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 40) + 8))(v18 + 40);
    else
      --*(_DWORD *)(v18 + 48);
  }
  v19 = *((_QWORD *)v9 + 17);
  *((_QWORD *)v9 + 17) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 40) + 8))(v19 + 40);
    else
      --*(_DWORD *)(v19 + 48);
  }
  v20 = *((_QWORD *)v9 + 16);
  *((_QWORD *)v9 + 16) = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 40) + 8))(v20 + 40);
    else
      --*(_DWORD *)(v20 + 48);
  }
  v21 = *((_QWORD *)v9 + 15);
  *((_QWORD *)v9 + 15) = 0;
  if (v21)
  {
    if (*(_DWORD *)(v21 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 40) + 8))(v21 + 40);
    else
      --*(_DWORD *)(v21 + 48);
  }
  v22 = *((_QWORD *)v9 + 14);
  *((_QWORD *)v9 + 14) = 0;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v22 + 40) + 8))(v22 + 40);
    else
      --*(_DWORD *)(v22 + 48);
  }
  v23 = *((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = 0;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 40) + 8))(v23 + 40);
    else
      --*(_DWORD *)(v23 + 48);
  }
  v24 = *((_QWORD *)v9 + 12);
  *((_QWORD *)v9 + 12) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v24 + 40) + 8))(v24 + 40);
    else
      --*(_DWORD *)(v24 + 48);
  }
  v25 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v25 + 40) + 8))(v25 + 40);
    else
      --*(_DWORD *)(v25 + 48);
  }
  v26 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v26)
  {
    if (*(_DWORD *)(v26 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v26 + 40) + 8))(v26 + 40);
    else
      --*(_DWORD *)(v26 + 48);
  }
  v27 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v27 + 40) + 8))(v27 + 40);
    else
      --*(_DWORD *)(v27 + 48);
  }
  v28 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v28 + 40) + 8))(v28 + 40);
    else
      --*(_DWORD *)(v28 + 48);
  }
  v29 = *v10;
  *v10 = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v29 + 40) + 8))(v29 + 40);
    else
      --*(_DWORD *)(v29 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WTF::WallTime const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, a2[1]);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[3]);
  return IPC::ArgumentCoder<WTF::Seconds,void>::encode(a1, a2[4]);
}

unsigned int **WebKit::WebExtensionControllerProxy::didReceiveMessage(WebKit::WebExtensionControllerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int **v5;
  int v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[25];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v5 = (unsigned int **)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 == 1694)
  {
    v15 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v16)
    {
      WebKit::WebExtensionControllerProxy::unload(this, v15);
      return WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v5);
    }
  }
  else
  {
    if (v6 != 1693)
      return WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v5);
    IPC::Decoder::decode<WebKit::WebExtensionContextParameters>((uint64_t *)a3, (uint64_t)&v33);
    if (v45)
    {
      v22 = v35;
      v23 = v36;
      v8 = v37;
      v9 = v38;
      v37 = 0u;
      v38 = 0u;
      v21[0] = v33;
      v21[1] = v34;
      LODWORD(v35) = v35 & 0xFFFFFFFE;
      v10 = v41;
      v26 = v39;
      v34 = 0;
      v24 = v8;
      v25 = v9;
      *(_OWORD *)&v27[9] = *(_OWORD *)((char *)v40 + 9);
      *(_OWORD *)v27 = v40[0];
      v39 = 0;
      v41 = 0;
      v28 = v10;
      v11 = v42;
      v42 = 0;
      v29 = v11;
      v12 = v43;
      v43 = 0;
      v30 = v12;
      v13 = v44;
      v44 = 0;
      v31 = v13;
      v32 = 1;
      WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)&v33, v7);
      WebKit::WebExtensionControllerProxy::load(this, (const WebKit::WebExtensionContextParameters *)v21);
      if (v32)
        WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)v21, v14);
      return WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v5);
    }
  }
  v18 = *(_QWORD *)a3;
  v19 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v20 = *((_QWORD *)a3 + 3);
  if (v20 && v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
  return WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v5);
}

id WebKit::WebExtensionDataRecord::errors(id *this)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  WTF::RetainPtr<NSMutableArray>::get(this + 5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "copy");
  v3 = v2;
  if (!v2)
    v2 = (void *)MEMORY[0x1E0C9AA60];
  v4 = v2;

  return v4;
}

void sub_197783174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDataRecord::addError(uint64_t a1, void *a2, int a3)
{
  const void **v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v6 = *(_QWORD *)(a1 + 40);
  v5 = (const void **)(a1 + 40);
  if (!v6)
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    WTF::RetainPtr<NSMutableArray>::operator=(v5, v7);

  }
  switch(a3)
  {
    case 4:
      WTF::RetainPtr<NSMutableArray>::get((id *)v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::createDataRecordError(3, v10);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v9);
      goto LABEL_9;
    case 2:
      WTF::RetainPtr<NSMutableArray>::get((id *)v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::createDataRecordError(2, v10);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v9);
      goto LABEL_9;
    case 1:
      WTF::RetainPtr<NSMutableArray>::get((id *)v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::createDataRecordError(1, v10);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v9);
LABEL_9:

      break;
  }

}

void sub_1977832A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDynamicScripts::sourcePairForResource(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __CFString *v7;
  void *v8;
  WebKit::WebExtension *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;

  v6 = *a2;
  if (*a1)
    v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  WebKit::WebExtension::resourceDataForPath(v6, v7, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (WebKit::WebExtension *)*a2;
    if (*a1)
      v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    WebKit::WebExtension::resourceFileURLForPath(v9, &v10->isa);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABB18](&v23, v11);

    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v8, 4);
    MEMORY[0x19AEABCC8](&v19, v12);
    v13 = v23;
    if (v23)
      *(_DWORD *)v23 += 2;
    v20 = v13;
    v21 = v24;
    v22 = v25;
    std::pair<WTF::String,WTF::URL>::pair[abi:sn180100]((_QWORD *)a3, (uint64_t *)&v19);
    *(_BYTE *)(a3 + 48) = 1;
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }

    v18 = v23;
    v23 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }

}

void sub_1977834A0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  void *v16;
  void *v17;
  WTF::StringImpl *v19;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v19);
    else
      *(_DWORD *)a16 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  char v36;
  WTF::StringImpl *v37;

  v3 = result;
  if (!*(_BYTE *)(result + 48))
  {
    v31 = (WTF::StringImpl *)"";
    v32 = (WTF::StringImpl *)1;
    std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>(result + 96, (uint64_t)&v31, &v37);
    if (*(_BYTE *)(v3 + 120))
    {
      v22 = *(WTF::StringImpl **)(v3 + 112);
      if (v22)
        *(_DWORD *)v22 += 2;
    }
    else
    {
      v22 = v37;
      v37 = 0;
    }
    if (*(_BYTE *)(v3 + 88))
    {
      v23 = *(WTF::StringImpl **)(v3 + 80);
      if (v23)
      {
        *(_DWORD *)v23 += 2;
        v24 = v22;
        v22 = v23;
      }
      else
      {
        v24 = v22;
        v22 = 0;
      }
    }
    else
    {
      v24 = 0;
    }
    WTF::URL::URL((WTF::URL *)&v33);
    v25 = v33;
    v33 = 0;
    v29 = v34;
    v30 = v35;
    LODWORD(v34) = v34 & 0xFFFFFFFE;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v26 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v26;
    if (v22)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)v26 = v22;
    if (v25)
    {
      *(_DWORD *)v25 += 2;
      *(_QWORD *)(v26 + 8) = v25;
      *(_OWORD *)(v26 + 16) = v29;
      *(_OWORD *)(v26 + 32) = v30;
      *(_DWORD *)(a3 + 12) = 1;
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v27);
        if (!v22)
          goto LABEL_55;
      }
      else
      {
        *(_DWORD *)v25 -= 2;
        if (!v22)
          goto LABEL_55;
      }
    }
    else
    {
      *(_QWORD *)(v26 + 8) = 0;
      *(_OWORD *)(v26 + 16) = v29;
      *(_OWORD *)(v26 + 32) = v30;
      *(_DWORD *)(a3 + 12) = 1;
      if (!v22)
        goto LABEL_55;
    }
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v27);
    else
      *(_DWORD *)v22 -= 2;
LABEL_55:
    v28 = v33;
    v33 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v27);
        if (!v24)
          goto LABEL_64;
LABEL_61:
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v27);
        else
          *(_DWORD *)v24 -= 2;
LABEL_64:
        result = (uint64_t)v37;
        v37 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      *(_DWORD *)v28 -= 2;
    }
    if (!v24)
      goto LABEL_64;
    goto LABEL_61;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = *(unsigned int *)(result + 44);
  if (!(_DWORD)v5)
    return result;
  if (v5 >= 0x5555556)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  v7 = 48 * v5;
  result = WTF::fastMalloc((WTF *)(48 * v5));
  v9 = (WTF::StringImpl *)result;
  *(_DWORD *)(a3 + 8) = v7 / 0x30;
  *(_QWORD *)a3 = result;
  v10 = *(unsigned int *)(v3 + 44);
  if (!(_DWORD)v10)
  {
    v21 = (WTF::StringImpl *)result;
    if (v7 < 0x30)
      return result;
    goto LABEL_38;
  }
  v11 = 0;
  v12 = *(WTF::StringImpl ***)(v3 + 32);
  v13 = 8 * v10;
  do
  {
    v14 = *v12;
    if (*v12)
      *(_DWORD *)v14 += 2;
    v31 = v14;
    v15 = *a2;
    if (*a2)
      CFRetain(*(CFTypeRef *)(v15 + 8));
    v37 = (WTF::StringImpl *)v15;
    WebKit::WebExtensionDynamicScripts::sourcePairForResource(&v31, (uint64_t *)&v37, (uint64_t)&v33);
    if (v15)
      CFRelease(*(CFTypeRef *)(v15 + 8));
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v16);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v36)
    {
      std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](&v31, (uint64_t *)&v33);
      if (v11 == *(_DWORD *)(a3 + 8))
      {
        v17 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v11 + 1, (unint64_t)&v31);
        v18 = *(_DWORD *)(a3 + 12);
        v9 = *(WTF::StringImpl **)a3;
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100]((_QWORD *)(*(_QWORD *)a3 + 48 * v18), v17);
      }
      else
      {
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100]((_QWORD *)v9 + 6 * v11, (uint64_t *)&v31);
        v18 = *(_DWORD *)(a3 + 12);
      }
      v11 = v18 + 1;
      *(_DWORD *)(a3 + 12) = v18 + 1;
      v19 = v32;
      v32 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v31;
      v31 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v16);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    result = std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v16);
    ++v12;
    v13 -= 8;
  }
  while (v13);
  if (*(_DWORD *)(a3 + 8) > v11)
  {
    v9 = *(WTF::StringImpl **)a3;
    if (!v11)
      goto LABEL_68;
    if (v11 < 0x5555556)
    {
      result = WTF::fastMalloc((WTF *)(48 * v11));
      v21 = (WTF::StringImpl *)result;
      *(_DWORD *)(a3 + 8) = 48 * v11 / 0x30;
      *(_QWORD *)a3 = result;
      if ((WTF::StringImpl *)result != v9)
      {
        result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::String,WTF::URL>>::move(v9, (uint64_t *)v9 + 6 * v11, (_QWORD *)result);
LABEL_38:
        if (!v9)
          return result;
LABEL_69:
        if (v21 == v9)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        return WTF::fastFree(v9, v8);
      }
LABEL_68:
      v21 = v9;
      if (!v9)
        return result;
      goto LABEL_69;
    }
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x1977839A8);
  }
  return result;
}

void sub_1977839B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19)
{
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v24;

  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v24 = *(WTF::StringImpl **)(v22 - 88);
  *(_QWORD *)(v22 - 88) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  if (!*(_BYTE *)(result + 8))
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
    {
      *a3 = 0;
      return result;
    }
    if (v5 != 1)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
      goto LABEL_7;
    }
    v4 = (_DWORD *)MEMORY[0x1E0CBEF70];
    goto LABEL_3;
  }
  v4 = *(_DWORD **)result;
  if (*(_QWORD *)result)
LABEL_3:
    *v4 += 2;
LABEL_7:
  *a3 = v4;
  return result;
}

void WebKit::WebExtensionDynamicScripts::executeScript(uint64_t *a1, void *a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  id v13;
  WTF *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  void *v19;
  unsigned int v20;
  _QWORD *v21;
  void *v22;
  WTF::StringImpl *v23;
  void *v24;
  WTF::StringImpl *v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[5];
  uint64_t v29;
  _QWORD v30[26];

  v13 = a2;
  v14 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = 2;
  v15 = *a7;
  *a7 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E34F9780;
  v16[1] = v14;
  v16[2] = v15;
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v16;
  v18 = v13;
  v19 = v18;
  v27[0] = v18;
  if (v18)
    CFRetain(v18);

  ++*a4;
  v27[1] = a4;
  CFRetain(*(CFTypeRef *)(a6 + 8));
  v27[2] = a6;
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28, a1);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  v28[2] = a3;
  ++*(_DWORD *)v14;
  v28[3] = v14;
  do
    v20 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v20 + 1, (unsigned int *)v17));
  v28[4] = v17;
  WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)&v29, a5);
  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(v30, (uint64_t)v27);
  v21 = malloc_type_malloc(0xE8uLL, 0x10E204090C27DD1uLL);
  *v21 = MEMORY[0x1E0C809A0];
  v21[1] = 50331650;
  v21[2] = WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke;
  v21[3] = &WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::descriptor;
  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(v21 + 4, (uint64_t)v30);
  v22 = _Block_copy(v21);

  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((uint64_t)v30, v23);
  v24 = _Block_copy(v22);
  objc_msgSend(v19, "_frames:", v24);

  WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((uint64_t)v27, v25);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v17);
  WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v14, v26);

}

void sub_197783DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  WTF *v36;
  unsigned int *v37;
  void *v38;
  void *v39;
  void *v41;

  v39 = v38;

  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v37);
  WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v36, v41);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 176, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 160, v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 144, v4);
  if (*(_BYTE *)(a1 + 136))
  {
    v6 = *(WTF **)(a1 + 120);
    if (v6)
    {
      *(_QWORD *)(a1 + 120) = 0;
      *(_DWORD *)(a1 + 128) = 0;
      WTF::fastFree(v6, v5);
    }
  }
  if (*(_BYTE *)(a1 + 112))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v5);
  if (*(_BYTE *)(a1 + 88))
  {
    v7 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  v8 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v8);
  v9 = *(WTF **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v9)
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v9, v5);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v5);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v12);
  v13 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v13)
    CFRelease(v13);
  return a1;
}

void WebKit::WebExtensionDynamicScripts::injectStyleSheets(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  API::UserStyleSheet *v20;
  API::UserStyleSheet *v21;
  id v22;
  _QWORD v24[2];
  _QWORD v25[2];
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  API::UserStyleSheet *v30[3];

  v22 = a2;
  objc_msgSend(v22, "_page");
  v8 = *((_DWORD *)a1 + 3);
  if (v8)
  {
    v9 = *a1;
    v10 = *a1 + 48 * v8;
    do
    {
      v25[0] = 0;
      v25[1] = 0;
      v11 = v9 + 8;
      v24[0] = 0;
      v24[1] = 0;
      WebCore::UserStyleSheet::UserStyleSheet();
      API::UserStyleSheet::create((uint64_t)&v26, a3, (uint64_t *)v30);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v12);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v13);
      v15 = v27;
      v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v26;
      v26 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v14);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v17);
      WebKit::WebUserContentControllerProxy::addUserStyleSheet(*((WebKit::WebUserContentControllerProxy **)v30[1] + 29), v30[0]);
      v18 = *(unsigned int *)(a6 + 404);
      if ((_DWORD)v18 == *(_DWORD *)(a6 + 400))
      {
        WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>(a6 + 392, (unint64_t)v30);
      }
      else
      {
        v19 = *(_QWORD *)(a6 + 392);
        v20 = v30[0];
        CFRetain(*((CFTypeRef *)v30[0] + 1));
        *(_QWORD *)(v19 + 8 * v18) = v20;
        ++*(_DWORD *)(a6 + 404);
      }
      v21 = v30[0];
      v30[0] = 0;
      if (v21)
        CFRelease(*((CFTypeRef *)v21 + 1));
      v9 = v11 + 40;
    }
    while (v11 + 40 != v10);
  }

}

void sub_197784180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDynamicScripts::removeStyleSheets(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  void *v7;
  id v8;
  unsigned int v9;
  const WTF::StringImpl **v10;
  uint64_t v11;
  API::UserStyleSheet **v12;
  uint64_t v13;
  API::UserStyleSheet *v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  API::UserStyleSheet *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v8 = a2;
  v34 = 0;
  v35 = 0;
  v9 = *(_DWORD *)(a1 + 12);
  if (v9)
  {
    v10 = *(const WTF::StringImpl ***)a1;
    v32 = *(_QWORD *)a1 + 48 * v9;
    while (1)
    {
      v11 = *(unsigned int *)(a4 + 404);
      if ((_DWORD)v11)
        break;
LABEL_27:
      if (HIDWORD(v35))
      {
        v23 = v34;
        v24 = &v34[HIDWORD(v35)];
        v25 = *(_DWORD *)(a4 + 404);
        do
        {
          if (v25)
          {
            v26 = v25;
            v27 = *(_QWORD **)(a4 + 392);
            v28 = *v23;
            if (*v27 == *v23)
            {
              v29 = 0;
LABEL_36:
              v31 = &v27[v29];
              *v31 = 0;
              if (v28)
              {
                CFRelease(*(CFTypeRef *)(v28 + 8));
                v26 = *(unsigned int *)(a4 + 404);
              }
              memmove(v31, v31 + 1, *(_QWORD *)(a4 + 392) + 8 * v26 - (_QWORD)(v31 + 1));
              v25 = *(_DWORD *)(a4 + 404) - 1;
              *(_DWORD *)(a4 + 404) = v25;
            }
            else
            {
              v29 = 0;
              while (v25 - 1 != v29)
              {
                v30 = v27[++v29];
                if (v30 == v28)
                  goto LABEL_36;
              }
            }
          }
          ++v23;
        }
        while (v23 != v24);
      }
      WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, 0);
      v10 += 6;
      if (v10 == (const WTF::StringImpl **)v32)
        goto LABEL_41;
    }
    v12 = *(API::UserStyleSheet ***)(a4 + 392);
    v13 = 8 * v11;
    while (1)
    {
      v14 = *v12;
      CFRetain(*((CFTypeRef *)*v12 + 1));
      v16 = *v10;
      if (*v10)
        *(_DWORD *)v16 += 2;
      v17 = v10[1];
      if (v17)
        *(_DWORD *)v17 += 2;
      if (WTF::equal(*((WTF **)v14 + 3), v16, v15))
      {
        v19 = (*((_BYTE *)v14 + 104) == 0) ^ a3;
        if (!v17)
          goto LABEL_15;
      }
      else
      {
        v19 = 0;
        if (!v17)
          goto LABEL_15;
      }
      if (*(_DWORD *)v17 != 2)
      {
        *(_DWORD *)v17 -= 2;
LABEL_15:
        if (v16)
          goto LABEL_18;
        goto LABEL_21;
      }
      WTF::StringImpl::destroy(v17, v18);
      if (v16)
      {
LABEL_18:
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v18);
        else
          *(_DWORD *)v16 -= 2;
      }
LABEL_21:
      CFRelease(*((CFTypeRef *)v14 + 1));
      if (v19)
      {
        v20 = HIDWORD(v35);
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>((uint64_t)&v34, (unint64_t)v12);
        }
        else
        {
          v21 = v34;
          v22 = *v12;
          CFRetain(*((CFTypeRef *)*v12 + 1));
          v21[v20] = (uint64_t)v22;
          ++HIDWORD(v35);
        }
        objc_msgSend(v8, "_page", v32);
        WebKit::WebUserContentControllerProxy::removeUserStyleSheet(*(WebKit::WebUserContentControllerProxy **)(v33 + 232), *v12);
      }
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_27;
    }
  }
LABEL_41:
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v7);

}

void sub_197784488(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionDynamicScripts::toInjectionResultParameters(WebKit::WebExtensionDynamicScripts *this, objc_object *a2, WKFrameInfo *a3, NSString *a4)
{
  objc_object *v7;
  WKFrameInfo *v8;
  NSString *v9;
  WKFrameInfo *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSString *v15;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v15 = v9;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  if (v7)
  {
    WebKit::encodeJSONString(v7, 1, 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)this + 16, &v14);

  }
  if (v8)
  {
    v10 = v8;
    if (-[WKFrameInfo isMainFrame](v10, "isMainFrame"))
    {
      v11 = -2;
    }
    else
    {
      -[WKFrameInfo _handle](v10, "_handle");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "frameID");

      if ((unint64_t)(v13 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        v11 = -3;
      else
        v11 = v13;
    }

    if (!*((_BYTE *)this + 40))
      *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 4) = v11;
  }
  if (v9)
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)this, &v15);

  }
}

void sub_197784628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v13, v17);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v12, v18);

  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::updateParameters(uint64_t a1, uint64_t a2)
{
  unsigned int *result;

  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 16), (unsigned __int8 *)a2);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 40), (unsigned __int8 *)(a2 + 24));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 48));
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 56);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 80), (unsigned __int8 *)(a2 + 64));
  result = std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 104), (unsigned __int8 *)(a2 + 88));
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 112);
  return result;
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::merge(uint64_t result, uint64_t a2)
{
  _BYTE *v3;
  id v4;
  uint64_t v5;

  v3 = (_BYTE *)result;
  if (!*(_BYTE *)(a2 + 16) && *(_BYTE *)(result + 32))
    result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2, result + 16);
  if (!*(_BYTE *)(a2 + 40) && v3[56])
    result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2 + 24, (uint64_t)(v3 + 40));
  if (!*(_BYTE *)(a2 + 57))
  {
    if (!v3[73])
      goto LABEL_26;
    *(_WORD *)(a2 + 56) = v3[72] | 0x100;
  }
  if (!*(_BYTE *)(a2 + 80))
  {
    if (v3[96])
      result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2 + 64, (uint64_t)(v3 + 80));
  }
  if (!*(_BYTE *)(a2 + 104))
  {
    if (!v3[120])
      goto LABEL_26;
    result = std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(a2 + 88, (uint64_t)(v3 + 104));
  }
  if (!*(_BYTE *)(a2 + 113))
  {
    if (!v3[129])
      goto LABEL_26;
    *(_WORD *)(a2 + 112) = v3[128] | 0x100;
  }
  if (!*(_BYTE *)(a2 + 115))
  {
    if (!v3[131])
      goto LABEL_26;
    *(_WORD *)(a2 + 114) = v3[130] | 0x100;
  }
  if (*(_BYTE *)(a2 + 117))
    return result;
  if (!v3[133])
  {
LABEL_26:
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>((uint64_t)v4, v5);
  }
  *(_WORD *)(a2 + 116) = v3[132] | 0x100;
  return result;
}

uint64_t std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a1, a2);
  }
  else
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

CFTypeRef WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserScript(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, CFTypeRef *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  CFTypeRef **v28;
  CFTypeRef result;
  _QWORD v30[2];

  v5 = (uint64_t *)((char *)this + 208);
  v6 = *((_QWORD *)this + 26);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)this + 26, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = v6 + 24 * (v9 & v7);
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v10 = (_QWORD *)(v6 + 24 * v12);
      goto LABEL_13;
    }
    if (!v14)
      break;
    if ((WTF::equal(v14, *a2, (const WTF::StringImpl *)a3) & 1) != 0)
      goto LABEL_25;
LABEL_13:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    v13 = (uint64_t)v10;
  }
  WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)a2);
  v30[0] = 0;
  v30[1] = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13 + 8, v30);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v15);
  v16 = *v5;
  if (*v5)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v5;
  if (*v5)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
LABEL_24:
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5, (WTF::StringImpl **)v13);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_24;
  }
LABEL_25:
  v22 = (uint64_t *)(v13 + 8);
  v23 = *(unsigned int *)(v13 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(v13 + 16))
  {
    v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v23 + 1)
      v26 = v23 + 1;
    else
      v26 = v25;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v22, v26);
    v23 = *(unsigned int *)(v13 + 20);
    v27 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v27 = *v22;
  }
  v28 = (CFTypeRef **)(v27 + 8 * v23);
  result = CFRetain(a3[1]);
  *v28 = a3;
  ++*(_DWORD *)(v13 + 20);
  return result;
}

void sub_197784A10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserStyleSheet(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, CFTypeRef *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  CFTypeRef **v28;
  CFTypeRef result;
  _QWORD v30[2];

  v5 = (uint64_t *)((char *)this + 216);
  v6 = *((_QWORD *)this + 27);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)this + 27, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = v6 + 24 * (v9 & v7);
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v10 = (_QWORD *)(v6 + 24 * v12);
      goto LABEL_13;
    }
    if (!v14)
      break;
    if ((WTF::equal(v14, *a2, (const WTF::StringImpl *)a3) & 1) != 0)
      goto LABEL_25;
LABEL_13:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    v13 = (uint64_t)v10;
  }
  WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)a2);
  v30[0] = 0;
  v30[1] = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13 + 8, v30);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v15);
  v16 = *v5;
  if (*v5)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v5;
  if (*v5)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
LABEL_24:
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5, (WTF::StringImpl **)v13);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_24;
  }
LABEL_25:
  v22 = (uint64_t *)(v13 + 8);
  v23 = *(unsigned int *)(v13 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(v13 + 16))
  {
    v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v23 + 1)
      v26 = v23 + 1;
    else
      v26 = v25;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v22, v26);
    v23 = *(unsigned int *)(v13 + 20);
    v27 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v27 = *v22;
  }
  v28 = (CFTypeRef **)(v27 + 8 * v23);
  result = CFRetain(a3[1]);
  *v28 = a3;
  ++*(_DWORD *)(v13 + 20);
  return result;
}

void sub_197784C04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserScripts(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  API::UserScript **v26;
  API::UserScript **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  WebKit::WebUserContentControllerProxy *v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43[2];
  API::UserScript **v44;
  uint64_t v45;

  v4 = (uint64_t *)((char *)this + 208);
  v5 = *((_QWORD *)this + 26);
  if (!v5)
    goto LABEL_20;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = *((_DWORD *)*a2 + 4);
  v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    v12 = v5 + 24 * (v9 & v7);
    v13 = *(WTF **)v12;
    if (*(_QWORD *)v12 != -1)
    {
      if (!v13)
      {
        v14 = *v4;
        if (!*v4)
          goto LABEL_20;
        v12 = v14 + 24 * *(unsigned int *)(v14 - 4);
        goto LABEL_13;
      }
      if ((WTF::equal(v13, *a2, a3) & 1) != 0)
        break;
    }
  }
  v14 = *v4;
  if (!*v4)
    goto LABEL_14;
LABEL_13:
  v14 += 24 * *(unsigned int *)(v14 - 4);
LABEL_14:
  if (v14 == v12)
  {
LABEL_20:
    v41 = 0;
    v44 = 0;
    v42 = 0;
    v45 = 0;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  else
  {
    v44 = *(API::UserScript ***)(v12 + 8);
    v15 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    v45 = v15;
    v16 = *v4;
    if (!*v4 || (v16 += 24 * *(unsigned int *)(v16 - 4), v16 != v12))
    {
      if (v16 != v12)
      {
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)a2);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 8, v17);
        ++*(_DWORD *)(*v4 - 16);
        v18 = *v4;
        v19 = *v4 ? *(_DWORD *)(v18 - 12) - 1 : -1;
        *(_DWORD *)(v18 - 12) = v19;
        v33 = *v4;
        if (*v4)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v35 >> 1, 0);
        }
      }
    }
  }
  v20 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v20)
    v21 = v20 - 16;
  else
    v21 = 0;
  v22 = *(_QWORD *)(v21 + 64);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
      v24 = v23 - 16;
    else
      v24 = 0;
  }
  else
  {
    v24 = 0;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable((uint64_t *)v43, (_QWORD **)(v24 + 120));
  v43[1] = *(_QWORD **)(v24 + 128);
  if (HIDWORD(v45))
  {
    v26 = v44;
    v27 = &v44[HIDWORD(v45)];
    do
    {
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v43, &v41);
      if (v43[0])
      {
        v28 = *((unsigned int *)v43[0] - 1);
        v29 = &v43[0][v28];
      }
      else
      {
        v29 = 0;
        v28 = 0;
      }
      v36 = v43;
      v37 = v29;
      v38 = v29;
      v39 = v29;
      v40 = &v43[0][v28];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
      while (v42 != v37)
      {
        v30 = *(_QWORD *)(*v42 + 8);
        if (v30)
          v31 = (WebKit::WebUserContentControllerProxy *)(v30 - 16);
        else
          v31 = 0;
        WebKit::WebUserContentControllerProxy::removeUserScript(v31, *v26);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v41);
      }
      ++v26;
    }
    while (v26 != v27);
  }
  if (v43[0])
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v43[0], v25);
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
}

void sub_197784EC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserStyleSheets(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  API::UserStyleSheet **v26;
  API::UserStyleSheet **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  WebKit::WebUserContentControllerProxy *v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43[2];
  API::UserStyleSheet **v44;
  uint64_t v45;

  v4 = (uint64_t *)((char *)this + 216);
  v5 = *((_QWORD *)this + 27);
  if (!v5)
    goto LABEL_20;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = *((_DWORD *)*a2 + 4);
  v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    v12 = v5 + 24 * (v9 & v7);
    v13 = *(WTF **)v12;
    if (*(_QWORD *)v12 != -1)
    {
      if (!v13)
      {
        v14 = *v4;
        if (!*v4)
          goto LABEL_20;
        v12 = v14 + 24 * *(unsigned int *)(v14 - 4);
        goto LABEL_13;
      }
      if ((WTF::equal(v13, *a2, a3) & 1) != 0)
        break;
    }
  }
  v14 = *v4;
  if (!*v4)
    goto LABEL_14;
LABEL_13:
  v14 += 24 * *(unsigned int *)(v14 - 4);
LABEL_14:
  if (v14 == v12)
  {
LABEL_20:
    v41 = 0;
    v44 = 0;
    v42 = 0;
    v45 = 0;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  else
  {
    v44 = *(API::UserStyleSheet ***)(v12 + 8);
    v15 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    v45 = v15;
    v16 = *v4;
    if (!*v4 || (v16 += 24 * *(unsigned int *)(v16 - 4), v16 != v12))
    {
      if (v16 != v12)
      {
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)a2);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 8, v17);
        ++*(_DWORD *)(*v4 - 16);
        v18 = *v4;
        v19 = *v4 ? *(_DWORD *)(v18 - 12) - 1 : -1;
        *(_DWORD *)(v18 - 12) = v19;
        v33 = *v4;
        if (*v4)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v35 >> 1, 0);
        }
      }
    }
  }
  v20 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v20)
    v21 = v20 - 16;
  else
    v21 = 0;
  v22 = *(_QWORD *)(v21 + 64);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
      v24 = v23 - 16;
    else
      v24 = 0;
  }
  else
  {
    v24 = 0;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable((uint64_t *)v43, (_QWORD **)(v24 + 120));
  v43[1] = *(_QWORD **)(v24 + 128);
  if (HIDWORD(v45))
  {
    v26 = v44;
    v27 = &v44[HIDWORD(v45)];
    do
    {
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v43, &v41);
      if (v43[0])
      {
        v28 = *((unsigned int *)v43[0] - 1);
        v29 = &v43[0][v28];
      }
      else
      {
        v29 = 0;
        v28 = 0;
      }
      v36 = v43;
      v37 = v29;
      v38 = v29;
      v39 = v29;
      v40 = &v43[0][v28];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
      while (v42 != v37)
      {
        v30 = *(_QWORD *)(*v42 + 8);
        if (v30)
          v31 = (WebKit::WebUserContentControllerProxy *)(v30 - 16);
        else
          v31 = 0;
        WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v31, *v26);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v41);
      }
      ++v26;
    }
    while (v26 != v27);
  }
  if (v43[0])
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v43[0], v25);
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
}

void sub_1977851A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v5 = v4;

  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  a1[1] = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  a1[2] = v7;
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 3), (uint64_t *)(a2 + 24));
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  a1[5] = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  a1[6] = v9;
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  a1[7] = v10;
  WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(a1 + 8), a2 + 64);
  return a1;
}

void sub_19778527C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  v5 = *(unsigned int **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v5);
  v6 = *(WTF **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v6, a2);
  v7 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v8 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v9)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  v10 = *(const void **)v2;
  *(_QWORD *)v2 = 0;
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  return WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(a1 + 32, a2);
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke(uint64_t a1, void *a2)
{
  void *v2;
  char v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  id isa;
  uint64_t v14;
  const __CFString *v15;
  id v16;
  id v17;
  void **v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  id v44;
  const __CFString *v45;
  void *v46;
  WTF *v47;
  id *v48;
  id v49;
  void *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  void *v55;
  __CFString *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  _BYTE *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  __CFString *v74;
  void *v75;
  id v76;
  _DWORD *v77;
  unsigned int *v78;
  unsigned int v79;
  WKFrameInfo *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  _DWORD *v86;
  unsigned int *v87;
  unsigned int v88;
  WKFrameInfo *v89;
  _QWORD *v90;
  void *v91;
  void *v92;
  WTF::StringImpl *v93;
  NSObject *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v99;
  _BYTE *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  id v107;
  id v108;
  id *v109;
  id v110;
  id *v111;
  void *cf;
  void *cfa;
  id *v114;
  uint64_t *v115;
  unsigned int v117;
  WKFrameInfo *v118;
  WTF *v119;
  int v120;
  unsigned int v121;
  char v122;
  id *v123;
  uint64_t v124;
  uint8_t buf[8];
  char v126;
  WTF::StringImpl *v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  const __CFString *v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v107 = a2;
  objc_msgSend(v107, "info");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isMainFrame");

  if ((v3 & 1) != 0)
  {
    v108 = *(id *)(*(_QWORD *)(a1 + 72) + 8);
    std::__optional_copy_base<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](&v119, a1 + 152);
    v4 = v107;
    v123 = 0;
    v124 = 0;
    v5 = v4;
    v6 = v5;
    v110 = v5;
    if (v5)
      CFRetain(v5);

    v134 = 0;
    v135 = 0;
    v7 = WTF::fastMalloc((WTF *)8);
    LODWORD(v135) = 1;
    v134 = (const __CFString *)v7;
    v8 = HIDWORD(v135);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v110);
    objc_claimAutoreleasedReturnValue();
    v9 = v110;
    *(_QWORD *)(v7 + 8 * v8) = v9;
    v10 = v9;
    if (v110)
      CFRetain(v9);
    cf = v10;

    v12 = ++HIDWORD(v135);
    if (v110)
    {
      CFRelease(v10);
      v12 = HIDWORD(v135);
    }
    if (v12)
    {
      v114 = 0;
      v117 = 0;
      while (1)
      {
        isa = v134->isa;
        WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v134->isa);
        objc_claimAutoreleasedReturnValue();
        if (HIDWORD(v135))
        {
          v14 = 0;
          while (1)
          {
            v15 = v134;
            v16 = isa;
            WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(*(&v15->isa + v14));
            v17 = (id)objc_claimAutoreleasedReturnValue();
            LODWORD(v15) = v17 == v16;

            if ((_DWORD)v15)
              break;
            if (++v14 >= (unint64_t)HIDWORD(v135))
              goto LABEL_18;
          }
          v18 = &v134->isa + v14;
          v19 = *v18;
          *v18 = 0;
          if (v19)
            CFRelease(v19);
          WTF::VectorMover<false,WTF::RetainPtr<_WKFrameTreeNode>>::move(v18 + 1, &v134->isa + HIDWORD(v135), v18);
          --HIDWORD(v135);
        }
LABEL_18:
        objc_msgSend(isa, "info");
        v20 = (id)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v20, "isMainFrame") & 1) != 0)
        {
          v21 = -2;
        }
        else
        {
          objc_msgSend(v20, "_handle");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "frameID");

          if ((unint64_t)(v23 - 1) >= 0xFFFFFFFFFFFFFFFELL)
            v21 = -3;
          else
            v21 = v23;
        }

        if (!v122)
          goto LABEL_29;
        v24 = v121;
        if (v121)
          break;
LABEL_41:
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        objc_msgSend(isa, "childFrames");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
        if (!v34)
          goto LABEL_59;
        v35 = *(_QWORD *)v131;
        do
        {
          for (i = 0; i != v34; ++i)
          {
            if (*(_QWORD *)v131 != v35)
              objc_enumerationMutation(v33);
            v37 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * i);
            v38 = HIDWORD(v135);
            if (HIDWORD(v135) != (_DWORD)v135)
            {
              v45 = v134;
              v44 = v37;
              *((_QWORD *)&v45->isa + v38) = v44;
              if (!v44)
                goto LABEL_57;
LABEL_56:
              CFRetain(v44);
              goto LABEL_57;
            }
            v39 = HIDWORD(v135) + ((unint64_t)HIDWORD(v135) >> 2);
            if (v39 >= 0x10)
              v40 = v39 + 1;
            else
              v40 = 16;
            if (v40 <= (unint64_t)HIDWORD(v135) + 1)
              v41 = HIDWORD(v135) + 1;
            else
              v41 = v40;
            WTF::Vector<WTF::RetainPtr<_WKFrameTreeNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v134, v41);
            v42 = HIDWORD(v135);
            v43 = v134;
            v44 = v37;
            *((_QWORD *)&v43->isa + v42) = v44;
            if (v44)
              goto LABEL_56;
LABEL_57:

            ++HIDWORD(v135);
          }
          v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v130, buf, 16);
        }
        while (v34);
LABEL_59:

        if (!HIDWORD(v135))
          goto LABEL_60;
      }
      v25 = v119;
      while (1)
      {
        v26 = *(_QWORD *)v25;
        v25 = (WTF *)((char *)v25 + 8);
        if (v26 == v21)
          break;
        if (!--v24)
          goto LABEL_41;
      }
LABEL_29:
      if (v117 == (_DWORD)v124)
      {
        v27 = v117 + ((unint64_t)v117 >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= (unint64_t)v117 + 1)
          v29 = v117 + 1;
        else
          v29 = v28;
        WTF::Vector<WTF::RetainPtr<_WKFrameTreeNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v123, v29);
        v30 = HIDWORD(v124);
        v31 = v123;
        v32 = isa;
        v117 = v30;
        v114 = v31;
        v31[v30] = v32;
        if (!v32)
          goto LABEL_40;
      }
      else
      {
        v32 = isa;
        v114[v117] = v32;
        if (!v32)
        {
LABEL_40:

          HIDWORD(v124) = ++v117;
          goto LABEL_41;
        }
      }
      CFRetain(v32);
      goto LABEL_40;
    }
LABEL_60:
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v11);

    if (v122)
    {
      v47 = v119;
      if (v119)
      {
        v119 = 0;
        v120 = 0;
        WTF::fastFree(v47, v46);
      }
    }
    if (HIDWORD(v124))
    {
      v48 = v123;
      v109 = &v123[HIDWORD(v124)];
      v115 = (uint64_t *)(a1 + 32);
      do
      {
        v111 = v48;
        v49 = *v48;
        WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(*v48);
        objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "info");
        v118 = (WKFrameInfo *)objc_claimAutoreleasedReturnValue();

        -[WKFrameInfo request](v118, "request");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "URL");
        cfa = (void *)objc_claimAutoreleasedReturnValue();

        v51 = *(_QWORD *)(a1 + 48);
        MEMORY[0x19AEABB18](buf, cfa);
        v53 = WebKit::WebExtensionContext::permissionState(v51, (URL *)buf, *(URL **)(a1 + 40), 3);
        v54 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v52);
          else
            *(_DWORD *)v54 -= 2;
        }
        if ((v53 & 0xFFFFFFFE) == 2)
        {
          if (*(_BYTE *)(a1 + 216))
          {
            v55 = (void *)MEMORY[0x1E0CB3940];
            if (*(_QWORD *)(a1 + 208))
              v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            else
              v56 = &stru_1E351F1B8;
            objc_msgSend(v55, "stringWithFormat:", CFSTR("return (%@)(...arguments)"), v56);
            v57 = (void *)objc_claimAutoreleasedReturnValue();

            if (*(_BYTE *)(a1 + 120))
            {
              WebKit::parseJSON(*(_QWORD *)(a1 + 112), 1, 0);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v58 = (void *)MEMORY[0x1E0C9AA60];
            }
            WTF::RetainPtr<__IOHIDDevice *>::get(v115);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v134 = CFSTR("arguments");
            *(_QWORD *)&v130 = v58;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v130, &v134, 1);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            v86 = *(_DWORD **)(a1 + 80);
            ++*v86;
            v87 = *(unsigned int **)(a1 + 88);
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 + 1, v87));
            v89 = v118;
            v90 = malloc_type_malloc(0x38uLL, 0x10E004045CDF6A7uLL);
            *v90 = MEMORY[0x1E0C809A0];
            v90[1] = 50331650;
            v90[2] = WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::{lambda(void *,objc_object *,NSError *)#1}::__invoke;
            v90[3] = &WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::descriptor;
            v90[4] = v86;
            v90[5] = v87;
            v90[6] = v89;
            v91 = _Block_copy(v90);

            v92 = _Block_copy(v91);
            objc_msgSend(v84, "_callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:", v57, v85, v89, v108, v92);

          }
          else
          {
            v70 = *(_DWORD *)(a1 + 68);
            if (v70)
            {
              v71 = *(_QWORD **)(a1 + 56);
              v72 = &v71[6 * v70];
              do
              {
                WTF::RetainPtr<__IOHIDDevice *>::get(v115);
                v73 = (void *)objc_claimAutoreleasedReturnValue();
                if (*v71)
                  v74 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                else
                  v74 = &stru_1E351F1B8;
                WTF::URL::operator NSURL *();
                v75 = (void *)objc_claimAutoreleasedReturnValue();
                v76 = *(id *)(*(_QWORD *)(a1 + 72) + 8);
                v77 = *(_DWORD **)(a1 + 80);
                ++*v77;
                v78 = *(unsigned int **)(a1 + 88);
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 + 1, v78));
                v80 = v118;
                v81 = malloc_type_malloc(0x38uLL, 0x10E004045CDF6A7uLL);
                *v81 = MEMORY[0x1E0C809A0];
                v81[1] = 50331650;
                v81[2] = WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::{lambda(void *,objc_object *,NSError *)#1}::__invoke;
                v81[3] = &WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::descriptor;
                v81[4] = v77;
                v81[5] = v78;
                v81[6] = v80;
                v82 = _Block_copy(v81);

                v83 = _Block_copy(v82);
                objc_msgSend(v73, "_evaluateJavaScript:withSourceURL:inFrame:inContentWorld:completionHandler:", v74, v75, v80, v76, v83);

                v71 += 6;
              }
              while (v71 != v72);
            }
          }
        }
        else
        {
          v59 = *(_QWORD *)(a1 + 80);
          WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)buf, 0, v118, CFSTR("Failed to execute script. Extension does not have access to this frame."));
          v61 = (uint64_t *)(v59 + 8);
          v62 = *(_DWORD *)(v59 + 20);
          if (v62 == *(_DWORD *)(v59 + 16))
          {
            WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v61, (unint64_t)buf);
          }
          else
          {
            v63 = *v61;
            v64 = (_BYTE *)(*v61 + 48 * v62);
            *v64 = 0;
            v64[8] = 0;
            if (v126)
            {
              v65 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              *(_QWORD *)v64 = v65;
              v64[8] = 1;
            }
            v66 = v63 + 48 * v62;
            *(_BYTE *)(v66 + 16) = 0;
            v67 = v66 + 16;
            *(_BYTE *)(v67 + 8) = 0;
            if (v128)
            {
              v68 = v127;
              v127 = 0;
              *(_QWORD *)v67 = v68;
              *(_BYTE *)(v67 + 8) = 1;
            }
            *(_OWORD *)(v63 + 48 * v62 + 32) = v129;
            ++*(_DWORD *)(v59 + 20);
          }
          if (v128)
          {
            v69 = v127;
            v127 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v60);
              else
                *(_DWORD *)v69 -= 2;
            }
          }
          if (v126)
          {
            v93 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
                WTF::StringImpl::destroy(v93, v60);
              else
                *(_DWORD *)v93 -= 2;
            }
          }
        }

        v48 = v111 + 1;
      }
      while (v111 + 1 != v109);
    }
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v123, v46);

  }
  else
  {
    v94 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v94, OS_LOG_TYPE_INFO, "Not executing script because the mainFrame is nil", buf, 2u);
    }
    v95 = *(_QWORD *)(a1 + 80);
    WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)buf, 0, 0, CFSTR("Failed to execute script."));
    v97 = (uint64_t *)(v95 + 8);
    v98 = *(_DWORD *)(v95 + 20);
    if (v98 == *(_DWORD *)(v95 + 16))
    {
      WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v97, (unint64_t)buf);
    }
    else
    {
      v99 = *v97;
      v100 = (_BYTE *)(*v97 + 48 * v98);
      *v100 = 0;
      v100[8] = 0;
      if (v126)
      {
        v101 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)v100 = v101;
        v100[8] = 1;
      }
      v102 = v99 + 48 * v98;
      *(_BYTE *)(v102 + 16) = 0;
      v103 = v102 + 16;
      *(_BYTE *)(v103 + 8) = 0;
      if (v128)
      {
        v104 = v127;
        v127 = 0;
        *(_QWORD *)v103 = v104;
        *(_BYTE *)(v103 + 8) = 1;
      }
      *(_OWORD *)(v99 + 48 * v98 + 32) = v129;
      ++*(_DWORD *)(v95 + 20);
    }
    if (v128)
    {
      v105 = v127;
      v127 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v96);
        else
          *(_DWORD *)v105 -= 2;
      }
    }
    if (v126)
    {
      v106 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
          WTF::StringImpl::destroy(v106, v96);
        else
          *(_DWORD *)v106 -= 2;
      }
    }
  }

}

void sub_197785DD4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,WTF::StringImpl *a29,char a30,WTF::StringImpl *a31,char a32)
{
  if (a32 && a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a30 && a29)
  {
    if (*(_DWORD *)a29 == 2)
      WTF::StringImpl::destroy(a29, a2);
    else
      *(_DWORD *)a29 -= 2;
  }

  _Unwind_Resume(a1);
}

WTF *WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  WTF *result;

  v3 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  result = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(result, v2);
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#1})::{lambda(void *,objc_object *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  objc_object *v5;
  uint64_t v6;
  WKFrameInfo *v7;
  NSString *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  __int128 v24;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(WKFrameInfo **)(a1 + 48);
  objc_msgSend(a3, "localizedDescription");
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)&v20, v5, v7, v8);
  v10 = (uint64_t *)(v6 + 8);
  v11 = *(_DWORD *)(v6 + 20);
  if (v11 == *(_DWORD *)(v6 + 16))
  {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v10, (unint64_t)&v20);
  }
  else
  {
    v12 = *v10;
    v13 = (_BYTE *)(*v10 + 48 * v11);
    *v13 = 0;
    v13[8] = 0;
    if (v21)
    {
      v14 = v20;
      v20 = 0;
      *(_QWORD *)v13 = v14;
      v13[8] = 1;
    }
    v15 = v12 + 48 * v11;
    *(_BYTE *)(v15 + 16) = 0;
    v16 = v15 + 16;
    *(_BYTE *)(v16 + 8) = 0;
    if (v23)
    {
      v17 = v22;
      v22 = 0;
      *(_QWORD *)v16 = v17;
      *(_BYTE *)(v16 + 8) = 1;
    }
    *(_OWORD *)(v12 + 48 * v11 + 32) = v24;
    ++*(_DWORD *)(v6 + 20);
  }
  if (v23)
  {
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v9);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (v21)
  {
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
  }

}

void sub_197786288(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

WTF *WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  WTF *result;

  v3 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  result = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(result, v2);
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2}>(WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(_WKFrameTreeNode *)::{lambda(objc_object *,NSError *)#2})::{lambda(void *,objc_object *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  objc_object *v5;
  uint64_t v6;
  WKFrameInfo *v7;
  NSString *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  __int128 v24;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(WKFrameInfo **)(a1 + 48);
  objc_msgSend(a3, "localizedDescription");
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionDynamicScripts::toInjectionResultParameters((WebKit::WebExtensionDynamicScripts *)&v20, v5, v7, v8);
  v10 = (uint64_t *)(v6 + 8);
  v11 = *(_DWORD *)(v6 + 20);
  if (v11 == *(_DWORD *)(v6 + 16))
  {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)v10, (unint64_t)&v20);
  }
  else
  {
    v12 = *v10;
    v13 = (_BYTE *)(*v10 + 48 * v11);
    *v13 = 0;
    v13[8] = 0;
    if (v21)
    {
      v14 = v20;
      v20 = 0;
      *(_QWORD *)v13 = v14;
      v13[8] = 1;
    }
    v15 = v12 + 48 * v11;
    *(_BYTE *)(v15 + 16) = 0;
    v16 = v15 + 16;
    *(_BYTE *)(v16 + 8) = 0;
    if (v23)
    {
      v17 = v22;
      v22 = 0;
      *(_QWORD *)v16 = v17;
      *(_BYTE *)(v16 + 8) = 1;
    }
    *(_OWORD *)(v12 + 48 * v11 + 32) = v24;
    ++*(_DWORD *)(v6 + 20);
  }
  if (v23)
  {
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v9);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (v21)
  {
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
  }

}

void sub_1977864AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = (unsigned int **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
      v10 = v8;
      v11 = v9;
      v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((unsigned int **)v12 != v8)
      {
        do
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = *v10;
          v16 = (unint64_t)*v10 + ~((_QWORD)*v10 << 32);
          v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
          v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
          v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v13 + 8 * v19);
            v19 = (v19 + v20++) & v14;
          }
          while (v22);
          do
            v23 = __ldaxr(v15);
          while (__stlxr(v23 + 1, v15));
          v24 = *(unsigned int **)(v13 + 8 * v21);
          *(_QWORD *)(v13 + 8 * v21) = v15;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v9);
            }
          }
          while (++v10 != v11)
          {
            if ((unint64_t)*v10 + 1 > 1)
              goto LABEL_20;
          }
          v10 = v11;
LABEL_20:
          ;
        }
        while (v10 != (unsigned int **)v12);
      }
    }
  }
  return a1;
}

void WTF::VectorMover<false,WTF::RetainPtr<_WKFrameTreeNode>>::move(void **a1, void **a2, _QWORD *a3)
{
  void **v5;
  void *v6;
  void *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      *a3 = v6;
      v7 = *v5;
      *v5 = 0;
      if (v7)
        CFRelease(v7);
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WTF::RetainPtr<_WKFrameTreeNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  void **v4;
  void **v5;
  _QWORD *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(void ***)a1;
      v5 = (void **)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12));
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      WTF::VectorMover<false,WTF::RetainPtr<_WKFrameTreeNode>>::move(v4, v5, v6);
      if (v4)
      {
        if (*(void ***)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197786920);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (uint64_t *)(*(_QWORD *)result + 48 * *((unsigned int *)result + 3));
    v5 = 48 * a2;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,std::pair<WTF::String,WTF::URL>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WTF::URL>>::move(WTF::StringImpl *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (result != (WTF::StringImpl *)a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](a3, v5);
      v7 = (WTF::StringImpl *)v5[1];
      v5[1] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = (WTF::StringImpl *)*v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 6;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

WTF *WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(WTF *result, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 8, a2);
    return (WTF *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *a1 = &off_1E34F9780;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34F9780;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::InjectionResultHolder>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionDynamicScripts::executeScript(WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WKWebView *,API::ContentWorld &,WebKit::WebExtensionTab &,WebKit::WebExtensionScriptInjectionParameters const&,WebKit::WebExtensionContext &,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8) + 8;
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197786AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  __int128 v12;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x5555556)
  {
    v5 = 48 * v3;
    v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 48 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        if (*(_QWORD *)v8)
          *v10 += 2;
        *(_QWORD *)v6 = v10;
        v11 = *(_DWORD **)(v8 + 8);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(v6 + 8) = v11;
        v12 = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v6 + 32) = v12;
        v8 += 48;
        v6 += 48;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v13);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          v22 = (_QWORD *)(v15 + 24 * v20 + 8);
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v8);
          v24 = *v21;
          *v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v12;
          *v12 = 0;
          *v21 = v25;
          v26 = v4 + 24 * v9;
          *v22 = 0;
          *(_QWORD *)(v15 + 24 * v20 + 16) = 0;
          v27 = *(_QWORD *)(v26 + 8);
          v26 += 8;
          *(_QWORD *)v26 = 0;
          *v22 = v27;
          LODWORD(v25) = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = 0;
          v28 = v15 + 24 * v20;
          *(_DWORD *)(v28 + 16) = (_DWORD)v25;
          LODWORD(v25) = *(_DWORD *)(v26 + 12);
          *(_DWORD *)(v26 + 12) = 0;
          *(_DWORD *)(v28 + 20) = (_DWORD)v25;
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v23);
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a3)
            v10 = v15 + 24 * v20;
        }
        else
        {
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t *WebKit::WebExtensionMatchPattern::extensionSchemes(WebKit::WebExtensionMatchPattern *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4[2];

  v4[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&WebKit::WebExtensionMatchPattern::extensionSchemes(void)::schemes, v4, (const WTF::StringImpl *)1);
    v3 = v4[0];
    v4[0] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return &WebKit::WebExtensionMatchPattern::extensionSchemes(void)::schemes;
}

void sub_197786EE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::patternsMatchURL(_QWORD **a1, WTF::URL *a2)
{
  _QWORD *v4;
  _BYTE **v5;
  _BYTE **v6;
  _BYTE **v7;
  uint64_t v8;
  uint64_t result;

  v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a1);
  v5 = (_BYTE **)v4;
  v7 = v6;
  if (*a1)
    v8 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v8 = 0;
  if ((_QWORD *)v8 == v4)
    return 0;
  while (1)
  {
    result = WebKit::WebExtensionMatchPattern::matchesURL(*v5, a2, 0);
    if ((result & 1) != 0)
      return 1;
    while (++v5 != v7)
    {
      if ((unint64_t)(*v5 + 1) > 1)
        goto LABEL_10;
    }
    v5 = v7;
LABEL_10:
    if (v5 == (_BYTE **)v8)
      return result;
  }
}

uint64_t WebKit::WebExtensionMatchPattern::matchesURL(_BYTE *a1, WTF::URL *a2, char a3)
{
  uint64_t v4;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::UserContentURLPattern *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  int v17;
  WTF *v18;
  WTF::StringImpl *v19;

  if (!a1[49] || (*((_BYTE *)a2 + 8) & 1) == 0)
    return 0;
  if (!a1[48])
  {
    if ((a3 & 1) != 0
      || WebCore::UserContentURLPattern::matchesScheme((WebCore::UserContentURLPattern *)(a1 + 16), a2))
    {
      v12 = (WebCore::UserContentURLPattern *)(a1 + 16);
      if (WebCore::UserContentURLPattern::matchesHost(v12, a2))
      {
        if ((a3 & 2) != 0 || WebCore::UserContentURLPattern::matchesPath(v12, a2))
          return 1;
      }
    }
    return 0;
  }
  WebKit::WebExtensionMatchPattern::supportedSchemes((WebKit::WebExtensionMatchPattern *)a1);
  WTF::URL::protocol(a2);
  if ((v7 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v4 = qword_1ECE73280;
  v10 = v19;
  if (qword_1ECE73280)
  {
    v13 = *(_DWORD *)(qword_1ECE73280 - 8);
    v14 = *((_DWORD *)v19 + 4);
    if (v14 >= 0x100)
      v15 = v14 >> 8;
    else
      v15 = WTF::StringImpl::hashSlowCase(v19);
    for (i = 0; ; v15 = i + v17)
    {
      v17 = v15 & v13;
      v18 = *(WTF **)(v4 + 8 * (v15 & v13));
      if (v18 != (WTF *)-1)
      {
        if (!v18)
        {
          v4 = 0;
          goto LABEL_29;
        }
        if ((WTF::equal(v18, v19, v9) & 1) != 0)
          break;
      }
      ++i;
    }
    v4 = 1;
LABEL_29:
    v10 = v19;
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v4;
}

void sub_19778711C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::patternsMatchPattern(_QWORD **a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t result;

  v4 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a1);
  v5 = v4;
  v7 = v6;
  if (*a1)
    v8 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v8 = 0;
  if ((unsigned __int8 **)v8 == v4)
    return 0;
  while (1)
  {
    result = WebKit::WebExtensionMatchPattern::matchesPattern(*v5, a2, 0);
    if ((result & 1) != 0)
      return 1;
    while (++v5 != v7)
    {
      if ((unint64_t)(*v5 + 1) > 1)
        goto LABEL_10;
    }
    v5 = v7;
LABEL_10:
    if (v5 == (unsigned __int8 **)v8)
      return result;
  }
}

uint64_t WebKit::WebExtensionMatchPattern::matchesPattern(unsigned __int8 *a1, unsigned __int8 *a2, char a3)
{
  uint64_t result;

  if (!a1[49])
    return 0;
  if ((WebKit::WebExtensionMatchPattern::operator==((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (WebKit::WebExtensionMatchPattern::matchesPattern(WebKit::WebExtensionMatchPattern const&,WTF::OptionSet<WebKit::WebExtensionMatchPattern::Options>)const::$_0::operator()((WebKit::WebExtensionMatchPattern *)a1, (uint64_t)a2) & 1) != 0|| (a3 & 4) != 0&& (WebKit::WebExtensionMatchPattern::matchesPattern(WebKit::WebExtensionMatchPattern const&,WTF::OptionSet<WebKit::WebExtensionMatchPattern::Options>)const::$_0::operator()((WebKit::WebExtensionMatchPattern *)a2, (uint64_t)a1) & 1) != 0)
  {
    return 1;
  }
  if (a1[48] | a2[48])
    return 0;
  result = WebKit::WebExtensionMatchPattern::schemeMatches((uint64_t)a1, (uint64_t)a2, a3);
  if ((_DWORD)result)
  {
    result = WebKit::WebExtensionMatchPattern::hostMatches((uint64_t)a1, (uint64_t)a2, a3);
    if ((_DWORD)result)
      return WebKit::WebExtensionMatchPattern::pathMatches((uint64_t)a1, (uint64_t)a2, a3);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsWebExtension>(IPC::Encoder *result, unsigned int a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;
  IPC::Encoder *v16;

  if (a2)
  {
    v4 = (uint64_t *)result;
    v5 = 8 * a2;
    do
    {
      v6 = *v4;
      v7 = *(_QWORD *)(*v4 + 136);
      if (v7 && *(_BYTE *)(v7 + 104) || *(_QWORD *)(v6 + 144))
      {
        v8 = *a3;
        v9 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v9 = 2615;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 528) = v9 + 16;
        *(_QWORD *)(v9 + 536) = v9 + 16;
        *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v9 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
        v16 = (IPC::Encoder *)v9;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, v8);
        LOBYTE(v14) = 0;
        v15 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v16, 0, (uint64_t)&v14, 1);
        if (v15)
        {
          v11 = v14;
          v14 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        result = v16;
        v16 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          result = (IPC::Encoder *)WTF::fastFree(v12, v13);
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void sub_1977873D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionMatchPattern::getOrCreate(WTF::StringImpl **this@<X0>, const WTF::StringImpl *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((byte_1ECE73279 & 1) != 0)
  {
    v6 = qword_1ECE73288;
    if (qword_1ECE73288)
      goto LABEL_4;
  }
  else
  {
    qword_1ECE73288 = 0;
    byte_1ECE73279 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0);
  v6 = qword_1ECE73288;
  if (!qword_1ECE73288)
  {
    v7 = 0;
    goto LABEL_5;
  }
LABEL_4:
  v7 = *(_DWORD *)(v6 - 8);
LABEL_5:
  v8 = *((_DWORD *)*this + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*this);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = v6 + 16 * (v9 & v7);
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v10 = (_QWORD *)(v6 + 16 * v12);
      goto LABEL_14;
    }
    if (!v14)
      break;
    if ((WTF::equal(v14, *this, a2) & 1) != 0)
      goto LABEL_29;
LABEL_14:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(qword_1ECE73288 - 16);
    v13 = (uint64_t)v10;
  }
  WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)this);
  WebKit::WebExtensionMatchPattern::create<WTF::String const&>(this, &v23);
  v15 = v23;
  v23 = 0;
  v16 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v15;
  if (v16)
  {
    CFRelease(*(CFTypeRef *)(v16 + 8));
    v17 = v23;
    v23 = 0;
    if (v17)
      CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  if (qword_1ECE73288)
    v18 = *(_DWORD *)(qword_1ECE73288 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(qword_1ECE73288 - 12) = v18;
  if (qword_1ECE73288)
    v19 = *(_DWORD *)(qword_1ECE73288 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(qword_1ECE73288 - 16) + v19);
  v21 = *(unsigned int *)(qword_1ECE73288 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
LABEL_28:
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((WTF::StringImpl **)v13);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_28;
  }
LABEL_29:
  v22 = *(_QWORD *)(v13 + 8);
  if (v22)
    CFRetain(*(CFTypeRef *)(v22 + 8));
  *a3 = v22;
}

uint64_t WebKit::WebExtensionMatchPattern::getOrCreate@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v9 = *this;
  if (*this && *((_DWORD *)v9 + 1))
  {
    *(_DWORD *)v9 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v36;
  }
  v35 = v9;
  v10 = *a2;
  if (*a2 && *((_DWORD *)v10 + 1))
    goto LABEL_10;
  if (!*this || !WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)*this, "file", 4uLL))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v36;
    goto LABEL_12;
  }
  v10 = *a2;
  if (*a2)
LABEL_10:
    *(_DWORD *)v10 += 2;
LABEL_12:
  v34 = v10;
  v11 = *a3;
  if (v11 && *((_DWORD *)v11 + 1))
  {
    *(_DWORD *)v11 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v36;
  }
  v33 = v11;
  if (v9)
    *(_DWORD *)v9 += 2;
  if (v10)
    *(_DWORD *)v10 += 2;
  if (v11)
    *(_DWORD *)v11 += 2;
  result = WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v36, (uint64_t)v9, "://", 4, (uint64_t)v10, v11);
  if (!v36)
  {
    __break(0xC471u);
    return result;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v13);
      if (!v10)
        goto LABEL_31;
      goto LABEL_29;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
  {
LABEL_31:
    if (!v9)
      goto LABEL_37;
    goto LABEL_34;
  }
LABEL_29:
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy(v10, v13);
  if (!v9)
    goto LABEL_37;
LABEL_34:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v13);
  else
    *(_DWORD *)v9 -= 2;
LABEL_37:
  if ((byte_1ECE73279 & 1) != 0)
  {
    v15 = qword_1ECE73288;
    if (qword_1ECE73288)
      goto LABEL_40;
  }
  else
  {
    qword_1ECE73288 = 0;
    byte_1ECE73279 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0);
  v15 = qword_1ECE73288;
  if (!qword_1ECE73288)
  {
    v16 = 0;
    goto LABEL_41;
  }
LABEL_40:
  v16 = *(_DWORD *)(v15 - 8);
LABEL_41:
  v17 = *((_DWORD *)v36 + 4);
  if (v17 >= 0x100)
    v18 = v17 >> 8;
  else
    v18 = WTF::StringImpl::hashSlowCase(v36);
  v19 = 0;
  for (i = 1; ; ++i)
  {
    v21 = v18 & v16;
    v22 = v15 + 16 * (v18 & v16);
    v23 = *(WTF **)v22;
    if (*(_QWORD *)v22 == -1)
    {
      v19 = (_QWORD *)(v15 + 16 * v21);
      goto LABEL_50;
    }
    if (!v23)
      break;
    if ((WTF::equal(v23, v36, v14) & 1) != 0)
      goto LABEL_67;
LABEL_50:
    v18 = i + v21;
  }
  if (v19)
  {
    *v19 = 0;
    v19[1] = 0;
    --*(_DWORD *)(qword_1ECE73288 - 16);
    v22 = (uint64_t)v19;
  }
  WTF::String::operator=((WTF::StringImpl **)v22, (WTF::StringImpl *)&v36);
  v25 = API::Object::newObject(0x38uLL, 117);
  WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(v25, &v35, (uint64_t *)&v34, (uint64_t *)&v33, 0);
  if (v25 && !*(_BYTE *)(v25 + 49))
  {
    CFRelease(*(CFTypeRef *)(v25 + 8));
    v25 = 0;
  }
  v26 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v22 + 8) = v25;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  if (qword_1ECE73288)
    v27 = *(_DWORD *)(qword_1ECE73288 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(qword_1ECE73288 - 12) = v27;
  if (qword_1ECE73288)
    v28 = *(_DWORD *)(qword_1ECE73288 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(qword_1ECE73288 - 16) + v28);
  v30 = *(unsigned int *)(qword_1ECE73288 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
LABEL_66:
      v22 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((WTF::StringImpl **)v22);
  }
  else if (3 * v30 <= 4 * v29)
  {
    goto LABEL_66;
  }
LABEL_67:
  v31 = *(_QWORD *)(v22 + 8);
  if (v31)
    CFRetain(*(CFTypeRef *)(v31 + 8));
  *a4 = v31;
  v32 = v36;
  v36 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v24);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v24);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v24);
    else
      *(_DWORD *)v34 -= 2;
  }
  result = (uint64_t)v35;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      return WTF::StringImpl::destroy(v35, v24);
    else
      *(_DWORD *)v35 -= 2;
  }
  return result;
}

void sub_1977879EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  void *v12;
  WTF::StringImpl *v14;

  operator delete(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::getOrCreate@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[2];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v29[0];
  v28 = v29[0];
  if ((a2 & 1) != 0 || (*(_BYTE *)(a1 + 8) & 2) == 0)
  {
    WTF::URL::protocol((WTF::URL *)a1);
    if ((v7 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v9 = v29[0];
    v28 = v29[0];
    v29[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v8);
        v29[0] = 0;
      }
      else
      {
        *(_DWORD *)v6 -= 2;
      }
    }
    v6 = v9;
  }
  WTF::URL::host((WTF::URL *)a1);
  if ((v10 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v11 = a2;
  if ((a2 & 2) != 0)
  {
    v12 = v27;
    if (v27)
    {
      if (*((_DWORD *)v27 + 1))
      {
        *(_DWORD *)v27 += 2;
        v25 = v12;
        v29[0] = (WTF::StringImpl *)"*.";
        v29[1] = (WTF::StringImpl *)3;
        result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v29, (uint64_t *)&v25, &v26);
        v15 = v26;
        if (!v26)
        {
          __break(0xC471u);
          return result;
        }
        v16 = v27;
        v26 = 0;
        v27 = v15;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v14);
            v17 = v26;
            v26 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v14);
              else
                *(_DWORD *)v17 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v16 -= 2;
            v26 = 0;
          }
        }
        v18 = v25;
        v25 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v29[0];
  v26 = v29[0];
  if ((v11 & 4) == 0)
  {
    v20 = *(_DWORD *)(a1 + 32);
    if (v20 <= WTF::URL::pathStart((WTF::URL *)a1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v24 = v29[0];
    }
    else
    {
      WTF::URL::path((WTF::URL *)a1);
      if ((v21 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
    }
    v26 = v24;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v22);
      else
        *(_DWORD *)v19 -= 2;
    }
    v19 = v24;
  }
  WebKit::WebExtensionMatchPattern::getOrCreate(&v28, &v27, &v26, a3);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v23);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      if (!v6)
        return result;
      goto LABEL_47;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v6)
    return result;
LABEL_47:
  if (*(_DWORD *)v6 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v23);
  *(_DWORD *)v6 -= 2;
  return result;
}

void sub_197787E40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::allURLsMatchPattern@<X0>(_QWORD *a1@<X8>)
{
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebExtensionMatchPattern::getOrCreate(&v6, v3, &v7);
  result = v6;
  *a1 = v7;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197787F68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::allHostsAndSchemesMatchPattern@<X0>(_QWORD *a1@<X8>)
{
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebExtensionMatchPattern::getOrCreate(&v6, v3, &v7);
  result = v6;
  *a1 = v7;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197788004(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a1);
  v4 = *a1;
  if (*a1)
    v4 += *((unsigned int *)v4 - 1);
  if (v4 == v2)
    return 0;
  while (1)
  {
    v5 = *v2;
    if (*(_BYTE *)(*v2 + 49))
    {
      if (*(_BYTE *)(v5 + 48))
        return 1;
      if (*(_BYTE *)(v5 + 41))
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (!v6 || !*(_DWORD *)(v6 + 4))
          return 1;
      }
    }
    while (++v2 != v3)
    {
      if ((unint64_t)(*v2 + 1) > 1)
        goto LABEL_13;
    }
    v2 = v3;
LABEL_13:
    if (v2 == v4)
      return 0;
  }
}

uint64_t WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(uint64_t a1, WTF::StringImpl **a2, _QWORD *a3)
{
  WTF::StringImpl **v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int16 v40;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34AAF28;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (a3)
    *a3 = 0;
  v7 = MEMORY[0x19AEABBCC](*a2, "<all_urls>", 10);
  *(_BYTE *)(a1 + 48) = v7;
  if (v7)
  {
    *(_BYTE *)(a1 + 49) = 1;
    v8 = *a2;
    if (*a2)
    {
      v9 = *((_DWORD *)v8 + 4);
      if (v9 >= 0x100)
        LODWORD(v8) = v9 >> 8;
      else
        LODWORD(v8) = WTF::StringImpl::hashSlowCase(v8);
    }
    *(_DWORD *)(a1 + 52) = (_DWORD)v8;
    return a1;
  }
  WebCore::UserContentURLPattern::UserContentURLPattern((uint64_t)&v37);
  v11 = v37;
  if (!v37 || !*((_DWORD *)v37 + 1))
    goto LABEL_11;
  *(_DWORD *)v37 += 2;
  v36 = v11;
  v12 = WebKit::WebExtensionMatchPattern::isValidScheme((WebKit::WebExtensionMatchPattern *)&v36);
  v13 = v12;
  v36 = 0;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    if ((v12 & 1) != 0)
      goto LABEL_11;
LABEL_18:
    if (a3)
    {
      v16 = (void *)MEMORY[0x1E0CB3940];
      if (*a2)
        v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v17 = &stru_1E351F1B8;
      if (v37)
        v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v18 = &stru_1E351F1B8;
      objc_msgSend(v16, "stringWithFormat:", CFSTR("\"%@\" cannot be parsed because the scheme \"%@\" is invalid."), v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::error(1, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_38:
      *a3 = v20;

LABEL_44:
    }
    goto LABEL_59;
  }
  WTF::StringImpl::destroy(v11, v10);
  if ((v13 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  switch((char)v40)
  {
    case 0:
      v14 = v37;
      v37 = 0;
      v15 = *v6;
      *v6 = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      v26 = v38;
      v38 = 0;
      v27 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v10);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v39;
      v39 = 0;
      v29 = *(WTF::StringImpl **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v28;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v10);
        else
          *(_DWORD *)v29 -= 2;
      }
      *(_WORD *)(a1 + 40) = v40;
      *(_BYTE *)(a1 + 49) = 1;
      v30 = *a2;
      if (*a2)
      {
        v31 = *((_DWORD *)v30 + 4);
        if (v31 >= 0x100)
          LODWORD(v30) = v31 >> 8;
        else
          LODWORD(v30) = WTF::StringImpl::hashSlowCase(v30);
      }
      *(_DWORD *)(a1 + 52) = (_DWORD)v30;
      break;
    case 2:
      if (a3)
      {
        v21 = (void *)MEMORY[0x1E0CB3940];
        if (*a2)
          v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        objc_msgSend(v21, "stringWithFormat:", CFSTR("\"%@\" cannot be parsed because it doesn't have a scheme."), v17);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
        WebKit::error(1, v18);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_43;
      }
      break;
    case 3:
      if (a3)
      {
        v23 = (void *)MEMORY[0x1E0CB3940];
        if (*a2)
          v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        objc_msgSend(v23, "stringWithFormat:", CFSTR("\"%@\" cannot be parsed because it doesn't have a host."), v17);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
        WebKit::error(2, v18);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_43;
      }
      break;
    case 4:
      if (a3)
      {
        v24 = (void *)MEMORY[0x1E0CB3940];
        if (*a2)
          v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        if (v38)
          v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v18 = &stru_1E351F1B8;
        objc_msgSend(v24, "stringWithFormat:", CFSTR("\"%@\" cannot be parsed because the host \"%@\" is invalid."), v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::error(2, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_38;
      }
      break;
    case 5:
      if (a3)
      {
        v25 = (void *)MEMORY[0x1E0CB3940];
        if (*a2)
          v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        objc_msgSend(v25, "stringWithFormat:", CFSTR("\"%@\" cannot be parsed because it doesn't have a path."), v17);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
        WebKit::error(3, v18);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_43:
        *a3 = v22;
        goto LABEL_44;
      }
      break;
    default:
      break;
  }
LABEL_59:
  v32 = v39;
  v39 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v10);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v38;
  v38 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v10);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v37;
  v37 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v10);
    else
      *(_DWORD *)v34 -= 2;
  }
  return a1;
}

void sub_197788590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  void *v16;
  void *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v20);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v20);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v20);
    else
      *(_DWORD *)a13 -= 2;
  }
  v21 = *(WTF::StringImpl **)(v15 + 32);
  *(_QWORD *)(v15 + 32) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(WTF::StringImpl **)(v15 + 24);
  *(_QWORD *)(v15 + 24) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *v18;
  *v18 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionMatchPattern::isValidScheme(WebKit::WebExtensionMatchPattern *a1)
{
  const WTF::StringImpl *v2;
  uint64_t v3;
  WTF *result;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;

  if (!*(_QWORD *)a1)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 4))
    return 0;
  WebKit::WebExtensionMatchPattern::validSchemes(a1);
  v3 = WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes;
  if (!WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes)
    return 0;
  v5 = *(_DWORD *)(WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes - 8);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 16);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a1);
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    result = *(WTF **)(v3 + 8 * (v7 & v5));
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *(const WTF::StringImpl **)a1, v2) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)1;
}

id WebKit::error(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1E0CB35C8];
  v8 = *MEMORY[0x1E0CB2938];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", CFSTR("_WKWebExtensionMatchPatternErrorDomain"), a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_19778885C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  void *v28;
  __CFString *v29;
  void *v30;
  void *v31;
  void *v32;
  __CFString *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  void *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int16 v54;
  WTF::StringImpl *v55;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34AAF28;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = (WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (a5)
    *a5 = 0;
  v11 = *a2;
  if (*a2)
    *(_DWORD *)v11 += 2;
  v55 = v11;
  v12 = WebKit::WebExtensionMatchPattern::isValidScheme((WebKit::WebExtensionMatchPattern *)&v55);
  v14 = v12;
  v55 = 0;
  if (!v11)
  {
LABEL_8:
    if ((v12 & 1) != 0)
      goto LABEL_9;
    goto LABEL_21;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v11, v13);
  if ((v14 & 1) != 0)
  {
LABEL_9:
    v15 = *a2;
    if (*a2)
    {
      v16 = *((unsigned int *)v15 + 4);
      v17 = *((_QWORD *)v15 + 1);
      LODWORD(v15) = *((_DWORD *)v15 + 1);
      v18 = (v16 >> 2) & 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = *a3;
    if (*a3)
    {
      v20 = *(unsigned int *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 8);
      LODWORD(v19) = *(_DWORD *)(v19 + 4);
      v22 = (v20 >> 2) & 1;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = *a4;
    if (*a4)
    {
      v24 = *(unsigned int *)(v23 + 16);
      v25 = *(_QWORD *)(v23 + 8);
      LODWORD(v23) = *(_DWORD *)(v23 + 4);
      v26 = (v24 >> 2) & 1;
    }
    else
    {
      v25 = 0;
      v26 = 1;
    }
    MEMORY[0x19AEB14D0](&v51, v17, v15 | (unint64_t)(v18 << 32), v21, v19 | (unint64_t)(v22 << 32), v25, v23 | (unint64_t)(v26 << 32));
    switch((char)v54)
    {
      case 0:
        v35 = v51;
        v51 = 0;
        v36 = *v10;
        *v10 = v35;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v27);
          else
            *(_DWORD *)v36 -= 2;
        }
        v43 = v52;
        v52 = 0;
        v44 = *(WTF::StringImpl **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v43;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v27);
          else
            *(_DWORD *)v44 -= 2;
        }
        v45 = v53;
        v53 = 0;
        v46 = *(WTF::StringImpl **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v45;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v27);
          else
            *(_DWORD *)v46 -= 2;
        }
        *(_WORD *)(a1 + 40) = v54;
        *(_BYTE *)(a1 + 49) = 1;
        WebKit::WebExtensionMatchPattern::stringWithScheme((WTF::StringImpl *)a1, MEMORY[0x1E0CBF6F0], &v50);
        v47 = v50;
        if (v50)
        {
          v48 = *((_DWORD *)v50 + 4);
          if (v48 >= 0x100)
            v49 = v48 >> 8;
          else
            v49 = WTF::StringImpl::hashSlowCase(v50);
          *(_DWORD *)(a1 + 52) = v49;
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v27);
          else
            *(_DWORD *)v47 -= 2;
        }
        else
        {
          *(_DWORD *)(a1 + 52) = 0;
        }
        break;
      case 2:
        if (a5)
        {
          v37 = (void *)MEMORY[0x1E0CB3940];
          if (*a2)
            v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v29 = &stru_1E351F1B8;
          objc_msgSend(v37, "stringWithFormat:", CFSTR("Scheme \"%@\" is invalid."), v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::error(1, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_36;
        }
        break;
      case 3:
      case 4:
        if (a5)
        {
          v28 = (void *)MEMORY[0x1E0CB3940];
          if (*a3)
            v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v29 = &stru_1E351F1B8;
          objc_msgSend(v28, "stringWithFormat:", CFSTR("Host \"%@\" is invalid."), v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::error(2, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_36;
        }
        break;
      case 5:
        if (a5)
        {
          v38 = (void *)MEMORY[0x1E0CB3940];
          if (*a4)
            v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          else
            v29 = &stru_1E351F1B8;
          objc_msgSend(v38, "stringWithFormat:", CFSTR("Path \"%@\" is invalid."), v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::error(3, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_36:
          *a5 = v31;

        }
        break;
      default:
        break;
    }
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v27);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v52;
    v52 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v27);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v51;
    v51 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v27);
      else
        *(_DWORD *)v41 -= 2;
    }
    return a1;
  }
LABEL_21:
  if (a5)
  {
    v32 = (void *)MEMORY[0x1E0CB3940];
    if (*a2)
      v33 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v33 = &stru_1E351F1B8;
    objc_msgSend(v32, "stringWithFormat:", CFSTR("Scheme \"%@\" is invalid."), v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::error(1, v34);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

void sub_197788CFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, a2);
  else
    *(_DWORD *)v15 -= 2;
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v14 + 32);
  *(_QWORD *)(v14 + 32) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *v16;
  *v16 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::isSupported(WebKit::WebExtensionMatchPattern *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  WTF *v12;

  if (!*((_BYTE *)this + 49))
    return 0;
  if (*((_BYTE *)this + 48))
    return 1;
  WebKit::WebExtensionMatchPattern::supportedSchemes(this);
  if (*((_BYTE *)this + 49) && !*((_BYTE *)this + 48))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_8:
    *(_DWORD *)v5 += 2;
LABEL_9:
  v2 = qword_1ECE73280;
  if (qword_1ECE73280)
  {
    v7 = *(_DWORD *)(qword_1ECE73280 - 8);
    v8 = *((_DWORD *)v5 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(v5);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      v12 = *(WTF **)(v2 + 8 * (v9 & v7));
      if (v12 != (WTF *)-1)
      {
        if (!v12)
        {
          v2 = 0;
          goto LABEL_10;
        }
        if ((WTF::equal(v12, v5, v4) & 1) != 0)
          break;
      }
      ++i;
    }
    v2 = 1;
  }
LABEL_10:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v2;
}

void sub_197788F8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMatchPattern::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49)
    && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
    && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52))
  {
    return WebCore::UserContentURLPattern::operator==();
  }
  return 0;
}

_BYTE *WebKit::WebExtensionMatchPattern::host@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if (this[49] && !this[48])
    return (_BYTE *)WebCore::UserContentURLPattern::originalHost((WebCore::UserContentURLPattern *)(this + 16));
  v2 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebExtensionMatchPattern::hostIsPublicSuffix(WebKit::WebExtensionMatchPattern *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    *(_DWORD *)v1 += 2;
    this = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::startsWith();
    if ((_DWORD)this)
    {
      this = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::substring((WTF::StringImpl *)v1);
      if (*(_DWORD *)v1 == 2)
        this = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::destroy((WTF::StringImpl *)v1, v2);
      else
        *(_DWORD *)v1 -= 2;
      v1 = v9;
    }
  }
  v3 = WebCore::PublicSuffixStore::singleton(this);
  if (v1)
  {
    v4 = *(_QWORD *)(v1 + 8);
    v5 = *(unsigned int *)(v1 + 4) | ((unint64_t)((*(_DWORD *)(v1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v7 = MEMORY[0x19AEB7BD8](v3, v4, v5);
  if (v1)
  {
    if (*(_DWORD *)v1 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v1, v6);
    else
      *(_DWORD *)v1 -= 2;
  }
  return v7;
}

void sub_19778912C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::stringWithScheme@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[2];

  if (!*((_BYTE *)this + 49))
  {
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v5 += 2;
    goto LABEL_6;
  }
  v4 = this;
  if (*((_BYTE *)this + 48))
  {
    this = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v9[1];
LABEL_6:
    *a3 = v5;
    return this;
  }
  v6 = *a2;
  if (*a2 && *((_DWORD *)v6 + 1) || (v6 = (WTF::StringImpl *)*((_QWORD *)this + 2)) != 0)
    *(_DWORD *)v6 += 2;
  WebKit::WebExtensionMatchPattern::host(this, v9);
  if (!*((_BYTE *)v4 + 49) || *((_BYTE *)v4 + 48))
  {
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (!*MEMORY[0x1E0CBF6F0])
      goto LABEL_16;
    goto LABEL_15;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
  if (v7)
LABEL_15:
    *(_DWORD *)v7 += 2;
LABEL_16:
  this = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)a3, (uint64_t)v6, "://", 4, (uint64_t)v9[0], v7);
  if (!*a3)
  {
    __break(0xC471u);
    return this;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
  this = v9[0];
  v9[0] = 0;
  if (!this)
  {
LABEL_24:
    if (!v6)
      return this;
    goto LABEL_27;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_24;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
  if (!v6)
    return this;
LABEL_27:
  if (*(_DWORD *)v6 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v8);
  *(_DWORD *)v6 -= 2;
  return this;
}

void sub_1977892F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::expandedStrings(WebKit::WebExtensionMatchPattern *this)
{
  WebKit::WebExtensionMatchPattern *v1;
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  id v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF::StringImpl *v14;
  __CFString *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 49))
    return (WTF::StringImpl *)MEMORY[0x1E0C9AA60];
  if (*((_BYTE *)this + 48))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
    v1 = (WebKit::WebExtensionMatchPattern *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionMatchPattern::supportedSchemes(v1);
    v2 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1ECE73280);
    v3 = v2;
    v5 = v4;
    if (qword_1ECE73280)
      v6 = qword_1ECE73280 + 8 * *(unsigned int *)(qword_1ECE73280 - 4);
    else
      v6 = 0;
    if ((WTF::StringImpl **)v6 == v2)
    {
LABEL_23:
      v13 = (void *)-[WebKit::WebExtensionMatchPattern copy](v1, "copy", v18);

      return (WTF::StringImpl *)v13;
    }
    else
    {
      while (1)
      {
        if ((MEMORY[0x19AEABBCC](*v3, "*", 1) & 1) != 0)
          goto LABEL_18;
        v7 = *v3;
        if (*v3)
          *(_DWORD *)v7 += 2;
        v18 = v7;
        v20[0] = (WTF::StringImpl *)"://*/*";
        v20[1] = (WTF::StringImpl *)7;
        WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v18, (uint64_t *)v20, &v19);
        result = v19;
        if (!v19)
          break;
        v9 = (id)WTF::StringImpl::operator NSString *();
        -[WebKit::WebExtensionMatchPattern addObject:](v1, "addObject:", v9);

        v11 = v19;
        v19 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v18;
        v18 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
LABEL_18:
        while (++v3 != v5)
        {
          if ((unint64_t)*v3 + 1 > 1)
            goto LABEL_22;
        }
        v3 = v5;
LABEL_22:
        if (v3 == (WTF::StringImpl **)v6)
          goto LABEL_23;
      }
      __break(0xC471u);
    }
  }
  else
  {
    WebKit::WebExtensionMatchPattern::stringWithScheme(this, MEMORY[0x1E0CBF6F0], v20);
    v14 = v20[0];
    if (v20[0])
      v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E351F1B8;
    v21[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v17);
      else
        *(_DWORD *)v14 -= 2;
    }
    return (WTF::StringImpl *)v16;
  }
  return result;
}

void sub_1977895C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;
  void *v11;
  WTF::StringImpl *v13;

  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v13);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionMatchPattern::matchesPattern(WebKit::WebExtensionMatchPattern const&,WTF::OptionSet<WebKit::WebExtensionMatchPattern::Options>)const::$_0::operator()(WebKit::WebExtensionMatchPattern *a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  WTF *v13;

  if (!*((_BYTE *)a1 + 48))
    return 0;
  if (*(_BYTE *)(a2 + 48))
    return 1;
  WebKit::WebExtensionMatchPattern::supportedSchemes(a1);
  if (*(_BYTE *)(a2 + 49) && !*(_BYTE *)(a2 + 48))
  {
    v6 = *(WTF::StringImpl **)(a2 + 16);
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_10:
    *(_DWORD *)v6 += 2;
LABEL_11:
  v3 = qword_1ECE73280;
  if (qword_1ECE73280)
  {
    v8 = *(_DWORD *)(qword_1ECE73280 - 8);
    v9 = *((_DWORD *)v6 + 4);
    if (v9 >= 0x100)
      v10 = v9 >> 8;
    else
      v10 = WTF::StringImpl::hashSlowCase(v6);
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v8;
      v13 = *(WTF **)(v3 + 8 * (v10 & v8));
      if (v13 != (WTF *)-1)
      {
        if (!v13)
        {
          v3 = 0;
          goto LABEL_12;
        }
        if ((WTF::equal(v13, v6, v5) & 1) != 0)
          break;
      }
      ++i;
    }
    v3 = 1;
  }
LABEL_12:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v3;
}

void sub_1977897A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionMatchPattern::schemeMatches(uint64_t a1, uint64_t a2, char a3)
{
  const WebCore::UserContentURLPattern *v4;
  WebCore::UserContentURLPattern *v5;
  _BOOL8 result;

  result = 1;
  if ((a3 & 1) == 0)
  {
    v4 = (const WebCore::UserContentURLPattern *)(a1 + 16);
    v5 = (WebCore::UserContentURLPattern *)(a2 + 16);
    if ((WebCore::UserContentURLPattern::matchesScheme((WebCore::UserContentURLPattern *)(a1 + 16), (const WebCore::UserContentURLPattern *)(a2 + 16)) & 1) == 0&& ((a3 & 4) == 0 || (WebCore::UserContentURLPattern::matchesScheme(v5, v4) & 1) == 0))
    {
      return 0;
    }
  }
  return result;
}

BOOL WebKit::WebExtensionMatchPattern::hostMatches(uint64_t a1, uint64_t a2, char a3)
{
  return (WebCore::UserContentURLPattern::matchesHost((WebCore::UserContentURLPattern *)(a1 + 16), (const WTF::String *)(a2 + 24)) & 1) != 0|| (a3 & 4) != 0&& (WebCore::UserContentURLPattern::matchesHost((WebCore::UserContentURLPattern *)(a2 + 16), (const WTF::String *)(a1 + 24)) & 1) != 0;
}

BOOL WebKit::WebExtensionMatchPattern::pathMatches(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 2) != 0
      || (WebCore::UserContentURLPattern::matchesPath((WebCore::UserContentURLPattern *)(a1 + 16), (const WTF::String *)(a2 + 32)) & 1) != 0|| (a3 & 4) != 0&& (WebCore::UserContentURLPattern::matchesPath((WebCore::UserContentURLPattern *)(a2 + 16), (const WTF::String *)(a1 + 32)) & 1) != 0;
}

WTF::StringImpl *WebKit::toStrings@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  WTF::StringImpl *result;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  *a2 = 0;
  if (*a1)
    v4 = *((_DWORD *)*a1 - 3);
  else
    v4 = 0;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a2, v4);
  result = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a1);
  v6 = (WTF::StringImpl **)result;
  v8 = v7;
  if (*a1)
    v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v9 = 0;
  if ((WTF::StringImpl *)v9 != result)
  {
    v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
    do
    {
      WebKit::WebExtensionMatchPattern::stringWithScheme(*v6, v10, &v14);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v14, v11, (uint64_t)&v13);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
      while (++v6 != v8)
      {
        if ((unint64_t)*v6 + 1 > 1)
          goto LABEL_17;
      }
      v6 = v8;
LABEL_17:
      ;
    }
    while (v6 != (WTF::StringImpl **)v9);
  }
  return result;
}

void sub_1977899FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::StringImpl ***v12;

  if (*v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::toPatterns(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  WTF::StringImpl **v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13[24];
  uint64_t v14;
  uint64_t v15;

  *a2 = 0;
  if (*a1)
    v4 = *((_DWORD *)*a1 - 3);
  else
    v4 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, v4);
  v5 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  v7 = v5;
  v9 = v8;
  if (*a1)
    v10 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v10 = 0;
  if ((WTF::StringImpl **)v10 != v5)
  {
    do
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v7, v6, &v14);
      v11 = v14;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      v15 = v11;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, &v15, (uint64_t)v13);
      v12 = v15;
      v15 = 0;
      if (v12)
        CFRelease(*(CFTypeRef *)(v12 + 8));
      CFRelease(*(CFTypeRef *)(v11 + 8));
      while (++v7 != v9)
      {
        if ((unint64_t)*v7 + 1 > 1)
          goto LABEL_14;
      }
      v7 = v9;
LABEL_14:
      ;
    }
    while (v7 != (WTF::StringImpl **)v10);
  }
}

void sub_197789B48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t **v14;

  if (*v14)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v14, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::toPatterns(WebKit *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit *v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = this;
  *a2 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, -[WebKit count](v4, "count"));
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v4;
  v6 = -[WebKit countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        WTF::dynamic_objc_cast<_WKWebExtensionMatchPattern>(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v10;
        if (v10)
        {
          v12 = objc_msgSend(v10, "_webExtensionMatchPattern");
          CFRetain(*(CFTypeRef *)(v12 + 8));
          v14 = v12;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, &v14, (uint64_t)v19);
          v13 = v14;
          v14 = 0;
          if (v13)
            CFRelease(*(CFTypeRef *)(v13 + 8));
        }

        ++v8;
      }
      while (v6 != v8);
      v6 = -[WebKit countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v6);
  }

}

void sub_197789D0C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t **v2;
  void *v3;
  void *v5;

  if (*v2)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v2, v5);

  _Unwind_Resume(a1);
}

void sub_197789E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(WTF::StringImpl **a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t result;

  v2 = qword_1ECE73288;
  if (qword_1ECE73288)
  {
    v3 = *(_DWORD *)(qword_1ECE73288 - 4);
    v4 = *(_DWORD *)(qword_1ECE73288 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  qword_1ECE73288 = (uint64_t)(v6 + 4);
  v6[2] = v5 - 1;
  v6[3] = v5;
  *v6 = 0;
  *(_DWORD *)(qword_1ECE73288 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (WTF::StringImpl **)(v2 + 16 * v8);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = qword_1ECE73288;
          if (qword_1ECE73288)
            v15 = *(_DWORD *)(qword_1ECE73288 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            CFRelease(*(CFTypeRef *)(v21 + 8));
            v22 = *(WTF::StringImpl **)v20;
            *(_QWORD *)v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v7);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *(_QWORD *)v20 = v23;
          v24 = v2 + 16 * v8;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v25;
          v26 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            CFRelease(*(CFTypeRef *)(v26 + 8));
          v27 = *v10;
          *v10 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v7);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v10 == a1)
            v9 = v20;
        }
        else
        {
          v12 = v2 + 16 * v8;
          v13 = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(*(CFTypeRef *)(v13 + 8));
            v11 = *v10;
          }
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
      }
      ++v8;
    }
    while (v8 != v3);
  }
  else
  {
    v9 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

void WebKit::WebExtensionMatchPattern::create<WTF::String const&>(WTF::StringImpl **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = API::Object::newObject(0x38uLL, 117);
  WebKit::WebExtensionMatchPattern::WebExtensionMatchPattern(v4, a1, 0);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 49))
    {
      *a2 = v4;
    }
    else
    {
      *a2 = 0;
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_19778A104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  size_t v6;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  _DWORD *v17;
  int v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  if (a4)
    v6 = a4 - 1;
  else
    v6 = 0;
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19778A3E8);
  }
  v11 = (_QWORD *)result;
  if (a2)
  {
    v12 = *(_DWORD *)(a2 + 4);
    if (a5)
      goto LABEL_7;
LABEL_56:
    v13 = 0;
    if (a6)
      goto LABEL_8;
LABEL_57:
    v14 = 0;
    goto LABEL_9;
  }
  v12 = 0;
  if (!a5)
    goto LABEL_56;
LABEL_7:
  v13 = *(_DWORD *)(a5 + 4);
  if (!a6)
    goto LABEL_57;
LABEL_8:
  v14 = a6[1];
LABEL_9:
  if ((v14 | v13) < 0)
    goto LABEL_40;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
    goto LABEL_40;
  v17 = 0;
  v15 = __OFADD__((_DWORD)v6, v16);
  v18 = v6 + v16;
  v19 = v15;
  if (v12 < 0 || (v19 & 1) != 0)
    goto LABEL_53;
  v20 = v12 + v18;
  if (__OFADD__(v12, v18))
    goto LABEL_40;
  if (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if (a5)
    {
      v22 = *(_DWORD *)(a5 + 16);
      if (!a6 || (v22 & 4) == 0)
      {
        v21 = v20;
        v23 = v20 == 0;
        if ((v22 & 4) != 0)
        {
LABEL_25:
          if (v23)
            goto LABEL_38;
          if ((v20 & 0x80000000) == 0)
          {
LABEL_27:
            result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
            v17 = v42;
            if (v42)
            {
              *v42 = 2;
              v17[1] = v20;
              *((_QWORD *)v17 + 1) = v17 + 5;
              v17[4] = 4;
              v40 = a2;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v40, (char *)v17 + 20);
              v24 = v40;
              if (v40)
                v24 = *(unsigned int *)(v40 + 4);
              v25 = (char *)v17 + v24 + 20;
              if ((_DWORD)v6)
              {
                if ((_DWORD)v6 == 1)
                  *v25 = *(_BYTE *)a3;
                else
                  memcpy((char *)v17 + v24 + 20, a3, v6);
              }
              v41 = a5;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v41, &v25[v6]);
              v26 = v41;
              if (v41)
                v26 = *(unsigned int *)(v41 + 4);
              v42 = a6;
              result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v42, &v25[v6 + v26]);
            }
            goto LABEL_53;
          }
LABEL_40:
          v17 = 0;
          goto LABEL_53;
        }
LABEL_37:
        if (!v23)
          goto LABEL_39;
LABEL_38:
        v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_53;
      }
    }
    else if (!a6)
    {
      if (!v20)
        goto LABEL_38;
      v21 = v20;
      if ((v20 & 0x80000000) != 0)
        goto LABEL_40;
      goto LABEL_27;
    }
    v21 = v20;
    v23 = v20 == 0;
    if ((a6[4] & 4) != 0)
      goto LABEL_25;
    goto LABEL_37;
  }
  if (!v20)
    goto LABEL_38;
  v21 = v20;
LABEL_39:
  if (v20 > 0x7FFFFFEF)
    goto LABEL_40;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20));
  v17 = v42;
  if (v42)
  {
    *v42 = 2;
    v17[1] = v20;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v40 = a2;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v40, (char *)v17 + 20);
    v27 = v40;
    if (v40)
      v27 = *(unsigned int *)(v40 + 4);
    v28 = (char *)v17 + 2 * v27 + 20;
    v29 = &v28[2 * v6];
    if ((v6 & 0xFFFFFFC0) != 0)
    {
      v30 = &v28[2 * (v6 & 0xFFFFFFC0)];
      v31 = 0uLL;
      do
      {
        v43.val[0] = (int8x16_t)*a3;
        v32 = *((int8x16_t *)a3 + 1);
        v44.val[0] = (int8x16_t)a3[2];
        v33 = a3[3];
        a3 += 4;
        v34 = v33;
        v44.val[1] = 0uLL;
        v45.val[0] = v32;
        v43.val[1] = 0uLL;
        v35 = v28;
        vst2q_s8(v35, v43);
        v35 += 32;
        v45.val[1] = 0uLL;
        vst2q_s8(v35, v45);
        v36 = v28 + 64;
        vst2q_s8(v36, v44);
        v37 = v28 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
        v28 += 128;
      }
      while (v28 != v30);
      v28 = v30;
    }
    while (v28 != v29)
    {
      v38 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v28 = v38;
      v28 += 2;
    }
    v41 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v41, v29);
    v39 = v41;
    if (v41)
      v39 = *(unsigned int *)(v41 + 4);
    v42 = a6;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v42, &v29[2 * v39]);
  }
LABEL_53:
  *v11 = v17;
  return result;
}

void sub_19778A424(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionMenuItem::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 == a2)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v3 = v4 - 16;
    else
      v3 = 0;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 16;
    else
      v5 = 0;
  }
  if (v3 == v5)
    return WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), a3);
  else
    return 0;
}

WTF::StringImpl *WebKit::WebExtensionMenuItem::removeAmpersands@<X0>(WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  unint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  char v37;
  WTF::StringImpl *v38;

  v8 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  while (1)
  {
    v9 = *this;
    if (*this)
      v9 = (WTF::StringImpl *)*((unsigned int *)v9 + 1);
    if (v8 >= (unint64_t)v9)
      break;
    v10 = WTF::String::find((uint64_t)this, 0x26u, v8, a4, a5, a6);
    if (v10 == -1)
    {
      v26 = *this;
      if (v26)
      {
        if ((_DWORD)v8 || (*((_DWORD *)v26 + 1) & 0x80000000) != 0)
        {
          WTF::StringImpl::substring(v26);
          v26 = v38;
        }
        else
        {
          *(_DWORD *)v26 += 2;
        }
        v33 = v26;
        if (!v36 && !v35)
        {
LABEL_52:
          WTF::String::operator=(&v34, (WTF::StringImpl *)&v33);
          v26 = v33;
          if (v33)
            v27 = *((_DWORD *)v33 + 1);
          else
            v27 = 0;
          v36 = v27;
LABEL_55:
          v33 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, a2);
            else
              *(_DWORD *)v26 -= 2;
          }
          break;
        }
        if (v26)
        {
          v32 = *((_QWORD *)v26 + 1);
          v31 = *((unsigned int *)v26 + 1) | ((unint64_t)((*((_DWORD *)v26 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v32 = 0;
          v31 = 0x100000000;
        }
      }
      else
      {
        v33 = 0;
        v31 = 0x100000000;
        if (v36)
        {
          v32 = 0;
        }
        else
        {
          v32 = 0;
          if (!v35)
            goto LABEL_52;
        }
      }
      WTF::StringBuilder::append((uint64_t)&v34, v32, v31);
      goto LABEL_55;
    }
    v11 = v10;
    if (v10 > v8)
    {
      v12 = *this;
      if (*this)
      {
        if ((_DWORD)v8 || *((_DWORD *)v12 + 1) > v11)
        {
          WTF::StringImpl::substring(v12);
          v12 = v38;
        }
        else
        {
          *(_DWORD *)v12 += 2;
        }
        v33 = v12;
        if (!v36 && !v35)
        {
LABEL_13:
          WTF::String::operator=(&v34, (WTF::StringImpl *)&v33);
          v13 = v33;
          if (v33)
            v14 = *((_DWORD *)v33 + 1);
          else
            v14 = 0;
          v36 = v14;
LABEL_16:
          v33 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
          goto LABEL_20;
        }
        if (v12)
        {
          v24 = *((_QWORD *)v12 + 1);
          v25 = *((unsigned int *)v12 + 1) | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v24 = 0;
          v25 = 0x100000000;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
        v25 = 0x100000000;
        if (!v36 && !v35)
          goto LABEL_13;
      }
      WTF::StringBuilder::append((uint64_t)&v34, v24, v25);
      v13 = v33;
      goto LABEL_16;
    }
LABEL_20:
    v15 = *this;
    if (*this
      && (v16 = *((_DWORD *)v15 + 1), v11 < v16 - 1)
      && (v17 = v11 + 1, v16 > (int)v11 + 1)
      && ((v18 = *((_QWORD *)v15 + 1), (*((_BYTE *)v15 + 16) & 4) == 0)
        ? (v19 = *(unsigned __int16 *)(v18 + 2 * v17))
        : (v19 = *(unsigned __int8 *)(v18 + v17)),
          v19 == 38))
    {
      LOBYTE(v38) = 38;
      if (!v35 || (v20 = v36, v36 >= *((_DWORD *)v35 + 1)) || v34)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v21 = *((_DWORD *)v35 + 4);
        v22 = *((_QWORD *)v35 + 1);
        ++v36;
        if ((v21 & 4) != 0)
          *(_BYTE *)(v22 + v20) = 38;
        else
          *(_WORD *)(v22 + 2 * v20) = 38;
      }
      v23 = 2;
    }
    else
    {
      v23 = 1;
    }
    v8 = v23 + v11;
  }
  v28 = v34;
  if (v34
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v34),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v34),
        (v28 = v34) != 0))
  {
    *(_DWORD *)v28 += 2;
  }
  *a3 = v28;
  v29 = v35;
  v35 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebExtensionMenuItem::matches(WebKit::WebExtensionMenuItem *this, const WebKit::WebExtensionMenuItemContextParameters *a2)
{
  int v2;
  WTF::URL *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE **v9;
  _BYTE **v10;
  _BYTE **v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE **v18;
  _BYTE **v19;
  _BYTE **v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE **v29;
  _BYTE **v30;
  _BYTE **v31;
  uint64_t v32;

  v2 = *(unsigned __int16 *)a2;
  if (((unsigned __int16)v2 & *((_WORD *)this + 44)) != 0)
  {
    v5 = (const WebKit::WebExtensionMenuItemContextParameters *)((char *)a2 + 40);
    if (*((_QWORD *)a2 + 5))
    {
      v6 = (_QWORD *)((char *)this + 72);
      v7 = *((_QWORD *)this + 9);
      if (v7)
      {
        if (*(_DWORD *)(v7 - 12))
        {
          v8 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 9);
          v9 = (_BYTE **)v8;
          v11 = v10;
          if (*v6)
            v12 = *v6 + 8 * *(unsigned int *)(*v6 - 4);
          else
            v12 = 0;
          if ((_QWORD *)v12 == v8)
            return 0;
          while ((WebKit::WebExtensionMatchPattern::matchesURL(*v9, v5, 0) & 1) == 0)
          {
            while (++v9 != v11)
            {
              if ((unint64_t)(*v9 + 1) > 1)
                goto LABEL_14;
            }
            v9 = v11;
LABEL_14:
            if (v9 == (_BYTE **)v12)
              return 0;
          }
          v2 = *(unsigned __int16 *)a2;
        }
      }
    }
    v13 = 257;
    do
    {
      v14 = v13 & -v13;
      if ((v14 & v2) != 0 && ((unsigned __int16)v14 & *((_WORD *)this + 44)) != 0)
        return 1;
      v13 &= v13 - 1;
    }
    while ((_WORD)v13);
    if ((v2 & 0x20) == 0)
      goto LABEL_38;
    if ((*((_WORD *)this + 44) & 0x20) == 0)
      goto LABEL_38;
    if (!*((_QWORD *)a2 + 11))
      goto LABEL_38;
    v15 = (_QWORD *)((char *)this + 80);
    v16 = *((_QWORD *)this + 10);
    if (!v16 || !*(_DWORD *)(v16 - 12))
      goto LABEL_38;
    v17 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 10);
    v18 = (_BYTE **)v17;
    v20 = v19;
    if (*v15)
      v21 = *v15 + 8 * *(unsigned int *)(*v15 - 4);
    else
      v21 = 0;
    if ((_QWORD *)v21 != v17)
    {
      while ((WebKit::WebExtensionMatchPattern::matchesURL(*v18, (const WebKit::WebExtensionMenuItemContextParameters *)((char *)a2 + 88), 0) & 1) == 0)
      {
        while (++v18 != v20)
        {
          if ((unint64_t)(*v18 + 1) > 1)
            goto LABEL_35;
        }
        v18 = v20;
LABEL_35:
        result = 0;
        if (v18 == (_BYTE **)v21)
          return result;
      }
      v2 = *(unsigned __int16 *)a2;
LABEL_38:
      v23 = 530;
      while (1)
      {
        v24 = v23 & -v23;
        if ((v24 & v2) != 0 && ((unsigned __int16)v24 & *((_WORD *)this + 44)) != 0)
          break;
        v23 &= v23 - 1;
        if (!(_WORD)v23)
          goto LABEL_42;
      }
      if (*((_QWORD *)a2 + 16))
      {
        v26 = (_QWORD *)((char *)this + 80);
        v27 = *((_QWORD *)this + 10);
        if (v27)
        {
          if (*(_DWORD *)(v27 - 12))
          {
            v28 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)this + 10);
            v29 = (_BYTE **)v28;
            v31 = v30;
            if (*v26)
              v32 = *v26 + 8 * *(unsigned int *)(*v26 - 4);
            else
              v32 = 0;
            if ((_QWORD *)v32 == v28)
              return 0;
            while ((WebKit::WebExtensionMatchPattern::matchesURL(*v29, (const WebKit::WebExtensionMenuItemContextParameters *)((char *)a2 + 128), 0) & 1) == 0)
            {
              while (++v29 != v31)
              {
                if ((unint64_t)(*v29 + 1) > 1)
                  goto LABEL_63;
              }
              v29 = v31;
LABEL_63:
              result = 0;
              if (v29 == (_BYTE **)v32)
                return result;
            }
            LOWORD(v2) = *(_WORD *)a2;
          }
        }
      }
LABEL_42:
      if (((v2 & 0x80) == 0
         || (*((_WORD *)this + 44) & 0x80) == 0
         || (v25 = *((_QWORD *)a2 + 21)) != 0 && *(_DWORD *)(v25 + 4))
        && ((v2 & 4) == 0 || (*((_WORD *)this + 44) & 4) == 0 || *((_BYTE *)a2 + 176)))
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebExtensionMenuItem::toggleCheckedIfNeeded(WebKit::WebExtensionMenuItem *this, const WebKit::WebExtensionMenuItemContextParameters *a2, const WTF::StringImpl *a3)
{
  char v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;

  v4 = *((_BYTE *)this + 64);
  v5 = *((unsigned __int8 *)this + 24);
  if (v5 != 2)
  {
    if (v5 == 1)
      *((_BYTE *)this + 64) = v4 & 0xFE | ((v4 & 1) == 0);
    return v4 & 1;
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    return v4 & 1;
  *((_BYTE *)this + 64) = v4 | 1;
  v7 = *((_QWORD *)this + 12);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (uint64_t *)(v8 + 104);
  }
  else
  {
    v10 = *((_QWORD *)this + 2);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v10 = v11 - 16;
      else
        v10 = 0;
    }
    v9 = (uint64_t *)(v10 + 672);
  }
  if (!*((_DWORD *)v9 + 3))
    return v4 & 1;
  v12 = 0;
  while (1)
  {
    result = WebKit::WebExtensionMenuItem::operator==((uint64_t)this, *(_QWORD *)(*v9 + 8 * v12), a3);
    if ((result & 1) != 0)
      break;
    if (++v12 >= (unint64_t)*((unsigned int *)v9 + 3))
      return v4 & 1;
  }
  if (!v12)
  {
LABEL_25:
    for (i = v12 + 1; i < *((unsigned int *)v9 + 3); ++i)
    {
      v19 = *v9;
      if (WebKit::WebExtensionMenuItem::matches(*(WebKit::WebExtensionMenuItem **)(*v9 + 8 * i), a2))
      {
        v20 = *(_QWORD *)(v19 + 8 * i);
        if (*(_BYTE *)(v20 + 24) != 2)
          return v4 & 1;
        *(_BYTE *)(v20 + 64) &= ~1u;
      }
    }
    return v4 & 1;
  }
  v14 = v12 - 1;
  while (v14 < *((unsigned int *)v9 + 3))
  {
    v15 = *v9;
    result = WebKit::WebExtensionMenuItem::matches(*(WebKit::WebExtensionMenuItem **)(*v9 + 8 * v14), a2);
    if ((_DWORD)result)
    {
      v16 = *(_QWORD *)(v15 + 8 * v14);
      if (*(_BYTE *)(v16 + 24) != 2)
        goto LABEL_25;
      *(_BYTE *)(v16 + 64) &= ~1u;
    }
    v17 = v14-- + 1;
    if (v17 <= 1)
      goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::WebExtensionMenuItem::addSubmenuItem(WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionMenuItem *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  if (this)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  else
  {
    v4 = 0;
  }
  result = (unsigned int *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v9 = *((unsigned int *)this + 29);
  if ((_DWORD)v9 == *((_DWORD *)this + 28))
    return (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMenuItem&>((uint64_t)this + 104, a2);
  v10 = *((_QWORD *)this + 13);
  ++*(_DWORD *)a2;
  *(_QWORD *)(v10 + 8 * v9) = a2;
  *((_DWORD *)this + 29) = v9 + 1;
  return result;
}

unsigned int *WebKit::WebExtensionMenuItem::removeSubmenuItem(WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionMenuItem *a2, const WTF::StringImpl *a3)
{
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  result = (unsigned int *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 13);
  v9 = *((unsigned int *)this + 29);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 13);
    v13 = &v8[v9];
    v14 = v13;
    do
    {
      result = (unsigned int *)WebKit::WebExtensionMenuItem::operator==((uint64_t)a2, *v8, a3);
      if ((_DWORD)result)
      {
        v16 = v8;
        if (v14 != (uint64_t *)(*((_QWORD *)this + 13) + 8 * *((unsigned int *)this + 29)))
        {
          if (v8 == v13)
          {
            v16 = v14;
          }
          else
          {
            memmove(v14, v13, v12 - (_QWORD)v13);
            v16 = (uint64_t *)((char *)v14 + v12 - (_QWORD)v13);
          }
        }
        result = (unsigned int *)*v8;
        *v8 = 0;
        v13 = v8 + 1;
        if (result)
          result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)result, v15);
        ++v11;
        v14 = v16;
      }
      ++v8;
      v12 += 8;
    }
    while (v8 < v10);
    v8 = (uint64_t *)*((_QWORD *)this + 13);
    v17 = *((unsigned int *)this + 29);
    LODWORD(v9) = *((_DWORD *)this + 29);
    v10 = v14;
  }
  else
  {
    v17 = 0;
    v11 = 0;
    v13 = &v8[v9];
  }
  v18 = &v8[v17];
  if (v13 != v18)
  {
    result = (unsigned int *)memmove(v10, v13, (char *)v18 - (char *)v13);
    LODWORD(v9) = *((_DWORD *)this + 29);
  }
  *((_DWORD *)this + 29) = v9 - v11;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMenuItem&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  ++*a2;
  *(_QWORD *)(v9 + 8 * v8) = a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionMenuItem::WebExtensionMenuItem(WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionContext *a2, const WebKit::WebExtensionMenuItemParameters *a3)
{
  unsigned int **v6;
  const WTF::String *v7;
  double v8;
  double v9;
  float v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  _DWORD *v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  char v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  int v25;
  BOOL v26;
  char v27;
  char *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WebKit::WebExtensionMenuItem *v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v6 = (unsigned int **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v11 = *v6;
  if (*v6)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 2) = v11;
  if (*((_BYTE *)a3 + 25))
    v13 = *((_BYTE *)a3 + 24);
  else
    v13 = 0;
  *((_BYTE *)this + 24) = v13;
  v14 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v14 += 2;
  *((_QWORD *)this + 4) = v14;
  WebKit::WebExtensionMenuItem::removeAmpersands((WTF::StringImpl **)a3 + 4, v7, (WTF::StringImpl **)this + 5, v8, v9, v10);
  v15 = WebKit::WebExtensionContext::command(a2, (const WTF::StringImpl **)a3 + 5);
  v17 = v15;
  if (v15)
    CFRetain(*(CFTypeRef *)(v15 + 8));
  if (*((_BYTE *)a3 + 57))
    v18 = *((_BYTE *)a3 + 56) == 0;
  else
    v18 = 1;
  v19 = !v18;
  v20 = *((_BYTE *)this + 64) & 0xFE | v19;
  *((_BYTE *)this + 64) = v20;
  if (*((_BYTE *)a3 + 58))
    v21 = 1;
  else
    v21 = *((_BYTE *)a3 + 59) == 0;
  if (v21)
    v22 = 2;
  else
    v22 = 0;
  v23 = v22 | v20 & 0xFD;
  *((_BYTE *)this + 64) = v23;
  v24 = *((unsigned __int8 *)a3 + 61);
  v25 = *((unsigned __int8 *)a3 + 60);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 6) = v17;
  *((_QWORD *)this + 7) = 0;
  if (v25)
    v26 = 1;
  else
    v26 = v24 == 0;
  if (v26)
    v27 = 4;
  else
    v27 = 0;
  *((_BYTE *)this + 64) = v27 | v23 & 0xFB;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 0;
  v28 = (char *)this + 96;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 14) = 0;
  if (*((_BYTE *)a3 + 16))
  {
    v29 = (WTF::StringImpl **)((char *)a3 + 8);
    v30 = *((_QWORD *)this + 2);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
        v30 = v31 - 16;
      else
        v30 = 0;
    }
    if (*v29)
    {
      if (*((_DWORD *)*v29 + 1))
      {
        v32 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v30 + 664), v29, v16);
        v33 = v32;
        if (v32)
        {
          ++*(_DWORD *)v32;
          WebKit::WebExtensionMenuItem::addSubmenuItem(v32, this);
          WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v33, v34);
        }
      }
    }
  }
  if (!*((_BYTE *)a3 + 114) || (v35 = *((_WORD *)a3 + 56)) == 0)
  {
    if (*(_QWORD *)v28 && (v36 = *(_QWORD *)(*(_QWORD *)v28 + 8)) != 0)
      v35 = *(_WORD *)(v36 + 88);
    else
      v35 = 64;
  }
  *((_WORD *)this + 44) = v35;
  v37 = *((_QWORD *)a3 + 6);
  if (v37 && *(_DWORD *)(v37 + 4))
  {
    v38 = (void *)WTF::StringImpl::operator NSString *();
    WebKit::parseJSON(v38, 0, 0);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(v52, v39);
    v40 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v52[0];
    v52[0] = 0;
    if (v40)
      CFRelease(v40);

  }
  if (*((_BYTE *)a3 + 80))
  {
    v41 = *((unsigned int *)a3 + 19);
    if ((_DWORD)v41)
    {
      v42 = (WTF::StringImpl **)*((_QWORD *)a3 + 8);
      v43 = 8 * v41;
      do
      {
        WebKit::WebExtensionMatchPattern::getOrCreate(v42, v16, &v54);
        if (v54)
        {
          v53 = v54;
          v54 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 9, &v53, (uint64_t)v52);
          v44 = v53;
          v53 = 0;
          if (v44)
            CFRelease(*(CFTypeRef *)(v44 + 8));
          v45 = v54;
          v54 = 0;
          if (v45)
            CFRelease(*(CFTypeRef *)(v45 + 8));
        }
        ++v42;
        v43 -= 8;
      }
      while (v43);
    }
  }
  if (*((_BYTE *)a3 + 104))
  {
    v46 = *((unsigned int *)a3 + 25);
    if ((_DWORD)v46)
    {
      v47 = (WTF::StringImpl **)*((_QWORD *)a3 + 11);
      v48 = 8 * v46;
      do
      {
        WebKit::WebExtensionMatchPattern::getOrCreate(v47, v16, &v54);
        if (v54)
        {
          v53 = v54;
          v54 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 10, &v53, (uint64_t)v52);
          v49 = v53;
          v53 = 0;
          if (v49)
            CFRelease(*(CFTypeRef *)(v49 + 8));
          v50 = v54;
          v54 = 0;
          if (v50)
            CFRelease(*(CFTypeRef *)(v50 + 8));
        }
        ++v47;
        v48 -= 8;
      }
      while (v48);
    }
  }
  return this;
}

void sub_19778B22C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  _QWORD *v3;
  WTF::StringImpl **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int **v8;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
  v11 = *v8;
  *v8 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  if (*v6)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v6, v10);
  if (*v5)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(*v5, v10);
  v14 = (const void *)v3[7];
  v3[7] = 0;
  if (v14)
    CFRelease(v14);
  v15 = v3[6];
  v3[6] = 0;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  v16 = *v4;
  *v4 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)v3[4];
  v3[4] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (unsigned int *)v3[2];
  v3[2] = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v10);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionMenuItem::minimalParameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;
  _DWORD *v7;
  char v8;

  v2 = *(_DWORD **)(this + 32);
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  v3 = *(_QWORD *)(this + 96);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *(_DWORD **)(v4 + 32);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a2 + 8) = v5;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  *(_BYTE *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(this + 24);
  *(_BYTE *)(a2 + 25) = 1;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v7 += 6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v7;
  v8 = *(_BYTE *)(this + 64);
  *(_BYTE *)(a2 + 56) = v8 & 1;
  *(_BYTE *)(a2 + 57) = 1;
  *(_BYTE *)(a2 + 58) = (v8 & 2) != 0;
  *(_BYTE *)(a2 + 59) = 1;
  *(_BYTE *)(a2 + 60) = (v8 & 4) != 0;
  *(_BYTE *)(a2 + 61) = 1;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_WORD *)(a2 + 112) = *(_WORD *)(this + 88);
  *(_BYTE *)(a2 + 114) = 1;
  return this;
}

void WebKit::WebExtensionMenuItem::update(WebKit::WebExtensionMenuItem *this, const WebKit::WebExtensionMenuItemParameters *a2, const WTF::StringImpl *a3, double a4, double a5, float a6)
{
  WebKit::WebExtensionMenuItem *v6;
  const WebKit::WebExtensionMenuItemParameters *v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WebKit::WebExtensionMenuItem *v13;
  uint64_t v14;
  WebKit::WebExtensionMenuItem *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;
  WebKit::WebExtensionContext *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _Unwind_Exception *v47;
  WTF::StringImpl *v48[3];
  uint64_t v49;
  uint64_t v50;

  v7 = a2;
  if (*((_BYTE *)a2 + 25))
    *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    WTF::String::operator=((WTF::StringImpl **)this + 4, a2);
  if (*((_BYTE *)v7 + 16))
  {
    a2 = (const WebKit::WebExtensionMenuItemParameters *)((char *)v7 + 8);
    v9 = *((_QWORD *)this + 2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v9 = v10 - 16;
      else
        v9 = 0;
    }
    if (*(_QWORD *)a2)
    {
      if (*(_DWORD *)(*(_QWORD *)a2 + 4))
      {
        v11 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v9 + 664), (WTF::StringImpl **)a2, a3);
        if (v11)
        {
          v6 = v11;
          ++*(_DWORD *)v11;
          v12 = *((_QWORD *)this + 12);
          if (v12)
          {
            v13 = *(WebKit::WebExtensionMenuItem **)(v12 + 8);
            if (v13 == v6)
            {
LABEL_19:
              WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v6, a2);
              goto LABEL_23;
            }
            if (v13)
              WebKit::WebExtensionMenuItem::removeSubmenuItem(v13, this, a3);
          }
          WebKit::WebExtensionMenuItem::addSubmenuItem(v6, this);
          goto LABEL_19;
        }
      }
    }
    v14 = *((_QWORD *)this + 12);
    if (v14)
    {
      v15 = *(WebKit::WebExtensionMenuItem **)(v14 + 8);
      if (v15)
        WebKit::WebExtensionMenuItem::removeSubmenuItem(v15, this, a3);
    }
  }
LABEL_23:
  v16 = *((_QWORD *)v7 + 4);
  if (v16)
  {
    if (*(_DWORD *)(v16 + 4))
    {
      WebKit::WebExtensionMenuItem::removeAmpersands((WTF::StringImpl **)v7 + 4, a2, v48, a4, a5, a6);
      v18 = v48[0];
      v48[0] = 0;
      v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v18;
      if (v19)
      {
        v20 = *(_DWORD *)v19 - 2;
        if (*(_DWORD *)v19 != 2)
          goto LABEL_29;
        WTF::StringImpl::destroy(v19, v17);
        v19 = v48[0];
        v48[0] = 0;
        if (!v19)
          goto LABEL_30;
        v20 = *(_DWORD *)v19 - 2;
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v21);
        else
LABEL_29:
          *(_DWORD *)v19 = v20;
      }
    }
  }
LABEL_30:
  v22 = (const WTF::StringImpl **)((char *)v7 + 40);
  if (*((_QWORD *)v7 + 5))
  {
    v23 = *((_QWORD *)this + 2);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
        v25 = (WebKit::WebExtensionContext *)(v24 - 16);
      else
        v25 = 0;
    }
    else
    {
      v25 = 0;
    }
    v26 = WebKit::WebExtensionContext::command(v25, v22);
    v6 = (WebKit::WebExtensionMenuItem *)v26;
    if (v26)
      CFRetain(*(CFTypeRef *)(v26 + 8));
    v27 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v27)
      CFRelease(*(CFTypeRef *)(v27 + 8));
  }
  if (*((_QWORD *)v7 + 6))
  {
    v28 = (void *)WTF::StringImpl::operator NSString *();
    WebKit::parseJSON(v28, 0, 0);
    v6 = (WebKit::WebExtensionMenuItem *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(v48, v6);
    v29 = (const void *)*((_QWORD *)this + 7);
    *((WTF::StringImpl **)this + 7) = v48[0];
    v48[0] = 0;
    if (v29)
      CFRelease(v29);

  }
  if (*((_BYTE *)v7 + 57))
    *((_BYTE *)this + 64) = *((_BYTE *)this + 64) & 0xFE | *((_BYTE *)v7 + 56);
  if (*((_BYTE *)v7 + 59))
    *((_BYTE *)this + 64) = *((_BYTE *)this + 64) & 0xFD | (2 * *((_BYTE *)v7 + 58));
  if (*((_BYTE *)v7 + 61))
    *((_BYTE *)this + 64) = *((_BYTE *)this + 64) & 0xFB | (4 * *((_BYTE *)v7 + 60));
  if (*((_BYTE *)v7 + 114))
  {
    v30 = *((_WORD *)v7 + 56);
    if (!v30)
    {
      v31 = *((_QWORD *)this + 12);
      if (v31 && (v32 = *(_QWORD *)(v31 + 8)) != 0)
        v30 = *(_WORD *)(v32 + 88);
      else
        v30 = 64;
    }
    *((_WORD *)this + 44) = v30;
  }
  if (*((_BYTE *)v7 + 80))
  {
    v6 = (WebKit::WebExtensionMenuItem *)((char *)this + 72);
    v33 = (uint64_t *)*((_QWORD *)this + 9);
    if (v33)
    {
      *(_QWORD *)v6 = 0;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v33, v22);
      if (!*((_BYTE *)v7 + 80))
        goto LABEL_81;
    }
    v34 = *((unsigned int *)v7 + 19);
    if ((_DWORD)v34)
    {
      v35 = (WTF::StringImpl **)*((_QWORD *)v7 + 8);
      v36 = 8 * v34;
      do
      {
        WebKit::WebExtensionMatchPattern::getOrCreate(v35, a3, &v50);
        if (v50)
        {
          v49 = v50;
          v50 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)this + 9, &v49, (uint64_t)v48);
          v37 = v49;
          v49 = 0;
          if (v37)
            CFRelease(*(CFTypeRef *)(v37 + 8));
          v38 = v50;
          v50 = 0;
          if (v38)
            CFRelease(*(CFTypeRef *)(v38 + 8));
        }
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
  }
  if (!*((_BYTE *)v7 + 104))
    return;
  v41 = (uint64_t *)*((_QWORD *)this + 10);
  v40 = (uint64_t *)((char *)this + 80);
  v39 = v41;
  if (v41)
  {
    *v40 = 0;
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v39, v22);
    if (!*((_BYTE *)v7 + 104))
    {
LABEL_81:
      v47 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

      _Unwind_Resume(v47);
    }
  }
  v42 = *((unsigned int *)v7 + 25);
  if ((_DWORD)v42)
  {
    v43 = (WTF::StringImpl **)*((_QWORD *)v7 + 11);
    v44 = 8 * v42;
    do
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v43, a3, &v50);
      if (v50)
      {
        v49 = v50;
        v50 = 0;
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(v40, &v49, (uint64_t)v48);
        v45 = v49;
        v49 = 0;
        if (v45)
          CFRelease(*(CFTypeRef *)(v45 + 8));
        v46 = v50;
        v50 = 0;
        if (v46)
          CFRelease(*(CFTypeRef *)(v46 + 8));
      }
      ++v43;
      v44 -= 8;
    }
    while (v44);
  }
}

id WebKit::WebExtensionMenuItem::matchingPlatformMenuItems(uint64_t a1, __int128 *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  WebKit::WebExtensionMenuItem **v8;
  uint64_t v9;
  WTF *v10;
  const WTF::String *v11;
  WebKit::WebExtensionMenuItem *v12;
  void *v13;
  uint64_t v14;
  void *v16;
  __CFString *v17;
  void *v18;
  WTF::StringImpl *v19;
  void *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  WTF::StringImpl *v27;
  __int128 v28;
  WTF::StringImpl *v29;
  char v30;
  char *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  WTF::StringImpl *v37;
  void *v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  NSMutableArray *v43;
  objc_object *v44;
  void *v45;
  CFTypeRef v46;
  void *aBlock;
  __CFString *v49;
  void *v50;
  WebCore *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  void *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  unint64_t v59;
  CFTypeRef cf;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  WTF::StringImpl *v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v6 = v5;
  cf = v5;
  if (v5)
    CFRetain(v5);

  v7 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v7)
  {
    v52 = 0;
    v59 = 0;
    v8 = *(WebKit::WebExtensionMenuItem ***)a1;
    v57 = a3 - 1;
    v51 = (WebCore *)((char *)a2 + 168);
    v9 = 8 * v7;
    while (1)
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v10 = (WTF *)objc_claimAutoreleasedReturnValue();
      if (v57 >= v59)
      {
        if (WebKit::WebExtensionMenuItem::matches(*v8, (const WebKit::WebExtensionMenuItemContextParameters *)a2))break;
      }
      v13 = 0;
LABEL_119:
      v43 = v13;
      WTF::addUnlessNil(v10, v43, v44);

      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_125;
    }
    v12 = *v8;
    if (*((_BYTE *)*v8 + 24) != 2)
    {
      v52 = 0;
      goto LABEL_16;
    }
    if (v52)
    {
      if ((*((_BYTE *)v12 + 64) & 1) != 0)
        goto LABEL_15;
    }
    else if ((*((_BYTE *)v12 + 64) & 1) != 0)
    {
LABEL_15:
      v52 = 1;
LABEL_16:
      if (*(_QWORD *)v51)
      {
        WebCore::truncatedStringForMenuItem(v51, v11);
      }
      else
      {
        v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v19 += 2;
        v67 = v19;
      }
      if (*((_QWORD *)v12 + 5))
      {
        WTF::StringImpl::replace();
        v56 = (WTF::StringImpl *)v68;
      }
      else
      {
        v56 = 0;
      }
      WebKit::WebExtensionMenuItem::matchingPlatformMenuItems((char *)v12 + 104, a2, 0);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((_BYTE *)v12 + 24) == 3)
      {
        v13 = 0;
LABEL_110:

        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v41);
          else
            *(_DWORD *)v56 -= 2;
        }
        v42 = v67;
        v67 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
        ++v59;
        goto LABEL_119;
      }
      if (*((_DWORD *)v12 + 29) && (~*((unsigned __int8 *)v12 + 64) & 6) == 0)
      {
        v16 = (void *)MEMORY[0x1E0CEA740];
        if (v56)
          v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        WebKit::WebExtensionMenuItem::icon(v12, *(CGSize *)&v14);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "menuWithTitle:image:identifier:options:children:", v17, v18, 0, 0, v55);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_110;
      }
      v20 = (void *)MEMORY[0x1E0CEA2A8];
      if (v56)
        v49 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v49 = &stru_1E351F1B8;
      WebKit::WebExtensionMenuItem::icon(v12, *(CGSize *)&v14);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      ++*(_DWORD *)v12;
      v21 = a2[1];
      v68 = *a2;
      v69 = v21;
      v70 = *((_BYTE *)a2 + 32);
      v22 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
      if (v22)
        *(_DWORD *)v22 += 2;
      v23 = a2[4];
      v65 = a2[3];
      v66 = v23;
      v24 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
      if (v24)
        *(_DWORD *)v24 += 2;
      v53 = v24;
      v54 = v22;
      v25 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
      if (v25)
        *(_DWORD *)v25 += 2;
      v26 = a2[7];
      v63 = a2[6];
      v64 = v26;
      v27 = (WTF::StringImpl *)*((_QWORD *)a2 + 16);
      if (v27)
        *(_DWORD *)v27 += 2;
      v28 = *(__int128 *)((char *)a2 + 152);
      v61 = *(__int128 *)((char *)a2 + 136);
      v62 = v28;
      v29 = *(WTF::StringImpl **)v51;
      if (*(_QWORD *)v51)
        *(_DWORD *)v29 += 2;
      v30 = *((_BYTE *)a2 + 176);
      if (v22)
        *(_DWORD *)v22 += 2;
      if (v24)
        *(_DWORD *)v24 += 2;
      if (v25)
        *(_DWORD *)v25 += 2;
      if (v27)
        *(_DWORD *)v27 += 2;
      if (v29)
        *(_DWORD *)v29 += 2;
      v31 = (char *)malloc_type_malloc(0xE8uLL, 0x10E00408598FA4BuLL);
      v32 = v31;
      *(_QWORD *)v31 = MEMORY[0x1E0C809A0];
      *((_QWORD *)v31 + 1) = 50331650;
      *((_QWORD *)v31 + 2) = WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::{lambda(void *,UIAction *)#1}::__invoke;
      *((_QWORD *)v31 + 3) = &WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::descriptor;
      *((_QWORD *)v31 + 4) = v12;
      *((_QWORD *)v31 + 5) = v12;
      v33 = v69;
      *((_OWORD *)v31 + 3) = v68;
      *((_OWORD *)v31 + 4) = v33;
      v31[80] = v70;
      if (v54)
        *(_DWORD *)v54 += 2;
      *((_QWORD *)v31 + 11) = v54;
      v34 = v66;
      *((_OWORD *)v31 + 6) = v65;
      *((_OWORD *)v31 + 7) = v34;
      if (v53)
        *(_DWORD *)v53 += 2;
      *((_QWORD *)v31 + 16) = v53;
      if (v25)
        *(_DWORD *)v25 += 2;
      *((_QWORD *)v31 + 17) = v25;
      v35 = v64;
      *((_OWORD *)v31 + 9) = v63;
      *((_OWORD *)v31 + 10) = v35;
      if (v27)
        *(_DWORD *)v27 += 2;
      *((_QWORD *)v31 + 22) = v27;
      v36 = v62;
      *(_OWORD *)(v31 + 184) = v61;
      *(_OWORD *)(v31 + 200) = v36;
      if (v29)
      {
        *(_DWORD *)v29 += 2;
        *((_QWORD *)v31 + 27) = v29;
        v31[224] = v30;
        aBlock = _Block_copy(v31);

        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v37);
        else
          *(_DWORD *)v29 -= 2;
      }
      else
      {
        *((_QWORD *)v31 + 27) = 0;
        v31[224] = v30;
        aBlock = _Block_copy(v31);

      }
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, v37);
          if (!v25)
            goto LABEL_73;
LABEL_70:
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v37);
          else
            *(_DWORD *)v25 -= 2;
LABEL_73:
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v37);
            else
              *(_DWORD *)v53 -= 2;
          }
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v37);
            else
              *(_DWORD *)v54 -= 2;
          }
          v38 = _Block_copy(aBlock);
          objc_msgSend(v20, "actionWithTitle:image:identifier:handler:", v49, v50, 0, v38);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
            {
              WTF::StringImpl::destroy(v29, v39);
              if (!v27)
                goto LABEL_90;
LABEL_87:
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v39);
              else
                *(_DWORD *)v27 -= 2;
LABEL_90:
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                {
                  WTF::StringImpl::destroy(v25, v39);
                  if (!v53)
                    goto LABEL_98;
LABEL_96:
                  if (*(_DWORD *)v53 == 2)
                  {
                    WTF::StringImpl::destroy(v53, v39);
                    if (!v54)
                    {
LABEL_104:

                      if (*((unsigned __int8 *)v12 + 24) - 1 <= 1)
                        objc_msgSend(v13, "setState:", *((_BYTE *)v12 + 64) & 1);
                      v40 = *((_BYTE *)v12 + 64);
                      if ((v40 & 2) == 0)
                      {
                        objc_msgSend(v13, "setAttributes:", objc_msgSend(v13, "attributes") | 1);
                        v40 = *((_BYTE *)v12 + 64);
                      }
                      if ((v40 & 4) == 0)
                        objc_msgSend(v13, "setAttributes:", objc_msgSend(v13, "attributes") | 4);
                      goto LABEL_110;
                    }
LABEL_101:
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, v39);
                    else
                      *(_DWORD *)v54 -= 2;
                    goto LABEL_104;
                  }
                  *(_DWORD *)v53 -= 2;
LABEL_98:
                  if (!v54)
                    goto LABEL_104;
                  goto LABEL_101;
                }
                *(_DWORD *)v25 -= 2;
              }
              if (!v53)
                goto LABEL_98;
              goto LABEL_96;
            }
            *(_DWORD *)v29 -= 2;
          }
          if (!v27)
            goto LABEL_90;
          goto LABEL_87;
        }
        *(_DWORD *)v27 -= 2;
      }
      if (!v25)
        goto LABEL_73;
      goto LABEL_70;
    }
    v52 = 1;
    goto LABEL_16;
  }
LABEL_125:
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = cf;
  cf = 0;
  if (v46)
    CFRelease(v46);
  return v45;
}

void sub_19778C030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf)
{
  void *v26;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionMenuItem::icon(WebKit::WebExtensionMenuItem *this, CGSize a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebExtension *v4;
  NSDictionary *v5;
  void *v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  v4 = *(WebKit::WebExtension **)(v3 + 56);
  WTF::RetainPtr<NSMutableArray>::get((id *)this + 7);
  v5 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::bestImageInIconsDictionary(v4, v5, 0x14uLL);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_19778C32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WebKit::WebExtensionMenuItem *WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  WebKit::WebExtensionMenuItem *result;

  WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)(a1 + 48), a2);
  result = *(WebKit::WebExtensionMenuItem **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(result, v3);
  return result;
}

void WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0>(WebKit::WebExtensionMenuItem::platformMenuItem(WebKit::WebExtensionMenuItemContextParameters const&,WebKit::WebExtensionMenuItem::ForceUnchecked)::$_0)::{lambda(void *,UIAction *)#1}::__invoke(uint64_t a1)
{
  WebKit::WebExtensionMenuItem *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(WebKit::WebExtensionMenuItem **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebExtensionContext::performMenuItem((uint64_t *)(v3 - 16), v1, (WebKit::WebExtensionMenuItemContextParameters *)(a1 + 48), 1);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_19778C3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

id WebKit::toAPI(unsigned __int8 *a1)
{
  int v1;
  WTF::StringImpl *v2;
  __CFString *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if (!a1[24])
    return 0;
  v1 = *a1;
  if (*a1)
  {
    if (v1 == 1)
    {
      v14 = "Message port is not connected and cannot send messages.";
      v15 = 56;
      std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>((uint64_t)(a1 + 8), (uint64_t)&v14, &v16);
      if (v16)
      {
        v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v9 = v16;
        v16 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      else
      {
        v3 = &stru_1E351F1B8;
      }
      v10 = 1;
    }
    else if (v1 == 2)
    {
      v14 = "Message is not JSON-serializable.";
      v15 = 34;
      std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>((uint64_t)(a1 + 8), (uint64_t)&v14, &v16);
      if (v16)
      {
        v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        v4 = v16;
        v16 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v2);
          else
            *(_DWORD *)v4 -= 2;
        }
      }
      else
      {
        v3 = &stru_1E351F1B8;
      }
      v10 = 2;
    }
    else
    {
      v10 = 0;
      v3 = 0;
    }
  }
  else
  {
    v14 = "An unknown error occurred.";
    v15 = 27;
    std::optional<WTF::String>::value_or[abi:sn180100]<WTF::ASCIILiteral>((uint64_t)(a1 + 8), (uint64_t)&v14, &v16);
    if (v16)
    {
      v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      v7 = v16;
      v16 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
    else
    {
      v3 = &stru_1E351F1B8;
    }
    v10 = 0;
  }
  v11 = (void *)MEMORY[0x1E0CB35C8];
  v17 = *MEMORY[0x1E0CB2938];
  v18[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("_WKWebExtensionMessagePortErrorDomain"), v10, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_19778C628(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toWebExtensionMessagePortError(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  WebKit *v4;
  WebKit *v5;
  void *v6;
  char v7;
  uint64_t v8;
  char v9;

  v4 = this;
  v5 = v4;
  if (v4)
  {
    -[WebKit localizedDescription](v4, "localizedDescription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 0;
    MEMORY[0x19AEABCC8](&v8, v6);
    v9 = 1;
    *(_BYTE *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = 1;
    *(_BYTE *)(a2 + 24) = 1;
    v8 = 0;

  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }

}

void sub_19778C724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WebKit *WebKit::WebExtensionMessagePort::WebExtensionMessagePort(WebKit *a1, uint64_t a2, _DWORD **a3, uint64_t a4)
{
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(a1);
  *(_QWORD *)a1 = &off_1E34DCDD8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v8 = *(unsigned int **)(a2 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *((_QWORD *)a1 + 2) = v8;
  v10 = *a3;
  if (*a3)
    *v10 += 2;
  *((_QWORD *)a1 + 3) = v10;
  *((_QWORD *)a1 + 4) = a4;
  return a1;
}

uint64_t WebKit::WebExtensionMessagePort::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (a1 == a2)
    return 1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 16;
    else
      v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v7 = v8 - 16;
    else
      v7 = 0;
  }
  if (v5 != v7)
    return 0;
  result = WTF::equal(*(WTF **)(a1 + 24), *(const WTF::StringImpl **)(a2 + 24), a3);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t WebKit::WebExtensionMessagePort::remove(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      WebKit::WebExtensionContext::removeNativePort(v2 - 16, this);
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        v6 = v5 ? v5 - 16 : 0;
      }
      else
      {
        v6 = 0;
      }
      WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v6, 2, 0, *(_QWORD *)(v3 + 32));
      this = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (this)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)this);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)this));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v7);
        }
      }
    }
  }
  return this;
}

void WebKit::WebExtensionMessagePort::reportDisconnection(id *a1, uint64_t a2)
{
  void *v4;
  void (**v5)(_QWORD, _QWORD);
  WTF::StringImpl *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  char v12;
  char v13;

  WebKit::WebExtensionMessagePort::remove((uint64_t)a1);
  WebKit::WebExtension::wrapper(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "disconnectHandler");
  v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v10[0] = 0;
    v13 = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      v10[0] = *(_BYTE *)a2;
      LOBYTE(v11) = 0;
      v12 = 0;
      if (*(_BYTE *)(a2 + 16))
      {
        v6 = *(WTF::StringImpl **)(a2 + 8);
        if (v6)
          *(_DWORD *)v6 += 2;
        v11 = v6;
        v12 = 1;
      }
      v13 = 1;
    }
    WebKit::toAPI(v10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v5)[2](v5, v7);

    if (v13)
    {
      if (v12)
      {
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }

}

void sub_19778CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  WTF::StringImpl *v19;

  v17 = v16;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v19);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMessagePort::sendMessage(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  WTF::StringImpl *v29;
  char v30;
  char v31;

  v5 = a2;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    LOBYTE(v28) = 1;
    LOBYTE(v29) = 0;
    v30 = 0;
    v31 = 1;
    WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(a3, (char *)&v28);
    if (!v31)
      goto LABEL_28;
    if (!v30)
      goto LABEL_28;
    v17 = v29;
    if (!v29)
      goto LABEL_28;
LABEL_25:
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
    goto LABEL_28;
  }
  if (!v5)
    goto LABEL_7;
  if ((WebKit::isValidJSONObject(v5, 1) & 1) == 0)
  {
    LOBYTE(v24) = 2;
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 1;
    WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(a3, (char *)&v24);
    if (!(_BYTE)v27)
      goto LABEL_28;
    if (!(_BYTE)v26)
      goto LABEL_28;
    v17 = v25;
    if (!v25)
      goto LABEL_28;
    goto LABEL_25;
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v9 + 8);
LABEL_7:
  if (v8)
    v10 = v8 - 16;
  else
    v10 = 0;
LABEL_10:
  v11 = *(_QWORD *)(a1 + 32);
  WebKit::encodeJSONString(v6, 1, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](&v23, v12);
  WebKit::WebExtensionContext::portPostMessage(v10, 2, 0, 0, 0, v11, &v23, v13, v18, v19, (uint64_t)v20, v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26, v27, v28,
    (uint64_t)v29);
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }

  LOBYTE(v19) = 0;
  LOBYTE(v22) = 0;
  WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(a3, (char *)&v19);
  if ((_BYTE)v22)
  {
    if ((_BYTE)v21)
    {
      v17 = v20;
      if (v20)
        goto LABEL_25;
    }
  }
LABEL_28:

}

void sub_19778CC18(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,WTF::StringImpl *a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;

  if ((_BYTE)a22 && a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>)>::operator()(uint64_t *a1, char *a2)
{
  uint64_t v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;
  char v11;

  v2 = *a1;
  *a1 = 0;
  if (a2[24])
  {
    v3 = *a2;
    if (a2[16])
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v11 = 0;
      v8[0] = v3;
      v9 = v4;
      v10 = 1;
    }
    else
    {
      v11 = 0;
      v8[0] = v3;
      LOBYTE(v9) = 0;
      v10 = 0;
    }
    v11 = 1;
  }
  else
  {
    v8[0] = 0;
    v11 = 0;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v8);
  if (v11)
  {
    if (v10)
    {
      v6 = v9;
      v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19778CDB4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMessagePort::receiveMessage(id *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  WTF::StringImpl *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  char v14;
  char v15;

  v5 = a2;
  WebKit::WebExtension::wrapper(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "messageHandler");
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v12[0] = 0;
    v15 = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      v12[0] = *(_BYTE *)a3;
      LOBYTE(v13) = 0;
      v14 = 0;
      if (*(_BYTE *)(a3 + 16))
      {
        v8 = *(WTF::StringImpl **)(a3 + 8);
        if (v8)
          *(_DWORD *)v8 += 2;
        v13 = v8;
        v14 = 1;
      }
      v15 = 1;
    }
    WebKit::toAPI(v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, void *))v7)[2](v7, v5, v9);

    if (v15)
    {
      if (v14)
      {
        v11 = v13;
        v13 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
    }
  }

}

void sub_19778CF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  WTF::StringImpl *v20;

  v18 = v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v20);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::WebExtensionTab(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  char v9;
  int v10;
  unint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  char v24;
  int v25;
  unint64_t v26;
  char v27;
  int v28;
  unint64_t v29;
  char v30;
  int v31;
  unint64_t v32;
  char v33;
  int v34;
  unint64_t v35;
  char v36;
  int v37;
  unint64_t v38;
  char v39;
  int v40;
  unint64_t v41;
  char v42;
  int v43;
  unint64_t v44;
  char v45;
  int v46;
  unint64_t v47;
  char v48;
  int v49;
  unint64_t v50;
  char v51;
  int v52;
  unint64_t v53;
  char v54;
  int v55;
  unint64_t v56;
  char v57;
  int v58;
  unint64_t v59;
  char v60;
  int v61;
  unint64_t v62;
  char v63;
  int v64;
  unint64_t v65;
  char v66;
  int v67;
  unint64_t v68;
  char v69;
  int v70;
  unint64_t v71;
  char v72;
  int v73;
  unint64_t v74;
  char v75;
  int v76;
  unint64_t v77;
  char v78;
  int v79;
  unint64_t v80;
  char v81;
  int v82;
  unint64_t v83;
  char v84;
  int v85;
  unint64_t v86;
  char v87;
  int v88;
  unint64_t v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;

  v5 = a3;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = v6;
  objc_initWeak((id *)(a1 + 32), v5);
  v8 = *(_DWORD *)(a1 + 50);
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 50) = v8 & 0xFFFFFFF0;
  v9 = objc_opt_respondsToSelector();
  v10 = 16;
  if ((v9 & 1) == 0)
    v10 = 0;
  v11 = *(_DWORD *)(a1 + 50) & 0xFFFFFFEF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFFEF | v10;
  *(_BYTE *)(a1 + 54) = BYTE4(v11);
  v12 = objc_opt_respondsToSelector();
  v13 = 32;
  if ((v12 & 1) == 0)
    v13 = 0;
  v14 = *(_DWORD *)(a1 + 50) & 0xFFFFFFDF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFFDF | v13;
  *(_BYTE *)(a1 + 54) = BYTE4(v14);
  v15 = objc_opt_respondsToSelector();
  v16 = 64;
  if ((v15 & 1) == 0)
    v16 = 0;
  v17 = *(_DWORD *)(a1 + 50) & 0xFFFFFFBF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFFBF | v16;
  *(_BYTE *)(a1 + 54) = BYTE4(v17);
  v18 = objc_opt_respondsToSelector();
  v19 = 128;
  if ((v18 & 1) == 0)
    v19 = 0;
  v20 = *(_DWORD *)(a1 + 50) & 0xFFFFFF7F | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFF7F | v19;
  *(_BYTE *)(a1 + 54) = BYTE4(v20);
  v21 = objc_opt_respondsToSelector();
  v22 = 256;
  if ((v21 & 1) == 0)
    v22 = 0;
  v23 = *(_DWORD *)(a1 + 50) & 0xFFFFFEFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFEFF | v22;
  *(_BYTE *)(a1 + 54) = BYTE4(v23);
  v24 = objc_opt_respondsToSelector();
  v25 = 512;
  if ((v24 & 1) == 0)
    v25 = 0;
  v26 = *(_DWORD *)(a1 + 50) & 0xFFFFFDFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFDFF | v25;
  *(_BYTE *)(a1 + 54) = BYTE4(v26);
  v27 = objc_opt_respondsToSelector();
  v28 = 1024;
  if ((v27 & 1) == 0)
    v28 = 0;
  v29 = *(_DWORD *)(a1 + 50) & 0xFFFFFBFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFFBFF | v28;
  *(_BYTE *)(a1 + 54) = BYTE4(v29);
  v30 = objc_opt_respondsToSelector();
  v31 = 2048;
  if ((v30 & 1) == 0)
    v31 = 0;
  v32 = *(_DWORD *)(a1 + 50) & 0xFFFFF7FF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFF7FF | v31;
  *(_BYTE *)(a1 + 54) = BYTE4(v32);
  v33 = objc_opt_respondsToSelector();
  v34 = 4096;
  if ((v33 & 1) == 0)
    v34 = 0;
  v35 = *(_DWORD *)(a1 + 50) & 0xFFFFEFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFEFFF | v34;
  *(_BYTE *)(a1 + 54) = BYTE4(v35);
  v36 = objc_opt_respondsToSelector();
  v37 = 0x2000;
  if ((v36 & 1) == 0)
    v37 = 0;
  v38 = *(_DWORD *)(a1 + 50) & 0xFFFFDFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFDFFF | v37;
  *(_BYTE *)(a1 + 54) = BYTE4(v38);
  v39 = objc_opt_respondsToSelector();
  v40 = 0x4000;
  if ((v39 & 1) == 0)
    v40 = 0;
  v41 = *(_DWORD *)(a1 + 50) & 0xFFFFBFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFFBFFF | v40;
  *(_BYTE *)(a1 + 54) = BYTE4(v41);
  v42 = objc_opt_respondsToSelector();
  v43 = 0x8000;
  if ((v42 & 1) == 0)
    v43 = 0;
  v44 = *(_DWORD *)(a1 + 50) & 0xFFFF7FFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFF7FFF | v43;
  *(_BYTE *)(a1 + 54) = BYTE4(v44);
  v45 = objc_opt_respondsToSelector();
  v46 = 0x10000;
  if ((v45 & 1) == 0)
    v46 = 0;
  v47 = *(_DWORD *)(a1 + 50) & 0xFFFEFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFEFFFF | v46;
  *(_BYTE *)(a1 + 54) = BYTE4(v47);
  v48 = objc_opt_respondsToSelector();
  v49 = 0x20000;
  if ((v48 & 1) == 0)
    v49 = 0;
  v50 = *(_DWORD *)(a1 + 50) & 0xFFFDFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFDFFFF | v49;
  *(_BYTE *)(a1 + 54) = BYTE4(v50);
  v51 = objc_opt_respondsToSelector();
  v52 = 0x40000;
  if ((v51 & 1) == 0)
    v52 = 0;
  v53 = *(_DWORD *)(a1 + 50) & 0xFFFBFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFFBFFFF | v52;
  *(_BYTE *)(a1 + 54) = BYTE4(v53);
  v54 = objc_opt_respondsToSelector();
  v55 = 0x80000;
  if ((v54 & 1) == 0)
    v55 = 0;
  v56 = *(_DWORD *)(a1 + 50) & 0xFFF7FFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFF7FFFF | v55;
  *(_BYTE *)(a1 + 54) = BYTE4(v56);
  v57 = objc_opt_respondsToSelector();
  v58 = 0x100000;
  if ((v57 & 1) == 0)
    v58 = 0;
  v59 = *(_DWORD *)(a1 + 50) & 0xFFEFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFEFFFFF | v58;
  *(_BYTE *)(a1 + 54) = BYTE4(v59);
  v60 = objc_opt_respondsToSelector();
  v61 = 0x200000;
  if ((v60 & 1) == 0)
    v61 = 0;
  v62 = *(_DWORD *)(a1 + 50) & 0xFFDFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFDFFFFF | v61;
  *(_BYTE *)(a1 + 54) = BYTE4(v62);
  v63 = objc_opt_respondsToSelector();
  v64 = 0x400000;
  if ((v63 & 1) == 0)
    v64 = 0;
  v65 = *(_DWORD *)(a1 + 50) & 0xFFBFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFFBFFFFF | v64;
  *(_BYTE *)(a1 + 54) = BYTE4(v65);
  v66 = objc_opt_respondsToSelector();
  v67 = 0x800000;
  if ((v66 & 1) == 0)
    v67 = 0;
  v68 = *(_DWORD *)(a1 + 50) & 0xFF7FFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFF7FFFFF | v67;
  *(_BYTE *)(a1 + 54) = BYTE4(v68);
  v69 = objc_opt_respondsToSelector();
  v70 = 0x1000000;
  if ((v69 & 1) == 0)
    v70 = 0;
  v71 = *(_DWORD *)(a1 + 50) & 0xFEFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFEFFFFFF | v70;
  *(_BYTE *)(a1 + 54) = BYTE4(v71);
  v72 = objc_opt_respondsToSelector();
  v73 = 0x2000000;
  if ((v72 & 1) == 0)
    v73 = 0;
  v74 = *(_DWORD *)(a1 + 50) & 0xFDFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFDFFFFFF | v73;
  *(_BYTE *)(a1 + 54) = BYTE4(v74);
  v75 = objc_opt_respondsToSelector();
  v76 = 0x4000000;
  if ((v75 & 1) == 0)
    v76 = 0;
  v77 = *(_DWORD *)(a1 + 50) & 0xFBFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xFBFFFFFF | v76;
  *(_BYTE *)(a1 + 54) = BYTE4(v77);
  v78 = objc_opt_respondsToSelector();
  v79 = 0x8000000;
  if ((v78 & 1) == 0)
    v79 = 0;
  v80 = *(_DWORD *)(a1 + 50) & 0xF7FFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xF7FFFFFF | v79;
  *(_BYTE *)(a1 + 54) = BYTE4(v80);
  v81 = objc_opt_respondsToSelector();
  v82 = 0x10000000;
  if ((v81 & 1) == 0)
    v82 = 0;
  v83 = *(_DWORD *)(a1 + 50) & 0xEFFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xEFFFFFFF | v82;
  *(_BYTE *)(a1 + 54) = BYTE4(v83);
  v84 = objc_opt_respondsToSelector();
  v85 = 0x20000000;
  if ((v84 & 1) == 0)
    v85 = 0;
  v86 = *(_DWORD *)(a1 + 50) & 0xDFFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xDFFFFFFF | v85;
  *(_BYTE *)(a1 + 54) = BYTE4(v86);
  v87 = objc_opt_respondsToSelector();
  v88 = 0x40000000;
  if ((v87 & 1) == 0)
    v88 = 0;
  v89 = *(_DWORD *)(a1 + 50) & 0xBFFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0xBFFFFFFF | v88;
  *(_BYTE *)(a1 + 54) = BYTE4(v89);
  v90 = objc_opt_respondsToSelector();
  v91 = 0x80000000;
  if ((v90 & 1) == 0)
    v91 = 0;
  v92 = *(_DWORD *)(a1 + 50) & 0x7FFFFFFF | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50) & 0x7FFFFFFF | v91;
  *(_BYTE *)(a1 + 54) = BYTE4(v92);
  v93 = objc_opt_respondsToSelector();
  v94 = 0x100000000;
  if ((v93 & 1) == 0)
    v94 = 0;
  v95 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFFEFFFFFFFFLL | v94;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v95);
  v96 = objc_opt_respondsToSelector();
  v97 = 0x200000000;
  if ((v96 & 1) == 0)
    v97 = 0;
  v98 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFFDFFFFFFFFLL | v97;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v98);
  v99 = objc_opt_respondsToSelector();
  v100 = 0x400000000;
  if ((v99 & 1) == 0)
    v100 = 0;
  v101 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFFBFFFFFFFFLL | v100;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v101);
  v102 = objc_opt_respondsToSelector();
  v103 = 0x800000000;
  if ((v102 & 1) == 0)
    v103 = 0;
  v104 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v103;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v104);
  v105 = objc_opt_respondsToSelector();
  v106 = 0x1000000000;
  if ((v105 & 1) == 0)
    v106 = 0;
  v107 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFEFFFFFFFFFLL | v106;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v107);
  v108 = objc_opt_respondsToSelector();
  v109 = 0x2000000000;
  if ((v108 & 1) == 0)
    v109 = 0;
  v110 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFDFFFFFFFFFLL | v109;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v110);
  v111 = objc_opt_respondsToSelector();
  v112 = 0x4000000000;
  if ((v111 & 1) == 0)
    v112 = 0;
  v113 = (*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0xFFFFFFBFFFFFFFFFLL | v112;
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a1 + 50);
  *(_BYTE *)(a1 + 54) = BYTE4(v113);
  v114 = objc_opt_respondsToSelector();
  v115 = *(unsigned int *)(a1 + 50);
  v116 = v115 | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32);
  v117 = 0xFFFFFF8000000000;
  if ((v114 & 1) == 0)
    v117 = 0;
  *(_DWORD *)(a1 + 50) = v115;
  *(_BYTE *)(a1 + 54) = (v117 & 0xFFFFFF8000000000 | v116 & 0x7FFFFFFFFFLL) >> 32;
  WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)a1);

  return a1;
}

void sub_19778D930(_Unwind_Exception *a1, void *a2)
{
  void *v2;
  unsigned int **v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);

  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtensionTab::isPrivate(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  uint64_t v3;
  WebKit::WebExtensionWindow *v4;
  _BOOL8 isPrivate;
  char *v6;
  int v7;
  unint64_t v8;
  int v9;
  WebKit::WebExtensionWindow *v11;

  v1 = *(unsigned int *)((char *)this + 50);
  if ((v1 & 8) != 0)
    return ((v1 | ((unint64_t)*((unsigned __int8 *)this + 54) << 32)) >> 2) & 1;
  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return 0;
  if (!*(_QWORD *)(v3 + 8))
    return 0;
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    return 0;
  WebKit::WebExtensionTab::window(this, &v11);
  v4 = v11;
  if (!v11)
    return 0;
  isPrivate = WebKit::WebExtensionWindow::isPrivate(v11);
  v7 = *(_DWORD *)((char *)this + 50);
  v6 = (char *)this + 50;
  v8 = v7 & 0xFFFFFFF3 | ((unint64_t)v6[4] << 32);
  v9 = 8;
  if (isPrivate)
    v9 = 12;
  *(_DWORD *)v6 = v8 | v9;
  v6[4] = BYTE4(v8);
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v4);
  return isPrivate;
}

void sub_19778DA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;
  CFTypeRef v12;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v3 = v4 - 16;
    else
      v3 = 0;
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 16;
    else
      v5 = 0;
  }
  if (v3 != v5)
    return 0;
  WTF::WeakObjCPtrArc<NSObject  {objcproto18_WKWebExtensionTab}>::get((id *)(a1 + 32), &v12);
  WTF::WeakObjCPtrArc<NSObject  {objcproto18_WKWebExtensionTab}>::get((id *)(a2 + 32), &cf);
  v7 = WTF::operator==<NSObject  {objcproto18_WKWebExtensionTab},NSObject  {objcproto18_WKWebExtensionTab}>((id *)&v12, (id *)&cf);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  v10 = v12;
  v12 = 0;
  if (v10)
    CFRelease(v10);
  return v7;
}

void sub_19778DB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

BOOL WTF::operator==<NSObject  {objcproto18_WKWebExtensionTab},NSObject  {objcproto18_WKWebExtensionTab}>(id *a1, id *a2)
{
  void *v3;
  void *v4;
  _BOOL8 v5;

  WTF::RetainPtr<NSMutableArray>::get(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WTF::RetainPtr<NSMutableArray>::get(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v3 == v4;

  return v5;
}

void sub_19778DBC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<NSObject  {objcproto18_WKWebExtensionTab}>::get(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *cf;

  v3 = objc_loadWeakRetained(a1);
  *a2 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_19778DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionTab::parameters@<X0>(WebKit::WebExtensionTab *this@<X0>, uint64_t a2@<X8>)
{
  _BOOL4 HasPermission;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  char isMuted;
  char v14;
  WTF::StringImpl *v15;
  __int16 v16;
  char isShowingReaderMode;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];
  uint64_t v23;
  uint64_t v24;

  HasPermission = WebKit::WebExtensionTab::extensionHasPermission((URL *)this);
  WebKit::WebExtensionTab::window(this, &v24);
  v5 = WebKit::WebExtensionTab::index(this);
  WebKit::WebExtensionTab::parentTab(this, &v23);
  *(_QWORD *)a2 = *((_QWORD *)this + 2);
  *(_BYTE *)(a2 + 8) = 1;
  if (HasPermission)
    WebKit::WebExtensionTab::url(this, (uint64_t)v22);
  else
    WTF::URL::URL((WTF::URL *)v22);
  WTF::URL::URL(a2 + 16, (uint64_t *)v22);
  *(_BYTE *)(a2 + 56) = 1;
  if (HasPermission)
  {
    WebKit::WebExtensionTab::title((WebKit::WebExtensionTab *)&v21, (uint64_t)this);
    v6 = v21;
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v6 += 2;
    v21 = v6;
  }
  if (v6)
    *(_DWORD *)v6 += 2;
  *(_QWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 72) = 1;
  v7 = v24;
  if (v24)
    v8 = *(_QWORD *)(v24 + 16);
  else
    v8 = -2;
  *(_QWORD *)(a2 + 80) = v8;
  *(_BYTE *)(a2 + 88) = 1;
  *(_QWORD *)(a2 + 96) = v5;
  *(_BYTE *)(a2 + 104) = 1;
  *(double *)(a2 + 112) = WebKit::WebExtensionTab::size(this);
  *(_QWORD *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 128) = 1;
  v10 = v23;
  if (v23)
  {
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(v23 + 16);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)(a2 + 136) = 0;
  }
  *(_BYTE *)(a2 + 144) = v11;
  *(_BYTE *)(a2 + 152) = WebKit::WebExtensionTab::isActive(this);
  *(_BYTE *)(a2 + 153) = 1;
  v12 = *(_DWORD *)((char *)this + 50);
  if ((v12 & 0x400) != 0)
  {
    *(_BYTE *)(a2 + 154) = WebKit::WebExtensionTab::isSelected(this);
    *(_BYTE *)(a2 + 155) = 1;
    v12 = *(_DWORD *)((char *)this + 50);
    if ((v12 & 0x800) == 0)
    {
LABEL_19:
      *(_WORD *)(a2 + 156) = 0;
      if ((v12 & 0x20000) == 0)
        goto LABEL_20;
LABEL_24:
      *(_BYTE *)(a2 + 158) = WebKit::WebExtensionTab::isAudible(this);
      *(_BYTE *)(a2 + 159) = 1;
      if ((*(_DWORD *)((_BYTE *)this + 50) & 0x40000) == 0)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else
  {
    *(_WORD *)(a2 + 154) = 0;
    if ((v12 & 0x800) == 0)
      goto LABEL_19;
  }
  *(_BYTE *)(a2 + 156) = WebKit::WebExtensionTab::isPinned(this);
  *(_BYTE *)(a2 + 157) = 1;
  v12 = *(_DWORD *)((char *)this + 50);
  if ((v12 & 0x20000) != 0)
    goto LABEL_24;
LABEL_20:
  *(_WORD *)(a2 + 158) = 0;
  if ((v12 & 0x40000) == 0)
  {
LABEL_21:
    isMuted = 0;
    v14 = 0;
    goto LABEL_26;
  }
LABEL_25:
  isMuted = WebKit::WebExtensionTab::isMuted(this);
  v14 = 1;
LABEL_26:
  *(_BYTE *)(a2 + 160) = isMuted;
  *(_BYTE *)(a2 + 161) = v14;
  *(_BYTE *)(a2 + 162) = WebKit::WebExtensionTab::isLoadingComplete(this) ^ 1;
  *(_BYTE *)(a2 + 163) = 1;
  *(_BYTE *)(a2 + 164) = WebKit::WebExtensionTab::isPrivate(this);
  *(_BYTE *)(a2 + 165) = 1;
  v16 = *(_DWORD *)((char *)this + 50);
  if ((*(_DWORD *)((_BYTE *)this + 50) & 0x4000) != 0)
  {
    *(_BYTE *)(a2 + 166) = WebKit::WebExtensionTab::isReaderModeAvailable(this);
    *(_BYTE *)(a2 + 167) = 1;
    if ((*(_DWORD *)((_BYTE *)this + 50) & 0x8000) == 0)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 166) = 0;
    if ((v16 & 0x8000) == 0)
    {
LABEL_28:
      isShowingReaderMode = 0;
      v18 = 0;
      goto LABEL_31;
    }
  }
  isShowingReaderMode = WebKit::WebExtensionTab::isShowingReaderMode(this);
  v18 = 1;
LABEL_31:
  *(_BYTE *)(a2 + 168) = isShowingReaderMode;
  *(_BYTE *)(a2 + 169) = v18;
  v19 = v21;
  v21 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v22[0];
  v22[0] = 0;
  if (!result)
  {
LABEL_38:
    if (!v10)
      goto LABEL_40;
    goto LABEL_39;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_38;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
  if (v10)
LABEL_39:
    result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref(v10);
LABEL_40:
  if (v7)
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v7);
  return result;
}

void sub_19778DF54(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v16 + 64, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v19);
    else
      *(_DWORD *)a9 -= 2;
  }
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v17, v19);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v20);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a15);
  if (a16)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a16);
  _Unwind_Resume(a1);
}

void sub_19778E00C()
{
  JUMPOUT(0x19778DFF8);
}

BOOL WebKit::WebExtensionTab::extensionHasPermission(URL *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  StringImpl *m_ptr;
  URL v9;

  v2 = *(_QWORD *)&this->m_hostEnd;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  WebKit::WebExtensionTab::url((WebKit::WebExtensionTab *)this, (uint64_t)&v9);
  v6 = WebKit::WebExtensionContext::permissionState(v4, &v9, this, 3);
  m_ptr = v9.m_string.m_impl.m_ptr;
  v9.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v5);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  return (v6 & 0xFFFFFFFE) == 2;
}

void sub_19778E0B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionTab::window(WebKit::WebExtensionTab *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id *v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 3);
  if (v3
    && *(_QWORD *)(v3 + 8)
    && (v5 = (id *)((char *)this + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x10) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v5);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "windowForWebExtensionContext:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v12 = *((_QWORD *)this + 3);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
          v14 = v13 - 16;
        else
          v14 = 0;
      }
      else
      {
        v14 = 0;
      }
      WebKit::WebExtensionContext::getOrCreateWindow(v14, v11, (uint64_t)&v15);
      *a2 = v15;
    }
    else
    {
      *a2 = 0;
    }

  }
  else
  {
    *a2 = 0;
  }
}

void sub_19778E1E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::index(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return -1;
  if (!*(_QWORD *)(v1 + 8))
    return -1;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    return -1;
  if ((*(_DWORD *)((_BYTE *)this + 50) & 0x20) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v3);
    v9 = *((_QWORD *)this + 3);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v11 = (id *)(v10 - 16);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    WebKit::WebExtension::wrapper(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(WeakRetained, "indexInWindowForWebExtensionContext:", v12);

    if (v13 == 0x7FFFFFFFFFFFFFFFLL)
      return -1;
    else
      return v13;
  }
  WebKit::WebExtensionTab::window(this, &v16);
  v4 = v16;
  if (!v16)
    return -1;
  WebKit::WebExtensionWindow::tabs(v16, 0, &v14);
  if (v15)
  {
    v6 = 0;
    while ((WebKit::WebExtensionTab::operator==((uint64_t)this, *(_QWORD *)(v14 + 8 * v6)) & 1) == 0)
    {
      if (++v6 >= (unint64_t)v15)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v6 = -1;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v5);
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  return v6;
}

void sub_19778E340(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::parentTab(WebKit::WebExtensionTab *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id *v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 3);
  if (v3
    && *(_QWORD *)(v3 + 8)
    && (v5 = (id *)((char *)this + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x40) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v5);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "parentTabForWebExtensionContext:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v12 = *((_QWORD *)this + 3);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
          v14 = (uint64_t *)(v13 - 16);
        else
          v14 = 0;
      }
      else
      {
        v14 = 0;
      }
      WebKit::WebExtensionContext::getOrCreateTab(v14, v11, (uint64_t)&v15);
      *a2 = v15;
    }
    else
    {
      *a2 = 0;
    }

  }
  else
  {
    *a2 = 0;
  }
}

void sub_19778E484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::url(WebKit::WebExtensionTab *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v11;

  v4 = *((_QWORD *)this + 3);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x1000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "urlForWebExtensionContext:", v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by urlForWebExtensionContext: is not a URL"));
    }
    MEMORY[0x19AEABB18](a2, v11);
  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABB18](a2, v5);

  }
}

void sub_19778E5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::title(WebKit::WebExtensionTab *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v11;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a2 + 32))
    && (*(_DWORD *)(a2 + 50) & 0x200) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a2 + 32));
    v7 = *(_QWORD *)(a2 + 24);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "tabTitleForWebExtensionContext:", v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by tabTitleForWebExtensionContext: is not a string"));
    }
    MEMORY[0x19AEABCC8](this, v11);
  }
  else
  {
    WebKit::WebExtensionTab::mainWebView((WebKit::WebExtensionTab *)a2);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "title");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](this, v5);

  }
}

void sub_19778E760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

double WebKit::WebExtensionTab::size(WebKit::WebExtensionTab *this)
{
  uint64_t v2;
  void *WeakRetained;
  double v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  double v11;

  v2 = *((_QWORD *)this + 3);
  if (v2
    && *(_QWORD *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x200000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "sizeForWebExtensionContext:", v10);
    v5 = v11;

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "frame");
    v5 = v4;
  }

  return v5;
}

void sub_19778E86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionTab::isActive(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  WebKit::WebExtensionTab *v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    return 0;
  WebKit::WebExtensionTab::window(this, &v8);
  v3 = v8;
  if (!v8)
    return 0;
  WebKit::WebExtensionWindow::activeTab(v8, 0, (uint64_t *)&v7);
  v4 = (uint64_t)v7;
  v5 = v7 == this;
  v7 = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  return v5;
}

void sub_19778E920(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionTab::isSelected(WebKit::WebExtensionTab *this)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (!v2
    || !*(_QWORD *)(v2 + 8)
    || !WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x400) == 0)
  {
    return WebKit::WebExtensionTab::isActive(this);
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 4);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = (id *)(v6 - 16);
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  WebKit::WebExtension::wrapper(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(WeakRetained, "isSelectedForWebExtensionContext:", v8);

  return v9;
}

void sub_19778E9F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isPinned(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x800) == 0)
  {
    return 0;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "isPinnedForWebExtensionContext:", v10);

  return v4;
}

void sub_19778EABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isAudible(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x20000) == 0)
  {
    return 0;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "isAudibleForWebExtensionContext:", v10);

  return v4;
}

void sub_19778EB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isMuted(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x40000) == 0)
  {
    return 0;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "isMutedForWebExtensionContext:", v10);

  return v4;
}

void sub_19778EC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isLoadingComplete(WebKit::WebExtensionTab *this)
{
  uint64_t v2;
  void *WeakRetained;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  void *v9;

  v2 = *((_QWORD *)this + 3);
  if (v2
    && *(_QWORD *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x4000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = (id *)(v7 - 16);
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    WebKit::WebExtension::wrapper(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(WeakRetained, "isLoadingCompleteForWebExtensionContext:", v9);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(WeakRetained, "isLoading") ^ 1;
  }

  return v4;
}

void sub_19778ED34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isReaderModeAvailable(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x4000) == 0)
  {
    return 0;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "isReaderModeAvailableForWebExtensionContext:", v10);

  return v4;
}

void sub_19778EE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::isShowingReaderMode(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x8000) == 0)
  {
    return 0;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "isShowingReaderModeForWebExtensionContext:", v10);

  return v4;
}

void sub_19778EED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionTab::changedParameters@<X0>(WebKit::WebExtensionTab *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v5;
  _BOOL4 HasPermission;
  WTF::StringImpl *v7;
  _BOOL4 v8;
  char v9;
  WTF::StringImpl **v10;
  char v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  int v15;
  char isMuted;
  char v17;
  char v18;
  char v19;
  int v20;
  WTF::StringImpl *result;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[5];

  v5 = a2;
  if (!a2)
    v5 = *((_WORD *)this + 24);
  HasPermission = WebKit::WebExtensionTab::extensionHasPermission((URL *)this);
  v8 = HasPermission;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  if ((v5 & 0x100) != 0)
  {
    if (HasPermission)
      WebKit::WebExtensionTab::url(this, (uint64_t)v24);
    else
      WTF::URL::URL((WTF::URL *)v24);
    WTF::URL::URL(a3 + 16, (uint64_t *)v24);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  *(_BYTE *)(a3 + 56) = v9;
  v10 = (WTF::StringImpl **)(a3 + 64);
  if ((v5 & 0x80) != 0)
  {
    if (v8)
    {
      WebKit::WebExtensionTab::title((WebKit::WebExtensionTab *)&v23, (uint64_t)this);
      v12 = v23;
    }
    else
    {
      v12 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v12 += 2;
      v23 = v12;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    *v10 = v12;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)v10 = 0;
  }
  *(_BYTE *)(a3 + 72) = v11;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if ((v5 & 0x40) != 0)
  {
    *(double *)(a3 + 112) = WebKit::WebExtensionTab::size(this);
    *(_QWORD *)(a3 + 120) = v14;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)(a3 + 112) = 0;
  }
  *(_BYTE *)(a3 + 128) = v13;
  *(_BYTE *)(a3 + 136) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 152) = 0;
  v15 = *(_DWORD *)((char *)this + 50);
  if ((v15 & 0x800) != 0 && (v5 & 0x10) != 0)
  {
    *(_BYTE *)(a3 + 156) = WebKit::WebExtensionTab::isPinned(this);
    *(_BYTE *)(a3 + 157) = 1;
    v15 = *(_DWORD *)((char *)this + 50);
    if ((v15 & 0x20000) == 0)
      goto LABEL_29;
  }
  else
  {
    *(_WORD *)(a3 + 156) = 0;
    if ((v15 & 0x20000) == 0)
      goto LABEL_29;
  }
  if ((v5 & 2) != 0)
  {
    *(_BYTE *)(a3 + 158) = WebKit::WebExtensionTab::isAudible(this);
    *(_BYTE *)(a3 + 159) = 1;
    v15 = *(_DWORD *)((char *)this + 50);
    goto LABEL_30;
  }
LABEL_29:
  *(_WORD *)(a3 + 158) = 0;
LABEL_30:
  isMuted = 0;
  if ((v15 & 0x40000) != 0)
  {
    v17 = 0;
    if ((v5 & 8) != 0)
    {
      isMuted = WebKit::WebExtensionTab::isMuted(this);
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  *(_BYTE *)(a3 + 160) = isMuted;
  *(_BYTE *)(a3 + 161) = v17;
  if ((v5 & 4) != 0)
  {
    v18 = WebKit::WebExtensionTab::isLoadingComplete(this) ^ 1;
    v19 = 1;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  *(_BYTE *)(a3 + 162) = v18;
  *(_BYTE *)(a3 + 163) = v19;
  *(_WORD *)(a3 + 164) = 0;
  LOWORD(v20) = *(_DWORD *)((char *)this + 50);
  if ((*(_DWORD *)((_BYTE *)this + 50) & 0x4000) != 0 && (v5 & 0x20) != 0)
  {
    *(_BYTE *)(a3 + 166) = WebKit::WebExtensionTab::isReaderModeAvailable(this);
    *(_BYTE *)(a3 + 167) = 1;
    v20 = *(_DWORD *)((char *)this + 50);
  }
  else
  {
    *(_WORD *)(a3 + 166) = 0;
  }
  result = 0;
  if ((v20 & 0x8000) != 0)
  {
    v22 = 0;
    if ((v5 & 0x20) != 0)
    {
      result = (WTF::StringImpl *)WebKit::WebExtensionTab::isShowingReaderMode(this);
      v22 = 1;
    }
  }
  else
  {
    v22 = 0;
  }
  *(_BYTE *)(a3 + 168) = (_BYTE)result;
  *(_BYTE *)(a3 + 169) = v22;
  if ((v5 & 0x80) != 0)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if ((v5 & 0x100) == 0)
          return result;
        goto LABEL_50;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if ((v5 & 0x100) == 0)
    return result;
LABEL_50:
  result = v24[0];
  v24[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19778F1B4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  __int16 v11;
  WTF::StringImpl *v13;

  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v10, a2);
  if ((v11 & 0x100) != 0 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::matches(WebKit::WebExtensionTab *a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int isActive;
  int v17;
  int isAudible;
  int isLoadingComplete;
  int isMuted;
  int isPinned;
  int isSelected;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  const WTF::String *v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _Unwind_Exception *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39[5];

  if (WebKit::WebExtensionTab::isPrivate(a1))
  {
    v10 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    v11 = v10 ? v10 - 16 : 0;
    if (!*(_BYTE *)(v11 + 249))
      return 0;
  }
  if ((a3 & 1) == 0 && (*(_BYTE *)(a2 + 48) || *(_BYTE *)(a2 + 57) || *(_BYTE *)(a2 + 61) || *(_BYTE *)(a2 + 59)))
  {
    WebKit::WebExtensionTab::window(a1, v39);
    v12 = v39[0];
    if (!v39[0])
      return 0;
    v13 = WebKit::WebExtensionWindow::matches(v39[0], a2, a4, a5);
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v12);
    if ((v13 & 1) == 0)
      return 0;
  }
  v14 = WebKit::WebExtensionTab::index(a1);
  if (*(_BYTE *)(a2 + 72))
  {
    v15 = 0;
    if (v14 == -1 || v14 != *(_QWORD *)(a2 + 64))
      return v15;
  }
  isActive = WebKit::WebExtensionTab::isActive(a1);
  v17 = isActive;
  if (*(_BYTE *)(a2 + 81))
  {
    if (*(unsigned __int8 *)(a2 + 80) != isActive)
      return 0;
  }
  if (*(_BYTE *)(a2 + 83))
  {
    isAudible = WebKit::WebExtensionTab::isAudible(a1);
    if (!*(_BYTE *)(a2 + 83))
      goto LABEL_60;
    if (*(unsigned __int8 *)(a2 + 82) != isAudible)
      return 0;
  }
  if (*(_BYTE *)(a2 + 85) && v17 == (*(_BYTE *)(a2 + 84) != 0))
    return 0;
  if (*(_BYTE *)(a2 + 87))
  {
    isLoadingComplete = WebKit::WebExtensionTab::isLoadingComplete(a1);
    if (!*(_BYTE *)(a2 + 87))
      goto LABEL_60;
    if (isLoadingComplete == (*(_BYTE *)(a2 + 86) != 0))
      return 0;
  }
  if (*(_BYTE *)(a2 + 89))
  {
    isMuted = WebKit::WebExtensionTab::isMuted(a1);
    if (!*(_BYTE *)(a2 + 89))
      goto LABEL_60;
    if (*(unsigned __int8 *)(a2 + 88) != isMuted)
      return 0;
  }
  if (*(_BYTE *)(a2 + 91))
  {
    isPinned = WebKit::WebExtensionTab::isPinned(a1);
    if (!*(_BYTE *)(a2 + 91))
      goto LABEL_60;
    if (*(unsigned __int8 *)(a2 + 90) != isPinned)
      return 0;
  }
  if (!*(_BYTE *)(a2 + 93))
    goto LABEL_35;
  isSelected = WebKit::WebExtensionTab::isSelected(a1);
  if (!*(_BYTE *)(a2 + 93))
  {
LABEL_60:
    v35 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    v36 = v38;
    v38 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v39[0];
    v39[0] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v34);
      else
        *(_DWORD *)v37 -= 2;
    }
    _Unwind_Resume(v35);
  }
  if (*(unsigned __int8 *)(a2 + 92) != isSelected)
    return 0;
LABEL_35:
  WebKit::WebExtensionTab::url(a1, (uint64_t)v39);
  if (!(*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 32)))
  {
LABEL_54:
    v15 = 1;
    goto LABEL_56;
  }
  if (WebKit::WebExtensionTab::extensionHasPermission((URL *)a1))
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v24 = *(unsigned int *)(a2 + 12);
      if (!(_DWORD)v24)
        goto LABEL_55;
      v25 = *(WTF::StringImpl ***)a2;
      v26 = 8 * v24;
      while (1)
      {
        WebKit::WebExtensionMatchPattern::create<WTF::String const&>(v25, (uint64_t *)&v38);
        if (v38)
        {
          v27 = WebKit::WebExtensionMatchPattern::matchesURL(v38, (WTF::URL *)v39, 0);
          v28 = v38;
          v38 = 0;
          if (v28)
            CFRelease(*((CFTypeRef *)v28 + 1));
          if ((v27 & 1) != 0)
            break;
        }
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_55;
      }
    }
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_54;
    WebKit::WebExtensionTab::title((WebKit::WebExtensionTab *)&v38, (uint64_t)a1);
    v31 = WebCore::matchesWildcardPattern((WebCore *)(a2 + 24), (const WTF::String *)&v38, v30);
    v32 = v38;
    v38 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v23);
      else
        *(_DWORD *)v32 -= 2;
    }
    if ((v31 & 1) != 0)
      goto LABEL_54;
  }
LABEL_55:
  v15 = 0;
LABEL_56:
  v33 = v39[0];
  v39[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v23);
    else
      *(_DWORD *)v33 -= 2;
  }
  return v15;
}

uint64_t WebKit::WebExtensionTab::extensionHasTemporaryPermission(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7[5];

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  CFRetain(*(CFTypeRef *)(v1 + 8));
  WebKit::WebExtensionTab::url(this, (uint64_t)v7);
  v4 = WebKit::WebExtensionMatchPattern::matchesURL((_BYTE *)v1, (WTF::URL *)v7, 0);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v1 + 8));
  return v4;
}

void sub_19778F660(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setParentTab(uint64_t a1, uint64_t *a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5;
  id *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  id WeakRetained;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x80) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v8);
    v14 = *a2;
    if (*a2)
      v15 = objc_loadWeakRetained((id *)(v14 + 32));
    else
      v15 = 0;
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        v18 = (id *)(v17 - 16);
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    WebKit::WebExtension::wrapper(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v20 = *a3;
    *a3 = 0;
    v21 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v21 = MEMORY[0x1E0C809A0];
    v21[1] = 50331650;
    v21[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v21[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v21[4] = a1;
    v21[5] = v20;
    v22 = _Block_copy(v21);

    v23 = _Block_copy(v22);
    objc_msgSend(WeakRetained, "setParentTab:forWebExtensionContext:completionHandler:", v15, v19, v23);

    if (v14)
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, CFSTR("it is not implemented for 'openerTabId'"), a4, &v25);
    v9 = v25;
    v25 = 0;
    v26 = v9;
    v27 = 1;
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v27)
    {
      v12 = v26;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v13 = v25;
    v25 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
}

void sub_19778F8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  if (v16)
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionTab::mainWebView(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  void *v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 3);
  if (!v1
    || !*(_QWORD *)(v1 + 8)
    || (v3 = (id *)((char *)this + 32),
        !WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    || (*(_DWORD *)((_BYTE *)this + 50) & 0x100) == 0)
  {
    v4 = 0;
    return v4;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "mainWebViewForWebExtensionContext:", v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by mainWebViewForWebExtensionContext: is not a WKWebView"));
    objc_msgSend(v4, "configuration");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_webExtensionController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v13)
      v14 = v13 - 16;
    else
      v14 = 0;
    v15 = *(_QWORD *)(v14 + 64);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        v17 = (id *)(v16 - 16);
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    WebKit::WebExtension::wrapper(v17);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)v18;
    if (v12 && v12 == (void *)v18)
    {
      v20 = 0;
LABEL_29:

      return v4;
    }
    if (v12)
    {
      if (v12 == (void *)v18)
        goto LABEL_28;
      v25 = qword_1ECE710C8;
      if (!os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      v26 = 138543874;
      v27 = v4;
      v28 = 2114;
      v29 = v12;
      v30 = 2114;
      v31 = v19;
      v22 = "%{public}@ returned by mainWebViewForWebExtensionContext: is not configured with the same _WKWebExtensionCon"
            "troller as extension context; %{public}@ != %{public}@";
      v23 = v25;
      v24 = 32;
    }
    else
    {
      v21 = qword_1ECE710C8;
      if (!os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        v20 = v4;
        v4 = 0;
        goto LABEL_29;
      }
      v26 = 138543362;
      v27 = v4;
      v22 = "%{public}@ returned by mainWebViewForWebExtensionContext: is not configured with a _WKWebExtensionController";
      v23 = v21;
      v24 = 12;
    }
    _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v26, v24);
    goto LABEL_28;
  }
  return v4;
}

void sub_19778FBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionTab::isOpen(WebKit::WebExtensionTab *this)
{
  uint64_t v1;

  return (*(_DWORD *)((_BYTE *)this + 50) & 2) != 0
      && (v1 = *((_QWORD *)this + 3)) != 0
      && *(_QWORD *)(v1 + 8)
      && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4);
}

void WebKit::WebExtensionTab::pin(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x1000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "pinForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_19778FE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::unpin(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x2000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "unpinForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_1977900EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::toggleReaderMode(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x10000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "toggleReaderModeForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.toggleReaderMode()"), 0, CFSTR("it is not implemented"), a4, &v22);
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_19779038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::mute(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x80000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "muteForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_19779062C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::unmute(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x100000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "unmuteForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_1977908CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

double WebKit::WebExtensionTab::zoomFactor(WebKit::WebExtensionTab *this)
{
  uint64_t v2;
  void *WeakRetained;
  double v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  double v11;

  v2 = *((_QWORD *)this + 3);
  if (v2
    && *(_QWORD *)(v2 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x400000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "zoomFactorForWebExtensionContext:", v10);
    v5 = v11;

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "pageZoom");
    v5 = v4;
  }

  return v5;
}

void sub_197790A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::setZoomFactor(WebKit::WebExtensionTab *this, uint64_t *a2, double a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  id WeakRetained;
  WTF::StringImpl *v20;
  char v21;

  v6 = *((_QWORD *)this + 3);
  if (v6
    && *(_QWORD *)(v6 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x800000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v11 = *((_QWORD *)this + 3);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v13 = (id *)(v12 - 16);
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    WebKit::WebExtension::wrapper(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)this;
    v15 = *a2;
    *a2 = 0;
    v16 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v16 = MEMORY[0x1E0C809A0];
    v16[1] = 50331650;
    v16[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v16[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v16[4] = this;
    v16[5] = v15;
    v17 = _Block_copy(v16);

    v18 = _Block_copy(v17);
    objc_msgSend(WeakRetained, "setZoomFactor:forWebExtensionContext:completionHandler:", v14, v18, a3);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setPageZoom:", a3);

    LOBYTE(v20) = 0;
    v21 = 0;
    v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v21)
    {
      v10 = v20;
      v20 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
}

void sub_197790C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::detectWebpageLocale(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  id WeakRetained;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_DWORD *)(a1 + 50) & 0x8000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v14 = (id *)(v13 - 16);
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
    }
    WebKit::WebExtension::wrapper(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v16 = *a2;
    *a2 = 0;
    v17 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v17 = MEMORY[0x1E0C809A0];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,NSLocale *,NSError *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::descriptor;
    v17[4] = a1;
    v17[5] = v16;
    v18 = _Block_copy(v17);

    v19 = _Block_copy(v18);
    objc_msgSend(WeakRetained, "detectWebpageLocaleForWebExtensionContext:completionHandler:", v15, v19);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.detectLanguage()"), 0, CFSTR("it is not implemented"), a4, &v21);
    v8 = v21;
    v21 = 0;
    v22 = v8;
    v23 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v23 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34F9898[v23])(&v24, &v22);
    v23 = -1;
    v11 = v21;
    v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
}

void sub_197790EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12, int a13, int a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::captureVisibleWebpage(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4;
  NSString *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  WKSnapshotConfiguration *WeakRetained;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  void *v27;
  id v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;

  v4 = *((_QWORD *)this + 3);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x10000000) != 0)
  {
    v6 = 0;
    v28 = 0;
    goto LABEL_7;
  }
  WebKit::WebExtensionTab::mainWebView(this);
  v28 = (id)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    v6 = 1;
LABEL_7:
    v7 = *a2;
    *a2 = 0;
    v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v8 = MEMORY[0x1E0C809A0];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,UIImage *,NSError *)#1}::__invoke;
    v8[3] = &WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::descriptor;
    v8[4] = v7;
    v9 = _Block_copy(v8);

    if (v6)
    {
      objc_msgSend(v28, "bounds");
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;
      WeakRetained = objc_alloc_init(WKSnapshotConfiguration);
      -[WKSnapshotConfiguration setRect:](WeakRetained, "setRect:", v11, v13, v15, v17);
      v19 = _Block_copy(v9);
      objc_msgSend(v28, "takeSnapshotWithConfiguration:completionHandler:", WeakRetained, v19);
    }
    else
    {
      WeakRetained = (WKSnapshotConfiguration *)objc_loadWeakRetained((id *)this + 4);
      v24 = *((_QWORD *)this + 3);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
          v26 = (id *)(v25 - 16);
        else
          v26 = 0;
      }
      else
      {
        v26 = 0;
      }
      WebKit::WebExtension::wrapper(v26);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = _Block_copy(v9);
      -[WKSnapshotConfiguration captureVisibleWebpageForWebExtensionContext:completionHandler:](WeakRetained, "captureVisibleWebpageForWebExtensionContext:completionHandler:", v19, v27);

    }
    return;
  }
  WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.captureVisibleTab()"), 0, CFSTR("capture is unavailable for this tab"), v5, &v29);
  v20 = v29;
  v29 = 0;
  v30 = v20;
  v31 = 1;
  v21 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v31 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34F98C8[v31])(&v32, &v30);
  v31 = -1;
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
}

void sub_197791200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12, int a13, int a14, int a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v23 = v21;

  _Unwind_Resume(a1);
}

void sub_1977912C4()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x1977912B4);
}

void WebKit::WebExtensionTab::loadURL(WebKit::WebExtensionTab *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  id WeakRetained;
  WTF::StringImpl *v24;
  char v25;

  v5 = *((_QWORD *)this + 3);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x20000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    WTF::URL::operator NSURL *();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *((_QWORD *)this + 3);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        v17 = (id *)(v16 - 16);
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    WebKit::WebExtension::wrapper(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)this;
    v19 = *a3;
    *a3 = 0;
    v20 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v20 = MEMORY[0x1E0C809A0];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v20[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v20[4] = this;
    v20[5] = v19;
    v21 = _Block_copy(v20);

    v22 = _Block_copy(v21);
    objc_msgSend(WeakRetained, "loadURL:forWebExtensionContext:completionHandler:", v14, v18, v22);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x1E0C92C80];
    WTF::URL::operator NSURL *();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "requestWithURL:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (id)objc_msgSend(v6, "loadRequest:", v9);

    LOBYTE(v24) = 0;
    v25 = 0;
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v25)
    {
      v13 = v24;
      v24 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void sub_197791508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::reload(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id WeakRetained;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)this + 3);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x40000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v10 = *((_QWORD *)this + 3);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = (id *)(v11 - 16);
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    WebKit::WebExtension::wrapper(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)this;
    v14 = *a2;
    *a2 = 0;
    v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v15 = MEMORY[0x1E0C809A0];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v15[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v15[4] = this;
    v15[5] = v14;
    v16 = _Block_copy(v15);

    v17 = _Block_copy(v16);
    objc_msgSend(WeakRetained, "reloadForWebExtensionContext:completionHandler:", v13, v17);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "reload");

    LOBYTE(v19) = 0;
    v20 = 0;
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v20)
    {
      v9 = v19;
      v19 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_19779178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::reloadFromOrigin(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id WeakRetained;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)this + 3);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && (*(_DWORD *)((_BYTE *)this + 50) & 0x80000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v10 = *((_QWORD *)this + 3);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = (id *)(v11 - 16);
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    WebKit::WebExtension::wrapper(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)this;
    v14 = *a2;
    *a2 = 0;
    v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v15 = MEMORY[0x1E0C809A0];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v15[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v15[4] = this;
    v15[5] = v14;
    v16 = _Block_copy(v15);

    v17 = _Block_copy(v16);
    objc_msgSend(WeakRetained, "reloadFromOriginForWebExtensionContext:completionHandler:", v13, v17);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "reloadFromOrigin");

    LOBYTE(v19) = 0;
    v20 = 0;
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v20)
    {
      v9 = v19;
      v19 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_1977919EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::goBack(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id WeakRetained;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)this + 3);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && ((*(unsigned int *)((char *)this + 50) | ((unint64_t)*((unsigned __int8 *)this + 54) << 32)) & 0x100000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v10 = *((_QWORD *)this + 3);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = (id *)(v11 - 16);
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    WebKit::WebExtension::wrapper(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)this;
    v14 = *a2;
    *a2 = 0;
    v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v15 = MEMORY[0x1E0C809A0];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v15[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v15[4] = this;
    v15[5] = v14;
    v16 = _Block_copy(v15);

    v17 = _Block_copy(v16);
    objc_msgSend(WeakRetained, "goBackForWebExtensionContext:completionHandler:", v13, v17);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "goBack");

    LOBYTE(v19) = 0;
    v20 = 0;
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v20)
    {
      v9 = v19;
      v19 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_197791C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::goForward(WebKit::WebExtensionTab *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id WeakRetained;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)this + 3);
  if (v4
    && *(_QWORD *)(v4 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    && ((*(unsigned int *)((char *)this + 50) | ((unint64_t)*((unsigned __int8 *)this + 54) << 32)) & 0x200000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v10 = *((_QWORD *)this + 3);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = (id *)(v11 - 16);
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    WebKit::WebExtension::wrapper(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)this;
    v14 = *a2;
    *a2 = 0;
    v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v15 = MEMORY[0x1E0C809A0];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v15[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v15[4] = this;
    v15[5] = v14;
    v16 = _Block_copy(v15);

    v17 = _Block_copy(v16);
    objc_msgSend(WeakRetained, "goForwardForWebExtensionContext:completionHandler:", v13, v17);

  }
  else
  {
    WebKit::WebExtensionTab::mainWebView(this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "goForward");

    LOBYTE(v19) = 0;
    v20 = 0;
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v20)
    {
      v9 = v19;
      v19 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_197791EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::activate(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x400000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "activateForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_197792134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::select(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x800000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "selectForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_1977923D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::deselect(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x1000000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "deselectForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_197792674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionTab::duplicate(uint64_t a1, uint64_t a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5;
  id *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  id WeakRetained;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  WTF::StringImpl *v34;
  id *v35;
  int v36;
  char v37;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x2000000000) != 0)
  {
    if (*(_BYTE *)(a2 + 88))
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
          v15 = v14 - 16;
        else
          v15 = 0;
      }
      else
      {
        v15 = 0;
      }
      WebKit::WebExtensionContext::getWindow(v15, *(_QWORD *)(a2 + 80), 0, 0, 0, (uint64_t *)&v35);
    }
    else
    {
      WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)a1, &v35);
    }
    if (*(_BYTE *)(a2 + 104))
      v16 = *(_QWORD *)(a2 + 96);
    else
      v16 = WebKit::WebExtensionTab::index((WebKit::WebExtensionTab *)a1) + 1;
    v17 = -[_WKWebExtensionTabCreationOptions _init]([_WKWebExtensionTabCreationOptions alloc], "_init");
    v18 = v17;
    if (*(_BYTE *)(a2 + 153))
      v19 = *(_BYTE *)(a2 + 152) == 0;
    else
      v19 = 0;
    v20 = !v19;
    objc_msgSend(v17, "_setShouldActivate:", v20);
    if ((objc_msgSend(v18, "shouldActivate") & 1) != 0)
    {
      v21 = 1;
    }
    else
    {
      if (*(_BYTE *)(a2 + 155))
        v22 = *(_BYTE *)(a2 + 154) == 0;
      else
        v22 = 1;
      v21 = !v22;
    }
    objc_msgSend(v18, "_setShouldSelect:", v21);
    v23 = (uint64_t)v35;
    if (v35)
      WeakRetained = objc_loadWeakRetained(v35 + 4);
    else
      WeakRetained = 0;
    objc_msgSend(v18, "_setDesiredWindow:", WeakRetained);
    if (v23)

    objc_msgSend(v18, "_setDesiredIndex:", v16);
    v25 = objc_loadWeakRetained(v8);
    v26 = *(_QWORD *)(a1 + 24);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
        v28 = (id *)(v27 - 16);
      else
        v28 = 0;
    }
    else
    {
      v28 = 0;
    }
    WebKit::WebExtension::wrapper(v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v30 = *a3;
    *a3 = 0;
    v31 = malloc_type_malloc(0x38uLL, 0x10E0040CBD43D72uLL);
    *v31 = MEMORY[0x1E0C809A0];
    v31[1] = 50331650;
    v31[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto18_WKWebExtensionTab},NSError)#1}::__invoke;
    v31[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::descriptor;
    v31[4] = a1;
    v31[5] = a1;
    v31[6] = v30;
    v32 = _Block_copy(v31);

    v33 = _Block_copy(v32);
    objc_msgSend(v25, "duplicateForWebExtensionContext:withOptions:completionHandler:", v29, v18, v33);

    result = (WTF::StringImpl *)v35;
    v35 = 0;
    if (result)
      return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.duplicate()"), 0, CFSTR("it is not implemented"), a4, &v34);
    v9 = v34;
    v34 = 0;
    v35 = (id *)v9;
    v36 = 1;
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, id **))(*(_QWORD *)v10 + 16))(v10, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v36 != -1)
      ((void (*)(char *, id **))off_1E34F99F8[v36])(&v37, &v35);
    v36 = -1;
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197792A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionTab::close(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && ((*(unsigned int *)(a1 + 50) | ((unint64_t)*(unsigned __int8 *)(a1 + 54) << 32)) & 0x4000000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "closeForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.remove()"), 0, CFSTR("it is not implemented"), a4, &v22);
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_197792D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionTab::shouldGrantTabPermissionsOnUserGesture(WebKit::WebExtensionTab *this)
{
  uint64_t v1;
  id *v3;
  uint64_t v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 1;
  if (!*(_QWORD *)(v1 + 8))
    return 1;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || ((*(unsigned int *)((char *)this + 50) | (unint64_t)((uint64_t)*((char *)this + 54) << 32)) & 0x8000000000000000) == 0)
  {
    return 1;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "shouldGrantTabPermissionsOnUserGestureForWebExtensionContext:", v10);

  return v4;
}

void sub_197792E78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionTab::processes(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
  {
    WebKit::WebExtensionTab::mainWebView((WebKit::WebExtensionTab *)a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9
      && ((v11 = *(_QWORD *)(a1 + 24)) == 0
        ? (v13 = 0)
        : (v12 = *(_QWORD *)(v11 + 8)) != 0
        ? (v13 = v12 - 16)
        : (v13 = 0),
          objc_msgSend(v9, "_page"),
          (WebKit::WebExtensionContext::pageListensForEvent(v13, v19[0], a2, a3) & 1) != 0))
    {
      objc_msgSend(v10, "_page");
      v14 = *(_QWORD *)(v19[0] + 208);
      v15 = (unsigned int *)(v14 + 16);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v17 = *(_QWORD *)(v14 + 136);
      if ((!v17 || !*(_BYTE *)(v17 + 104)) && !*(_QWORD *)(v14 + 144))
      {
        *a4 = 0;
        goto LABEL_22;
      }
      v19[0] = v14;
      WTF::HashSet<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::HashSet(a4, v19, 1);
      v18 = v19[0];
      v19[0] = 0;
      if (v18)
      {
        v15 = (unsigned int *)(v18 + 16);
LABEL_22:
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
      }
    }
    else
    {
      *a4 = 0;
    }

    return;
  }
  *a4 = 0;
}

void sub_197792FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  if (a9)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(a9 + 16));

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setParentTab(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for setParentTab: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_19779326C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::pin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for pin: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197793584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unpin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for unpin: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_19779389C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::toggleReaderMode(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for toggleReaderMode: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.toggleReaderMode()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197793BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::mute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for mute: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197793ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::unmute(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for unmute: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_1977941E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::setZoomFactor(double,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for setZoomFactor: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.setZoom()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_1977944FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP8NSLocaleN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, id *a2)
{

}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP8NSLocaleN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSLocale *,NSError *)>::fromCallable<WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::detectWebpageLocale(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<NSLocale * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,NSLocale *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WebKit *v6;
  NSObject *v7;
  NSError *v8;
  NSString *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl *v17;
  char v18;
  _BYTE buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v6, v8);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Error for detectWebpageLocale: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v6, "localizedDescription");
    v9 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.detectLanguage()"), 0, v9, v10, &v17);
    v11 = v17;
    v17 = 0;
    *(_QWORD *)buf = v11;
    *(_DWORD *)&buf[8] = 1;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(char *, _BYTE *))off_1E34F9898[*(unsigned int *)&buf[8]])(&v18, buf);
    *(_DWORD *)&buf[8] = -1;
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }

  }
  else
  {
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object passed to completionHandler of detectWebpageLocaleForWebExtensionContext:completionHandler: is not an NSLocale"));
    }
    *(_QWORD *)buf = v5;
    *(_DWORD *)&buf[8] = 0;
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34F9898[*(unsigned int *)&buf[8]])(&v17, buf);
  }

}

void sub_19779489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16)
{
  void *v16;
  void *v17;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a16 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F9898[a16])(&a9, &a14);

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP7UIImageN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, id *a2)
{

}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP7UIImageN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtrArc<void ()(UIImage *,NSError *)>::fromCallable<WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::captureVisibleWebpage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<UIImage * {__strong},WTF::String> &&)> &&)::$_0)::{lambda(void *,UIImage *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WebKit *v6;
  NSObject *v7;
  NSError *v8;
  NSString *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl *v17;
  char v18;
  _BYTE buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v6, v8);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Error for captureVisibleWebpage: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v6, "localizedDescription");
    v9 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.captureVisibleTab()"), 0, v9, v10, &v17);
    v11 = v17;
    v17 = 0;
    *(_QWORD *)buf = v11;
    *(_DWORD *)&buf[8] = 1;
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(char *, _BYTE *))off_1E34F98C8[*(unsigned int *)&buf[8]])(&v18, buf);
    *(_DWORD *)&buf[8] = -1;
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }

  }
  else
  {
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object passed to completionHandler of captureVisibleWebpageForWebExtensionContext:completionHandler: is not an image"));
    }
    *(_QWORD *)buf = v5;
    *(_DWORD *)&buf[8] = 0;
    v15 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34F98C8[*(unsigned int *)&buf[8]])(&v17, buf);
  }

}

void sub_197794C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16)
{
  void *v16;
  void *v17;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a16 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F98C8[a16])(&a9, &a14);

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::loadURL(WTF::URL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for loadURL: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197794F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reload(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for reload: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.reload()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197795240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::reloadFromOrigin(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for reloadFromOrigin: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.reload()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197795558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goBack(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for goBack: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.goBack()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197795870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::goForward(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for goForward: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.goForward()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197795B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::activate(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for activate: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197795EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::select(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for select: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_1977961B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::deselect(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for deselect: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_1977964D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebKit15WebExtensionTabENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebKit15WebExtensionTabENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::duplicate(WTF::BlockPtrArc<void ()(objc_object  {objcproto18_WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto18_WKWebExtensionTab},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WebKit *v6;
  NSObject *v7;
  NSError *v8;
  NSString *v9;
  NSString *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  void *v22;
  WTF::StringImpl *v23;
  char v24;
  _BYTE buf[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v6, v8);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v22;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Error for duplicate: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v6, "localizedDescription");
    v9 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.duplicate()"), 0, v9, v10, &v23);
    v11 = v23;
    v23 = 0;
    *(_QWORD *)buf = v11;
    *(_DWORD *)&buf[8] = 1;
    v12 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(char *, _BYTE *))off_1E34F99F8[*(unsigned int *)&buf[8]])(&v24, buf);
    *(_DWORD *)&buf[8] = -1;
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }

  }
  else if (v5)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        v17 = (uint64_t *)(v16 - 16);
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    WebKit::WebExtensionContext::getOrCreateTab(v17, v5, (uint64_t)&v23);
    v19 = v23;
    ++*(_DWORD *)v23;
    *(_QWORD *)buf = v19;
    *(_DWORD *)&buf[8] = 0;
    v20 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(char *, _BYTE *))off_1E34F99F8[*(unsigned int *)&buf[8]])(&v24, buf);
    *(_DWORD *)&buf[8] = -1;
    v21 = v23;
    v23 = 0;
    if (v21)
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v21);
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_DWORD *)&buf[8] = 0;
    v18 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(v18, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34F99F8[*(unsigned int *)&buf[8]])(&v23, buf);
  }

}

void sub_1977968EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16)
{
  void *v16;
  void *v17;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a16 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34F99F8[a16])(&a9, &a14);

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionTab::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for tab close: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("tabs.remove()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_197796C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashSet<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_197796D90(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t **v2;

  if (*v2)
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    v19 = (unsigned int *)(v10 + 16);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = *v17;
    *v17 = v10;
    if (v21)
      result = (uint64_t *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v21 + 16));
    v22 = *v4;
    if (*v4)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v27 = *v4;
    if (*v4)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
      {
LABEL_29:
        result = WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(v4, v17);
        v17 = result;
        v27 = *v4;
        if (*v4)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
      }
    }
    else if (3 * v30 <= 4 * v29)
    {
      goto LABEL_29;
    }
    v26 = v27 + 8 * v30;
    v25 = 1;
    goto LABEL_34;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v6 - 4);
  v25 = 0;
  v26 = v6 + 8 * v24;
LABEL_34:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

WebKit::WebExtensionURLSchemeHandler *WebKit::WebExtensionURLSchemeHandler::WebExtensionURLSchemeHandler(WebKit::WebExtensionURLSchemeHandler *this, WebKit::WebExtensionController *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E34F9A58;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v4 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 6) = v4;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_197796FE4(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebURLSchemeHandler *v2;

  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebExtensionURLSchemeHandler *this, CFTypeRef *a2, CFTypeRef *a3)
{
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int i;
  uint64_t v20;
  WebKit::WebURLSchemeTask **v21;
  WebKit::WebURLSchemeTask *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;

  v6 = (void *)MEMORY[0x1E0CB34C8];
  ++*((_DWORD *)this + 2);
  CFRetain(a3[1]);
  CFRetain(a2[1]);
  v7 = malloc_type_malloc(0x50uLL, 0x10E004008FFF3F5uLL);
  *v7 = MEMORY[0x1E0C809A0];
  v7[1] = 50331650;
  v7[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::{lambda(void *)#1}::__invoke;
  v7[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::descriptor;
  v7[4] = this;
  v7[5] = this;
  v7[6] = a3;
  v7[7] = a3;
  v7[8] = a2;
  v7[9] = a2;
  v8 = _Block_copy(v7);

  v9 = _Block_copy(v8);
  objc_msgSend(v6, "blockOperationWithBlock:", v9);
  v30 = (id)objc_claimAutoreleasedReturnValue();

  CFRetain(a3[1]);
  v12 = *((_QWORD *)this + 7);
  v11 = (uint64_t *)((char *)this + 56);
  v10 = v12;
  if (v12
    || (WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::expand(v11),
        (v10 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  v15 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = (v17 >> 31) ^ v17;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v13;
    v21 = (WebKit::WebURLSchemeTask **)(v10 + 16 * v20);
    v22 = *v21;
    if (*v21 == (WebKit::WebURLSchemeTask *)-1)
    {
      v14 = v10 + 16 * v20;
      goto LABEL_10;
    }
    if (!v22)
      break;
    if (v22 == (WebKit::WebURLSchemeTask *)a3)
    {
      WTF::RetainPtr<NSBlockOperation>::operator=((const void **)(v10 + 16 * v20 + 8), v30);
      CFRelease(a3[1]);
      goto LABEL_23;
    }
LABEL_10:
    v18 = i + v20;
  }
  if (v14)
  {
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    --*(_DWORD *)(*v11 - 16);
    *(_QWORD *)v14 = a3;
  }
  else
  {
    *v21 = (WebKit::WebURLSchemeTask *)a3;
    v14 = v10 + 16 * v20;
  }
  WTF::RetainPtr<NSBlockOperation>::operator=((const void **)(v14 + 8), v30);
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
LABEL_22:
      WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::expand(v11);
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_22;
  }
LABEL_23:
  objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "addOperation:", v30);

}

void sub_197797268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionURLSchemeHandler::platformStopTask(WebKit::WebExtensionURLSchemeHandler *this, WebKit::WebPageProxy *a2, WebKit::WebURLSchemeTask *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  CFTypeRef cf;

  v4 = (uint64_t *)((char *)this + 56);
  v3 = *((_QWORD *)this + 7);
  v5 = WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WebKit::WebURLSchemeTask const*>(v3, (uint64_t)a3);
  v6 = (uint64_t *)v5;
  if (v3)
    v7 = v3 + 16 * *(unsigned int *)(v3 - 4);
  else
    v7 = 0;
  if (v7 == v5)
  {
    cf = 0;
    WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (cf)
      CFRelease(cf);
  }
  else
  {
    WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)(v5 + 8));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (*v4)
    {
      v9 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
      if ((uint64_t *)v9 == v6)
        goto LABEL_14;
    }
    else
    {
      if (!v6)
        goto LABEL_14;
      v9 = 0;
    }
    if ((uint64_t *)v9 != v6)
      WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::remove(v4, v6);
  }
LABEL_14:
  v10 = v8;
  objc_msgSend(v10, "cancel");

  if (v10)
    CFRelease(v10);
}

void sub_1977973F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionURLSchemeHandler::platformTaskCompleted(WebKit::WebExtensionURLSchemeHandler *this, WebKit::WebURLSchemeTask *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;

  v2 = (uint64_t *)((char *)this + 56);
  v3 = *((_QWORD *)this + 7);
  v4 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WebKit::WebURLSchemeTask const*>(v3, (uint64_t)a2);
  if (v3)
  {
    v5 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v5 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v5 = 0;
  }
  if (v5 != v4)
    WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::remove(v2, v4);
}

void WebKit::WebExtensionURLSchemeHandler::~WebExtensionURLSchemeHandler(WebKit::WebExtensionURLSchemeHandler *this, void *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E34F9A58;
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::deallocateTable(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E34F9A58;
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::deallocateTable(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);
  WTF::fastFree(v7, v8);
}

_DWORD *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *result;

  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  result = (_DWORD *)a1[5];
  a1[5] = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0>(WebKit::WebExtensionURLSchemeHandler::platformStartTask(WebKit::WebPageProxy &,WebKit::WebURLSchemeTask &)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t PartyForCookies;
  int v5;
  const WTF::StringImpl *v6;
  __int128 v7;
  CFTypeRef v8;
  uint64_t v9;
  StringImpl *v10;
  __int128 v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  const URL *v15;
  WTF *v16;
  const WTF::StringImpl *v17;
  const URL *v18;
  uint64_t v19;
  int v20;
  WebKit::WebURLSchemeTask *v21;
  void *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebKit::WebURLSchemeTask *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  __CFString *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  __CFString *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  void *v55;
  NSURLResponse *v56;
  WebKit::WebURLSchemeTask *v57;
  WTF::StringImpl *v58;
  CFTypeRef v59;
  uint64_t v60;
  NSData *v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  void *v65;
  unsigned int *v66;
  WebKit::WebURLSchemeTask *v67;
  WTF::StringImpl *v68;
  CFTypeRef v69;
  WTF::StringImpl *v70;
  WebKit::WebURLSchemeTask *v71;
  void *v72;
  WTF::StringImpl *v73;
  CFTypeRef v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WebKit::WebURLSchemeTask *v78;
  void *v79;
  WTF::StringImpl *v80;
  CFTypeRef v81;
  WTF::StringImpl *v82;
  WebKit::WebURLSchemeTask *v83;
  WTF::StringImpl *v84;
  CFTypeRef v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  StringImpl *m_ptr;
  WTF::StringImpl *result;
  unsigned int *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  CFTypeRef v101;
  char v102;
  CFTypeRef cf;
  CFTypeRef v104;
  WTF *v105;
  URL v106;
  CFTypeRef v107[24];
  CFTypeRef v108;
  const WTF::StringImpl *v109;
  __int128 v110;
  __int128 v111;
  _QWORD v112[4];
  _QWORD v113[5];

  v113[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 256)
                                                                        + 24));
  if (*(_QWORD *)v3 && *(_DWORD *)(*(_QWORD *)v3 + 4))
  {
    PartyForCookies = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 256)
                                                                                       + 24));
    v5 = 0;
  }
  else
  {
    WebKit::WebURLSchemeTask::request(*(WebKit::WebURLSchemeTask **)(a1 + 48), v107);
    PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)v107);
    v5 = 1;
  }
  v6 = *(const WTF::StringImpl **)PartyForCookies;
  if (*(_QWORD *)PartyForCookies)
    *(_DWORD *)v6 += 2;
  v109 = v6;
  v7 = *(_OWORD *)(PartyForCookies + 24);
  v110 = *(_OWORD *)(PartyForCookies + 8);
  v111 = v7;
  if (v5)
  {
    v8 = v108;
    v108 = 0;
    if (v8)
      CFRelease(v8);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v107);
  }
  WebKit::WebURLSchemeTask::request(*(WebKit::WebURLSchemeTask **)(a1 + 48), (CFTypeRef *)&v98);
  v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v98);
  v10 = *(StringImpl **)v9;
  if (*(_QWORD *)v9)
    *(_DWORD *)v10 += 2;
  v106.m_string.m_impl.m_ptr = v10;
  v11 = *(_OWORD *)(v9 + 8);
  *(_OWORD *)&v106.m_hostEnd = *(_OWORD *)(v9 + 24);
  *(_OWORD *)((char *)&v106 + 8) = v11;
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v98);
  v13 = *(_QWORD *)(v2 + 48);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
    v21 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1102, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEADCC0](&v98, v22);
    WebKit::WebURLSchemeTask::didComplete(v21, (const WebCore::ResourceError *)&v98);
    v24 = v101;
    v101 = 0;
    if (v24)
      CFRelease(v24);
    v25 = v100;
    v100 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v23);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v99;
    v99 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v98;
    v98 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v23);
      else
        *(_DWORD *)v27 -= 2;
    }
    goto LABEL_39;
  }
  WebKit::WebExtensionController::extensionContext((WebKit::WebExtensionController *)(v14 - 16), (const WTF::URL *)&v106, &v105);
  v16 = v105;
  if (!v105)
  {
    v29 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1102, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEADCC0](&v98, v22);
    WebKit::WebURLSchemeTask::didComplete(v29, (const WebCore::ResourceError *)&v98);
    v31 = v101;
    v101 = 0;
    if (v31)
      CFRelease(v31);
    v32 = v100;
    v100 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    v76 = v99;
    v99 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v30);
      else
        *(_DWORD *)v76 -= 2;
    }
    v77 = v98;
    v98 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v30);
      else
        *(_DWORD *)v77 -= 2;
    }
LABEL_39:

    goto LABEL_142;
  }
  if ((WTF::protocolHostAndPortAreEqual((WTF *)&v109, &v106, v15) & 1) == 0
    && (WebKit::WebExtension::isWebAccessibleResource(*((WebKit::WebExtension **)v16 + 7), (const WTF::URL *)&v106, (const WTF::URL *)&v109) & 1) == 0)
  {
    v71 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1102, 0);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEADCC0](&v98, v72);
    WebKit::WebURLSchemeTask::didComplete(v71, (const WebCore::ResourceError *)&v98);
    v74 = v101;
    v101 = 0;
    if (v74)
      CFRelease(v74);
    v75 = v100;
    v100 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v73);
      else
        *(_DWORD *)v75 -= 2;
    }
    v89 = v99;
    v99 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v73);
      else
        *(_DWORD *)v89 -= 2;
    }
    v90 = v98;
    v98 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v73);
      else
        *(_DWORD *)v90 -= 2;
    }
    goto LABEL_140;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 256) + 16)
    && WTF::equal((WTF *)v106.m_string.m_impl.m_ptr, v109, v17))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 48);
    if ((*(_BYTE *)(v19 + 80) & 1) != 0
      && (WTF::protocolHostAndPortAreEqual((WTF *)((char *)v16 + 72), (const URL *)(v19 + 72), v18) & 1) != 0)
    {
      v20 = 1;
      goto LABEL_46;
    }
    v83 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1008, 0);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEADCC0](&v98, v72);
    WebKit::WebURLSchemeTask::didComplete(v83, (const WebCore::ResourceError *)&v98);
    v85 = v101;
    v101 = 0;
    if (v85)
      CFRelease(v85);
    v86 = v100;
    v100 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v84);
      else
        *(_DWORD *)v86 -= 2;
    }
    v93 = v99;
    v99 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
        WTF::StringImpl::destroy(v93, v84);
      else
        *(_DWORD *)v93 -= 2;
    }
    v94 = v98;
    v98 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, v84);
      else
        *(_DWORD *)v94 -= 2;
    }
LABEL_140:

    goto LABEL_141;
  }
  v20 = 0;
LABEL_46:
  v33 = *((_QWORD *)v16 + 7);
  WTF::URL::path((WTF::URL *)&v106);
  if ((v34 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  if (v98)
    v35 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v35 = &stru_1E351F1B8;
  WebKit::WebExtension::resourceDataForPath(v33, v35, 0, 0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v38 = v98;
  v98 = 0;
  if (!v38)
  {
LABEL_53:
    if (v36)
      goto LABEL_54;
    goto LABEL_89;
  }
  if (*(_DWORD *)v38 != 2)
  {
    *(_DWORD *)v38 -= 2;
    goto LABEL_53;
  }
  WTF::StringImpl::destroy(v38, v37);
  if (v36)
  {
LABEL_54:
    if (v20)
    {
      WebKit::WebExtensionContext::getCurrentTab((uint64_t)v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32) + 744), 0, 0, &v98);
      v39 = v98;
      if (v98)
      {
        WebKit::WebExtensionContext::addExtensionTabPage(v16, *(WebKit::WebPageProxy **)(a1 + 64), (uint64_t **)v98);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v39);
      }
    }
    v40 = (void *)MEMORY[0x1E0CEC3F8];
    WTF::URL::operator NSURL *();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "pathExtension");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "typeWithFilenameExtension:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "preferredMIMEType");
    v44 = objc_claimAutoreleasedReturnValue();

    if (v44)
      v45 = (__CFString *)v44;
    else
      v45 = CFSTR("application/octet-stream");
    if (-[__CFString isEqualToString:](v45, "isEqualToString:", CFSTR("text/css")))
    {
      WebKit::WebExtension::localization(*((id **)v16 + 7));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v36, 4);
      objc_msgSend(v46, "localizedStringForString:", v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v48, "dataUsingEncoding:", 4);
      v49 = objc_claimAutoreleasedReturnValue();

      v36 = (void *)v49;
    }
    v50 = objc_alloc(MEMORY[0x1E0C92C18]);
    WTF::URL::operator NSURL *();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v113[0] = CFSTR("*");
    v112[0] = CFSTR("Access-Control-Allow-Origin");
    v112[1] = CFSTR("Content-Security-Policy");
    v52 = (uint64_t *)*((_QWORD *)v16 + 7);
    WebKit::WebExtension::populateContentSecurityPolicyStringsIfNeeded((WebKit::WebExtension *)v52);
    WTF::RetainPtr<__IOHIDDevice *>::get(v52 + 34);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v113[1] = v53;
    v112[2] = CFSTR("Content-Length");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%zu"), objc_msgSend(v36, "length"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v112[3] = CFSTR("Content-Type");
    v113[2] = v54;
    v113[3] = v45;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v113, v112, 4);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = (NSURLResponse *)objc_msgSend(v50, "initWithURL:statusCode:HTTPVersion:headerFields:", v51, 200, 0, v55);

    v57 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)&v98, v56);
    WebKit::WebURLSchemeTask::didReceiveResponse(v57, (const WebCore::ResourceResponse *)&v98);
    v59 = v104;
    v104 = 0;
    if (v59)
      CFRelease(v59);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v98, v58);
    v60 = *(_QWORD *)(a1 + 48);
    WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)v36, v61);
    v62 = WTF::fastMalloc((WTF *)0x38);
    MEMORY[0x19AEAD8A0](v62, &v98);
    v64 = (unsigned int *)v98;
    v97 = (unsigned int *)v62;
    v98 = 0;
    if (v64)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v64, v63);
    WebKit::WebURLSchemeTask::didReceiveData(v60, (uint64_t)&v97);
    v66 = v97;
    v97 = 0;
    if (v66)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v66, v65);
    v67 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v98, 0);
    v101 = 0;
    v102 = 1;
    WebKit::WebURLSchemeTask::didComplete(v67, (const WebCore::ResourceError *)&v98);
    v69 = v101;
    v101 = 0;
    if (v69)
      CFRelease(v69);
    v70 = v100;
    v100 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v68);
      else
        *(_DWORD *)v70 -= 2;
    }
    v87 = v99;
    v99 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v68);
      else
        *(_DWORD *)v87 -= 2;
    }
    v88 = v98;
    v98 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v68);
      else
        *(_DWORD *)v88 -= 2;
    }

    goto LABEL_129;
  }
LABEL_89:
  v78 = *(WebKit::WebURLSchemeTask **)(a1 + 48);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1100, 0);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEADCC0](&v98, v79);
  WebKit::WebURLSchemeTask::didComplete(v78, (const WebCore::ResourceError *)&v98);
  v81 = v101;
  v101 = 0;
  if (v81)
    CFRelease(v81);
  v82 = v100;
  v100 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v80);
    else
      *(_DWORD *)v82 -= 2;
  }
  v91 = v99;
  v99 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v80);
    else
      *(_DWORD *)v91 -= 2;
  }
  v92 = v98;
  v98 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, v80);
    else
      *(_DWORD *)v92 -= 2;
  }

  v36 = 0;
LABEL_129:

  v16 = v105;
  if (v105)
LABEL_141:
    CFRelease(*((CFTypeRef *)v16 + 1));
LABEL_142:
  m_ptr = v106.m_string.m_impl.m_ptr;
  v106.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v28);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  result = v109;
  v109 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197798014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45)
{
  void *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v46);

  if (a44)
    CFRelease(*(CFTypeRef *)(a44 + 8));
  if (a45)
  {
    if (*(_DWORD *)a45 == 2)
      WTF::StringImpl::destroy(a45, v49);
    else
      *(_DWORD *)a45 -= 2;
  }
  v50 = *(WTF::StringImpl **)(v47 - 192);
  *(_QWORD *)(v47 - 192) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  const void *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        v6 = (const void *)v4[1];
        v4[1] = 0;
        if (v6)
        {
          CFRelease(v6);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

const void **WTF::RetainPtr<NSBlockOperation>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_19779863C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (const void *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            CFRelease(v25);
            v26 = *v24;
            *v24 = 0;
            if (v26)
              CFRelease(*(CFTypeRef *)(v26 + 8));
          }
          else
          {
            *v24 = 0;
          }
          v27 = *v11;
          *v11 = 0;
          *v24 = v27;
          v28 = v4 + 16 * v9;
          WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)(v28 + 8));
          v29 = (void *)objc_claimAutoreleasedReturnValue();

          v24[1] = (uint64_t)v29;
          v30 = *(const void **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            CFRelease(v30);
          v31 = *v11;
          *v11 = 0;
          if (v31)
            CFRelease(*(CFTypeRef *)(v31 + 8));
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(const void **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            CFRelease(v14);
            v12 = *v11;
          }
          *v11 = 0;
          if (v12)
            CFRelease(*(CFTypeRef *)(v12 + 8));
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WebKit::WebURLSchemeTask const*>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(result + 16 * v6);
      if (v9 != -1)
      {
        if (!v9)
        {
          result += 16 * *(unsigned int *)(result - 4);
          return result;
        }
        if (v9 == a2)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    result += 16 * v8;
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *a2 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = (const void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v5)
    CFRelease(v5);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashMap<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::RetainPtr<NSBlockOperation>,WTF::DefaultHash<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTraits<WTF::RetainPtr<NSBlockOperation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>::rehash(a1, v10 >> 1);
  }
}

BOOL WebKit::validateDictionary(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  NSString *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  __CFString *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  NSString *v29;
  _BOOL8 v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  NSString *v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;

  v41 = a1;
  v40 = a2;
  v9 = a3;
  v10 = a4;
  v39 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithArray:", v9);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v9);
  v12 = objc_alloc(MEMORY[0x1E0C99E20]);
  objc_msgSend(v10, "allKeys");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v12, "initWithArray:", v13);

  objc_msgSend(v14, "minusSet:", v11);
  v48 = 0;
  v49 = &v48;
  v50 = 0x3032000000;
  v51 = __Block_byref_object_copy__14;
  v52 = __Block_byref_object_dispose__14;
  v53 = 0;
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = ___ZN6WebKit18validateDictionaryEP12NSDictionaryIP8NSStringP11objc_objectES2_P7NSArrayIS2_ES6_PU15__autoreleasingS2__block_invoke;
  v42[3] = &unk_1E34F9AB0;
  v15 = v11;
  v43 = v15;
  v16 = v14;
  v44 = v16;
  v17 = v10;
  v45 = v17;
  v47 = &v48;
  v18 = v39;
  v46 = v18;
  objc_msgSend(v41, "enumerateKeysAndObjectsUsingBlock:", v42);
  v19 = objc_msgSend(v18, "count");
  v21 = v49;
  if (v19 && !v49[5])
  {
    v37 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v18, "allObjects");
    v38 = (id)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v38, "count");
    if (v22)
    {
      if (v22 == 1)
      {
        v25 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v38, "firstObject");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "stringWithFormat:", CFSTR("'%@'"), v36);
        v24 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        if (v22 == 2)
        {
          v23 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v38, "firstObject");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "lastObject");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "stringWithFormat:", CFSTR("'%@' and '%@'"), v35, v33);
          v24 = (__CFString *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          objc_msgSend(v38, "subarrayWithRange:", 0, v22 - 1);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "componentsJoinedByString:", CFSTR("', '"));
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v38, "lastObject");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "stringWithFormat:", CFSTR("'%@', and '%@'"), v34, v32);
          v24 = (__CFString *)objc_claimAutoreleasedReturnValue();

        }
      }
    }
    else
    {
      v24 = &stru_1E351F1B8;
    }

    objc_msgSend(v37, "stringWithFormat:", CFSTR("it is missing required keys: %@"), v24);
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = (void *)v49[5];
    v49[5] = v27;

    v21 = v49;
  }
  v29 = (NSString *)v21[5];
  if (a5 && v29)
  {
    WebKit::toErrorString(0, v40, v29, v20);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
    v29 = (NSString *)v49[5];
  }
  v30 = v29 == 0;

  _Block_object_dispose(&v48, 8);
  return v30;
}

void sub_197798D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  _Block_object_dispose((const void *)(v31 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_197798E80()
{
  JUMPOUT(0x197798E5CLL);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void ___ZN6WebKit18validateDictionaryEP12NSDictionaryIP8NSStringP11objc_objectES2_P7NSArrayIS2_ES6_PU15__autoreleasingS2__block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  id obj;

  v7 = a2;
  v8 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v7) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 40), "containsObject:", v7) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    obj = *(id *)(v10 + 40);
    v11 = WebKit::validate(v7, v8, v9, &obj);
    objc_storeStrong((id *)(v10 + 40), obj);
    if ((v11 & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v7))
        objc_msgSend(*(id *)(a1 + 56), "removeObject:", v7);
    }
    else
    {
      *a4 = 1;
    }

  }
}

void sub_197798F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::validate(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  WebKit *v14;
  id v15;
  void (**v16)(void *, WebKit *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  WebKit *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  id v25;
  __CFString *obj;
  id v27;
  WebKit *v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD aBlock[5];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v29 = v7;
  v30 = v8;
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    objc_opt_class();
    v12 = v9;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v13 = v12;

      if (v13)
      {
        v27 = v7;
        v14 = (WebKit *)v8;
        v15 = v13;
        v28 = v14;
        if ((objc_msgSend(v15, "containsObject:", objc_opt_class()) & 1) != 0)
        {
          v11 = 1;
LABEL_29:

          goto LABEL_30;
        }
        v25 = v15;
        v36 = 0;
        v37 = &v36;
        v38 = 0x3032000000;
        v39 = __Block_byref_object_copy__14;
        v40 = __Block_byref_object_dispose__14;
        objc_msgSend(MEMORY[0x1E0CB37A0], "string");
        v41 = (id)objc_claimAutoreleasedReturnValue();
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZN6WebKitL11validateSetEP8NSStringP8NSObjectP12NSOrderedSetPU15__autoreleasingS1__block_invoke;
        aBlock[3] = &unk_1E34F9B48;
        aBlock[4] = &v36;
        v16 = (void (**)(void *, WebKit *, _QWORD))_Block_copy(aBlock);
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        obj = (__CFString *)v15;
        v17 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v31, v42, 16);
        if (v17)
        {
          LOBYTE(v11) = 0;
          v18 = *(_QWORD *)v32;
          do
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v32 != v18)
                objc_enumerationMutation(obj);
              v20 = *(WebKit **)(*((_QWORD *)&v31 + 1) + 8 * i);
              if ((objc_opt_respondsToSelector() & 1) != 0)
              {
                v16[2](v16, v20, 0);
                if ((WebKit::validateSingleObject(v27, v28, v20, 0) & 1) != 0)
                {
                  v11 = 1;
                  goto LABEL_27;
                }
              }
              else
              {
                v21 = objc_opt_class();
                -[WebKit firstObject](v20, "firstObject");
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                ((void (**)(void *, WebKit *, void *))v16)[2](v16, (WebKit *)v21, v22);

                v11 = 1;
                if ((WebKit::validateArray(v27, v28, v20, 0) & 1) != 0)
                  goto LABEL_27;
              }
            }
            v17 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v31, v42, 16);
          }
          while (v17);

          if (a4)
          {
            if ((v11 & 1) != 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                obj = CFSTR("an array of other values");
                WebKit::constructExpectedMessage((WebKit *)v27, (NSString *)v37[5], CFSTR("an array of other values"), 0);
                goto LABEL_26;
              }
            }
LABEL_25:
            WebKit::valueToTypeString(v28, v23);
            obj = (__CFString *)objc_claimAutoreleasedReturnValue();
            WebKit::constructExpectedMessage((WebKit *)v27, (NSString *)v37[5], &obj->isa, 0);
LABEL_26:
            v11 = 0;
            *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_27:

            goto LABEL_28;
          }
        }
        else
        {

          if (a4)
            goto LABEL_25;
        }
        v11 = 0;
LABEL_28:

        _Block_object_dispose(&v36, 8);
        v15 = v25;
        goto LABEL_29;
      }
    }
    else
    {

    }
    v11 = WebKit::validateSingleObject(v7, v8, (WebKit *)v12, (uint64_t)a4);
    goto LABEL_30;
  }
  v11 = WebKit::validateArray(v7, v8, v10, (uint64_t)a4);

LABEL_30:
  return v11;
}

void sub_1977993A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id WebKit::toErrorString(WebKit *this, NSString *a2, NSString *a3, NSString *a4, ...)
{
  WebKit *v6;
  NSString *v7;
  NSString *v8;
  id v9;
  NSString *v10;
  NSString *v11;
  NSString *v12;
  void *v13;
  NSString *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSString *v23;
  void *v24;
  void *v25;
  va_list va;

  va_start(va, a4);
  v6 = this;
  v7 = a2;
  v8 = a3;
  v9 = objc_alloc(MEMORY[0x1E0CB3940]);
  v10 = v8;
  if (-[NSString hasSuffix:](v10, "hasSuffix:", CFSTR(".")))
  {
    -[NSString substringToIndex:](v10, "substringToIndex:", -[NSString length](v10, "length") - 1);
    v11 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = v10;
  }
  v12 = v11;

  v13 = (void *)objc_msgSend(v9, "initWithFormat:arguments:", v12, va);
  if (-[WebKit length](v6, "length")
    && -[NSString length](v7, "length")
    && objc_msgSend(v13, "containsString:", CFSTR("value is invalid")))
  {

    v7 = 0;
  }
  if (-[WebKit length](v6, "length") && -[NSString length](v7, "length"))
  {
    v15 = (void *)MEMORY[0x1E0CB3940];
    WebKit::lowercaseFirst((WebKit *)v13, v14);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringWithFormat:", CFSTR("Invalid call to %@. The '%@' value is invalid, because %@."), v6, v7, v16);
    v17 = objc_claimAutoreleasedReturnValue();
LABEL_19:
    v25 = (void *)v17;

    v13 = v25;
    goto LABEL_20;
  }
  if (!-[WebKit length](v6, "length") && -[NSString length](v7, "length"))
  {
    v24 = (void *)MEMORY[0x1E0CB3940];
    WebKit::lowercaseFirst((WebKit *)v13, v23);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "stringWithFormat:", CFSTR("The '%@' value is invalid, because %@."), v7, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
  if (-[WebKit length](v6, "length"))
  {
    v18 = (void *)MEMORY[0x1E0CB3940];
    v19 = v13;
    if (objc_msgSend(v19, "length"))
    {
      objc_msgSend(v19, "substringToIndex:", 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "uppercaseString");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "substringFromIndex:", 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "stringByAppendingString:", v22);
      v16 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v16 = v19;
    }

    objc_msgSend(v18, "stringWithFormat:", CFSTR("Invalid call to %@. %@."), v6, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
LABEL_20:

  return v13;
}

void sub_1977996C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

BOOL WebKit::validateObject(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  NSString *v8;
  id v9;
  NSString *v10;
  NSString *v11;
  NSString *v12;
  id v14;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v14 = 0;
  WebKit::validate(0, v7, v9, &v14);
  v10 = (NSString *)v14;
  v12 = v10;
  if (a4 && v10)
  {
    WebKit::toErrorString(0, v8, v10, v11);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v12 == 0;
}

void sub_19779981C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

WebKit *WebKit::lowercaseFirst(WebKit *this, NSString *a2)
{
  WebKit *v2;
  void *v3;
  void *v4;
  void *v5;
  WebKit *v6;

  v2 = this;
  if (-[WebKit length](v2, "length"))
  {
    -[WebKit substringToIndex:](v2, "substringToIndex:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "lowercaseString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[WebKit substringFromIndex:](v2, "substringFromIndex:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringByAppendingString:", v5);
    v6 = (WebKit *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = v2;
  }

  return v6;
}

void sub_1977998D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

JSObjectRef WebKit::toJSError(WebKit *this, const OpaqueJSContext *a2, NSString *a3, NSString *a4, NSString *a5)
{
  const OpaqueJSContext *v8;
  NSString *v9;
  NSString *v10;
  NSString *v11;
  id v12;
  NSObject *v13;
  JSObjectRef Error;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  WebKit::toErrorString(v8, v9, v10, v11);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v13 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v16 = 138543362;
    *(_QWORD *)&v16[4] = v12;
    _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Exception thrown: %{public}@", v16, 0xCu);
  }
  *(_QWORD *)v16 = WebKit::toJSValueRef(this, v12, 1);
  Error = JSObjectMakeError(this, 1uLL, (const JSValueRef *)v16, 0);

  return Error;
}

void sub_197799A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

JSObjectRef WebKit::toJSRejectedPromise(WebKit *this, const OpaqueJSContext *a2, NSString *a3, NSString *a4, NSString *a5)
{
  const OpaqueJSContext *v8;
  NSString *v9;
  NSString *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  JSObjectRef v18;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v12 = WebKit::toJSError(this, v8, v9, v10, v11);
  if (v12)
  {
    v13 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "valueWithJSValueRef:inContext:", v12, v14);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v15 = (void *)MEMORY[0x1E0CBE108];
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "valueWithNewPromiseRejectedWithReason:inContext:", v12, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = JSValueToObject(this, (JSValueRef)objc_msgSend(v17, "JSValueRef"), 0);
  return v18;
}

void sub_197799BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id WebKit::toWebAPI(WebKit *this, NSLocale *a2)
{
  WebKit *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = this;
  -[WebKit languageCode](v2, "languageCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[WebKit countryCode](v2, "countryCode");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "length");

    if (v5)
    {
      v6 = (void *)MEMORY[0x1E0CB3940];
      -[WebKit languageCode](v2, "languageCode");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[WebKit countryCode](v2, "countryCode");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringWithFormat:", CFSTR("%@-%@"), v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      -[WebKit languageCode](v2, "languageCode");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_197799CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unint64_t WebKit::storageSizeOf(void *a1)
{
  unint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = (double *)&v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN6WebKit13storageSizeOfEP12NSDictionaryIP8NSStringS2_E_block_invoke;
  v3[3] = &unk_1E34F9AD8;
  v3[4] = &v4;
  objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:", v3);
  v1 = (unint64_t)v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_197799D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit13storageSizeOfEP12NSDictionaryIP8NSStringS2_E_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = objc_msgSend(v7, "lengthOfBytesUsingEncoding:", 4);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24)
                                                              + (double)(unint64_t)(objc_msgSend(v5, "lengthOfBytesUsingEncoding:", 4)+ v6);

}

void sub_197799E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t WebKit::anyItemsExceedQuota(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__14;
  v11 = __Block_byref_object_dispose__14;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN6WebKit19anyItemsExceedQuotaEP12NSDictionarymPU15__autoreleasingP8NSString_block_invoke;
  v6[3] = &unk_1E34F9B00;
  v6[5] = &v7;
  v6[6] = a2;
  v6[4] = &v13;
  objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:", v6);
  if (a3)
    *a3 = objc_retainAutorelease((id)v8[5]);
  v4 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v7, 8);

  _Block_object_dispose(&v13, 8);
  return v4;
}

void sub_197799F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19anyItemsExceedQuotaEP12NSDictionarymPU15__autoreleasingP8NSString_block_invoke(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v8 = a3;
  v9 = objc_msgSend(v10, "lengthOfBytesUsingEncoding:", 4);
  if ((unint64_t)(objc_msgSend(v8, "lengthOfBytesUsingEncoding:", 4) + v9) > a1[6])
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_197799FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t WebKit::validateArray(void *a1, void *a2, void *a3, uint64_t a4)
{
  WebKit *v7;
  id v8;
  id v9;
  WebKit *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSString *v20;
  NSObject *v21;
  NSString *v22;
  void *v23;
  void *v24;
  NSString *v25;
  NSObject *v26;
  NSString *v27;
  WebKit *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = (WebKit *)objc_msgSend(v9, "firstObject");
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v13 = v11;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v14)
    {
      v29 = v7;
      v15 = *(_QWORD *)v31;
LABEL_4:
      v16 = 0;
      while (1)
      {
        if (*(_QWORD *)v31 != v15)
          objc_enumerationMutation(v13);
        v17 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v16);
        if ((WebKit::validateSingleObject(0, v17, v10, 0) & 1) == 0)
          break;
        if (v14 == ++v16)
        {
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
          if (v14)
            goto LABEL_4;
          a4 = 1;
          goto LABEL_16;
        }
      }
      if (a4)
      {
        v18 = (void *)MEMORY[0x1E0CB3940];
        v7 = v29;
        WebKit::classToClassString(v10, (objc_class *)1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "stringWithFormat:", CFSTR("an array of %@"), v19);
        v20 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::valueToTypeString((WebKit *)v17, v21);
        v22 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::constructExpectedMessage(v29, v20, v22, (NSString *)1);
        *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue();

        a4 = 0;
        goto LABEL_17;
      }
LABEL_16:
      v7 = v29;
    }
    else
    {
      a4 = 1;
    }
LABEL_17:

  }
  else if (a4)
  {
    v23 = (void *)MEMORY[0x1E0CB3940];
    WebKit::classToClassString(v10, (objc_class *)1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "stringWithFormat:", CFSTR("an array of %@"), v24);
    v25 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::valueToTypeString((WebKit *)v8, v26);
    v27 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::constructExpectedMessage(v7, v25, v27, 0);
    *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }

  return a4;
}

void sub_19779A280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t WebKit::validateSingleObject(void *a1, void *a2, WebKit *a3, uint64_t a4)
{
  WebKit *v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  NSString *v12;
  NSObject *v13;
  NSString *v14;

  v7 = a1;
  v8 = a2;
  objc_opt_class();
  WTF::dynamic_objc_cast<NSNumber>(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 && (objc_msgSend(v9, "doubleValue"), objc_msgSend(v10, "doubleValue"), fabs(v11) == INFINITY))
  {
    if (a4)
      goto LABEL_12;
  }
  else if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!v10 || (WebKit *)objc_opt_class() == a3 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      a4 = 1;
      goto LABEL_14;
    }
    if (a4)
      goto LABEL_12;
  }
  else if (a4)
  {
LABEL_12:
    WebKit::classToClassString(a3, 0);
    v12 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::valueToTypeString((WebKit *)v8, v13);
    v14 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::constructExpectedMessage(v7, v12, v14, 0);
    *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }
LABEL_14:

  return a4;
}

void sub_19779A524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id WebKit::constructExpectedMessage(WebKit *this, NSString *a2, NSString *a3, NSString *a4)
{
  int v4;
  WebKit *v7;
  NSString *v8;
  NSString *v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  void *v15;

  v4 = (int)a4;
  v7 = this;
  v8 = a2;
  v9 = a3;
  if (!v4)
    goto LABEL_5;
  if (!-[WebKit length](v7, "length"))
  {
    if (!-[WebKit length](v7, "length"))
    {
      v10 = (void *)MEMORY[0x1E0CB3940];
      v14 = CFSTR("%@ is expected, but %@ was provided in the array");
      goto LABEL_10;
    }
LABEL_5:
    v12 = -[WebKit length](v7, "length");
    v10 = (void *)MEMORY[0x1E0CB3940];
    if (v12)
    {
      v11 = CFSTR("'%@' is expected to be %@, but %@ was provided");
      goto LABEL_7;
    }
    v14 = CFSTR("%@ is expected, but %@ was provided");
LABEL_10:
    objc_msgSend(v10, "stringWithFormat:", v14, v8, v9);
    v13 = objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  v10 = (void *)MEMORY[0x1E0CB3940];
  v11 = CFSTR("'%@' is expected to be %@, but %@ was provided in the array");
LABEL_7:
  objc_msgSend(v10, "stringWithFormat:", v11, v7, v8, v9);
  v13 = objc_claimAutoreleasedReturnValue();
LABEL_11:
  v15 = (void *)v13;

  return v15;
}

void sub_19779A660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__CFString *WebKit::classToClassString(WebKit *this, objc_class *a2)
{
  int v2;
  uint64_t *v4;
  id v5;
  __CFString *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v2 = (int)a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (qword_1ECE732A0 != -1)
    dispatch_once(&qword_1ECE732A0, &__block_literal_global_38);
  v4 = &_MergedGlobals_122;
  if (v2)
    v4 = &qword_1ECE73298;
  v5 = (id)*v4;
  objc_msgSend(v5, "objectForKey:", this);
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v14;
      v6 = CFSTR("unknown");
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v7);
          v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (-[WebKit isSubclassOfClass:](this, "isSubclassOfClass:", v11, (_QWORD)v13))
          {
            objc_msgSend(v7, "objectForKey:", v11);
            v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
            goto LABEL_17;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v8)
          continue;
        break;
      }
    }
    else
    {
      v6 = CFSTR("unknown");
    }
LABEL_17:

  }
  return v6;
}

void sub_19779A810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *WebKit::valueToTypeString(WebKit *this, NSObject *a2)
{
  WebKit *v2;
  void *v3;
  void *v4;
  double v5;
  __CFString *v6;
  void *v7;
  void *v8;
  WebKit *v9;

  v2 = this;
  objc_opt_class();
  WTF::dynamic_objc_cast<NSNumber>(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
  {
    objc_opt_class();
    WTF::dynamic_objc_cast<JSValue>(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      if ((objc_msgSend(v7, "isUndefined") & 1) != 0)
      {
        v6 = CFSTR("undefined");
LABEL_13:

        goto LABEL_14;
      }
      if ((objc_msgSend(v8, "_isRegularExpression") & 1) != 0)
      {
        v6 = CFSTR("a regular expression");
        goto LABEL_13;
      }
      if ((objc_msgSend(v8, "_isThenable") & 1) != 0)
      {
        v6 = CFSTR("a promise");
        goto LABEL_13;
      }
      if (objc_msgSend(v8, "_isFunction"))
      {
        v6 = CFSTR("a function");
        goto LABEL_13;
      }
    }

    goto LABEL_16;
  }
  objc_msgSend(v3, "doubleValue");
  objc_msgSend(v4, "doubleValue");
  if (fabs(v5) != INFINITY)
  {
LABEL_16:

    v9 = (WebKit *)objc_opt_class();
    WebKit::classToClassString(v9, 0);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  v6 = CFSTR("Infinity");
LABEL_14:

LABEL_17:
  return v6;
}

void sub_19779A980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKitL18classToClassStringEP10objc_classb_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_MergedGlobals_122;
  _MergedGlobals_122 = v0;

  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("a BOOLean"), objc_opt_class());
  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("a number"), objc_opt_class());
  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("a string"), objc_opt_class());
  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("a value"), objc_opt_class());
  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("null"), objc_opt_class());
  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("an array"), objc_opt_class());
  objc_msgSend((id)_MergedGlobals_122, "setObject:forKey:", CFSTR("an object"), objc_opt_class());
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECE73298;
  qword_1ECE73298 = v2;

  objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("BOOLeans"), objc_opt_class());
  objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("numbers"), objc_opt_class());
  objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("strings"), objc_opt_class());
  objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("values"), objc_opt_class());
  objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("null values"), objc_opt_class());
  objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("arrays"), objc_opt_class());
  return objc_msgSend((id)qword_1ECE73298, "setObject:forKey:", CFSTR("objects"), objc_opt_class());
}

void ___ZN6WebKitL11validateSetEP8NSStringP8NSObjectP12NSOrderedSetPU15__autoreleasingS1__block_invoke(uint64_t a1, WebKit *a2, WebKit *a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;

  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "length"))
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendString:", CFSTR(" or "));
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  WebKit::classToClassString(a2, 0);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "appendString:");

  if (a3)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendString:", CFSTR(" of "));
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    WebKit::classToClassString(a3, (objc_class *)1);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "appendString:");

  }
}

void sub_19779ACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionWindow::WebExtensionWindow(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unsigned int *v6;
  unsigned int v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;

  v5 = a3;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = v6;
  objc_initWeak((id *)(a1 + 32), v5);
  *(_WORD *)(a1 + 40) &= 0xFFF8u;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = 8;
  else
    v8 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFF7 | v8;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v9 = 16;
  else
    v9 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFEF | v9;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v10 = 32;
  else
    v10 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFDF | v10;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v11 = 64;
  else
    v11 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFFBF | v11;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v12 = 128;
  else
    v12 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFF7F | v12;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v13 = 256;
  else
    v13 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFEFF | v13;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v14 = 512;
  else
    v14 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFDFF | v14;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v15 = 1024;
  else
    v15 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xFBFF | v15;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v16 = 2048;
  else
    v16 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xF7FF | v16;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v17 = 4096;
  else
    v17 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xEFFF | v17;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v18 = 0x2000;
  else
    v18 = 0;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 40) & 0xDFFF | v18;

  return a1;
}

void sub_19779AF90(_Unwind_Exception *a1, void *a2)
{
  void *v2;
  unsigned int **v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::parameters(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  WebKit::WebExtensionTab **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  void *v30;
  WTF *v31;
  uint64_t v32;
  WebKit::WebExtensionTab **v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37[2];
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  CGRect v42;

  v35 = 0;
  v36 = 0;
  if (a2)
  {
    WebKit::WebExtensionWindow::tabs((uint64_t)this, 0, (uint64_t *)&v33);
    v31 = 0;
    v32 = 0;
    if (v34)
    {
      if (v34 >= 0x1745D18)
      {
        __break(0xC471u);
        return;
      }
      LODWORD(v32) = 176 * v34 / 0xB0;
      v31 = (WTF *)WTF::fastMalloc((WTF *)(176 * v34));
      if (v34)
      {
        v7 = v33;
        v8 = 8 * v34;
        do
        {
          WebKit::WebExtensionTab::parameters(*v7, (uint64_t)v37);
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t *)&v31, (uint64_t)v37);
          if (v41)
          {
            v9 = v40;
            v40 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v6);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          if (v39)
          {
            v10 = v38;
            v38 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v6);
              else
                *(_DWORD *)v10 -= 2;
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
    }
    if (HIDWORD(v36))
      WTF::VectorDestructor<true,WebKit::WebExtensionTabParameters>::destruct((uint64_t)v35, (WTF *)((char *)v35 + 176 * HIDWORD(v36)));
    v11 = v35;
    if (v35)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      WTF::fastFree(v11, v6);
    }
    v35 = v31;
    v12 = v32;
    v31 = 0;
    v32 = 0;
    v36 = v12;
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v6);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v13);
  }
  v14 = WebKit::WebExtensionWindow::frame((WebKit::WebExtensionWindow *)this);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  *(_QWORD *)a3 = this[2];
  *(_BYTE *)(a3 + 8) = 1;
  *(_BYTE *)(a3 + 16) = WebKit::WebExtensionWindow::state((WebKit::WebExtensionWindow *)this);
  *(_BYTE *)(a3 + 17) = 1;
  *(_BYTE *)(a3 + 18) = WebKit::WebExtensionWindow::type((WebKit::WebExtensionWindow *)this);
  *(_BYTE *)(a3 + 19) = 1;
  if (a2)
  {
    *(_QWORD *)(a3 + 24) = v35;
    v21 = v36;
    v35 = 0;
    v36 = 0;
    *(_QWORD *)(a3 + 32) = v21;
    v22 = 1;
  }
  else
  {
    v22 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  *(_BYTE *)(a3 + 40) = v22;
  v42.origin.x = v14;
  v42.origin.y = v16;
  v42.size.width = v18;
  v42.size.height = v20;
  if (CGRectIsNull(v42))
  {
    v23 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
  else
  {
    *(double *)(a3 + 48) = v14;
    *(CGFloat *)(a3 + 56) = v16;
    v23 = 1;
    *(CGFloat *)(a3 + 64) = v18;
    *(CGFloat *)(a3 + 72) = v20;
  }
  *(_BYTE *)(a3 + 80) = v23;
  v24 = this[3];
  if (v24
    && v24[1]
    && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL(this + 4)
    && ((v25 = this[3]) == 0 ? (v27 = 0) : (v26 = v25[1]) != 0 ? (v27 = v26 - 16) : (v27 = 0),
        *(_BYTE *)(v27 + 520)))
  {
    WebKit::WebExtensionContext::getWindow(v27, *(_QWORD *)(v27 + 512), 0, 0, 0, v37);
    v28 = v37[0];
    v29 = v37[0] == (_QWORD)this;
    v37[0] = 0;
    if (v28)
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v28);
  }
  else
  {
    v29 = 0;
  }
  *(_BYTE *)(a3 + 88) = v29;
  *(_BYTE *)(a3 + 89) = 1;
  *(_BYTE *)(a3 + 90) = WebKit::WebExtensionWindow::isPrivate((WebKit::WebExtensionWindow *)this);
  *(_BYTE *)(a3 + 91) = 1;
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v30);
}

void sub_19779B2C8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,WTF::StringImpl *a23,char a24)
{
  void *v25;
  void *v26;

  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v25);
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v26);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::tabs(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  id *v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE buf[12];
  __int16 v42;
  id v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4
    || !*(_QWORD *)(v4 + 8)
    || (v7 = (id *)(a1 + 32),
        !WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    || (~*(unsigned __int16 *)(a1 + 40) & 0x18) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  WeakRetained = objc_loadWeakRetained(v7);
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (id *)(v10 - 16);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  WebKit::WebExtension::wrapper(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "tabsForWebExtensionContext:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Object returned by tabsForWebExtensionContext: is not an array"));
  if (!objc_msgSend(v13, "count"))
  {
    *a3 = 0;
    a3[1] = 0;
LABEL_46:

    return;
  }
  v39 = 0;
  v40 = 0;
  v14 = objc_msgSend(v13, "count");
  if (!v14)
  {
LABEL_17:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v15 = v13;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v36 != v17)
            objc_enumerationMutation(v15);
          v19 = *(_QWORD *)(a1 + 24);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
              v21 = (uint64_t *)(v20 - 16);
            else
              v21 = 0;
          }
          else
          {
            v21 = 0;
          }
          WebKit::WebExtensionContext::getOrCreateTab(v21, *(void **)(*((_QWORD *)&v35 + 1) + 8 * i), (uint64_t)buf);
          LODWORD(v22) = HIDWORD(v40);
          if (HIDWORD(v40) == (_DWORD)v40)
          {
            v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)buf);
            v22 = HIDWORD(v40);
            v24 = v39;
            v25 = *v23;
            *v23 = 0;
            *(_QWORD *)(v24 + 8 * v22) = v25;
          }
          else
          {
            v26 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            *(_QWORD *)(v39 + 8 * HIDWORD(v40)) = v26;
          }
          HIDWORD(v40) = v22 + 1;
          v27 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v27)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v27);
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
      }
      while (v16);
    }

    if ((a2 & 1) == 0)
    {
      WebKit::WebExtensionWindow::activeTab(a1, 1, &v34);
      v30 = v34;
      if (!v34 || !HIDWORD(v40))
      {
LABEL_42:
        v32 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          if (v30)
            v33 = objc_loadWeakRetained((id *)(v30 + 32));
          else
            v33 = 0;
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v33;
          v42 = 2114;
          v43 = v15;
          _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "Array returned by tabsForWebExtensionContext: does not contain the active tab; %{public}@ not in %{public}@",
            buf,
            0x16u);
          if (v30)

        }
        *a3 = 0;
        a3[1] = 0;
        if (v30)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v30);
        goto LABEL_45;
      }
      v31 = 0;
      while ((WebKit::WebExtensionTab::operator==(v30, *(_QWORD *)(v39 + 8 * v31)) & 1) == 0)
      {
        if (++v31 >= (unint64_t)HIDWORD(v40))
          goto LABEL_42;
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref(v30);
    }
    *a3 = v39;
    v29 = v40;
    v39 = 0;
    v40 = 0;
    a3[1] = v29;
LABEL_45:
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v28);
    goto LABEL_46;
  }
  if (!(v14 >> 29))
  {
    LODWORD(v40) = v14;
    v39 = WTF::fastMalloc((WTF *)(8 * v14));
    goto LABEL_17;
  }
  __break(0xC471u);
}

void sub_19779B730(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionWindow::state(WebKit::WebExtensionWindow *this)
{
  uint64_t v1;
  id *v3;
  unsigned __int8 v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  unint64_t v11;

  v1 = *((_QWORD *)this + 3);
  if (v1
    && *(_QWORD *)(v1 + 8)
    && (v3 = (id *)((char *)this + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
    && (*((_WORD *)this + 20) & 0x40) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v3);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (id *)(v8 - 16);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebKit::WebExtension::wrapper(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(WeakRetained, "windowStateForWebExtensionContext:", v10);
    if (v11 >= 4)
      v4 = 0;
    else
      v4 = v11;

  }
  else
  {
    return 0;
  }
  return v4;
}

void sub_19779B860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionWindow::type(WebKit::WebExtensionWindow *this)
{
  uint64_t v1;
  id *v3;
  _BOOL8 v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*((_WORD *)this + 20) & 0x20) == 0)
  {
    return 0;
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(WeakRetained, "windowTypeForWebExtensionContext:", v10) == 1;

  return v4;
}

void sub_19779B928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionWindow::isPrivate(WebKit::WebExtensionWindow *this)
{
  unsigned int v1;
  uint64_t v3;
  _BOOL8 result;
  id WeakRetained;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  void *v9;
  __int16 v10;

  v1 = *((unsigned __int16 *)this + 20);
  if ((v1 & 4) == 0)
  {
    v3 = *((_QWORD *)this + 3);
    if (!v3 || !*(_QWORD *)(v3 + 8))
      return 0;
    result = WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4);
    if (!result)
      return result;
    if ((*((_WORD *)this + 20) & 0x100) == 0)
      return 0;
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = (id *)(v7 - 16);
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    WebKit::WebExtension::wrapper(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(WeakRetained, "isUsingPrivateBrowsingForWebExtensionContext:", v9))
      v10 = 2;
    else
      v10 = 0;
    *((_WORD *)this + 20) = *((_WORD *)this + 20) & 0xFFFD | v10;

    v1 = *((unsigned __int16 *)this + 20);
    *((_WORD *)this + 20) = v1 | 4;
  }
  return (v1 >> 1) & 1;
}

void sub_19779BA18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionWindow::matches(WebKit::WebExtensionWindow *a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;

  if (WebKit::WebExtensionWindow::isPrivate(a1))
  {
    v4 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    v5 = v4 ? v4 - 16 : 0;
    if (!*(_BYTE *)(v5 + 249))
      return 0;
  }
  if (WebKit::WebExtensionWindow::type(a1))
    return (a2 >> 1) & 1;
  return a2 & 1;
}

uint64_t WebKit::WebExtensionWindow::matches(WebKit::WebExtensionWindow *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int isFrontmost;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebExtensionWindow *v18;
  uint64_t v19;

  if (WebKit::WebExtensionWindow::isPrivate(a1))
  {
    v8 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    v9 = v8 ? v8 - 16 : 0;
    if (!*(_BYTE *)(v9 + 249))
      return 0;
  }
  if (*(_BYTE *)(a2 + 48) && *((_QWORD *)a1 + 2) != *(_QWORD *)(a2 + 40))
    return 0;
  if (!*(_BYTE *)(a2 + 57) || (result = WebKit::WebExtensionWindow::matches(a1, *(_BYTE *)(a2 + 56)), (_DWORD)result))
  {
    if (!*(_BYTE *)(a2 + 61))
      goto LABEL_27;
    isFrontmost = WebKit::WebExtensionWindow::isFrontmost(a1);
    if (!*(_BYTE *)(a2 + 61))
    {
      v18 = (WebKit::WebExtensionWindow *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebKit::WebExtensionWindow::isFrontmost(v18);
    }
    if (*(unsigned __int8 *)(a2 + 60) == isFrontmost)
    {
LABEL_27:
      if (!*(_BYTE *)(a2 + 59))
        return 1;
      v12 = *((_QWORD *)a1 + 3);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = v13 ? v13 - 16 : 0;
      }
      else
      {
        v14 = 0;
      }
      WebKit::WebExtensionContext::getWindow(v14, -3, a3, a4, 0, &v19);
      v15 = v19;
      if (v19)
      {
        v16 = *((_QWORD *)a1 + 2);
        v17 = *(_QWORD *)(v19 + 16);
        v19 = 0;
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v15);
        if (v16 == v17)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL WebKit::WebExtensionWindow::isFrontmost(WebKit::WebExtensionWindow *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  WebKit::WebExtensionWindow *v9;

  v1 = *((_QWORD *)this + 3);
  if (!v1
    || !*(_QWORD *)(v1 + 8)
    || !WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4))
  {
    return 0;
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = v4 ? v4 - 16 : 0;
  }
  else
  {
    v5 = 0;
  }
  if (!*(_DWORD *)(v5 + 508))
    return 0;
  WebKit::WebExtensionContext::getWindow(v5, **(_QWORD **)(v5 + 496), 0, 0, 0, (uint64_t *)&v9);
  v6 = (uint64_t)v9;
  v7 = v9 == this;
  v9 = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v6);
  return v7;
}

void WebKit::WebExtensionWindow::activeTab(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  id *v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4
    || !*(_QWORD *)(v4 + 8)
    || (v7 = (id *)(a1 + 32),
        !WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    || (~*(unsigned __int16 *)(a1 + 40) & 0x18) != 0)
  {
    *a3 = 0;
    return;
  }
  WeakRetained = objc_loadWeakRetained(v7);
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (id *)(v10 - 16);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  WebKit::WebExtension::wrapper(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "activeTabForWebExtensionContext:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
        v16 = (uint64_t *)(v15 - 16);
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    WebKit::WebExtensionContext::getOrCreateTab(v16, v13, (uint64_t)&v34);
    if ((a2 & 1) == 0)
    {
      WebKit::WebExtensionWindow::tabs(&v32, a1, 1);
      v18 = v33;
      if (!v33)
      {
LABEL_23:
        v20 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v23 = objc_loadWeakRetained((id *)(v34 + 32));
          v24 = objc_loadWeakRetained(v7);
          v25 = *(_QWORD *)(a1 + 24);
          if (v25)
          {
            v27 = *(_QWORD *)(v25 + 8);
            if (v27)
              v26 = (id *)(v27 - 16);
            else
              v26 = 0;
          }
          else
          {
            v26 = 0;
          }
          WebKit::WebExtension::wrapper(v26);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "tabsForWebExtensionContext:", v28);
          v29 = objc_claimAutoreleasedReturnValue();
          v30 = (void *)v29;
          v31 = MEMORY[0x1E0C9AA60];
          if (v29)
            v31 = v29;
          *(_DWORD *)buf = 138543618;
          v36 = v23;
          v37 = 2114;
          v38 = v31;
          _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "Array returned by tabsForWebExtensionContext: does not contain the active tab; %{public}@ not in %{public}@",
            buf,
            0x16u);

        }
        *a3 = 0;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v21);
        v22 = v34;
        v34 = 0;
        if (v22)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v22);
        goto LABEL_28;
      }
      v19 = v32;
      while (*v19 != v34)
      {
        ++v19;
        if (!--v18)
          goto LABEL_23;
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v17);
    }
    *a3 = v34;
  }
  else
  {
    *a3 = 0;
  }
LABEL_28:

}

void sub_19779BEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v18;
  uint64_t v19;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v18);
  v19 = a12;
  a12 = 0;
  if (v19)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v19);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::setState(uint64_t a1, int a2, uint64_t *a3, NSString *a4)
{
  uint64_t v5;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  id WeakRetained;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v8 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (~*(unsigned __int16 *)(a1 + 40) & 0xC0) == 0)
  {
    WeakRetained = objc_loadWeakRetained(v8);
    if ((a2 - 1) < 3)
      v9 = (a2 - 1) + 1;
    else
      v9 = 0;
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v12 = (id *)(v11 - 16);
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    WebKit::WebExtension::wrapper(v12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v19 = *a3;
    *a3 = 0;
    v20 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v20 = MEMORY[0x1E0C809A0];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v20[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v20[4] = a1;
    v20[5] = v19;
    v21 = _Block_copy(v20);

    v22 = _Block_copy(v21);
    objc_msgSend(WeakRetained, "setWindowState:forWebExtensionContext:completionHandler:", v9, v18, v22);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, CFSTR("it is not implemented for 'state'"), a4, &v24);
    v13 = v24;
    v24 = 0;
    v25 = v13;
    v26 = 1;
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v26)
    {
      v16 = v25;
      v25 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void sub_19779C178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionWindow::isOpen(WebKit::WebExtensionWindow *this)
{
  uint64_t v1;

  return (*((_WORD *)this + 20) & 1) != 0
      && (v1 = *((_QWORD *)this + 3)) != 0
      && *(_QWORD *)(v1 + 8)
      && WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4);
}

void WebKit::WebExtensionWindow::focus(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_WORD *)(a1 + 40) & 0x1000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "focusForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, CFSTR("it is not implemented for 'focused'"), a4, &v22);
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_19779C438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

double WebKit::WebExtensionWindow::frame(WebKit::WebExtensionWindow *this)
{
  uint64_t v1;
  id *v3;
  double v4;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  void *v10;
  CGRect v11;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return *MEMORY[0x1E0C9D628];
  if (!*(_QWORD *)(v1 + 8))
    return *MEMORY[0x1E0C9D628];
  v3 = (id *)((char *)this + 32);
  if (!WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)this + 4)
    || (*((_WORD *)this + 20) & 0x200) == 0)
  {
    return *MEMORY[0x1E0C9D628];
  }
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (id *)(v8 - 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  WebKit::WebExtension::wrapper(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "frameForWebExtensionContext:", v10);
  *(_QWORD *)&v4 = (unint64_t)CGRectStandardize(v11);

  return v4;
}

void sub_19779C5CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::setFrame(uint64_t a1, uint64_t *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, NSString *a8)
{
  uint64_t v9;
  id *v15;
  double x;
  double y;
  double width;
  double height;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  id WeakRetained;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  char v36;
  CGRect v37;
  CGRect v38;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9
    && *(_QWORD *)(v9 + 8)
    && (v15 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (~*(unsigned __int16 *)(a1 + 40) & 0x600) == 0)
  {
    v37.origin.x = a3;
    v37.origin.y = a4;
    v37.size.width = a5;
    v37.size.height = a6;
    v38 = CGRectStandardize(v37);
    x = v38.origin.x;
    y = v38.origin.y;
    width = v38.size.width;
    height = v38.size.height;
    WeakRetained = objc_loadWeakRetained(v15);
    v20 = *(_QWORD *)(a1 + 24);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
        v22 = (id *)(v21 - 16);
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
    WebKit::WebExtension::wrapper(v22);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v29 = *a2;
    *a2 = 0;
    v30 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v30 = MEMORY[0x1E0C809A0];
    v30[1] = 50331650;
    v30[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v30[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v30[4] = a1;
    v30[5] = v29;
    v31 = _Block_copy(v30);

    v32 = _Block_copy(v31);
    objc_msgSend(WeakRetained, "setFrame:forWebExtensionContext:completionHandler:", v28, v32, x, y, width, height);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, CFSTR("it is not implemented for 'top', 'left', 'width', and 'height'"), a8, &v34);
    v23 = v34;
    v34 = 0;
    v35 = v23;
    v36 = 1;
    v24 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v24 + 16))(v24, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (v36)
    {
      v26 = v35;
      v35 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    v27 = v34;
    v34 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
}

void sub_19779C830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionWindow::close(uint64_t a1, uint64_t *a2, uint64_t a3, NSString *a4)
{
  uint64_t v5;
  id *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id WeakRetained;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5
    && *(_QWORD *)(v5 + 8)
    && (v7 = (id *)(a1 + 32),
        WTF::WeakObjCPtrArc<NSObject  {objcproto21_WKWebExtensionWindow}>::operator BOOL((id *)(a1 + 32)))
    && (*(_WORD *)(a1 + 40) & 0x2000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v7);
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (id *)(v14 - 16);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    WebKit::WebExtension::wrapper(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ++*(_DWORD *)a1;
    v17 = *a2;
    *a2 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v18[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v18[4] = a1;
    v18[5] = v17;
    v19 = _Block_copy(v18);

    v20 = _Block_copy(v19);
    objc_msgSend(WeakRetained, "closeForWebExtensionContext:completionHandler:", v16, v20);

  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.remove()"), 0, CFSTR("it is not implemented"), a4, &v22);
    v8 = v22;
    v22 = 0;
    v23 = v8;
    v24 = 1;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v24)
    {
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_19779CAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setState(WebKit::WebExtensionWindow::State,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for setWindowState: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_19779CDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::focus(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for window focus: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_19779D0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::setFrame(CGRect,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for setFrame: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.update()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_19779D3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionWindow::close(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  WebKit *v3;
  NSObject *v4;
  NSError *v5;
  NSString *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      WebKit::privacyPreservingDescription(v3, v5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Error for window close: %{public}@", buf, 0xCu);

    }
    -[WebKit localizedDescription](v3, "localizedDescription");
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::toWebExtensionError<>((WebKit *)CFSTR("windows.remove()"), 0, v6, v7, &v17);
    v8 = v17;
    v17 = 0;
    *(_QWORD *)buf = v8;
    buf[8] = 1;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (buf[8])
    {
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }

  }
  else
  {
    buf[0] = 0;
    buf[8] = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (buf[8])
    {
      v14 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }

}

void sub_19779D700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebFullScreenManager::didReceiveWebFullScreenManagerMessage(uint64_t this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[20];

  v3 = this;
  ++*(_DWORD *)(this + 16);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6AE:
      this = WebKit::WebFullScreenManager::didEnterFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    case 0x6AF:
      this = WebKit::WebFullScreenManager::didExitFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    case 0x6B0:
      this = WebKit::WebFullScreenManager::requestExitFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    case 0x6B1:
      this = IPC::handleMessageAsync<Messages::WebFullScreenManager::RequestRestoreFullScreen,WebKit::WebFullScreenManager,WebKit::WebFullScreenManager,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, this, (void (*)(_QWORD *, _QWORD **))WebKit::WebFullScreenManager::requestRestoreFullScreen, 0);
      break;
    case 0x6B2:
      this = WebKit::WebFullScreenManager::restoreScrollPosition(this);
      break;
    case 0x6B3:
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 72) + 48) + 160);
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v4 + 56))(v4, a2);
      this = WebCore::ScrollableArea::visibleContentRect();
      *(_QWORD *)(v3 + 56) = this;
      break;
    case 0x6B4:
      this = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
        this = WebKit::WebFullScreenManager::setAnimatingFullScreen(v3);
      break;
    case 0x6B5:
      this = IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = WebCore::Page::setFullscreenAutoHideDuration();
      break;
    case 0x6B6:
      this = IPC::Decoder::decode<std::tuple<WebCore::RectEdges<float>>>((uint64_t *)a3, (uint64_t)v5);
      if (v5[16])
        this = WebCore::Page::setFullscreenInsets();
      break;
    case 0x6B7:
      this = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((this & 0xFF00000000) != 0)
        this = (uint64_t)WebKit::WebFullScreenManager::willEnterFullScreen((WebKit::WebFullScreenManager *)v3);
      break;
    case 0x6B8:
      this = (uint64_t)WebKit::WebFullScreenManager::willExitFullScreen((WebKit::WebFullScreenManager *)this);
      break;
    default:
      break;
  }
  if (*(_DWORD *)(v3 + 16) == 1)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v3 + 8))(v3, a2);
  --*(_DWORD *)(v3 + 16);
  return this;
}

unint64_t IPC::handleMessageAsync<Messages::WebFullScreenManager::RequestRestoreFullScreen,WebKit::WebFullScreenManager,WebKit::WebFullScreenManager,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34F9BF8;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebFullScreenManager24RequestRestoreFullScreenEN6WebKit20WebFullScreenManagerES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebFullScreenManager24RequestRestoreFullScreenEN6WebKit20WebFullScreenManagerES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebFullScreenManager24RequestRestoreFullScreenEN6WebKit20WebFullScreenManagerES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3257;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RectEdges<float>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::RectEdges<float>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebKit::WebFullScreenManagerProxy *WebKit::WebFullScreenManagerProxy::didReceiveMessage(WebKit::WebFullScreenManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebFullScreenManagerProxy *v4;
  uint64_t (*v5)(void);
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26[8];
  uint64_t v27;
  float v28;
  WTF::StringImpl *v29;
  char v30[8];
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  float v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  char v38;
  char v39;

  v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6A9:
      this = (WebKit::WebFullScreenManagerProxy *)IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntRect>>((uint64_t)v26, (unint64_t *)a3);
      if (v30[0])
        return (WebKit::WebFullScreenManagerProxy *)WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(v4, (const WebCore::IntRect *)v26, (const WebCore::IntRect *)&v28);
      return this;
    case 0x6AA:
      this = (WebKit::WebFullScreenManagerProxy *)IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntRect>>((uint64_t)v26, (unint64_t *)a3);
      if (v30[0])
        return (WebKit::WebFullScreenManagerProxy *)(*(uint64_t (**)(_QWORD *, BOOL *, float *))(**((_QWORD **)v4 + 4) + 56))(*((_QWORD **)v4 + 4), v26, &v28);
      return this;
    case 0x6AB:
      v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 4) + 16);
      return (WebKit::WebFullScreenManagerProxy *)v5();
    case 0x6AC:
      v6 = *((_QWORD *)a3 + 1);
      v7 = *(_QWORD *)a3;
      v8 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v6 <= v8)
      {
        v16 = 0;
        v17 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v18 = *((_QWORD *)a3 + 3);
        if (v18)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
            v17 = *(_QWORD *)a3;
            v16 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v16 = 0;
            v17 = 0;
          }
        }
        goto LABEL_32;
      }
      v9 = (unsigned __int8 *)(v7 + v8);
      *((_QWORD *)a3 + 2) = v9 + 1;
      if (!v7)
      {
        v16 = v6;
        v17 = 0;
LABEL_32:
        v6 = 0;
        v7 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v19 = *((_QWORD *)a3 + 3);
        if (v19)
        {
          if (v16)
          {
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
            v7 = *(_QWORD *)a3;
            v6 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v6 = 0;
            v7 = 0;
          }
        }
        goto LABEL_33;
      }
      v10 = *v9;
      if (v10 >= 2)
      {
LABEL_33:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v20 = *((_QWORD *)a3 + 3);
        if (v20 && v6)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v7);
        v26[0] = 0;
        v33 = 0;
        goto LABEL_35;
      }
      v11 = v10 != 0;
      IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::decode((unint64_t *)a3, (uint64_t)&v34);
      if (v39
        || (v23 = *(_QWORD *)a3,
            v24 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v25 = *((_QWORD *)a3 + 3)) != 0)
        && v24
        && ((*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23), v39))
      {
        v26[0] = v11;
        v27 = v34;
        v28 = v35;
        v13 = v36;
        v36 = 0;
        v29 = v13;
        v30[0] = 0;
        v32 = 0;
        if (v38)
        {
          WTF::MachSendRight::MachSendRight();
          v31 = v37[1];
          v32 = 1;
          v33 = 1;
          if (!v39)
            goto LABEL_22;
          if (v38)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v37);
        }
        else
        {
          v33 = 1;
        }
        v14 = v36;
        v36 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      else
      {
        v26[0] = 0;
        v33 = 0;
      }
LABEL_22:
      if (v33)
        goto LABEL_23;
LABEL_35:
      v21 = *(_QWORD *)a3;
      v22 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      this = (WebKit::WebFullScreenManagerProxy *)*((_QWORD *)a3 + 3);
      if (!this)
        return this;
      if (!v22)
        return this;
      this = (WebKit::WebFullScreenManagerProxy *)(*(uint64_t (**)(WebKit::WebFullScreenManagerProxy *, unint64_t))(*(_QWORD *)this + 16))(this, v21);
      if (!v33)
        return this;
LABEL_23:
      *((_BYTE *)v4 + 41) = v26[0];
      this = (WebKit::WebFullScreenManagerProxy *)(*(uint64_t (**)(_QWORD *, float, float))(**((_QWORD **)v4 + 4) + 32))(*((_QWORD **)v4 + 4), *((float *)&v27 + 1), v28);
      if (v33)
      {
        if (v32)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v30);
        this = v29;
        v29 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WebKit::WebFullScreenManagerProxy *)WTF::StringImpl::destroy(this, v15);
          else
            *(_DWORD *)this -= 2;
        }
      }
      return this;
    case 0x6AD:
      v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 4) + 40);
      return (WebKit::WebFullScreenManagerProxy *)v5();
    default:
      return this;
  }
}

uint64_t WebKit::WebFullScreenManagerProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unsigned __int16 v7;
  char v8;
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  IPC::Encoder *v14;
  unsigned __int8 **v15[2];
  _QWORD *v16;

  if (*(_WORD *)(a3 + 50) != 3648)
    return 0;
  v7 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
  if (v7 < 0x100u)
    return 0;
  v8 = v7;
  v9 = *a4;
  *a4 = 0;
  v14 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v15, a2);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34F9C20;
  v10[1] = v14;
  v11 = v15[0];
  v15[0] = 0;
  v10[2] = v11;
  v16 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v15);
  WebKit::WebFullScreenManagerProxy::supportsFullScreen(a1, v8 != 0, (uint64_t *)&v16);
  v12 = (uint64_t)v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return 1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IntRect,WebCore::IntRect>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v9);
  if (v10 && (result = IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v11), v12))
  {
    if (v10)
    {
      v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(_BYTE *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEN6WebKit25WebFullScreenManagerProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEN6WebKit25WebFullScreenManagerProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34F9C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEN6WebKit25WebFullScreenManagerProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebKit::WebGeolocationManager::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebGeolocationManager *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1726)
  {
    this = IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>((uint64_t *)a3, (uint64_t)&v7);
    if (!(_BYTE)v8)
      return this;
    this = (WTF::StringImpl *)WebKit::WebGeolocationManager::resetPermissions(v3, &v7);
    if (!(_BYTE)v8)
      return this;
    goto LABEL_9;
  }
  if (v4 != 1725)
  {
    if (v4 != 1724)
      return this;
    this = IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,WebCore::GeolocationPositionData>>((uint64_t *)a3, &v7);
    if (!v10)
      return this;
    this = (WTF::StringImpl *)WebKit::WebGeolocationManager::didChangePosition(v3, &v7, (const WebCore::GeolocationPositionData *)&v8);
    if (!v10)
      return this;
LABEL_9:
    this = v7;
    v7 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
      else
        *(_DWORD *)this -= 2;
    }
    return this;
  }
  IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,WTF::String>>((uint64_t *)a3, &v7);
  if (v9)
    WebKit::WebGeolocationManager::didFailToDeterminePosition(v3, &v7, &v8);
  return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7, v6);
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebGeolocationManager::didReceiveMessage(WebKit::WebGeolocationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebGeolocationManager::didReceiveMessage((WebKit::WebGeolocationManager *)((char *)this - 8), a2, a3);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,WebCore::GeolocationPositionData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WebCore::GeolocationPositionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WebCore::GeolocationPositionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WebCore::GeolocationPositionData>,void>::decode<IPC::Decoder,WebCore::RegistrableDomain>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[120] = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WebCore::GeolocationPositionData>,void>::decode<IPC::Decoder,WebCore::RegistrableDomain>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[7];
  char v12;

  result = IPC::Decoder::decode<WebCore::GeolocationPositionData>(a1, (uint64_t)v11);
  v6 = v12;
  if (!v12)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a2 + 8))
  {
    v7 = v11[2];
    *(_OWORD *)(a3 + 56) = v11[3];
    v8 = v11[5];
    *(_OWORD *)(a3 + 72) = v11[4];
    *(_OWORD *)(a3 + 88) = v8;
    *(_OWORD *)(a3 + 104) = v11[6];
    v9 = v11[1];
    *(_OWORD *)(a3 + 8) = v11[0];
    *(_OWORD *)(a3 + 24) = v9;
    v10 = *a2;
    *a2 = 0;
    *(_QWORD *)a3 = v10;
    v6 = 1;
    *(_OWORD *)(a3 + 40) = v7;
LABEL_5:
    *(_BYTE *)(a3 + 120) = v6;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *IPC::Decoder::decode<WebCore::GeolocationPositionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 112))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,void>::decode<IPC::Decoder,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

void WebKit::WebGeolocationManagerProxy::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  WebKit::WebProcessProxy *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebKit::WebProcessProxy *v21;
  unsigned int *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  unsigned __int8 v28;
  char v29;

  CFRetain(this[1]);
  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 == 1721)
  {
    IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,BOOL>>((uint64_t *)a3, &v25);
    if (!(_BYTE)v27)
      goto LABEL_22;
    v14 = v26;
    v15 = *((_QWORD *)a2 + 1);
    v16 = (WebKit::WebProcessProxy *)(v15 - 32);
    v17 = (unsigned int *)(v15 - 16);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    WebKit::WebGeolocationManagerProxy::setEnableHighAccuracyWithProxy((WebKit::WebGeolocationManagerProxy *)this, v16, &v25, v14 != 0);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
    if (!(_BYTE)v27)
      goto LABEL_22;
  }
  else
  {
    if (v6 != 1723)
    {
      if (v6 == 1722)
      {
        IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>>((uint64_t *)a3, &v25);
        if (v29)
        {
          v8 = v26;
          v9 = v28;
          v10 = *((_QWORD *)a2 + 1);
          v11 = v10 - 32;
          v12 = (unsigned int *)(v10 - 16);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          WebKit::WebGeolocationManagerProxy::startUpdatingWithProxy((uint64_t)this, v11, &v25, v8, &v27, v9 != 0);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
        }
        std::__optional_destruct_base<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v7);
      }
      goto LABEL_22;
    }
    IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>((uint64_t *)a3, (uint64_t)&v25);
    if (!(_BYTE)v26)
      goto LABEL_22;
    v20 = *((_QWORD *)a2 + 1);
    v21 = (WebKit::WebProcessProxy *)(v20 - 32);
    v22 = (unsigned int *)(v20 - 16);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    WebKit::WebGeolocationManagerProxy::stopUpdatingWithProxy((WebKit::WebGeolocationManagerProxy *)this, v21, &v25);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v22);
    if (!(_BYTE)v26)
      goto LABEL_22;
  }
  v24 = v25;
  v25 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v19);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_22:
  CFRelease(this[1]);
}

void `non-virtual thunk to'WebKit::WebGeolocationManagerProxy::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebGeolocationManagerProxy::didReceiveMessage(this - 4, a2, a3);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v6);
  if (v7)
  {
    result = IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,void>::decode<IPC::Decoder,WebCore::RegistrableDomain>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,void>::decode<IPC::Decoder,WebCore::RegistrableDomain>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8[2];

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v8[0] = (uint64_t)result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,void>::decode<IPC::Decoder,WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, v8, (uint64_t)a3);
  *a3 = 0;
  a3[32] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,void>::decode<IPC::Decoder,WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v23);
  if (!v24)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return result;
  }
  v9 = a1[1];
  v10 = (WTF::StringImpl *)*a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
LABEL_15:
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_16;
  }
  v12 = (unsigned __int8 *)v10 + v11;
  a1[2] = (uint64_t)(v12 + 1);
  if (v10)
  {
    v13 = *v12;
    if (v13 >= 2)
      goto LABEL_17;
    v14 = v13 != 0;
    if (*((_BYTE *)a2 + 8) && *((_BYTE *)a3 + 8))
    {
      v15 = *a2;
      *a2 = 0;
      v16 = *a3;
      *(_QWORD *)a4 = v15;
      *(_QWORD *)(a4 + 8) = v16;
      v17 = v23;
      v23 = 0;
      *(_QWORD *)(a4 + 16) = v17;
      *(_BYTE *)(a4 + 24) = v14;
      *(_BYTE *)(a4 + 32) = 1;
LABEL_8:
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
  v18 = v9;
  v19 = 0;
LABEL_16:
  v9 = 0;
  v10 = 0;
  *a1 = 0;
  a1[1] = 0;
  v21 = a1[3];
  if (v21)
  {
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
      v10 = (WTF::StringImpl *)*a1;
      v9 = a1[1];
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
LABEL_17:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result && v9)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v10);
  *(_BYTE *)a4 = 0;
  v22 = v24;
  *(_BYTE *)(a4 + 32) = 0;
  if (v22)
    goto LABEL_8;
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::RegistrableDomain,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

_DWORD *WebKit::WebIDBConnectionToServer::didReceiveMessage(WebKit::WebIDBConnectionToServer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  uint64_t *v4;
  void *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  WTF::StringImpl *v45;
  void *v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  WTF::StringImpl **v75;
  WTF::StringImpl *v76;
  _BYTE v77[24];
  WTF::StringImpl *v78;
  char v79;
  char v80;
  char v81;
  __int128 v82;
  unsigned __int8 v83;
  __int128 v84;
  char v85;
  uint64_t *v86;
  WTF::StringImpl *v87;

  v3 = (_DWORD *)((char *)this + 24);
  ++*((_DWORD *)this + 6);
  v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6BF:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>((uint64_t)v77, (uint64_t *)a3);
      if (v79)
      {
        WebCore::IDBClient::IDBConnectionToServer::didAbortTransaction();
        goto LABEL_32;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C0:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didClearObjectStore(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C1:
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v8)
        goto LABEL_116;
      v9 = v7;
      IPC::Decoder::decode<WebCore::IDBError>(v4, (uint64_t)&v84);
      if (!v85)
        goto LABEL_116;
      *(_QWORD *)v77 = v9;
      *(_WORD *)&v77[8] = v84;
      *(_QWORD *)&v77[16] = *((_QWORD *)&v84 + 1);
      LOBYTE(v78) = 1;
      WebCore::IDBClient::IDBConnectionToServer::didCloseFromServer();
      v10 = *(WTF::StringImpl **)&v77[16];
      *(_QWORD *)&v77[16] = 0;
      if (v10)
        goto LABEL_34;
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C2:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>((uint64_t)v77, (uint64_t *)a3);
      if (v79)
      {
        WebCore::IDBClient::IDBConnectionToServer::didCommitTransaction();
        goto LABEL_32;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C3:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didCreateIndex(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C4:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didCreateObjectStore(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C5:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didDeleteDatabase(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C6:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didDeleteIndex(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C7:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didDeleteObjectStore(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C8:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (v80)
      {
        WebCore::IDBClient::IDBConnectionToServer::didDeleteRecord(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
        goto LABEL_93;
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6C9:
      IPC::Decoder::decode<WebCore::IDBResourceIdentifier>((uint64_t *)a3, (uint64_t)&v82);
      if (!v83)
        goto LABEL_116;
      v21 = v4[1];
      v22 = *v4;
      v23 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v21 < v23 || v21 - v23 <= 7)
      {
        v62 = 0;
        v63 = 0;
        *v4 = 0;
        v4[1] = 0;
        v64 = v4[3];
        if (v64)
        {
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v64 + 16))(v64, v22, v21);
            v63 = *v4;
            v62 = v4[1];
          }
          else
          {
            v62 = 0;
            v63 = 0;
          }
        }
        goto LABEL_121;
      }
      v25 = (unint64_t *)(v22 + v23);
      v4[2] = (uint64_t)(v25 + 1);
      if (!v22)
      {
        v62 = v21;
        v63 = 0;
LABEL_121:
        *v4 = 0;
        v4[1] = 0;
        v65 = v4[3];
        if (v65 && v62)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v63);
LABEL_111:
        v55 = *v4;
        v56 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        v57 = v4[3];
        if (v57)
          v58 = v56 == 0;
        else
          v58 = 1;
        if (v58)
          goto LABEL_116;
        goto LABEL_136;
      }
      v26 = *v25;
      v86 = 0;
      v87 = 0;
      if (v26 < 0x10000)
      {
        if (!v26)
        {
          v4 = 0;
          v36 = 0;
          goto LABEL_97;
        }
        v27 = WTF::fastMalloc((WTF *)(16 * v26));
        LODWORD(v87) = v26;
        v86 = (uint64_t *)v27;
        while (1)
        {
          IPC::Decoder::decode<WebCore::IDBDatabaseNameAndVersion>((uint64_t)v77, v4);
          if (!v77[16])
            goto LABEL_110;
          if (HIDWORD(v87) != (_DWORD)v87)
            break;
          v28 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, HIDWORD(v87) + 1, (unint64_t)v77);
          v29 = HIDWORD(v87) + 1;
          v30 = &v86[2 * HIDWORD(v87)];
          v31 = *v28;
          *v28 = 0;
          *v30 = v31;
          v30[1] = v28[1];
          HIDWORD(v87) = v29;
          if (v77[16])
            goto LABEL_69;
LABEL_73:
          if (!--v26)
            goto LABEL_74;
        }
        v32 = HIDWORD(v87) + 1;
        v33 = &v86[2 * HIDWORD(v87)];
        v34 = *(_QWORD *)v77;
        *(_QWORD *)v77 = 0;
        *v33 = v34;
        v33[1] = *(_QWORD *)&v77[8];
        HIDWORD(v87) = v32;
LABEL_69:
        v35 = *(WTF::StringImpl **)v77;
        *(_QWORD *)v77 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v20);
          else
            *(_DWORD *)v35 -= 2;
        }
        goto LABEL_73;
      }
      break;
    case 0x6CA:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v77, (uint64_t *)a3);
      if (v81)
        WebCore::IDBClient::IDBConnectionToServer::didGetAllRecords(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_49;
    case 0x6CB:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (!v80)
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      WebCore::IDBClient::IDBConnectionToServer::didGetCount(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_93;
    case 0x6CC:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v77, (uint64_t *)a3);
      if (v81)
        WebCore::IDBClient::IDBConnectionToServer::didGetRecord(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_49;
    case 0x6CD:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v77, (uint64_t *)a3);
      if (v81)
        WebCore::IDBClient::IDBConnectionToServer::didIterateCursor(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_49;
    case 0x6CE:
      IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>((uint64_t)v77, (uint64_t *)a3);
      if (v81)
        WebCore::IDBClient::IDBConnectionToServer::didOpenCursor(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
LABEL_49:
      std::__optional_destruct_base<std::tuple<WebKit::WebIDBResult>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::IDBResultData *)v77, v6);
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6CF:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (!v80)
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      WebCore::IDBClient::IDBConnectionToServer::didOpenDatabase(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_93;
    case 0x6D0:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (!v80)
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      WebCore::IDBClient::IDBConnectionToServer::didPutOrAdd(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_93;
    case 0x6D1:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (!v80)
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      WebCore::IDBClient::IDBConnectionToServer::didRenameIndex(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
      goto LABEL_93;
    case 0x6D2:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>((uint64_t)v77, (uint64_t *)a3);
      if (!v80)
        return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
      WebCore::IDBClient::IDBConnectionToServer::didRenameObjectStore(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResultData *)v77);
LABEL_93:
      if (v80)
        WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v77);
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6D3:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>((uint64_t)v77, (uint64_t *)a3);
      if (v79)
      {
        WebCore::IDBClient::IDBConnectionToServer::didStartTransaction();
LABEL_32:
        if (v79)
        {
          v10 = v78;
          v78 = 0;
          if (v10)
          {
LABEL_34:
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
      }
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
    case 0x6D4:
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v12)
        goto LABEL_116;
      v13 = v11;
      IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(v4, (uint64_t)&v84);
      if (!v85)
        goto LABEL_116;
      v14 = v4[1];
      v15 = *v4;
      v16 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v14 >= v16 && v14 - v16 > 7)
      {
        v18 = (WTF::StringImpl **)(v15 + v16);
        v4[2] = (uint64_t)(v18 + 1);
        if (v15)
        {
          v19 = *v18;
          *(_QWORD *)v77 = v13;
          *(_OWORD *)&v77[8] = v84;
          v78 = v19;
          v79 = 1;
          WebCore::IDBClient::IDBConnectionToServer::fireVersionChangeEvent();
          return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
        }
        v71 = v14;
        v55 = 0;
      }
      else
      {
LABEL_133:
        v71 = 0;
        v55 = 0;
        *v4 = 0;
        v4[1] = 0;
        v72 = v4[3];
        if (v72)
        {
          if (v14)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v72 + 16))(v72, v15, v14);
            v55 = *v4;
            v71 = v4[1];
          }
          else
          {
            v71 = 0;
            v55 = 0;
          }
        }
      }
      *v4 = 0;
      v4[1] = 0;
      v57 = v4[3];
      if (v57)
        goto LABEL_135;
      goto LABEL_116;
    case 0x6D5:
      IPC::Decoder::decode<WebCore::IDBResourceIdentifier>((uint64_t *)a3, (uint64_t)&v84);
      if (!v85)
        goto LABEL_116;
      v37 = v4[1];
      v38 = *v4;
      v39 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v37 >= v39 && v37 - v39 > 7)
      {
        v41 = (uint64_t *)(v38 + v39);
        v4[2] = (uint64_t)(v41 + 1);
        if (v38)
        {
          v42 = (((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8) - v38;
          if (v37 >= v42 && v37 - v42 > 7)
          {
            v44 = *v41;
            v45 = *(WTF::StringImpl **)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
            v4[2] = (((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            *(_OWORD *)v77 = v84;
            *(_QWORD *)&v77[16] = v44;
            v78 = v45;
            v79 = 1;
            WebCore::IDBClient::IDBConnectionToServer::notifyOpenDBRequestBlocked(*((WebCore::IDBClient::IDBConnectionToServer **)this + 4), (const WebCore::IDBResourceIdentifier *)v77);
            return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
          }
          *v4 = 0;
          v4[1] = 0;
          v70 = v4[3];
          if (v70)
          {
            if (v37)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
              v55 = *v4;
              v71 = v4[1];
              v57 = v4[3];
              *v4 = 0;
              v4[1] = 0;
              if (v57)
              {
LABEL_135:
                if (v71)
LABEL_136:
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55);
              }
            }
          }
LABEL_116:
          a2 = (IPC::Connection *)*v4;
          v59 = v4[1];
          *v4 = 0;
          v4[1] = 0;
          v60 = v4[3];
          if (v60 && v59)
            (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v60 + 16))(v60, a2);
          return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
        }
        v66 = v37;
        v67 = 0;
      }
      else
      {
        v66 = 0;
        v67 = 0;
        *v4 = 0;
        v4[1] = 0;
        v68 = v4[3];
        if (v68)
        {
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68);
            v67 = *v4;
            v66 = v4[1];
          }
          else
          {
            v66 = 0;
            v67 = 0;
          }
        }
      }
      *v4 = 0;
      v4[1] = 0;
      v69 = v4[3];
      if (v69 && v66)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v67, v66);
      goto LABEL_116;
    default:
      return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
  }
  do
  {
    IPC::Decoder::decode<WebCore::IDBDatabaseNameAndVersion>((uint64_t)v77, v4);
    if (!v77[16])
    {
LABEL_110:
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v86, v20);
      goto LABEL_111;
    }
    if (HIDWORD(v87) == (_DWORD)v87)
    {
      v47 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, HIDWORD(v87) + 1, (unint64_t)v77);
      v48 = HIDWORD(v87) + 1;
      v49 = &v86[2 * HIDWORD(v87)];
      v50 = *v47;
      *v47 = 0;
      *v49 = v50;
      v49[1] = v47[1];
      HIDWORD(v87) = v48;
      if (!v77[16])
        goto LABEL_108;
    }
    else
    {
      v51 = HIDWORD(v87) + 1;
      v52 = &v86[2 * HIDWORD(v87)];
      v53 = *(_QWORD *)v77;
      *(_QWORD *)v77 = 0;
      *v52 = v53;
      v52[1] = *(_QWORD *)&v77[8];
      HIDWORD(v87) = v51;
    }
    v54 = *(WTF::StringImpl **)v77;
    *(_QWORD *)v77 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v20);
      else
        *(_DWORD *)v54 -= 2;
    }
LABEL_108:
    --v26;
  }
  while (v26);
  v73 = HIDWORD(v87);
  v4 = v86;
  if (v87 > HIDWORD(v87))
  {
    v74 = v86;
    if (HIDWORD(v87))
    {
      if (HIDWORD(v87) >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19779F5FCLL);
      }
      v75 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v87)));
      LODWORD(v87) = v73;
      v86 = (uint64_t *)v75;
      v74 = v4;
      if (v75 != (WTF::StringImpl **)v4)
      {
        WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move((WTF::StringImpl *)v4, (WTF::StringImpl *)&v4[2 * v73], v75);
        v74 = v86;
      }
    }
    if (v4)
    {
      if (v74 == v4)
      {
        v86 = 0;
        LODWORD(v87) = 0;
      }
      WTF::fastFree((WTF *)v4, v20);
LABEL_74:
      v4 = v86;
    }
    else
    {
      v4 = v74;
    }
  }
  v36 = v87;
LABEL_97:
  v76 = v36;
  v86 = 0;
  v87 = 0;
  v85 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v86, v20);
  v15 = v83;
  if (!v83)
  {
    __break(1u);
    goto LABEL_133;
  }
  *(_OWORD *)v77 = v82;
  v84 = 0uLL;
  *(_QWORD *)&v77[16] = v4;
  v78 = v76;
  v79 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v46);
  WebCore::IDBClient::IDBConnectionToServer::didGetAllDatabaseNamesAndVersions();
  if (v79)
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77[16], a2);
  return WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(v3, a2);
}

void IPC::Decoder::decode<std::tuple<WebCore::IDBResultData>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  IPC::Decoder::decode<WebCore::IDBResultData>(a2, (uint64_t)&v13);
  if (v22)
  {
    *(_OWORD *)a1 = v13;
    *(_QWORD *)(a1 + 16) = v14;
    *(_WORD *)(a1 + 24) = v15;
    v4 = v16;
    v16 = 0;
    *(_QWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 40) = v17;
    v5 = v18;
    v18 = 0u;
    *(_OWORD *)(a1 + 56) = v5;
    v6 = v19;
    v19 = 0u;
    *(_OWORD *)(a1 + 72) = v6;
    v7 = v20;
    v8 = v21;
    v20 = 0;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 96) = v8;
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13);
    *(_BYTE *)(a1 + 104) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 104) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  }
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,WebCore::IDBError>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v8);
  if (v9 && (result = IPC::Decoder::decode<WebCore::IDBError>(a2, (uint64_t)&v10), v12))
  {
    if (v9)
    {
      *(_OWORD *)a1 = v8;
      *(_WORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v11;
      *(_BYTE *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::WebIDBResult>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  IPC::ArgumentCoder<WebKit::WebIDBResult,void>::decode(a2, (uint64_t)&v16);
  if (v27
    || ((v9 = *a2, v10 = a2[1], *a2 = 0, a2[1] = 0, (v11 = a2[3]) != 0) ? (v12 = v10 == 0) : (v12 = 1),
        !v12 && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9), v27)))
  {
    *(_OWORD *)a1 = v16;
    *(_QWORD *)(a1 + 16) = v17;
    *(_WORD *)(a1 + 24) = v18;
    v5 = v19;
    v19 = 0;
    *(_QWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 40) = v20;
    v6 = v21;
    v21 = 0u;
    *(_OWORD *)(a1 + 56) = v6;
    v7 = v22;
    v22 = 0u;
    *(_OWORD *)(a1 + 72) = v7;
    v8 = v24;
    *(_QWORD *)(a1 + 88) = v23;
    *(_QWORD *)(a1 + 96) = v8;
    v23 = 0;
    *(_QWORD *)(a1 + 104) = v25;
    *(_QWORD *)&v7 = v26;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)(a1 + 112) = v7;
    *(_BYTE *)(a1 + 120) = 1;
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v4);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v16);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v13 = *a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v14)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
    }
  }
}

WebCore::IDBResultData *std::__optional_destruct_base<std::tuple<WebKit::WebIDBResult>,false>::~__optional_destruct_base[abi:sn180100](WebCore::IDBResultData *a1, void *a2)
{
  if (*((_BYTE *)a1 + 120))
  {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 104, a2);
    WebCore::IDBResultData::~IDBResultData(a1);
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::IDBDatabaseNameAndVersion>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IDBDatabaseNameAndVersion,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unsigned int *WebKit::WebInspectorInterruptDispatcher::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1750)
    return WebKit::WebInspectorInterruptDispatcher::notifyNeedDebuggerBreak((WebKit::WebInspectorInterruptDispatcher *)this);
  return this;
}

void WebKit::WebInspector::didReceiveMessage(WebKit::WebInspector *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9[2];
  char v10;

  v4 = (unsigned int *)((char *)this + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  switch(*((_WORD *)a3 + 25))
  {
    case 0x714:
      WebKit::WebInspector::close((unsigned int *)this);
      if (this)
        goto LABEL_27;
      return;
    case 0x715:
      v6 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v6 < 0x100u)
        goto LABEL_26;
      *((_BYTE *)this + 56) = v6 != 0;
      goto LABEL_27;
    case 0x716:
      IPC::Decoder::decode<std::tuple<IPC::ConnectionHandle>>(a3, v9);
      if (!BYTE4(v9[0]))
        goto LABEL_26;
      WebKit::WebInspector::setFrontendConnection((uint64_t)this, (WTF::MachSendRight *)v9);
      if (!BYTE4(v9[0]))
        goto LABEL_26;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
      if (!this)
        return;
      goto LABEL_27;
    case 0x717:
      WebKit::WebInspector::show((uint64_t)this);
      if (!this)
        return;
      goto LABEL_27;
    case 0x718:
      WebKit::WebInspector::showConsole(this);
      if (!this)
        return;
      goto LABEL_27;
    case 0x719:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)v9);
      if (!v10)
        goto LABEL_26;
      WebKit::WebInspector::showMainResourceForFrame((unint64_t)this, v9[0], v9[1]);
      if (!this)
        return;
      goto LABEL_27;
    case 0x71A:
      WebKit::WebInspector::showResources(this);
      if (!this)
        return;
      goto LABEL_27;
    case 0x71B:
      WebKit::WebInspector::startElementSelection(this);
      if (!this)
        return;
      goto LABEL_27;
    case 0x71C:
      WebKit::WebInspector::startPageProfiling(this);
      if (!this)
        return;
      goto LABEL_27;
    case 0x71D:
      WebKit::WebInspector::stopElementSelection(this);
      goto LABEL_26;
    case 0x71E:
      WebKit::WebInspector::stopPageProfiling(this);
      if (!this)
        return;
      goto LABEL_27;
    default:
LABEL_26:
      if (this)
      {
        do
        {
LABEL_27:
          v7 = __ldaxr(v4);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v4));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)this + 4);
          (*(void (**)(WebKit::WebInspector *))(*(_QWORD *)this + 8))(this);
        }
      }
      return;
  }
}

void IPC::Decoder::decode<std::tuple<IPC::ConnectionHandle>>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<IPC::ConnectionHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[4])
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<IPC::ConnectionHandle>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  _BYTE v4[4];
  unsigned __int8 v5;

  IPC::Decoder::decode<IPC::ConnectionHandle>(a1, v4);
  if (v5)
  {
    WTF::MachSendRight::MachSendRight();
    v3 = v5;
    a2[4] = 1;
    if (v3)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
  }
}

void sub_19779FD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19779FE70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  uint64_t v10;

  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::WebInspectorUI::didReceiveMessage(WebKit::WebInspectorUI *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  int v6;
  unint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unint64_t v16;
  int *v18;
  int v19;
  char v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  WTF::StringImpl *v26;
  unsigned __int16 v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v38;
  char v39[8];
  WTF::StringImpl *v40[2];
  WTF::StringImpl *v41;
  char v42;
  char v43;
  int v44;
  char v45;
  char v46[8];
  __int128 v47;
  WTF::StringImpl *v48;
  char v49;
  char v50;

  v3 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x701:
      v6 = 3;
      goto LABEL_30;
    case 0x702:
      v6 = 2;
      goto LABEL_30;
    case 0x703:
      v6 = 1;
      goto LABEL_30;
    case 0x704:
      v6 = 0;
LABEL_30:
      WebKit::WebInspectorUI::setDockSide((uint64_t)this, v6);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x705:
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v8)
        goto LABEL_60;
      v9 = (WTF::StringImpl *)v7;
      IPC::Decoder::decode<WebKit::DebuggableInfoData>((uint64_t *)a3, (uint64_t)v46);
      if (!v50)
        goto LABEL_59;
      v11 = *((_QWORD *)a3 + 1);
      v10 = *(WTF::StringImpl **)a3;
      v12 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v11 <= v12)
      {
        v29 = 0;
        v30 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v31 = *((_QWORD *)a3 + 3);
        if (v31)
        {
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
            v30 = *(_QWORD *)a3;
            v29 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v29 = 0;
            v30 = 0;
          }
        }
        goto LABEL_55;
      }
      v13 = (unsigned __int8 *)v10 + v12;
      v14 = v13 + 1;
      *((_QWORD *)a3 + 2) = v13 + 1;
      if (!v10)
      {
        v29 = v11;
        v30 = 0;
LABEL_55:
        v11 = 0;
        v10 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v32 = *((_QWORD *)a3 + 3);
        if (v32)
        {
          if (v29)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v30, v29);
            v10 = *(WTF::StringImpl **)a3;
            v11 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v11 = 0;
            v10 = 0;
          }
        }
LABEL_56:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v33 = *((_QWORD *)a3 + 3);
        if (!v33)
          goto LABEL_59;
LABEL_69:
        if (v11)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v33 + 16))(v33, v10);
LABEL_59:
        std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v46, v10);
LABEL_60:
        a2 = *(IPC::Connection **)a3;
        v35 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v36 = *((_QWORD *)a3 + 3);
        if (v36 && v35)
          (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v36 + 16))(v36, a2);
        return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
      }
      v15 = *v13;
      if (v15 >= 2)
        goto LABEL_56;
      v16 = ((unint64_t)(v14 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v10;
      if (v11 < v16 || v11 - v16 <= 3)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v34 = *((_QWORD *)a3 + 3);
        if (!v34)
          goto LABEL_59;
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v10 = *(WTF::StringImpl **)a3;
        v11 = *((_QWORD *)a3 + 1);
        v33 = *((_QWORD *)a3 + 3);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        if (!v33)
          goto LABEL_59;
        goto LABEL_69;
      }
      v18 = (int *)((char *)v10 + v16);
      v19 = *v18;
      *((_QWORD *)a3 + 2) = v18 + 1;
      v20 = v15 != 0;
      v38 = v9;
      v39[0] = v46[0];
      v21 = v47;
      v47 = 0uLL;
      *(_OWORD *)v40 = v21;
      v22 = v48;
      v48 = 0;
      v41 = v22;
      v42 = v49;
      v43 = v20;
      v44 = v19;
      v45 = 1;
      std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v46, v10);
      WebKit::WebInspectorUI::establishConnection((uint64_t)this, (uint64_t)v9, v39, v20, v19);
      if (v45)
      {
        v23 = v41;
        v41 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        v28 = v40[1];
        v40[1] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, a2);
          else
            *(_DWORD *)v28 -= 2;
        }
        v26 = v40[0];
        v40[0] = 0;
        if (v26)
        {
LABEL_41:
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, a2);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x706:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v38);
      if (!v39[0])
        return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
      WebCore::InspectorFrontendAPIDispatcher::evaluateExpressionForTesting(*((WebCore::InspectorFrontendAPIDispatcher **)this + 6), (const WTF::String *)&v38);
      goto LABEL_39;
    case 0x707:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v38);
      if (!v39[0])
        return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
      WebCore::InspectorFrontendAPIDispatcher::dispatchMessageAsync(*((WebCore::InspectorFrontendAPIDispatcher **)this + 6), (const WTF::String *)&v38);
      goto LABEL_39;
    case 0x708:
      v25 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v25 >= 0x100u)
        WebKit::WebInspectorUI::setDiagnosticLoggingAvailable(this, v25 != 0);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x709:
      v27 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v27 >= 0x100u)
        WebKit::WebInspectorUI::setDockingUnavailable(this, (WTF::JSONImpl::Value *)(v27 != 0));
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x70A:
      v24 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v24 >= 0x100u)
        WebKit::WebInspectorUI::setIsVisible(this, (WTF::JSONImpl::Value *)(v24 != 0));
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x70B:
      WebKit::WebInspectorUI::showConsole(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x70C:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v38);
      if (!v39[0])
        return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
      WebKit::WebInspectorUI::showMainResourceForFrame(this, (const WTF::String *)&v38);
      goto LABEL_39;
    case 0x70D:
      WebKit::WebInspectorUI::showResources(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x70E:
      WebKit::WebInspectorUI::startElementSelection(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x70F:
      WebKit::WebInspectorUI::startPageProfiling(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x710:
      WebKit::WebInspectorUI::stopElementSelection(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x711:
      WebKit::WebInspectorUI::stopPageProfiling(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x712:
      WebKit::WebInspectorUI::updateConnection(this);
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    case 0x713:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v38);
      if (!v39[0])
        return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
      WebKit::WebInspectorUI::updateFindString(this, (const WTF::String *)&v38);
LABEL_39:
      if (v39[0])
      {
        v26 = v38;
        v38 = 0;
        if (v26)
          goto LABEL_41;
      }
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
    default:
      return WTF::RefCounted<WebKit::WebInspectorUI>::deref(v3, a2);
  }
}

_DWORD *WTF::RefCounted<WebKit::WebInspectorUI>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebKit::WebInspectorUI::~WebInspectorUI((WebKit::WebInspectorUI *)(result - 4), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

void WebKit::WebInspectorUIProxy::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebPageProxy *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 ***v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  unsigned int v28;
  unsigned __int16 v29;
  uint64_t v30;
  CFTypeRef v31;
  unsigned __int16 v32;
  const void *v33;
  char v34;
  uint64_t v35;
  CFTypeRef v36;
  const WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  CFTypeRef v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFTypeRef cf[2];
  unsigned __int8 v50;
  char v51;
  _QWORD *v52;
  __int128 v53;
  char v54;

  CFRetain(this[1]);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x6E3:
      v29 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v29 >= 0x100u)
        WebKit::WebInspectorUIProxy::attachAvailabilityChanged((WebKit::WebInspectorUIProxy *)this, v29 != 0);
      goto LABEL_69;
    case 0x6E4:
      v27 = (IPC::Encoder *)this;
      v28 = 0;
      goto LABEL_44;
    case 0x6E5:
      v27 = (IPC::Encoder *)this;
      v28 = 2;
      goto LABEL_44;
    case 0x6E6:
      v27 = (IPC::Encoder *)this;
      v28 = 1;
LABEL_44:
      WebKit::WebInspectorUIProxy::attach(v27, v28);
      goto LABEL_69;
    case 0x6E7:
      if (*((_BYTE *)this + 78))
      {
        *((_BYTE *)this + 78) = 0;
      }
      else if (!*((_BYTE *)this + 73))
      {
        WebKit::WebInspectorUIProxy::open((char *)this);
      }
      goto LABEL_69;
    case 0x6E8:
      WebKit::WebInspectorUIProxy::detach((uint64_t)this);
      goto LABEL_69;
    case 0x6E9:
      WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow((WebKit::WebInspectorUIProxy *)this, v6);
      goto LABEL_69;
    case 0x6EA:
    case 0x6FA:
      IPC::Decoder::decode<std::tuple<WebCore::MediaSourcePrivateEndOfStreamStatus>>((uint64_t *)a3);
      goto LABEL_69;
    case 0x6EB:
      v32 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v32 >= 0x100u)
        WebKit::WebInspectorUIProxy::elementSelectionChanged((WebKit::WebInspectorUIProxy *)this, v32 != 0);
      goto LABEL_69;
    case 0x6EC:
      WebKit::WebInspectorUIProxy::frontendLoaded((WebKit::WebInspectorUIProxy *)this);
      goto LABEL_69;
    case 0x6ED:
    case 0x6F4:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      goto LABEL_53;
    case 0x6EE:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      if (!LOBYTE(cf[1]))
        goto LABEL_69;
      v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v8)
        goto LABEL_53;
      *(_QWORD *)&v53 = v10;
      a3 = (IPC::Decoder *)((char *)&v53 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v53 + 1, a2);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = off_1E34F9C70;
      v11[1] = v53;
      v12 = *((_QWORD *)&v53 + 1);
      *((_QWORD *)&v53 + 1) = 0;
      v11[2] = v12;
      v52 = v11;
      v13 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53 + 1);
      v15 = LOBYTE(cf[1]);
      if (!LOBYTE(cf[1]))
      {
        __break(1u);
        goto LABEL_75;
      }
      WebKit::WebInspectorUIProxy::load((uint64_t)this, (uint64_t)cf, (const WTF::StringImpl *)&v52);
      v16 = v52;
      v52 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
LABEL_53:
      if (LOBYTE(cf[1]))
      {
LABEL_54:
        v39 = (WTF::StringImpl *)cf[0];
        cf[0] = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v8);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      goto LABEL_69;
    case 0x6EF:
      v30 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v30 & 0xFFFFFF) >= 0x10000)
        WebKit::WebInspectorUIProxy::openLocalInspectorFrontend((WebKit::WebInspectorUIProxy *)this, v30 != 0, (v30 & 0xFF00) != 0);
      goto LABEL_69;
    case 0x6F0:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      if (!LOBYTE(cf[1]))
        goto LABEL_69;
      v31 = this[7];
      if (!v31)
        goto LABEL_54;
      (*(void (**)(CFTypeRef, CFTypeRef *, CFTypeRef *))(*(_QWORD *)v31 + 16))(v31, this, cf);
      goto LABEL_53;
    case 0x6F1:
      v33 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v34)
      {
        cf[0] = v33;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf[1], a2);
        v35 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v35 = off_1E34F9C98;
        *(CFTypeRef *)(v35 + 8) = cf[0];
        v36 = cf[1];
        cf[1] = 0;
        *(_QWORD *)(v35 + 16) = v36;
        *(_QWORD *)&v53 = v35;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf[1]);
        WebKit::WebInspectorUIProxy::pickColorFromScreen((uint64_t)this, (uint64_t *)&v53, v37);
        v38 = v53;
        *(_QWORD *)&v53 = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      goto LABEL_69;
    case 0x6F2:
      WebKit::WebInspectorUIProxy::reopen((char *)this);
      goto LABEL_69;
    case 0x6F3:
      WebKit::WebInspectorUIProxy::resetState(this, (uint64_t)v6, v7);
      goto LABEL_69;
    case 0x6F5:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((uint64_t *)a3, v6, cf);
      if (v51)
      {
        WebKit::WebInspectorUIProxy::save((uint64_t)this, (uint64_t)cf, (const WTF::StringImpl *)v50);
        if (v51)
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)cf, v26);
      }
      goto LABEL_69;
    case 0x6F6:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      if (!LOBYTE(cf[1]))
        goto LABEL_69;
      WebKit::WebInspectorUIProxy::sendMessageToBackend((WebKit::WebInspectorUIProxy *)this, (const WTF::String *)cf);
      goto LABEL_53;
    case 0x6F7:
      v9 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v9 & 0xFF00000000) != 0)
        WebKit::WebInspectorUIProxy::setAttachedWindowHeight((uint64_t)this, v9);
      goto LABEL_69;
    case 0x6F8:
      v25 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v25 & 0xFF00000000) != 0)
        WebKit::WebInspectorUIProxy::setAttachedWindowWidth((uint64_t)this, v25);
      goto LABEL_69;
    case 0x6F9:
      v18 = *((_QWORD *)a3 + 1);
      v19 = *(_QWORD *)a3;
      v20 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v18 <= v20)
      {
        v15 = 0;
        v14 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v41 = *((_QWORD *)a3 + 3);
        if (v41)
        {
          if (v18)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
            v14 = *(_QWORD *)a3;
            v15 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v15 = 0;
            v14 = 0;
          }
        }
LABEL_66:
        v18 = 0;
        v19 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v13 = (unsigned __int8 ***)*((_QWORD *)a3 + 3);
        if (v13)
        {
LABEL_75:
          if (v15)
          {
            ((void (*)(unsigned __int8 ***, uint64_t, unint64_t))(*v13)[2])(v13, v14, v15);
            v19 = *(_QWORD *)a3;
            v18 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v18 = 0;
            v19 = 0;
          }
        }
        goto LABEL_67;
      }
      v21 = (unsigned __int8 *)(v19 + v20);
      *((_QWORD *)a3 + 2) = v21 + 1;
      if (!v19)
      {
        v15 = v18;
        v14 = 0;
        goto LABEL_66;
      }
      v22 = *v21;
      if (v22 >= 3)
      {
LABEL_67:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v42 = *((_QWORD *)a3 + 3);
        if (v42 && v18)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v19);
        goto LABEL_68;
      }
      v23 = IPC::Decoder::decode<std::optional<BOOL>>((uint64_t *)a3);
      if ((v23 & 0xFF0000) != 0)
      {
        WebKit::WebInspectorUIProxy::setDeveloperPreferenceOverride((uint64_t)this, v22, v23);
        goto LABEL_69;
      }
LABEL_68:
      v43 = *(_QWORD *)a3;
      v44 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v45 = *((_QWORD *)a3 + 3);
      if (v45)
      {
LABEL_81:
        if (v44)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
      }
LABEL_69:
      CFRelease(this[1]);
      return;
    case 0x6FB:
      IPC::Decoder::decode<std::tuple<IPC::ConnectionHandle>>(a3, cf);
      if (BYTE4(cf[0]))
      {
        WebKit::WebInspectorUIProxy::setFrontendConnection((uint64_t)this, (unint64_t)cf);
        if (BYTE4(cf[0]))
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
      }
      goto LABEL_69;
    case 0x6FC:
      v17 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v17 >= 0x100u)
        WebKit::WebInspectorUIProxy::setInspectorPageDeveloperExtrasEnabled(this, v17 != 0);
      goto LABEL_69;
    case 0x6FD:
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)cf);
      if (v50)
      {
        v53 = *(_OWORD *)cf;
        v54 = 1;
        WTF::isIntegralOrPointerType((WTF *)this);
        goto LABEL_69;
      }
      v46 = *(_QWORD *)a3;
      v47 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v48 = *((_QWORD *)a3 + 3);
      if (!v48 || !v47)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        goto LABEL_69;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      v43 = *(_QWORD *)a3;
      v44 = *((_QWORD *)a3 + 1);
      v45 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (v45)
        goto LABEL_81;
      goto LABEL_69;
    case 0x6FE:
      IPC::Decoder::decode<std::tuple<WebCore::CertificateInfo>>((uint64_t *)a3, (uint64_t)cf);
      if (LOBYTE(cf[1]))
      {
        v40 = cf[0];
        cf[0] = 0;
        if (v40)
          CFRelease(v40);
      }
      goto LABEL_69;
    case 0x700:
      v24 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v24 >= 0x100u)
        *((_BYTE *)this + 76) = v24 != 0;
      goto LABEL_69;
    default:
      goto LABEL_69;
  }
}

void `non-virtual thunk to'WebKit::WebInspectorUIProxy::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebInspectorUIProxy::didReceiveMessage(this - 2, a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy4LoadEN6WebKit19WebInspectorUIProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy4LoadEN6WebKit19WebInspectorUIProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy4LoadEN6WebKit19WebInspectorUIProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3266;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy19PickColorFromScreenEN6WebKit19WebInspectorUIProxyES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore5ColorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F9C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy19PickColorFromScreenEN6WebKit19WebInspectorUIProxyES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore5ColorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F9C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebInspectorUIProxy19PickColorFromScreenEN6WebKit19WebInspectorUIProxyES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore5ColorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3267;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebKitSwiftLibrary(WebKit *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit18WebKitSwiftLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE732C0 != -1)
    dispatch_once(&qword_1ECE732C0, block);
  return _MergedGlobals_124;
}

uint64_t ___ZN6WebKit18WebKitSwiftLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  const WTF::String *v3;
  const char *v4;
  void *v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  Dl_info v11;

  result = (uint64_t)dlopen("libWebKitSwift.dylib", 2);
  _MergedGlobals_124 = result;
  if (result)
    return result;
  memset(&v11, 0, sizeof(v11));
  result = dladdr(WebKit::WebKitSwiftLibrary, &v11);
  if ((_DWORD)result && *v11.dli_fname)
  {
    strlen(v11.dli_fname);
    result = WTF::String::fromUTF8();
    if (!v10)
      return result;
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v10, v3);
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::String::utf8();
    if (v7)
      v4 = (char *)v7 + 16;
    else
      v4 = 0;
    v6 = dlopen(v4, 2);
    _MergedGlobals_124 = (uint64_t)v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v5);
      else
        --*(_DWORD *)v7;
    }
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
        if (v6)
          return result;
        goto LABEL_27;
      }
      *(_DWORD *)result -= 2;
    }
    if (v6)
      return result;
  }
LABEL_27:
  if (!*(_BYTE *)(a1 + 32) && !_MergedGlobals_124)
  {
    __break(0xC471u);
    JUMPOUT(0x1977A0D6CLL);
  }
  return result;
}

void sub_1977A0D7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::fastFree(a9, a2);
    else
      --*(_DWORD *)a9;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::initWKSTextAnimationManager(WebKit *this)
{
  if (qword_1ECE732C8 != -1)
    dispatch_once(&qword_1ECE732C8, &__block_literal_global_16_0);
  return qword_1ECE732D0;
}

uint64_t WebKit::initWKTextExtractionContainerItem(WebKit *this)
{
  if (qword_1ECE732D8 != -1)
    dispatch_once(&qword_1ECE732D8, &__block_literal_global_18_2);
  return qword_1ECE732E0;
}

uint64_t WebKit::initWKTextExtractionEditable(WebKit *this)
{
  if (qword_1ECE732E8 != -1)
    dispatch_once(&qword_1ECE732E8, &__block_literal_global_20_1);
  return qword_1ECE732F0;
}

uint64_t WebKit::initWKTextExtractionLink(WebKit *this)
{
  if (qword_1ECE732F8 != -1)
    dispatch_once(&qword_1ECE732F8, &__block_literal_global_22_1);
  return qword_1ECE73300;
}

uint64_t WebKit::initWKTextExtractionTextItem(WebKit *this)
{
  if (qword_1ECE73308 != -1)
    dispatch_once(&qword_1ECE73308, &__block_literal_global_24_1);
  return qword_1ECE73310;
}

uint64_t WebKit::initWKTextExtractionScrollableItem(WebKit *this)
{
  if (qword_1ECE73318 != -1)
    dispatch_once(&qword_1ECE73318, &__block_literal_global_26_2);
  return qword_1ECE73320;
}

uint64_t WebKit::initWKTextExtractionImageItem(WebKit *this)
{
  if (qword_1ECE73328 != -1)
    dispatch_once(&qword_1ECE73328, &__block_literal_global_28_1);
  return qword_1ECE73330;
}

Class ___ZN6WebKitL27initWKSTextAnimationManagerEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKSTextAnimationManager");
  qword_1ECE732D0 = (uint64_t)result;
  WebKit::getWKSTextAnimationManagerClass[0] = WebKit::WKSTextAnimationManagerFunction;
  return result;
}

uint64_t WebKit::WKSTextAnimationManagerFunction(WebKit *this)
{
  return qword_1ECE732D0;
}

Class ___ZN6WebKitL33initWKTextExtractionContainerItemEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKTextExtractionContainerItem");
  qword_1ECE732E0 = (uint64_t)result;
  WebKit::getWKTextExtractionContainerItemClass = WebKit::WKTextExtractionContainerItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionContainerItemFunction(WebKit *this)
{
  return qword_1ECE732E0;
}

Class ___ZN6WebKitL28initWKTextExtractionEditableEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKTextExtractionEditable");
  qword_1ECE732F0 = (uint64_t)result;
  WebKit::getWKTextExtractionEditableClass = WebKit::WKTextExtractionEditableFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionEditableFunction(WebKit *this)
{
  return qword_1ECE732F0;
}

Class ___ZN6WebKitL24initWKTextExtractionLinkEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKTextExtractionLink");
  qword_1ECE73300 = (uint64_t)result;
  WebKit::getWKTextExtractionLinkClass = WebKit::WKTextExtractionLinkFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionLinkFunction(WebKit *this)
{
  return qword_1ECE73300;
}

Class ___ZN6WebKitL28initWKTextExtractionTextItemEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKTextExtractionTextItem");
  qword_1ECE73310 = (uint64_t)result;
  WebKit::getWKTextExtractionTextItemClass = WebKit::WKTextExtractionTextItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionTextItemFunction(WebKit *this)
{
  return qword_1ECE73310;
}

Class ___ZN6WebKitL34initWKTextExtractionScrollableItemEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKTextExtractionScrollableItem");
  qword_1ECE73320 = (uint64_t)result;
  WebKit::getWKTextExtractionScrollableItemClass = WebKit::WKTextExtractionScrollableItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionScrollableItemFunction(WebKit *this)
{
  return qword_1ECE73320;
}

Class ___ZN6WebKitL29initWKTextExtractionImageItemEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKTextExtractionImageItem");
  qword_1ECE73330 = (uint64_t)result;
  WebKit::getWKTextExtractionImageItemClass = WebKit::WKTextExtractionImageItemFunction;
  return result;
}

uint64_t WebKit::WKTextExtractionImageItemFunction(WebKit *this)
{
  return qword_1ECE73330;
}

WebKit::WebProcess *WebKit::WebMockContentFilterManager::mockContentFilterSettingsChanged(WebKit::WebMockContentFilterManager *this, WebCore::MockContentFilterSettings *a2)
{
  WebKit::WebProcess *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    result = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  v4 = *((_QWORD *)result + 37);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 233;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v11 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::encode((IPC::Encoder *)v6, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (WebKit::WebProcess *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

WTF *WebKit::WebNotificationManager::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebNotificationManager *v3;
  void *v4;
  const WTF::StringImpl *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9[8];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x724:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::UUID>>((uint64_t *)a3, (uint64_t)&v8);
      if (v10)
        this = (WTF *)WebKit::WebNotificationManager::didClickNotification(v3, (const WTF::UUID *)&v8);
      break;
    case 0x725:
      this = IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)&v8);
      if (v10)
      {
        this = (WTF *)WebKit::WebNotificationManager::didCloseNotifications((uint64_t)v3, (uint64_t)&v8);
        if (v10)
        {
          this = v8;
          if (v8)
          {
            v8 = 0;
            *(_DWORD *)v9 = 0;
            this = (WTF *)WTF::fastFree(this, v4);
          }
        }
      }
      break;
    case 0x726:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)&v8);
      if (v10)
      {
        this = (WTF *)WebKit::WebNotificationManager::didRemoveNotificationDecisions((WTF::StringImpl **)v3, (uint64_t)&v8, v5);
        if (v10)
          this = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v6);
      }
      break;
    case 0x727:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::UUID>>((uint64_t *)a3, (uint64_t)&v8);
      if (v10)
        this = (WTF *)WebKit::WebNotificationManager::didShowNotification(v3, (const WTF::UUID *)&v8);
      break;
    case 0x728:
      this = IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((uint64_t *)a3, &v8);
      if (v10)
      {
        this = (WTF *)WebKit::WebNotificationManager::didUpdateNotificationDecision((uint64_t)v3, &v8, v9[0]);
        if (v10)
        {
          this = v8;
          v8 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF *)WTF::StringImpl::destroy(this, v7);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      break;
    default:
      return this;
  }
  return this;
}

WTF *`non-virtual thunk to'WebKit::WebNotificationManager::didReceiveMessage(WebKit::WebNotificationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebNotificationManager::didReceiveMessage((WebKit::WebNotificationManager *)((char *)this - 8), a2, a3);
}

void WebKit::WebPage::create(uint64_t a1@<X0>, uint64_t a2@<X1>, WebKit::WebProcess **a3@<X8>)
{
  WebKit::WebPage *v6;
  WebKit::WebProcess *v7;
  WebKit::WebProcess *v8;
  CFTypeRef *v9;

  v6 = (WebKit::WebPage *)API::Object::newObject(0x9C0uLL, 137);
  v7 = (WebKit::WebProcess *)WebKit::WebPage::WebPage((uint64_t)v6, a1, a2);
  *a3 = v7;
  v8 = WebKit::WebProcess::singleton(v7);
  v9 = (CFTypeRef *)*((_QWORD *)v8 + 16);
  if (v9)
  {
    CFRetain(v9[1]);
    WebKit::InjectedBundle::didCreatePage((WebKit::InjectedBundle *)v9, v6);
    CFRelease(v9[1]);
  }
  WebKit::WebPage::setHasLaunchedWebContentProcess(v8);
}

uint64_t WebKit::WebPage::WebPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  WebKit::WebPageTesting *v9;
  WebCore::Process *v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::ViewGestureGeometryCollector *v13;
  WTF::RunLoop *v14;
  WTF::RunLoop *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  WebKit::FindController *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  WebKit::WebPageInspectorTargetController *v25;
  WebKit::WebPageInspectorTargetController *v26;
  WebKit::WebScreenOrientationManager *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  NSObject *v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  __int16 v46;
  const WebKit::WebPreferencesStore *v47;
  WebKit::WebProcess *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t BoolValueForKey;
  WebKit::WebEditorClient *v53;
  uint64_t v54;
  uint64_t v55;
  WebKit::LibWebRTCProvider *v56;
  WebKit::WebProcess *v57;
  _DWORD *v58;
  _DWORD *v59;
  WebKit::WebBackForwardListProxy *v60;
  WebKit::WebProcess *v61;
  _DWORD *v62;
  _QWORD *v63;
  unsigned int *v64;
  unsigned int v65;
  CFTypeRef *v66;
  _QWORD *v67;
  _QWORD *v68;
  WebKit::WebProcess *v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  WebKit::WebProcess *v75;
  _DWORD *v76;
  _DWORD *v77;
  WebKit::WebPaymentCoordinator *v78;
  WebKit::WebChromeClient *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WebKit::WebChromeClient *v83;
  WebKit::WebPaymentCoordinator *v84;
  _DWORD *v85;
  _DWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  WTF *v89;
  _DWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _DWORD *v95;
  WebKit::WebBackForwardListProxy *v96;
  _DWORD *v97;
  _DWORD *v98;
  WebKit::LibWebRTCProvider *v99;
  unsigned int *v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned int *v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unsigned int *v122;
  unsigned int v123;
  _QWORD *v124;
  WebKit::WebPluginInfoProvider *v125;
  uint64_t v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  void *v130;
  _QWORD *v131;
  _QWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  WebKit::WebDeviceOrientationUpdateProvider *v148;
  WebKit::WebDeviceOrientationUpdateProvider *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  WTF *v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WebCore::CrossOriginAccessControlCheckDisabler *v156;
  const WebKit::SandboxExtensionHandle *v157;
  _QWORD *v158;
  _QWORD *v159;
  const WebKit::SandboxExtensionHandle *v160;
  uint64_t v161;
  _DWORD *v162;
  _DWORD *v163;
  const WTF::StringImpl *v164;
  _BYTE *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  _DWORD *v187;
  uint64_t v188;
  uint64_t v189;
  WebCore::LocalFrame *v190;
  WebCore::Settings *v191;
  _QWORD *v192;
  unsigned int *v193;
  unsigned int v194;
  _QWORD *v195;
  unsigned int *v196;
  unsigned int v197;
  _QWORD *v198;
  _QWORD *v199;
  WebCore::Page *v200;
  char v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  int v207;
  double v208;
  __int16 v209;
  uint64_t v210;
  _QWORD *v211;
  WebKit::WebProcess *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WebCore::LocalFrame *v219;
  uint64_t v220;
  WTF::ASCIICaseInsensitiveHash **v221;
  uint64_t v222;
  float v223;
  const WTF::StringImpl *v224;
  uint64_t *v225;
  const WTF::String *v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  WebCore::LegacySchemeRegistry *v232;
  uint64_t v233;
  WebKit::WebProcess *v234;
  const WTF::StringImpl *v235;
  const WTF::StringImpl *v236;
  const WTF::StringImpl *v237;
  WebKit::WebProcess *v239;
  WebKit::WebProcess *v240;
  WebKit::WebProcess *v241;
  WebKit::WebProcess *v242;
  WebKit::WebProcess *v243;
  WebKit::WebProcess *v244;
  WebKit::WebProcess *v245;
  WebKit::WebProcess *v246;
  uint64_t v247;
  uint64_t v248;
  _DWORD **v249;
  __int128 v250;
  __int128 v251;
  char v252;
  _DWORD *v253;
  _DWORD *v254;
  _DWORD *v255;
  _DWORD *v256;
  __int16 v257;
  char v258;
  char v259;
  uint64_t v260;
  _QWORD v261[2];
  char v262;
  uint64_t v263;
  WebKit::WebChromeClient *v264;
  WebKit::WebPaymentCoordinator *v265;
  _DWORD *v266;
  _DWORD *v267;
  _QWORD *v268;
  WTF *v269;
  _QWORD *v270;
  _DWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  CFTypeRef *v277;
  _QWORD *v278;
  _DWORD *v279;
  WebKit::WebBackForwardListProxy *v280;
  _DWORD *v281;
  _DWORD *v282;
  WebKit::LibWebRTCProvider *v283;
  unsigned int *v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE buf[12];
  __int16 v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  __int128 v298;
  __int128 v299;
  int v300;
  WTF::StringImpl *v301;
  __int128 v302;
  __int128 v303;
  WTF::StringImpl *v304;
  __int128 v305;
  __int128 v306;
  WTF::StringImpl *v307;
  __int128 v308;
  __int128 v309;
  unsigned int v310[4];
  unsigned int v311[4];
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  char v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  WebKit::WebPluginInfoProvider *v320;
  _DWORD *v321;
  _DWORD *v322;
  _DWORD *v323;
  WTF *v324;
  WebKit::WebDeviceOrientationUpdateProvider *v325;
  WTF *v326;
  uint64_t v327;
  WTF::StringImpl **v328;
  char v329;
  _BYTE v330[33];
  __int16 v331;
  int v332;
  char v333;
  char v334;
  _QWORD *v335;
  char v336;
  uint64_t v337;

  v337 = *MEMORY[0x1E0C80C00];
  v6 = a3 + 468;
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)(a1 + 16) = &unk_1E34F9E10;
  v7 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = (unsigned int *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = &unk_1E34F9E48;
  v247 = a1 + 32;
  *(_QWORD *)a1 = &off_1E34F9DC8;
  v248 = a2;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)a3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 345);
  WebKit::DrawingArea::create((WebKit::WebPage *)a1, a3, (uint64_t *)(a1 + 72));
  v9 = (WebKit::WebPageTesting *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(a1 + 80) = WebKit::WebPageTesting::WebPageTesting(v9, (WebKit::WebPage *)a1);
  if (*(_BYTE *)(a3 + 1392))
  {
    v10 = *(WebCore::Process **)(a3 + 1232);
    v11 = *(_QWORD *)(a3 + 1240);
  }
  else if (*(_BYTE *)(a3 + 1440))
  {
    v10 = *(WebCore::Process **)(a3 + 1424);
    v11 = *(_QWORD *)(a3 + 1432);
  }
  else
  {
    v10 = (WebCore::Process *)WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
    v11 = WebCore::Process::identifier(v10);
  }
  v12 = API::Object::newObject(0x78uLL, 134);
  *(_QWORD *)(a1 + 88) = WebKit::WebFrame::WebFrame(v12, a1, (uint64_t)v10, v11);
  *(_QWORD *)(a1 + 96) = 0;
  v249 = (_DWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a3 + 64);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 188) = 1;
  *(_WORD *)(a1 + 189) = *(_WORD *)(a3 + 192);
  *(_DWORD *)(a1 + 191) = *(_DWORD *)(v6 + 706);
  *(_QWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 199) = 0;
  *(_DWORD *)(a1 + 195) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  v13 = (WebKit::ViewGestureGeometryCollector *)WTF::fastMalloc((WTF *)0x30);
  v14 = WebKit::ViewGestureGeometryCollector::ViewGestureGeometryCollector(v13, (WebKit::WebPage *)a1);
  *(_QWORD *)(a1 + 272) = v14;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  v15 = (WTF::RunLoop *)WTF::RunLoop::main(v14);
  WTF::RunLoop::Timer::Timer<WebKit::WebPage>((WTF::RunLoop::TimerBase *)(a1 + 296), v15, a1);
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v16 = off_1E34EA238;
  *(_QWORD *)(a1 + 344) = v16;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v17 = off_1E34F9E98;
  *(_QWORD *)(a1 + 352) = v17;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v18 = off_1E34F9F10;
  *(_QWORD *)(a1 + 360) = v18;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v19 = off_1E34FA038;
  *(_QWORD *)(a1 + 368) = v19;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v20 = off_1E34FA098;
  *(_QWORD *)(a1 + 376) = v20;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v21 = (WebKit::FindController *)WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)(a1 + 448) = WebKit::FindController::FindController(v21, (WebKit::WebPage *)a1);
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v22 = off_1E34F1830;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v23 = *(unsigned int **)(a1 + 24);
  if (v23)
  {
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  *(_QWORD *)(v22 + 8) = v23;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_QWORD *)(a1 + 456) = v22;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v25 = (WebKit::WebPageInspectorTargetController *)WTF::fastMalloc((WTF *)0x40);
  v26 = WebKit::WebPageInspectorTargetController::WebPageInspectorTargetController(v25, (WebKit::WebPage *)a1);
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = v26;
  *(_BYTE *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  WebKit::WebUserContentController::getOrCreate(*(_QWORD *)(a3 + 920), (uint64_t **)(a1 + 624));
  *(_QWORD *)(a1 + 632) = 0;
  v27 = (WebKit::WebScreenOrientationManager *)WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)(a1 + 640) = WebKit::WebScreenOrientationManager::WebScreenOrientationManager(v27, (WebKit::WebPage *)a1);
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v28 = 0;
  v28[1] = 0;
  v28[2] = a1;
  *(_QWORD *)(a1 + 648) = v28;
  v29 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v29 = &off_1E34EAF20;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_BYTE *)(v29 + 48) = 0;
  *(_QWORD *)(a1 + 656) = v29;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v30 = &off_1E34E0FA0;
  v30[1] = 0;
  v30[3] = 0;
  v30[4] = 0;
  v30[2] = a1;
  *(_QWORD *)(a1 + 664) = v30;
  *(_QWORD *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v31 = off_1E34FA278;
  v31[1] = a1;
  *(_QWORD *)buf = v31;
  PAL::HysteresisActivity::HysteresisActivity(a1 + 736, (uint64_t *)buf, 0.3);
  v32 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = 0;
  v34 = 0;
  *(_WORD *)(a1 + 792) = *(_WORD *)(a3 + 256);
  *(_WORD *)(a1 + 794) = 0;
  *(_DWORD *)buf = 134480385;
  *(_WORD *)&buf[4] = 8208;
  buf[6] = 64;
  do
    v33 |= buf[v34++];
  while (v34 != 7);
  *(_BYTE *)(a1 + 796) = v33;
  *(_QWORD *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 848) = 16843009;
  *(_WORD *)(a1 + 852) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_BYTE *)(a1 + 863) = 0;
  *(_BYTE *)(a1 + 900) = 0;
  *(_BYTE *)(a1 + 908) = 0;
  *(_DWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_BYTE *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + 916) = *(_BYTE *)(a3 + 1187);
  *(_QWORD *)(a1 + 934) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  WebCore::ViewportConfiguration::ViewportConfiguration((WebCore::ViewportConfiguration *)(a1 + 944));
  *(_QWORD *)(a1 + 1184) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_BYTE *)(a1 + 1193) = *(_BYTE *)(a3 + 372);
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_WORD *)(a1 + 1292) = 257;
  *(_BYTE *)(a1 + 1294) = 1;
  *(_BYTE *)(a1 + 1295) = *(_BYTE *)(a3 + 512);
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)v6;
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(a1 + 1336) = *(_QWORD *)(v6 + 24);
  *(_BYTE *)(a1 + 1344) = 0;
  *(_BYTE *)(a1 + 1376) = 0;
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)(a1 + 1384));
  *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a3 + 504);
  *(_BYTE *)(a1 + 1492) = *(_BYTE *)(a3 + 508);
  *(_BYTE *)(a1 + 1493) = 0;
  *(_DWORD *)(a1 + 1540) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_BYTE *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1521) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v35 = off_1E34FA2A0;
  v35[1] = WebKit::WebPage::updateFocusedElementInformation;
  v35[2] = 0;
  v35[3] = a1;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 1584));
  *(_QWORD *)(a1 + 1584) = off_1E34E0DF8;
  *(_QWORD *)(a1 + 1632) = v35;
  *(_QWORD *)(a1 + 1640) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_BYTE *)(a1 + 1656) = 0;
  *(_BYTE *)(a1 + 1672) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_BYTE *)(a1 + 1696) = 0;
  WebCore::Timer::Timer<WebKit::WebPage,WebKit::WebPage>((WebCore::TimerBase *)(a1 + 1704), a1, (uint64_t)WebKit::WebPage::layerVolatilityTimerFired, 0);
  *(_QWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_BYTE *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1800) = 0x11040000FFFFFFFFLL;
  *(_BYTE *)(a1 + 1808) = 1;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_WORD *)(a1 + 1832) = *(_WORD *)(a3 + 8);
  *(_BYTE *)(a1 + 1834) = 1;
  MEMORY[0x19AEAD930](a1 + 1840, "App nap disabled for page due to user activity", 47);
  *(_QWORD *)(a1 + 1896) = 0;
  *(_BYTE *)(a1 + 1904) = 0;
  *(_BYTE *)(a1 + 2016) = 0;
  *(_DWORD *)(a1 + 2024) = 256;
  *(_DWORD *)(a1 + 2028) = 2;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_BYTE *)(a1 + 2048) = *(_BYTE *)(a3 + 585);
  v36 = *(_DWORD **)(a3 + 592);
  if (v36)
    *v36 += 2;
  *(_QWORD *)(a1 + 2056) = v36;
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a3 + 600);
  *(_QWORD *)(a1 + 2112) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_QWORD *)(a1 + 2103) = 0;
  *(_QWORD *)(a1 + 2120) = *(_QWORD *)(a3 + 80);
  *(_BYTE *)(a1 + 2128) = 0;
  *(_BYTE *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2140) = 0;
  *(_QWORD *)(a1 + 2152) = 0;
  WebCore::Timer::Timer<WebKit::WebPage,WebKit::WebPage>((WebCore::TimerBase *)(a1 + 2160), a1, (uint64_t)WebKit::WebPage::textAutoSizingAdjustmentTimerFired, 0);
  *(_OWORD *)(a1 + 2216) = 0u;
  WTF::AtomString::AtomString((WTF::AtomString *)(a1 + 2232), (WTF::AtomStringImpl **)(a3 + 1080));
  v37 = *(_DWORD **)(a3 + 1160);
  if (v37)
    *v37 += 2;
  *(_QWORD *)(a1 + 2240) = v37;
  *(_BYTE *)(a1 + 2248) = 1;
  *(_BYTE *)(a1 + 2249) = *(_BYTE *)(a3 + 1180);
  *(_BYTE *)(a1 + 2250) = 0;
  *(_BYTE *)(a1 + 2251) = *(_BYTE *)(a3 + 1181);
  *(_BYTE *)(a1 + 2252) = 1;
  *(_DWORD *)(a1 + 2253) = 0;
  *(_BYTE *)(a1 + 2257) = 0;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v38 = off_1E34FA2A0;
  v38[1] = WebKit::WebPage::updateLayoutViewportHeightExpansionTimerFired;
  v38[2] = 0;
  v38[3] = a1;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 2264));
  *(_QWORD *)(a1 + 2264) = off_1E34E0DF8;
  *(_QWORD *)(a1 + 2312) = v38;
  *(_QWORD *)(a1 + 2320) = 0x3F9999999999999ALL;
  *(_QWORD *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_BYTE *)(a1 + 2344) = 0;
  *(_BYTE *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_BYTE *)(a1 + 2416) = *(_BYTE *)(a3 + 1186);
  v39 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v39 + 8) = 1;
  *(_QWORD *)v39 = off_1E34F1B68;
  *(_BYTE *)(v39 + 12) = 0;
  *(_QWORD *)(a1 + 2424) = v39;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_QWORD *)(a1 + 2464) = 0;
  v40 = WTF::fastMalloc((WTF *)0x30);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v41 = *(unsigned int **)(a1 + 24);
  if (v41)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  *(_QWORD *)v40 = v41;
  *(_OWORD *)(v40 + 8) = 0u;
  *(_OWORD *)(v40 + 24) = 0u;
  *(_QWORD *)(v40 + 40) = 0;
  *(_QWORD *)(a1 + 2472) = v40;
  *(_OWORD *)(a1 + 2480) = 0u;
  v43 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v45 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    v288 = 2048;
    v289 = v45;
    _os_log_impl(&dword_196BCC000, v43, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::constructor:", buf, 0x16u);
  }
  v46 = *(unsigned __int8 *)(a3 + 1185);
  WebKit::cachedAllowsRequest(void)::allowsRequest = v46 | 0x100;
  v47 = (const WebKit::WebPreferencesStore *)(a3 + 16);
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a3 + 16), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, v44))
  {
    if (*(_BYTE *)(a1 + 194))
    {
      if (!*(_BYTE *)(a1 + 113))
      {
        if (*(_BYTE *)(a1 + 191))
        {
          if (*(_BYTE *)(a1 + 192))
          {
            if (*(_BYTE *)(a1 + 193))
            {
              WebCore::ProcessCapabilities::setHardwareAcceleratedDecodingDisabled((WebCore::ProcessCapabilities *)1);
              WebCore::ProcessCapabilities::setCanUseAcceleratedBuffers(0);
              v142 = _MergedGlobals_125;
              _MergedGlobals_125 = 1;
              if ((v142 & 1) == 0)
                CGImageSourceDisableHardwareDecoding();
            }
          }
        }
      }
    }
  }
  {
    v48 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v239 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v48 = WebKit::WebProcess::WebProcess(v239);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v48;
  }
  v49 = (_DWORD *)WebKit::WebProcess::webPageGroup((uint64_t)v48, (uint64_t *)(a3 + 88));
  WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>::operator=(v249, v49);
  v51 = *(unsigned __int8 *)(a3 + 1392);
  {
    BoolValueForKey = WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v240 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    BoolValueForKey = (uint64_t)WebKit::WebProcess::WebProcess(v240);
    WebKit::WebProcess::singleton(void)::process = BoolValueForKey;
  }
  if (!*(_BYTE *)(BoolValueForKey + 672))
    goto LABEL_297;
  v53 = (WebKit::WebEditorClient *)WTF::fastMalloc((WTF *)0x28);
  v285 = (uint64_t)WebKit::WebEditorClient::WebEditorClient(v53, (WebKit::WebPage *)a1);
  v54 = *(_QWORD *)(a3 + 80);
  v55 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = off_1E34EB3D8;
  *(_QWORD *)(v55 + 16) = v54;
  v284 = (unsigned int *)v55;
  v56 = (WebKit::LibWebRTCProvider *)WTF::fastMalloc((WTF *)0xD0);
  v283 = WebKit::LibWebRTCProvider::LibWebRTCProvider(v56, (WebKit::WebPage *)a1);
  {
    v57 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v241 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v57 = WebKit::WebProcess::WebProcess(v241);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v57;
  }
  v58 = (_DWORD *)*((_QWORD *)v57 + 46);
  ++v58[2];
  v59 = *(_DWORD **)(a1 + 624);
  ++v59[2];
  v281 = v59;
  v282 = v58;
  v60 = (WebKit::WebBackForwardListProxy *)WTF::fastMalloc((WTF *)0x28);
  v280 = WebKit::WebBackForwardListProxy::WebBackForwardListProxy(v60, (WebKit::WebPage *)a1);
  {
    v61 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v242 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v61 = WebKit::WebProcess::WebProcess(v242);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v61;
  }
  v62 = (_DWORD *)*((_QWORD *)v61 + 51);
  ++v62[2];
  v279 = v62;
  v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v63 = off_1E34F0478;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v64 = *(unsigned int **)v8;
  if (*(_QWORD *)v8)
  {
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 + 1, v64));
  }
  v63[1] = v64;
  v278 = v63;
  v66 = *(CFTypeRef **)(a1 + 88);
  CFRetain(v66[1]);
  v277 = v66;
  WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>((uint64_t)&v250, &v277, v51 != 0);
  v274 = *(_OWORD *)(a3 + 1400);
  v275 = *(_QWORD *)(a3 + 1416);
  WebKit::frameFromIdentifier((WebKit::WebProcess *)&v276, (uint64_t)&v274);
  v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v67 = off_1E34FA318;
  v67[1] = v248;
  v67[2] = 0;
  v273 = v67;
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v68 = off_1E34E9500;
  v68[1] = a1;
  v272 = v68;
  {
    v69 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v243 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v69 = WebKit::WebProcess::WebProcess(v243);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v69;
  }
  v70 = (_DWORD *)*((_QWORD *)v69 + 50);
  ++v70[2];
  v271 = v70;
  v71 = (WTF::StringImpl *)*((_QWORD *)v69 + 98);
  if (v71)
    *(_DWORD *)v71 += 2;
  v72 = *((_QWORD *)v69 + 99);
  v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v73 = off_1E34EE110;
  v73[1] = 0;
  if (v71)
    *(_DWORD *)v71 += 2;
  v73[2] = v71;
  v73[3] = v72;
  v269 = 0;
  v270 = v73;
  v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v74 = off_1E34EAF48;
  v74[1] = a1;
  v268 = v74;
  {
    v75 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v244 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v75 = WebKit::WebProcess::WebProcess(v244);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v75;
  }
  v76 = (_DWORD *)*((_QWORD *)v75 + 47);
  ++v76[2];
  v77 = *(_DWORD **)(a1 + 2424);
  ++v77[2];
  v266 = v77;
  v267 = v76;
  v78 = (WebKit::WebPaymentCoordinator *)WTF::fastMalloc((WTF *)0x48);
  v265 = WebKit::WebPaymentCoordinator::WebPaymentCoordinator(v78, (WebKit::WebPage *)a1);
  v79 = (WebKit::WebChromeClient *)WTF::fastMalloc((WTF *)0x18);
  v264 = WebKit::WebChromeClient::WebChromeClient(v79, (WebKit::WebPage *)a1);
  v80 = *(_QWORD *)(a1 + 40);
  v81 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v81 = off_1E34EED78;
  *(_QWORD *)(v81 + 8) = v80;
  *(_BYTE *)(v81 + 16) = 1;
  v263 = v81;
  WebCore::PageConfiguration::PageConfiguration();
  v82 = v263;
  v263 = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v264;
  v264 = 0;
  v47 = (const WebKit::WebPreferencesStore *)(a3 + 16);
  if (v83)
    (*(void (**)(WebKit::WebChromeClient *))(*(_QWORD *)v83 + 1904))(v83);
  v84 = v265;
  v265 = 0;
  if (v84)
    (*(void (**)(WebKit::WebPaymentCoordinator *))(*(_QWORD *)v84 + 152))(v84);
  v85 = v266;
  v266 = 0;
  if (v85)
  {
    if (v85[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
    else
      --v85[2];
  }
  v86 = v267;
  v267 = 0;
  if (v86)
  {
    if (v86[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[2];
  }
  v87 = v268;
  v268 = 0;
  if (v87)
    (*(void (**)(_QWORD *))(*v87 + 8))(v87);
  v88 = v270;
  v270 = 0;
  if (v88)
    (*(void (**)(_QWORD *))(*v88 + 8))(v88);
  v89 = v269;
  v269 = 0;
  if (v89)
    std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100]((int)&v269, v89);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v89);
    else
      *(_DWORD *)v71 -= 2;
  }
  v90 = v271;
  v271 = 0;
  if (v90)
  {
    if (v90[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
    else
      --v90[2];
  }
  v91 = v272;
  v272 = 0;
  if (v91)
    (*(void (**)(_QWORD *))(*v91 + 8))(v91);
  v92 = v273;
  v273 = 0;
  if (v92)
    (*(void (**)(_QWORD *))(*v92 + 8))(v92);
  v93 = v276;
  v276 = 0;
  if (v93)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v93 + 8));
  if (DWORD2(v250) != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E34FA138[DWORD2(v250)])(&v276, &v250);
  DWORD2(v250) = -1;
  if (v277)
    CFRelease(v277[1]);
  v94 = v278;
  v278 = 0;
  if (v94)
    (*(void (**)(_QWORD *))(*v94 + 8))(v94);
  v95 = v279;
  v279 = 0;
  if (v95)
  {
    if (v95[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 120))(v95);
    else
      --v95[2];
  }
  v96 = v280;
  v280 = 0;
  if (v96)
  {
    if (*((_DWORD *)v96 + 2) == 1)
      (*(void (**)(WebKit::WebBackForwardListProxy *))(*(_QWORD *)v96 + 8))(v96);
    else
      --*((_DWORD *)v96 + 2);
  }
  v97 = v281;
  v281 = 0;
  if (v97)
  {
    if (v97[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v97 + 8))(v97);
    else
      --v97[2];
  }
  v98 = v282;
  v282 = 0;
  if (v98)
  {
    if (v98[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 16))(v98);
    else
      --v98[2];
  }
  v99 = v283;
  v283 = 0;
  if (v99)
    (*(void (**)(WebKit::LibWebRTCProvider *))(*(_QWORD *)v99 + 8))(v99);
  v100 = v284;
  v284 = 0;
  if (v100)
  {
    v139 = v100 + 2;
    do
    {
      v140 = __ldaxr(v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v139));
    if (!v141)
    {
      atomic_store(1u, v100 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 24))(v100);
    }
  }
  v101 = v285;
  v285 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v102 = &off_1E34EF000;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v103 = *(unsigned int **)v8;
  if (*(_QWORD *)v8)
  {
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 + 1, v103));
  }
  v102[1] = v103;
  v105 = v290;
  v290 = v102;
  if (v105)
    (*(void (**)(_QWORD *))(*v105 + 80))(v105);
  v106 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v106 = off_1E34EA660;
  *(_QWORD *)(v106 + 8) = &unk_1E34EA730;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v107 = *(unsigned int **)v8;
  if (*(_QWORD *)v8)
  {
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 + 1, v107));
  }
  *(_QWORD *)(v106 + 16) = v107;
  *(_OWORD *)(v106 + 24) = 0u;
  *(_OWORD *)(v106 + 40) = 0u;
  v109 = v291;
  v291 = v106;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v110 + 8) = 0;
  *(_QWORD *)v110 = off_1E34EEE10;
  *(_QWORD *)(v110 + 16) = a1;
  v111 = v317;
  v317 = v110;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 56))(v111);
  v112 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v112 = &off_1E34F00D8;
  v112[1] = a1;
  v113 = v318;
  v318 = v112;
  if (v113)
    (*(void (**)(_QWORD *))(*v113 + 16))(v113);
  v114 = *(_QWORD *)(a1 + 640);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v114 + 8), v114);
  v115 = *(unsigned int **)(v114 + 8);
  if (v115)
  {
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 + 1, v115));
  }
  BoolValueForKey = (uint64_t)v324;
  v324 = (WTF *)v115;
  if (BoolValueForKey)
  {
    do
    {
      v117 = __ldaxr((unsigned int *)BoolValueForKey);
      v118 = v117 - 1;
    }
    while (__stlxr(v118, (unsigned int *)BoolValueForKey));
    if (!v118)
      goto LABEL_298;
  }
  while (1)
  {
    v119 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v119 = off_1E34F0C68;
    v119[1] = 0;
    v119[2] = a1;
    v119[3] = 0;
    v119[4] = 0;
    v119[5] = 0;
    v120 = v319;
    v319 = v119;
    if (v120)
      (*(void (**)(_QWORD *))(*v120 + 8))(v120);
    v121 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v121 = off_1E34F0FF0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8, v7);
    v122 = *(unsigned int **)v8;
    if (*(_QWORD *)v8)
    {
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 + 1, v122));
    }
    v121[1] = v122;
    v121[2] = 0;
    v121[3] = 0;
    v121[4] = 0;
    v124 = v316;
    v316 = v121;
    if (v124)
      (*(void (**)(_QWORD *))(*v124 + 8))(v124);
    WebKit::WebDatabaseProvider::getOrCreate(*((_QWORD *)*v249 + 3), &v250);
    v125 = v320;
    v320 = (WebKit::WebPluginInfoProvider *)v250;
    if (v125)
    {
      if (*((_DWORD *)v125 + 2) == 1)
        v125 = (WebKit::WebPluginInfoProvider *)(*(uint64_t (**)(WebKit::WebPluginInfoProvider *))(*(_QWORD *)v125 + 8))(v125);
      else
        --*((_DWORD *)v125 + 2);
    }
    v126 = WebKit::WebPluginInfoProvider::singleton(v125);
    ++*(_DWORD *)(v126 + 8);
    v127 = v321;
    v321 = (_DWORD *)v126;
    if (v127)
    {
      if (v127[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v127 + 8))(v127);
      else
        --v127[2];
    }
    WebKit::WebStorageNamespaceProvider::getOrCreate((WebKit::WebStorageNamespaceProvider **)&v250);
    v128 = v322;
    v322 = (_DWORD *)v250;
    if (v128)
    {
      if (v128[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v128 + 8))(v128);
      else
        --v128[2];
    }
    WebKit::VisitedLinkTableController::getOrCreate(*(WebKit **)(a3 + 248), (uint64_t **)&v250);
    v129 = v323;
    v323 = (_DWORD *)v250;
    if (v129)
    {
      if (v129[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v129 + 8))(v129);
      else
        --v129[2];
    }
    v131 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v131 = off_1E34EE1C8;
    v131[1] = 0;
    v131[2] = a1;
    v132 = v292;
    v292 = v131;
    if (v132)
      (*(void (**)(_QWORD *))(*v132 + 8))(v132);
    if (v315 == *(_BYTE *)(a3 + 904))
    {
      if (v315)
      {
        WTF::String::operator=(&v293, (WTF::StringImpl *)(a3 + 640));
        WTF::String::operator=(&v294, (WTF::StringImpl *)(a3 + 648));
        WTF::String::operator=(&v295, (WTF::StringImpl *)(a3 + 656));
        WTF::String::operator=(&v296, (WTF::StringImpl *)(a3 + 664));
        WTF::String::operator=(&v297, (WTF::StringImpl *)(a3 + 672));
        v133 = *(_OWORD *)(a3 + 696);
        v298 = *(_OWORD *)(a3 + 680);
        v299 = v133;
        v300 = *(_DWORD *)(a3 + 712);
        WTF::String::operator=(&v301, (WTF::StringImpl *)(a3 + 720));
        v134 = *(_OWORD *)(a3 + 744);
        v302 = *(_OWORD *)(a3 + 728);
        v303 = v134;
        WTF::String::operator=(&v304, (WTF::StringImpl *)(a3 + 760));
        v135 = *(_OWORD *)(a3 + 784);
        v305 = *(_OWORD *)(a3 + 768);
        v306 = v135;
        WTF::String::operator=(&v307, (WTF::StringImpl *)(a3 + 800));
        v136 = *(_OWORD *)(a3 + 824);
        v308 = *(_OWORD *)(a3 + 808);
        v309 = v136;
        WebCore::Color::operator=();
        WebCore::Color::operator=();
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v310, a3 + 856);
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v311, (unsigned int *)(a3 + 872));
        if ((WTF::StringImpl **)(a3 + 640) != &v293)
        {
          v137 = v314;
          v138 = *(unsigned int *)(a3 + 900);
          if (v314 <= v138)
          {
            if (v138 > v313)
            {
              WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v312, 0);
              WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v312, *(unsigned int *)(a3 + 900));
              v137 = v314;
            }
          }
          else
          {
            WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct((WTF::StringImpl *)(v312 + (v138 << 6)), (WTF::StringImpl *)(v312 + ((unint64_t)v314 << 6)));
            v314 = v138;
            v137 = v138;
          }
          v143 = *(_QWORD *)(a3 + 888);
          v144 = v312;
          if (v137)
          {
            v145 = v143 + ((unint64_t)v137 << 6);
            do
            {
              WTF::String::operator=((WTF::StringImpl **)v144, (WTF::StringImpl *)v143);
              WTF::String::operator=((WTF::StringImpl **)(v144 + 8), (WTF::StringImpl *)(v143 + 8));
              v146 = *(_OWORD *)(v143 + 32);
              *(_OWORD *)(v144 + 16) = *(_OWORD *)(v143 + 16);
              *(_OWORD *)(v144 + 32) = v146;
              WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v144 + 48), (unsigned int *)(v143 + 48));
              v143 += 64;
              v144 += 64;
            }
            while (v143 != v145);
            v143 = *(_QWORD *)(a3 + 888);
            v147 = v314;
            v144 = v312;
          }
          else
          {
            v147 = 0;
          }
          WTF::VectorCopier<false,WebCore::ApplicationManifest::Shortcut>::uninitializedCopy<WebCore::ApplicationManifest::Shortcut>(v143 + (v147 << 6), v143 + ((unint64_t)*(unsigned int *)(a3 + 900) << 6), v144 + (v147 << 6));
          v314 = *(_DWORD *)(a3 + 900);
        }
      }
    }
    else if (v315)
    {
      WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&v293, v130);
      v315 = 0;
    }
    else
    {
      WebCore::ApplicationManifest::ApplicationManifest((uint64_t)&v293, a3 + 640);
      v315 = 1;
    }
    v148 = (WebKit::WebDeviceOrientationUpdateProvider *)WTF::fastMalloc((WTF *)0x50);
    WebKit::WebDeviceOrientationUpdateProvider::WebDeviceOrientationUpdateProvider(v148, (WebKit::WebPage *)a1);
    v149 = v325;
    v325 = v148;
    if (v149)
    {
      if (*((_DWORD *)v149 + 2) == 1)
        (*(void (**)(WebKit::WebDeviceOrientationUpdateProvider *))(*(_QWORD *)v149 + 8))(v149);
      else
        --*((_DWORD *)v149 + 2);
    }
    if (*(_BYTE *)(a3 + 1040))
    {
      WebKit::WebExtensionControllerProxy::getOrCreate((WebKit::WebExtensionControllerProxy **)(a3 + 1008), a1, (unsigned int ***)&v250);
      v150 = *(_QWORD *)(a1 + 632);
      *(_QWORD *)(a1 + 632) = v250;
      if (v150)
        WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v150 + 16));
    }
    v151 = *(unsigned int *)(a1 + 2380);
    if ((_DWORD)v151)
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a1 + 2368), (WTF::StringImpl *)(*(_QWORD *)(a1 + 2368) + 8 * v151));
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 2368, (_DWORD *)(a3 + 1088));
    if (*(_DWORD *)(a1 + 2380))
      WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess((WebKit::WebPage *)a1);
    WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(a1 + 2368, (uint64_t)&v250);
    if (HIDWORD(v327))
      WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(v326, (WTF *)((char *)v326 + 32 * HIDWORD(v327)));
    v153 = v326;
    if (v326)
    {
      v326 = 0;
      LODWORD(v327) = 0;
      WTF::fastFree(v153, v152);
    }
    v154 = *((_QWORD *)&v250 + 1);
    v326 = (WTF *)v250;
    v250 = 0uLL;
    v327 = v154;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v250, v152);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(&v328, (_QWORD **)(a3 + 1104));
    v330[32] = *(_BYTE *)(a3 + 1112);
    v329 = *(_BYTE *)(a3 + 1113);
    v155 = std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>((WTF::StringImpl *)v330, a3 + 1120);
    v331 = *(_WORD *)(a3 + 1183);
    if (v333 == *(_BYTE *)(a3 + 1156))
    {
      if (v333)
        v332 = *(_DWORD *)(a3 + 1152);
    }
    else if (v333)
    {
      v333 = 0;
    }
    else
    {
      v332 = *(_DWORD *)(a3 + 1152);
      v333 = 1;
    }
    if (!*(_BYTE *)(a3 + 1158))
    {
      v156 = (WebCore::CrossOriginAccessControlCheckDisabler *)WebCore::CrossOriginAccessControlCheckDisabler::singleton(v155);
      WebCore::CrossOriginAccessControlCheckDisabler::setCrossOriginAccessControlCheckEnabled(v156);
    }
    v158 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v158 = off_1E34EE2A0;
    v158[1] = a1;
    v159 = v335;
    v335 = v158;
    if (v159)
      (*(void (**)(_QWORD *))(*v159 + 8))(v159);
    v336 = *(_BYTE *)(a3 + 1188);
    if ((byte_1ECE73339 & 1) == 0)
    {
      WebKit::SandboxExtension::consumePermanently(a3 + 552, v157);
      WebKit::SandboxExtension::consumePermanently(a3 + 568, v160);
      byte_1ECE73339 = 1;
    }
    v334 = *(_BYTE *)(a3 + 511);
    WebCore::Page::create();
    v161 = v250;
    *(_QWORD *)&v250 = 0;
    v162 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v161;
    if (v162)
    {
      WTF::RefCounted<WebCore::Page>::deref(v162);
      v163 = (_DWORD *)v250;
      *(_QWORD *)&v250 = 0;
      if (v163)
        WTF::RefCounted<WebCore::Page>::deref(v163);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 112) + 680) |= 0x80uLL;
    if (*(_BYTE *)(a3 + 180))
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 48) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 48), *(unsigned int *)(a3 + 176), *(_QWORD *)(a3 + 184));
    WebKit::WebStorageNamespaceProvider::incrementUseCount(*(WebCore::SecurityOriginData **)(a1 + 2120));
    WebKit::WebPage::updatePreferences((WebKit::WebPage *)a1, v47);
    WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory((WebCore::DeprecatedGlobalSettings *)1);
    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>((WebCore::Color *)(a1 + 1800), a3 + 1048);
    WebCore::Page::setDeviceScaleFactor(*(WebCore::Page **)(a1 + 48), *(float *)(a3 + 260));
    v165 = *(_BYTE **)(a1 + 72);
    v166 = *(unsigned __int8 *)(a3 + 584);
    if (v165[65] != v166)
    {
      v165[65] = v166;
      (*(void (**)(_BYTE *))(*(_QWORD *)v165 + 264))(v165);
    }
    if (*(_BYTE *)(a3 + 369))
      WebKit::WebPage::freezeLayerTree(a1, 32);
    {
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    *(_BYTE *)(a1 + 1831) = WebKit::WebPreferencesStore::getBoolValueForKey(v47, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, v164);
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 184))(*(_QWORD *)(a1 + 72)) & 1) == 0)
    {
      *(_BYTE *)(a1 + 1831) = 0;
      v178 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 112);
      v168 = v178 + 664;
      v169 = *(unsigned int *)(v178 + 720) | ((unint64_t)*(unsigned __int8 *)(v178 + 724) << 32);
      v170 = *(_QWORD *)(v178 + 712);
      v171 = *(_QWORD *)(v178 + 704);
      v172 = *(_QWORD *)(v178 + 696);
      v173 = *(_QWORD *)(v178 + 688);
      v174 = *(_QWORD *)(v178 + 680);
      v175 = *(_QWORD *)(v178 + 672);
      v176 = *(_QWORD *)(v178 + 664);
LABEL_208:
      v177 = 0;
      goto LABEL_209;
    }
    v167 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 112);
    v168 = v167 + 664;
    v169 = *(unsigned int *)(v167 + 720) | ((unint64_t)*(unsigned __int8 *)(v167 + 724) << 32);
    v170 = *(_QWORD *)(v167 + 712);
    v171 = *(_QWORD *)(v167 + 704);
    v172 = *(_QWORD *)(v167 + 696);
    v173 = *(_QWORD *)(v167 + 688);
    v174 = *(_QWORD *)(v167 + 680);
    v175 = *(_QWORD *)(v167 + 672);
    v176 = *(_QWORD *)(v167 + 664);
    if (!*(_BYTE *)(a1 + 1831))
      goto LABEL_208;
    v177 = 0x2000000000000000;
LABEL_209:
    *(_QWORD *)v168 = v176;
    *(_QWORD *)(v168 + 8) = v175;
    *(_QWORD *)(v168 + 16) = v174;
    *(_QWORD *)(v168 + 24) = v177 | v173 & 0xDFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v168 + 32) = v172;
    *(_QWORD *)(v168 + 40) = v171;
    *(_QWORD *)(v168 + 48) = v170;
    *(_DWORD *)(v168 + 56) = v169;
    *(_BYTE *)(v168 + 60) = BYTE4(v169);
    v179 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(*(_QWORD *)(v179 + 112) + 312) = 0x7FF0000000000000;
    WebKit::WebFrame::initWithCoreMainFrame(*(WebKit::WebFrame **)(a1 + 88), (WebKit::WebPage *)a1, *(WebCore::Frame **)(v179 + 160));
    if (*(_BYTE *)(a3 + 1392)
      || (v250 = *(_OWORD *)(*(_QWORD *)(a1 + 88) + 80),
          v285 = (uint64_t)&v250,
          v180 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(v247),
          IPC::MessageSender::send<Messages::WebPageProxy::DidCreateMainFrame>(v247, (uint64_t **)&v285, v180),
          *(_BYTE *)(a3 + 1392)))
    {
      v181 = *(unsigned int *)(a3 + 1268);
      if ((_DWORD)v181)
      {
        v182 = *(_QWORD *)(a3 + 1256);
        v183 = 40 * v181;
        do
        {
          WebKit::WebPage::constructFrameTree(a1, *(_QWORD *)(a1 + 88), v182);
          v182 += 40;
          v183 -= 40;
        }
        while (v183);
        if (!*(_BYTE *)(a3 + 1392))
          goto LABEL_297;
      }
      BoolValueForKey = WebCore::Page::setMainFrameURL(*(WebCore::Page **)(a1 + 48), (const WTF::URL *)(a3 + 1192));
      if (!*(_BYTE *)(a3 + 1392))
        goto LABEL_297;
      LOBYTE(v250) = 0;
      v262 = 0;
      if (*(_BYTE *)(a3 + 1384))
      {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v250, (_QWORD **)(a3 + 1272));
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v250 + 8, a3 + 1280);
        WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v251 + 8, a3 + 1296);
        v184 = *(_DWORD **)(a3 + 1312);
        if (v184)
          *v184 += 2;
        v253 = v184;
        v185 = *(_DWORD **)(a3 + 1320);
        if (v185)
          *v185 += 2;
        v254 = v185;
        v186 = *(_DWORD **)(a3 + 1328);
        if (v186)
          *v186 += 2;
        v255 = v186;
        v187 = *(_DWORD **)(a3 + 1336);
        if (v187)
          *v187 += 2;
        v256 = v187;
        v257 = *(_WORD *)(a3 + 1344);
        v258 = *(_BYTE *)(a3 + 1346);
        v259 = *(_BYTE *)(a3 + 1352);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&v260, (_QWORD **)(a3 + 1360));
        *(_QWORD *)((char *)v261 + 7) = *(_QWORD *)(a3 + 1375);
        v261[0] = *(_QWORD *)(a3 + 1368);
        v262 = 1;
        v188 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
        if (!v188)
          goto LABEL_232;
        v189 = *(_QWORD *)(v188 + 8);
        if (!v189)
          goto LABEL_232;
        if (!*(_BYTE *)(v189 + 144))
          goto LABEL_232;
        BoolValueForKey = *(_QWORD *)(v189 + 264);
        if (!BoolValueForKey)
          goto LABEL_232;
        if (!*(_BYTE *)(a3 + 1392) || !*(_BYTE *)(a3 + 1384))
          goto LABEL_297;
        WebKit::WebRemoteFrameClient::applyWebsitePolicies((unsigned int *)BoolValueForKey, (_WORD *)(a3 + 1272));
        if (v262)
LABEL_232:
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v250, v50);
      }
    }
    (*(void (**)(_QWORD, const WebKit::WebPreferencesStore *))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72), v47);
    v191 = *(WebCore::Settings **)(*(_QWORD *)(a1 + 48) + 112);
    if ((*(_BYTE *)(a3 + 344) != 0) != ((*((_QWORD *)v191 + 83) >> 38) & 1))
      WebCore::Settings::setBackgroundShouldExtendBeyondPage(v191);
    WebKit::WebPage::setPageAndTextZoomFactors((WebKit::WebPage *)a1, *(double *)(a3 + 280), *(double *)(a3 + 272), v190);
    v192 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v192 = &off_1E34EFD20;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8, v7);
    v193 = *(unsigned int **)(a1 + 24);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 + 1, v193));
    v192[1] = v193;
    WebCore::provideGeolocationTo();
    v195 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v195 = off_1E34EF6E0;
    v195[1] = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8, v7);
    v196 = *(unsigned int **)(a1 + 24);
    if (v196)
    {
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 + 1, v196));
    }
    v195[2] = v196;
    WebCore::provideNotification();
    v198 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v198 = &off_1E34F0C18;
    v198[1] = a1;
    WebCore::provideUserMediaTo();
    v199 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v199 = &off_1E34EF658;
    v199[1] = 0;
    v199[2] = a1;
    WebCore::provideMediaKeySystemTo();
    v200 = *(WebCore::Page **)(a1 + 48);
    *((_BYTE *)v200 + 1091) = *(_BYTE *)(a3 + 368);
    *((_BYTE *)v200 + 1097) = *(_BYTE *)(a3 + 346);
    WebCore::Page::setCanStartMedia(v200);
    *(_BYTE *)(a1 + 328) = *(_BYTE *)(a3 + 298);
    if (*(_BYTE *)(a3 + 299))
      WebCore::Page::suspendAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
    if (*(_BYTE *)(a3 + 297))
      WebCore::Page::setOpenedByDOM(*(WebCore::Page **)(a1 + 48));
    WebCore::Page::setGroupName(*(WebCore::Page **)(a1 + 48), (const WTF::String *)(*(_QWORD *)(a1 + 96) + 16));
    WebCore::Page::setUserInterfaceLayoutDirection();
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 456) = *(_DWORD *)(a3 + 500);
    WebCore::Page::setOverrideViewportArguments();
    WebKit::WebPage::platformInitialize((WebKit::WebPage *)a1, a3);
    WebKit::WebPage::setUseFixedLayout(a1, *(unsigned __int8 *)(a3 + 120));
    WebKit::WebPage::setDefaultUnobscuredSize((WebCore::LocalFrameView *)a1, (const WebCore::FloatSize *)(a3 + 132));
    WebKit::WebPage::setMinimumUnobscuredSize((WebCore::LocalFrameView *)a1, (const WebCore::FloatSize *)(a3 + 140));
    WebKit::WebPage::setMaximumUnobscuredSize((WebCore::LocalFrameView *)a1, (const WebCore::FloatSize *)(a3 + 148));
    WebCore::Color::operator=();
    v201 = *(_BYTE *)(a3 + 195);
    v202 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v250 = *(_QWORD *)(v202 + 468);
    DWORD2(v250) = *(_DWORD *)(v202 + 476);
    LOBYTE(v250) = v201;
    WebCore::Page::setPagination();
    v203 = *(_BYTE *)(a3 + 196);
    v204 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v250 = *(_QWORD *)(v204 + 468);
    DWORD2(v250) = *(_DWORD *)(v204 + 476);
    BYTE1(v250) = v203;
    WebCore::Page::setPagination();
    v205 = *(double *)(a3 + 200);
    v206 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v250 = *(_QWORD *)(v206 + 468);
    v207 = *(_DWORD *)(v206 + 476);
    DWORD1(v250) = v205;
    DWORD2(v250) = v207;
    WebCore::Page::setPagination();
    v208 = *(double *)(a3 + 208);
    *(_QWORD *)&v250 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 468);
    DWORD2(v250) = v208;
    WebCore::Page::setPagination();
    WebKit::WebPage::effectiveAppearanceDidChange((WebCore::Page **)a1, *(unsigned __int8 *)(a3 + 370));
    if (*(_BYTE *)(a3 + 104))
      WebKit::WebPage::setEditable((WebKit::WebPage *)a1, 1);
    WebCore::Page::setActivityState();
    if ((*(_WORD *)(a1 + 1832) & 4) == 0)
      WebCore::Page::setIsPrerender(*(WebCore::Page **)(a1 + 48));
    WebKit::WebPage::updateIsInWindow((WebKit::WebPage *)a1, 1);
    WebKit::WebPage::setMinimumSizeForAutoLayout((unsigned int *)a1, (const WebCore::IntSize *)(a3 + 300));
    WebKit::WebPage::setSizeToContentAutoSizeMaximumSize((unsigned int *)a1, (IntSize *)(a3 + 308));
    WebKit::WebPage::setAutoSizingShouldExpandToViewHeight((unsigned int *)a1, *(unsigned __int8 *)(a3 + 316));
    WebKit::WebPage::setViewportSizeForCSSViewportUnits((unsigned int *)a1, *(_QWORD *)(a3 + 320), *(_DWORD *)(a3 + 328));
    WebKit::WebPage::setScrollPinningBehavior(a1, *(_BYTE *)(a3 + 332));
    if (*(_BYTE *)(a3 + 340))
      v209 = *(unsigned __int8 *)(a3 + 336) | 0x100;
    else
      v209 = 0;
    *(_WORD *)(a1 + 1829) = v209;
    WebKit::WebPage::setTopContentInset((WebKit::WebPage *)a1, *(float *)(a3 + 288));
    WTF::String::operator=((WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)(a3 + 216));
    if (*(_DWORD *)(a3 + 244))
      WebKit::WebPage::restoreSessionInternal((uint64_t *)a1, a3 + 232, *(_BYTE *)(a3 + 224), 0);
    WebCore::Page::setMediaVolume(*(WebCore::Page **)(a1 + 48), *(float *)(a3 + 292));
    v210 = *(unsigned __int8 *)(a3 + 296);
    v211 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v211 = off_1E34FA340;
    *(_QWORD *)&v250 = v211;
    WebKit::WebPage::setMuted(a1, v210, (uint64_t *)&v250);
    if ((_QWORD)v250)
      (*(void (**)(_QWORD))(*(_QWORD *)v250 + 8))(v250);
    WebCore::Page::addLayoutMilestones();
    {
      v212 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v245 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v212 = WebKit::WebProcess::WebProcess(v245);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v212;
    }
    v213 = *(_QWORD *)(a1 + 40);
    v214 = (uint64_t *)((char *)v212 + 48);
    v285 = 178;
    v286 = v213;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)v212 + 6, (unsigned __int8 *)&v285, v7, (unsigned int **)&v250);
    v215 = *(_QWORD *)(a1 + 40);
    v285 = 170;
    v286 = v215;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v214, (unsigned __int8 *)&v285, v7, (unsigned int **)&v250);
    v216 = *(_QWORD *)(a1 + 40);
    v285 = 172;
    v286 = v216;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v214, (unsigned __int8 *)&v285, v7, (unsigned int **)&v250);
    v217 = *(_QWORD *)(a1 + 40);
    v285 = 130;
    v286 = v217;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v214, (unsigned __int8 *)&v285, v7, (unsigned int **)&v250);
    v218 = *(_QWORD *)(a1 + 40);
    v285 = 165;
    v286 = v218;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v214, (unsigned __int8 *)&v285, v7, (unsigned int **)&v250);
    v220 = *(unsigned int *)(a3 + 364);
    if ((_DWORD)v220)
    {
      v221 = *(WTF::ASCIICaseInsensitiveHash ***)(a3 + 352);
      v222 = 8 * v220;
      do
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 1792), v221++, (uint64_t)&v250);
        v222 -= 8;
      }
      while (v222);
    }
    v223 = *(float *)(a3 + 264);
    if (v223 != 1.0)
      WebKit::WebPage::scaleView((unsigned __int8 *)a1, v223, v219);
    WebCore::Page::addLayoutMilestones();
    WebKit::WebPage::setSmartInsertDeleteEnabled((WebKit::WebPage *)a1, *(unsigned __int8 *)(a3 + 528));
    *(_BYTE *)(a1 + 2109) = *(_BYTE *)(a3 + 912);
    v8 = (unsigned int *)&_MergedGlobals_106;
    if (!*(_BYTE *)(a3 + 913))
      WebCore::Page::disableICECandidateFiltering(*(WebCore::Page **)(a1 + 48));
    if (*(_BYTE *)(a3 + 914))
      WebCore::LibWebRTCProvider::enableEnumeratingAllNetworkInterfaces(*(WebCore::LibWebRTCProvider **)(*(_QWORD *)(a1 + 48) + 296));
    {
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey(v47, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, v224))WebCore::LibWebRTCProvider::enableEnumeratingVisibleNetworkInterfaces(*(WebCore::LibWebRTCProvider **)(*(_QWORD *)(a1 + 48) + 296));
    v225 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a3 + 616));
    v227 = v225;
    v228 = (uint64_t *)v226;
    v229 = *(_QWORD *)(a3 + 616);
    if (v229)
      v230 = (uint64_t *)(v229 + 16 * *(unsigned int *)(v229 - 4));
    else
      v230 = 0;
    if (v230 != v225)
    {
      do
      {
        WebKit::WebPage::registerURLSchemeHandler((_QWORD *)a1, v227[1], (WebCore::LegacySchemeRegistry *)v227);
        while (1)
        {
          v227 += 2;
          if (v227 == v228)
            break;
          if ((unint64_t)(*v227 + 1) > 1)
            goto LABEL_277;
        }
        v227 = v228;
LABEL_277:
        ;
      }
      while (v227 != v230);
    }
    v231 = *(unsigned int *)(a3 + 636);
    if ((_DWORD)v231)
    {
      v232 = *(WebCore::LegacySchemeRegistry **)(a3 + 624);
      v233 = 8 * v231;
      do
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(v232, v226);
        v232 = (WebCore::LegacySchemeRegistry *)((char *)v232 + 8);
        v233 -= 8;
      }
      while (v233);
    }
    WebKit::WebUserContentController::addContentWorlds(*(WebKit **)(a1 + 624), a3 + 928);
    WebKit::WebUserContentController::addUserScripts(*(WebKit **)(a1 + 624), (_DWORD *)(a3 + 944), 0);
    WebKit::WebUserContentController::addUserStyleSheets(*(WebCore::UserContentProvider **)(a1 + 624), (unsigned int *)(a3 + 960));
    WebKit::WebUserContentController::addUserScriptMessageHandlers(*(WebKit **)(a1 + 624), a3 + 976);
    WebKit::WebUserContentController::addContentRuleLists(*(_QWORD *)(a1 + 624), a3 + 992);
    WebKit::WebPage::setViewportConfigurationViewLayoutSize((WebKit::WebPage *)a1, (const WebCore::FloatSize *)(a3 + 376), *(double *)(a3 + 384), *(double *)(a3 + 392));
    v7 = 1;
    WebCore::PlatformMediaSessionManager::setShouldDeactivateAudioSession((WebCore::PlatformMediaSessionManager *)1);
    WebCore::PlatformMediaSessionManager::setShouldEnableVP8Decoder((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(a3 + 1178));
    WebCore::PlatformMediaSessionManager::setShouldEnableVP9Decoder((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(a3 + 1179));
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1682) = *(_BYTE *)(a3 + 1182);
    {
      v234 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v246 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v234 = WebKit::WebProcess::WebProcess(v246);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v234;
    }
    WebKit::WebProcess::auditTokenForSelf(v234, (uint64_t)&v250);
    {
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey(v47, (WTF::StringImpl **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, v235);
    if ((BoolValueForKey & 1) == 0)
      goto LABEL_288;
    if (v252)
      break;
LABEL_297:
    __break(1u);
LABEL_298:
    atomic_store(1u, (unsigned int *)BoolValueForKey);
    WTF::fastFree((WTF *)BoolValueForKey, v50);
  }
  sandbox_enable_state_flag();
LABEL_288:
  WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 1480), v50);
  WebKit::WebPage::updateThrottleState((WebKit::WebPage *)a1);
  WebKit::WebPage::updateImageAnimationEnabled((WebKit::WebPage *)a1);
  WebKit::WebPage::updatePrefersNonBlinkingCursor((_DWORD *)a1);
  WebKit::WebPage::setLinkDecorationFilteringData(a1, (_DWORD *)(a3 + 1448), v236);
  WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(a1, (unsigned int *)(a3 + 1464), v237);
  MEMORY[0x19AEAFAB4](buf);
  return a1;
}

uint64_t WebKit::WebPage::layerVolatilityTimerFired(WebKit::WebPage *this)
{
  double v1;

  v1 = *((double *)this + 220) + *((double *)this + 220);
  *((double *)this + 220) = v1;
  return WebKit::WebPage::markLayersVolatileOrRetry((uint64_t)this, 2 * (v1 > 2.0));
}

uint64_t WebKit::WebPage::textAutoSizingAdjustmentTimerFired(WebCore::Page **this)
{
  return WebCore::Page::recomputeTextAutoSizingInAllFrames(this[6]);
}

uint64_t WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(uint64_t a1, CFTypeRef **a2, char a3)
{
  CFTypeRef *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  CFTypeRef *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  WebKit::WebFrame::makeInvalidator(*a2, (uint64_t)&v18);
  if ((a3 & 1) != 0)
  {
    v12 = *a2;
    *a2 = 0;
    v13 = v18;
    v18 = 0;
    v14 = v19;
    v19 = 0;
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v9 = &off_1E34FA2F0;
    *(_QWORD *)(v9 + 8) = v12;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(v9 + 16) = v13;
    v17 = 0;
    *(_BYTE *)(v9 + 24) = v14;
    WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1}::~Ref(&v15);
    v10 = 1;
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = v18;
    v18 = 0;
    v8 = v19;
    v19 = 0;
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v9 = &off_1E34FA2C8;
    *(_QWORD *)(v9 + 8) = v6;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(v9 + 16) = v7;
    v17 = 0;
    *(_BYTE *)(v9 + 24) = v8;
    WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1}::~Ref(&v15);
    v10 = 0;
  }
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v10;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::frameFromIdentifier(WebKit::WebProcess *a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_2;
  v4 = WebKit::WebProcess::singleton(a1);
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebProcess::webFrame((uint64_t)v4, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (!v5)
    {
LABEL_2:
      *(_QWORD *)a1 = 0;
      return;
    }
    v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    *(_QWORD *)a1 = v7;
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    __break(1u);
  }
}

void WebKit::WebPage::constructFrameTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  WebKit::WebFrame::createRemoteSubframe(a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (WTF::AtomStringImpl **)(a3 + 16), &v9);
  v5 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a3 + 24);
    v7 = 40 * v5;
    do
    {
      WebKit::WebPage::constructFrameTree(a1, v9, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  v8 = v9;
  v9 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
}

IPC::Encoder *WebKit::WebPage::effectiveAppearanceDidChange(WebCore::Page **this, int a2)
{
  IPC::Encoder *result;
  char v5;

  WebCore::Page::effectiveAppearanceDidChange(this[6]);
  result = this[59];
  if (result)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 1;
    return WebKit::WebInspectorUI::effectiveAppearanceDidChange((uint64_t)result, v5);
  }
  return result;
}

uint64_t WebKit::WebPage::setEditable(WebKit::WebPage *this, int a2)
{
  WebCore::Page *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  WebCore::Editor *v9;
  WebCore::FrameSelection *v10;
  WebCore::FocusController *v11;

  v3 = (WebCore::Page *)*((_QWORD *)this + 6);
  *((_BYTE *)v3 + 656) = a2;
  *((_BYTE *)v3 + 338) = a2 ^ 1;
  WebCore::Page::checkedFocusController(v3);
  result = WebCore::FocusController::focusedOrMainFrame(v11);
  v5 = result;
  if (result)
  {
    v6 = (unsigned int *)(result + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v11;
  }
  if (result)
    v8 = a2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::applyEditingStyleToBodyElement(v9);
    v10 = *(WebCore::FrameSelection **)(*(_QWORD *)(v5 + 296) + 3064);
    if (!*((_BYTE *)v10 + 153))
      WebCore::FrameSelection::setSelectionFromNone(v10);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  if (result)
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  return result;
}

uint64_t *WebKit::WebPage::restoreSessionInternal(uint64_t *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  __int128 *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v15;
  _QWORD *v16;
  char v17;

  v8 = a1[303];
  *(_BYTE *)(v8 + 12) = 1;
  ++*(_DWORD *)(v8 + 8);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34F1B40;
  v9[1] = v8;
  v9[2] = v8;
  v16 = v9;
  v17 = 1;
  v10 = *(_DWORD *)(a2 + 12);
  if (v10)
  {
    v11 = *(__int128 **)a2;
    v12 = 312 * v10;
    do
    {
      WebKit::toHistoryItem(a1[303], v11, (uint64_t *)&v15);
      v13 = v15;
      *((_BYTE *)v15 + 146) = a3;
      WebKit::WebBackForwardListProxy::addItemFromUIProcess(*(_QWORD *)(*(_QWORD *)(a1[6] + 136) + 16), v11, &v15, a1[5], a4);
      WTF::RefCounted<WebCore::HistoryItem>::deref(v13);
      v11 = (__int128 *)((char *)v11 + 312);
      v12 -= 312;
    }
    while (v12);
  }
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit((uint64_t *)&v16);
}

unsigned __int8 *WebKit::WebPage::scaleView(unsigned __int8 *this, double a2, WebCore::LocalFrame *a3)
{
  WebCore::Page **v4;
  WebCore::Page *v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  double v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;

  if (*(float *)(*((_QWORD *)this + 6) + 368) != a2)
  {
    v4 = (WebCore::Page **)this;
    WebKit::WebPage::totalScaleFactor((WebKit::WebPage *)this, a3);
    v5 = v4[6];
    v7 = v6 / *((float *)v5 + 92);
    v14 = 0;
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 20) + 56))(*((_QWORD *)v5 + 20));
    if (v8)
    {
      v9 = (_DWORD *)v8;
      ++*(_DWORD *)(v8 + 8);
      v10 = a2 / *((float *)v4[6] + 92);
      v11 = WebCore::ScrollableArea::visibleContentRect();
      v12 = v10;
      LODWORD(v14) = llroundf(v12 * (float)(int)v11);
      HIDWORD(v14) = llroundf(v12 * (float)SHIDWORD(v11));
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v13 = a2;
    WebCore::Page::setViewScaleFactor(v4[6], v13);
    return WebKit::WebPage::scalePage((WebKit::WebPage *)v4, v7, (const WebCore::IntPoint *)&v14);
  }
  return this;
}

WebKit::WebURLSchemeHandlerProxy *WebKit::WebPage::registerURLSchemeHandler(_QWORD *a1, uint64_t a2, WebCore::LegacySchemeRegistry *a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::String *v10;
  uint64_t *v11;
  const WTF::StringImpl *v12;
  WebKit::WebURLSchemeHandlerProxy *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  WTF **v18;
  int i;
  unsigned int v20;
  WTF **v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  int v25;
  WebKit::WebURLSchemeHandlerProxy *result;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  WTF *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  WTF *v59;
  uint8_t buf[4];
  _QWORD *v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a1[5];
    WTF::String::utf8();
    v9 = v59 ? (uint64_t)v59 + 16 : 0;
    *(_DWORD *)buf = 134218754;
    v61 = a1;
    v62 = 2048;
    v63 = v8;
    v64 = 2048;
    v65 = a2;
    v66 = 2080;
    v67 = v9;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::registerURLSchemeHandler: Registered handler %llu for the '%s' scheme", buf, 0x2Au);
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
        WTF::fastFree(v59, v7);
      else
        --*(_DWORD *)v59;
    }
  }
  WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(a3, (const WTF::String *)v7);
  WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(a3, v10);
  v11 = a1 + 260;
  v13 = (WebKit::WebURLSchemeHandlerProxy *)WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v13 = 1;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = a1;
  *((_QWORD *)v13 + 3) = a2;
  *((_QWORD *)v13 + 4) = 0;
  v14 = a1[260];
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1 + 260, 0), (v14 = *v11) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v58 = a1 + 260;
  if (v16 >= 0x100)
    v17 = v16 >> 8;
  else
    v17 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  v18 = 0;
  for (i = 1; ; ++i)
  {
    v20 = v17 & v15;
    v21 = (WTF **)(v14 + 16 * (v17 & v15));
    v22 = *v21;
    if (*v21 == (WTF *)-1)
    {
      v18 = (WTF **)(v14 + 16 * v20);
      goto LABEL_21;
    }
    if (!v22)
      break;
    if (WTF::equal(v22, *(const WTF::StringImpl **)a3, v12))
    {
      result = WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v13, v23);
      goto LABEL_35;
    }
LABEL_21:
    v17 = i + v20;
  }
  if (v18)
  {
    *v18 = 0;
    v18[1] = 0;
    --*(_DWORD *)(*v58 - 16);
    v21 = v18;
  }
  WTF::String::operator=(v21, a3);
  result = v21[1];
  v21[1] = v13;
  if (result)
    result = WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(result, v27);
  v24 = *v58;
  if (*v58)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v28 = *v58;
  if (*v58)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_34:
      result = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v58, v21);
      v21 = (WTF **)result;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_34;
  }
LABEL_35:
  v32 = a1 + 261;
  v33 = v21[1];
  v34 = a1[261];
  if (v34
    || (result = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 261),
        (v34 = *v32) != 0))
  {
    v35 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    v35 = 0;
  }
  v36 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
  v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
  v39 = v35 & ((v38 >> 31) ^ v38);
  v40 = (_QWORD *)(v34 + 16 * v39);
  v41 = *v40;
  if (!*v40)
  {
LABEL_46:
    *v40 = a2;
    if (!*((_QWORD *)v33 + 1))
    {
      v44 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = v33;
      v45 = (unsigned int *)*((_QWORD *)v33 + 1);
      *((_QWORD *)v33 + 1) = v44;
      if (v45)
      {
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v27);
        }
      }
    }
    v48 = (unsigned int *)*((_QWORD *)v33 + 1);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    result = (WebKit::WebURLSchemeHandlerProxy *)v40[1];
    v40[1] = v48;
    if (result)
    {
      do
      {
        v52 = __ldaxr((unsigned int *)result);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, (unsigned int *)result));
      if (!v53)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WebKit::WebURLSchemeHandlerProxy *)WTF::fastFree(result, v27);
      }
    }
    v50 = *v32;
    if (*v32)
      v51 = *(_DWORD *)(v50 - 12) + 1;
    else
      v51 = 1;
    *(_DWORD *)(v50 - 12) = v51;
    v54 = *v32;
    if (*v32)
      v55 = *(_DWORD *)(v54 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v54 - 16) + v55);
    v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56)
        return result;
    }
    else if (3 * v57 > 4 * v56)
    {
      return result;
    }
    return (WebKit::WebURLSchemeHandlerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v32);
  }
  v42 = 0;
  v43 = 1;
  while (v41 != a2)
  {
    if (v41 == -1)
      v42 = v40;
    v39 = (v39 + v43) & v35;
    v40 = (_QWORD *)(v34 + 16 * v39);
    v41 = *v40;
    ++v43;
    if (!*v40)
    {
      if (v42)
      {
        *v42 = 0;
        v42[1] = 0;
        --*(_DWORD *)(*v32 - 16);
        v40 = v42;
      }
      goto LABEL_46;
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::updatePrefersNonBlinkingCursor(_DWORD *this)
{
  WebCore::Page *v1;
  _QWORD *v2;
  WebKit::WebProcess *v3;
  _QWORD *v4;

  v1 = (WebCore::Page *)*((_QWORD *)this + 6);
  if (v1)
  {
    ++*(_DWORD *)v1;
    {
      v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v3);
    }
    WebCore::Page::setPrefersNonBlinkingCursor(v1);
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E34FA7B0;
    v4 = v2;
    WebCore::Page::forEachDocument();
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    return WTF::RefCounted<WebCore::Page>::deref(v1);
  }
  return this;
}

void WebKit::WebPage::createRemoteSubframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::AtomStringImpl **a6)
{
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = a2;
    v16 = a3;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v14);
    a2 = v15;
    a3 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = WebKit::WebProcess::webFrame((uint64_t)v10, a2, a3);
  if (v11)
  {
    v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebFrame::createRemoteSubframe(a1, v12, a4, a5, a6, &v17);
    v13 = v17;
    v17 = 0;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

void WebKit::WebPage::getFrameInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const void *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebKit::WebProcess *v17;
  char v18;
  _BYTE v19[8];
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  _BYTE v25[304];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = a2;
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v17);
    a2 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = WebKit::WebProcess::webFrame((uint64_t)v6, a2, a3);
  if (v7)
  {
    v8 = (CFTypeRef *)v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WebKit::WebFrame::info((WebKit::WebFrame *)v8, (uint64_t)v19);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>((uint64_t)v25, (uint64_t)v19);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v10);
    v12 = v24;
    v24 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))off_1E34FA148[v23])(&v18, &v22);
    v23 = -1;
    v13 = v21;
    v21 = 0;
    if (v13)
      CFRelease(v13);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v20);
    CFRelease(v8[1]);
  }
  else
  {
    v25[0] = 0;
    v25[296] = 0;
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 16))(v14, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v15);
  }
}

void WebKit::WebPage::getFrameTree(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::frameTreeData(*(WebKit::WebFrame **)(a1 + 88), (uint64_t)v9);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v4);
  v6 = v14;
  v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v13 != -1)
    ((void (*)(char *, uint64_t *))off_1E34FA148[v13])(&v8, &v12);
  v13 = -1;
  v7 = v11;
  v11 = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v10);
}

void WebKit::WebPage::didFinishLoadInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = a2;
    v10 = a3;
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v8);
    a2 = v9;
    a3 = v10;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::webFrame((uint64_t)v3, a2, a3);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v6 = *(_QWORD *)(v5 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebPage::frameWasRemovedInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = a2;
    v8 = a3;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::webFrame((uint64_t)v3, a2, a3);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WebKit::WebFrame::removeFromTree((unsigned int *)v5);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

uint64_t WebKit::WebPage::requestMediaPlaybackState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if ((WebCore::Page::mediaPlaybackExists(*(WebCore::Page **)(a1 + 48)) & 1) != 0)
  {
    if (WebCore::Page::mediaPlaybackIsPaused(*(WebCore::Page **)(a1 + 48)))
    {
      v4 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
    }
    else
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 1095);
      v4 = *a2;
      *a2 = 0;
      if (v5)
        v6 = 2;
      else
        v6 = 3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6);
    }
  }
  else
  {
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::WebPage::pauseAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::Page::pauseAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebPage::suspendAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::Page::suspendAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebPage::resumeAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::Page::resumeAllMediaPlayback(*(WebCore::Page **)(a1 + 48));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebPage::resumeAllMediaBuffering(WebCore::Page **this)
{
  return WebCore::Page::resumeAllMediaBuffering(this[6]);
}

uint64_t WebKit::WebPage::reinitializeWebPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebKit::DrawingArea *v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v14;

  WebKit::WebPage::setSize(a1, (const WebCore::IntSize *)a2);
  v4 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(v4 + 32) != *(_QWORD *)(a2 + 72))
  {
    *(_QWORD *)(a1 + 72) = 0;
    WebKit::DrawingArea::removeMessageReceiverIfNeeded((unsigned __int8 *)v4);
    WebKit::DrawingArea::create((WebKit::WebPage *)a1, a2, (uint64_t *)&v14);
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 112) + 680) |= 0x80uLL;
    WebKit::addRootFramesToNewDrawingArea(*(_QWORD *)(a1 + 88), *(WebKit::WebFrame **)(a1 + 72), v5);
    v7 = *(_BYTE **)(a1 + 72);
    v8 = *(unsigned __int8 *)(a2 + 584);
    if (v7[65] != v8)
    {
      v7[65] = v8;
      (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 264))(v7);
      v7 = *(_BYTE **)(a1 + 72);
    }
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v7 + 104))(v7, a2 + 16);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 376))(*(_QWORD *)(a1 + 72), v4);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 384))(*(_QWORD *)(a1 + 72), v4);
    WebKit::WebPage::unfreezeLayerTree(a1, 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  WebKit::WebPage::setMinimumSizeForAutoLayout((unsigned int *)a1, (const WebCore::IntSize *)(a2 + 300));
  WebKit::WebPage::setSizeToContentAutoSizeMaximumSize((unsigned int *)a1, (IntSize *)(a2 + 308));
  v9 = *(unsigned __int16 *)(a2 + 8);
  if (*(unsigned __int16 *)(a1 + 1832) != v9)
  {
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34FA368;
    v14 = v10;
    WebKit::WebPage::setActivityState((WebKit::WebPage *)a1, v9, 0, (uint64_t)&v14);
    v11 = (uint64_t)v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *(unsigned __int8 *)(a2 + 345);
  if (*(unsigned __int8 *)(a1 + 64) != v12)
  {
    *(_BYTE *)(a1 + 64) = v12;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 328))(*(_QWORD *)(a1 + 72));
  }
  WebKit::WebPage::effectiveAppearanceDidChange((WebCore::Page **)a1, *(unsigned __int8 *)(a2 + 370));
  return WebKit::WebPage::platformReinitialize((WebCore::Page **)a1);
}

uint64_t WebKit::addRootFramesToNewDrawingArea(uint64_t this, WebKit::WebFrame *a2, WebKit::DrawingArea *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  WebKit::DrawingArea *v14;
  WebKit *v15;
  uint64_t v16;
  WebKit *v17;

  v4 = (_QWORD *)this;
  v5 = *(_QWORD *)(this + 24);
  if (v5
    && (this = *(_QWORD *)(v5 + 8)) != 0
    && (this = (*(uint64_t (**)(uint64_t, WebKit::WebFrame *, WebKit::DrawingArea *))(*(_QWORD *)this + 16))(this, a2, a3), (this & 1) != 0)|| (v6 = v4[5]) != 0 && *(_QWORD *)(*(_QWORD *)(v6 + 632) + 8) == v6)
  {
    this = (*(uint64_t (**)(WebKit::WebFrame *, _QWORD, _QWORD))(*(_QWORD *)a2 + 248))(a2, v4[10], v4[11]);
  }
  v7 = v4[3];
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 88);
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        while (1)
        {
          WebKit::WebFrame::fromCoreFrame(v9, &v17);
          v15 = v17;
          if (v17)
          {
            WebKit::addRootFramesToNewDrawingArea(v17, a2, v14);
            CFRelease(*((CFTypeRef *)v15 + 1));
          }
          v16 = *(_QWORD *)(v9 + 72);
          if (!v16)
            break;
          v12 = (unsigned int *)(v16 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
          v9 = v16;
        }
        return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
      }
    }
  }
  return this;
}

void WebKit::WebPage::~WebPage(WebKit::WebPage *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const char ****v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t i;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  WebKit::PlaybackSessionManager *v19;
  WebKit::VideoPresentationManager *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int **v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD **v35;
  _DWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int *v45;
  WTF *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  unsigned int **v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WebKit::WebURLSchemeHandlerProxy *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  const char ***v117;
  void *v118;
  const char ***v119;
  const char ***v120;
  const char ***v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WebKit::GeolocationPermissionRequestManager *v125;
  WTF *v126;
  void *v127;
  WebKit::WebScreenOrientationManager *v128;
  WTF *v129;
  void *v130;
  uint64_t v131;
  _DWORD *v132;
  WebKit::NotificationPermissionRequestManager *v133;
  WebKit::WebOpenPanelResultListener *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  _DWORD *v144;
  _DWORD *v145;
  void *v146;
  _DWORD *v147;
  _DWORD *v148;
  WebKit::WebPageInspectorTargetController *v149;
  WTF *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  WebKit::FindController *v159;
  WTF *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF **v169;
  WTF *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  const void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF **v178;
  WTF *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD **v183;
  _DWORD *v184;
  WTF::StringImpl *v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  void *v194;
  WebKit::WebProcess *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE buf[22];
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E34F9DC8;
  *((_QWORD *)this + 2) = &unk_1E34F9E10;
  *((_QWORD *)this + 4) = &unk_1E34F9E48;
  v2 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::destructor:", buf, 0x16u);
  }
  if (*((_DWORD *)this + 595))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 592, 0);
    WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(this);
  }
  v4 = (void *)*((_QWORD *)this + 33);
  *(_QWORD *)buf = 0;
  objc_msgSend(v4, "setWebPage:", buf);
  v5 = (const char ****)((char *)this + 688);
  WebKit::WebPage::SandboxExtensionTracker::invalidate((const char ****)this + 86);
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 20, buf);
  v6 = 0;
  v7 = 0;
  v8 = *((_QWORD *)this + 20);
  if (v8)
  {
    v7 = *(unsigned int *)(v8 - 4);
    v6 = v8 + 8 * v7;
  }
  v196 = (char *)this + 160;
  v197 = v6;
  v198 = v6;
  v199 = v6;
  v200 = v8 + 8 * v7;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v196);
  for (i = *(_QWORD *)&buf[8]; *(_QWORD *)&buf[8] != v197; i = *(_QWORD *)&buf[8])
  {
    v11 = *(_QWORD *)(*(_QWORD *)i + 8);
    v12 = *(unsigned int **)(v11 + 80);
    *(_QWORD *)(v11 + 80) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v9);
      }
    }
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  WebKit::WebStorageNamespaceProvider::decrementUseCount(*((uint64_t **)this + 265));
  {
    v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v195 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v16 = WebKit::WebProcess::WebProcess(v195);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v16;
  }
  v17 = *((_QWORD *)v16 + 42);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 24);
    v196 = (char *)*((_QWORD *)this + 265);
    v201 = *((_QWORD *)this + 5);
    *(_QWORD *)buf = &v196;
    *(_QWORD *)&buf[8] = &v201;
    IPC::Connection::send<Messages::GPUConnectionToWebProcess::DestroyVisibilityPropagationContextForPage>(v18, (uint64_t **)buf, 0, 0, 0);
  }
  v19 = (WebKit::PlaybackSessionManager *)*((_QWORD *)this + 62);
  if (v19)
    WebKit::PlaybackSessionManager::invalidate(v19);
  v20 = (WebKit::VideoPresentationManager *)*((_QWORD *)this + 63);
  if (v20)
    WebKit::VideoPresentationManager::invalidate(v20);
  *(_QWORD *)buf = *((_QWORD *)this + 221);
  *(_QWORD *)&buf[8] = *((_QWORD *)this + 222);
  v196 = 0;
  *((_QWORD *)this + 221) = 0;
  v197 = 0;
  *((_QWORD *)this + 222) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v196, v15);
  if (*(_DWORD *)&buf[12])
  {
    v22 = *(uint64_t **)buf;
    v23 = 8 * *(unsigned int *)&buf[12];
    do
    {
      v24 = *v22;
      *v22++ = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v23 -= 8;
    }
    while (v23);
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v21);
  *(_QWORD *)buf = 0;
  WebKit::WebPage::setMediaEnvironment((WTF::StringImpl **)this, (const WTF::String *)buf);
  v26 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (unsigned int *)*((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v27 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  v31 = (void *)*((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v31)
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)this + 2480, (uint64_t)v31);
  v32 = (unsigned int **)*((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v32)
  {
    v33 = v32[5];
    if (v33)
    {
      v34 = *(v33 - 1);
      if ((_DWORD)v34)
      {
        v35 = (_DWORD **)(v33 + 4);
        do
        {
          if ((unint64_t)*(v35 - 2) ^ 1 | (unint64_t)*(v35 - 1))
          {
            v36 = *v35;
            *v35 = 0;
            if (v36)
            {
              if (v36[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
              else
                --v36[2];
            }
          }
          v35 += 4;
          --v34;
        }
        while (v34);
      }
      WTF::fastFree((WTF *)(v33 - 4), v31);
    }
    v37 = v32[4];
    if (v37)
    {
      v38 = *(v37 - 1);
      if ((_DWORD)v38)
      {
        v39 = (uint64_t)(v37 + 4);
        do
        {
          if (*(_QWORD *)(v39 - 16) ^ 1 | *(_QWORD *)(v39 - 8))
            v39 = std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100](v39);
          v39 += 80;
          --v38;
        }
        while (v38);
      }
      WTF::fastFree((WTF *)(v37 - 4), v31);
    }
    v40 = v32[3];
    if (v40)
    {
      v41 = *(v40 - 1);
      if ((_DWORD)v41)
      {
        v42 = (uint64_t)(v40 + 4);
        do
        {
          if (*(_QWORD *)(v42 - 16) ^ 1 | *(_QWORD *)(v42 - 8))
            v42 = std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v42, (WTF::StringImpl *)v31);
          v42 += 48;
          --v41;
        }
        while (v41);
      }
      WTF::fastFree((WTF *)(v40 - 4), v31);
    }
    v43 = v32[2];
    if (v43)
    {
      v44 = *(v43 - 1);
      if ((_DWORD)v44)
      {
        v45 = v43 + 4;
        do
        {
          if (*((_QWORD *)v45 - 2) ^ 1 | *((_QWORD *)v45 - 1))
          {
            v46 = *(WTF **)v45;
            if (*(_QWORD *)v45)
            {
              *(_QWORD *)v45 = 0;
              v45[2] = 0;
              WTF::fastFree(v46, v31);
            }
          }
          v45 += 8;
          --v44;
        }
        while (v44);
      }
      WTF::fastFree((WTF *)(v43 - 4), v31);
    }
    v47 = v32[1];
    if (v47)
      WTF::fastFree((WTF *)(v47 - 4), v31);
    v48 = *v32;
    *v32 = 0;
    if (v48)
    {
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v31);
      }
    }
    WTF::fastFree((WTF *)v32, v31);
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = (unsigned int **)*((_QWORD *)this + 306);
  if (v52)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v52, v31);
  v53 = *((_QWORD *)this + 305);
  if (v53)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v53, (WTF::StringImpl *)v31);
  v54 = *((_QWORD *)this + 304);
  if (v54)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v54, v31);
  v55 = (_DWORD *)*((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v55)
  {
    if (v55[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
    else
      --v55[2];
  }
  v56 = *((_DWORD *)this + 603);
  if (v56)
    WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(*((_QWORD *)this + 300), (unsigned int **)(*((_QWORD *)this + 300) + 24 * v56));
  v57 = (WTF *)*((_QWORD *)this + 300);
  if (v57)
  {
    *((_QWORD *)this + 300) = 0;
    *((_DWORD *)this + 602) = 0;
    WTF::fastFree(v57, v31);
  }
  v58 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v59)
    WebCore::CachedPage::operator delete();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2368, v31);
  if (*((_BYTE *)this + 2360))
    WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2344, v60);
  v61 = (unsigned int *)*((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v61)
  {
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v61 + 4), v60);
      WTF::fastFree((WTF *)v61, v194);
    }
  }
  *((_QWORD *)this + 283) = off_1E34E0DF8;
  v64 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 2264));
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v65);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v65);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = (WTF::StringImpl **)*((_QWORD *)this + 278);
  if (v68)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v68, v65);
  v69 = *((_QWORD *)this + 277);
  if (v69)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v69, v65);
  *((_QWORD *)this + 270) = off_1E34B3740;
  v70 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 2160));
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 269, 0);
  v72 = (unsigned int *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v72)
  {
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
    {
      atomic_store(1u, v72);
      WTF::fastFree((WTF *)v72, v71);
    }
  }
  v75 = *((_QWORD *)this + 262);
  if (v75)
  {
    v76 = *(unsigned int *)(v75 - 4);
    if ((_DWORD)v76)
    {
      v77 = (uint64_t *)(v75 + 8);
      do
      {
        if (*(v77 - 1) != -1)
        {
          v78 = *v77;
          *v77 = 0;
          if (v78)
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        }
        v77 += 2;
        --v76;
      }
      while (v76);
    }
    WTF::fastFree((WTF *)(v75 - 16), v71);
  }
  v79 = *((_QWORD *)this + 261);
  if (v79)
  {
    v80 = *(unsigned int *)(v79 - 4);
    if ((_DWORD)v80)
    {
      for (j = 0; j != v80; ++j)
      {
        if (*(_QWORD *)(v79 + 16 * j) != -1)
        {
          v82 = v79 + 16 * j;
          v83 = *(unsigned int **)(v82 + 8);
          *(_QWORD *)(v82 + 8) = 0;
          if (v83)
          {
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              atomic_store(1u, v83);
              WTF::fastFree((WTF *)v83, v71);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v79 - 16), v71);
  }
  v86 = *((_QWORD *)this + 260);
  if (v86)
  {
    v87 = *(unsigned int *)(v86 - 4);
    if ((_DWORD)v87)
    {
      v88 = (WTF::StringImpl **)*((_QWORD *)this + 260);
      do
      {
        v89 = *v88;
        if (*v88 != (WTF::StringImpl *)-1)
        {
          v90 = v88[1];
          v88[1] = 0;
          if (v90)
          {
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v90, v71);
            v89 = *v88;
          }
          *v88 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v71);
            else
              *(_DWORD *)v89 -= 2;
          }
        }
        v88 += 2;
        --v87;
      }
      while (v87);
    }
    WTF::fastFree((WTF *)(v86 - 16), v71);
  }
  v91 = (WTF::StringImpl *)*((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v71);
    else
      *(_DWORD *)v91 -= 2;
  }
  if (*((_BYTE *)this + 2016))
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebPage *)((char *)this + 1904), (WTF::StringImpl *)v71);
  *((_QWORD *)this + 232) = off_1E34ABE00;
  v92 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 1856));
  v94 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = *((_QWORD *)this + 227);
  if (v95)
    WTF::fastFree((WTF *)(v95 - 16), v93);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1800, v93);
  v97 = (WTF::StringImpl **)*((_QWORD *)this + 224);
  if (v97)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v97, v96);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1768, v96);
  *((_QWORD *)this + 213) = off_1E34B3740;
  v98 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 1704));
  std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100]((uint64_t *)this + 211, 0);
  v99 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  *((_QWORD *)this + 198) = off_1E34E0DF8;
  v100 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  WebCore::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 1584));
  v102 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v102)
  {
    if (*(_DWORD *)(v102 + 24) == 2)
    {
      if ((*(_WORD *)(v102 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v102);
    }
    else
    {
      *(_DWORD *)(v102 + 24) -= 2;
    }
  }
  v103 = *((_QWORD *)this + 187);
  if (v103)
    WTF::fastFree((WTF *)(v103 - 16), v101);
  WebCore::VisibleSelection::~VisibleSelection((WebKit::WebPage *)((char *)this + 1384));
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1344);
  v105 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v105)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v105, v104);
  v106 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v106)
  {
    if (*(_DWORD *)(v106 + 24) == 2)
    {
      if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v106);
    }
    else
    {
      *(_DWORD *)(v106 + 24) -= 2;
    }
  }
  v107 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v107)
  {
    if (*(_DWORD *)(v107 + 24) == 2)
    {
      if ((*(_WORD *)(v107 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v107);
    }
    else
    {
      *(_DWORD *)(v107 + 24) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1200);
  v109 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v109)
  {
    if (*(_DWORD *)(v109 + 24) == 2)
    {
      if ((*(_WORD *)(v109 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v109);
    }
    else
    {
      *(_DWORD *)(v109 + 24) -= 2;
    }
  }
  v110 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v110)
  {
    if (*(_DWORD *)(v110 + 24) == 2)
    {
      if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v110);
    }
    else
    {
      *(_DWORD *)(v110 + 24) -= 2;
    }
  }
  v111 = *((_QWORD *)this + 109);
  if (v111)
    WTF::fastFree((WTF *)(v111 - 16), v108);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 808);
  v113 = (uint64_t *)*((_QWORD *)this + 100);
  if (v113)
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v113, v112);
  *((_QWORD *)this + 94) = off_1E34ABE00;
  v114 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 752));
  v116 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 720, v115);
  v117 = (const char ***)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v117)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v117);
  WebKit::WebPage::SandboxExtensionTracker::invalidate((const char ****)this + 86);
  v119 = (const char ***)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v119)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v119);
  v120 = (const char ***)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v120)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v120);
  v121 = *v5;
  *v5 = 0;
  if (v121)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v121);
  v122 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122);
  v123 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 16))(v123);
  v124 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 16))(v124);
  v125 = (WebKit::GeolocationPermissionRequestManager *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v125)
  {
    WebKit::GeolocationPermissionRequestManager::~GeolocationPermissionRequestManager(v125, v118);
    WTF::fastFree(v126, v127);
  }
  v128 = (WebKit::WebScreenOrientationManager *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v128)
  {
    WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(v128);
    WTF::fastFree(v129, v130);
  }
  v131 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v131)
    WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v131 + 16));
  v132 = (_DWORD *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v132)
  {
    if (v132[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v132 + 8))(v132);
    else
      --v132[2];
  }
  v133 = (WebKit::NotificationPermissionRequestManager *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v133)
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v133, v118);
  v134 = (WebKit::WebOpenPanelResultListener *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v134)
    WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(v134, v118);
  v135 = (unsigned int *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v135)
  {
    do
    {
      v136 = __ldaxr(v135);
      v137 = v136 - 1;
    }
    while (__stlxr(v137, v135));
    if (!v137)
    {
      atomic_store(1u, v135);
      WTF::fastFree((WTF *)v135, v118);
    }
  }
  v138 = (unsigned int *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v138)
  {
    do
    {
      v139 = __ldaxr(v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, v138));
    if (!v140)
    {
      atomic_store(1u, v138);
      WTF::fastFree((WTF *)v138, v118);
    }
  }
  v141 = (unsigned int *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v141)
  {
    do
    {
      v142 = __ldaxr(v141);
      v143 = v142 - 1;
    }
    while (__stlxr(v143, v141));
    if (!v143)
    {
      atomic_store(1u, v141);
      WTF::fastFree((WTF *)v141, v118);
    }
  }
  v144 = (_DWORD *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v144)
  {
    if (v144[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v144 + 8))(v144);
    else
      --v144[2];
  }
  v145 = (_DWORD *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v145)
  {
    if (v145[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v145 + 8))(v145);
    else
      --v145[4];
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 520);
  v147 = (_DWORD *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v147)
  {
    if (v147[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v147 + 8))(v147);
    else
      --v147[4];
  }
  v148 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v148)
  {
    if (v148[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v148 + 8))(v148);
    else
      --v148[4];
  }
  v149 = (WebKit::WebPageInspectorTargetController *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v149)
  {
    WebKit::WebPageInspectorTargetController::~WebPageInspectorTargetController(v149, v146);
    WTF::fastFree(v150, v151);
  }
  v152 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v152)
    WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref((_DWORD *)(v152 + 16), (WTF::StringImpl *)v146);
  v153 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v153)
    WTF::RefCounted<WebKit::WebInspectorUI>::deref((_DWORD *)(v153 + 16), (WTF::StringImpl *)v146);
  v154 = (unsigned int *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v154)
  {
    v155 = v154 + 4;
    do
    {
      v156 = __ldaxr(v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, v155));
    if (!v157)
    {
      atomic_store(1u, v154 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v154 + 8))(v154);
    }
  }
  v158 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  v159 = (WebKit::FindController *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v159)
  {
    WebKit::FindController::~FindController(v159, v146);
    WTF::fastFree(v160, v161);
  }
  v162 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  v165 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = *((_QWORD *)this + 42);
  if (v167)
  {
    v168 = *(unsigned int *)(v167 - 4);
    if ((_DWORD)v168)
    {
      v169 = (WTF **)(v167 + 8);
      do
      {
        if (*(v169 - 1) != (WTF *)-1)
        {
          v170 = *v169;
          *v169 = 0;
          if (v170)
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v170, v146);
        }
        v169 += 2;
        --v168;
      }
      while (v168);
    }
    WTF::fastFree((WTF *)(v167 - 16), v146);
  }
  *((_QWORD *)this + 37) = off_1E34ABE00;
  v171 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPage *)((char *)this + 296));
  v173 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v174)
    CFRelease(v174);
  v175 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *((_QWORD *)this + 20);
  if (v176)
  {
    v177 = *(unsigned int *)(v176 - 4);
    if ((_DWORD)v177)
    {
      v178 = (WTF **)*((_QWORD *)this + 20);
      do
      {
        v179 = *v178;
        if (*v178 != (WTF *)-1)
        {
          *v178 = 0;
          if (v179)
          {
            if (*(_DWORD *)v179 == 1)
              WTF::fastFree(v179, v172);
            else
              --*(_DWORD *)v179;
          }
        }
        ++v178;
        --v177;
      }
      while (v177);
    }
    WTF::fastFree((WTF *)(v176 - 16), v172);
  }
  v180 = *((_QWORD *)this + 19);
  if ((v180 & 0x8000000000000) != 0)
  {
    v191 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFLL);
    do
    {
      v192 = __ldaxr(v191);
      v193 = v192 - 1;
    }
    while (__stlxr(v193, v191));
    if (!v193)
    {
      atomic_store(1u, v191);
      WTF::fastFree((WTF *)v191, v172);
    }
  }
  v181 = *((_QWORD *)this + 15);
  if (v181)
  {
    v182 = *(unsigned int *)(v181 - 4);
    if ((_DWORD)v182)
    {
      v183 = (_DWORD **)(v181 + 8);
      do
      {
        if (*(v183 - 1) != (_DWORD *)-1)
        {
          v184 = *v183;
          *v183 = 0;
          if (v184)
          {
            if (v184[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v184 + 8))(v184);
            else
              --v184[2];
          }
        }
        v183 += 2;
        --v182;
      }
      while (v182);
    }
    WTF::fastFree((WTF *)(v181 - 16), v172);
  }
  v185 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, (WTF::StringImpl *)v172);
    else
      *(_DWORD *)v185 -= 2;
  }
  v186 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v186)
  {
    if (v186[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v186 + 8))(v186);
    else
      --v186[2];
  }
  v187 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v187)
    CFRelease(*(CFTypeRef *)(v187 + 8));
  v188 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v190)
    WTF::RefCounted<WebCore::Page>::deref(v190);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v172);
}

{
  WebKit::WebPage::~WebPage(this);
  JUMPOUT(0x19AEB936CLL);
}

const char ***WebKit::WebPage::SandboxExtensionTracker::invalidate(const char ****this)
{
  const char ***v2;
  const char ***v3;
  uint64_t v4;
  const char ***result;
  uint64_t v6;

  v2 = *this;
  *this = 0;
  if (v2)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v2);
  v3 = this[1];
  if (v3)
  {
    v4 = (uint64_t)v3[2] - 1;
    v3[2] = (const char **)v4;
    if (v4)
    {
      this[1] = 0;
    }
    else
    {
      v3[1][1] = 0;
      sandbox_extension_release();
      v3 = this[1];
      this[1] = 0;
      if (!v3)
        goto LABEL_7;
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v3);
  }
LABEL_7:
  result = this[2];
  if (result)
  {
    v6 = (uint64_t)result[2] - 1;
    result[2] = (const char **)v6;
    if (v6)
    {
      this[2] = 0;
      return WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
    }
    result[1][1] = 0;
    sandbox_extension_release();
    result = this[2];
    this[2] = 0;
    if (result)
      return WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebPage::~WebPage(WebKit::WebPage *this)
{
  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 16));
}

{
  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 32));
}

{
  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 16));
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebPage::~WebPage((WebKit::WebPage *)((char *)this - 32));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebPage::messageSenderConnection(WebKit::WebPage *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((_QWORD *)v1 + 4);
}

uint64_t WebKit::WebPage::messageSenderDestinationID(WebKit::WebPage *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebKit::WebPage::listenForLayoutMilestones(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return WebCore::Page::addLayoutMilestones();
  return result;
}

uint64_t WebKit::WebPage::setInjectedBundleUIClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34FA098;
  }
  result = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebKit::WebPage::editorState@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int16 *v5;
  __int128 *v6;
  _BYTE *v7;
  WebKit::EditorState::PostLayoutData *v10;
  uint64_t v11;
  unsigned int *result;
  WebCore::LocalFrame *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned __int8 *v18;
  WebCore::Document *v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)();
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::LocalFrameView *v29;
  char canCut;
  char canCopy;
  char canEdit;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  void *v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  void *v41;
  _DWORD *v42;
  __int128 v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char isInsideOverlay;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  __int16 *v58;
  _BYTE v59[36];
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  _QWORD v64[2];
  _BYTE v65[24];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[25];
  uint64_t v70[10];
  char v71;
  __int16 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  __int128 v77;
  __int128 v78;
  _BYTE v79[24];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  _QWORD v84[10];
  char v85;
  __int16 v86;
  char v87;
  char v88;
  uint64_t v89;

  LOBYTE(v7) = a2;
  v89 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a3 + 8) = 256;
  *(_BYTE *)(a3 + 32) = 0;
  v10 = (WebKit::EditorState::PostLayoutData *)(a3 + 32);
  *(_BYTE *)(a3 + 336) = 0;
  *(_BYTE *)(a3 + 352) = 0;
  *(_BYTE *)(a3 + 464) = 0;
  *(_QWORD *)(a3 + 10) = 0;
  *(_BYTE *)(a3 + 18) = 0;
  v11 = *(_QWORD *)(a1 + 2032) + 1;
  *(_QWORD *)(a1 + 2032) = v11;
  *(_QWORD *)a3 = v11;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame((WebCore::FocusController *)v74);
  v14 = (uint64_t)result;
  if (result)
  {
    v15 = result + 2;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = (_DWORD *)v74;
  *(_QWORD *)&v74 = 0;
  if (v17)
  {
    if (!*v17)
    {
      __break(0xC471u);
      goto LABEL_71;
    }
    --*v17;
  }
  if (result)
  {
    v57 = (uint64_t *)(a3 + 352);
    v18 = (unsigned __int8 *)WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)result, v13);
    if (v18
      && (WebKit::PluginView::selectionString(v18, &v74), v46 = (WTF::StringImpl *)v74, *(_QWORD *)&v74 = 0, v46))
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
      *(_WORD *)(a3 + 9) = 256;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      v19 = *(WebCore::Document **)(v14 + 296);
      v20 = *((_QWORD *)v19 + 383);
      v4 = (__int128 *)(v20 + 56);
      v3 = WebCore::Document::editor(v19);
      v21 = *(unsigned __int8 *)(v20 + 153);
      *(_BYTE *)(a3 + 9) = *(_BYTE *)(v20 + 153) == 0;
      *(_BYTE *)(a3 + 10) = v21 == 2;
      *(_BYTE *)(a3 + 13) = WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(v20 + 56));
      *(_BYTE *)(a3 + 14) = WebCore::VisibleSelection::isContentRichlyEditable((WebCore::VisibleSelection *)(v20 + 56));
      *(_BYTE *)(a3 + 15) = WebCore::VisibleSelection::isInPasswordField((WebCore::VisibleSelection *)(v20 + 56));
      v6 = (__int128 *)WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
      if (*(_QWORD *)(v3 + 32))
        v22 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
      else
        v22 = 0;
      *(_BYTE *)(a3 + 17) = v22 != 0;
      if (*(_BYTE *)(v3 + 88))
      {
        v24 = 1;
      }
      else if (WebCore::Editor::client((WebCore::Editor *)v3))
      {
        v23 = WebCore::Editor::client((WebCore::Editor *)v3);
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23) ^ 1;
      }
      else
      {
        v24 = 0;
      }
      *(_BYTE *)(a3 + 8) = v24;
      v25 = *(_BYTE *)(a1 + 940) == 2 || *(_BYTE *)(a1 + 2027) != 0;
      *(_BYTE *)(a3 + 18) = v25;
      v5 = *(__int16 **)(v14 + 296);
      *((_DWORD *)v5 + 6) += 2;
      v58 = v5;
      if (*(_BYTE *)(a3 + 10))
      {
        WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(v20 + 56));
        if (!LOBYTE(v76[0]))
          goto LABEL_72;
        isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay();
        goto LABEL_68;
      }
      while (1)
      {
        *(_DWORD *)(a1 + 2028) = *(unsigned __int8 *)(a3 + 13);
        if ((v7 & 1) != 0
          || (*(_QWORD *)(WebCore::Document::editor(*(WebCore::Document **)(v14 + 296)) + 32) ? (v26 = v6) : (v26 = 0),
              *(unsigned __int8 *)(a1 + 1492) | (v26 != 0)))
        {
          WebCore::Document::updateLayout();
        }
        v27 = *((_QWORD *)v5 + 66);
        if (!v27)
          break;
        v28 = *(_QWORD *)(v27 + 8);
        if (!v28)
          break;
        v29 = *(WebCore::LocalFrameView **)(v28 + 288);
        if (!v29 || (WebCore::LocalFrameView::needsLayout(v29) & 1) != 0)
          break;
        v4 = &v74;
        if (!*(_BYTE *)(a3 + 336))
        {
          v59[0] = 0;
          *(_QWORD *)&v59[8] = 0;
          v59[16] = 0;
          *(_QWORD *)&v59[24] = 0x11040000000000FFLL;
          v7 = v65;
          v65[16] = 0;
          v69[24] = 0;
          LOBYTE(v70[0]) = 0;
          v71 = 0;
          v5 = &v72;
          v72 = 0;
          v73 = 0;
          *(_DWORD *)&v59[32] = 0;
          v61 = 0;
          v60 = 0uLL;
          v62 = 0;
          v63 = 0;
          memset(v64, 0, 13);
          *(_QWORD *)&v65[5] = 0;
          *(_QWORD *)v65 = 0;
          LOBYTE(v75) = 0;
          v6 = &v74;
          v74 = *(unint64_t *)v59;
          WebCore::Color::Color();
          LODWORD(v76[0]) = *(_DWORD *)&v59[32];
          v43 = v60;
          v60 = 0uLL;
          *(_OWORD *)((char *)v76 + 8) = v43;
          *((_QWORD *)&v76[1] + 1) = v61;
          LODWORD(v77) = v62;
          *((_QWORD *)&v77 + 1) = v63;
          *(_QWORD *)&v43 = v64[0];
          v63 = 0;
          v64[0] = 0;
          BYTE12(v78) = BYTE4(v64[1]);
          DWORD2(v78) = v64[1];
          *(_QWORD *)&v78 = v43;
          WebCore::Color::Color();
          v81 = v67;
          v82 = v68;
          v83[0] = *(_OWORD *)v69;
          *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)&v69[9];
          *(_OWORD *)&v79[8] = *(_OWORD *)&v65[8];
          v80 = v66;
          LOBYTE(v84[0]) = 0;
          v85 = 0;
          if (v71)
          {
            std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>(v84, v70);
            v85 = 1;
          }
          v86 = v72;
          v87 = v73;
          v88 = 1;
          std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>(v10, (unsigned __int8 *)&v74);
          if (v88)
            WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v74, v44);
          WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v59, v44);
        }
        canCut = WebCore::Editor::canCut((WebCore::Editor *)v3);
        if (*(_BYTE *)(a3 + 336))
        {
          *(_BYTE *)(a3 + 328) = canCut;
          canCopy = WebCore::Editor::canCopy((WebCore::Editor *)v3);
          if (*(_BYTE *)(a3 + 336))
          {
            *(_BYTE *)(a3 + 329) = canCopy;
            canEdit = WebCore::Editor::canEdit((WebCore::Editor *)v3);
            if (*(_BYTE *)(a3 + 336))
            {
              *(_BYTE *)(a3 + 330) = canEdit;
              if (!*(_BYTE *)(a3 + 464))
              {
                memset(v59, 0, sizeof(v59));
                v74 = 0u;
                v75 = 0u;
                memset(v76, 0, sizeof(v76));
                v77 = 0u;
                v78 = *(_OWORD *)&v59[4];
                *(_OWORD *)v79 = *(_OWORD *)&v59[20];
                v79[16] = 1;
                std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>((uint64_t)v57, &v74);
                std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74, v33);
              }
              if (!*(_BYTE *)(a1 + 2109))
                break;
              WebCore::Editor::fontAttributesAtSelectionStart((WebCore::Editor *)v3);
              if (*(_BYTE *)(a3 + 336))
              {
                v34 = (_QWORD *)(a3 + 240);
                if (*(_BYTE *)(a3 + 320))
                {
                  v35 = v74;
                  *(_QWORD *)&v74 = 0;
                  v36 = (_DWORD *)*v34;
                  *v34 = v35;
                  if (v36)
                    WTF::RefCounted<WebCore::Font>::deref(v36);
                  WebCore::Color::operator=();
                  WebCore::Color::operator=();
                  WebCore::Color::operator=();
                  *(_OWORD *)(a3 + 272) = v76[0];
                  *(_WORD *)(a3 + 288) = v76[1];
                  v38 = *(_DWORD *)(a3 + 308);
                  if (v38)
                    WTF::VectorDestructor<true,WebCore::TextList>::destruct(*(WTF::StringImpl **)(a3 + 296), (WTF::StringImpl *)(*(_QWORD *)(a3 + 296) + 24 * v38));
                  v39 = *(WTF **)(a3 + 296);
                  if (v39)
                  {
                    *(_QWORD *)(a3 + 296) = 0;
                    *(_DWORD *)(a3 + 304) = 0;
                    WTF::fastFree(v39, v37);
                  }
                  *(_QWORD *)(a3 + 296) = *((_QWORD *)&v76[1] + 1);
                  v40 = v77;
                  *((_QWORD *)&v76[1] + 1) = 0;
                  *(_QWORD *)&v77 = 0;
                  *(_QWORD *)(a3 + 304) = v40;
                  *(_WORD *)(a3 + 312) = WORD4(v77);
                  *(_BYTE *)(a3 + 314) = BYTE10(v77);
                }
                else
                {
                  std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>(v34, (uint64_t *)&v74);
                  *(_BYTE *)(a3 + 320) = 1;
                }
                WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76[1] + 8, v37);
                if ((*((_QWORD *)&v75 + 1) & 0x8000000000000) != 0)
                {
                  v48 = (unsigned int *)(*((_QWORD *)&v75 + 1) & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v49 = __ldaxr(v48);
                    v50 = v49 - 1;
                  }
                  while (__stlxr(v50, v48));
                  if (!v50)
                  {
                    atomic_store(1u, v48);
                    WTF::fastFree((WTF *)v48, v41);
                  }
                }
                if ((v75 & 0x8000000000000) != 0)
                {
                  v51 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v52 = __ldaxr(v51);
                    v53 = v52 - 1;
                  }
                  while (__stlxr(v53, v51));
                  if (!v53)
                  {
                    atomic_store(1u, v51);
                    WTF::fastFree((WTF *)v51, v41);
                  }
                }
                if ((*((_QWORD *)&v74 + 1) & 0x8000000000000) != 0)
                {
                  v54 = (unsigned int *)(*((_QWORD *)&v74 + 1) & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v55 = __ldaxr(v54);
                    v56 = v55 - 1;
                  }
                  while (__stlxr(v56, v54));
                  if (!v56)
                  {
                    atomic_store(1u, v54);
                    WTF::fastFree((WTF *)v54, v41);
                  }
                }
                v42 = (_DWORD *)v74;
                *(_QWORD *)&v74 = 0;
                if (v42)
                  WTF::RefCounted<WebCore::Font>::deref(v42);
                break;
              }
            }
          }
        }
LABEL_71:
        __break(1u);
LABEL_72:
        isInsideOverlay = 0;
LABEL_68:
        *(_BYTE *)(a3 + 11) = isInsideOverlay;
        *(_BYTE *)(a3 + 12) = WebCore::VisibleSelection::isInAutoFilledAndViewableField((WebCore::VisibleSelection *)v4);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74);
      }
      WebKit::WebPage::getPlatformEditorState((WebKit::WebPage *)a1, v14, a3);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v58);
    }
    if (*(_BYTE *)(a3 + 464))
      WebKit::EditorState::clipOwnedRectExtentsToNumericLimits(void)::$_1::operator()<WebKit::EditorState::VisualData>(v57);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::focusedPluginViewForFrame(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 37);
  if (!v2 || (*(_WORD *)(v2 + 3358) & 8) == 0)
    return 0;
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  if (*(_QWORD *)(v2 + 1248) == *(_QWORD *)(v2 + 3528))
  {
    result = WebKit::WebPage::pluginViewForFrame((uint64_t)this, a2);
    v4 = *(_DWORD *)(v2 + 24) - 2;
  }
  else
  {
    result = 0;
  }
  if (v4)
  {
    *(_DWORD *)(v2 + 24) = v4;
  }
  else
  {
    v5 = result;
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    return v5;
  }
  return result;
}

void WebCore::FontAttributes::~FontAttributes(WebCore::FontAttributes *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v3);
    }
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v3);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v3);
    }
  }
  v7 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v7)
    WTF::RefCounted<WebCore::Font>::deref(v7);
}

uint64_t WebKit::WebPage::changeFontAttributes(uint64_t a1, WebCore::FontAttributeChanges *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064)
                                                                                                + 56)))
    {
      WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
      WebCore::FontAttributeChanges::createEditingStyle(a2);
      WebCore::FontAttributeChanges::editAction(a2);
      WebCore::Editor::applyStyleToSelection();
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::changeFont(uint64_t a1, WebCore::FontChanges *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064)
                                                                                                + 56)))
    {
      WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
      WebCore::FontChanges::createEditingStyle(a2);
      WebCore::Editor::applyStyleToSelection();
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::executeEditCommandWithCallback(WebCore::Page **a1, const WTF::String *a2, const WTF::String *a3, uint64_t *a4)
{
  uint64_t v5;

  WebKit::WebPage::executeEditingCommand(a1, a2, a3);
  v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::WebPage::selectAll(WebCore::Page **this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = 0;
  WebKit::WebPage::executeEditingCommand(this, (const WTF::String *)&v7, (const WTF::String *)&v6);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = v7;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WebKit::WebPage::platformDidSelectAll(this);
}

unsigned int *WebKit::WebPage::executeEditingCommand(WebCore::Page **this, const WTF::String *a2, const WTF::String *a3)
{
  unsigned int *result;
  WebCore::LocalFrame *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  WebKit::PluginView *v11;
  WebCore::Editor *v12;
  WebCore::FocusController *v13;
  WebCore::Node *v14;
  uint64_t v15;

  WebKit::WebPage::platformWillPerformEditingCommand(this);
  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v13);
  v8 = result;
  if (result)
  {
    v9 = result + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  if (v13)
  {
    if (!*(_DWORD *)v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1977A6A4CLL);
    }
    --*(_DWORD *)v13;
  }
  if (result)
  {
    v11 = (WebKit::PluginView *)WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)result, v7);
    if (v11)
    {
      WebKit::PluginView::handleEditingCommand(v11, a2, a3);
    }
    else
    {
      v12 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v8 + 37));
      WebCore::Editor::command(v12, a2);
      WebCore::Editor::Command::execute();
      if (v15)
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection(WebKit::WebPage *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::Quirks *v6;
  uint64_t shouldDispatchSyntheticMouseEventsWhenModifyingSelection;

  v1 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(v1 + 296);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    v6 = *(WebCore::Quirks **)(v5 + 688);
    if (!v6)
      v6 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v5);
    shouldDispatchSyntheticMouseEventsWhenModifyingSelection = WebCore::Quirks::shouldDispatchSyntheticMouseEventsWhenModifyingSelection(v6);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    shouldDispatchSyntheticMouseEventsWhenModifyingSelection = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  return shouldDispatchSyntheticMouseEventsWhenModifyingSelection;
}

_BYTE *WebKit::WebPage::scheduleFullEditorStateUpdate(_BYTE *this)
{
  char v1;

  this[941] = 1;
  if (this[940])
  {
    if (this[2027])
      this[940] = 2;
  }
  else
  {
    if (this[2027])
      v1 = 2;
    else
      v1 = 1;
    this[940] = v1;
    return (_BYTE *)WebCore::Page::scheduleRenderingUpdate();
  }
  return this;
}

uint64_t WebKit::WebPage::renderTreeExternalRepresentation(WebKit::WebPage *this)
{
  return WebCore::externalRepresentation();
}

uint64_t WebKit::WebPage::renderTreeExternalRepresentationForPrinting(WebKit::WebPage *this)
{
  return WebCore::externalRepresentation();
}

uint64_t WebKit::WebPage::trackedRepaintRects@<X0>(WebKit::WebPage *this@<X0>, WebKit **a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];

  result = WebKit::WebPage::localMainFrameView(this);
  if (!result)
    return API::Array::create(a2);
  v4 = result;
  v5 = *(unsigned int *)(result + 1068);
  if (!(_DWORD)v5)
  {
    LODWORD(v8) = 0;
    v6 = 0;
LABEL_10:
    v16 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v16 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v16);
    *(_QWORD *)v16 = &off_1E34CC2F8;
    v18[0] = 0;
    v18[1] = 0;
    *(_QWORD *)(v16 + 16) = v6;
    *(_DWORD *)(v16 + 24) = v5;
    *(_DWORD *)(v16 + 28) = v8;
    *a2 = (WebKit *)v16;
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v17);
  }
  if (!(v5 >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * v5));
    if (*(_DWORD *)(v4 + 1068))
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = v8;
        v10 = (float *)(*(_QWORD *)(v4 + 1056) + v7);
        v11 = *v10;
        v12 = v10[1];
        v13 = v10[2];
        v14 = v10[3];
        v15 = (double *)API::Object::newObject(0x30uLL, 38);
        *(_QWORD *)v15 = off_1E34CC2A8;
        WebKit::InitializeWebKit2((WebKit *)v15);
        *(_QWORD *)v15 = &off_1E34AD230;
        v15[2] = v11;
        v15[3] = v12;
        v15[4] = v13;
        v15[5] = v14;
        ++v8;
        *(_QWORD *)(v6 + 8 * v9) = v15;
        v7 += 16;
      }
      while (v8 < *(unsigned int *)(v4 + 1068));
    }
    else
    {
      LODWORD(v8) = 0;
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPage::increaseListLevel(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::Editor *v5;
  WebCore::Node *v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v5 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::increaseSelectionListLevel(v5);
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::decreaseListLevel(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::Editor *v5;
  WebCore::FocusController *v6;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v6);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    v5 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::decreaseSelectionListLevel(v5);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::changeListType(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::Editor *v5;
  WebCore::FocusController *v6;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v6);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    v5 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::changeSelectionListType(v5);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setBaseWritingDirection(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::FocusController *v5;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v5);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::setBaseWritingDirection();
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

_BYTE *WebKit::WebPage::close(_BYTE *this)
{
  _BYTE *v1;
  NSObject *v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  void *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WebKit::WebFullScreenManager *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WebKit::WebOpenPanelResultListener *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  WebKit::WebRemoteObjectRegistry *v63;
  WebKit::WebProcess *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  WTF::RunLoop *v68;
  WebKit::WebProcess *v69;
  WebKit::WebProcess *v70;
  WebKit::WebProcess *v71;
  WebKit::WebProcess *v72;
  WebKit::WebProcess *v73;
  _BYTE v74[22];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (this[186])
    return this;
  v1 = this;
  WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)this);
  v2 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)v1 + 5);
    *(_DWORD *)v74 = 134218240;
    *(_QWORD *)&v74[4] = v1;
    *(_WORD *)&v74[12] = 2048;
    *(_QWORD *)&v74[14] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::close:", v74, 0x16u);
  }
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v69 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v69);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v4) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 215;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  *(_QWORD *)v74 = v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, (uint64_t *)v1 + 5);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)v74, 0, 0);
  v8 = *(IPC::Encoder **)v74;
  *(_QWORD *)v74 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  v1[186] = 1;
  WebKit::WebFrame::url(*((WebKit::WebFrame **)v1 + 11), (uint64_t)v74);
  v12 = *(WTF::StringImpl **)v74;
  if (*(_QWORD *)v74)
  {
    v13 = *(_DWORD *)(*(_QWORD *)v74 + 4);
    *(_QWORD *)v74 = 0;
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v11);
      if (!v13)
        goto LABEL_12;
      goto LABEL_11;
    }
    *(_DWORD *)v12 -= 2;
    if (v13)
    {
LABEL_11:
      *(_QWORD *)v74 = 0;
      *(_QWORD *)&v74[8] = 0;
      (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**((_QWORD **)v1 + 45) + 256))(*((_QWORD *)v1 + 45), v1, v74);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v74, v14);
    }
  }
LABEL_12:
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v70 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v70);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  v16 = *((_QWORD *)v15 + 16);
  if (v16)
  {
    CFRetain(*((CFTypeRef *)v1 + 1));
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(v16 + 40) + 24))(*(_QWORD *)(v16 + 40), v16, v1);
    CFRelease(*((CFTypeRef *)v1 + 1));
  }
  v17 = (unsigned int *)*((_QWORD *)v1 + 58);
  if (v17)
  {
    WebKit::WebInspector::close(v17);
    v18 = (unsigned int *)*((_QWORD *)v1 + 58);
    *((_QWORD *)v1 + 58) = 0;
    if (v18)
    {
      v19 = v18 + 4;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v18 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
  }
  WebCore::InspectorController::disconnectAllFrontends(*(WebCore::InspectorController **)(*((_QWORD *)v1 + 6) + 80));
  v23 = (WebKit::WebFullScreenManager *)*((_QWORD *)v1 + 70);
  *((_QWORD *)v1 + 70) = 0;
  if (v23)
  {
    WebKit::WebFullScreenManager::invalidate(v23, v22);
    if (*((_DWORD *)v23 + 4) == 1)
      (*(void (**)(WebKit::WebFullScreenManager *))(*(_QWORD *)v23 + 8))(v23);
    else
      --*((_DWORD *)v23 + 4);
  }
  v24 = *((_QWORD *)v1 + 72);
  if (v24)
  {
    v25 = *(unsigned int **)(v24 + 24);
    *(_QWORD *)(v24 + 24) = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v22);
      }
    }
    v28 = (_DWORD *)*((_QWORD *)v1 + 72);
    *((_QWORD *)v1 + 72) = 0;
    if (v28)
    {
      if (v28[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[2];
    }
  }
  v29 = *((_QWORD *)v1 + 76);
  if (v29)
  {
    v30 = *(unsigned int **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v22);
      }
    }
    v33 = (WebKit::WebOpenPanelResultListener *)*((_QWORD *)v1 + 76);
    *((_QWORD *)v1 + 76) = 0;
    if (v33)
      WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(v33, v22);
  }
  v34 = *((_QWORD *)v1 + 73);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
    {
      v36 = *(unsigned int **)(v35 + 24);
      *(_QWORD *)(v35 + 24) = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v22);
        }
      }
      v39 = (unsigned int *)*((_QWORD *)v1 + 73);
      *((_QWORD *)v1 + 73) = 0;
      if (v39)
      {
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v39);
          WTF::fastFree((WTF *)v39, v22);
        }
      }
    }
  }
  WebKit::WebPage::SandboxExtensionTracker::invalidate((const char ****)v1 + 86);
  if ((*((_QWORD *)v1 + 274) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 2160));
  v42 = *((_QWORD *)v1 + 202);
  *((_QWORD *)v1 + 202) = v42 & 0xFDFFFFFFFFFFFFLL;
  if ((v42 & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 1584));
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v43 = off_1E34EA238;
  v44 = *((_QWORD *)v1 + 43);
  *((_QWORD *)v1 + 43) = v43;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v45 = off_1E34F9E98;
  v46 = *((_QWORD *)v1 + 44);
  *((_QWORD *)v1 + 44) = v45;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v47 = off_1E34F9F10;
  v48 = *((_QWORD *)v1 + 45);
  *((_QWORD *)v1 + 45) = v47;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v49 = off_1E34FA038;
  v50 = *((_QWORD *)v1 + 46);
  *((_QWORD *)v1 + 46) = v49;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v51 = off_1E34FA098;
  v52 = *((_QWORD *)v1 + 47);
  *((_QWORD *)v1 + 47) = v51;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  v53 = *((_QWORD *)v1 + 84);
  *((_QWORD *)v1 + 84) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
  v54 = *(_QWORD *)(*((_QWORD *)v1 + 11) + 24);
  if (v54)
  {
    v55 = *(_QWORD *)(v54 + 8);
    if (v55)
    {
      if (!*(_BYTE *)(v55 + 144))
      {
        v56 = (unsigned int *)(v55 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
        WebCore::FrameLoader::detachFromParent(*(WebCore::FrameLoader **)(v55 + 280));
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v56);
      }
    }
  }
  v58 = *((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)v1 + 10);
  *((_QWORD *)v1 + 10) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = (_DWORD *)*((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = 0;
  if (v60)
    WTF::RefCounted<WebCore::Page>::deref(v60);
  v61 = v1[794];
  v1[794] = 0;
  v62 = *((_QWORD *)v1 + 264);
  if (v62)
  {
    v63 = *(WebKit::WebRemoteObjectRegistry **)(v62 + 8);
    if (v63)
      WebKit::WebRemoteObjectRegistry::close(v63);
  }
  {
    v64 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v71 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v64 = WebKit::WebProcess::WebProcess(v71);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v64;
  }
  v65 = (uint64_t)v64 + 40;
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v64 + 40, 0xB2u, *((_QWORD *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v65, 0xAAu, *((_QWORD *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v65, 0xACu, *((_QWORD *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v65, 0x82u, *((_QWORD *)v1 + 5));
  IPC::MessageReceiverMap::removeMessageReceiver(v65, 0xA5u, *((_QWORD *)v1 + 5));
  v66 = *((_QWORD *)v1 + 34);
  *((_QWORD *)v1 + 34) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  WebKit::WebPage::stopObservingNowPlayingMetadata((WebKit::WebPage *)v1);
  {
    v67 = (uint64_t *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v72 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v67 = (uint64_t *)WebKit::WebProcess::WebProcess(v72);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v67;
  }
  this = (_BYTE *)WebKit::WebProcess::removeWebPage(v67, *((_QWORD *)v1 + 5));
  {
    if (!v61)
      return this;
  }
  else
  {
    v73 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    this = WebKit::WebProcess::WebProcess(v73);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)this;
    if (!v61)
      return this;
  }
  v68 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  return (_BYTE *)WTF::RunLoop::stop(v68);
}

void WebKit::WebPage::stopObservingNowPlayingMetadata(WebKit::WebPage *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v1)
  {
    WebCore::PlatformMediaSessionManager::sharedManager(this);
    WebCore::PlatformMediaSessionManager::removeNowPlayingMetadataObserver();
    v2 = 0;
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)&v2, v1);
  }
}

uint64_t WebKit::WebPage::tryClose(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t shouldClose;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    shouldClose = WebCore::FrameLoader::shouldClose(*(WebCore::FrameLoader **)(v4 + 280));
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, shouldClose);
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

IPC::Encoder *WebKit::WebPage::sendClose(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1846;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebPage::suspendForProcessSwap(CFTypeRef *this)
{
  WebCore::BackForwardCache *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WebCore::Frame *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;
  __int16 v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)this);
  v2 = (WebCore::BackForwardCache *)CFRetain(this[1]);
  v3 = *(_QWORD *)(*((_QWORD *)this[11] + 3) + 8);
  if (*(_BYTE *)(v3 + 144))
    v3 = 0;
  v4 = *(_DWORD **)(*(_QWORD *)(v3 + 184) + 16);
  if (v4)
  {
    ++*v4;
    WebCore::BackForwardCache::singleton(v2);
    if ((WebCore::BackForwardCache::addIfCacheable() & 1) != 0)
    {
      v5 = *((_QWORD *)this[11] + 3);
      if (v5)
      {
        v6 = *(WebCore::Frame **)(v5 + 8);
        if (v6)
        {
          if (!*((_BYTE *)v6 + 144))
            WebCore::Frame::detachFromAllOpenedFrames(v6);
        }
      }
      v7 = (char *)(this + 4);
      v8 = (*((uint64_t (**)(char *))this[4] + 7))((char *)this + 32);
      v9 = WTF::fastMalloc((WTF *)0x240);
      v10 = (IPC::Encoder *)v9;
      v11 = 1920;
    }
    else
    {
      v7 = (char *)(this + 4);
      v8 = (*((uint64_t (**)(char *))this[4] + 7))((char *)this + 32);
      v9 = WTF::fastMalloc((WTF *)0x240);
      v10 = (IPC::Encoder *)v9;
      v11 = 1884;
    }
    *(_WORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v22 = v10;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v22, 0);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
    WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
  }
  else
  {
    v16 = (*((uint64_t (**)(char *))this[4] + 7))((char *)this + 32);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 1884;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v22 = (IPC::Encoder *)v17;
    (*((void (**)(char *, IPC::Encoder **, _QWORD))this[4] + 4))((char *)this + 32, &v22, 0);
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v18);
      WTF::fastFree(v20, v21);
    }
  }
  CFRelease(this[1]);
}

void WebKit::WebPage::loadURLInFrame(uint64_t a1, const WTF::URL *a2, const WTF::String *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  CFTypeRef v20;
  WebKit::WebProcess *v21;
  WTF::StringImpl *v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[15];
  CFTypeRef cf[2];
  uint64_t v27;
  _BYTE v28[192];
  CFTypeRef v29;
  _BYTE v30[584];

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = WebKit::WebProcess::webFrame((uint64_t)v9, a4, a5);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v28, a2, 0);
    v29 = 0;
    WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)v28, a3);
    v27 = 0;
    *(_OWORD *)cf = 0u;
    memset(v25, 0, sizeof(v25));
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)v22 = 0u;
    WebCore::SubstituteData::SubstituteData((WebCore::SubstituteData *)v22);
    MEMORY[0x19AEAF100](v30, v12, v28, v22);
    WebCore::FrameLoader::load();
    MEMORY[0x19AEAF10C](v30);
    v16 = cf[0];
    cf[0] = 0;
    if (v16)
      CFRelease(v16);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v25, v15);
    v18 = v22[1];
    v22[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = (unsigned int *)v22[0];
    v22[0] = 0;
    if (v19)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v17);
    v20 = v29;
    v29 = 0;
    if (v20)
      CFRelease(v20);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v28);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

void WebKit::WebPage::loadDataInFrame(uint64_t a1, uint64_t a2, uint64_t a3, const WTF::String *a4, const WTF::String *a5, const WTF::URL *a6, uint64_t a7, uint64_t a8)
{
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  uint64_t v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  CFTypeRef v25;
  void *v26;
  unsigned int *v27;
  WebKit::WebProcess *v28;
  uint64_t v29;
  _BYTE v30[192];
  CFTypeRef v31;
  uint64_t v32[73];
  unsigned int *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  CFTypeRef cf;
  _BYTE v37[138];
  char v38;
  CFTypeRef v39;
  char v40;
  _QWORD v41[3];

  v41[1] = a2;
  v41[2] = a3;
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v29 = a7;
    v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v28);
    a7 = v29;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = WebKit::WebProcess::webFrame((uint64_t)v12, a7, a8);
  if (v13)
  {
    v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(v41);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v37, a6, a4, *(_QWORD *)(v41[0] + 48), a5);
    v39 = 0;
    v40 = 0;
    v38 = v38 & 0xF1 | 4;
    v15 = v41[0];
    v41[0] = 0;
    v32[0] = v15;
    WebCore::SubstituteData::SubstituteData((uint64_t)&v33, v32, (uint64_t)a6, (WebCore::ResourceResponseBase *)v37, 1);
    v17 = (unsigned int *)v32[0];
    v32[0] = 0;
    if (v17)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v16);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 144))
      v18 = 0;
    else
      v18 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v30, a6, 0);
    v31 = 0;
    MEMORY[0x19AEAF100](v32, v18, v30, &v33);
    WebCore::FrameLoader::load();
    MEMORY[0x19AEAF10C](v32);
    v19 = v31;
    v31 = 0;
    if (v19)
      CFRelease(v19);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v30);
    v21 = cf;
    cf = 0;
    if (v21)
      CFRelease(v21);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v35, v20);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v33;
    v33 = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v22);
    v25 = v39;
    v39 = 0;
    if (v25)
      CFRelease(v25);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v37, v22);
    v27 = (unsigned int *)v41[0];
    v41[0] = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v26);
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
}

void WebKit::WebPage::createProvisionalFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = a3;
    v10 = a4;
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v8);
    a3 = v9;
    a4 = v10;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::webFrame((uint64_t)v5, a3, a4);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebKit::WebFrame::createProvisionalFrame((unsigned int *)v7, a2);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPage::destroyProvisionalFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = a2;
    v8 = a3;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::webFrame((uint64_t)v3, a2, a3);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WebKit::WebFrame::destroyProvisionalFrame((unsigned int *)v5);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebPage::loadDidCommitInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = a2;
    v8 = a3;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::webFrame((uint64_t)v3, a2, a3);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WebKit::WebFrame::loadDidCommitInAnotherProcess((unsigned int *)v5);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

const char ***WebKit::WebPage::SandboxExtensionTracker::beginLoad(const char ****a1, const char ***a2)
{
  const char ***result;
  const char **v5;
  const char ***v6;

  if (*a2)
  {
    result = (const char ***)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    v5 = *a2;
    *a2 = 0;
    result[1] = v5;
    result[2] = 0;
  }
  else
  {
    result = 0;
  }
  v6 = *a1;
  *a1 = result;
  if (v6)
    return WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  return result;
}

void WebKit::WebPage::loadDataImpl(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, WebCore::ResourceResponseBase *a7, uint64_t a8, const void **a9, __int16 a10, int a11, char a12, char a13)
{
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  void *v30;
  WebKit *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  CFTypeRef v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int *v41;
  WebKit::WebProcess *v42;
  uint64_t v44[68];
  char v45;
  char v46;
  char v47;
  WebKit *v48;
  unsigned int *v49;
  unsigned int *v50;
  WTF::StringImpl *v51;
  _BYTE v52[240];
  CFTypeRef cf;

  v20 = *(_QWORD *)(a1 + 88);
  CFRetain(*(CFTypeRef *)(v20 + 8));
  *(_WORD *)(v20 + 104) = a10;
  *(_BYTE *)(a1 + 2250) = 1;
  *(_QWORD *)(a1 + 1896) = a2;
  std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 1904), a4);
  v21 = *a5;
  *a5 = 0;
  v44[0] = v21;
  WebCore::SubstituteData::SubstituteData((uint64_t)&v50, v44, a8, a7, a12);
  v23 = (unsigned int *)v44[0];
  v44[0] = 0;
  if (v23)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v22);
  v24 = *(_QWORD *)(a1 + 360);
  v25 = v50;
  if (v50)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v49 = v25;
  v27 = WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)v52);
  v28 = WebCore::ResourceResponseBase::textEncodingName((WebCore::ResourceResponseBase *)v52);
  {
    v42 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v42);
  }
  v29 = *a9;
  v44[0] = (uint64_t)&off_1E34E0668;
  WebKit::UserData::transform(v29, (uint64_t)v44, &v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t, WTF::StringImpl **, WebKit *))(*(_QWORD *)v24 + 24))(v24, a1, a6, &v49, v27, v28, &v51, v48);
  v31 = v48;
  v48 = 0;
  if (v31)
    CFRelease(*((CFTypeRef *)v31 + 1));
  v32 = v49;
  v49 = 0;
  if (v32)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v30);
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_QWORD *)(v33 + 24);
  if (v34 && (v35 = *(_QWORD *)(v34 + 8)) != 0 && !*(_BYTE *)(v35 + 144) || (v35 = *(_QWORD *)(v33 + 40)) != 0)
  {
    v36 = (unsigned int *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    MEMORY[0x19AEAF100](v44, v35, a6, &v50);
    v46 = a13;
    v45 = a3;
    v47 = 1;
    WebCore::FrameLoader::load();
    MEMORY[0x19AEAF10C](v44);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v35 + 8));
  }
  v38 = cf;
  cf = 0;
  if (v38)
    CFRelease(v38);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v52, (WTF::StringImpl *)v30);
  v40 = v51;
  v51 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v50;
  v50 = 0;
  if (v41)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v41, v39);
  WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)v44);
  CFRelease(*(CFTypeRef *)(v20 + 8));
}

unsigned int *WebKit::WebPage::loadData(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  const WTF::String *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  char v24;
  unsigned int *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  void *v29;
  CFTypeRef v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int *result;
  WTF::StringImpl *v34[5];
  WTF::StringImpl *v35[24];
  CFTypeRef v36;
  unsigned int *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE buf[12];
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  CFTypeRef cf;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  v5 = os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a2 + 425);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v43 = 2048;
    v44 = v6;
    v45 = 2048;
    v46 = v7;
    v47 = 1024;
    v48 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::loadData: navigationID=%llu, shouldTreatAsContinuingLoad=%u", buf, 0x26u);
  }
  WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v5);
  WebCore::PublicSuffixStore::addPublicSuffix();
  v9 = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 280) = v9;
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v41);
  v38 = 0;
  v10 = (WTF *)WTF::URL::invalidate((WTF::URL *)&v38);
  v11 = *(_QWORD *)(a2 + 280);
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a2 + 280));
    WTF::URL::operator=((uint64_t)&v38, (WTF::StringImpl *)buf);
    v13 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if ((v39 & 3) == 1)
    {
      WTF::URL::protocol((WTF::URL *)&v38);
      if ((v16 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler((WebCore::LegacySchemeRegistry *)buf, v17);
      v19 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  else
  {
    v14 = WTF::aboutBlankURL(v10);
    WTF::String::operator=(&v38, (WTF::StringImpl *)v14);
    v15 = *(_OWORD *)(v14 + 24);
    v39 = *(_OWORD *)(v14 + 8);
    v40 = v15;
  }
  if (*(_BYTE *)(a2 + 544))
  {
    v20 = *(_QWORD *)(a1 + 48);
    if (v20)
      *(_BYTE *)(v20 + 1686) = 1;
  }
  v35[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v35);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WTF::URL *)v35, (const WTF::String *)(a2 + 264), *(_QWORD *)(v41 + 48), (const WTF::String *)(a2 + 272));
  cf = 0;
  v51 = 0;
  v49 = v49 & 0xF1 | 4;
  v22 = v35[0];
  v35[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(_QWORD *)(a2 + 8);
  v24 = *(_BYTE *)(a2 + 425);
  v25 = (unsigned int *)v41;
  v41 = 0;
  v37 = v25;
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v35, (const WTF::URL *)&v38, 0);
  v36 = 0;
  v34[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v34);
  WebKit::WebPage::loadDataImpl(a1, v23, v24, a2 + 304, (uint64_t *)&v37, (uint64_t)v35, (WebCore::ResourceResponseBase *)buf, (uint64_t)v34, (const void **)(a2 + 432), *(_WORD *)(a2 + 520), 0, *(_BYTE *)(a2 + 442), *(_BYTE *)(a2 + 424));
  v27 = v34[0];
  v34[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v36;
  v36 = 0;
  if (v28)
    CFRelease(v28);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v35);
  if (v37)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v37, v29);
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (WTF::StringImpl *)v29);
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  result = (unsigned int *)v41;
  v41 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v31);
  return result;
}

WTF::StringImpl *WebKit::WebPage::loadAlternateHTML(uint64_t a1, uint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  unsigned int *v18;
  CFTypeRef v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef v25;
  void *v26;
  unsigned int *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  CFTypeRef cf;
  unsigned int *v35;
  _BYTE v36[138];
  char v37;
  CFTypeRef v38;
  char v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[5];
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;

  WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)a1);
  v4 = (WTF *)WebCore::PublicSuffixStore::addPublicSuffix();
  v5 = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 280) = v5;
  v6 = *(_QWORD *)(a2 + 280);
  if (v6 && *(_DWORD *)(v6 + 4))
  {
    WTF::URL::URL((uint64_t)&v45, (WTF::StringImpl **)(a2 + 280));
  }
  else
  {
    v7 = WTF::aboutBlankURL(v4);
    v8 = *(WTF::StringImpl **)v7;
    if (*(_QWORD *)v7)
      *(_DWORD *)v8 += 2;
    v45 = v8;
    v9 = *(_OWORD *)(v7 + 24);
    v46 = *(_OWORD *)(v7 + 8);
    v47 = v9;
  }
  v10 = *(_QWORD *)(a2 + 288);
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WTF::URL::URL((uint64_t)v44, (WTF::StringImpl **)(a2 + 288));
  }
  else
  {
    v44[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v44);
  }
  v11 = *(_QWORD *)(a2 + 296);
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    WTF::URL::URL((uint64_t)&v41, (WTF::StringImpl **)(a2 + 296));
  }
  else
  {
    v41 = 0;
    WTF::URL::invalidate((WTF::URL *)&v41);
  }
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v40);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 8);
  if (*(_BYTE *)(v12 + 144))
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 280);
  WTF::String::operator=((WTF::StringImpl **)(v13 + 112), (WTF::StringImpl *)&v41);
  *(_OWORD *)(v13 + 120) = v42;
  *(_OWORD *)(v13 + 136) = v43;
  v31 = 0;
  WTF::URL::invalidate((WTF::URL *)&v31);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v36, (const WTF::URL *)&v31, (const WTF::String *)(a2 + 264), *(_QWORD *)(v40 + 48), (const WTF::String *)(a2 + 272));
  v38 = 0;
  v39 = 0;
  v37 = v37 & 0xF1 | 4;
  v15 = v31;
  v31 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(_BYTE *)(a2 + 425);
  v18 = (unsigned int *)v40;
  v40 = 0;
  v35 = v18;
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v31, (const WTF::URL *)&v45, 0);
  cf = 0;
  WebKit::WebPage::loadDataImpl(a1, v16, v17, a2 + 304, (uint64_t *)&v35, (uint64_t)&v31, (WebCore::ResourceResponseBase *)v36, (uint64_t)v44, (const void **)(a2 + 432), *(_WORD *)(a2 + 520), 0, 1, 0);
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v31);
  if (v35)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v20);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 8);
  if (*(_BYTE *)(v21 + 144))
    v21 = 0;
  v22 = *(_QWORD *)(v21 + 280);
  v31 = 0;
  WTF::URL::invalidate((WTF::URL *)&v31);
  WTF::String::operator=((WTF::StringImpl **)(v22 + 112), (WTF::StringImpl *)&v31);
  *(_OWORD *)(v22 + 120) = v32;
  *(_OWORD *)(v22 + 136) = v33;
  v24 = v31;
  v31 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
    CFRelease(v25);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v36, v23);
  v27 = (unsigned int *)v40;
  v40 = 0;
  if (v27)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v26);
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF::StringImpl *)v44[0];
  v44[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v29 -= 2;
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebKit::WebPage::loadSimulatedRequestAndResponse(uint64_t a1, uint64_t a2, WebCore::ResourceResponseBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  WTF::StringImpl *v12[5];
  unsigned int *v13;
  unsigned int *v14;

  v6 = a2 + 40;
  *(_BYTE *)(a1 + 2251) = (*(_BYTE *)(a2 + 188) & 4) != 0;
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v14);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 425);
  v13 = v14;
  v14 = 0;
  v12[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v12);
  WebKit::WebPage::loadDataImpl(a1, v7, v8, a2 + 304, (uint64_t *)&v13, v6, a3, (uint64_t)v12, (const void **)(a2 + 432), *(_WORD *)(a2 + 520), 0, 0, 0);
  v10 = v12[0];
  v12[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v9);
  result = v14;
  v14 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v9);
  return result;
}

unsigned int *WebKit::WebPage::navigateToPDFLinkWithSimulatedClick(WebCore *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::ThreadGlobalData *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  uint64_t v14;
  char v15;
  char v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a4;
  v20 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 24) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 296);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(WebCore::ThreadGlobalData **)(v8 + 96)) == 0)
    {
      a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
      v9 = a1;
    }
    if (!*((_QWORD *)v9 + 5))
      a1 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v9);
    WTF::MonotonicTime::now(a1);
    WebCore::MouseEvent::create();
    v14 = 0;
    WebCore::Document::completeURL();
    v16 = 1;
    v15 = 0;
    WebCore::FrameLoader::changeLocation();
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v18;
    v18 = 0;
    if (v12)
    {
      if (v12[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[4];
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
}

void WebKit::WebPage::stopLoading(WebKit::WebPage *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  char v5;

  if (*((_QWORD *)this + 6))
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        if (!*(_BYTE *)(v2 + 144))
        {
          v3 = (unsigned int *)(v2 + 8);
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 + 1, v3));
          WebCore::FrameLoader::stopForUserCancel(*(WebCore::FrameLoader **)(v2 + 280));
          WebCore::FrameLoader::completePageTransitionIfNeeded(*(WebCore::FrameLoader **)(v2 + 280));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
          WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)&v5);
        }
      }
    }
  }
}

void WebKit::WebPage::reload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)(a1 + 1896) = a2;
  v6 = *(_QWORD *)(a1 + 88);
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebPage::SandboxExtensionTracker::beginReload((const char ***)(a1 + 688), v7, a4);
  if (*(_QWORD *)(a1 + 48))
  {
    v8 = *(_QWORD *)(v6 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (!*(_BYTE *)(v9 + 144))
          WebCore::FrameLoader::reload();
      }
    }
  }
  if (*(_QWORD *)(a1 + 1896))
    *(_QWORD *)(a1 + 1896) = 0;
  CFRelease(*(CFTypeRef *)(v6 + 8));
  WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)&v10);
}

const char ***WebKit::WebPage::SandboxExtensionTracker::beginReload(const char ***result, uint64_t a2, uint64_t *a3)
{
  const char ****v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3)
  {
    v4 = (const char ****)result;
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    v6 = *a3;
    *a3 = 0;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = 0;
    result = *v4;
    *v4 = (const char ***)v5;
    if (result)
      return WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
  }
  return result;
}

void WebKit::WebPage::goToBackForwardItem(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::PublicSuffixStore *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WebKit::WebProcess *v29;
  uint64_t v30;
  WebKit::WebProcess *v31;
  WebKit::WebProcess *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *a2;
    WTF::makeString<unsigned long long,char,unsigned long long>(a2[2], 45, a2[1], &v33);
    WTF::String::utf8();
    v7 = 0;
    if (v34)
      v8 = (char *)v34 + 16;
    else
      v8 = 0;
    v9 = *((unsigned __int8 *)a2 + 25);
    v10 = *((unsigned __int8 *)a2 + 152);
    if (*((_BYTE *)a2 + 168))
      v7 = a2[20];
    *(_DWORD *)buf = 134219522;
    v36 = a1;
    v37 = 2048;
    v38 = v5;
    v39 = 2048;
    v40 = v6;
    v41 = 2080;
    v42 = v8;
    v43 = 1024;
    v44 = v9;
    v45 = 1024;
    v46 = v10;
    v47 = 2048;
    v48 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::goToBackForwardItem: navigationID=%llu, backForwardItemID=%s, shouldTreatAsContinuingLoad=%u, lastNavigationWasAppInitiated=%d, existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x40u);
    v12 = v34;
    v34 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v11);
      else
        --*(_DWORD *)v12;
    }
    v13 = v33;
    v33 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  WebKit::WebPage::SandboxExtensionTracker::beginLoad((const char ****)(a1 + 688), (const char ***)a2 + 23);
  *(_BYTE *)(a1 + 2251) = *((_BYTE *)a2 + 152);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v14)
    v15 = *(_BYTE *)(v14 + 144) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = (unsigned int *)(v14 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v18 = *(_QWORD *)(*(_QWORD *)(v14 + 280) + 88);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 + 24);
      *(_DWORD *)(v18 + 24) = v19 + 1;
      *(_BYTE *)(v18 + 3533) = *((_BYTE *)a2 + 152);
      if (v19)
        *(_DWORD *)(v18 + 24) = v19;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
  }
  {
    v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v20 = WebKit::WebProcess::WebProcess(v31);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v20;
  }
  v21 = *((_QWORD *)v20 + 40);
  v22 = a2[21];
  *(_QWORD *)(v21 + 96) = a2[20];
  *(_BYTE *)(v21 + 104) = v22;
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  v23 = (WebCore::PublicSuffixStore *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::idToHistoryItemMap(void)::map, a2 + 1);
  if (v23)
  {
    WebCore::PublicSuffixStore::singleton(v23);
    WebCore::PublicSuffixStore::addPublicSuffix();
    *(_QWORD *)(a1 + 1896) = *a2;
    std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 1904), (uint64_t)(a2 + 4));
    v24 = *(_QWORD *)(a1 + 88);
    v25 = *(_QWORD *)(v24 + 40);
    if (v25 || (v26 = *(_QWORD *)(v24 + 24)) != 0 && (v25 = *(_QWORD *)(v26 + 8)) != 0)
    {
      v27 = (unsigned int *)(v25 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      WebCore::Page::goToItem();
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v27);
    }
  }
  {
    v29 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v29 = WebKit::WebProcess::WebProcess(v32);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v29;
  }
  v30 = *((_QWORD *)v29 + 40);
  *(_QWORD *)(v30 + 96) = 0;
  *(_BYTE *)(v30 + 104) = 0;
  WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)buf);
}

uint64_t WebKit::WebPage::tryRestoreScrollPosition(WebKit::WebPage *this)
{
  uint64_t result;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::HistoryController *v5;

  result = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (result)
    v2 = *(_BYTE *)(result + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebCore::Frame::checkedHistory((WebCore::Frame *)result);
    WebCore::HistoryController::restoreScrollPositionAndViewState(v5);
    if (v5)
    {
      if (!*(_DWORD *)v5)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v5;
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return result;
}

double WebKit::WebPage::textZoomFactor(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = WebKit::WebPage::mainFramePlugIn(this, a2);
  if (v3)
  {
    v4 = *(unsigned __int8 ***)(v3 + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 9);
    v5 = (*((double (**)(unsigned __int8 **))*v4 + 117))(v4);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4[9], v6);
  }
  else
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v5 = 1.0;
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (!*(_BYTE *)(v8 + 144))
        {
          v9 = (unsigned int *)(v8 + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          v5 = *(float *)(v8 + 596);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
        }
      }
    }
  }
  return v5;
}

unsigned __int8 *WebKit::WebPage::setTextZoomFactor(WebKit::WebPage *this, double a2, WebCore::LocalFrame *a3)
{
  unsigned __int8 *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  float v9;

  result = (unsigned __int8 *)WebKit::WebPage::mainFramePlugIn(this, a3);
  if (result)
    return WebKit::PluginView::setPageScaleFactor(result, 0, 0, a2);
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v6)
  {
    result = *(unsigned __int8 **)(v6 + 8);
    if (result)
    {
      if (!result[144])
      {
        v7 = (unsigned int *)(result + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v9 = a2;
        WebCore::LocalFrame::setTextZoomFactor((WebCore::LocalFrame *)result, v9);
        return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
      }
    }
  }
  return result;
}

double WebKit::WebPage::pageZoomFactor(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = WebKit::WebPage::mainFramePlugIn(this, a2);
  if (v3)
  {
    v4 = *(unsigned __int8 ***)(v3 + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 9);
    v5 = (*((double (**)(unsigned __int8 **))*v4 + 117))(v4);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4[9], v6);
  }
  else
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v5 = 1.0;
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (!*(_BYTE *)(v8 + 144))
        {
          v9 = (unsigned int *)(v8 + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          v5 = *(float *)(v8 + 592);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
        }
      }
    }
  }
  return v5;
}

unsigned __int8 *WebKit::WebPage::setPageZoomFactor(WebKit::WebPage *this, double a2, WebCore::LocalFrame *a3)
{
  unsigned __int8 *result;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;

  result = (unsigned __int8 *)WebKit::WebPage::mainFramePlugIn(this, a3);
  if (result)
    return WebKit::PluginView::setPageScaleFactor(result, 0, 0, a2);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    result = (unsigned __int8 *)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::begin((_QWORD **)(v6 + 144));
    v7 = result;
    v9 = v8;
    v10 = *(_QWORD *)(v6 + 144);
    v11 = v10 ? v10 + 8 * *(unsigned int *)(v10 - 4) : 0;
    if ((unsigned __int8 *)v11 != result)
    {
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v7;
        do
          v14 = __ldaxr((unsigned int *)v13);
        while (__stlxr(v14 + 1, (unsigned int *)v13));
        result = (unsigned __int8 *)WebCore::LocalFrame::setPageZoomFactor(*(WebCore::LocalFrame **)(v13 + 8), v12);
        do
        {
          v16 = __ldaxr((unsigned int *)v13);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, (unsigned int *)v13));
        if (!v17)
        {
          atomic_store(1u, (unsigned int *)v13);
          result = (unsigned __int8 *)WTF::fastFree((WTF *)v13, v15);
        }
        while (1)
        {
          v7 += 8;
          if (v7 == v9)
            break;
          if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
            goto LABEL_18;
        }
        v7 = v9;
LABEL_18:
        ;
      }
      while (v7 != (unsigned __int8 *)v11);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::dumpHistoryForTesting@<X0>(WTF::StringImpl *this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  WebCore::BackForwardController *v6;
  int v7;
  int v8;
  WTF *v9;
  const WTF::StringImpl **v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  const WTF::String *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::HistoryItem *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;

  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v6 = *(WebCore::BackForwardController **)(v4 + 136);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v7 = WebCore::BackForwardController::backCount(v6);
    v8 = -v7;
    WebCore::BackForwardController::itemAtIndex(v6);
    v9 = (WTF *)WebCore::HistoryItem::url(v18);
    v10 = (const WTF::StringImpl **)WTF::aboutBlankURL(v9);
    v13 = WTF::equal(v19, *v10, v11);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v18)
      WTF::RefCounted<WebCore::HistoryItem>::deref(v18);
    if (v13)
      v8 = 1 - v7;
    if (v8 <= (int)WebCore::BackForwardController::forwardCount(v6))
    {
      do
      {
        WebCore::BackForwardController::itemAtIndex(v6);
        WebKit::dumpHistoryItem(0, (WebCore::HistoryItem *)8, v8 == 0, (uint64_t)&v20, a2, v14);
      }
      while (v8++ < (int)WebCore::BackForwardController::forwardCount(v6));
      this = v20;
      if (v20)
        goto LABEL_15;
    }
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v20);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v20);
    this = v20;
    if (v20)
LABEL_15:
      *(_DWORD *)this += 2;
    *a3 = this;
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        this = v20;
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    v20 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

unsigned int *WebKit::dumpHistoryItem(WebKit *this, WebCore::HistoryItem *a2, char a3, uint64_t a4, WTF::StringBuilder *a5, const WTF::String *a6)
{
  WebCore::HistoryItem *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  unsigned int *result;
  unint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::HistoryItem **v55;
  uint64_t v56;
  _DWORD **v57;
  uint64_t v58;
  _QWORD *v59;
  _DWORD *v60;
  const std::nothrow_t *v61;
  unint64_t v62;
  WebCore::HistoryItem **v63;
  BOOL v64;
  const WTF::String *v65;
  WTF::StringImpl *v66;
  WebCore::HistoryItem **v67;
  unint64_t v68;
  WebCore::HistoryItem *v69;
  void *v70;
  unint64_t v71;
  WebCore::HistoryItem *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;

  if ((a3 & 1) != 0)
  {
    WTF::StringBuilder::append();
  }
  else if (a2)
  {
    v10 = a2;
    do
    {
      LOBYTE(v78) = 32;
      v11 = *(_QWORD *)(a4 + 8);
      if (v11
        && ((v12 = *(unsigned int *)(a4 + 16), v12 < *(_DWORD *)(v11 + 4))
          ? (v13 = *(_QWORD *)a4 == 0)
          : (v13 = 0),
            v13))
      {
        v14 = *(_DWORD *)(v11 + 16);
        v15 = *(_QWORD *)(v11 + 8);
        *(_DWORD *)(a4 + 16) = v12 + 1;
        if ((v14 & 4) != 0)
          *(_BYTE *)(v15 + v12) = 32;
        else
          *(_WORD *)(v15 + 2 * v12) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v10 = (WebCore::HistoryItem *)((char *)v10 - 1);
    }
    while (v10);
  }
  WebCore::HistoryItem::url(this);
  if (WTF::URL::protocolIs())
  {
    if (v78)
    {
      v16 = WTF::StringImpl::find();
      if (v16 == -1)
      {
        v18 = 0;
      }
      else
      {
        v17 = *(_QWORD *)a5;
        if (*(_QWORD *)a5)
          LODWORD(v17) = *(_DWORD *)(v17 + 4);
        v18 = v17 + v16;
      }
      v75 = 0;
      v22 = *((unsigned __int8 *)v78 + 16);
      v20 = *((_DWORD *)v78 + 1);
      v75 = *((_QWORD *)v78 + 1);
      v21 = (v22 >> 2) & 1;
    }
    else
    {
      v18 = 0;
      v20 = 0;
      v75 = 0;
      LOBYTE(v21) = 1;
    }
    v76 = v20;
    v77 = v21;
    v24 = WTF::StringView::substring((const char *)&v75, v18, 0xFFFFFFFF);
    v25 = v23;
    v26 = *(_QWORD *)(a4 + 8);
    if (v26 || (v26 = *(_QWORD *)a4) != 0)
    {
      if ((v23 & 0xFF00000000) == 0 || (*(_DWORD *)(v26 + 16) & 4) == 0)
      {
LABEL_38:
        v28 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a4);
        if (v28)
        {
          for (i = 0; i != 12; ++i)
            *(_WORD *)(v28 + 2 * i) = aFileTest[i];
          v79 = (uint64_t)v24;
          v80 = v25;
          WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v79, (char *)(v28 + 24));
        }
        goto LABEL_42;
      }
    }
    else if ((v23 & 0xFF00000000) == 0)
    {
      goto LABEL_38;
    }
    v27 = MEMORY[0x19AEAB398](a4);
    if (v27)
    {
      *(_DWORD *)(v27 + 8) = 975795315;
      *(_QWORD *)v27 = *(_QWORD *)"(file test):";
      v79 = (uint64_t)v24;
      v80 = v25;
      WTF::StringView::getCharacters<unsigned char>(&v79, (char *)(v27 + 12));
    }
  }
  else if (*(_DWORD *)(a4 + 16) || *(_QWORD *)(a4 + 8))
  {
    if (v78)
    {
      v73 = *((_QWORD *)v78 + 1);
      v74 = *((unsigned int *)v78 + 1) | ((unint64_t)((*((_DWORD *)v78 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v73 = 0;
      v74 = 0x100000000;
    }
    WTF::StringBuilder::append(a4, v73, v74);
  }
  else
  {
    WTF::String::operator=((WTF::StringImpl **)a4, (WTF::StringImpl *)&v78);
    v19 = (int)v78;
    if (v78)
      v19 = *((_DWORD *)v78 + 1);
    *(_DWORD *)(a4 + 16) = v19;
  }
LABEL_42:
  v30 = *(_QWORD *)WebCore::HistoryItem::target(this);
  if (v30)
  {
    v31 = *(_DWORD *)(v30 + 4);
    if (v31)
    {
      v32 = *(_DWORD *)(a4 + 16);
      if (v31 >= 0xFFFFFFF2)
        v33 = -1;
      else
        v33 = v31 + 14;
      v34 = __CFADD__(v33, v32);
      v35 = v33 + v32;
      if (v34)
        v36 = 0xFFFFFFFFLL;
      else
        v36 = v35;
      v37 = *(_QWORD *)(a4 + 8);
      if ((!v37 && (v37 = *(_QWORD *)a4) == 0 || (*(_BYTE *)(v37 + 16) & 4) != 0) && (*(_BYTE *)(v30 + 16) & 4) != 0)
      {
        v42 = MEMORY[0x19AEAB398](a4, v36);
        if (v42)
        {
          *(_DWORD *)(v42 + 8) = 572548461;
          *(_QWORD *)v42 = *(_QWORD *)" (in frame \"";
          v43 = v42 + 12;
          v79 = v30;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v79, (char *)(v42 + 12));
          v44 = v79;
          if (v79)
            v44 = *(unsigned int *)(v79 + 4);
          *(_WORD *)(v43 + v44) = 10530;
        }
      }
      else
      {
        v38 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a4);
        if (v38)
        {
          for (j = 0; j != 12; ++j)
            *(_WORD *)(v38 + 2 * j) = aInFrame[j];
          v40 = v38 + 24;
          v79 = v30;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v79, (char *)(v38 + 24));
          v41 = v79;
          if (v79)
            v41 = *(unsigned int *)(v79 + 4);
          *(_DWORD *)(v40 + 2 * v41) = 2687010;
        }
      }
    }
  }
  if (WebCore::HistoryItem::isTargetItem(this))
    WTF::StringBuilder::append();
  LOBYTE(v79) = 10;
  v45 = *(_QWORD *)(a4 + 8);
  if (v45
    && ((v46 = *(unsigned int *)(a4 + 16), v46 < *(_DWORD *)(v45 + 4))
      ? (v47 = *(_QWORD *)a4 == 0)
      : (v47 = 0),
        v47))
  {
    v48 = *(_DWORD *)(v45 + 16);
    v49 = *(_QWORD *)(v45 + 8);
    *(_DWORD *)(a4 + 16) = v46 + 1;
    if ((v48 & 4) != 0)
      *(_BYTE *)(v49 + v46) = 10;
    else
      *(_WORD *)(v49 + 2 * v46) = 10;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  result = (unsigned int *)WebCore::HistoryItem::children(this);
  v51 = result[3];
  if ((_DWORD)v51)
  {
    if (v51 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v52 = result;
    v53 = 8 * v51;
    v54 = WTF::fastMalloc((WTF *)(8 * v51));
    v55 = (WebCore::HistoryItem **)v54;
    v56 = v52[3];
    if ((_DWORD)v56)
    {
      v57 = *(_DWORD ***)v52;
      v58 = 8 * v56;
      v59 = (_QWORD *)v54;
      do
      {
        v60 = *v57++;
        ++*v60;
        *v59++ = v60;
        v58 -= 8;
      }
      while (v58);
    }
    v61 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v62 = v51;
    while (1)
    {
      v63 = (WebCore::HistoryItem **)operator new(8 * v62, v61);
      if (v63)
        break;
      v64 = v62 > 1;
      v62 >>= 1;
      if (!v64)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v55, &v55[v51], v51, 0, 0);
        goto LABEL_84;
      }
    }
    v67 = v63;
    std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v55, &v55[v51], v51, v63, v62);
    operator delete(v67);
LABEL_84:
    v68 = 0;
    v69 = (WebCore::HistoryItem *)((char *)a2 + 4);
    do
    {
      WebKit::dumpHistoryItem(v55[v68 / 8], v69, 0, a4, a5, v65);
      v68 += 8;
    }
    while (v53 != v68);
    v71 = 0;
    do
    {
      v72 = v55[v71 / 8];
      v55[v71 / 8] = 0;
      if (v72)
        WTF::RefCounted<WebCore::HistoryItem>::deref(v72);
      v71 += 8;
    }
    while (v53 != v71);
    WTF::fastFree((WTF *)v55, v70);
  }
  else
  {
    std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(0, (WebCore::HistoryItem **)(8 * v51), v51, 0, 0);
  }
  result = (unsigned int *)v78;
  v78 = 0;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v66);
    else
      *result -= 2;
  }
  return result;
}

unsigned __int8 *WebKit::WebPage::totalScaleFactor(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v3;
  void *v4;

  result = (unsigned __int8 *)WebKit::WebPage::mainFramePlugIn(this, a2);
  if (result)
  {
    v3 = (unsigned __int8 **)*((_QWORD *)result + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
    (*((void (**)(unsigned __int8 **))*v3 + 117))(v3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v4);
  }
  return result;
}

unsigned __int8 *WebKit::WebPage::scalePageInViewCoordinates(WebKit::WebPage *a1, WebCore::LocalFrame *a2, double a3)
{
  double v6;
  unsigned __int8 *result;
  double v8;
  unsigned __int8 *v9;
  uint64_t v10;
  WebCore::LocalFrame *v11;
  double v12;
  unint64_t v13;

  v6 = *(float *)(*((_QWORD *)a1 + 6) + 368) * a3;
  result = WebKit::WebPage::totalScaleFactor(a1, a2);
  if (v6 != v8)
  {
    result = (unsigned __int8 *)WebKit::WebPage::localMainFrameView(a1);
    if (result)
    {
      v9 = result;
      ++*((_DWORD *)result + 2);
      v13 = -(int)a2 - ((unint64_t)a2 & 0xFFFFFFFF00000000);
      v10 = WebCore::ScrollView::rootViewToContents((WebCore::ScrollView *)result, (const WebCore::IntPoint *)&v13);
      WebKit::WebPage::totalScaleFactor(a1, v11);
      *(float *)&v12 = a3 / (v12 / *(float *)(*((_QWORD *)a1 + 6) + 368));
      LODWORD(v13) = llroundf((float)(int)v10 * *(float *)&v12);
      HIDWORD(v13) = llroundf((float)SHIDWORD(v10) * *(float *)&v12);
      result = WebKit::WebPage::scalePage(a1, a3, (const WebCore::IntPoint *)&v13);
      if (*((_DWORD *)v9 + 2) == 1)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
      else
        --*((_DWORD *)v9 + 2);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::layoutIfNeeded(WebKit::WebPage *this)
{
  return WebCore::Page::layoutIfNeeded();
}

void WebKit::WebPage::postInjectedBundleMessage(uint64_t a1, uint64_t a2, const void **a3)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  const void *v8;
  WebKit *v9;
  WebKit::WebProcess *v10;
  WebKit *v11;
  uint64_t (**v12)();

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 16);
  if (v7)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8));
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v8 = *a3;
    v12 = &off_1E34E0668;
    WebKit::UserData::transform(v8, (uint64_t)&v12, &v11);
    WebKit::InjectedBundle::didReceiveMessageToPage(v7, a1, a2, (uint64_t)&v11);
    v9 = v11;
    v11 = 0;
    if (v9)
      CFRelease(*((CFTypeRef *)v9 + 1));
    CFRelease(*(CFTypeRef *)(a1 + 8));
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t WebKit::WebPage::setUnderPageBackgroundColorOverride()
{
  return WebCore::Page::setUnderPageBackgroundColorOverride();
}

WTF::MachSendRight *WebKit::WebPage::takeSnapshot(WebKit::WebPage *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int8x8_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[72];
  uint64_t v23[3];
  char v24;
  __int128 v25;
  int v26;
  _BYTE v27[72];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a2;
  v30 = a3;
  v28 = a4;
  v27[0] = 0;
  v27[64] = 0;
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if (!*(_BYTE *)(v8 + 144))
      {
        v12 = (unsigned int *)(v8 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        v14 = *(_QWORD *)(v8 + 288);
        if (v14)
        {
          ++*(_DWORD *)(v14 + 8);
          v25 = *(_OWORD *)(v14 + 1088);
          v26 = *(_DWORD *)(v14 + 1104);
          WebCore::LocalFrameView::paintBehavior((WebCore::LocalFrameView *)v14);
          if ((a5 & 0x400) != 0)
          {
            v15 = 0;
            v29 = WebCore::ScrollableArea::visibleContentRect();
            v30 = v16;
          }
          else if ((a5 & 0x800) != 0)
          {
            v29 = 0;
            v30 = WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v14);
            v23[1] = 0;
            v17 = (int8x8_t)vcgt_s32((int32x2_t)v30, (int32x2_t)0xFE000000FE000000);
            v23[2] = (uint64_t)vorr_s8((int8x8_t)(*(_QWORD *)&v17 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v30), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v30, 6uLL)), v17));
            v15 = 1;
            v24 = 1;
            WebCore::LocalFrameView::setLayoutViewportOverrideRect();
            WebCore::LocalFrameView::setPaintBehavior();
          }
          else
          {
            v15 = 0;
          }
          if ((int)v28 < 1 || SHIDWORD(v28) <= 0)
          {
            v28 = v30;
            if ((a5 & 0x20) == 0)
            {
              v18 = *(float *)(*((_QWORD *)a1 + 6) + 364);
              LODWORD(v28) = (int)(float)(v18 * (float)(int)v30);
              HIDWORD(v28) = (int)(float)(v18 * (float)SHIDWORD(v30));
            }
          }
          WebKit::WebPage::snapshotAtSize(a1, (const WebCore::IntRect *)&v29, (int32x2_t *)&v28, (WebCore::LocalFrame *)v8, (WebCore::LocalFrameView *)v14, (WebKit *)(a5 | 1u), v23);
          v19 = v23[0];
          if (v23[0])
          {
            WebKit::WebImage::createHandle(v23[0], 0, v22);
            std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v27, (uint64_t)v22);
            std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v22);
            CFRelease(*(CFTypeRef *)(v19 + 8));
          }
          if (v15)
          {
            WebCore::LocalFrameView::setLayoutViewportOverrideRect();
            WebCore::LocalFrameView::setPaintBehavior();
          }
          v20 = *a6;
          *a6 = 0;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, v27);
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          if (*(_DWORD *)(v14 + 8) != 1)
          {
            --*(_DWORD *)(v14 + 8);
LABEL_25:
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
            return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v27);
          }
        }
        else
        {
          v14 = *a6;
          *a6 = 0;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 16))(v14, v27);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        goto LABEL_25;
      }
    }
  }
  v9 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v27);
}

void WebKit::WebPage::snapshotAtSize(WebKit::WebPage *this@<X0>, const WebCore::IntRect *a2@<X1>, int32x2_t *a3@<X2>, WebCore::LocalFrame *a4@<X4>, WebCore::LocalFrameView *a5@<X5>, WebKit *a6@<X3>, _QWORD *a7@<X8>)
{
  char v14;
  CFTypeRef v15;
  WebKit *v16;
  uint64_t v17;
  WebKit::WebPage *v18;
  CFTypeRef cf;
  WebKit *v20;

  if (WebKit::WebPage::pluginViewForFrame((uint64_t)a4, a2))
    v14 = 2;
  else
    v14 = 1;
  WebKit::snapshotColorSpace(a6, (uint64_t)this, &cf);
  WebKit::WebImage::create(a3, v14, &cf, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 48) + 16), &v20);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  v16 = v20;
  v17 = *((_QWORD *)v20 + 2);
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    v18 = (WebKit::WebPage *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v20 + 2) + 16))(*((_QWORD *)v20 + 2));
    WebKit::WebPage::paintSnapshotAtSize(v18, a2, a3, (__int16)a6, a4, a5, v18);
    *a7 = v20;
  }
  else
  {
    *a7 = 0;
    v20 = 0;
    CFRelease(*((CFTypeRef *)v16 + 1));
  }
}

unsigned int *WebKit::WebPage::scaledSnapshotWithOptions@<X0>(unsigned int *this@<X0>, int32x2_t *a2@<X1>, double a3@<D0>, FloatSize *a4@<X2>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebPage *v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::LocalFrameView *v13;
  int32x2_t v14;
  uint64_t v15;
  float v16;
  int v17;
  float v18[2];
  int32x2_t v19;

  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && !*(_BYTE *)(v7 + 144))
  {
    v10 = (WebKit::WebPage *)this;
    v11 = (unsigned int *)(v7 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(WebCore::LocalFrameView **)(v7 + 288);
    if (v13)
    {
      ++*((_DWORD *)v13 + 2);
      v14 = a2[1];
      v19 = v14;
      v15 = HIDWORD(*(_QWORD *)&v14);
      if (((unsigned __int16)a4 & 0x100) != 0)
      {
        v18[0] = (float)v14.i32[0];
        v18[1] = (float)v14.i32[1];
        v17 = WebCore::PrintContext::numberOfPages((WebCore::PrintContext *)v7, (WebCore::LocalFrame *)v18, a4);
        v19.i32[1] = v17 + v17 * v15 - 1;
      }
      else
      {
        if ((a4 & 0x20) == 0)
          a3 = *(float *)(*((_QWORD *)this + 6) + 364) * a3;
        v16 = a3;
        v19.i32[0] = (int)(float)((float)v14.i32[0] * v16);
        v19.i32[1] = (int)(float)((float)v14.i32[1] * v16);
      }
      WebKit::WebPage::snapshotAtSize(v10, (const WebCore::IntRect *)a2, &v19, (WebCore::LocalFrame *)v7, v13, (WebKit *)a4, a5);
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    else
    {
      *a5 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  else
  {
    *a5 = 0;
  }
  return this;
}

uint64_t WebKit::WebPage::paintSnapshotAtSize(WebKit::WebPage *this, const WebCore::IntRect *a2, int32x2_t *a3, __int16 a4, WebCore::LocalFrame *a5, WebCore::LocalFrameView *a6, WebCore::GraphicsContext *a7)
{
  const FloatSize *v13;
  float32x2_t v14;
  float v15;
  void *v16;
  IntPoint v17;
  float v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  void *v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  IntPoint v41[2];
  Color v42;
  int v43;
  int v44;
  Color v45;
  Color v46;
  __int128 v47;

  kdebug_trace();
  v47 = *(_OWORD *)a2;
  v14 = vdiv_f32(vcvt_f32_s32(*a3), vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 8)));
  if (v14.f32[0] >= v14.f32[1])
    v15 = v14.f32[0];
  else
    v15 = v14.f32[1];
  if ((a4 & 0x100) != 0)
  {
    *(float *)&v42.m_colorAndFlags = (float)SDWORD2(v47);
    *((float *)&v42.m_colorAndFlags + 1) = (float)SHIDWORD(v47);
    WebCore::PrintContext::spoolAllPagesWithBoundaries(a5, a7, (WebCore::GraphicsContext *)&v42, v13);
  }
  else
  {
    v45.m_colorAndFlags = 0;
    v46.m_colorAndFlags = 0;
    if ((a4 & 0x1000) != 0)
    {
      v42.m_colorAndFlags = 0x1104000000000000;
      WebCore::Color::operator=();
      WebCore::LocalFrameView::baseBackgroundColor(a6);
      WebCore::Color::operator=();
      WebCore::LocalFrameView::setBaseBackgroundColor(a6, &v46);
    }
    else
    {
      WebCore::LocalFrameView::documentBackgroundColor(a6);
      if ((*(_QWORD *)(*((_QWORD *)a5 + 17) + 664) & 0x4000000000) != 0
        && (v42.m_colorAndFlags & 0x4000000000000) != 0)
      {
        WebCore::Color::Color((WebCore::Color *)v41, &v42);
      }
      else
      {
        WebCore::LocalFrameView::baseBackgroundColor(a6);
      }
      WebCore::Color::operator=();
      if ((*(_QWORD *)v41 & 0x8000000000000) != 0)
      {
        v32 = (unsigned int *)(*(_QWORD *)v41 & 0xFFFFFFFFFFFFLL);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v16);
        }
      }
      if ((v42.m_colorAndFlags & 0x8000000000000) != 0)
      {
        v35 = (unsigned int *)(v42.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v16);
        }
      }
    }
    v17 = (IntPoint)*a3;
    v41[0] = 0;
    v41[1] = v17;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v42, (const WebCore::IntRect *)v41);
    (*(void (**)(WebCore::GraphicsContext *, Color *, Color *))(*(_QWORD *)a7 + 224))(a7, &v42, &v46);
    if ((a4 & 0x20) == 0)
    {
      v18 = *(float *)(*(_QWORD *)(*((_QWORD *)a5 + 3) + 8) + 364);
      (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a7 + 680))(a7, v18);
      v15 = v15 / v18;
    }
    *(float *)&v42.m_colorAndFlags = v15;
    *((float *)&v42.m_colorAndFlags + 1) = v15;
    (*(void (**)(WebCore::GraphicsContext *, Color *))(*(_QWORD *)a7 + 632))(a7, &v42);
    v41[0] = (IntPoint)(-(int)v47 - (v47 & 0xFFFFFFFF00000000));
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v42, v41);
    (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a7 + 648))(a7, *(float *)&v42.m_colorAndFlags, *((float *)&v42.m_colorAndFlags + 1));
    WebCore::LocalFrameView::paintContentsForSnapshot();
    if ((a4 & 8) != 0)
    {
      WebCore::FrameSelection::selectionBounds();
      v42.m_colorAndFlags = __PAIR64__(v21, v20);
      v43 = v22;
      v44 = v23;
      v41[0] = (IntPoint)0x11040000FF0000FFLL;
      WebCore::GraphicsContextState::setStrokeColor((WebCore::GraphicsContext *)((char *)a7 + 8), (const WebCore::Color *)v41);
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a7 + 88))(a7, (char *)a7 + 8);
      if ((*(_QWORD *)v41 & 0x8000000000000) != 0)
      {
        v38 = (unsigned int *)(*(_QWORD *)v41 & 0xFFFFFFFFFFFFLL);
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v24);
        }
      }
      (*(void (**)(WebCore::GraphicsContext *, Color *, float))(*(_QWORD *)a7 + 288))(a7, &v42, 1.0);
    }
    if ((a4 & 0x1000) != 0)
      WebCore::LocalFrameView::setBaseBackgroundColor(a6, &v45);
    if ((v45.m_colorAndFlags & 0x8000000000000) != 0)
    {
      v26 = (unsigned int *)(v45.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v19);
      }
    }
    if ((v46.m_colorAndFlags & 0x8000000000000) != 0)
    {
      v29 = (unsigned int *)(v46.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v19);
      }
    }
  }
  return kdebug_trace();
}

CFTypeRef WebKit::snapshotColorSpace@<X0>(WebKit *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  CFTypeRef result;
  WebCore *v6;
  WebCore::Widget *v7;

  if (((unsigned __int16)this & 0x200) != 0)
  {
    v6 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 48) + 160) + 56))(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 160));
    return (CFTypeRef)WebCore::screenColorSpace(v6, v7);
  }
  else
  {
    result = *(CFTypeRef *)WebCore::DestinationColorSpace::SRGB(this);
    *a3 = result;
    if (result)
      return CFRetain(result);
  }
  return result;
}

unsigned int *WebKit::WebPage::snapshotNode@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, WebKit *a3@<X2>, unsigned int a4@<W3>, WebKit **a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::LocalFrameView *v14;
  int v15;
  WebCore::RenderObject *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int32x2_t v32;
  uint64_t v34;
  double v35;
  CFTypeRef v36;
  WebKit *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  float v43;
  void *v44;
  void *v45;
  WebKit *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  Color v53;
  WebKit *v54;
  int32x2_t v55;
  int v56;
  __int16 v57;
  char v58;
  char v59;
  int32x2_t v60;
  _QWORD v61[2];
  CFTypeRef cf;

  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    *a5 = 0;
    return this;
  }
  v11 = (uint64_t)this;
  v12 = (unsigned int *)(v7 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(WebCore::LocalFrameView **)(v7 + 288);
  if (!v14)
  {
    *a5 = 0;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  v15 = *((_DWORD *)v14 + 2);
  *((_DWORD *)v14 + 2) = v15 + 1;
  v16 = (WebCore::RenderObject *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL);
  if (v16)
  {
    v61[0] = 0;
    v61[1] = 0;
    v17 = WebCore::RenderObject::paintingRootRect(v16, (WebCore::LayoutRect *)v61);
    v20 = v17 - (v19 & 0xFFFFFFC0);
    v21 = v20 + 32;
    v22 = ((int)(v20 + 32) >> 6) + (int)v17 / 64;
    v23 = HIDWORD(v17) - (v19 & 0xFFFFFFC0);
    v24 = (((int)(v23 + 32) >> 6) + SHIDWORD(v17) / 64);
    v26 = __OFADD__(v20, v25);
    v27 = v20 + v25;
    v28 = (v20 >> 31) + 0x7FFFFFFF;
    if (v26)
      v27 = v28;
    v29 = (v27 / 64 - (v21 >> 6) + ((int)(v27 - (v28 & 0xFFFFFFC0) + 32) >> 6));
    v30 = v23 + v18;
    if (__OFADD__(v23, v18))
      v30 = (v23 >> 31) + 0x7FFFFFFF;
    v31 = (v30 / 64
                       - ((int)(v23 + 32) >> 6)
                       + ((int)(v30 - (((v23 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6));
    v32 = (int32x2_t)(v29 | (v31 << 32));
    v56 = v22;
    v57 = ((int)(v23 + 32) >> 6) + SHIDWORD(v17) / 64;
    v58 = (((int)(v23 + 32) >> 6) + SHIDWORD(v17) / 64) >> 16;
    v59 = (((int)(v23 + 32) >> 6) + SHIDWORD(v17) / 64) >> 24;
    v60 = v32;
    if ((int)v29 < 1 || (int)v31 <= 0)
    {
      *a5 = 0;
      goto LABEL_36;
    }
    v34 = a4 / v29;
    if (v34 >= v31)
    {
      v35 = 1.0;
    }
    else
    {
      v35 = (double)v34 / (double)(int)v31;
      v32 = (int32x2_t)((int)(v35 * (double)(int)v29) | (unint64_t)(v34 << 32));
    }
    v55 = v32;
    WebKit::snapshotColorSpace(a3, v11, &cf);
    WebKit::WebImage::create(&v55, a3 & 1, &cf, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 48) + 16), &v54);
    v36 = cf;
    cf = 0;
    if (v36)
      CFRelease(v36);
    v37 = v54;
    v38 = *((_QWORD *)v54 + 2);
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      v39 = *((_QWORD *)v54 + 2);
      if (v39)
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      else
        v40 = 0;
      v41 = v24 << 32;
      if ((a3 & 0x20) == 0)
      {
        v42 = *(float *)(*(_QWORD *)(v11 + 48) + 364);
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 680))(v40);
        v35 = v35 / v42;
      }
      v43 = v35;
      *(float *)&cf = v43;
      *((float *)&cf + 1) = v43;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v40 + 632))(v40, &cf);
      v53.m_colorAndFlags = -v22 - v41;
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&cf, (const IntPoint *)&v53);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v40 + 648))(v40, *(float *)&cf, *((float *)&cf + 1));
      WebCore::LocalFrameView::baseBackgroundColor(v14);
      v53.m_colorAndFlags = 0x1104000000000000;
      WebCore::LocalFrameView::setBaseBackgroundColor(v14, &v53);
      if ((v53.m_colorAndFlags & 0x8000000000000) != 0)
      {
        v47 = (unsigned int *)(v53.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v47);
          WTF::fastFree((WTF *)v47, v44);
        }
      }
      WebCore::LocalFrameView::setNodeToDraw(v14, (Node *)a2);
      WebCore::LocalFrameView::paintContentsForSnapshot();
      WebCore::LocalFrameView::setBaseBackgroundColor(v14, (const Color *)&cf);
      WebCore::LocalFrameView::setNodeToDraw(v14, 0);
      v46 = v54;
      v54 = 0;
      *a5 = v46;
      if (((unint64_t)cf & 0x8000000000000) == 0)
        goto LABEL_36;
      v50 = (unsigned int *)((unint64_t)cf & 0xFFFFFFFFFFFFLL);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v50);
        WTF::fastFree((WTF *)v50, v45);
      }
      v37 = v54;
      v54 = 0;
      if (!v37)
      {
LABEL_36:
        v15 = *((_DWORD *)v14 + 2) - 1;
        if (*((_DWORD *)v14 + 2) != 1)
          goto LABEL_37;
        goto LABEL_20;
      }
    }
    else
    {
      *a5 = 0;
      v54 = 0;
    }
    CFRelease(*((CFTypeRef *)v37 + 1));
    goto LABEL_36;
  }
  *a5 = 0;
  if (v15)
  {
LABEL_37:
    *((_DWORD *)v14 + 2) = v15;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
LABEL_20:
  (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v14 + 8))(v14);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
}

void WebKit::WebPage::updateFrameSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::Widget *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  WebKit::WebProcess *v21;
  _QWORD v22[2];
  FloatRect v23;

  if (*(_QWORD *)(a1 + 48))
  {
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v8 = WebKit::WebProcess::WebProcess(v21);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
    }
    v9 = WebKit::WebProcess::webFrame((uint64_t)v8, a2, a3);
    if (v9)
    {
      v10 = v9;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 144))
          {
            v13 = (unsigned int *)(v12 + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
            v15 = *(WebCore::Widget **)(v12 + 288);
            if (v15)
            {
              ++*((_DWORD *)v15 + 2);
              WebCore::Widget::frameRect(v15);
              if (v16 != a4)
              {
                v23.m_location = (FloatPoint)WebCore::Widget::frameRect(v15);
                v23.m_size = (FloatSize)a4;
                (*(void (**)(WebCore::Widget *, FloatRect *))(*(_QWORD *)v15 + 16))(v15, &v23);
                v22[0] = WebCore::Widget::frameRect(v15);
                v22[1] = v17;
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v23, (const WebCore::IntRect *)v22);
                WebCore::ScrollView::setExposedContentRect(v15, &v23);
                WebCore::Widget::frameRect(v15);
                v23.m_location.m_x = (float)v18;
                v23.m_location.m_y = (float)v19;
                WebCore::ScrollView::setUnobscuredContentSize(v15, (const FloatSize *)&v23);
                v20 = *(_QWORD *)(a1 + 72);
                if (v20)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
                  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 264))(*(_QWORD *)(a1 + 72));
                }
              }
              if (*((_DWORD *)v15 + 2) == 1)
                (*(void (**)(WebCore::Widget *))(*(_QWORD *)v15 + 8))(v15);
              else
                --*((_DWORD *)v15 + 2);
            }
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13);
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
  }
}

uint64_t WebKit::WebPage::cancelMarkLayersVolatile(WebKit::WebPage *this)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  WebKit::WebPage *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE712D0;
  if (os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    v5 = 134218240;
    v6 = this;
    v7 = 2048;
    v8 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::cancelMarkLayersVolatile:", (uint8_t *)&v5, 0x16u);
  }
  if ((*((_QWORD *)this + 217) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)this + 1704));
  return WebKit::WebPage::callVolatilityCompletionHandlers(this, 0);
}

IPC::Encoder *WebKit::WebPage::mouseEvent(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  char v10;
  IPC::Encoder *result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  WebKit::WebProcess *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  _BOOL4 v33;
  double v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  unsigned int v43;
  WebKit::SandboxExtensionImpl **v44;
  uint64_t v45;
  uint64_t v46;
  WebKit::SandboxExtensionImpl *v47;
  WebKit::WebProcess *v48;
  uint64_t v49;
  char v50;
  _BYTE v51[23];
  char v52;
  _BYTE v53[8];
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  int v58;
  IPC::Encoder *v59;
  _BYTE v60[23];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v10 = *(_BYTE *)(a1 + 912);
  *(_BYTE *)(a1 + 912) = 1;
  result = (IPC::Encoder *)PAL::HysteresisActivity::impulse((_BYTE *)(a1 + 1840));
  if (*(_BYTE *)(a1 + 795))
  {
    v12 = *(_BYTE *)a4;
    v57[0] = 0;
    LOBYTE(v58) = 0;
    v50 = v12;
    v51[0] = 0;
    *(_QWORD *)&v51[7] = v57;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1907;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    *(_QWORD *)v60 = v14;
    IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v14, (uint64_t)&v50);
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, v60, 0);
    result = *(IPC::Encoder **)v60;
    *(_QWORD *)v60 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      result = (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
    goto LABEL_31;
  }
  v55 = 0;
  v56 = 0;
  if (*(_BYTE *)(a5 + 16))
  {
    *(_OWORD *)v57 = 0uLL;
    v18 = *(unsigned int *)(a5 + 12);
    if (!(_DWORD)v18)
      goto LABEL_6;
    if (v18 >> 29)
      goto LABEL_41;
    *(_DWORD *)&v57[8] = *(_DWORD *)(a5 + 12);
    v49 = WTF::fastMalloc((WTF *)(8 * v18));
    *(_QWORD *)v57 = v49;
    v42 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v42)
    {
      v43 = 0;
      v19 = 0;
      v44 = *(WebKit::SandboxExtensionImpl ***)a5;
      v45 = 8 * v42;
      do
      {
        if (*v44)
        {
          v46 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v46 = 1;
          v47 = *v44;
          *v44 = 0;
          *(_QWORD *)(v46 + 8) = v47;
          *(_QWORD *)(v46 + 16) = 1;
          WebKit::SandboxExtensionImpl::consume(v47);
          v43 = v19 + 1;
          *(_QWORD *)(v49 + 8 * v19++) = v46;
        }
        ++v44;
        v45 -= 8;
      }
      while (v45);
      *(_DWORD *)&v57[12] = v43;
    }
    else
    {
LABEL_6:
      v19 = 0;
    }
    WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v57, v19);
    v20 = *(_QWORD *)&v57[8];
    v55 = *(_QWORD *)v57;
    *(_OWORD *)v57 = 0uLL;
    v56 = v20;
    WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v21);
  }
  {
    v22 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v22 = WebKit::WebProcess::WebProcess(v48);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v22;
  }
  v23 = (WTF::StringImpl *)WebKit::WebProcess::webFrame((uint64_t)v22, a2, a3);
  if (!v23)
  {
    v33 = 0;
LABEL_18:
    WebKit::WebPage::revokeSandboxExtensions((uint64_t)&v55);
    if (*(_QWORD *)(a1 + 72) && *(_BYTE *)a4 == 2 && *((unsigned __int8 *)a4 + 32) == 254)
    {
      v34 = a4[10];
      WebKit::WebPage::flushDeferredDidReceiveMouseEvent(a1);
      if (v34 == 0.0 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 272))(*(_QWORD *)(a1 + 72)))
      {
        if (v33)
          v35 = 16843008;
        else
          v35 = 16777472;
        *(_DWORD *)(a1 + 860) = v35 | *(unsigned __int8 *)a4;
LABEL_30:
        result = (IPC::Encoder *)WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v29);
LABEL_31:
        *(_BYTE *)(a1 + 912) = v10;
        return result;
      }
    }
    else
    {
      WebKit::WebPage::flushDeferredDidReceiveMouseEvent(a1);
    }
    v36 = *(_BYTE *)a4;
    v57[0] = 0;
    LOBYTE(v58) = 0;
    v50 = v36;
    v51[0] = v33;
    *(_QWORD *)&v51[7] = v57;
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
    v38 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v38 = 1907;
    *(_QWORD *)(v38 + 8) = v37;
    *(_QWORD *)(v38 + 528) = v38 + 16;
    *(_QWORD *)(v38 + 536) = v38 + 16;
    *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v38 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
    *(_QWORD *)v60 = v38;
    IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v38, (uint64_t)&v50);
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, v60, 0);
    v39 = *(IPC::Encoder **)v60;
    *(_QWORD *)v60 = 0;
    if (v39)
    {
      IPC::Encoder::~Encoder(v39, v29);
      WTF::fastFree(v40, v41);
    }
    goto LABEL_30;
  }
  v24 = WebKit::g_currentEvent;
  WebKit::g_currentEvent = (uint64_t)a4;
  WebKit::WebFrame::handleMouseEvent(v23, (uint64_t)a4, (uint64_t)v57);
  if (!v58)
  {
    v33 = v57[0] != 0;
    WebKit::g_currentEvent = v24;
    goto LABEL_18;
  }
  if (v58 == 1)
  {
    v25 = v57[0];
    *(_OWORD *)v60 = *(_OWORD *)&v57[1];
    *(_QWORD *)&v60[15] = *(_QWORD *)&v57[16];
    WebKit::WebPage::revokeSandboxExtensions((uint64_t)&v55);
    v26 = *(_BYTE *)a4;
    v50 = v25;
    *(_OWORD *)v51 = *(_OWORD *)v60;
    *(_QWORD *)&v51[15] = *(_QWORD *)&v60[15];
    v52 = 1;
    v53[0] = v26;
    v53[1] = 0;
    v54 = &v50;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
    v28 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v28 = 1907;
    *(_QWORD *)(v28 + 8) = v27;
    *(_QWORD *)(v28 + 528) = v28 + 16;
    *(_QWORD *)(v28 + 536) = v28 + 16;
    *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v28 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
    v59 = (IPC::Encoder *)v28;
    IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v28, (uint64_t)v53);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, &v59, 0);
    v30 = v59;
    v59 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v29);
      WTF::fastFree(v31, v32);
    }
    WebKit::g_currentEvent = v24;
    goto LABEL_30;
  }
  result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPage::revokeSandboxExtensions(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)a1;
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 16) - 1;
      *(_QWORD *)(*v3 + 16) = v6;
      if (!v6)
      {
        *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
}

uint64_t WebKit::WebPage::setLastKnownMousePosition(uint64_t a1, uint64_t a2, uint64_t a3, IntPoint a4, IntPoint a5)
{
  WebKit::WebProcess *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  IntPoint v11;
  IntPoint v12;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = a2;
    v15 = a3;
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v13);
    a2 = v14;
    a3 = v15;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  result = WebKit::WebProcess::webFrame((uint64_t)v7, a2, a3);
  if (result)
  {
    v9 = *(_QWORD *)(result + 24);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        if (!*(_BYTE *)(v10 + 144))
        {
          if (*(_QWORD *)(v10 + 288))
          {
            v11 = a4;
            v12 = a5;
            return WebCore::EventHandler::setLastKnownMousePosition(*(WebCore::EventHandler **)(v10 + 640), v11, v12);
          }
        }
      }
    }
  }
  return result;
}

void WebKit::WebPage::performHitTestForMouseEvent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebKit::WebHitTestResultData *v12;
  CFTypeRef *v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef *v16;
  WTF::StringImpl *v17;
  CFTypeRef *v18;
  WTF::StringImpl *v19;
  WebKit::WebProcess *v20;
  CFTypeRef *v21;
  void *v22;
  char v23;
  WTF::StringImpl *v24;
  WebKit::WebHitTestResultData *v25[17];
  _OWORD v26[6];
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int16 v56;
  _QWORD v57[7];

  v57[6] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 1);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160) + 144))
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v5)
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (*(_QWORD *)(v5 + 288))
    {
      WebKit::WebKit2PlatformMouseEvent::WebKit2PlatformMouseEvent((uint64_t)&v31, a2);
      v26[0] = v31;
      v26[1] = v32;
      v26[2] = v33;
      v26[3] = v34;
      v26[4] = v35[0];
      v26[5] = v35[1];
      v27 = v36;
      v30 = v39;
      v28 = v37;
      v29 = v38;
      WebCore::EventHandler::getHitTestResultForMouseEvent();
      v10 = v28;
      v28 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v24 = 0;
      v23 = 0;
      WebCore::Chrome::getToolTip();
      v22 = 0;
      WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)&v31, v25, (const WTF::String *)&v24);
      (*(void (**)(_QWORD, uint64_t, WebKit::WebHitTestResultData **, uint64_t, void **))(**(_QWORD **)(a1 + 376)
                                                                                                 + 64))(*(_QWORD *)(a1 + 376), a1, v25, v4, &v22);
      {
        v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v20);
      }
      *(_QWORD *)&v26[0] = &off_1E34E0698;
      WebKit::UserData::transform(v22, (uint64_t)v26, (WebKit **)&v21);
      v13 = v21;
      if (v21)
        CFRetain(v21[1]);
      *(_QWORD *)&v26[0] = v13;
      v14 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, __int128 *, uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, &v31, v4, v26);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = *(_QWORD *)&v26[0];
      *(_QWORD *)&v26[0] = 0;
      if (v15)
        CFRelease(*(CFTypeRef *)(v15 + 8));
      v16 = v21;
      v21 = 0;
      if (v16)
        CFRelease(v16[1]);
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&v31);
      v18 = (CFTypeRef *)v22;
      v22 = 0;
      if (v18)
        CFRelease(v18[1]);
      v19 = v24;
      v24 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      MEMORY[0x19AEADBAC](v25);
LABEL_31:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
      return;
    }
  }
  *(_QWORD *)((char *)v35 + 12) = 0;
  *(_QWORD *)((char *)v35 + 4) = 0;
  LOBYTE(v36) = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v51 = 0;
  v46 = 0;
  v52 = 1065353216;
  v56 = 0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0;
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v57);
  v57[5] = 0;
  v25[0] = 0;
  v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, __int128 *, uint64_t, WebKit::WebHitTestResultData **))(*(_QWORD *)v11 + 16))(v11, &v31, v4, v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v25[0];
  v25[0] = 0;
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
  WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&v31);
  if (v5)
    goto LABEL_31;
}

unsigned __int8 *WebKit::WebPage::handleWheelEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _BOOL8 v16;
  char v17;
  char v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  _BYTE v31[23];
  int v32;
  uint64_t v33[2];
  char v34;
  _BYTE v35[23];
  char v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE v40[23];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v33[0] = a2;
  v33[1] = a3;
  v11 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(a1 + 48));
  if (!v11 || (v12 = v11, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11)))
  {
    WebKit::WebPage::wheelEvent(a1, v33, a4, (uint64_t)&v30);
    v17 = v32;
    if (v32 == 1)
    {
      v19 = 0;
      v17 = v30;
      v39[0] = *(_OWORD *)v31;
      *(_QWORD *)((char *)v39 + 15) = *(_QWORD *)&v31[15];
      v18 = 1;
    }
    else
    {
      if (v32)
        goto LABEL_14;
      v18 = 0;
      v19 = v30 != 0;
    }
    v20 = *a7;
    *a7 = 0;
    LOBYTE(v37) = 0;
    LOBYTE(v38) = 0;
    v34 = v17;
    *(_OWORD *)v35 = v39[0];
    *(_QWORD *)&v35[15] = *(_QWORD *)((char *)v39 + 15);
    v36 = v18;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _BOOL8, char *))(*(_QWORD *)v20 + 16))(v20, &v37, 0, v19, &v34);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 8));
  *(_WORD *)(v12 + 217) = a6;
  WebKit::WebPage::wheelEvent(a1, v33, a4, (uint64_t)&v30);
  v28 = *(_OWORD *)(v12 + 184);
  v29 = *(_QWORD *)(v12 + 200);
  v13 = *(unsigned __int16 *)(v12 + 208);
  *(_BYTE *)(v12 + 184) = 0;
  *(_BYTE *)(v12 + 200) = 0;
  *(_WORD *)(v12 + 208) = 0;
  v14 = v32;
  if (v32 == 1)
  {
    v16 = 0;
    v14 = v30;
    *(_OWORD *)v40 = *(_OWORD *)v31;
    *(_QWORD *)&v40[15] = *(_QWORD *)&v31[15];
    v15 = 1;
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_14:
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebKit::WebPage::wheelEvent(v24, v25, v26, v27);
  }
  v15 = 0;
  v16 = v30 != 0;
LABEL_12:
  v22 = *a7;
  *a7 = 0;
  v37 = v28;
  v38 = v29;
  v34 = v14;
  *(_OWORD *)v35 = *(_OWORD *)v40;
  *(_QWORD *)&v35[15] = *(_QWORD *)&v40[15];
  v36 = v15;
  (*(void (**)(uint64_t, __int128 *, uint64_t, _BOOL8, char *))(*(_QWORD *)v22 + 16))(v22, &v37, v13, v16, &v34);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 8), v23);
}

uint64_t WebKit::WebPage::wheelEvent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  _QWORD v13[18];

  v13[17] = *MEMORY[0x1E0C80C00];
  PAL::HysteresisActivity::impulse((_BYTE *)(a1 + 1840));
  v7 = WebKit::g_currentEvent;
  WebKit::g_currentEvent = a3;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  result = WebKit::WebProcess::webFrame((uint64_t)v8, *a2, a2[1]);
  if (result
    && (v10 = *(_QWORD *)(result + 24)) != 0
    && (v11 = *(_QWORD *)(v10 + 8)) != 0
    && !*(_BYTE *)(v11 + 144)
    && *(_QWORD *)(v11 + 288))
  {
    WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v13, a3);
    result = WebCore::EventHandler::handleWheelEvent();
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 0;
  }
  WebKit::g_currentEvent = v7;
  return result;
}

unsigned int *WebKit::WebPage::dispatchWheelEventWithoutScrolling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *result;
  _BYTE v13[24];
  int v14;
  uint64_t v15[2];

  v15[0] = a2;
  v15[1] = a3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160) + 144))
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  WebKit::WebPage::wheelEvent(a1, v15, a4, (uint64_t)v13);
  if (v14)
    v9 = 1;
  else
    v9 = v13[0] == 0;
  v10 = !v9;
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v6)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  return result;
}

IPC::Encoder *WebKit::WebPage::keyEvent(uint64_t a1, uint64_t a2, uint64_t a3, WebKit *a4)
{
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebKit::WebProcess *v11;
  WebKit::WebFrame *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  WebKit::WebProcess *v20;
  _BYTE v21[8];
  _BYTE *v22;
  IPC::Encoder *v23;
  _BYTE v24[120];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = *(_BYTE *)(a1 + 912);
  *(_BYTE *)(a1 + 912) = 1;
  PAL::HysteresisActivity::impulse((_BYTE *)(a1 + 1840));
  WebKit::platform(a4, (uint64_t)v24);
  WebCore::PlatformKeyboardEvent::setCurrentModifierState();
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v24, v9);
  v10 = WebKit::g_currentEvent;
  WebKit::g_currentEvent = (uint64_t)a4;
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame((uint64_t)v11, a2, a3);
  if (v12)
    LOBYTE(v12) = WebKit::WebFrame::handleKeyEvent(v12, a4);
  v13 = *(_BYTE *)a4;
  v24[0] = 0;
  v24[24] = 0;
  v21[0] = v13;
  v21[1] = (_BYTE)v12;
  v22 = v24;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 1907;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v23 = (IPC::Encoder *)v15;
  IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v15, (uint64_t)v21);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32, &v23, 0);
  result = v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    result = (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  WebKit::g_currentEvent = v10;
  *(_BYTE *)(a1 + 912) = v8;
  return result;
}

uint64_t WebKit::WebPage::handleKeyEventByRelinquishingFocusToChrome(WebKit::WebPage *this, const WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  _DWORD *v5;

  if (*(_BYTE *)(*((_QWORD *)this + 6) + 338)
    || WebCore::KeyboardEvent::charCode(a2) != 9
    || (*((_BYTE *)a2 + 84) & 0xE) != 8)
  {
    return 0;
  }
  WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
  result = WebCore::FocusController::relinquishFocusToChrome();
  if (v5)
  {
    if (*v5)
    {
      --*v5;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::validateCommand(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  WebKit::WebPage *v5;
  WebCore::LocalFrame *v6;
  WebKit::WebPage *v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::FocusController *v10;
  WebKit::PluginView *v11;
  uint64_t isEditingCommandEnabled;
  _BOOL8 v13;
  uint64_t v14;
  WebCore::Editor *v16;
  uint64_t v17;
  WebCore::Node *v18;
  uint64_t v19;
  WebCore::FocusController *v20;
  WebCore::Node *v21;
  uint64_t v22;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v5 = (WebKit::WebPage *)WebCore::FocusController::focusedOrMainFrame(v20);
  v7 = v5;
  if (v5)
  {
    v8 = (unsigned int *)((char *)v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1977ABFFCLL);
    }
    --*(_DWORD *)v10;
  }
  if (v5)
  {
    v11 = (WebKit::PluginView *)WebKit::WebPage::focusedPluginViewForFrame(v5, v6);
    if (v11)
    {
      isEditingCommandEnabled = WebKit::PluginView::isEditingCommandEnabled(v11, a2);
      v13 = 0;
    }
    else
    {
      v16 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v7 + 37));
      WebCore::Editor::command(v16, a2);
      v13 = WebCore::Editor::Command::state() != 0;
      if (WebCore::Editor::Command::isSupported((WebCore::Editor::Command *)&v20))
        isEditingCommandEnabled = WebCore::Editor::Command::isEnabled();
      else
        isEditingCommandEnabled = 0;
      v17 = v22;
      v22 = 0;
      if (v17)
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
      v18 = v21;
      v21 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
    }
    v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v19 + 16))(v19, isEditingCommandEnabled, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v7 + 2);
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

uint64_t WebKit::WebPage::setCurrentHistoryItemForReattach(uint64_t *a1, __int128 *a2)
{
  _DWORD *v4;
  uint64_t result;
  BOOL v6;
  _DWORD *v7;
  _DWORD *v8;

  WebKit::toHistoryItem(a1[303], a2, (uint64_t *)&v8);
  v4 = v8;
  WebKit::WebBackForwardListProxy::addItemFromUIProcess(*(_QWORD *)(*(_QWORD *)(a1[6] + 136) + 16), a2, &v8, a1[5], 1);
  result = *(_QWORD *)(a1[6] + 160);
  if (result)
    v6 = *(_BYTE *)(result + 144) == 0;
  else
    v6 = 0;
  if (v6)
  {
    WebCore::Frame::checkedHistory((WebCore::Frame *)result);
    ++*v4;
    WebCore::HistoryController::setCurrentItem();
    if (v4)
      WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
    if (v7)
    {
      if (!*v7)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*v7;
    }
    return (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
  }
  if (v4)
    return (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref(v4);
  return result;
}

void WebKit::WebPage::requestFontAttributesAtSelectionStart(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  WebCore::FocusController *v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::FocusController *v24[2];
  __int128 v25;
  __int128 v26;
  __int16 v27;
  _QWORD v28[3];

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v24[0]);
  v4 = v3;
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v24[0];
  v24[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      return;
    }
    --*(_DWORD *)v7;
  }
  if (v3)
  {
    v8 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
    WebCore::Editor::fontAttributesAtSelectionStart(v8);
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v9 + 16))(v9, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v10);
    if ((*((_QWORD *)&v25 + 1) & 0x8000000000000) != 0)
    {
      v15 = (unsigned int *)(*((_QWORD *)&v25 + 1) & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v11);
      }
    }
    if ((v25 & 0x8000000000000) != 0)
    {
      v18 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v11);
      }
    }
    if (((unint64_t)v24[1] & 0x8000000000000) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v24[1] & 0xFFFFFFFFFFFFLL);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v11);
      }
    }
    v12 = v24[0];
    v24[0] = 0;
    if (v12)
      WTF::RefCounted<WebCore::Font>::deref(v12);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    *(_OWORD *)v24 = 0u;
    memset(v28, 0, 19);
    v13 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v13 + 16))(v13, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)v24, v14);
  }
}

void WebKit::WebPage::cancelCurrentInteractionInformationRequest(WebKit::WebPage *this)
{
  uint64_t v1;
  double v2;
  void *v3;
  _QWORD v4[82];

  v4[81] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v1)
  {
    v2 = WebKit::InteractionInformationAtPosition::invalidInformation((uint64_t)v4);
    (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v1 + 16))(v1, v4, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v4, v3);
  }
}

double WebKit::InteractionInformationAtPosition::invalidInformation@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 7) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 11) = 1;
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 21) = 0;
  *(_BYTE *)(a1 + 23) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 54) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 72));
  *(_QWORD *)(a1 + 112) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 112));
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_WORD *)(a1 + 386) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

unsigned int *WebKit::WebPage::dispatchTouchEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  WTF *v20;
  BOOL v21;
  int v22;
  unsigned int *result;
  WebKit::WebProcess *v24;
  uint64_t v25;
  WTF *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = *(_BYTE *)(a1 + 912);
  *(_BYTE *)(a1 + 912) = 1;
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a4 + 48);
  v11 = WebKit::g_currentEvent;
  WebKit::g_currentEvent = a4;
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v24);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = WebKit::WebProcess::webFrame((uint64_t)v12, a2, a3);
  if (v13)
  {
    v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    v15 = *(_QWORD *)(v14 + 24);
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0 && !*(_BYTE *)(v16 + 144))
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      if (*(_QWORD *)(v16 + 288))
      {
        WebKit::platform(a4, (uint64_t)&v25);
        WebCore::EventHandler::handleTouchEvent();
        v20 = v26;
        if (v26)
        {
          v26 = 0;
          v27 = 0;
          WTF::fastFree(v20, v19);
        }
      }
      else
      {
        *(_BYTE *)a5 = 0;
        *(_DWORD *)(a5 + 24) = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
    }
    else
    {
      *(_BYTE *)a5 = 0;
      *(_DWORD *)(a5 + 24) = 0;
    }
    CFRelease(*(CFTypeRef *)(v14 + 8));
    if (*(_DWORD *)(a5 + 24))
      v21 = 1;
    else
      v21 = *(_BYTE *)a5 == 0;
    v22 = !v21;
  }
  else
  {
    v22 = 0;
    *(_BYTE *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }
  result = WebKit::WebPage::updatePotentialTapSecurityOrigin((unsigned int *)a1, (_BYTE *)a4, v22);
  WebKit::g_currentEvent = v11;
  *(_BYTE *)(a1 + 912) = v10;
  return result;
}

unsigned int *WebKit::WebPage::updatePotentialTapSecurityOrigin(unsigned int *result, _BYTE *a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  uint64_t v21;

  if (!a3 && a2[57] && *a2 == 11)
  {
    v4 = result;
    v5 = *(_QWORD *)(*((_QWORD *)result + 6) + 160);
    if (v5 && *(_BYTE *)(v5 + 144) == 0)
    {
      v7 = (unsigned int *)(v5 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v9 = *(_QWORD *)(v5 + 296);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 24);
        *(_DWORD *)(v9 + 24) = v10 + 2;
        if (*(_BYTE *)(v9 + 673))
        {
          do
            v11 = __ldaxr(v7);
          while (__stlxr(v11 + 1, v7));
          v12 = *(_QWORD *)(v5 + 640);
          v13 = *(_QWORD *)(v12 + 768);
          if (v13 && !*(_BYTE *)(v13 + 144))
          {
            do
            {
              v14 = v13;
              v15 = (unsigned int *)(v13 + 8);
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 + 1, v15));
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
              v12 = *(_QWORD *)(v14 + 640);
              v13 = *(_QWORD *)(v12 + 768);
              if (!v13)
                break;
              v5 = v14;
            }
            while (!*(_BYTE *)(v13 + 144));
          }
          else
          {
            v14 = v5;
          }
          if (*(_DWORD *)(v12 + 764))
          {
            v17 = *(_QWORD *)(v14 + 296);
            if (v17)
            {
              v18 = (unsigned int *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v17 + 192));
              if (v18)
              {
                do
                  v20 = __ldaxr(v18);
                while (__stlxr(v20 + 1, v18));
              }
              v21 = *((_QWORD *)v4 + 160);
              *((_QWORD *)v4 + 160) = v18;
              if (v21)
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v21, v19);
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
          v10 = *(_DWORD *)(v9 + 24) - 2;
        }
        if (v10)
        {
          *(_DWORD *)(v9 + 24) = v10;
        }
        else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::scroll(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  result = WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)(a1 + 72));
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    v4 = WebCore::EventHandler::scrollRecursively();
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
    return v4;
  }
  return result;
}

uint64_t WebKit::WebPage::centerSelectionInVisibleArea(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v6);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    WebCore::FrameSelection::revealSelection();
    WebKit::FindController::updateFindIndicator(this[56], 0, 1);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::insertNewlineInQuotedContent(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::Document *v5;
  WebCore::Editor *v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v5 = *(WebCore::Document **)(result + 296);
    if (*(_BYTE *)(*((_QWORD *)v5 + 383) + 153))
    {
      v6 = (WebCore::Editor *)WebCore::Document::editor(v5);
      WebCore::Editor::insertParagraphSeparatorInQuotedContent(v6);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::viewWillStartLiveResize(WebKit::WebPage *this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::LocalFrameView *v5;
  WebCore::FocusController *v6;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    WebCore::Page::checkedFocusController((WebCore::Page *)result);
    result = WebCore::FocusController::focusedOrMainFrame(v6);
    v2 = result;
    if (result)
    {
      v3 = (unsigned int *)(result + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
    if (v6)
    {
      if (!*(_DWORD *)v6)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v6;
    }
    if (result)
    {
      v5 = *(WebCore::LocalFrameView **)(result + 288);
      if (v5)
      {
        ++*((_DWORD *)v5 + 2);
        WebCore::LocalFrameView::willStartLiveResize(v5);
        if (*((_DWORD *)v5 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v5 + 8))(v5);
        else
          --*((_DWORD *)v5 + 2);
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
  }
  return result;
}

uint64_t WebKit::WebPage::viewWillEndLiveResize(WebKit::WebPage *this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::LocalFrameView *v5;
  WebCore::FocusController *v6;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    WebCore::Page::checkedFocusController((WebCore::Page *)result);
    result = WebCore::FocusController::focusedOrMainFrame(v6);
    v2 = result;
    if (result)
    {
      v3 = (unsigned int *)(result + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
    if (v6)
    {
      if (!*(_DWORD *)v6)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v6;
    }
    if (result)
    {
      v5 = *(WebCore::LocalFrameView **)(result + 288);
      if (v5)
      {
        ++*((_DWORD *)v5 + 2);
        WebCore::LocalFrameView::willEndLiveResize(v5);
        if (*((_DWORD *)v5 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v5 + 8))(v5);
        else
          --*((_DWORD *)v5 + 2);
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::setInitialFocus(uint64_t a1, uint64_t a2, int a3, WebKit *a4, uint64_t *a5)
{
  uint64_t v6;
  char v10;
  WebCore::FocusController *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::WindowProxy *v16;
  uint64_t v17;
  unsigned int *result;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WebCore::WindowProxy *v23;
  _DWORD *v24;
  _BYTE v25[120];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    v10 = *(_BYTE *)(a1 + 912);
    *(_BYTE *)(a1 + 912) = 1;
    v11 = *(WebCore::FocusController **)(v6 + 72);
    ++*(_DWORD *)v11;
    v12 = WebCore::FocusController::focusedOrMainFrame(v11);
    if (v12)
    {
      v13 = v12;
      v14 = (unsigned int *)(v12 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      WebCore::Document::setFocusedElement(*(WebCore::Document **)(v12 + 296), 0);
      if (a3 && *((_BYTE *)a4 + 96) && *(_BYTE *)a4 == 7)
      {
        WebKit::platform(a4, (uint64_t)v25);
        WebCore::PlatformKeyboardEvent::disambiguateKeyDownEvent();
        v16 = *(WebCore::WindowProxy **)(v13 + 112);
        ++*(_DWORD *)v16;
        v23 = v16;
        WebCore::KeyboardEvent::create();
        WebCore::FocusController::setInitialFocus();
        if (v24)
        {
          if (v24[4] == 1)
            (*(void (**)())(*(_QWORD *)v24 + 8))();
          else
            --v24[4];
        }
        if (v23)
          WTF::RefCounted<WebCore::WindowProxy>::deref(v23);
        v20 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v25, v21);
      }
      else
      {
        WebCore::FocusController::setInitialFocus();
        v19 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
    }
    else
    {
      v22 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1977ACDB8);
    }
    --*(_DWORD *)v11;
    *(_BYTE *)(a1 + 912) = v10;
  }
  else
  {
    v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

_QWORD *WebKit::WebPage::windowActivityDidChange(WebKit::WebPage *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 160;
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 20, &v12);
  v3 = *((_QWORD *)this + 20);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    v4 = v3 + 8 * v5;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v7 = v2;
  v8 = v4;
  v9 = v4;
  v10 = v4;
  v11 = v3 + 8 * v5;
  result = WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    WebKit::PluginView::windowActivityDidChange(*(WebKit::PluginView **)(*(_QWORD *)v13 + 8));
    result = WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

uint64_t WebKit::WebPage::didStartPageTransition(WebKit::WebPage *this)
{
  uint64_t result;

  result = WebKit::WebPage::freezeLayerTree((uint64_t)this, 1);
  *((_DWORD *)this + 507) = 2;
  *((_BYTE *)this + 1256) = 0;
  *((_BYTE *)this + 1259) = 0;
  return result;
}

IPC::Encoder *WebKit::WebPage::show(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2061;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebPage::setIsTakingSnapshotsForApplicationSuspension(WebKit::WebPage *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebKit::WebPage *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71730;
  if (os_log_type_enabled((os_log_t)qword_1ECE71730, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 5);
    v7 = 134218496;
    v8 = this;
    v9 = 2048;
    v10 = v5;
    v11 = 1024;
    v12 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::setIsTakingSnapshotsForApplicationSuspension(%d)", (uint8_t *)&v7, 0x1Cu);
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
    *(_BYTE *)(v6 + 1680) = a2;
}

unsigned int *WebKit::WebPage::setNeedsDOMWindowResizeEvent(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 160);
    if (v2 && *(_BYTE *)(v2 + 144) == 0)
    {
      v4 = (unsigned int *)(v2 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(_QWORD *)(v2 + 296);
      if (v6)
      {
        *(_DWORD *)(v6 + 24) += 2;
        WebCore::Document::setNeedsDOMWindowResizeEvent((WebCore::Document *)v6);
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::suspend(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::BackForwardCache *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE v19[12];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[5];
    v7 = a1[6];
    *(_DWORD *)v19 = 134218496;
    *(_QWORD *)&v19[4] = a1;
    v20 = 2048;
    v21 = v6;
    v22 = 2048;
    v23 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::suspend: m_page=%p", v19, 0x20u);
  }
  if (a1[6])
  {
    v8 = (WebCore::BackForwardCache *)WebKit::WebPage::freezeLayerTree((uint64_t)a1, 8);
    WebCore::BackForwardCache::singleton(v8);
    WebCore::BackForwardCache::suspendPage();
    v10 = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0;
    v11 = a1[298];
    a1[298] = v10;
    if (v11)
    {
      v9.n128_f64[0] = WebCore::CachedPage::operator delete();
      v12 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      if (v12)
        v9.n128_f64[0] = WebCore::CachedPage::operator delete();
    }
    v13 = *(_QWORD *)(a1[11] + 24);
    if (v13)
    {
      v14 = *(unsigned int **)(v13 + 8);
      if (v14)
      {
        if (!*((_BYTE *)v14 + 144))
        {
          v15 = v14 + 2;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          WebCore::Frame::detachFromAllOpenedFrames((WebCore::Frame *)v14);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
        }
      }
    }
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v17 + 16))(v17, 1, v9);
  }
  else
  {
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v17 + 16))(v17, 0, v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

void WebKit::WebPage::resume(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[5];
    v6 = a1[6];
    v10 = 134218496;
    v11 = a1;
    v12 = 2048;
    v13 = v5;
    v14 = 2048;
    v15 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::resume: m_page=%p", (uint8_t *)&v10, 0x20u);
  }
  if (a1[6] && (v7 = a1[298], a1[298] = 0, v7))
  {
    WebCore::CachedPage::restore();
    WebKit::WebPage::unfreezeLayerTree((uint64_t)a1, 8);
    v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    WebCore::CachedPage::operator delete();
  }
  else
  {
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

char *WebKit::WebPage::screenToRootView(WebKit::WebPage *this, const WebCore::IntPoint *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v7;
  char v8[8];
  char *v9;
  int v10;

  v7 = a2;
  v2 = (char *)this + 32;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 48))(v2);
  if (v4)
  {
    IPC::Connection::sendSync<Messages::WebPageProxy::ScreenToRootView>(v4, &v7, v3, 0, (uint64_t)v8, INFINITY);
    v5 = v10;
    if (v10 == -1)
      return 0;
    v2 = v9;
  }
  else
  {
    v8[0] = 3;
    v5 = 1;
    v10 = 1;
  }
  ((void (*)(_DWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16ScreenToRootViewEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  if (v5)
    return 0;
  else
    return v2;
}

char *WebKit::WebPage::rootViewToScreen(WebKit::WebPage *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  uint64_t *v11;
  char v12[8];
  char *v13;
  int v14;

  v10[0] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits(a2);
  v10[1] = v3;
  v11 = v10;
  v5 = *((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
  v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 48))(v4);
  if (!v7)
  {
    v12[0] = 3;
    v8 = 1;
    v14 = 1;
    goto LABEL_5;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToScreen>(v7, &v11, v6, 0, (uint64_t)v12, INFINITY);
  v8 = v14;
  v4 = v13;
  if (v14 != -1)
LABEL_5:
    ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16RootViewToScreenEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v8])(v10, v12);
  if (v8)
    return 0;
  else
    return v4;
}

char *WebKit::WebPage::accessibilityScreenToRootView(WebKit::WebPage *this, const WebCore::IntPoint *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v7;
  char v8[8];
  char *v9;
  int v10;

  v7 = a2;
  v2 = (char *)this + 32;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 48))(v2);
  if (v4)
  {
    IPC::Connection::sendSync<Messages::WebPageProxy::AccessibilityScreenToRootView>(v4, &v7, v3, 0, (uint64_t)v8, INFINITY);
    v5 = v10;
    if (v10 == -1)
      return 0;
    v2 = v9;
  }
  else
  {
    v8[0] = 3;
    v5 = 1;
    v10 = 1;
  }
  ((void (*)(_DWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  if (v5)
    return 0;
  else
    return v2;
}

char *WebKit::WebPage::rootViewToAccessibilityScreen(WebKit::WebPage *this, const WebCore::IntRect *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v7;
  char v8[8];
  char *v9;
  int v10;

  v7 = (uint64_t *)a2;
  v2 = (char *)this + 32;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 48))(v2);
  if (!v4)
  {
    v8[0] = 3;
    v5 = 1;
    v10 = 1;
    goto LABEL_5;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToAccessibilityScreen>(v4, &v7, v3, 0, (uint64_t)v8, INFINITY);
  v5 = v10;
  v2 = v9;
  if (v10 != -1)
LABEL_5:
    ((void (*)(uint64_t **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  if (v5)
    return 0;
  else
    return v2;
}

uint64_t WebKit::WebPage::keyboardUIMode(WebKit::WebPage *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebPage *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((unsigned __int8 *)v1 + 256) | (*((unsigned __int8 *)this + 187) << 28);
}

void WebKit::WebPage::runJavaScript(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  NSObject *v25;
  WebCore *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE buf[22];
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v7 = *(_QWORD *)(a2 + 24)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || *(_BYTE *)(v8 + 144))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)&buf[8] = 0;
    buf[16] = 1;
    v37 = 0;
LABEL_6:
    v38 = 1;
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v9 + 16))(v9, 0, 0, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v10);
    return;
  }
  v13 = WebKit::WebUserContentController::worldForIdentifier(*(WebKit **)(a1 + 624), a4);
  if (!v13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v37 = 0;
    *(_QWORD *)&buf[8] = 0;
    buf[16] = 0;
    goto LABEL_6;
  }
  v14 = v13;
  CFRetain(*(CFTypeRef *)(v13 + 8));
  if (!WebKit::WebFrame::shouldEnableInAppBrowserPrivacyProtections((WebKit::WebFrame *)a2))
  {
    if (*(_BYTE *)(a1 + 912))
    {
      v23 = 1;
      v24 = 1;
    }
    else if (*(_BYTE *)(a3 + 80))
    {
      v24 = WTF::linkedOnOrAfterSDKWithBehavior();
      v23 = *(_BYTE *)(a1 + 912);
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
    *(_BYTE *)(a1 + 912) = v24;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v26 = (WebCore *)CFRetain(*(CFTypeRef *)(a2 + 8));
    v27 = *(_QWORD *)(a2 + 24);
    if (v27 && (v28 = *(_QWORD *)(v27 + 8)) != 0)
    {
      if (*(_BYTE *)(v28 + 144))
        v29 = 0;
      else
        v29 = v28;
    }
    else
    {
      v29 = 0;
    }
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    v32 = *a5;
    *a5 = 0;
    if (!*MEMORY[0x1E0DD1108])
      WebCore::commonVMSlow(v26);
    MEMORY[0x19AEAA9D8](buf);
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v33 = &off_1E34FA3F0;
    v33[1] = v14;
    v33[2] = a2;
    v33[3] = v29;
    v33[4] = v32;
    v35 = v33;
    WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld();
    if (v35)
      (*(void (**)(_QWORD *))(*v35 + 8))(v35);
    MEMORY[0x19AEAA9E4](buf);
    *(_BYTE *)(a1 + 912) = v23;
    goto LABEL_42;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)&buf[8] = 0;
  buf[16] = 2;
  v37 = 0;
  v38 = 1;
  v15 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v15 + 16))(v15, 0, 0, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v16);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160) + 144))
    v17 = 0;
  else
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = *(_QWORD *)(v17 + 296);
    if (v20)
    {
      *(_DWORD *)(v20 + 24) += 2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::Document::addConsoleMessage();
      v22 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
  }
  v25 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
  {
    v34 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v34;
    _os_log_error_impl(&dword_196BCC000, v25, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::runJavaScript: Ignoring user script injection for non app-bound domain", buf, 0x16u);
    if (!v17)
      goto LABEL_42;
    goto LABEL_28;
  }
  if (v17)
LABEL_28:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
LABEL_42:
  CFRelease(*(CFTypeRef *)(v14 + 8));
}

void WebKit::WebPage::runJavaScriptInFrameInScriptWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  WebKit::WebProcess *v31;
  _BYTE v32[12];
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE71C68;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a3 + 16))
      v13 = *(_QWORD *)a3;
    else
      v13 = 0;
    *(_DWORD *)v32 = 134218496;
    *(_QWORD *)&v32[4] = a1;
    v33 = 2048;
    v34 = v12;
    v35 = 2048;
    v36 = v13;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::runJavaScriptInFrameInScriptWorld: frameID=%llu", v32, 0x20u);
  }
  if (*(_BYTE *)(a3 + 16))
  {
    v31 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v11);
    if (!*(_BYTE *)(a3 + 16))
      __break(1u);
    v14 = WebKit::WebProcess::webFrame((uint64_t)v31, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 88);
  }
  if (v14)
    CFRetain(*(CFTypeRef *)(v14 + 8));
  v15 = WebKit::WebUserContentController::addContentWorld(*(WebKit **)(a1 + 624), a4);
  if (v15)
  {
    v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    v17 = *(_QWORD *)(a1 + 48);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 160);
      if (v18)
      {
        v19 = *(_QWORD *)(v16 + 24);
        v20 = (unsigned int *)(v18 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        while (1)
        {
          if (!*(_BYTE *)(v18 + 144))
          {
            v25 = (unsigned int *)(v18 + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 + 1, v25));
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 280) + 16) + 1000))(*(_QWORD *)(*(_QWORD *)(v18 + 280) + 16), v19);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
          }
          v27 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v18 + 48), 0);
          if (!v27)
            break;
          v22 = v27;
          v23 = (unsigned int *)(v27 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
          v18 = v22;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
      }
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  v28 = *a4;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v29 = *a5;
  *a5 = 0;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v30 = &off_1E34FA438;
  v30[1] = a1;
  v30[2] = a1;
  v30[3] = v29;
  *(_QWORD *)v32 = v30;
  WebKit::WebPage::runJavaScript(a1, v14, a2, v28, (uint64_t *)v32);
  if (*(_QWORD *)v32)
    (*(void (**)(_QWORD))(**(_QWORD **)v32 + 8))(*(_QWORD *)v32);
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
}

WTF::StringImpl *WebKit::WebPage::getContentsAsString(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  int64x2_t v14;
  int64x2_t v15;
  WebKit::WebFrame *v16;
  int32x2_t v17;
  int64x2_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t Rendered;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  WebKit::WebFrame *v29;
  WTF::StringImpl *v30[2];
  int v31;
  char v32;

  if ((a2 & 1) != 0)
  {
    v30[0] = 0;
    v30[1] = 0;
    v31 = 0;
    v32 = 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (!*(_BYTE *)(v8 + 144))
        {
          v12 = (unsigned int *)(v8 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          v14 = vdupq_n_s64(3uLL);
          v14.i64[0] = (uint64_t)"\n\n";
          v26 = (int8x16_t)v14;
          v15 = vdupq_n_s64(1uLL);
          v15.i64[0] = (uint64_t)"";
          v25 = (int8x16_t)v15;
          while (1)
          {
            WebKit::WebFrame::fromCoreFrame(v8, &v29);
            v16 = v29;
            if (v29)
            {
              v17 = vdup_n_s32(v31 == 0);
              v18.i64[0] = v17.u32[0];
              v18.i64[1] = v17.u32[1];
              *(int8x16_t *)v28 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), v25, v26);
              WebKit::WebFrame::contentsAsString((unsigned int *)v29, &v27);
              WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)v30, (uint64_t)v28, (uint64_t *)&v27);
              v20 = v27;
              v27 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v19);
                else
                  *(_DWORD *)v20 -= 2;
              }
              CFRelease(*((CFTypeRef *)v16 + 1));
            }
            Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v8 + 48), 0);
            if (!Rendered)
              break;
            v22 = Rendered;
            v23 = (unsigned int *)(Rendered + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
            v8 = v22;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
        }
      }
    }
    WTF::StringBuilder::toString((WTF::StringBuilder *)v30, v28);
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = v28[0];
    v28[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return (WTF::StringImpl *)WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v30, v10);
  }
  else
  {
    WebKit::WebFrame::contentsAsString(*(unsigned int **)(a1 + 88), v30);
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = v30[0];
    v30[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::getRenderTreeExternalRepresentation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WebCore::externalRepresentation();
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPage::getSelectionAsWebArchiveData(uint64_t a1, WebCore::Page *a2)
{
  WebCore::LegacyWebArchive *v3;
  WebCore::LocalFrame *v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FragmentedSharedBuffer *v7;
  WebCore::LegacyWebArchive *v8;
  const __CFData *v9;
  unsigned int *v10;
  WebCore::LegacyWebArchive *v11;
  void *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned int *v21;
  unsigned int *v22;
  WebCore::LegacyWebArchive *v23;
  unsigned int *v24;
  unsigned int *v25;
  char v26;
  WebCore::FragmentedSharedBuffer *v27;
  uint64_t v28;
  WebCore::LegacyWebArchive *v29;
  unsigned int *v30;
  unsigned int *v31;

  v3 = (WebCore::LegacyWebArchive *)WebKit::frameWithSelection(*(WebKit **)(a1 + 48), a2);
  if (!v3)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
LABEL_19:
    v7 = 0;
    v14 = 0;
    v23 = 0;
    goto LABEL_20;
  }
  v5 = (unsigned int *)((char *)v3 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::LegacyWebArchive::createFromSelection(v3, v4);
  WebCore::LegacyWebArchive::rawDataRepresentation(v29);
  v7 = v23;
  v23 = 0;
  v8 = v29;
  v29 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
      (*(void (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 2);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  if (!v7)
    goto LABEL_19;
  v27 = v7;
  WebCore::SharedBuffer::create<__CFData const*>(&v27, v9, &v28);
  v10 = (unsigned int *)v28;
  v11 = *(WebCore::LegacyWebArchive **)(v28 + 48);
  v28 = 0;
  v23 = v11;
  v24 = v10;
  v25 = 0;
  IPC::SharedBufferReference::operator=(&v29, (uint64_t *)&v23);
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v25);
  if (v24)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v12);
  v13 = (unsigned int *)v28;
  v28 = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v12);
  v14 = v30;
  v23 = v29;
  if (v30)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
LABEL_20:
  v24 = v14;
  v16 = v31;
  if (v31)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v25 = v16;
  v26 = 1;
  v18 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t, WebCore::LegacyWebArchive **))(*(_QWORD *)v18 + 16))(v18, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v19);
  v21 = v31;
  v31 = 0;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v21);
  v22 = v30;
  v30 = 0;
  if (v22)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v20);
  if (v7)
    CFRelease(v7);
}

uint64_t WebKit::frameWithSelection(WebKit *this, WebCore::Page *a2)
{
  uint64_t result;

  for (result = *((_QWORD *)this + 20);
        result;
        result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(result + 48), 0))
  {
    if (!*(_BYTE *)(result + 144) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064) + 153) == 2)
      break;
  }
  return result;
}

_QWORD *IPC::SharedBufferReference::operator=(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;

  v4 = *a2;
  v5 = a2[1];
  a2[1] = 0;
  v6 = (unsigned int *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
  v7 = a2[2];
  a2[2] = 0;
  v8 = (unsigned int *)a1[2];
  a1[2] = v7;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
  return a1;
}

void IPC::SharedBufferReference::~SharedBufferReference(IPC::SharedBufferReference *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
}

uint64_t WebKit::WebPage::copyLinkToHighlight(WebCore::Page **this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WebCore::Editor *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;

  WebCore::Page::fragmentDirectiveURLForSelectedText(this[6]);
  WebCore::Page::checkedFocusController(this[6]);
  v2 = WebCore::FocusController::focusedOrMainFrame(v12);
  v4 = v2;
  if (v2)
  {
    v5 = (unsigned int *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (v2)
  {
    if ((v14 & 1) != 0)
    {
      v8 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v2 + 296));
      v12 = 0;
      WebCore::Editor::copyURL(v8, (const WTF::URL *)&v13, (const WTF::String *)&v12);
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPage::getSelectionOrContentsAsString(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  WebCore::FocusController *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::FocusController *v19;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v19);
  v4 = v3;
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v19;
  v19 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      return;
    }
    --*(_DWORD *)v7;
  }
  if (v3)
  {
    WebKit::WebFrame::fromCoreFrame(v3, &v19);
    v8 = v19;
  }
  else
  {
    v8 = 0;
  }
  WebKit::WebFrame::selectionAsString((unsigned int *)v8, &v18);
  if (!v18 || !*((_DWORD *)v18 + 1))
  {
    WebKit::WebFrame::contentsAsString((unsigned int *)v8, &v17);
    v11 = v17;
    v10 = v18;
    v17 = 0;
    v18 = v11;
    if (v10)
    {
      v12 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 != 2)
        goto LABEL_16;
      WTF::StringImpl::destroy(v10, v9);
      v10 = v17;
      v17 = 0;
      if (!v10)
        goto LABEL_17;
      v12 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v13);
      else
LABEL_16:
        *(_DWORD *)v10 = v12;
    }
  }
LABEL_17:
  v14 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v16 = v18;
  v18 = 0;
  if (!v16)
    goto LABEL_20;
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
LABEL_20:
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v16, v15);
  if (v8)
LABEL_21:
    CFRelease(*((CFTypeRef *)v8 + 1));
LABEL_22:
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
}

WTF::StringImpl *WebKit::WebPage::getSourceForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v14 = 0;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = a2;
    v13 = a3;
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v11);
    a2 = v12;
    a3 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::webFrame((uint64_t)v5, a2, a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebKit::WebFrame::source((unsigned int *)v7, &v14);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebPage::getMainResourceDataOfFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalFrame *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int *v17;
  WebCore::DocumentLoader *v18;
  unsigned int *v19;
  uint64_t v20;
  void *v21;
  WebKit::WebProcess *v23;
  unsigned int *v24[3];
  char v25;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = WebKit::WebProcess::webFrame((uint64_t)v7, a2, a3);
  if (!v8)
  {
    v17 = 0;
    goto LABEL_21;
  }
  v9 = v8;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v11 = *(_QWORD *)(v9 + 24);
  if (!v11)
  {
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    if (!*(_BYTE *)(v12 + 144))
    {
      v14 = (unsigned int *)(v12 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v13 = 0;
      goto LABEL_12;
    }
    goto LABEL_7;
  }
LABEL_8:
  v13 = 1;
LABEL_12:
  v16 = (unsigned __int8 *)WebKit::WebPage::pluginViewForFrame(v12, v10);
  if (v16 && (WebKit::PluginView::liveResourceData(v16, v24), (v17 = v24[0]) != 0))
  {
    if (v13)
    {
      CFRelease(*(CFTypeRef *)(v9 + 8));
LABEL_23:
      v19 = (unsigned int *)*((_QWORD *)v17 + 6);
      goto LABEL_22;
    }
  }
  else
  {
    v18 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v12 + 280) + 88);
    if (v18)
    {
      ++*((_DWORD *)v18 + 6);
      WebCore::DocumentLoader::mainResourceData(v18);
      v17 = v24[0];
      if (*((_DWORD *)v18 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v18 + 24))(v18);
      else
        --*((_DWORD *)v18 + 6);
    }
    else
    {
      v17 = 0;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
  CFRelease(*(CFTypeRef *)(v9 + 8));
  if (v17)
    goto LABEL_23;
LABEL_21:
  v19 = 0;
LABEL_22:
  v24[0] = v19;
  v24[1] = v17;
  v24[2] = 0;
  v25 = 1;
  v20 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v20 + 16))(v20, v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v21);
}

uint64_t WebKit::WebPage::getResourceDataFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t *a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebCore::DocumentLoader *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  void *v22;
  WebKit::WebProcess *v24;
  WTF::StringImpl *v25[3];
  char v26;
  uint64_t v27;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v24);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = WebKit::WebProcess::webFrame((uint64_t)v9, a2, a3);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WTF::URL::URL((uint64_t)v25, a4);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
    if (*(_BYTE *)(v13 + 144))
      v13 = 0;
    v14 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v13 + 280) + 88);
    if (v14)
    {
      ++*((_DWORD *)v14 + 6);
      WebCore::DocumentLoader::subresource(v14, (const WTF::URL *)v25);
      if (v27)
      {
        v15 = *(_QWORD *)(v27 + 312);
        if (v15)
        {
          do
            v16 = __ldaxr((unsigned int *)v15);
          while (__stlxr(v16 + 1, (unsigned int *)v15));
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v15, v12);
        }
        do
          v17 = __ldaxr((unsigned int *)v15);
        while (__stlxr(v17 + 1, (unsigned int *)v15));
        v18 = (_DWORD *)v27;
        v27 = 0;
        if (v18)
        {
          if (v18[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          else
            --v18[2];
        }
      }
      else
      {
        v15 = 0;
      }
      if (*((_DWORD *)v14 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v14 + 24))(v14);
      else
        --*((_DWORD *)v14 + 6);
    }
    else
    {
      v15 = 0;
    }
    v19 = v25[0];
    v25[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
    if (v15)
    {
      v20 = *(WTF::StringImpl **)(v15 + 48);
      goto LABEL_26;
    }
  }
  else
  {
    v15 = 0;
  }
  v20 = 0;
LABEL_26:
  v25[0] = v20;
  v25[1] = (WTF::StringImpl *)v15;
  v25[2] = 0;
  v26 = 1;
  v21 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v22);
}

uint64_t WebKit::WebPage::getWebArchiveOfFrameWithFileName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFData *v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  CFTypeRef v16;
  uint64_t v17;
  void *v18;
  WebKit::WebProcess *v20;
  uint64_t v21;
  WebCore::FragmentedSharedBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  CFTypeRef cf;
  _QWORD v28[3];
  char v29;

  LOBYTE(v28[0]) = 0;
  v29 = 0;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = a2;
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v20);
    a2 = v21;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = WebKit::WebProcess::webFrame((uint64_t)v8, a2, a3);
  if (v9)
  {
    v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    WebKit::WebFrame::webArchiveData(v10, 0, 0, &cf);
    if (cf)
    {
      v22 = (WebCore::FragmentedSharedBuffer *)cf;
      WebCore::SharedBuffer::create<__CFData const*>(&v22, v11, &v23);
      v13 = (unsigned int *)v23;
      v14 = *(_QWORD *)(v23 + 48);
      v23 = 0;
      v24 = v14;
      v25 = v13;
      v26 = 0;
      if (v29)
      {
        IPC::SharedBufferReference::operator=(v28, &v24);
        if (v26)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v26);
      }
      else
      {
        v25 = 0;
        v28[0] = v14;
        v28[1] = v13;
        v28[2] = 0;
        v29 = 1;
      }
      if (v25)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v25, v12);
      v15 = (unsigned int *)v23;
      v23 = 0;
      if (v15)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v12);
      v16 = cf;
      cf = 0;
      if (v16)
        CFRelease(v16);
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  v17 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v18);
}

void WebKit::WebPage::getWebArchiveOfFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  WebCore::FragmentedSharedBuffer *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  WebCore::FragmentedSharedBuffer *v20;
  WebCore::FragmentedSharedBuffer *v21;

  if (*(_BYTE *)(a2 + 16))
  {
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v15);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
      if (!*(_BYTE *)(a2 + 16))
      {
        __break(1u);
        return;
      }
    }
    v6 = WebKit::WebProcess::webFrame((uint64_t)v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 88);
    if (v6)
    {
LABEL_5:
      CFRetain(*(CFTypeRef *)(v6 + 8));
      v16 = 0;
      v17 = 0;
      WebKit::WebFrame::webArchiveData(v6, 0, 0, &v21);
      v7 = v21;
      v20 = 0;
      v21 = 0;
      WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v8);
      goto LABEL_8;
    }
  }
  v7 = 0;
LABEL_8:
  v20 = v7;
  WebCore::SharedBuffer::create<__CFData const*>(&v20, (const __CFData *)a2, (uint64_t *)&v21);
  v9 = (uint64_t)v21;
  v10 = *((_QWORD *)v21 + 6);
  v21 = 0;
  v16 = v10;
  v17 = v9;
  v18 = 0;
  v19 = 1;
  v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v12);
  v14 = (unsigned int *)v21;
  v21 = 0;
  if (!v14)
  {
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v13);
  if (v6)
LABEL_10:
    CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_11:
  if (v7)
    CFRelease(v7);
}

unsigned int *WebKit::WebPage::getAccessibilityTreeData(uint64_t a1, uint64_t *a2)
{
  __CFWriteStream *v3;
  const UInt8 *v4;
  CFIndex i;
  void *v6;
  WTF *v7;
  const UInt8 *v8;
  CFIndex v9;
  void *v10;
  WTF *v11;
  CFTypeRef v12;
  WebCore::FragmentedSharedBuffer *v13;
  const __CFData *v14;
  unsigned int *v15;
  WTF *v16;
  void *v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned int *v28;
  unsigned int *result;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  char v33;
  WebCore::FragmentedSharedBuffer *v34;
  uint64_t v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int *v38;
  WTF::StringImpl *v39;
  unsigned int *v40;
  unsigned int *v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  WebCore::Page::accessibilityTreeData(*(WebCore::Page **)(a1 + 48));
  if (!(_BYTE)v32)
    goto LABEL_35;
  v3 = CFWriteStreamCreateWithAllocatedBuffers(0, 0);
  CFWriteStreamOpen(v3);
  WTF::String::utf8();
  if (!v36)
    goto LABEL_45;
  v4 = (const UInt8 *)v36 + 16;
  for (i = *((_QWORD *)v36 + 1); ; i = 0)
  {
    CFWriteStreamWrite(v3, v4, i);
    v7 = v36;
    v36 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
    if ((_BYTE)v32)
      break;
    __break(1u);
LABEL_45:
    v4 = 0;
  }
  WTF::String::utf8();
  if (v36)
  {
    v8 = (const UInt8 *)v36 + 16;
    v9 = *((_QWORD *)v36 + 1);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  CFWriteStreamWrite(v3, v8, v9);
  v11 = v36;
  v36 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v10);
    else
      --*(_DWORD *)v11;
  }
  v12 = CFWriteStreamCopyProperty(v3, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
  v13 = (WebCore::FragmentedSharedBuffer *)WTF::checked_cf_cast<__CFData const*>(v12);
  CFWriteStreamClose(v3);
  v34 = v13;
  WebCore::SharedBuffer::create<__CFData const*>(&v34, v14, &v35);
  v15 = (unsigned int *)v35;
  v16 = *(WTF **)(v35 + 48);
  v35 = 0;
  v36 = v16;
  v37 = v15;
  v38 = 0;
  IPC::SharedBufferReference::operator=(&v39, (uint64_t *)&v36);
  if (v38)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v38);
  if (v37)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v37, v17);
  v18 = (unsigned int *)v35;
  v35 = 0;
  if (v18)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v17);
    if (!v13)
    {
LABEL_21:
      if (!v3)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  else if (!v13)
  {
    goto LABEL_21;
  }
  CFRelease(v13);
  if (v3)
LABEL_22:
    CFRelease(v3);
LABEL_23:
  if ((_BYTE)v32)
  {
    v19 = v31;
    v31 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v30;
    v30 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
LABEL_35:
  v21 = v40;
  v30 = v39;
  if (v40)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v31 = (WTF::StringImpl *)v21;
  v23 = v41;
  if (v41)
  {
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v32 = v23;
  v33 = 1;
  v25 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v26);
  v28 = v41;
  v41 = 0;
  if (v28)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v28);
  result = v40;
  v40 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v27);
  return result;
}

uint64_t WebKit::WebPage::updateRenderingWithForcedRepaint(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 80))(*(_QWORD *)(a1 + 72), a1, a2);
}

uint64_t WebKit::WebPage::isParentProcessAWebBrowser(WebKit::WebPage *this, WebKit::AuxiliaryProcess *a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return WebKit::isParentProcessAFullWebBrowser(v2, a2);
}

WTF::StringImpl *WebKit::WebPage::adjustSettingsForLockdownMode(WebKit::WebPage *this, WebCore::Settings *a2, const WebKit::WebPreferencesStore *a3)
{
  WebCore::Settings *v5;
  PAL *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v5 = (WebCore::Settings *)WebCore::Settings::disableUnstableFeaturesForModernWebKit(this);
  v6 = (PAL *)WebCore::Settings::disableGlobalUnstableFeaturesForModernWebKit(v5);
  v7 = (unint64_t *)((char *)this + 664);
  v8 = *((_QWORD *)this + 84);
  v9 = *((_QWORD *)this + 86);
  v10 = *((_DWORD *)this + 180) & 0xFEFFFFDF | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
  v11 = *((_QWORD *)this + 88) & 0xF7FFFFFFFEDFFFFFLL;
  v12 = *((_QWORD *)this + 89) & 0xFFFFFEFCFF7FFFFFLL;
  v13 = *((_QWORD *)this + 83) & 0xFFFFFFFFFEFFFFFFLL;
  v14 = v9 & 0xFFFFFFBFFFFFFFFFLL;
  v15 = *((_QWORD *)this + 85) & 0xFFFFFFFFFFFFFFFDLL;
  v16 = *((_QWORD *)this + 87) & 0xFFFFFCFFFFFFFFFFLL;
  *((_QWORD *)this + 89) = v12;
  *((_QWORD *)this + 87) = v16;
  *((_QWORD *)this + 88) = v11;
  *((_QWORD *)this + 85) = v15;
  *((_QWORD *)this + 86) = v9 & 0xFFFFFFBFFFFFFFFFLL;
  *((_QWORD *)this + 83) = v13;
  *((_DWORD *)this + 180) = v10;
  if (*((_BYTE *)this + 368) != 3)
  {
    v17 = 1;
    if ((v9 & 1) != 0)
    {
      if (PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(v6))
        v17 = 2;
      else
        v17 = 1;
      v10 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
      v11 = *((_QWORD *)this + 88);
      v12 = *((_QWORD *)this + 89);
      v14 = *((_QWORD *)this + 86);
      v16 = *((_QWORD *)this + 87);
      v8 = *((_QWORD *)this + 84);
      v15 = *((_QWORD *)this + 85);
      v13 = *v7;
    }
    *((_BYTE *)this + 368) = v17;
  }
  *v7 = v13 & 0xFFFFEFFFFFFFFFFFLL;
  *((_QWORD *)this + 84) = v8 & 0xF7FFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 85) = v15 & 0xFFFFFFFFF7FFFFFCLL;
  *((_QWORD *)this + 86) = v14;
  *((_QWORD *)this + 87) = v16;
  *((_QWORD *)this + 88) = v11 & 0xFFFFFFFFFBFFFFFFLL;
  *((_QWORD *)this + 89) = v12 & 0xFFFFFFFFFFFFFDFFLL;
  *((_BYTE *)this + 724) = BYTE4(v10) & 0x7F;
  *((_DWORD *)this + 180) = v10 & 0xFFFF737F;
  result = (WTF::StringImpl *)CGEnterLockdownModeForPDF();
  if (a2)
  {
    {
      WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key, &v28);
    WebCore::SettingsBase::setAllowedMediaContainerTypes(this, (const WTF::String *)&v28);
    v20 = v28;
    v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    {
      WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key, &v28);
    WebCore::SettingsBase::setAllowedMediaCodecTypes(this, (const WTF::String *)&v28);
    v22 = v28;
    v28 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    {
      WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key, &v28);
    WebCore::SettingsBase::setAllowedMediaVideoCodecIDs(this, (const WTF::String *)&v28);
    v24 = v28;
    v28 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    {
      WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key, &v28);
    WebCore::SettingsBase::setAllowedMediaAudioCodecIDs(this, (const WTF::String *)&v28);
    v26 = v28;
    v28 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    {
      WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<WTF::String>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key, &v28);
    WebCore::SettingsBase::setAllowedMediaCaptionFormatTypes(this, (const WTF::String *)&v28);
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::setDataDetectionResults(WebKit::WebPage *this, NSArray *cf)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  if (cf)
    CFRetain(cf);
  v5 = *((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2034;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::encodeObjectDirectly<NSArray>((IPC::Encoder *)v7, cf);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v12, 0);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  if (cf)
    CFRelease(cf);
}

void WebKit::WebPage::removeDataDetectedLinks(uint64_t a1, Document *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  const void **v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef cf;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (v3)
  {
    while (1)
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v6 = (unsigned int *)(v3 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(v3 + 296);
        if (v8)
        {
          *(_DWORD *)(v8 + 24) += 2;
          WebCore::DataDetection::removeDataDetectedLinksInDocument((WebCore::DataDetection *)v8, a2);
          v9 = *(const void ***)(v3 + 312);
          if (v9)
          {
            v10 = *v9;
            *v9 = 0;
            if (v10)
              CFRelease(v10);
          }
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
      v11 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v3 + 48), 0);
      if (!v11)
        break;
      v12 = v11;
      v13 = (unsigned int *)(v11 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      v3 = v12;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  cf = 0;
  v15 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v15 + 16))(v15, &cf);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
}

WTF *WebKit::WebPage::detectDataInAllFrames(uint64_t a1, char a2, uint64_t *a3)
{
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  WTF *result;
  uint64_t v11;
  WTF *v12;

  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v6 = 0;
  v12 = v6;
  WebCore::Page::protectedMainFrame(*(WebCore::Page **)(a1 + 48));
  v7 = (unsigned int *)(v11 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::detectDataInFrame(v11, a2, a1 + 280, (uint64_t *)&v12, a3);
  if (v11)
  {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
  }
  result = v12;
  if (v12)
    return (WTF *)std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](v12, v9);
  return result;
}

unsigned int *WebKit::detectDataInFrame(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (!a1 || *(_BYTE *)(a1 + 144))
  {
    v14 = *a4;
    v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    v7 = (unsigned int *)(a1 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 + 1, v7));
    v10 = *a4;
    *a4 = 0;
    *(_QWORD *)&v16 = *(_QWORD *)a3;
    BYTE8(v16) = *(_BYTE *)(a3 + 8);
    v11 = *a5;
    *a5 = 0;
    v12 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v12 = &off_1E34FA1A8;
    *(_QWORD *)(v12 + 8) = a1;
    *(_QWORD *)(v12 + 16) = v10;
    *(_OWORD *)(v12 + 24) = v16;
    *(_QWORD *)(v12 + 40) = v11;
    *(_BYTE *)(v12 + 48) = a2;
    v17 = v12;
    WebCore::DataDetection::detectContentInFrame();
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(a1 + 8));
  }
}

void WebKit::WebPage::willCommitLayerTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  int v27;
  WebKit::EditorState::PostLayoutData *v28;
  void *v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WebKit::WebProcess *v40;
  _BYTE v41[7];
  _BYTE v42[7];
  _BYTE v43[7];
  _OWORD v44[2];
  __int128 v45[19];
  char v46;
  uint64_t v47[18];

  v47[17] = *MEMORY[0x1E0C80C00];
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v40);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = WebKit::WebProcess::webFrame((uint64_t)v8, a3, a4);
  if (v9)
  {
    v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v11 = *(_QWORD *)(v10 + 24);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        if (!*(_BYTE *)(v12 + 144))
        {
          v13 = (unsigned int *)(v12 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          v15 = *(_QWORD *)(v12 + 288);
          if (v15)
          {
            ++*(_DWORD *)(v15 + 8);
            v16 = *(_QWORD *)(v12 + 296);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 3424);
              if (v17)
                *(_QWORD *)(a2 + 784) = *(_QWORD *)(v17 + 8);
            }
            *(_QWORD *)(a2 + 120) = WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v15);
            *(_QWORD *)(a2 + 128) = *(_QWORD *)(v15 + 96);
            v18 = *(float **)(a1 + 48);
            *(double *)(a2 + 192) = v18[89];
            *(_QWORD *)(a2 + 232) = WebCore::Page::renderTreeSize((WebCore::Page *)v18);
            WebCore::Page::themeColor(*(WebCore::Page **)(a1 + 48));
            WebCore::Color::operator=();
            if ((*(_QWORD *)v43 & 0x8000000000000) != 0)
            {
              v31 = (unsigned int *)(*(_QWORD *)v43 & 0xFFFFFFFFFFFFLL);
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v19);
              }
            }
            WebCore::Page::pageExtendedBackgroundColor(*(WebCore::Page **)(a1 + 48));
            WebCore::Color::operator=();
            if ((*(_QWORD *)v42 & 0x8000000000000) != 0)
            {
              v34 = (unsigned int *)(*(_QWORD *)v42 & 0xFFFFFFFFFFFFLL);
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                atomic_store(1u, v34);
                WTF::fastFree((WTF *)v34, v20);
              }
            }
            WebCore::Page::sampledPageTopColor(*(WebCore::Page **)(a1 + 48));
            WebCore::Color::operator=();
            if ((*(_QWORD *)v41 & 0x8000000000000) != 0)
            {
              v37 = (unsigned int *)(*(_QWORD *)v41 & 0xFFFFFFFFFFFFLL);
              do
              {
                v38 = __ldaxr(v37);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v37));
              if (!v39)
              {
                atomic_store(1u, v37);
                WTF::fastFree((WTF *)v37, v21);
              }
            }
            *(_QWORD *)(a2 + 136) = WebCore::LocalFrameView::baseLayoutViewportSize((WebCore::LocalFrameView *)v15);
            *(_QWORD *)(a2 + 144) = WebCore::LocalFrameView::minStableLayoutViewportOrigin((WebCore::LocalFrameView *)v15);
            *(_QWORD *)(a2 + 152) = WebCore::LocalFrameView::maxStableLayoutViewportOrigin((WebCore::LocalFrameView *)v15);
            *(_BYTE *)(a2 + 258) = *(_BYTE *)(a1 + 1290);
            WebCore::ViewportConfiguration::minimumScale((WebCore::ViewportConfiguration *)(a1 + 944));
            *(_QWORD *)(a2 + 200) = v22;
            if (*(_BYTE *)(a1 + 1177))
            {
              WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(a1 + 944);
              v24 = v23 * 5.0;
            }
            else
            {
              v24 = *(double *)(a1 + 984);
            }
            *(double *)(a2 + 208) = v24;
            WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(a1 + 944));
            *(_QWORD *)(a2 + 216) = v25;
            *(double *)(a2 + 224) = *(float *)(a1 + 1084);
            *(_BYTE *)(a2 + 261) = *(_BYTE *)(a1 + 1133);
            *(_BYTE *)(a2 + 262) = *(_BYTE *)(a1 + 1080) == 2;
            *(_BYTE *)(a2 + 260) = *(_BYTE *)(a1 + 994);
            *(_BYTE *)(a2 + 263) = *(_BYTE *)(a1 + 1293);
            *(_BYTE *)(a2 + 259) = WebCore::ViewportConfiguration::allowsUserScaling((WebCore::ViewportConfiguration *)(a1 + 944));
            if (*(_BYTE *)(a1 + 1560))
            {
              *(_QWORD *)(a2 + 768) = *(_QWORD *)(a1 + 1552);
              *(_BYTE *)(a2 + 776) = 1;
              if (*(_BYTE *)(a1 + 1560))
                *(_BYTE *)(a1 + 1560) = 0;
            }
            v26 = *(double *)(a2 + 192);
            if (*(double *)(a1 + 1568) != v26)
            {
              *(double *)(a1 + 1568) = v26;
              *(_QWORD *)(a1 + 1576) = *(_QWORD *)(a2 + 240);
            }
            *(_QWORD *)(a2 + 160) = WebCore::ScrollableArea::visibleContentRect();
            *(_WORD *)(a1 + 937) = 0;
            *(_BYTE *)(a1 + 939) = 0;
            if (*(_BYTE *)(a1 + 940) || *(_BYTE *)(a1 + 941))
            {
              WebKit::WebPage::editorState(a1, 0, (uint64_t)v44);
              v27 = *(unsigned __int8 *)(a2 + 752);
              *(_OWORD *)(a2 + 272) = v44[0];
              *(_DWORD *)(a2 + 287) = *(_DWORD *)((char *)v44 + 15);
              v28 = (WebKit::EditorState::PostLayoutData *)(a2 + 304);
              if (v27)
              {
                std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>(v28, (unsigned __int8 *)v45);
                std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(a2 + 624, v47);
              }
              else
              {
                *(_BYTE *)(a2 + 304) = 0;
                *(_BYTE *)(a2 + 608) = 0;
                if (v46)
                {
                  std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>((uint64_t)v28, v45);
                  *(_BYTE *)(a2 + 608) = 1;
                }
                std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](a2 + 624, v47);
                *(_BYTE *)(a2 + 752) = 1;
              }
              std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v47, v29);
              if (v46)
                WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v45, v30);
              *(_WORD *)(a1 + 940) = 0;
            }
            if (*(_DWORD *)(v15 + 8) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            else
              --*(_DWORD *)(v15 + 8);
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

double *WebKit::WebPage::didFlushLayerTreeAtTime(double *result, char a2, double a3)
{
  double v3;

  v3 = result[162];
  if (v3 == 0.0)
  {
    if ((a2 & 1) != 0)
      return result;
  }
  else
  {
    result[162] = 0.0;
    result[163] = (a3 - v3) * 0.2 + result[163] * 0.8;
    if ((a2 & 1) != 0)
      return result;
  }
  result = (double *)*((_QWORD *)result + 299);
  if (result)
    return (double *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(result);
  return result;
}

uint64_t WebKit::WebPage::willDestroyDecodedDataForAllImages(WebKit::WebPage *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 299);
  if (v2)
    WebKit::RemoteResourceCacheProxy::releaseAllImageResources((WebKit::RemoteResourceCacheProxy *)(v2 + 64));
  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 392))(result);
  return result;
}

uint64_t WebKit::WebPage::inspector(WebKit::WebInspector *this, int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;

  if (*((_BYTE *)this + 186))
    return 0;
  result = *((_QWORD *)this + 58);
  if (a2 == 1 && !result)
  {
    WebKit::WebInspector::create(this, (uint64_t *)&v13);
    v4 = (uint64_t)v13;
    v13 = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 58);
    *((_QWORD *)this + 58) = v4;
    if (v5)
    {
      v6 = v5 + 4;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        v10 = v9 + 4;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 4);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
    }
    return *((_QWORD *)this + 58);
  }
  return result;
}

WebKit::WebInspectorUI *WebKit::WebPage::inspectorUI(WebKit::WebPage *this)
{
  WebKit::WebInspectorUI *result;
  WebKit::WebInspectorUI *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  if (*((_BYTE *)this + 186))
    return 0;
  result = (WebKit::WebInspectorUI *)*((_QWORD *)this + 59);
  if (!result)
  {
    v3 = (WebKit::WebInspectorUI *)WTF::fastMalloc((WTF *)0x98);
    result = WebKit::WebInspectorUI::WebInspectorUI(v3, this);
    v5 = *((_QWORD *)this + 59);
    *((_QWORD *)this + 59) = result;
    if (v5)
    {
      WTF::RefCounted<WebKit::WebInspectorUI>::deref((_DWORD *)(v5 + 16), v4);
      return (WebKit::WebInspectorUI *)*((_QWORD *)this + 59);
    }
  }
  return result;
}

WebKit::RemoteWebInspectorUI *WebKit::WebPage::remoteInspectorUI(WebKit::WebPage *this)
{
  WebKit::RemoteWebInspectorUI *result;
  WebKit::RemoteWebInspectorUI *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  if (*((_BYTE *)this + 186))
    return 0;
  result = (WebKit::RemoteWebInspectorUI *)*((_QWORD *)this + 60);
  if (!result)
  {
    v3 = (WebKit::RemoteWebInspectorUI *)WTF::fastMalloc((WTF *)0x78);
    result = WebKit::RemoteWebInspectorUI::RemoteWebInspectorUI(v3, this);
    v5 = *((_QWORD *)this + 60);
    *((_QWORD *)this + 60) = result;
    if (v5)
    {
      WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref((_DWORD *)(v5 + 16), v4);
      return (WebKit::RemoteWebInspectorUI *)*((_QWORD *)this + 60);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::inspectorFrontendCountChanged(WebKit::WebPage *this, int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 32;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1863;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 4uLL, 4) = a2;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WebKit::VideoPresentationManager *WebKit::WebPage::videoPresentationManager(WebKit::WebPage *this)
{
  WebKit::VideoPresentationManager *result;
  WebKit::WebPage *v3;
  _DWORD *v4;
  WebKit::VideoPresentationManager *v5;

  result = (WebKit::VideoPresentationManager *)*((_QWORD *)this + 63);
  if (!result)
  {
    v3 = WebKit::WebPage::playbackSessionManager(this);
    WebKit::VideoPresentationManager::create(this, v3, &v5);
    result = v5;
    v4 = (_DWORD *)*((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = v5;
    if (v4)
    {
      if (v4[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return (WebKit::VideoPresentationManager *)*((_QWORD *)this + 63);
      }
      else
      {
        --v4[4];
      }
    }
  }
  return result;
}

WebKit::WebFullScreenManager *WebKit::WebPage::fullScreenManager(WebKit::WebPage *this)
{
  WebKit::WebFullScreenManager *result;
  WebKit::WebFullScreenManager *v3;
  _DWORD *v4;

  result = (WebKit::WebFullScreenManager *)*((_QWORD *)this + 70);
  if (!result)
  {
    v3 = (WebKit::WebFullScreenManager *)WTF::fastMalloc((WTF *)0xA8);
    result = WebKit::WebFullScreenManager::WebFullScreenManager(v3, (CFTypeRef *)this);
    v4 = (_DWORD *)*((_QWORD *)this + 70);
    *((_QWORD *)this + 70) = result;
    if (v4)
    {
      if (v4[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return (WebKit::WebFullScreenManager *)*((_QWORD *)this + 70);
      }
      else
      {
        --v4[4];
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::startPlayingPredominantVideo(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::Element *v20;
  float v21;
  WebCore::Element **v22;
  uint64_t v23;
  float v24;
  IntSize v25;
  BOOL v26;
  unint64_t v27;
  float v28;
  BOOL v29;
  WebCore::Element *v30;
  _DWORD *v31;
  void *v32;
  _DWORD *v33;
  _DWORD *v34;
  IntRect v35;
  WebCore::Element **v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || *(_BYTE *)(v4 + 144))
  {
    v5 = (_DWORD *)*a2;
    *a2 = 0;
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  }
  v7 = (unsigned int *)(v4 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_DWORD **)(v4 + 288);
  if (!v9)
  {
    v9 = (_DWORD *)*a2;
    *a2 = 0;
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
LABEL_51:
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  ++v9[2];
  v10 = *(_QWORD *)(v4 + 296);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 2;
    v36 = 0;
    v37 = 0;
    WebCore::Document::updateLayoutIgnorePendingStylesheets();
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E34FA460;
    v11[1] = &v36;
    v38 = v11;
    WebCore::Document::forEachMediaElement();
    v12 = v38;
    v38 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = WebCore::ScrollView::unobscuredContentRect();
    v15 = v14;
    if ((v14 & 0x80000000) == 0)
      v16 = v14;
    else
      v16 = -(int)v14;
    v17 = HIDWORD(v14);
    if ((v14 & 0x8000000000000000) != 0)
      LODWORD(v17) = -HIDWORD(v14);
    v18 = v16 * (unint64_t)v17;
    if ((v18 & 0xFFFFFFFF00000000) != 0 || !HIDWORD(v37))
      goto LABEL_43;
    v19 = v13;
    v20 = 0;
    v21 = (double)v18 * 0.25;
    v22 = v36;
    v23 = 8 * HIDWORD(v37);
    v24 = 0.0;
    do
    {
      v35.m_location = (IntPoint)WebCore::Element::boundingBoxInRootViewCoordinates(*v22);
      v35.m_size = v25;
      v38 = (_QWORD *)v19;
      v39 = v15;
      WebCore::IntRect::intersect((WebCore::IntRect *)&v38, &v35);
      v26 = (int)v39 < 1 || SHIDWORD(v39) < 1;
      if (v26
        || (v27 = v39 * (unint64_t)HIDWORD(v39), (v27 & 0xFFFFFFFF00000000) != 0)
        || ((v28 = (float)v27, v24 < (float)v27) ? (v29 = v28 < v21) : (v29 = 1), v29))
      {
        v28 = v24;
      }
      else
      {
        v30 = *v22;
        if (*v22)
          *((_DWORD *)v30 + 6) += 2;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        v20 = v30;
      }
      ++v22;
      v24 = v28;
      v23 -= 8;
    }
    while (v23);
    if (v20)
    {
      v40 = 0;
      v41 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator();
      (*(void (**)(WebCore::Element *))(*(_QWORD *)v20 + 1440))(v20);
      v31 = (_DWORD *)*a2;
      *a2 = 0;
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v31 + 16))(v31, 1);
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
      MEMORY[0x19AEB0CA8](&v38);
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    else
    {
LABEL_43:
      v33 = (_DWORD *)*a2;
      *a2 = 0;
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v33 + 16))(v33, 0);
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    }
    WTF::Vector<WTF::Ref<WebCore::HTMLMediaElement,WTF::RawPtrTraits<WebCore::HTMLMediaElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLMediaElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v32);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  else
  {
    v34 = (_DWORD *)*a2;
    *a2 = 0;
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v34 + 16))(v34, 0);
    (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  if (v9[2] == 1)
    goto LABEL_51;
  --v9[2];
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
}

uint64_t WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion(uint64_t result, int a2)
{
  int v2;
  char v5;

  v2 = *(unsigned __int8 *)(result + 2257);
  *(_BYTE *)(result + 2257) = v2 & ~(_BYTE)a2;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 112) + 432) != 0.0 && v2 != 0 && (v2 & ~a2) == 0)
  {
    v5 = 1;
    return IPC::MessageSender::send<Messages::WebPageProxy::SetAllowsLayoutViewportHeightExpansion>(result + 32, &v5);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::addReasonsToDisallowLayoutViewportHeightExpansion(IPC::Encoder *result, char a2)
{
  int v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *((unsigned __int8 *)result + 2257);
  *((_BYTE *)result + 2257) = v2 | a2;
  if (*(double *)(*(_QWORD *)(*((_QWORD *)result + 6) + 112) + 432) != 0.0
    && v2 == 0
    && (v2 | a2) != 0)
  {
    v5 = (char *)result + 32;
    v6 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)result + 4) + 56))((uint64_t)result + 32);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2029;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = 0;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v11, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::addConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  uint64_t result;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    a3 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  result = WebKit::WebProcess::webFrame((uint64_t)v3, a2, a3);
  if (result)
    return WebKit::WebFrame::addConsoleMessage(result);
  return result;
}

void WebKit::WebPage::enqueueSecurityPolicyViolationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WebKit::WebProcess *v13;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::webFrame((uint64_t)v5, a2, a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (!*(_BYTE *)(v9 + 144))
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          v12 = *(_QWORD *)(v9 + 296);
          if (v12)
          {
            *(_DWORD *)(v12 + 24) += 2;
            WebCore::Document::enqueueSecurityPolicyViolationEvent();
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPage::notifyReportObservers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WebKit::WebProcess *v13;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::webFrame((uint64_t)v5, a2, a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (!*(_BYTE *)(v9 + 144))
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          v12 = *(_QWORD *)(v9 + 296);
          if (v12)
          {
            *(_DWORD *)(v12 + 24) += 2;
            if (!*(_QWORD *)(v12 + 3184))
              WebCore::Document::ensureReportingScope((WebCore::Document *)v12);
            WebCore::ReportingScope::notifyReportObservers();
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPage::sendReportToEndpoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, WTF::RefCountedBase **a7)
{
  WTF::RefCountedBase *v7;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const WTF::String *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebKit::WebProcess *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[5];

  v7 = *a7;
  *a7 = 0;
  if (v7)
  {
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v31 = a2;
      v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v30);
      a2 = v31;
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    v13 = WebKit::WebProcess::webFrame((uint64_t)v12, a2, a3);
    if (v13)
    {
      v14 = v13;
      CFRetain(*(CFTypeRef *)(v13 + 8));
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          if (!*(_BYTE *)(v16 + 144))
          {
            v17 = *((unsigned int *)a5 + 3);
            if ((_DWORD)v17)
            {
              v18 = *a5;
              v19 = 8 * v17;
              do
              {
                MEMORY[0x19AEABB24](v33, a4, v18, 0);
                ++*(_DWORD *)v7;
                WebCore::PingLoader::sendViolationReport();
                v32 = 0;
                WTF::RefCounted<WebCore::FormData>::deref(v7);
                v20 = v33[0];
                v33[0] = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v21);
                  else
                    *(_DWORD *)v20 -= 2;
                }
                v18 += 8;
                v19 -= 8;
              }
              while (v19);
              v16 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8);
              if (*(_BYTE *)(v16 + 144))
                v16 = 0;
            }
            v22 = *(_QWORD *)(v16 + 296);
            if (v22)
            {
              v23 = *(_DWORD *)(v22 + 24);
              *(_DWORD *)(v22 + 24) = v23 + 2;
              v24 = *(unsigned int *)(a6 + 12);
              if ((_DWORD)v24)
              {
                v25 = *(const WTF::String **)a6;
                v26 = 8 * v24;
                while (1)
                {
                  WebCore::Document::endpointURIForToken((WebCore::Document *)v22, v25);
                  v28 = v32;
                  if (v32)
                  {
                    if (*((_DWORD *)v32 + 1))
                    {
                      MEMORY[0x19AEABB24](v33, a4, &v32, 0);
                      ++*(_DWORD *)v7;
                      WebCore::PingLoader::sendViolationReport();
                      WTF::RefCounted<WebCore::FormData>::deref(v7);
                      v29 = v33[0];
                      v33[0] = 0;
                      if (v29)
                      {
                        if (*(_DWORD *)v29 == 2)
                          WTF::StringImpl::destroy(v29, v27);
                        else
                          *(_DWORD *)v29 -= 2;
                      }
                      v28 = v32;
                      v32 = 0;
                      if (!v28)
                        goto LABEL_31;
                    }
                    else
                    {
                      v32 = 0;
                    }
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, v27);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
LABEL_31:
                  v25 = (const WTF::String *)((char *)v25 + 8);
                  v26 -= 8;
                  if (!v26)
                  {
                    v23 = *(_DWORD *)(v22 + 24) - 2;
                    break;
                  }
                }
              }
              if (v23)
              {
                *(_DWORD *)(v22 + 24) = v23;
              }
              else if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v22);
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v14 + 8));
    }
    WTF::RefCounted<WebCore::FormData>::deref(v7);
  }
}

uint64_t WebKit::WebPage::notificationPermissionRequestManager(WebKit::WebPage *this)
{
  uint64_t result;
  void *v3;
  WebKit::NotificationPermissionRequestManager *v4;
  uint64_t v5;

  result = *((_QWORD *)this + 77);
  if (!result)
  {
    WebKit::NotificationPermissionRequestManager::create(this, &v5);
    result = v5;
    v4 = (WebKit::NotificationPermissionRequestManager *)*((_QWORD *)this + 77);
    *((_QWORD *)this + 77) = v5;
    if (v4)
    {
      WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v4, v3);
      return *((_QWORD *)this + 77);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::performDragControllerAction(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebProcess *v9;
  unsigned int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::DragCaretController *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebKit::WebProcess *v35;
  uint64_t v36;
  unsigned __int16 v37;
  int v38;

  if (!*(_QWORD *)(a1 + 48))
  {
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0, 0, 0, 0, 0, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (*(_BYTE *)(a2 + 16))
  {
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v9 = WebKit::WebProcess::WebProcess(v35);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
      if (!*(_BYTE *)(a2 + 16))
      {
        __break(1u);
        goto LABEL_29;
      }
    }
    result = (unsigned int *)WebKit::WebProcess::webFrame((uint64_t)v9, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (!result)
      return result;
  }
  else
  {
    result = *(unsigned int **)(a1 + 88);
    if (!result)
      return result;
  }
  v12 = *((_QWORD *)result + 3);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      if (!*(_BYTE *)(v13 + 144))
      {
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        if (a3 >= 2)
        {
          if (a3 != 2)
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
          WebCore::DragController::dragExited();
          v16 = *a5;
          *a5 = 0;
          v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16);
          goto LABEL_20;
        }
        WebCore::DragController::dragEnteredOrUpdated();
        if (!v38)
        {
          v25 = *(_QWORD *)(a1 + 48);
          v26 = *(WebCore::DragCaretController **)(v25 + 56);
          v27 = *(_QWORD *)(v25 + 64);
          v28 = *(unsigned __int8 *)(v27 + 44);
          v29 = WTF::RefPtr<WebCore::HTMLInputElement,WTF::RawPtrTraits<WebCore::HTMLInputElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLInputElement>>::unspecifiedBoolTypeInstance;
          if (!*(_QWORD *)(v27 + 32))
            v29 = 0;
          v30 = v29 != 0;
          v31 = *(unsigned int *)(v27 + 40);
          v32 = WebCore::DragCaretController::caretRectInRootViewCoordinates(v26);
          v34 = v33;
          WebCore::DragCaretController::editableElementRectInRootViewCoordinates(*(WebCore::DragCaretController **)(*(_QWORD *)(a1 + 48) + 56));
          v16 = *a5;
          *a5 = 0;
          v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16);
          v18 = v16;
          v19 = v37;
          v20 = v28;
          v21 = v30;
          v22 = v31;
          v23 = v32;
          v24 = v34;
          goto LABEL_24;
        }
        if (v38 == 1)
        {
          v16 = *a5;
          *a5 = 0;
          v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16);
LABEL_20:
          v18 = v16;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
LABEL_24:
          v17(v18, v19, v20, v21, v22, v23, v24);
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
        }
LABEL_29:
        v36 = std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WebKit::WebPage::performDragOperation(v36);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::performDragOperation(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  const char ***v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char ***v18;
  uint64_t v19;
  const char ***v20;
  uint64_t v21;
  const char ***v23;

  if (*a3)
  {
    v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v9 = 1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 16) = 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = *(const char ****)(a1 + 712);
  *(_QWORD *)(a1 + 712) = v9;
  if (v11)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v11);
  if (*((_DWORD *)a4 + 3))
  {
    v12 = 0;
    do
    {
      v13 = *a4;
      if (*(_QWORD *)(*a4 + 8 * v12))
      {
        v14 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v14 = 1;
        v15 = *(_QWORD *)(v13 + 8 * v12);
        *(_QWORD *)(v13 + 8 * v12) = 0;
        *(_QWORD *)(v14 + 8) = v15;
        *(_QWORD *)(v14 + 16) = 0;
        v23 = (const char ***)v14;
        v16 = *(unsigned int *)(a1 + 732);
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 728))
        {
          WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>&>(a1 + 720, (unint64_t)&v23);
        }
        else
        {
          v17 = *(_QWORD *)(a1 + 720);
          *(_DWORD *)v14 = 2;
          *(_QWORD *)(v17 + 8 * v16) = v14;
          *(_DWORD *)(a1 + 732) = v16 + 1;
        }
        v18 = v23;
        v23 = 0;
        if (v18)
          WTF::RefCounted<WebKit::SandboxExtension>::deref(v18);
      }
      ++v12;
    }
    while (v12 < *((unsigned int *)a4 + 3));
  }
  v19 = WebCore::DragController::performDragOperation();
  v20 = *(const char ****)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;
  if (v20)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v20);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 720, 0);
  v21 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

unsigned int *WebKit::WebPage::dragEnded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WebCore::DragController *v11;
  int v12;
  int v13;
  unsigned int *result;
  WTF::WallTime *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _DWORD *v25;
  WebCore *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebKit::WebProcess *v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  uint64_t v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v11 = *(WebCore::DragController **)(*(_QWORD *)(a1 + 48) + 64);
  v12 = *((_DWORD *)v11 + 13);
  v13 = *((_DWORD *)v11 + 14);
  WebCore::DragController::dragEnded(v11);
  if (*(_BYTE *)(a2 + 16))
  {
    {
      result = (unsigned int *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      result = (unsigned int *)WebKit::WebProcess::WebProcess(v33);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
      if (!*(_BYTE *)(a2 + 16))
      {
        __break(1u);
        return result;
      }
    }
    v15 = (WTF::WallTime *)WebKit::WebProcess::webFrame((uint64_t)result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (!v15)
      goto LABEL_10;
  }
  else
  {
    v15 = *(WTF::WallTime **)(a1 + 88);
    if (!v15)
    {
LABEL_10:
      v18 = *a6;
      *a6 = 0;
      LOBYTE(v37) = 0;
      v40 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 16))(v18, &v37);
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  v16 = *((_QWORD *)v15 + 3);
  if (!v16)
    goto LABEL_10;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17 || *(_BYTE *)(v17 + 144))
    goto LABEL_10;
  v19 = (v12 + a3);
  v20 = (v13 + HIDWORD(a3));
  v21 = (v12 + a4);
  v22 = (v13 + HIDWORD(a4));
  v23 = (unsigned int *)(v17 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v25 = *(_DWORD **)(v17 + 288);
  if (v25)
  {
    ++v25[2];
    v26 = (WebCore *)WTF::WallTime::now(v15);
    v37 = v27;
    v38 = 5;
    v39 = 0;
    v41 = 0;
    v42 = 0;
    v43 = v19 | (v20 << 32);
    v44 = v21 | (v22 << 32);
    v46 = 0;
    v45 = 0;
    v47 = 0;
    v48 = 1;
    v28 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v26);
    if (v28)
      *(_DWORD *)v28 += 2;
    v49 = v28;
    v50 = 0;
    v51 = 0;
    WebCore::EventHandler::dragSourceEndedAt();
    v36[0] = v34;
    v36[1] = v35;
    v29 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v29 + 16))(v29, v36);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    *(_BYTE *)(a1 + 795) = 0;
    v31 = v49;
    v49 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  else
  {
    v32 = *a6;
    *a6 = 0;
    LOBYTE(v37) = 0;
    v40 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 16))(v32, &v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
}

