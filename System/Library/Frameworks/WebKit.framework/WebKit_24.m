IPC::Encoder *WebKit::createRemoteAudioMediaStreamTrackRendererInternalUnitProxy@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t IdentifierInternal;
  WebKit::WebProcess *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  IPC::Encoder *result;
  WebKit::WebProcess *v33;

  v4 = WTF::fastMalloc((WTF *)0xF0);
  *(_QWORD *)v4 = off_1E34E9718;
  *(_QWORD *)(v4 + 8) = 0;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)v4 = off_1E34E9470;
  *(_QWORD *)(v4 + 16) = IdentifierInternal;
  *(_QWORD *)(v4 + 24) = a1;
  *(_BYTE *)(v4 + 88) = 0;
  *(_BYTE *)(v4 + 168) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_BYTE *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 218) = 0u;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v33);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager(v6);
  v8 = v7;
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *v7;
  if (*v7
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v7),
        (v10 = *v8) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v10 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_14:
    *v16 = v9;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    v21 = *(unsigned int **)(v4 + 8);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = (unsigned int *)v16[1];
    v16[1] = v21;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v20);
      }
    }
    v26 = *v8;
    if (*v8)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *v8;
    if (*v8)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_29;
    }
    else if (3 * v31 > 4 * v30)
    {
      goto LABEL_29;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v8);
    goto LABEL_29;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v9)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v11;
    v16 = (_QWORD *)(v10 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v16 = v18;
      }
      goto LABEL_14;
    }
  }
LABEL_29:
  result = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit((WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *)v4);
  *a2 = v4;
  return result;
}

unsigned int *WebKit::AudioMediaStreamTrackRendererInternalUnitManager::reset(unsigned int **a1, uint64_t a2)
{
  void *v2;
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;

  v7 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v7, (unsigned int **)&v6);
  result = (unsigned int *)v6;
  if (v6)
  {
    if (*((_QWORD *)v6 + 1))
    {
      WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(*((_QWORD *)v6 + 1), 0);
      result = (unsigned int *)v6;
      v6 = 0;
      if (!result)
        return result;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(uint64_t a1, char a2)
{
  IPC::Encoder *result;

  WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread((unsigned int **)a1);
  *(_BYTE *)(a1 + 233) = a2;
  result = (IPC::Encoder *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 80))
    return WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::start((IPC::Encoder *)a1);
  return result;
}

uint64_t *WebKit::AudioMediaStreamTrackRendererInternalUnitManager::restartAllUnits(uint64_t *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (_QWORD *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = (_QWORD *)v2;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (_QWORD *)v2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = (_QWORD *)(v2 + 16 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_8:
    v7 = (_QWORD *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    v8 = v5[1];
    if (v8)
    {
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
      this = (uint64_t *)WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(*(_QWORD *)(v8 + 8), 1);
      do
      {
        v10 = __ldaxr((unsigned int *)v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v8));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v8);
        this = (uint64_t *)WTF::fastFree((WTF *)v8, a2);
      }
    }
    else
    {
      this = (uint64_t *)WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(0, 1);
    }
    v12 = v5 + 2;
    v5 = v4;
    if (v12 != v4)
    {
      v5 = v12;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  if (v2)
    return (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, a2);
  return this;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this)
{
  WebKit::WebProcess *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v2) + 24);
  v4 = *((_QWORD *)this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34E99C0;
  v7[1] = v5;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 686;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v4;
  v16[0] = (uint64_t)v7;
  v16[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v17, v16, 0, 0);
  v11 = v16[0];
  v16[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::~AudioMediaStreamTrackRendererInternalUnitManagerProxy(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this)
{
  WebKit::WebProcess *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  WTF::Thread *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WebCore::CARingBuffer *v42;
  WTF *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WebKit::WebProcess *v61;
  WebKit::WebProcess *v62;
  _BYTE v63[80];
  char v64;
  WTF::Thread *v65;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v61 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v61);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager(v2);
  v5 = *v3;
  if (*v3)
  {
    v6 = v3;
    v7 = *((_QWORD *)this + 2);
    v8 = *(_DWORD *)(v5 - 8);
    v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v5 + 16 * v12);
    if (v13 != v7)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v5 + 16 * v12);
        ++v14;
        if (v13 == v7)
          goto LABEL_10;
      }
      v12 = *(unsigned int *)(v5 - 4);
    }
LABEL_10:
    if (v12 != *(_DWORD *)(v5 - 4))
    {
      v15 = (_QWORD *)(v5 + 16 * v12);
      v16 = (unsigned int *)v15[1];
      *v15 = -1;
      v15[1] = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v4);
        }
      }
      ++*(_DWORD *)(*v6 - 16);
      v19 = *v6;
      if (*v6)
        v20 = *(_DWORD *)(v19 - 12) - 1;
      else
        v20 = -1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v6;
      if (*v6)
      {
        v22 = 6 * *(_DWORD *)(v21 - 12);
        v23 = *(_DWORD *)(v21 - 4);
        if (v22 < v23 && v23 >= 9)
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v23 >> 1);
      }
    }
  }
  {
    v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v62 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v25 = WebKit::WebProcess::WebProcess(v62);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v25;
  }
  v26 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v25) + 24);
  v27 = *((_QWORD *)this + 2);
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 687;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  v65 = (WTF::Thread *)v28;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v27;
  IPC::Connection::sendMessageImpl(v26, (uint64_t *)&v65, 0, 0);
  v30 = v65;
  v65 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  while (1)
  {
    v37 = *((_QWORD *)this + 5);
    if (v37 == *((_QWORD *)this + 6))
      break;
    v33 = *((_QWORD *)this + 7);
    v34 = *(WTF::Thread **)(v33 + 8 * v37);
    *(_QWORD *)(v33 + 8 * v37) = 0;
    v65 = v34;
    v35 = *((_QWORD *)this + 7);
    v36 = *(_QWORD *)(v35 + 8 * v37);
    *(_QWORD *)(v35 + 8 * v37) = 0;
    if (v36)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v37 = *((_QWORD *)this + 5);
    }
    if (v37 == *((unsigned int *)this + 16) - 1)
      v38 = 0;
    else
      v38 = v37 + 1;
    *((_QWORD *)this + 5) = v38;
    v63[0] = 0;
    v64 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()((uint64_t *)&v65, (uint64_t)v63);
    if (v64)
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v63);
    if (v65)
      (*(void (**)(WTF::Thread *))(*(_QWORD *)v65 + 8))(v65);
  }
  v39 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v39)
  {
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      v65 = (WTF::Thread *)v39;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v65);
    }
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 27, 0);
  v42 = (WebCore::CARingBuffer *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v42)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 184, v42);
  v43 = (WTF *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v43)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((_DWORD)this + 176, v43);
  if (*((_BYTE *)this + 168))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *)((char *)this + 88));
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = *((_QWORD *)this + 5);
  v46 = *((_QWORD *)this + 6);
  v47 = (WTF *)*((_QWORD *)this + 7);
  if (v45 <= v46)
  {
    if (v45 == v46)
      goto LABEL_72;
    v54 = (uint64_t *)((char *)v47 + 8 * v45);
    v55 = 8 * v46 - 8 * v45;
    do
    {
      v56 = *v54;
      *v54 = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      ++v54;
      v55 -= 8;
    }
    while (v55);
  }
  else
  {
    if (v46)
    {
      v48 = 8 * v46;
      do
      {
        v49 = *(_QWORD *)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        v47 = (WTF *)((char *)v47 + 8);
        v48 -= 8;
      }
      while (v48);
      v47 = (WTF *)*((_QWORD *)this + 7);
      v45 = *((_QWORD *)this + 5);
    }
    v50 = *((unsigned int *)this + 16);
    if (v45 != v50)
    {
      v51 = (uint64_t *)((char *)v47 + 8 * v45);
      v52 = 8 * v50 - 8 * v45;
      do
      {
        v53 = *v51;
        *v51 = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
        ++v51;
        v52 -= 8;
      }
      while (v52);
    }
  }
  v47 = (WTF *)*((_QWORD *)this + 7);
LABEL_72:
  if (v47)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v47, v43);
  }
  v57 = *((_QWORD *)this + 1);
  if (v57)
  {
    *(_QWORD *)(v57 + 8) = 0;
    v58 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v58)
    {
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        atomic_store(1u, v58);
        WTF::fastFree((WTF *)v58, v43);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::~AudioMediaStreamTrackRendererInternalUnitManagerProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned int **WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread(unsigned int **this)
{
  unsigned int **v1;
  unsigned int **v2;

  v1 = this + 28;
  if (this[28])
  {
    v2 = this;
    atomic_store(1u, (unsigned __int8 *)this + 232);
    MEMORY[0x19AEBA1A0](this[27][1]);
    WTF::Thread::waitForCompletion((WTF::Thread *)v2[28]);
    return WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=(v1);
  }
  return this;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::start(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  const WebCore::CAAudioStreamDescription *v4;
  WebCore::CARingBuffer *v5;
  WebCore::CARingBuffer *v6;
  WebCore::CARingBuffer *v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Semaphore *v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebCore::WebAudioBufferList *v17;
  WTF *v18;
  _QWORD *v19;
  unsigned int *v20;
  _QWORD *v21;
  WebCore::CARingBuffer *v22;
  unsigned int v23;
  unsigned int v24;
  WebKit::WebProcess *v25;
  WebCore::CARingBuffer *v26;
  _BYTE v27[24];
  _QWORD v28[2];
  __int128 v29;
  char v30;
  _QWORD *v31;
  unsigned int *v32;
  WTF::Thread *v33;

  v1 = (uint64_t)this;
  if (!*((_BYTE *)this + 168))
  {
LABEL_6:
    *(_BYTE *)(v1 + 80) = 1;
    return this;
  }
  if (*((_BYTE *)this + 233))
  {
    *((_BYTE *)this + 233) = 0;
    this = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(this);
    v2 = *(_QWORD *)(v1 + 72);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 4))
        this = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::setAudioOutputDevice((WTF::StringImpl **)v1, (const WTF::String *)(v1 + 72));
    }
    goto LABEL_6;
  }
  WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread((unsigned int **)this);
  *(_BYTE *)(v1 + 80) = 1;
  if (!*(_BYTE *)(v1 + 168))
    goto LABEL_28;
  WebCore::CAAudioStreamDescription::sampleRate((WebCore::CAAudioStreamDescription *)(v1 + 88));
  v4 = (const WebCore::CAAudioStreamDescription *)(v3 + v3);
  *(_QWORD *)(v1 + 208) = v4;
  if (!*(_BYTE *)(v1 + 168))
    goto LABEL_28;
  WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)(v1 + 88), v4, (uint64_t)v28);
  if (!v30)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1975B4248);
  }
  v5 = (WebCore::CARingBuffer *)v28[0];
  v28[0] = 0;
  v26 = v5;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&v27[8] = v29;
  v6 = *(WebCore::CARingBuffer **)(v1 + 184);
  v7 = v26;
  v26 = 0;
  *(_QWORD *)(v1 + 184) = v7;
  if (v6)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v1 + 184, v6);
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v25);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v8) + 24);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(IPC::Semaphore **)(v1 + 216);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 689;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v33 = (WTF::Thread *)v12;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v10;
  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode((IPC::Encoder *)v12, (unint64_t)v27);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v12, v11);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v33, 0, 0);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v15, v16);
  }
  if (!*(_BYTE *)(v1 + 168))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  WTF::fastMalloc((WTF *)0x48);
  v17 = (WebCore::WebAudioBufferList *)WebCore::WebAudioBufferList::WebAudioBufferList();
  v18 = *(WTF **)(v1 + 176);
  *(_QWORD *)(v1 + 176) = v17;
  if (v18)
  {
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](v1 + 176, v18);
    v17 = *(WebCore::WebAudioBufferList **)(v1 + 176);
  }
  WebCore::WebAudioBufferList::setSampleCount(v17);
  atomic_store(0, (unsigned __int8 *)(v1 + 232));
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = off_1E34E99E8;
  v19[1] = v1;
  v31 = v19;
  WTF::Thread::create();
  WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>((unsigned int **)(v1 + 224), &v32);
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    do
    {
      v23 = __ldaxr(v20);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v20));
    if (!v24)
    {
      atomic_store(1u, v20);
      v33 = (WTF::Thread *)v20;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v33);
    }
  }
  v21 = v31;
  v31 = 0;
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v27);
  v22 = v26;
  v26 = 0;
  if (v22)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v26, v22);
  return (IPC::Encoder *)std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28);
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::setAudioOutputDevice(WTF::StringImpl **this, const WTF::String *a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  WTF::String::operator=(this + 9, a2);
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v4) + 24);
  v6 = this[2];
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 688;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stop(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  *((_BYTE *)this + 80) = 0;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v2) + 24);
  v4 = *((_QWORD *)this + 2);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 690;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::retrieveFormatDescription(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  char v45;

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 168))
    v6 = v5 == v4;
  else
    v6 = 0;
  if (v6)
  {
    v8 = *(_OWORD *)(a1 + 96);
    v9 = *(_OWORD *)(a1 + 128);
    v10 = *(_OWORD *)(a1 + 144);
    v41 = *(_OWORD *)(a1 + 112);
    v42 = v9;
    v43 = v10;
    v39 = MEMORY[0x1E0DD8FD8] + 16;
    v44 = *(_DWORD *)(a1 + 160);
    v40 = v8;
    v45 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(a2, (uint64_t)&v39);
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v39);
    return;
  }
  if (v5)
  {
    if (v4 + 1 != v5)
      goto LABEL_40;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 64);
    if (v4)
    {
      if (v4 != v7 - 1)
        goto LABEL_40;
    }
    else if ((_DWORD)v7)
    {
      v4 = 0;
      goto LABEL_40;
    }
  }
  v11 = v7;
  v12 = ((unint64_t)v7 >> 2) + v7;
  if (v12 <= 0xF)
    v12 = 15;
  if (v12 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return;
  }
  v13 = *(WTF **)(a1 + 56);
  v14 = v12 + 1;
  v15 = WTF::fastMalloc((WTF *)(8 * (v12 + 1)));
  v17 = (_QWORD *)v15;
  *(_DWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  if (v18 <= v19)
  {
    if (v18 != v19)
    {
      v31 = (_QWORD *)(v15 + 8 * v18);
      v32 = (uint64_t *)((char *)v13 + 8 * v18);
      v33 = 8 * v19 - 8 * v18;
      do
      {
        v34 = *v32;
        *v32 = 0;
        *v31 = v34;
        v35 = *v32;
        *v32 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        ++v31;
        ++v32;
        v33 -= 8;
      }
      while (v33);
    }
  }
  else
  {
    if (v19)
    {
      v20 = 8 * v19;
      v21 = v13;
      do
      {
        v22 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        *v17 = v22;
        v23 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        ++v17;
        v21 = (WTF *)((char *)v21 + 8);
        v20 -= 8;
      }
      while (v20);
      v14 = *(_DWORD *)(a1 + 64);
      v18 = *(_QWORD *)(a1 + 40);
      v17 = *(_QWORD **)(a1 + 56);
    }
    v24 = v18 - v11 + v14;
    if (v18 != v11)
    {
      v25 = v14;
      v26 = (uint64_t *)((char *)v13 + 8 * v18);
      v27 = &v17[v25];
      v28 = 8 * v18 - 8 * v11;
      do
      {
        v29 = *v26;
        *v26 = 0;
        *(_QWORD *)((char *)v27 + v28) = v29;
        v30 = *v26;
        *v26 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        ++v26;
        v28 += 8;
      }
      while (v28);
    }
    *(_QWORD *)(a1 + 40) = v24;
  }
  if (v13)
  {
    if (*(WTF **)(a1 + 56) == v13)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
    }
    WTF::fastFree(v13, v16);
  }
  v4 = *(_QWORD *)(a1 + 48);
LABEL_40:
  v36 = *(_QWORD *)(a1 + 56);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(v36 + 8 * v4) = v37;
  if (v4 == *(unsigned int *)(a1 + 64) - 1)
    v38 = 0;
  else
    v38 = v4 + 1;
  *(_QWORD *)(a1 + 48) = v38;
}

BOOL WebKit::SharedVideoFrameWriter::prepareWriting(_QWORD *a1, WebCore::SharedVideoFrameInfo *this, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  semaphore_t *v9;
  double v10;
  NSObject *v11;
  _BOOL8 result;
  const char *v13;
  uint64_t v14;
  WebCore::SharedMemory *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint8_t v20[16];
  char v21;

  v8 = WebCore::SharedVideoFrameInfo::isReadWriteSupported(this);
  if ((v8 & 1) != 0)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*((_BYTE *)a1 + 17)
        || (v9 = (semaphore_t *)*a1,
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v8),
            !IPC::Semaphore::waitFor(v9, v10 + 3.0)))
      {
        v11 = qword_1ECE71B18;
        result = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)v20 = 0;
          v13 = "SharedVideoFrameReader::writeBuffer wait failed";
LABEL_9:
          _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, v13, v20, 2u);
          return 0;
        }
        return result;
      }
    }
    else
    {
      v14 = *a3;
      *((_BYTE *)a1 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, *a1);
    }
    *((_BYTE *)a1 + 18) = 1;
    v15 = (WebCore::SharedMemory *)WebCore::SharedVideoFrameInfo::storageSize(this);
    v16 = a1[1];
    if (!v16 || *(_QWORD *)(v16 + 8) < (unint64_t)v15)
    {
      WebCore::SharedMemory::allocate(v15);
      v17 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      v18 = (unsigned int *)a1[1];
      a1[1] = v17;
      if (v18)
      {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v18);
        v19 = *(unsigned int **)v20;
        *(_QWORD *)v20 = 0;
        if (v19)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v19);
        v17 = a1[1];
      }
      if (!v17 || (WebCore::SharedMemory::createHandle(), !v21))
      {
        v11 = qword_1ECE71B18;
        result = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)v20 = 0;
          v13 = "SharedVideoFrameReader::writeBuffer allocation failed";
          goto LABEL_9;
        }
        return result;
      }
      (*(void (**)(_QWORD, uint8_t *))(*(_QWORD *)*a4 + 16))(*a4, v20);
      if (v21)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
    }
    return 1;
  }
  v11 = qword_1ECE71B18;
  result = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v20 = 0;
    v13 = "SharedVideoFrameWriter::prepareWriting not supported";
    goto LABEL_9;
  }
  return result;
}

void WebKit::SharedVideoFrameWriter::writeBuffer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SharedVideoFrameInfo *v15;

  v7 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
  {
    v10 = *(_QWORD *)(v7 + 48);
    if (v10)
    {
      v7 = *(_QWORD *)(v7 + 48);
      if (*(_BYTE *)(v10 + 88))
        goto LABEL_4;
    }
    else if (*(_BYTE *)(v7 + 88))
    {
LABEL_4:
      v11 = (unint64_t *)(v7 + 72);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(v7 + 80);
      *(_QWORD *)a5 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(a5 + 8) = v13;
      *(_DWORD *)(a5 + 16) = 1;
      *(_BYTE *)(a5 + 24) = 1;
      return;
    }
    __break(1u);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7))
  {
    v14 = *(_QWORD *)(v7 + 48);
    if (v14)
      (**(void (***)(uint64_t))v14)(v14);
    WebKit::SharedVideoFrameWriter::writeBuffer((uint64_t)a1, a3, a4, a5);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v15 = (WebCore::SharedVideoFrameInfo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    WebKit::SharedVideoFrameWriter::writeBuffer(v15, a1, a3, a4, 1, a5);
  }
}

uint64_t WebKit::SharedVideoFrameWriter::writeBuffer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  _BYTE v9[40];

  WebCore::SharedVideoFrameInfo::fromVideoFrameBuffer();
  result = WebKit::SharedVideoFrameWriter::prepareWriting((_QWORD *)a1, (WebCore::SharedVideoFrameInfo *)v9, a2, a3);
  if ((_DWORD)result && (result = WebCore::SharedVideoFrameInfo::writeVideoFrameBuffer(), (_DWORD)result))
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    if (*(_BYTE *)(a1 + 18))
    {
      *(_BYTE *)(a1 + 18) = 0;
      return MEMORY[0x19AEBA1A0](*(unsigned int *)(*(_QWORD *)a1 + 4));
    }
  }
  return result;
}

void WebKit::SharedVideoFrameWriter::writeBuffer(WebCore::SharedVideoFrameInfo *this@<X1>, _QWORD *a2@<X0>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  __IOSurface *v11;
  WTF::MachSendRight *MachPort;
  _BYTE v13[40];

  if (this)
  {
    if (a5
      && (v11 = (__IOSurface *)((uint64_t (*)(WebCore::SharedVideoFrameInfo *))*MEMORY[0x1E0DD48C0])(this)) != 0)
    {
      MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(v11);
      WTF::MachSendRight::adopt(MachPort);
      WTF::MachSendRight::MachSendRight();
      *(_DWORD *)(a6 + 16) = 2;
      *(_BYTE *)(a6 + 24) = 1;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
    }
    else
    {
      WebCore::SharedVideoFrameInfo::fromCVPixelBuffer(this, this);
      if (WebKit::SharedVideoFrameWriter::prepareWriting(a2, (WebCore::SharedVideoFrameInfo *)v13, a3, a4)
        && WebCore::SharedVideoFrameInfo::writePixelBuffer((WebCore::SharedVideoFrameInfo *)v13, this, *(unsigned __int8 **)(a2[1] + 16)))
      {
        *(_QWORD *)a6 = 0;
        *(_DWORD *)(a6 + 16) = 0;
        *(_BYTE *)(a6 + 24) = 1;
      }
      else
      {
        *(_BYTE *)a6 = 0;
        *(_BYTE *)(a6 + 24) = 0;
        if (*((_BYTE *)a2 + 18))
        {
          *((_BYTE *)a2 + 18) = 0;
          MEMORY[0x19AEBA1A0](*(unsigned int *)(*a2 + 4));
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 24) = 0;
  }
}

void WebKit::SharedVideoFrameWriter::writeBuffer(_QWORD *a1@<X0>, webrtc::VideoFrame *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  WebCore::SharedVideoFrameInfo *v11;
  WebCore::SharedVideoFrameInfo *v12;
  uint64_t v13;

  v10 = webrtc::videoFrameBufferProvider();
  if (v10)
  {
    WebKit::SharedVideoFrameWriter::writeBuffer(a1, v10, a3, a4, a5);
  }
  else
  {
    v11 = (WebCore::SharedVideoFrameInfo *)webrtc::copyPixelBufferForFrame();
    if (v11)
    {
      v12 = v11;
      WebKit::SharedVideoFrameWriter::writeBuffer(v11, a1, a3, a4, 1, a5);
      CFRelease(v12);
    }
    else
    {
      webrtc::VideoFrame::video_frame_buffer(a2);
      WebKit::SharedVideoFrameWriter::writeBuffer((uint64_t)a1, a3, a4, a5);
      if (v13)
        (*(void (**)())(*(_QWORD *)v13 + 8))();
    }
  }
}

void WebKit::SharedVideoFrameReader::~SharedVideoFrameReader(WebKit::SharedVideoFrameReader *this)
{
  const void *v2;
  const void *v3;
  unsigned int *v4;
  void *v5;
  uint64_t v6;

  v2 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
  if (*((_BYTE *)this + 24))
  {
    IPC::Semaphore::destroy((WebKit::SharedVideoFrameReader *)((char *)this + 16));
    WTF::MachSendRight::~MachSendRight((WebKit::SharedVideoFrameReader *)((char *)this + 16));
  }
  WTF::MachSendRight::~MachSendRight((WebKit::SharedVideoFrameReader *)((char *)this + 8));
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
}

void WebKit::SharedVideoFrameReader::read(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  CFTypeRef cf;

  WebKit::SharedVideoFrameReader::readBuffer(a1, a2 + 24);
  if (cf)
  {
    WebCore::VideoFrameCV::create();
    CFRelease(cf);
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t WebKit::WebGamepad::WebGamepad(uint64_t a1, uint64_t a2)
{
  int v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  uint64_t *v7;

  v4 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (WTF::StringImpl **)(a1 + 16);
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (uint64_t *)(a1 + 56);
  *(_QWORD *)a1 = off_1E34E94B0;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, *(unsigned int *)(a2 + 36));
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 80, *(unsigned int *)(a2 + 52));
  WTF::String::operator=(v6, (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=(v5, (WTF::StringImpl *)(a2 + 16));
  WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::operator=(v7, (unsigned __int8 **)(a2 + 64));
  WebKit::WebGamepad::updateValues(a1, a2);
  return a1;
}

double WebKit::WebGamepad::updateValues(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  double result;
  uint64_t v28;
  uint64_t v29;

  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    v6 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 24);
      v9 = 8 * v6;
      do
      {
        v10 = v7;
        v11 = *(_QWORD *)(v8 + 8 * v7);
        v12 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = v11;
        ++v7;
        *(_QWORD *)(v5 + 8 * v10) = v12;
        v9 -= 8;
      }
      while (v9);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  else
  {
    LODWORD(v7) = 0;
    v5 = 0;
  }
  v13 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v13)
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)(a1 + 64), (void *)(*(_QWORD *)(a1 + 64) + 8 * v13));
  v14 = *(WTF **)(a1 + 64);
  if (v14)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v14, (void *)a2);
  }
  v28 = 0;
  v29 = 0;
  *(_QWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = v4;
  *(_DWORD *)(a1 + 76) = v7;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, (void *)a2);
  v16 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v16)
  {
    LODWORD(v19) = 0;
    v17 = 0;
    goto LABEL_21;
  }
  if (v16 >> 29)
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x1975B4FF0);
  }
  v17 = WTF::fastMalloc((WTF *)(8 * v16));
  v18 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = *(_QWORD *)(a2 + 40);
    v21 = 8 * v18;
    do
    {
      v22 = v19;
      v23 = *(_QWORD *)(v20 + 8 * v19);
      v24 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = v23;
      ++v19;
      *(_QWORD *)(v17 + 8 * v22) = v24;
      v21 -= 8;
    }
    while (v21);
    HIDWORD(v29) = v19;
  }
  else
  {
    LODWORD(v19) = 0;
  }
LABEL_21:
  v25 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v25)
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)(a1 + 80), (void *)(*(_QWORD *)(a1 + 80) + 8 * v25));
  v26 = *(WTF **)(a1 + 80);
  if (v26)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v26, v15);
  }
  v28 = 0;
  v29 = 0;
  *(_QWORD *)(a1 + 80) = v17;
  *(_DWORD *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 92) = v19;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v15);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t WebKit::WebGamepad::axisValues(WebKit::WebGamepad *this)
{
  return (uint64_t)this + 64;
}

uint64_t WebKit::WebGamepad::buttonValues(WebKit::WebGamepad *this)
{
  return (uint64_t)this + 80;
}

uint64_t WebCore::MediaRecorderPrivate::ptrCount(WebCore::MediaRecorderPrivate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::MediaRecorderPrivate::ptrCountWithoutThreadCheck(WebCore::MediaRecorderPrivate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::MediaRecorderPrivate::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

uint64_t WebCore::MediaRecorderPrivate::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    *(_DWORD *)(this + 16) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

unsigned __int8 **WebKit::RemoteVideoFrameObjectHeapProxyProcessor::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
}

unsigned __int8 *WebKit::RemoteVideoFrameObjectHeapProxyProcessor::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(this[2], a2);
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::controlBlock(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  return *((_QWORD *)this + 2);
}

unsigned __int8 **`non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this - 1);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(this - 1), a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::controlBlock(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  return *((_QWORD *)this - 1);
}

uint64_t WebKit::SampleBufferDisplayLayer::hostingContextID(WebKit::SampleBufferDisplayLayer *this)
{
  if (*((_BYTE *)this + 132))
    return *((unsigned int *)this + 32);
  else
    return 0;
}

unsigned __int8 *WebKit::SampleBufferDisplayLayer::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

unsigned __int8 *WebKit::SampleBufferDisplayLayer::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(this[1]);
}

uint64_t WebKit::SampleBufferDisplayLayer::controlBlock(WebKit::SampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 1);
}

unsigned __int8 *`non-virtual thunk to'WebKit::SampleBufferDisplayLayer::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(this - 4));
}

unsigned __int8 *`non-virtual thunk to'WebKit::SampleBufferDisplayLayer::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(this - 4));
}

uint64_t `non-virtual thunk to'WebKit::SampleBufferDisplayLayer::controlBlock(WebKit::SampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this - 4);
}

void WebKit::WebGamepad::~WebGamepad(WebKit::WebGamepad *this, void *a2)
{
  char *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_1E34E94B0;
  v3 = (char *)this + 64;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v4);
  WebCore::PlatformGamepad::~PlatformGamepad(this, v5);
}

{
  char *v3;
  void *v4;
  void *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E34E94B0;
  v3 = (char *)this + 64;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v4);
  WebCore::PlatformGamepad::~PlatformGamepad(this, v5);
  WTF::fastFree(v6, v7);
}

double WebCore::PlatformGamepad::lastUpdateTime(WebCore::PlatformGamepad *this)
{
  return *((double *)this + 5);
}

uint64_t WebCore::PlatformGamepad::playEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::PlatformGamepad::stopEffects(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

const char *WebCore::PlatformGamepad::source(WebCore::PlatformGamepad *this)
{
  return "Unknown";
}

uint64_t WebCore::MediaRecorderPrivate::startRecording(uint64_t a1, uint64_t *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  int v7;
  char v8;

  v3 = *(_DWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (v3)
    *v3 += 2;
  v6[0] = v3;
  v7 = 0;
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, v6, 0, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v7 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34E95C0[v7])(&v8, v6);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::~MediaRecorderPrivateGPUProcessDidCloseObserver(WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::controlBlock(WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver *this, WebKit::GPUProcessConnection *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34E9620;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  BOOL v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v12 = *((_QWORD *)v2 + 2);
    v6 = (WTF *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v12 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    v9 = (unsigned int *)*((_QWORD *)v6 + 2);
    *((_QWORD *)v6 + 2) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
    this = (unsigned __int8 *)WTF::fastFree(v6, a2);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E9620;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9620;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 273) = 1;
      JUMPOUT(0x19AEBA1A0);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB26B8](result - 2);
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WebCore::SampleBufferDisplayLayer::hostingContextID(WebCore::SampleBufferDisplayLayer *this)
{
  return 0;
}

uint64_t *WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::operator=(uint64_t *a1, unsigned __int8 **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  return a1;
}

void WebCore::PlatformGamepad::~PlatformGamepad(WebCore::PlatformGamepad *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34E9758;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34E97A8;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v4 + 8));
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v5 + 8));
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34E97A8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v5 + 8));
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v11;
  unint64_t v12;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[8];
  WTF::StringImpl *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  char v37[8];
  WTF::StringImpl *v38;
  char v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;

  v4 = (_QWORD *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>((_QWORD *)(a1 + 8));
  IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>(a2, (uint64_t)v37);
  if (!v40)
  {
    v30[0] = 0;
    v36 = 0;
    goto LABEL_26;
  }
  v6 = IPC::Decoder::decode<WTF::String>(a2, &v41);
  if (!v42)
  {
    v16 = 0;
    v30[0] = 0;
    v36 = 0;
    goto LABEL_30;
  }
  v8 = a2[1];
  v7 = (WTF::StringImpl *)*a2;
  v9 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v8 >= v9 && v8 - v9 > 3)
  {
    v11 = (unsigned int *)((char *)v7 + v9);
    a2[2] = (uint64_t)(v11 + 1);
    if (!v7)
    {
      v24 = v8;
      v25 = 0;
      goto LABEL_42;
    }
    v12 = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v7;
    if (v8 < v12 || v8 - v12 <= 3)
    {
      *a2 = 0;
      a2[1] = 0;
      v27 = a2[3];
      if (v27)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
          v7 = (WTF::StringImpl *)*a2;
          v28 = a2[1];
          v29 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v29)
          {
            if (v28)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v29 + 16))(v29, v7);
          }
        }
      }
      goto LABEL_46;
    }
    v3 = *v11;
    v2 = *(unsigned int *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    a2[2] = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (v40)
    {
      v30[0] = 0;
      v32 = 0;
      if (v39)
      {
        v30[0] = v37[0];
        v14 = v38;
        v38 = 0;
        v31 = v14;
        v32 = 1;
      }
      v15 = (uint64_t)v41;
      v41 = 0;
      v33 = v15;
      v34 = v3;
      v35 = v2;
      v16 = 1;
      goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
    v24 = 0;
    v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    v6 = (_QWORD *)a2[3];
    if (!v6)
      goto LABEL_42;
  }
  if (v8)
  {
    (*(void (**)(_QWORD *))(*v6 + 16))(v6);
    v25 = *a2;
    v24 = a2[1];
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
LABEL_42:
  *a2 = 0;
  a2[1] = 0;
  v26 = a2[3];
  if (v26 && v24)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v25, v24);
LABEL_46:
  v16 = 0;
  v30[0] = 0;
LABEL_20:
  v36 = v16;
  if (v42)
  {
    v17 = v41;
    v41 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v7);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
LABEL_30:
  if (v40)
  {
    if (v39)
    {
      v22 = v38;
      v38 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v7);
          if (v16)
            goto LABEL_36;
          goto LABEL_26;
        }
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (v16)
  {
LABEL_36:
    WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v4, v30, &v33, v3, v2);
    return std::__optional_destruct_base<std::tuple<std::optional<WebCore::ExceptionData>,WTF::String,unsigned int,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30, v23);
  }
LABEL_26:
  v19 = (WTF::StringImpl *)*a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21)
  {
    if (v20)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21, v19);
  }
  std::__optional_destruct_base<std::tuple<std::optional<WebCore::ExceptionData>,WTF::String,unsigned int,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30, v19);
  return IPC::Connection::cancelReply<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(v4);
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(_QWORD *a1)
{
  WTF::StringImpl *v1;
  uint64_t result;
  WTF::StringImpl *v3;
  char v4[8];
  WTF::StringImpl *v5;
  char v6;

  v4[0] = 0;
  v6 = 0;
  v3 = 0;
  WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(a1, v4, (uint64_t *)&v3, 0, 0);
  result = (uint64_t)v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      result = WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v6)
  {
    result = (uint64_t)v5;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return WTF::StringImpl::destroy(v5, v1);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16[8];
  uint64_t v17;
  char v18;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebCore::ExceptionData>(result, (uint64_t)v16);
      v8 = v18;
      if (v18)
      {
        v8 = v16[0];
        *(_QWORD *)(a2 + 8) = v17;
        v9 = 1;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        v9 = 0;
      }
      *(_BYTE *)a2 = v8;
      *(_BYTE *)(a2 + 24) = v9;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(_QWORD *a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  WebCore::MediaStreamTrackPrivate *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::MediaStreamTrackPrivate *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;

  if (!*a1 || (v6 = *(_QWORD *)(*a1 + 8)) == 0)
  {
    LOBYTE(v23) = 8;
    v24 = 0;
    goto LABEL_6;
  }
  if (a2[16])
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    LOBYTE(v23) = v7;
    v24 = v8;
LABEL_6:
    v25 = 1;
    v9 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v9 + 16))(v9, &v23, 0, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    goto LABEL_7;
  }
  if (*(_BYTE *)(v6 + 233))
    goto LABEL_28;
  v14 = (WebCore::MediaStreamTrackPrivate *)a1[1];
  if (v14)
  {
    v15 = WebCore::MediaStreamTrackPrivate::source(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15);
    if (*(_QWORD *)(v6 + 24))
    {
      WebCore::RealtimeMediaSource::removeAudioSampleObserver();
      v16 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v15;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 144))(v16);
        if (!*(_QWORD *)(v6 + 24))
          goto LABEL_18;
      }
    }
    else
    {
      *(_QWORD *)(v6 + 24) = v15;
    }
    WebCore::RealtimeMediaSource::addAudioSampleObserver();
  }
LABEL_18:
  v17 = (WebCore::MediaStreamTrackPrivate *)a1[2];
  if (v17)
  {
    if (*a1)
      v18 = *(_QWORD *)(*a1 + 8);
    else
      v18 = 0;
    v19 = WebCore::MediaStreamTrackPrivate::source(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19);
    if (*(_QWORD *)(v18 + 32))
    {
      WebCore::RealtimeMediaSource::removeVideoFrameObserver();
      v20 = *(_QWORD *)(v18 + 32);
      *(_QWORD *)(v18 + 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 144))(v20);
        if (!*(_QWORD *)(v18 + 32))
          goto LABEL_28;
      }
    }
    else
    {
      *(_QWORD *)(v18 + 32) = v19;
    }
    WebCore::RealtimeMediaSource::addVideoFrameObserver();
  }
LABEL_28:
  v21 = *a3;
  *a3 = 0;
  v23 = v21;
  v25 = 0;
  v22 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, &v23, a4, a5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_7:
  if (v25 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34E95C0[v25])(&v26, &v23);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WebCore::ExceptionData>,WTF::String,unsigned int,unsigned int>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteMediaRecorder::VideoFrameAvailable>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1190;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivate::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1188;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivate::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1187;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34E9820;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E9820;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t **v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double *v9;
  double v10;
  uint64_t v11;
  void *v12;
  unsigned int *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v2 = (uint64_t **)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>((uint64_t **)(a1 + 8));
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v21);
  if (!v22)
    goto LABEL_17;
  v5 = a2[1];
  v6 = *a2;
  v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v6, v5);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_16;
  }
  v9 = (double *)(v6 + v7);
  a2[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v14 = v5;
    v15 = 0;
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
LABEL_17:
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v19)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    }
    return IPC::Connection::cancelReply<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(v2);
  }
  v10 = *v9;
  v21[0] = 0;
  if (v21[1])
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(v21);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, double))(*(_QWORD *)v11 + 16))(v11, v21, a1 + 16, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = (unsigned int *)v21[0];
  v21[0] = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
  return result;
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  unsigned int *result;
  unsigned int *v5;

  v5 = 0;
  v1 = *a1;
  v2 = **a1;
  *a1 = 0;
  (*(void (**)(uint64_t *, unsigned int **, uint64_t **, double))(v2 + 16))(v1, &v5, a1 + 1, 0.0);
  (*(void (**)(uint64_t *))(*v1 + 8))(v1);
  result = v5;
  v5 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::StopRecording,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E9848;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::StopRecording,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9848;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::StopRecording,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Pause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E9870;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Pause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9870;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Pause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Resume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E9898;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Resume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9898;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Resume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E98C0;
  v3 = a1[2];
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E98C0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = v1 + 16 * v2;
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 16 * v2;
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = v1 + 16 * v2;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = *(_QWORD *)(a1 + 16);
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = v1 + 16 * *(unsigned int *)(v1 - 4);
  else
    v6 = 0;
  while (v4 != v6)
  {
    cf = 0;
    (*(void (**)(_QWORD, CFTypeRef *))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), &cf);
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
    v8 = v4 + 16;
    v4 = v3;
    if (v8 != v3)
    {
      v4 = v8;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v5 = 0;
  }
  if (v5 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(a1, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v8 >> 1);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (uint64_t *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          *v26 = *v13;
          v28 = v4 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v16 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (!v16)
            goto LABEL_21;
LABEL_20:
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          goto LABEL_21;
        }
        v15 = v4 + 16 * v11;
        v16 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if (++v11 == v12)
        goto LABEL_24;
    }
  }
  if (v4)
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(WebCore::VideoFrame const&)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1396;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(WebCore::VideoFrame const&)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1395;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34E9948;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34E9948;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1 + 1;
  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v4 = IPC::Decoder::decode<std::tuple<std::optional<unsigned int>>>(a2);
  if (!v5)
    return IPC::Connection::cancelReply<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v6 = a1[2];
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v7 = a1[1];
    *(_DWORD *)(v7 + 128) = v4;
    *(_BYTE *)(v7 + 132) = BYTE4(v4);
    v8 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v8 + 16))(v8, BYTE4(v4) != 0);
  }
  else
  {
    v8 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[1];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *a1;
    *(_DWORD *)(v2 + 128) = 0;
    *(_BYTE *)(v2 + 132) = 0;
  }
  v3 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<unsigned int>>>(uint64_t *a1)
{
  uint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteSampleBufferDisplayLayer::EnqueueVideoFrame>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1327;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1334;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1333;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioMediaStreamTrackRendererInternalUnitManager::CreateUnit,WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0>(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E99C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioMediaStreamTrackRendererInternalUnitManager::CreateUnit,WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0>(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E99C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioMediaStreamTrackRendererInternalUnitManager::CreateUnit,WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0>(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  semaphore_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  char v68;

  if (!a2)
    return;
  v4 = *a2;
  if (!v4)
    return;
  v6 = a2[1];
  if (v6 <= a2[2] - v4)
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v18 = 0;
        v43 = *a2;
        v44 = a2[1];
        v45 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v19 = 0;
        if (v45 && v44)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
          v19 = *a2;
          v18 = a2[1];
        }
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_24;
  }
  v7 = (_BYTE *)a2[2];
  v8 = v7 + 1;
  a2[2] = (uint64_t)(v7 + 1);
  v9 = *v7;
  if (v9 >= 2)
  {
    v18 = v6;
    v19 = v4;
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v18)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
    goto LABEL_25;
  }
  if (!*v7)
  {
    LOBYTE(v54) = 0;
    v60 = 0;
    v61 = 1;
LABEL_9:
    v10 = ((unint64_t)(v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v6 >= v10 && v6 - v10 > 7)
    {
      v12 = (uint64_t *)(v4 + v10);
      a2[2] = v4 + v10 + 8;
      v13 = v6;
      v14 = v4;
      if (v4)
      {
        v2 = *v12;
        LOBYTE(v46) = 0;
        v51 = 0;
        if (v9)
        {
          v46 = MEMORY[0x1E0DD8FD8] + 16;
          v48 = v56;
          *(_OWORD *)v49 = v57;
          *(_OWORD *)&v49[16] = v58;
          v50 = v59;
          v47 = v55;
          v15 = 1;
          v51 = 1;
        }
        else
        {
          v15 = 0;
        }
        v16 = 0;
        v52 = v2;
        v17 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      *a2 = 0;
      a2[1] = 0;
      v41 = a2[3];
      if (v41)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
          v14 = *a2;
          v13 = a2[1];
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42 && v13)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v14, v13);
    v15 = 0;
    v17 = 0;
    LOBYTE(v46) = 0;
    v16 = 1;
LABEL_19:
    v53 = v17;
    if (v9)
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v54);
    if (!v16)
      goto LABEL_28;
    goto LABEL_27;
  }
  IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a2, (uint64_t)&v62);
  if (v68)
  {
    v54 = MEMORY[0x1E0DD8FD8] + 16;
    v56 = v64;
    v57 = v65;
    v58 = v66;
    v59 = v67;
    v55 = v63;
    v2 = 1;
    v60 = 1;
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v62);
    v61 = 1;
    v6 = a2[1];
    v8 = (_BYTE *)a2[2];
    v4 = *a2;
    goto LABEL_9;
  }
LABEL_25:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (v24 && v23)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  v15 = 0;
  v17 = 0;
  LOBYTE(v46) = 0;
  v53 = 0;
LABEL_27:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27 = a2[3];
  if (v27 && v26)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
LABEL_28:
  if (v17)
  {
    v28 = *(_QWORD *)(a1 + 8);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        if (v2 && v15)
        {
          if (*(_QWORD *)(v29 + 216))
            WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread((unsigned int **)v29);
          v30 = (semaphore_t *)WTF::fastMalloc((WTF *)8);
          *v30 = 0;
          v30[1] = 0;
          semaphore_create(*MEMORY[0x1E0C83DA0], v30 + 1, 0, 0);
          std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(v29 + 216), (IPC::Semaphore *)v30);
          if (*(_BYTE *)(v29 + 168))
          {
            v31 = v48;
            *(_OWORD *)(v29 + 96) = v47;
            *(_OWORD *)(v29 + 112) = v31;
            *(_QWORD *)(v29 + 128) = *(_QWORD *)v49;
            *(_OWORD *)(v29 + 136) = *(_OWORD *)&v49[8];
            *(_QWORD *)(v29 + 152) = *(_QWORD *)&v49[24];
            *(_DWORD *)(v29 + 160) = v50;
          }
          else
          {
            *(_QWORD *)(v29 + 88) = MEMORY[0x1E0DD8FD8] + 16;
            v32 = v48;
            v33 = *(_OWORD *)&v49[16];
            *(_OWORD *)(v29 + 128) = *(_OWORD *)v49;
            *(_OWORD *)(v29 + 144) = v33;
            *(_DWORD *)(v29 + 160) = v50;
            *(_OWORD *)(v29 + 96) = v47;
            *(_OWORD *)(v29 + 112) = v32;
            *(_BYTE *)(v29 + 168) = 1;
          }
          *(_QWORD *)(v29 + 200) = v2;
          v34 = *(_QWORD *)(v29 + 40);
          if (v34 != *(_QWORD *)(v29 + 48))
          {
            v35 = MEMORY[0x1E0DD8FD8] + 16;
            do
            {
              v36 = *(_QWORD *)(v29 + 56);
              v37 = *(_QWORD *)(v36 + 8 * v34);
              *(_QWORD *)(v36 + 8 * v34) = 0;
              v62 = v37;
              v38 = *(_QWORD *)(v29 + 56);
              v39 = *(_QWORD *)(v38 + 8 * v34);
              *(_QWORD *)(v38 + 8 * v34) = 0;
              if (v39)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                v34 = *(_QWORD *)(v29 + 40);
              }
              if (v34 == *(unsigned int *)(v29 + 64) - 1)
                v40 = 0;
              else
                v40 = v34 + 1;
              *(_QWORD *)(v29 + 40) = v40;
              v54 = v35;
              v55 = v47;
              v56 = v48;
              v57 = *(_OWORD *)v49;
              v58 = *(_OWORD *)&v49[16];
              v59 = v50;
              v60 = 1;
              WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(&v62, (uint64_t)&v54);
              if (v60)
                WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v54);
              if (v62)
                (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
              v34 = *(_QWORD *)(v29 + 40);
            }
            while (v34 != *(_QWORD *)(v29 + 48));
          }
          if (*(_BYTE *)(v29 + 80))
            WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::start((IPC::Encoder *)v29);
        }
      }
    }
    if (v15)
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v46);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::startThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int8 v3;
  WebCore::AudioSampleBufferList *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  int v12;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v1 + 192) = 0;
  do
  {
    result = MEMORY[0x19AEBA1B8](*(unsigned int *)(*(_QWORD *)(v1 + 216) + 4));
    if ((_DWORD)result)
      break;
    v3 = atomic_load((unsigned __int8 *)(v1 + 232));
    if ((v3 & 1) != 0)
      break;
    v4 = *(WebCore::AudioSampleBufferList **)(*(_QWORD *)(v1 + 176) + 40);
    v12 = 0;
    v5 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v1 + 192);
    v6 = *(_QWORD *)(v1 + 200);
    v8 = mach_absolute_time();
    result = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::AudioSampleBufferList *, uint64_t, int *, double))(*(_QWORD *)v5 + 16))(v5, v6, v4, v7, &v12, (double)v8);
    if (v12 == 16)
    {
      if (!*(_BYTE *)(v1 + 168))
      {
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)(v1 + 200);
      v10 = WebCore::CAAudioStreamDescription::bytesPerFrame((WebCore::CAAudioStreamDescription *)(v1 + 88));
      WebCore::AudioSampleBufferList::zeroABL(v4, (AudioBufferList *)(v9 * v10));
    }
    result = WebCore::CARingBuffer::store(*(WebCore::CARingBuffer **)(v1 + 184), (const AudioBufferList *)v4);
    *(_QWORD *)(v1 + 192) += *(_QWORD *)(v1 + 200);
    v11 = atomic_load((unsigned __int8 *)(v1 + 232));
  }
  while ((v11 & 1) == 0);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&)::$_0,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_1,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_2,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const unsigned __int8 *v10;
  __CVPixelBufferPool *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  int v15;
  uint64_t v16;
  char v17;
  CFTypeRef cf[2];

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    WebCore::SharedVideoFrameInfo::decode();
    if (v17)
    {
      if ((WebCore::SharedVideoFrameInfo::isReadWriteSupported((WebCore::SharedVideoFrameInfo *)&v15) & 1) == 0)
      {
        v7 = qword_1ECE71B18;
        if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
        {
          LOWORD(cf[0]) = 0;
          v8 = "SharedVideoFrameReader::readBufferFromSharedMemory not supported";
          goto LABEL_33;
        }
        goto LABEL_14;
      }
      if (v17)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
        if (v6 < WebCore::SharedVideoFrameInfo::storageSize((WebCore::SharedVideoFrameInfo *)&v15))
        {
          v7 = qword_1ECE71B18;
          if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
          {
            LOWORD(cf[0]) = 0;
            v8 = "SharedVideoFrameReader::readBufferFromSharedMemory storage size mismatch";
LABEL_33:
            _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)cf, 2u);
            goto LABEL_14;
          }
          goto LABEL_14;
        }
        if (v17)
        {
          v10 = (const unsigned __int8 *)(v5 + 40);
          if (*(_BYTE *)(v3 + 12))
          {
            v11 = *(__CVPixelBufferPool **)(v3 + 40);
            if (!v11 || *(_DWORD *)(v3 + 48) != v15 || *(_QWORD *)(v3 + 52) != v16)
            {
              *(_DWORD *)(v3 + 48) = v15;
              *(_QWORD *)(v3 + 52) = v16;
              WebCore::SharedVideoFrameInfo::createCompatibleBufferPool((WebCore::SharedVideoFrameInfo *)&v15);
              v12 = cf[0];
              cf[0] = 0;
              v13 = *(const void **)(v3 + 40);
              *(_QWORD *)(v3 + 40) = v12;
              if (v13)
              {
                CFRelease(v13);
                v14 = cf[0];
                cf[0] = 0;
                if (v14)
                  CFRelease(v14);
              }
              v11 = *(__CVPixelBufferPool **)(v3 + 40);
            }
          }
          else
          {
            v11 = 0;
          }
          WebCore::SharedVideoFrameInfo::createPixelBufferFromMemory((WebCore::SharedVideoFrameInfo *)&v15, v10, v11);
          if (*a2 && WebCore::ProcessIdentity::operator BOOL() && *(_BYTE *)(v3 + 12))
            WebCore::setOwnershipIdentityForCVPixelBuffer();
          goto LABEL_15;
        }
      }
      __break(1u);
      return;
    }
    v7 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf[0]) = 0;
      v8 = "SharedVideoFrameReader::readBufferFromSharedMemory decoding failed";
      goto LABEL_33;
    }
LABEL_14:
    *a2 = 0;
LABEL_15:
    if (*(_BYTE *)(v3 + 24))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 20));
    return;
  }
  v9 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v15) = 0;
    _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "SharedVideoFrameReader::readBufferFromSharedMemory no storage", (uint8_t *)&v15, 2u);
  }
  *a2 = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&)::$_0,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_1,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_2,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&>(WTF::ApproximateTime *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  double v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint8_t v15[8];
  unsigned int *v16;
  uint8_t buf[16];

  v4 = ***(_QWORD ***)a1;
  if (v4)
  {
    v6 = v4 + 32;
    WTF::ApproximateTime::now(a1);
    IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read(v6, a2, &v16, v7 + 0.0);
    if (v16)
    {
      v8 = (const void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 56))(v16);
      *a3 = v8;
      if (v8)
        CFRetain(v8);
    }
    else
    {
      v10 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "SharedVideoFrameReader::readBuffer no sample", v15, 2u);
      }
      *a3 = 0;
    }
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  else
  {
    v9 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "SharedVideoFrameReader::readBuffer no object heap", buf, 2u);
    }
    *a3 = 0;
  }
}

WebCore::IOSurface *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&)::$_0,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_1,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_2,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&>@<X0>(_QWORD *a1@<X8>)
{
  __IOSurface *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  WebCore::IOSurface *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  WebCore::IOSurface *v11;
  char v12;

  WebCore::IOSurface::createFromSendRight();
  if (v11)
  {
    WebCore::createCVPixelBuffer(*((WebCore **)v11 + 6), v2);
    v3 = v10;
    if (v10)
    {
      *a1 = 0;
      if ((_DWORD)v3 == -1)
        goto LABEL_10;
    }
    else
    {
      v5 = v9;
      v9 = 0;
      *a1 = v5;
    }
    ((void (*)(char *, uint64_t *))off_1E34E9A20[v3])(&v12, &v9);
    goto LABEL_10;
  }
  v4 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9) = 0;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "SharedVideoFrameReader::readBuffer no surface", (uint8_t *)&v9, 2u);
  }
  *a1 = 0;
LABEL_10:
  result = v11;
  v11 = 0;
  if (result)
  {
    WebCore::IOSurface::~IOSurface(result);
    return (WebCore::IOSurface *)WTF::fastFree(v7, v8);
  }
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&)::$_0,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_1,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_2,WebKit::SharedVideoFrameReader::readBuffer(std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize> &&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  CFTypeRef result;
  CFTypeRef cf;

  v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (*(_DWORD *)(v5 + 60) != *a2 || *(_DWORD *)(v5 + 64) != HIDWORD(*a2))
  {
    *(_QWORD *)(v5 + 60) = v4;
    WebCore::createBlackPixelBuffer((WebCore *)(int)v4);
    v7 = *(const void **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = cf;
    if (v7)
      CFRelease(v7);
    if (WebCore::ProcessIdentity::operator BOOL() && *(_BYTE *)(v5 + 12))
      WebCore::setOwnershipIdentityForCVPixelBuffer();
  }
  result = *(CFTypeRef *)(v5 + 72);
  *a3 = result;
  if (result)
    return CFRetain(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIP10__CVBufferEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void WebKit::WebGamepadProvider::~WebGamepadProvider(WebKit::WebGamepadProvider *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  v4 = *((unsigned int *)this + 15);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 6);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, v3);
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v9, v3);
  *(_QWORD *)this = off_1E34E9BA0;
  v10 = *((_QWORD *)this + 1);
  if (v10)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v10, v3);
}

{
  WebKit::WebGamepadProvider::~WebGamepadProvider(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebGamepadProvider::setInitialGamepads(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  int v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 60))
  {
    v31 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v32 = 136446210;
      v33 = "(m_gamepads.isEmpty())";
      _os_log_fault_impl(&dword_196BCC000, v31, OS_LOG_TYPE_FAULT, "Exiting: %{public}s is false", (uint8_t *)&v32, 0xCu);
    }
    WTFCrashWithInfoImpl(66, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/Gamepad/WebGamepadProvider.cpp", "void WebKit::WebGamepadProvider::setInitialGamepads(const Vector<std::optional<GamepadData>> &)");
  }
  v4 = (_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(a1 + 56);
    if (v6 < v5)
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v5)
        v9 = *(unsigned int *)(a2 + 12);
      else
        v9 = v8;
      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)(a1 + 48), v9);
    }
    if (*v4)
      bzero((void *)(*v4 + 8 * *(unsigned int *)(a1 + 60)), 8 * v5 - 8 * *(unsigned int *)(a1 + 60));
  }
  *(_DWORD *)(a1 + 60) = v5;
  v10 = (_QWORD *)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 12);
  v12 = *(unsigned int *)(a1 + 76);
  if (v12 >= v11)
  {
    WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct((unsigned int *)(*v10 + 8 * v11), (void *)(*v10 + 8 * v12));
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 72);
    if (v13 < v11)
    {
      v14 = v13 + (v13 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= v11)
        v16 = *(unsigned int *)(a2 + 12);
      else
        v16 = v15;
      WTF::Vector<WTF::WeakPtr<WebCore::PlatformGamepad,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 64), v16);
    }
    if (*v10)
    {
      v17 = *(unsigned int *)(a1 + 76);
      if ((_DWORD)v17 != (_DWORD)v11)
        bzero((void *)(*v10 + 8 * v17), (8 * v11 - 8 * v17) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  *(_DWORD *)(a1 + 76) = v11;
  if (*(_DWORD *)(a2 + 12))
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)a2 + 80 * v18;
      if (!*(_BYTE *)(v19 + 72))
        break;
      v20 = WTF::fastMalloc((WTF *)0x60);
      v21 = WebKit::WebGamepad::WebGamepad(v20, v19);
      v23 = *(unsigned int *)(a1 + 60);
      if (v18 >= v23)
        goto LABEL_50;
      v24 = *(_QWORD *)(*v4 + 8 * v18);
      *(_QWORD *)(*v4 + 8 * v18) = v21;
      if (v24)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v23 = *(unsigned int *)(a1 + 60);
      }
      if (v18 >= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1975B81D4);
      }
      v25 = *(_QWORD *)(*v4 + 8 * v18);
      if (v25)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v25 + 8), *(_QWORD *)(*v4 + 8 * v18));
        v26 = *(unsigned int **)(v25 + 8);
        if (v26)
        {
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
        }
      }
      else
      {
        v26 = 0;
      }
      if (v18 >= *(unsigned int *)(a1 + 76))
      {
LABEL_50:
        __break(0xC471u);
        JUMPOUT(0x1975B81CCLL);
      }
      v28 = *(unsigned int **)(*v10 + 8 * v18);
      *(_QWORD *)(*v10 + 8 * v18) = v26;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v22);
        }
      }
      ++v18;
    }
    while (v18 < *(unsigned int *)(a2 + 12));
  }
}

_QWORD *WebKit::WebGamepadProvider::gamepadConnected(uint64_t a1, unsigned int *a2, NSObject *a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t buf[4];
  _BYTE v46[12];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(a1 + 48);
  v7 = *a2;
  if (*(_DWORD *)(a1 + 60) <= *a2)
  {
    v9 = v7 + 1;
    v10 = *(unsigned int *)(a1 + 56);
    if (v10 < v9)
    {
      v11 = v10 + (v10 >> 2);
      if (v11 >= 0x10)
        v12 = v11 + 1;
      else
        v12 = 16;
      if (v12 <= v9)
        v13 = v9;
      else
        v13 = v12;
      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)(a1 + 48), v13);
    }
    if (*v6)
      bzero((void *)(*v6 + 8 * *(unsigned int *)(a1 + 60)), 8 * v9 - 8 * *(unsigned int *)(a1 + 60));
    *(_DWORD *)(a1 + 60) = v9;
    v14 = (_QWORD *)(a1 + 64);
    v15 = *a2 + 1;
    v16 = *(unsigned int *)(a1 + 72);
    if (v16 < v15)
    {
      v17 = v16 + (v16 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v15)
        v19 = *a2 + 1;
      else
        v19 = v18;
      WTF::Vector<WTF::WeakPtr<WebCore::PlatformGamepad,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 64), v19);
    }
    if (*v14)
    {
      v20 = *(unsigned int *)(a1 + 76);
      if ((_DWORD)v20 != (_DWORD)v15)
        bzero((void *)(*v14 + 8 * v20), (8 * v15 - 8 * v20) & 0xFFFFFFFFFFFFFFF8);
    }
    *(_DWORD *)(a1 + 76) = v15;
    v7 = *a2;
    v8 = *(_DWORD *)(a1 + 60);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 60);
  }
  if (v8 <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1975B8520);
  }
  if (*(_QWORD *)(*v6 + 8 * v7))
  {
    a3 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v46 = "(!m_gamepads[gamepadData.index()])";
      _os_log_fault_impl(&dword_196BCC000, a3, OS_LOG_TYPE_FAULT, "Exiting: %{public}s is false", buf, 0xCu);
    }
    v32 = (unsigned int *)WTFCrashWithInfoImpl(88, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/Gamepad/WebGamepadProvider.cpp", "void WebKit::WebGamepadProvider::gamepadConnected(const GamepadData &, EventMakesGamepadsVisible)");
LABEL_51:
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, v23);
    goto LABEL_40;
  }
  v21 = WTF::fastMalloc((WTF *)0x60);
  v22 = WebKit::WebGamepad::WebGamepad(v21, (uint64_t)a2);
  v24 = *a2;
  v25 = *(_DWORD *)(a1 + 60);
  if (v25 <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1975B8528);
  }
  v26 = *(_QWORD *)(*v6 + 8 * v24);
  *(_QWORD *)(*v6 + 8 * v24) = v22;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    LODWORD(v24) = *a2;
    v25 = *(_DWORD *)(a1 + 60);
  }
  if (v25 <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1975B8530);
  }
  v27 = *(_QWORD *)(*v6 + 8 * v24);
  if (v27)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v27 + 8), *(_QWORD *)(*v6 + 8 * v24));
    v28 = *(unsigned int **)(v27 + 8);
    if (v28)
    {
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
  }
  else
  {
    v28 = 0;
  }
  v30 = *a2;
  if (*(_DWORD *)(a1 + 76) <= v30)
  {
    __break(0xC471u);
LABEL_57:
    JUMPOUT(0x1975B8518);
  }
  v31 = *(_QWORD *)(a1 + 64);
  v32 = *(unsigned int **)(v31 + 8 * v30);
  *(_QWORD *)(v31 + 8 * v30) = v28;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      goto LABEL_51;
  }
LABEL_40:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 32), buf);
  v35 = *(_QWORD *)(a1 + 32);
  if (v35)
  {
    v36 = *(unsigned int *)(v35 - 4);
    v37 = v35 + 8 * v36;
  }
  else
  {
    v37 = 0;
    v36 = 0;
  }
  v40 = a1 + 32;
  v41 = v37;
  v42 = v37;
  v43 = v37;
  v44 = v35 + 8 * v36;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v40);
  while (*(_QWORD *)&v46[4] != v41)
  {
    v39 = *a2;
    if (*(_DWORD *)(a1 + 60) <= v39)
    {
      __break(0xC471u);
      goto LABEL_57;
    }
    (*(void (**)(_QWORD, _QWORD, NSObject *))(**(_QWORD **)(**(_QWORD **)&v46[4] + 8) + 16))(*(_QWORD *)(**(_QWORD **)&v46[4] + 8), *(_QWORD *)(*v6 + 8 * v39), a3);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  return result;
}

_QWORD *WebKit::WebGamepadProvider::gamepadDisconnected(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  _BYTE v18[12];
  uint64_t v19;

  v2 = (uint64_t)this;
  v19 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 15) <= a2)
  {
    v4 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v18 = "(m_gamepads.size() > index)";
      _os_log_fault_impl(&dword_196BCC000, v4, OS_LOG_TYPE_FAULT, "Exiting: %{public}s is false", buf, 0xCu);
    }
    v6 = (unsigned int *)WTFCrashWithInfoImpl(99, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/Gamepad/WebGamepadProvider.cpp", "void WebKit::WebGamepadProvider::gamepadDisconnected");
LABEL_18:
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
    goto LABEL_6;
  }
  v3 = this[6];
  v4 = *(NSObject **)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = 0;
  if (*((_DWORD *)this + 19) <= a2)
  {
    __break(0xC471u);
    return this;
  }
  v5 = this[8];
  v6 = *(unsigned int **)(v5 + 8 * a2);
  *(_QWORD *)(v5 + 8 * a2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      goto LABEL_18;
  }
LABEL_6:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v2 + 32), buf);
  v9 = *(_QWORD *)(v2 + 32);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    v11 = v9 + 8 * v10;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = v2 + 32;
  v13 = v11;
  v14 = v11;
  v15 = v11;
  v16 = v9 + 8 * v10;
  this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (*(_QWORD *)&v18[4] != v13)
  {
    (*(void (**)(_QWORD, NSObject *))(**(_QWORD **)(**(_QWORD **)&v18[4] + 8) + 24))(*(_QWORD *)(**(_QWORD **)&v18[4] + 8), v4);
    this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if (v4)
    return (_QWORD *)(*((uint64_t (**))v4->isa + 1))(v4);
  return this;
}

_QWORD *WebKit::WebGamepadProvider::gamepadActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t i;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v5)
  {
    v7 = 0;
    for (i = 0; i < v5; ++i)
    {
      result = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * i);
      if (result)
      {
        if (i >= *(unsigned int *)(a2 + 12))
        {
          __break(0xC471u);
          return result;
        }
        v10 = *(_QWORD *)a2 + v7;
        if (*(_BYTE *)(v10 + 72))
        {
          WebKit::WebGamepad::updateValues((uint64_t)result, v10);
          v5 = *(unsigned int *)(a1 + 60);
        }
      }
      v7 += 80;
    }
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 32), &v19);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = v11 + 8 * v12;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = a1 + 32;
  v15 = v13;
  v16 = v13;
  v17 = v13;
  v18 = v11 + 8 * v12;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  while (v20 != v15)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v20 + 8) + 32))(*(_QWORD *)(*(_QWORD *)v20 + 8), a3);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
  }
  return result;
}

unsigned int *WebKit::WebGamepadProvider::startMonitoringGamepads(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void *v5;
  _BOOL4 isEmptyIgnoringNullReferences;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  unsigned int *result;
  unsigned int v30;
  unsigned int v31;
  WebKit::WebProcess *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  IPC::Encoder *v39[3];
  WTF *v40;

  v4 = (uint64_t *)(a1 + 32);
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 32));
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  if (v8 > v7)
  {
    v9 = *v4;
    if (*v4)
    {
      v10 = *(_DWORD *)(v9 - 4);
      if (!v10)
        goto LABEL_25;
      v11 = 0;
      do
      {
        while (1)
        {
          v12 = *(_QWORD *)(v9 + 8 * --v10);
          if ((unint64_t)(v12 + 1) >= 2 && !*(_QWORD *)(v12 + 8))
            break;
          if (!v10)
            goto LABEL_14;
        }
        *(_QWORD *)(v9 + 8 * v10) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          WTF::fastFree((WTF *)v12, v5);
        }
        *(_QWORD *)(v9 + 8 * v10) = -1;
        ++v11;
      }
      while (v10);
LABEL_14:
      v9 = *v4;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        v15 = *v4;
        if (*v4)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v11;
        v9 = *v4;
      }
      if (v9)
      {
        v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          v9 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          if (!v9)
          {
            v19 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 40) = 0;
LABEL_28:
        v19 = *(_DWORD *)(v9 - 12);
        v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 44) = 2 * v20;
          goto LABEL_31;
        }
LABEL_29:
        v20 = v19;
        goto LABEL_30;
      }
    }
    v19 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v21 = *(_QWORD *)(a2 + 8);
  if (!v21)
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = a2;
    v23 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v21;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v22);
      }
      v21 = *(_QWORD *)(a2 + 8);
    }
  }
  do
    v26 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v26 + 1, (unsigned int *)v21));
  do
    v27 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v27 + 1, (unsigned int *)v21));
  v40 = (WTF *)v21;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, &v40, (uint64_t)v39);
  result = (unsigned int *)v40;
  v40 = 0;
  if (result)
  {
    do
    {
      v37 = __ldaxr(result);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, result));
    if (!v38)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v28);
    }
  }
  if (!v21)
    goto LABEL_43;
  do
  {
    v30 = __ldaxr((unsigned int *)v21);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v21));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v21);
    result = (unsigned int *)WTF::fastFree((WTF *)v21, v28);
    if (!isEmptyIgnoringNullReferences)
      return result;
  }
  else
  {
LABEL_43:
    if (!isEmptyIgnoringNullReferences)
      return result;
  }
  {
    v32 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v32);
  }
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 2541;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v39[0] = (IPC::Encoder *)v33;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v32 + 2) + 32))((_QWORD *)v32 + 2, v39, 0);
  result = (unsigned int *)v39[0];
  v39[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v34);
    return (unsigned int *)WTF::fastFree(v35, v36);
  }
  return result;
}

IPC::Encoder *WebKit::WebGamepadProvider::stopMonitoringGamepads(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t v21;
  IPC::Encoder *result;
  WebKit::WebProcess *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  _QWORD v34[2];
  IPC::Encoder *v35;

  v4 = (uint64_t *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v6;
  if (v6 > v5)
  {
    v7 = *v4;
    if (*v4)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          v10 = *(_QWORD *)(v7 + 8 * --v8);
          if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          WTF::fastFree((WTF *)v10, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v4;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v13 = *v4;
        if (*v4)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v9;
        v7 = *v4;
      }
      if (v7)
      {
        v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          v7 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          if (!v7)
          {
            v17 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 40) = 0;
LABEL_28:
        v17 = *(_DWORD *)(v7 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 44) = 2 * v18;
          goto LABEL_31;
        }
LABEL_29:
        v18 = v17;
        goto LABEL_30;
      }
    }
    v17 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v19 = a2[1];
  if (v19 && *(_QWORD *)(v19 + 8))
  {
    v34[0] = a2[1];
    v20 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, v34);
    if (*v4)
    {
      v21 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v21 == v20)
        goto LABEL_40;
    }
    else
    {
      if (!v20)
        goto LABEL_40;
      v21 = 0;
    }
    if ((unsigned int **)v21 != v20)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v20);
  }
LABEL_40:
  result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v4);
  if ((_DWORD)result)
  {
    {
      v23 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v23);
    }
    v25 = *((_QWORD *)v23 + 2);
    v24 = (_QWORD *)((char *)v23 + 16);
    v26 = (*(uint64_t (**)(_QWORD *))(v25 + 56))(v24);
    v27 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v27 = 2543;
    *(_QWORD *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 528) = v27 + 16;
    *(_QWORD *)(v27 + 536) = v27 + 16;
    *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v27 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
    v35 = (IPC::Encoder *)v27;
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E34E9C80;
    v28[1] = a1;
    v29 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v34[0] = v28;
    v34[1] = v29;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v24 + 40))(v24, &v35, v34, 0);
    v31 = v34[0];
    v34[0] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    result = v35;
    v35 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v30);
      return (IPC::Encoder *)WTF::fastFree(v32, v33);
    }
  }
  return result;
}

uint64_t WebKit::WebGamepadProvider::platformGamepads(WebKit::WebGamepadProvider *this)
{
  return (uint64_t)this + 64;
}

IPC::Encoder *WebKit::WebGamepadProvider::playEffect(uint64_t a1, int a2, uint64_t *a3, char a4, uint64_t *a5, uint64_t *a6)
{
  WebKit::WebProcess *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  IPC::Encoder *result;
  WTF *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  size_t v43;
  _QWORD v45[2];
  IPC::Encoder *v46;

  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
  }
  v12 = *((_QWORD *)v10 + 2);
  v11 = (_QWORD *)((char *)v10 + 16);
  v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v11);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2539;
  *(_QWORD *)(v14 + 8) = v13;
  v15 = (void *)(v14 + 16);
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v46 = (IPC::Encoder *)v14;
  v16 = *(_QWORD *)(v14 + 544);
  v17 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = v17 + 4;
  v19 = *(_QWORD *)(v14 + 552);
  if (v19 < v17 + 4)
  {
    v35 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v36 = v35;
      v35 *= 2;
    }
    while (v36 < v18);
    v43 = v36;
    v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
    if (v37 == (char *)-1)
      goto LABEL_25;
    v20 = v37;
    memcpy(v37, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v38 = *(void **)(v14 + 528);
    if (v38 != v15)
      munmap(v38, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v20;
    *(_QWORD *)(v14 + 552) = v43;
    v16 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v20 = *(char **)(v14 + 528);
  }
  bzero(&v20[v16], v17 - v16);
  *(_QWORD *)(v14 + 544) = v18;
  v21 = (_DWORD *)(*(_QWORD *)(v14 + 528) + v17);
  *(_QWORD *)(v14 + 536) = v21 + 1;
  *v21 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
  v22 = *(_QWORD *)(v14 + 544);
  v23 = v22 + 1;
  v24 = *(_QWORD *)(v14 + 552);
  if (v24 >= v22 + 1)
  {
    v25 = *(char **)(v14 + 528);
    v26 = *(_QWORD *)(v14 + 544);
    goto LABEL_7;
  }
  v39 = (2 * v24 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v40 = v39;
    v39 *= 2;
  }
  while (v40 < v23);
  v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
  if (v41 == (char *)-1)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1975B90DCLL);
  }
  v25 = v41;
  memcpy(v41, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
  v42 = *(void **)(v14 + 528);
  if (v42 != v15)
    munmap(v42, *(_QWORD *)(v14 + 552));
  *(_QWORD *)(v14 + 528) = v25;
  *(_QWORD *)(v14 + 552) = v40;
  v26 = *(_QWORD *)(v14 + 544);
LABEL_7:
  bzero(&v25[v26], v22 - v26);
  *(_QWORD *)(v14 + 544) = v23;
  v27 = (_BYTE *)(*(_QWORD *)(v14 + 528) + v22);
  *(_QWORD *)(v14 + 536) = v27 + 1;
  *v27 = a4;
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((IPC::Encoder *)v14, a5);
  v28 = *a6;
  *a6 = 0;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = &off_1E34E9CA8;
  v29[1] = v28;
  v45[0] = v29;
  v45[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v11 + 40))(v11, &v46, v45, 0);
  v31 = v45[0];
  v45[0] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  result = v46;
  v46 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v30);
    return (IPC::Encoder *)WTF::fastFree(v33, v34);
  }
  return result;
}

char *WebKit::WebGamepadProvider::stopEffects(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  WebKit::WebProcess *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  char *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  _QWORD v28[2];
  IPC::Encoder *v29;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v7);
  }
  v9 = *((_QWORD *)v7 + 2);
  v8 = (_QWORD *)((char *)v7 + 16);
  v10 = (*(uint64_t (**)(_QWORD *))(v9 + 56))(v8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2542;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v29 = (IPC::Encoder *)v11;
  v12 = *(_QWORD *)(v11 + 544);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *(_QWORD *)(v11 + 552);
  if (v15 < v13 + 4)
  {
    v25 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v14);
    result = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v16 = result;
    memcpy(result, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v27 = *(void **)(v11 + 528);
    if (v27 != (void *)(v11 + 16))
      munmap(v27, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v16;
    *(_QWORD *)(v11 + 552) = v26;
    v12 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v16 = *(char **)(v11 + 528);
  }
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(v11 + 544) = v14;
  v17 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v13);
  *(_QWORD *)(v11 + 536) = v17 + 1;
  *v17 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  v18 = *a4;
  *a4 = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = &off_1E34E9CD0;
  v19[1] = v18;
  v28[0] = v19;
  v28[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v8 + 40))(v8, &v29, v28, 0);
  v21 = v28[0];
  v28[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  result = (char *)v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
    return (char *)WTF::fastFree(v23, v24);
  }
  return result;
}

void WebKit::GeolocationPermissionRequestManager::~GeolocationPermissionRequestManager(WebKit::GeolocationPermissionRequestManager *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*(_QWORD *)this, a2);
}

void WebKit::GeolocationPermissionRequestManager::startRequestForGeolocation(WebKit::GeolocationPermissionRequestManager *this, WebCore::Geolocation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  void *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  WebKit::WebFrame *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  IPC::Encoder *v66;
  WTF *v67;
  void *v68;
  WTF::StringImpl *v69;
  CFTypeRef v70;
  WebKit::WebFrame *v71;
  uint64_t IdentifierInternal;
  IPC::Encoder *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  CFTypeRef cf;
  uint64_t v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = WebCore::Geolocation::frame(a2);
  if (!v4)
  {
    v74 = 0;
    WebCore::Geolocation::setIsAllowed(a2, 0, (const WTF::String *)&v74);
    v22 = v74;
    v74 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    return;
  }
  v5 = v4;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v6 = (uint64_t *)((char *)this + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
  v7 = *((_QWORD *)a2 + 5);
  do
    v8 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v8 + 1, (unsigned int *)v7));
  v9 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::expand((uint64_t *)this + 1, 0), (v9 = *v6) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = *(_QWORD *)(v7 + 8);
  v13 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (uint64_t *)(v9 + 16 * v18);
    v20 = *v19;
    if (*v19 == -1)
    {
      v11 = v9 + 16 * v18;
      goto LABEL_13;
    }
    if (!v20)
    {
      if (v11)
      {
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        --*(_DWORD *)(*v6 - 16);
        *(_QWORD *)v11 = v7;
      }
      else
      {
        *v19 = v7;
        v11 = v9 + 16 * v18;
      }
      *(_QWORD *)(v11 + 8) = IdentifierInternal;
      v25 = *v6;
      if (*v6)
        v26 = *(_DWORD *)(v25 - 12) + 1;
      else
        v26 = 1;
      *(_DWORD *)(v25 - 12) = v26;
      v27 = *v6;
      if (*v6)
        v28 = *(_DWORD *)(v27 - 12);
      else
        v28 = 0;
      v29 = (*(_DWORD *)(v27 - 16) + v28);
      v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400)
      {
        if (v30 > 2 * v29)
          goto LABEL_34;
      }
      else if (3 * v30 > 4 * v29)
      {
        goto LABEL_34;
      }
      WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::expand((uint64_t *)this + 1, (unsigned int **)v11);
      goto LABEL_34;
    }
    if (*(_QWORD *)(v20 + 8) == v12)
      break;
LABEL_13:
    v16 = i + v18;
  }
  *(_QWORD *)(v9 + 16 * v18 + 8) = IdentifierInternal;
  if (v7)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v7);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v7));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::fastFree((WTF *)v7, (void *)v11);
    }
  }
LABEL_34:
  v31 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this, 0), (v31 = *(_QWORD *)this) != 0))
  {
    v32 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = IdentifierInternal;
  v34 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = v32 & ((v36 >> 31) ^ v36);
  v38 = (uint64_t *)(v31 + 16 * v37);
  v39 = *v38;
  if (!*v38)
  {
LABEL_45:
    *v38 = v33;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
    v43 = (unsigned int *)*((_QWORD *)a2 + 5);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v45 = (unsigned int *)v38[1];
    v38[1] = (uint64_t)v43;
    if (v45)
    {
      do
      {
        v48 = __ldaxr(v45);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v45));
      if (!v49)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v42);
      }
    }
    v46 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v56 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v57 = *(_DWORD *)(v56 - 12);
    else
      v57 = 0;
    v58 = (*(_DWORD *)(v56 - 16) + v57);
    v59 = *(unsigned int *)(v56 - 4);
    if (v59 > 0x400)
    {
      if (v59 > 2 * v58)
        goto LABEL_66;
    }
    else if (3 * v59 > 4 * v58)
    {
      goto LABEL_66;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this, v38);
    goto LABEL_66;
  }
  v40 = 0;
  v41 = 1;
  while (v39 != IdentifierInternal)
  {
    if (v39 == -1)
      v40 = v38;
    v37 = (v37 + v41) & v32;
    v38 = (uint64_t *)(v31 + 16 * v37);
    v39 = *v38;
    ++v41;
    if (!*v38)
    {
      if (v40)
      {
        *v40 = 0;
        v40[1] = 0;
        --*(_DWORD *)(*(_QWORD *)this - 16);
        v38 = v40;
      }
      goto LABEL_45;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
  v51 = (unsigned int *)*((_QWORD *)a2 + 5);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 + 1, v51));
  v53 = (unsigned int *)v38[1];
  v38[1] = (uint64_t)v51;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      WTF::fastFree((WTF *)v53, v50);
    }
  }
LABEL_66:
  WebKit::WebFrame::fromCoreFrame(v5, &v71);
  v60 = (_QWORD *)*((_QWORD *)this + 2);
  v61 = v71;
  WebKit::WebFrame::info(v71, (uint64_t)&v74);
  v62 = v60[4];
  v60 += 4;
  v63 = (*(uint64_t (**)(_QWORD *))(v62 + 56))(v60);
  v64 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v64 = 2010;
  *(_QWORD *)(v64 + 8) = v63;
  *(_QWORD *)(v64 + 528) = v64 + 16;
  *(_QWORD *)(v64 + 536) = v64 + 16;
  *(_OWORD *)(v64 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v64 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v64);
  v73 = (IPC::Encoder *)v64;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v64, &IdentifierInternal);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v64, (char *)&v74);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v60 + 32))(v60, &v73, 0);
  v66 = v73;
  v73 = 0;
  if (v66)
  {
    IPC::Encoder::~Encoder(v66, v65);
    WTF::fastFree(v67, v68);
  }
  v69 = v79;
  v79 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v65);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (v78 != -1)
    ((void (*)(IPC::Encoder **, uint64_t *))off_1E34E9BE8[v78])(&v73, &v77);
  v78 = -1;
  v70 = cf;
  cf = 0;
  if (v70)
    CFRelease(v70);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v75);
  if (v61)
    CFRelease(*((CFTypeRef *)v61 + 1));
}

IPC::Encoder *WebKit::GeolocationPermissionRequestManager::revokeAuthorizationToken(WebKit::GeolocationPermissionRequestManager *this, const WTF::String *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v4 = v3[4];
  v3 += 4;
  v5 = (*(uint64_t (**)(_QWORD *))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2019;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, (uint64_t *)a2);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v3 + 32))(v3, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t *WebKit::GeolocationPermissionRequestManager::cancelRequestForGeolocation(WebKit::GeolocationPermissionRequestManager *this, WebCore::Geolocation *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  WebCore::Geolocation *v6;
  uint64_t v7;
  WebCore::Geolocation *v8;

  v3 = (uint64_t *)((char *)this + 8);
  v8 = a2;
  result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WebCore::Geolocation const*>((uint64_t *)this + 1, &v8);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    if ((uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4)) == result)
      return result;
  }
  else if (!result)
  {
    return result;
  }
  v6 = (WebCore::Geolocation *)result[1];
  result = WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::remove(v3, (unsigned int **)result);
  v8 = v6;
  if (!v6)
    return result;
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this, &v8);
  if (*(_QWORD *)this)
  {
    v7 = *(_QWORD *)this + 16 * *(unsigned int *)(*(_QWORD *)this - 4);
    if ((uint64_t *)v7 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v7 = 0;
  }
  if ((uint64_t *)v7 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)this, result);
  return result;
}

unsigned int *WebKit::GeolocationPermissionRequestManager::didReceiveGeolocationPermissionDecision(uint64_t *a1, uint64_t a2, const WTF::String *a3)
{
  _QWORD *v5;
  void *v6;
  unsigned int *result;
  WTF *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;

  v16 = a2;
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v16);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take(a1, v5, &v17);
  result = (unsigned int *)v17;
  if (v17)
  {
    v8 = (WTF *)*((_QWORD *)v17 + 1);
    if (v8)
    {
      ++*((_DWORD *)v8 + 8);
      v17 = 0;
      do
      {
        v9 = __ldaxr(result);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, result));
      if (!v10)
      {
        atomic_store(1u, result);
        WTF::fastFree((WTF *)result, v6);
      }
      v17 = v8;
      v11 = (unsigned int **)WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WebCore::Geolocation const*>(a1 + 1, &v17);
      v12 = a1[1];
      if (v12)
      {
        v13 = (unsigned int **)(v12 + 16 * *(unsigned int *)(v12 - 4));
        if (v13 == v11)
          goto LABEL_14;
      }
      else
      {
        if (!v11)
        {
LABEL_14:
          WebCore::Geolocation::setIsAllowed(v8, *(_QWORD *)a3 != 0, a3);
          return WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)v8 + 8);
        }
        v13 = 0;
      }
      if (v13 != v11)
        WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::remove(a1 + 1, v11);
      goto LABEL_14;
    }
    v17 = 0;
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void WebKit::WebGeolocationManager::~WebGeolocationManager(WebKit::WebGeolocationManager *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  *(_QWORD *)this = off_1E34E9A98;
  *((_QWORD *)this + 1) = &unk_1E34E9AD8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = v3 + 16 * i;
        v7 = *(unsigned int **)v6;
        if (*(_QWORD *)v6 != -1)
        {
          v8 = *(WTF::StringImpl **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
            {
              WTF::StringImpl::destroy(v8, a2);
              v7 = *(unsigned int **)v6;
            }
            else
            {
              *(_DWORD *)v8 -= 2;
            }
          }
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            do
            {
              v9 = __ldaxr(v7);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v7));
            if (!v10)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)this + 3);
      do
      {
        if (*(_QWORD *)v13 != -1)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v14, a2);
          v15 = *(_QWORD *)(v13 + 8);
          if (v15)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, a2);
          v16 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, a2);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        v13 += 40;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebGeolocationManager::~WebGeolocationManager(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebGeolocationManager::~WebGeolocationManager(WebKit::WebGeolocationManager *this, WTF::StringImpl *a2)
{
  WebKit::WebGeolocationManager::~WebGeolocationManager((WebKit::WebGeolocationManager *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebGeolocationManager::~WebGeolocationManager((WebKit::WebGeolocationManager *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::WebGeolocationManager::registerWebPage(WTF::StringImpl *this, WebKit::WebPage *a2, const WTF::String *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL4 isEmptyIgnoringNullReferences;
  _QWORD **v33;
  int v34;
  void *v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  void *v47;
  unsigned int v48;
  unsigned int **v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int **v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  WebKit::WebProcess *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  IPC::Encoder *v68;
  WTF *v69;
  void *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  char v74;
  WebKit::WebProcess *v75;
  uint64_t v76;
  WebKit::WebProcess *v77;
  WebKit::WebProcess *v78;
  uint64_t *v79;
  int v80;
  WTF *v81;
  char v82;
  WTF::StringImpl *v83;

  v4 = *((_QWORD *)a2 + 6);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v4 + 160);
  if (!v5 || *(_BYTE *)(v5 + 144) != 0)
    return this;
  v7 = *(_QWORD *)(v5 + 296);
  if (!v7)
    return this;
  v11 = this;
  this = (WTF::StringImpl *)WebCore::RegistrableDomain::RegistrableDomain(&v83, (const WTF::URL *)(v7 + 736));
  if (!v83)
    return this;
  if (!*((_DWORD *)v83 + 1))
    goto LABEL_85;
  v79 = (uint64_t *)a3;
  v13 = (uint64_t *)((char *)v11 + 24);
  v14 = *((_QWORD *)v11 + 3);
  v80 = a4;
  if (v14
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)v11 + 3, 0), (v14 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = WTF::ASCIICaseInsensitiveHash::hash(v83, v12) & v15;
  v17 = v14 + 40 * v16;
  if ((WTF::equal(*(WTF **)v17, 0, v18) & 1) == 0)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (*(_QWORD *)v17 == -1)
      {
        v20 = v17;
      }
      else if ((WTF::equalIgnoringASCIICase(*(WTF **)v17, v83, v19) & 1) != 0)
      {
        goto LABEL_35;
      }
      v16 = (v16 + v21) & v15;
      v17 = v14 + 40 * v16;
      ++v21;
    }
    while (!WTF::equal(*(WTF **)v17, 0, v19));
    if (v20)
    {
      *(_QWORD *)(v20 + 32) = 0;
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      --*(_DWORD *)(*v13 - 16);
      v17 = v20;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v17, (WTF::StringImpl *)&v83);
  v23 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = 0;
  if (v23)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v23, v22);
  v24 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  if (v24)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v22);
  *(_QWORD *)(v17 + 32) = 0;
  v25 = *v13;
  if (*v13)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v13;
  if (*v13)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (3 * v30 <= 4 * v29)
LABEL_34:
    v17 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)v11 + 3, (WTF::ASCIICaseInsensitiveHash **)v17);
LABEL_35:
  v31 = v17 + 8;
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v17 + 8));
  v33 = (_QWORD **)(v17 + 24);
  v34 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v17 + 24));
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>(v31, (unsigned int *)a2, (uint64_t)&v81);
  if (v80)
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)v33, (unsigned int *)a2, (uint64_t)&v81);
  v36 = (uint64_t *)((char *)v11 + 32);
  v37 = *((_DWORD *)v11 + 10);
  v38 = *((_DWORD *)v11 + 11);
  *((_DWORD *)v11 + 10) = v37 + 1;
  if (v37 > v38)
    WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v11 + 32, v35);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v40 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 + 1, v40));
  v81 = (WTF *)v40;
  if (v40)
  {
    do
    {
      v43 = __ldaxr(v40);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v40));
    if (!v44)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v39);
    }
  }
  v45 = *v36;
  if (*v36
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)v11 + 4, 0), (v45 = *v36) != 0))
  {
    v46 = *(_DWORD *)(v45 - 8);
  }
  else
  {
    v46 = 0;
  }
  v48 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(&v81);
  v49 = 0;
  v50 = 1;
  v51 = (unsigned int *)v81;
  while (1)
  {
    v52 = v48 & v46;
    v53 = (unsigned int **)(v45 + 16 * v52);
    v54 = *v53;
    if (*v53 == (unsigned int *)-1)
    {
      v49 = (unsigned int **)(v45 + 16 * v52);
      goto LABEL_55;
    }
    if (!v54)
      break;
    if (v54 == (unsigned int *)v81)
      goto LABEL_72;
LABEL_55:
    v48 = v50 + v52;
    ++v50;
  }
  if (v49)
  {
    *v49 = 0;
    v49[1] = 0;
    --*(_DWORD *)(*v36 - 16);
    v53 = v49;
  }
  v81 = 0;
  v55 = *v53;
  *v53 = v51;
  if (v55)
  {
    do
    {
      v58 = __ldaxr(v55);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v55));
    if (!v59)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v47);
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v53 + 1, (WTF::StringImpl *)&v83);
  v56 = *v36;
  if (*v36)
    v57 = *(_DWORD *)(v56 - 12) + 1;
  else
    v57 = 1;
  *(_DWORD *)(v56 - 12) = v57;
  v60 = *v36;
  if (*v36)
    v61 = *(_DWORD *)(v60 - 12);
  else
    v61 = 0;
  v62 = (*(_DWORD *)(v60 - 16) + v61);
  v63 = *(unsigned int *)(v60 - 4);
  if (v63 > 0x400)
  {
    if (v63 <= 2 * v62)
LABEL_70:
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v36, v53);
  }
  else if (3 * v63 <= 4 * v62)
  {
    goto LABEL_70;
  }
  v51 = (unsigned int *)v81;
LABEL_72:
  v81 = 0;
  if (v51)
  {
    do
    {
      v71 = __ldaxr(v51);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v51));
    if (!v72)
    {
      atomic_store(1u, v51);
      WTF::fastFree((WTF *)v51, v47);
    }
  }
  if (isEmptyIgnoringNullReferences)
  {
    {
      v64 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v77 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v64 = WebKit::WebProcess::WebProcess(v77);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v64;
    }
    v65 = *((_QWORD *)v64 + 4);
    v66 = *((_QWORD *)a2 + 265);
    v67 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v67 = 1722;
    *(_QWORD *)(v67 + 8) = 0;
    *(_QWORD *)(v67 + 528) = v67 + 16;
    *(_QWORD *)(v67 + 536) = v67 + 16;
    *(_OWORD *)(v67 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v67 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v67);
    v81 = (WTF *)v67;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v67, (uint64_t *)&v83);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v67, 8uLL, 8) = v66;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v67, v79);
    *IPC::Encoder::grow((IPC::Encoder *)v67, 1uLL, 1) = v80;
    IPC::Connection::sendMessageImpl(v65, (uint64_t *)&v81, 0, 0);
    v68 = v81;
    v81 = 0;
    if (v68)
    {
      IPC::Encoder::~Encoder(v68, v12);
      WTF::fastFree(v69, v70);
    }
  }
  else
  {
    v73 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v33);
    if (v34 != v73)
    {
      v74 = v73 ^ 1;
      {
        v75 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v78 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v75 = WebKit::WebProcess::WebProcess(v78);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v75;
      }
      v76 = *((_QWORD *)v75 + 4);
      v81 = (WTF *)&v83;
      v82 = v74;
      IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(v76, (uint64_t)&v81, 0, 0, 0);
    }
  }
LABEL_85:
  this = v83;
  v83 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1721;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a3;
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

WTF::StringImpl *WebKit::WebGeolocationManager::unregisterWebPage(WebKit::WebGeolocationManager *this, WebKit::WebPage *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int isEmptyIgnoringNullReferences;
  WebKit::WebProcess *v11;
  uint64_t v12;
  int v13;
  char v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebProcess *v18;
  WebKit::WebProcess *v19;
  WTF::StringImpl **v20;
  char v21;
  WTF::StringImpl *v22;

  result = (WTF::StringImpl *)WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::take((uint64_t)this + 32, a2, &v22);
  if (!v22)
    return result;
  if (*((_DWORD *)v22 + 1))
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, &v22);
    v8 = (WTF::StringImpl *)v7;
    v9 = *((_QWORD *)this + 3);
    if (v9)
      v9 += 40 * *(unsigned int *)(v9 - 4);
    if (v9 != v7)
    {
      isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v7 + 24));
      WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)v8 + 8, a2);
      WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)v8 + 24, a2);
      if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v8 + 1))
      {
        {
          v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v11 = WebKit::WebProcess::WebProcess(v18);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
        }
        v12 = *((_QWORD *)v11 + 4);
        v20 = &v22;
        IPC::Connection::send<Messages::WebGeolocationManagerProxy::StopUpdating>(v12, (uint64_t **)&v20, 0, 0, 0);
      }
      else
      {
        v13 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v8 + 3);
        if (isEmptyIgnoringNullReferences != v13)
        {
          v14 = v13 ^ 1;
          {
            v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            v15 = WebKit::WebProcess::WebProcess(v19);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
          }
          v16 = *((_QWORD *)v15 + 4);
          v20 = &v22;
          v21 = v14;
          IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(v16, (uint64_t)&v20, 0, 0, 0);
        }
      }
      if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v8 + 1)
        && WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v8 + 3))
      {
        if (*v6)
        {
          v17 = *v6 + 40 * *(unsigned int *)(*v6 - 4);
          if ((WTF::StringImpl *)v17 == v8)
            goto LABEL_23;
        }
        else
        {
          if (!v8)
            goto LABEL_23;
          v17 = 0;
        }
        if ((WTF::StringImpl *)v17 != v8)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v6, v8);
      }
    }
  }
LABEL_23:
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::take@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t *)result;
  v6 = *(_DWORD *)(result + 8);
  v7 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 8) = v6 + 1;
  if (v6 > v7)
    result = WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::removeNullReferences(result, a2);
  v8 = a2[3];
  if (!v8 || !*(_QWORD *)(v8 + 8))
    goto LABEL_11;
  v12 = a2[3];
  result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v12);
  v9 = *v4;
  if (*v4)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if (v9 == result)
  {
LABEL_11:
    *a3 = 0;
    return result;
  }
  v10 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *a3 = v10;
  if (*v4)
  {
    v11 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
    if (v11 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v11 = 0;
  }
  if (v11 != result)
    return (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, (void *)result);
  return result;
}

uint64_t IPC::Connection::send<Messages::WebGeolocationManagerProxy::StopUpdating>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1723;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

WTF::StringImpl *WebKit::WebGeolocationManager::setEnableHighAccuracyForPage(WebKit::WebGeolocationManager *this, WebKit::WebPage *a2, int a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  _BOOL4 isEmptyIgnoringNullReferences;
  BOOL v12;
  BOOL v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  WebKit::WebProcess *v16;
  WTF::StringImpl **v17;
  BOOL v18;
  WTF::StringImpl *v19;

  result = (WTF::StringImpl *)WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::get((uint64_t)this + 32, (uint64_t)a2, &v19);
  if (v19)
  {
    if (*((_DWORD *)v19 + 1))
    {
      v8 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, &v19);
      v9 = *((_QWORD *)this + 3);
      if (v9)
        v9 += 40 * *(unsigned int *)(v9 - 4);
      if (v9 != v8)
      {
        v10 = (_QWORD **)(v8 + 24);
        isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v8 + 24));
        if (a3)
          WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)v10, (unsigned int *)a2, (uint64_t)&v17);
        else
          WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)v10, a2);
        v12 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v10);
        if (isEmptyIgnoringNullReferences != WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v10))
        {
          v13 = !v12;
          {
            v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            v14 = WebKit::WebProcess::WebProcess(v16);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
          }
          v15 = *((_QWORD *)v14 + 4);
          v17 = &v19;
          v18 = v13;
          IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(v15, (uint64_t)&v17, 0, 0, 0);
        }
      }
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::get@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  ++*(_DWORD *)(result + 8);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 && *(_QWORD *)(v3 + 8))
    return WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(result, v3, a3);
  *a3 = 0;
  return result;
}

uint64_t WebKit::WebGeolocationManager::didChangePosition(WebKit::WebGeolocationManager *this, WTF::ASCIICaseInsensitiveHash **a2, const WebCore::GeolocationPositionData *a3)
{
  uint64_t result;
  uint64_t v6;
  WebCore::GeolocationController *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[7];
  char v19;
  uint64_t v20;
  uint64_t v21;

  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, a2);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v6 += 40 * *(unsigned int *)(v6 - 4);
  if (v6 != result)
  {
    v20 = 0;
    v21 = 0;
    v7 = (WebCore::GeolocationController *)WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v20, (_DWORD *)(result + 8));
    if (HIDWORD(v21))
    {
      v9 = v20;
      v10 = 8 * HIDWORD(v21);
      do
      {
        if (*(_QWORD *)v9)
        {
          v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
          if (v11)
            v12 = v11 - 16;
          else
            v12 = 0;
          v13 = *(_QWORD *)(v12 + 48);
          if (v13)
          {
            *(_QWORD *)&v18[0] = WebCore::GeolocationController::supplementName(v7);
            *((_QWORD *)&v18[0] + 1) = v14;
            WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v13 + 8), (WTF::ASCIILiteralHash *)v18);
            v15 = *((_OWORD *)a3 + 5);
            v18[4] = *((_OWORD *)a3 + 4);
            v18[5] = v15;
            v18[6] = *((_OWORD *)a3 + 6);
            v16 = *((_OWORD *)a3 + 1);
            v18[0] = *(_OWORD *)a3;
            v18[1] = v16;
            v17 = *((_OWORD *)a3 + 3);
            v18[2] = *((_OWORD *)a3 + 2);
            v18[3] = v17;
            v19 = 1;
            v7 = (WebCore::GeolocationController *)WebCore::GeolocationController::positionChanged();
          }
        }
        v9 += 8;
        v10 -= 8;
      }
      while (v10);
    }
    return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  }
  return result;
}

WTF::StringImpl **WebKit::WebGeolocationManager::didFailToDeterminePosition(WebKit::WebGeolocationManager *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **result;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WebCore::GeolocationController *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, a2);
  v6 = (uint64_t)result;
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v7)
    v7 += 5 * *((unsigned int *)v7 - 1);
  if (v7 != result)
  {
    v8 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
    v9 = v8;
    *v8 = (WTF::StringImpl *)0x100000001;
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v8[1] = v10;
    v20 = 0;
    v21 = 0;
    v11 = (WebCore::GeolocationController *)WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v20, (_DWORD *)(v6 + 8));
    if (HIDWORD(v21))
    {
      v13 = v20;
      v14 = 8 * HIDWORD(v21);
      do
      {
        if (*(_QWORD *)v13)
        {
          v15 = *(_QWORD *)(*(_QWORD *)v13 + 8);
          if (v15)
            v16 = v15 - 16;
          else
            v16 = 0;
          v17 = *(_QWORD *)(v16 + 48);
          if (v17)
          {
            v22[0] = WebCore::GeolocationController::supplementName(v11);
            v22[1] = v18;
            WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v17 + 8), (WTF::ASCIILiteralHash *)v22);
            v11 = (WebCore::GeolocationController *)WebCore::GeolocationController::errorOccurred();
          }
        }
        v13 += 8;
        v14 -= 8;
      }
      while (v14);
    }
    WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
    return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(v9, v19);
  }
  return result;
}

uint64_t WebKit::WebGeolocationManager::resetPermissions(WebKit::WebGeolocationManager *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::LocalFrame *v11;
  uint64_t v12;
  uint64_t v13;

  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    v4 += 40 * *(unsigned int *)(v4 - 4);
  if (v4 == result)
  {
    v12 = 0;
    v13 = 0;
    WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v12, (_DWORD *)(result + 8));
    if (HIDWORD(v13))
    {
      v6 = v12;
      v7 = 8 * HIDWORD(v13);
      do
      {
        if (*(_QWORD *)v6)
        {
          v8 = *(_QWORD *)(*(_QWORD *)v6 + 8);
          if (v8)
            v9 = v8 - 16;
          else
            v9 = 0;
          v10 = *(_QWORD *)(v9 + 48);
          if (v10)
          {
            v11 = *(WebCore::LocalFrame **)(v10 + 160);
            if (!*((_BYTE *)v11 + 144))
              WebCore::LocalFrame::resetAllGeolocationPermission(v11);
          }
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
    return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
  }
  return result;
}

void WebKit::InjectedBundle::~InjectedBundle(WebKit::InjectedBundle *this, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;
  const char ***v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = &off_1E34E9B10;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (const char ***)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  WebKit::InjectedBundle::~InjectedBundle(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::InjectedBundle::postMessage(WebKit::InjectedBundle *this, const WTF::String *a2, API::Object *a3)
{
  API::Object *v3;
  WebKit::WebProcess *v5;
  uint64_t v6;
  WebKit *v7;
  WebKit *v8;
  WebKit *v9;
  WebKit::WebProcess *v10;
  WebKit *v12;
  WebKit *v13;
  uint64_t *v14[2];

  v3 = a3;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v10);
    v3 = a3;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *((_QWORD *)v5 + 4);
  v14[0] = (uint64_t *)&off_1E34E0698;
  WebKit::UserData::transform(v3, (uint64_t)v14, &v12);
  v7 = v12;
  v12 = 0;
  v13 = v7;
  v14[0] = (uint64_t *)a2;
  v14[1] = (uint64_t *)&v13;
  IPC::Connection::send<Messages::WebProcessPool::HandleMessage>(v6, v14, 0, 0, 0);
  v8 = v13;
  v13 = 0;
  if (v8)
    CFRelease(*((CFTypeRef *)v8 + 1));
  v9 = v12;
  v12 = 0;
  if (v9)
    CFRelease(*((CFTypeRef *)v9 + 1));
}

uint64_t IPC::Connection::send<Messages::WebProcessPool::HandleMessage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2538;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v10, a2[1]);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void WebKit::InjectedBundle::postSynchronousMessage(uint64_t a1, uint64_t *a2, const void *a3, CFTypeRef **a4)
{
  const void *v5;
  WebKit::WebProcess *v7;
  uint64_t v8;
  WebKit *v9;
  WebKit *v10;
  WebKit *v11;
  CFTypeRef *v12;
  WebKit *v13;
  CFTypeRef *v14;
  WebKit *v15;
  WebKit::WebProcess *v16;
  WebKit *v18;
  WebKit *v19;
  uint64_t *v20[2];
  uint64_t (**v21)();
  CFTypeRef *v22;
  int v23;

  v5 = a3;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v16);
    v5 = a3;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)v7 + 4);
  v21 = &off_1E34E0698;
  WebKit::UserData::transform(v5, (uint64_t)&v21, &v18);
  v9 = v18;
  v18 = 0;
  v19 = v9;
  v20[0] = a2;
  v20[1] = (uint64_t *)&v19;
  IPC::Connection::sendSync<Messages::WebProcessPool::HandleSynchronousMessage>(v8, v20, 0, 0, (uint64_t)&v21, INFINITY);
  v10 = v19;
  v19 = 0;
  if (v10)
    CFRelease(*((CFTypeRef *)v10 + 1));
  v11 = v18;
  v18 = 0;
  if (v11)
    CFRelease(*((CFTypeRef *)v11 + 1));
  if (v23)
  {
    v12 = *a4;
    *a4 = 0;
  }
  else
  {
    v12 = v22;
    if (v22)
      CFRetain(v22[1]);
    v20[0] = (uint64_t *)&off_1E34E0668;
    WebKit::UserData::transform(v12, (uint64_t)v20, &v19);
    v13 = v19;
    v19 = 0;
    v14 = *a4;
    *a4 = (CFTypeRef *)v13;
    if (v14)
    {
      CFRelease(v14[1]);
      v15 = v19;
      v19 = 0;
      if (v15)
        CFRelease(*((CFTypeRef *)v15 + 1));
    }
  }
  if (v12)
    CFRelease(v12[1]);
  if (v23 != -1)
    ((void (*)(uint64_t **, uint64_t (***)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebProcessPool24HandleSynchronousMessageEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v23])(v20, &v21);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebProcessPool::HandleSynchronousMessage>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  WebKit::InjectedBundle *v21;
  const WTF::String *v22;
  const WTF::String *v23;
  const WTF::String *v24;
  BOOL v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t *v28;
  int v29;
  IPC::Encoder *v30;
  uint64_t v31;

  v31 = 0;
  IPC::Connection::createSyncMessageEncoder(3730, a3, &v31, (uint64_t *)&v30);
  v11 = v30;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v30 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::Encoder::operator<<<std::tuple<WTF::String const&,WebKit::UserData const&>>(v11, a2);
  IPC::Connection::sendSyncMessage(a1, v31, (uint64_t *)&v30, a4, (uint64_t)&v28, a6);
  if (!v29)
  {
    LOBYTE(v26) = 0;
    v27 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::UserData>>(v28, (uint64_t)&v26);
    if (v27)
    {
      if (v29)
        goto LABEL_19;
      v14 = v28;
      v28 = 0;
      v15 = v26;
      if (v26)
      {
        CFRetain(*(CFTypeRef *)(v26 + 8));
        CFRetain(*(CFTypeRef *)(v15 + 8));
        CFRelease(*(CFTypeRef *)(v15 + 8));
        v16 = v27;
        *(_QWORD *)a5 = v14;
        *(_QWORD *)(a5 + 8) = v15;
        *(_DWORD *)(a5 + 16) = 0;
        if (!v16)
          goto LABEL_13;
      }
      else
      {
        *(_QWORD *)a5 = v14;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 0;
      }
      v17 = v26;
      v26 = 0;
      if (v17)
        CFRelease(*(CFTypeRef *)(v17 + 8));
    }
    else
    {
      *(_BYTE *)a5 = 13;
      *(_DWORD *)(a5 + 16) = 1;
    }
LABEL_13:
    v12 = v29;
    if (v29 == -1)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v29 != 1)
  {
LABEL_19:
    v21 = (WebKit::InjectedBundle *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::InjectedBundle::addOriginAccessAllowListEntry(v21, v22, v23, v24, v25);
  }
  *(_BYTE *)a5 = (_BYTE)v28;
  v12 = 1;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_14:
  ((void (*)(uint64_t *, uint64_t **))off_1E34E9CE8[v12])(&v26, &v28);
LABEL_15:
  result = v30;
  v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t WebKit::InjectedBundle::addOriginAccessAllowListEntry(WebKit::InjectedBundle *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WTF::StringImpl *v9;
  WebCore::SecurityPolicy *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WebKit::WebProcess *v14;
  WebCore::SecurityPolicy *v15[3];
  char v16;

  WebCore::SecurityOrigin::createFromString(a2, a2);
  WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(v15[0], a3, a4, a5);
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v9);
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v11) + 24);
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v16 = (char)a5;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::AddOriginAccessAllowListEntry>(v12, (uint64_t **)v15, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::AddOriginAccessAllowListEntry>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 212;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::InjectedBundle::removeOriginAccessAllowListEntry(WebKit::InjectedBundle *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WTF::StringImpl *v9;
  WebCore::SecurityPolicy *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WebKit::WebProcess *v14;
  WebCore::SecurityPolicy *v15[3];
  char v16;

  WebCore::SecurityOrigin::createFromString(a2, a2);
  WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(v15[0], a3, a4, a5);
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v9);
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v11) + 24);
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v16 = (char)a5;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveOriginAccessAllowListEntry>(v12, (uint64_t **)v15, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveOriginAccessAllowListEntry>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 258;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::InjectedBundle::resetOriginAccessAllowLists(WebKit::InjectedBundle *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v4;
  char v5;

  WebCore::SecurityPolicy::resetOriginAccessAllowlists(this);
  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v4);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
  v5 = 0;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ResetOriginAccessAllowLists>(v2, (uint64_t)&v5, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ResetOriginAccessAllowLists>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 262;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

uint64_t WebKit::InjectedBundle::setAsynchronousSpellCheckingEnabled(WebKit::InjectedBundle *this, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E34E9D08;
  *(_BYTE *)(v3 + 8) = a2;
  v5 = v3;
  WebCore::Page::forEachPage();
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t WebKit::InjectedBundle::numberOfPages(WebKit::InjectedBundle *this, WebKit::WebFrame *a2, double a3, double a4, const FloatSize *a5)
{
  uint64_t v5;
  uint64_t v6;
  double v9;
  int v10;
  int v11;
  float v12;
  float v13;
  _DWORD v14[2];

  if (!a2)
    return 0xFFFFFFFFLL;
  v5 = *((_QWORD *)a2 + 3);
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6 || *(_BYTE *)(v6 + 144))
    return 0xFFFFFFFFLL;
  v9 = a3;
  if (a3 == 0.0)
  {
    WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    v9 = (double)v10;
  }
  if (a4 == 0.0)
  {
    WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    a4 = (double)v11;
  }
  v12 = v9;
  v13 = a4;
  *(float *)v14 = v12;
  *(float *)&v14[1] = v13;
  return WebCore::PrintContext::numberOfPages((WebCore::PrintContext *)v6, (WebCore::LocalFrame *)v14, a5);
}

uint64_t WebKit::InjectedBundle::pageNumberForElementById(WebKit::InjectedBundle *this, WebKit::WebFrame *a2, const WTF::String *a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v10;
  unsigned int v11;
  WebCore::Node *v13;

  if (!a2)
    return 0xFFFFFFFFLL;
  v5 = *((_QWORD *)a2 + 3);
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6 || *(_BYTE *)(v6 + 144))
    return 0xFFFFFFFFLL;
  v10 = (unsigned int *)(v6 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  WebCore::TreeScope::getElementById((WebCore::TreeScope *)(*(_QWORD *)(v6 + 296) + 96), a3);
  if (v13)
  {
    if (a4 == 0.0)
      WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    if (a5 == 0.0)
      WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    v7 = WebCore::PrintContext::pageNumberForElement();
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
  return v7;
}

void WebKit::InjectedBundle::pageSizeAndMarginsInPixels(WebKit::WebFrame *a1@<X1>, WebCore::LocalFrame *a2@<X2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, _QWORD *a8@<X8>, int a9)
{
  uint64_t v10;
  WebCore::PrintContext *v11;

  if (a1
    && (v10 = *((_QWORD *)a1 + 3)) != 0
    && (v11 = *(WebCore::PrintContext **)(v10 + 8)) != 0
    && !*((_BYTE *)v11 + 144))
  {
    WebCore::PrintContext::pageSizeAndMarginsInPixels(v11, a2, a3, a4, a5, a6, a7, a9, a9);
  }
  else
  {
    *a8 = 0;
  }
}

uint64_t WebKit::InjectedBundle::isPageBoxVisible(WebKit::InjectedBundle *this, WebKit::WebFrame *a2, WebCore::LocalFrame *a3)
{
  uint64_t v3;
  WebCore::PrintContext *v4;

  if (a2
    && (v3 = *((_QWORD *)a2 + 3)) != 0
    && (v4 = *(WebCore::PrintContext **)(v3 + 8)) != 0
    && !*((_BYTE *)v4 + 144))
  {
    return WebCore::PrintContext::isPageBoxVisible(v4, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t WebKit::InjectedBundle::javaScriptObjectsCount(WebKit::InjectedBundle *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[8];

  v1 = (uint64_t *)MEMORY[0x1E0DD1108];
  if (!*MEMORY[0x1E0DD1108])
    WebCore::commonVMSlow(this);
  MEMORY[0x19AEAA9D8](v5);
  v2 = *v1;
  if (!*v1)
    v2 = WebCore::commonVMSlow(0);
  v3 = JSC::Heap::objectCount((JSC::Heap *)(v2 + 192));
  MEMORY[0x19AEAA9E4](v5);
  return v3;
}

uint64_t WebKit::InjectedBundle::reportException(uint64_t this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  _BYTE v3[8];

  if (this)
  {
    if (a2)
    {
      JSC::JSLockHolder::JSLockHolder();
      WebCore::reportExceptionIfJSDOMWindow();
      return MEMORY[0x19AEAA9E4](v3);
    }
  }
  return this;
}

void WebKit::InjectedBundle::didReceiveMessageToPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 40);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1, a2, a3, a4);
  CFRelease(*(CFTypeRef *)(a1 + 8));
}

uint64_t WebKit::InjectedBundle::setUserStyleSheetLocation(WebKit::InjectedBundle *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  uint64_t v6;

  v2 = *a2;
  if (*a2)
  {
    *(_DWORD *)v2 += 2;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = &off_1E34E9D30;
    *(_DWORD *)v2 += 2;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = &off_1E34E9D30;
  }
  v3[1] = v2;
  v6 = (uint64_t)v3;
  WebCore::Page::forEachPage();
  result = v6;
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WebKit::InjectedBundle::createWebDataFromUint8Array@<X0>(const OpaqueJSValue *a1@<X2>, WebKit **a2@<X8>)
{
  uint64_t v6;
  JSC::ArrayBufferView *v7;
  uint64_t (*v8)();
  JSC::ArrayBufferView *v9;
  const void *v10;
  WTF *v11;
  uint64_t v13;
  JSC::ArrayBufferView *v14;

  JSC::JSLockHolder::JSLockHolder();
  if (a1)
    v6 = (uint64_t)a1;
  else
    v6 = 2;
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 40)
  {
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl((JSC::JSArrayBufferView *)v6, (uint64_t *)&v14);
    v7 = v14;
    if (!v14)
      goto LABEL_16;
    if (JSC::ArrayBufferView::isDetached(v14)
      || (*(_QWORD *)(*((_QWORD *)v7 + 4) + 32)
        ? (v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
        : (v8 = 0),
          !v8))
    {
      v7 = v14;
      goto LABEL_16;
    }
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 != 1)
      {
        v7 = 0;
        --*(_DWORD *)v9;
        goto LABEL_16;
      }
      JSC::ArrayBufferView::operator delete();
    }
  }
  v7 = 0;
LABEL_16:
  v10 = (const void *)JSC::ArrayBufferView::baseAddress(v7);
  v11 = (WTF *)JSC::ArrayBufferView::byteLength(v7);
  API::Data::create(v11, v10, a2);
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v7;
  }
  return MEMORY[0x19AEAA9E4](&v13);
}

uint64_t WebKit::InjectedBundle::liveDocumentURLs@<X0>(WebKit::InjectedBundle *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  result = WebCore::Document::allDocuments(this);
  v6 = v17;
  v7 = v19;
  if (v17 != v19)
  {
    v8 = v18;
    do
    {
      v9 = v6[4];
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(_OWORD *)(v10 + 432);
      v20[0] = *(_OWORD *)(v10 + 416);
      v20[1] = v11;
      result = WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>(a3, v20, (WTF::StringImpl *)(*(_QWORD *)(v9 + 8) + 736), (uint64_t)&v15);
      while (1)
      {
        v6 += 6;
        if (v6 == v8)
          break;
        v12 = v6[2];
        if (*v6 | v6[1] | v12)
          v13 = v12 == -1;
        else
          v13 = 1;
        if (!v13)
          goto LABEL_11;
      }
      v6 = v8;
LABEL_11:
      ;
    }
    while (v6 != v7);
  }
  if ((a2 & 1) != 0)
  {
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E34E9D58;
    v14[1] = a3;
    v16 = (uint64_t)v14;
    WebCore::Page::forEachPage();
    result = v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  __int16 v29;
  char v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v28 = -1640531527;
  v29 = 0;
  v30 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v28, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28);
  v11 = result & v9;
  v12 = v8 + 32 * v11;
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v13 == a2[1] && v14 == *a2)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(unsigned int *)(v20 - 4);
        else
          v21 = 0;
        v27 = 0;
        v26 = v20 + 32 * v21;
        goto LABEL_32;
      }
      if (!(v14 ^ 1 | v13))
        v15 = (_QWORD *)v12;
      v11 = ((_DWORD)v11 + v16) & v9;
      v12 = v8 + 32 * v11;
      v14 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = (uint64_t)v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)(v12 + 16), a3);
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_25:
      result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, v12);
      v12 = result;
      v22 = *a1;
      if (*a1)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_25;
  }
  v26 = v22 + 32 * v25;
  v27 = 1;
LABEL_32:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t WebKit::InjectedBundleClient::willDestroyPage(uint64_t this, WebKit::InjectedBundle *a2, WebKit::WebPage *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(this + 32);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1), *(_QWORD *)(this + 16));
  return this;
}

void WebKit::InjectedBundleClient::didReceiveMessage(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit *v15;

  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 48);
  if (!v4)
    return;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v14 = v8;
  API::String::create(&v14, &v15);
  v10 = v14;
  v11 = v15;
  v14 = 0;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (v11)
        goto LABEL_8;
LABEL_15:
      v12 = 0;
      goto LABEL_9;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v11)
    goto LABEL_15;
LABEL_8:
  v12 = *((_QWORD *)v11 + 1);
LABEL_9:
  if (*(_QWORD *)a4)
    v13 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  else
    v13 = 0;
  v4(v7, v12, v13, *(_QWORD *)(a1 + 16));
  if (v11)
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void WebKit::InjectedBundleClient::didReceiveMessageToPage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebKit *v17;

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 56);
  if (v5)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a3 + 8);
    v10 = *a4;
    if (*a4)
      *(_DWORD *)v10 += 2;
    v16 = v10;
    API::String::create(&v16, &v17);
    v12 = v16;
    v13 = v17;
    v16 = 0;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v13)
      v14 = *((_QWORD *)v13 + 1);
    else
      v14 = 0;
    if (*(_QWORD *)a5)
      v15 = *(_QWORD *)(*(_QWORD *)a5 + 8);
    else
      v15 = 0;
    v5(v8, v9, v14, v15, *(_QWORD *)(a1 + 16));
    if (v13)
      CFRelease(*((CFTypeRef *)v13 + 1));
  }
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
    }
  }
  v11 = *(_QWORD *)(v2 + 16 * v9 + 8);
  if (v11)
    return *(_QWORD *)(v11 + 8);
  else
    return 0;
}

WebKit::InjectedBundleDOMWindowExtension *WebKit::InjectedBundleDOMWindowExtension::InjectedBundleDOMWindowExtension(WebKit::InjectedBundleDOMWindowExtension *this, WebKit::WebFrame *a2, WebKit::InjectedBundleScriptWorld *a3)
{
  uint64_t v6;
  WebCore::LocalFrame *v7;
  WebCore::LocalDOMWindow *v8;
  WebCore::DOMWrapperWorld *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34E9B78;
  v6 = *((_QWORD *)a2 + 3);
  if (v6 && (v7 = *(WebCore::LocalFrame **)(v6 + 8)) != 0 && !*((_BYTE *)v7 + 144))
    v8 = (WebCore::LocalDOMWindow *)WebCore::LocalFrame::window(v7);
  else
    v8 = 0;
  v9 = (WebCore::DOMWrapperWorld *)*((_QWORD *)a3 + 3);
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  *((_QWORD *)this + 3) = WebCore::DOMWindowExtension::DOMWindowExtension((WebCore::DOMWindowExtension *)v10, v8, v9);
  *((_QWORD *)this + 4) = 0;
  {
    WebKit::allExtensions(void)::map = 0;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10 + 2, (uint64_t)v10);
  v11 = (unsigned int *)*((_QWORD *)v10 + 1);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v19 = (WTF *)v11;
  WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleDOMWindowExtension&>(&WebKit::allExtensions(void)::map, (uint64_t *)&v19, (uint64_t)this, (uint64_t)&v18);
  v14 = (unsigned int *)v19;
  v19 = 0;
  if (v14)
  {
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v14));
    if (!v17)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
  }
  return this;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleDOMWindowExtension&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v8 + 16 * v19);
    v21 = (unsigned int *)*v20;
    if (*v20 != -1)
      break;
    v11 = (uint64_t *)(v8 + 16 * v19);
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v12 = *a2;
      v20 = v11;
    }
    *a2 = 0;
    v22 = (unsigned int *)*v20;
    *v20 = v12;
    if (v22)
    {
      do
      {
        v31 = __ldaxr(v22);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v22));
      if (!v32)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
    if (!*(_QWORD *)(a3 + 16))
    {
      v23 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = a3;
      v24 = *(unsigned int **)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v23;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, a2);
        }
      }
    }
    v27 = *(unsigned int **)(a3 + 16);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    result = (uint64_t *)v20[1];
    v20[1] = (uint64_t)v27;
    if (result)
    {
      do
      {
        v33 = __ldaxr((unsigned int *)result);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)result));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      }
    }
    v29 = *v6;
    if (*v6)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v38 = *v6;
    if (*v6)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 <= 2 * v40)
      {
LABEL_40:
        result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::expand(v6, (unsigned int **)v20);
        v20 = result;
        v38 = *v6;
        if (*v6)
          v41 = *(unsigned int *)(v38 - 4);
        else
          v41 = 0;
      }
    }
    else if (3 * v41 <= 4 * v40)
    {
      goto LABEL_40;
    }
    v37 = v38 + 16 * v41;
    v36 = 1;
    goto LABEL_45;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v35 = 0;
  else
    v35 = *(unsigned int *)(v8 - 4);
  v36 = 0;
  v37 = v8 + 16 * v35;
LABEL_45:
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 16) = v36;
  return result;
}

void WebKit::InjectedBundleDOMWindowExtension::~InjectedBundleDOMWindowExtension(WebKit::InjectedBundleDOMWindowExtension *this, void *a2)
{
  std::once_flag::_State_type *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  std::once_flag::_State_type v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  std::once_flag::_State_type v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)this = &off_1E34E9B78;
  v3 = &WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce;
  {
    v4 = WebKit::allExtensions(void)::map;
    v6 = (uint64_t *)((char *)this + 24);
    v5 = *((_QWORD *)this + 3);
    if (WebKit::allExtensions(void)::map)
    {
      v7 = *(_DWORD *)(WebKit::allExtensions(void)::map - 8);
      v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      for (i = 1; ; ++i)
      {
        v13 = v11;
        v14 = *(_QWORD *)(WebKit::allExtensions(void)::map + 16 * v11);
        if (v14 != -1)
        {
          if (!v14)
            goto LABEL_27;
          if (*(_QWORD *)(v14 + 8) == v5)
            break;
        }
        v11 = (v11 + i) & v7;
      }
      if (v11 != *(_DWORD *)(WebKit::allExtensions(void)::map - 4))
      {
        v15 = (_QWORD *)(WebKit::allExtensions(void)::map + 16 * v11);
        *v15 = 0;
        do
        {
          v20 = __ldaxr((unsigned int *)v14);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v14));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)v14);
          v37 = v4;
          v38 = v11;
          v36 = (_QWORD *)(v4 + 16 * v11);
          WTF::fastFree((WTF *)v14, a2);
          v15 = v36;
          v4 = v37;
          v13 = v38;
          v3 = &WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce;
        }
        *v15 = -1;
        v16 = v4 + 16 * v13;
        v17 = *(unsigned int **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v17)
        {
          do
          {
            v22 = __ldaxr(v17);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v17));
          if (!v23)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, a2);
            v3 = &WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce;
          }
        }
        ++*(_DWORD *)(v3[1] - 16);
        v18 = v3[1];
        if (v18)
          v19 = *(_DWORD *)(v18 - 12) - 1;
        else
          v19 = -1;
        *(_DWORD *)(v18 - 12) = v19;
        v24 = v3[1];
        if (v24)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(&WebKit::allExtensions(void)::map, v26 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebKit::allExtensions(void)::map = 0;
    v6 = (uint64_t *)((char *)this + 24);
  }
LABEL_27:
  v28 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v28)
    CFRelease(*(CFTypeRef *)(v28 + 8));
  v29 = *v6;
  *v6 = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 16) == 1)
    {
      v30 = (WTF *)MEMORY[0x19AEAFC40]();
      WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)(v29 + 16);
    }
  }
  v32 = *((_QWORD *)this + 2);
  if (v32)
  {
    *(_QWORD *)(v32 + 8) = 0;
    v33 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::InjectedBundleDOMWindowExtension::~InjectedBundleDOMWindowExtension(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::InjectedBundleDOMWindowExtension::frame@<X0>(WebCore::DOMWindowExtension **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebCore::DOMWindowExtension::frame(this[3]);
  if (result)
    return WebKit::WebFrame::fromCoreFrame(result, a2);
  *a2 = 0;
  return result;
}

WebKit::InjectedBundleScriptWorld *WebKit::InjectedBundleDOMWindowExtension::world(WebKit::InjectedBundleDOMWindowExtension *this)
{
  WebKit::InjectedBundleScriptWorld *result;
  uint64_t v3;
  WebKit::InjectedBundleScriptWorld *v4;

  result = (WebKit::InjectedBundleScriptWorld *)*((_QWORD *)this + 4);
  if (!result)
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(*(WebKit::InjectedBundleScriptWorld **)(*((_QWORD *)this + 3) + 32), &v4);
    result = v4;
    v3 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v4;
    if (v3)
    {
      CFRelease(*(CFTypeRef *)(v3 + 8));
      return (WebKit::InjectedBundleScriptWorld *)*((_QWORD *)this + 4);
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::create@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WebKit **a2@<X8>)
{
  WebKit *v5;
  uint64_t result;

  v5 = (WebKit *)API::Object::newObject(0x98uLL, 135);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)v5 = &off_1E34E9C58;
  result = MEMORY[0x19AEADBA0]((char *)v5 + 16, this);
  *a2 = v5;
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::frame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 96);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
    if (v3)
    {
      this = *(_QWORD *)(v3 + 8);
      if (this)
        return WebKit::WebFrame::fromCoreFrame(this, a2);
    }
  }
  *a2 = 0;
  return this;
}

uint64_t WebKit::InjectedBundleHitTestResult::targetFrame@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebCore::HitTestResult::targetFrame((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  if (result)
    return WebKit::WebFrame::fromCoreFrame(result, a2);
  *a2 = 0;
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absoluteImageURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;

  WebCore::HitTestResult::absoluteImageURL((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)v6 = v5;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v3);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absolutePDFURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;

  WebCore::HitTestResult::absolutePDFURL((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)v6 = v5;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v3);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absoluteLinkURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;

  WebCore::HitTestResult::absoluteLinkURL((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)v6 = v5;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v3);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absoluteMediaURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;

  WebCore::HitTestResult::absoluteMediaURL((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)v6 = v5;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v3);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::mediaType(WebKit::InjectedBundleHitTestResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) != 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 824))(result);
      if ((_DWORD)result)
      {
        if (WebCore::HitTestResult::mediaIsVideo((WebKit::InjectedBundleHitTestResult *)((char *)this + 16)))
          return 2;
        else
          return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::imageRect(WebKit::InjectedBundleHitTestResult *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScrollView *v8;
  uint64_t v10;
  _QWORD v11[2];

  v3 = WebCore::HitTestResult::imageRect((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  v11[0] = v3;
  v11[1] = v2;
  if ((int)v2 >= 1 && SHIDWORD(v2) >= 1)
  {
    WebKit::InjectedBundleHitTestResult::frame((uint64_t)this, &v10);
    v5 = v10;
    if (v10)
    {
      v6 = *(_QWORD *)(v10 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (!*(_BYTE *)(v7 + 144))
          {
            v8 = *(WebCore::ScrollView **)(v7 + 288);
            if (v8)
              v3 = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v11);
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
  return v3;
}

void WebKit::InjectedBundleHitTestResult::image(WebKit::InjectedBundleHitTestResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::DestinationColorSpace *v6;
  CFTypeRef *v7;
  WebKit *v8;
  uint64_t v9;
  uint64_t v10;
  FloatSize v11[2];
  WebKit *v12;
  int32x2_t v13;

  v3 = WebCore::HitTestResult::image((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  if (v3 && (v4 = v3, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) & 1) != 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 64) + 176))(*(_QWORD *)(v4 + 64), 0);
    v11[0].m_width = (float)(int)v5;
    v11[0].m_height = (float)SHIDWORD(v5);
    v6 = (WebCore::DestinationColorSpace *)WebCore::IntSize::IntSize((WebCore::IntSize *)&v13, v11);
    v7 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v6);
    WebKit::WebImage::create(&v13, 0, v7, 0, &v12);
    v8 = v12;
    v9 = *((_QWORD *)v12 + 2);
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      v10 = *((_QWORD *)v12 + 2);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11[0] = 0;
      v11[1] = (FloatSize)vcvt_f32_s32(v13);
      WebCore::GraphicsContext::drawImage();
      *a2 = v12;
    }
    else
    {
      *a2 = 0;
      v12 = 0;
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebCore::GamepadProvider::isMockGamepadProvider(WebCore::GamepadProvider *this)
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)129>::type()
{
  return 129;
}

uint64_t API::ObjectImpl<(API::Object::Type)133>::type()
{
  return 133;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebProcessPool24HandleSynchronousMessageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

WTF::DeferrableRefCountedBase *JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl@<X0>(JSC::JSArrayBufferView *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  char v5;
  WTF::DeferrableRefCountedBase *v6;
  unint64_t v7;
  char v8;
  WTF::DeferrableRefCountedBase *result;
  WTF::DeferrableRefCountedBase *v10;

  v4 = *((unsigned __int8 *)this + 40);
  v5 = v4 - 88;
  if ((v4 - 88) > 0x35)
    goto LABEL_8;
  if (((1 << v5) & 0x3D) == 0)
  {
    if (((1 << v5) & 0x3D000000000000) != 0)
    {
      v6 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 6);
      if (!v6)
        goto LABEL_12;
LABEL_11:
      *(_DWORD *)v6 += 2;
      goto LABEL_12;
    }
LABEL_8:
    if (v4 != 16 && v4 != 48)
    {
      v6 = 0;
      goto LABEL_12;
    }
    v6 = (WTF::DeferrableRefCountedBase *)JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
    if (!v6)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = *(WTF::DeferrableRefCountedBase **)(*((_QWORD *)this + 1) - 8);
  if (v6)
    goto LABEL_11;
LABEL_12:
  v10 = v6;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 3);
    v8 = 1;
  }
  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate((uint64_t *)&v10, *((_QWORD *)this + 4), v7, v8, a2);
  result = v10;
  v10 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

void WebKit::InjectedBundleHitTestResult::~InjectedBundleHitTestResult(WebKit::InjectedBundleHitTestResult *this)
{
  *(_QWORD *)this = &off_1E34E9C58;
  MEMORY[0x19AEADBAC]((char *)this + 16);
}

{
  *(_QWORD *)this = &off_1E34E9C58;
  MEMORY[0x19AEADBAC]((char *)this + 16);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)135>::type()
{
  return 135;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::PlatformGamepad,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)v4;
        do
        {
          v9 = *v8;
          *v8 = 0;
          *(_QWORD *)v7 = v9;
          result = *v8;
          *v8 = 0;
          if (result)
          {
            do
            {
              v10 = __ldaxr(result);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, result));
            if (!v11)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
            }
          }
          v7 += 2;
          ++v8;
        }
        while (v8 != (unsigned int **)((char *)v4 + 8 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StoppedUsingGamepads,WebKit::WebGamepadProvider::stopMonitoringGamepads(WebCore::GamepadProviderClient &)::$_0>(WebKit::WebGamepadProvider::stopMonitoringGamepads(WebCore::GamepadProviderClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 56))
  {
    v3 = *(unsigned int *)(v2 + 60);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(v2 + 48);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v2 + 60) = 0;
    }
    result = *(WTF **)(v2 + 48);
    if (result)
    {
      *(_QWORD *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  if (*(_DWORD *)(v2 + 72))
  {
    v7 = *(unsigned int *)(v2 + 76);
    if ((_DWORD)v7)
    {
      WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)(v2 + 64), (void *)(*(_QWORD *)(v2 + 64) + 8 * v7));
      *(_DWORD *)(v2 + 76) = 0;
    }
    result = *(WTF **)(v2 + 64);
    if (result)
    {
      *(_QWORD *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::PlayGamepadEffect,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E9CA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::PlayGamepadEffect,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9CA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::PlayGamepadEffect,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StopGamepadEffects,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E9CD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StopGamepadEffects,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9CD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StopGamepadEffects,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 16 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v24[1] = *(unsigned int **)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WebCore::Geolocation const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return v2 + 16 * *(unsigned int *)(v2 - 4);
      if (*(_QWORD *)(v10 + 8) == *a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return v2 + 16 * v9;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::remove(uint64_t *result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int **v11;
  uint64_t *v12;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v5 = __ldaxr(v2);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v2));
    if (!v6)
    {
      atomic_store(1u, v2);
      v11 = a2;
      v12 = result;
      WTF::fastFree((WTF *)v2, a2);
      a2 = v11;
      result = v12;
    }
  }
  *a2 = (unsigned int *)-1;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v7 = *result;
  if (*result)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::rehash(result, v9 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *result;
  if (*result)
    v4 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    v3 = *result;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if (v6 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::Geolocation>::deref(_DWORD *result)
{
  bmalloc::api *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (bmalloc::api *)MEMORY[0x19AEACA54](result - 8);
    return (_DWORD *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::ASCIICaseInsensitiveHash **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  WTF **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::ASCIICaseInsensitiveHash *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v46;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v10 = v7;
  v11 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v43 = v5;
    do
    {
      v15 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 40 * v12);
      if (*v15 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v15, 0, v9))
        {
          v16 = v4 + 40 * v12;
          v17 = *(_QWORD *)(v16 + 24);
          if (v17)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v17, v8);
          v18 = *(_QWORD *)(v16 + 8);
          if (v18)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v18, v8);
          v19 = *v15;
          *v15 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          v46 = v13;
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = WTF::ASCIICaseInsensitiveHash::hash(*v15, (const WTF::StringImpl *)v8);
          v23 = 0;
          do
          {
            v24 = v22 & v21;
            v25 = (WTF **)(v20 + 40 * (v22 & v21));
            v26 = WTF::equal(*v25, 0, v9);
            v22 = ++v23 + v24;
          }
          while (!v26);
          v27 = v20 + 40 * v24;
          v30 = *(_QWORD *)(v27 + 24);
          v29 = (uint64_t *)(v27 + 24);
          v28 = v30;
          if (v30)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v8);
          v31 = v29 - 2;
          v32 = *(v29 - 2);
          if (v32)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v32, v8);
          v33 = *v25;
          *v25 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = *v15;
          *v15 = 0;
          *v25 = v34;
          v35 = v4 + 40 * v12;
          *v31 = 0;
          v37 = *(_QWORD *)(v35 + 8);
          v36 = (uint64_t *)(v35 + 8);
          *v36 = 0;
          *v31 = v37;
          v38 = v20 + 40 * v24;
          *(_QWORD *)(v38 + 16) = v36[1];
          *v29 = 0;
          v39 = v36[2];
          v36[2] = 0;
          *v29 = v39;
          *(_QWORD *)(v38 + 32) = v36[3];
          v40 = v36[2];
          if (v40)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v40, v8);
          v13 = v46;
          v14 = v43;
          if (*v36)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v36, v8);
          v41 = *v15;
          *v15 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v41 -= 2;
          }
          if (v15 == a3)
            v13 = v20 + 40 * v24;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

BOOL WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v9 = 0;
      goto LABEL_21;
    }
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v3 + 16 * v6;
      if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v3 = *(_QWORD *)a1;
    v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v18 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13)
            goto LABEL_32;
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_30:
          v21 = (double)v13;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_30;
LABEL_32:
        v21 = (double)v13;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_33:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_25;
        }
LABEL_22:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v9 = 0;
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v9;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>>::customDeleteBucket(uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)a1, a2);
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (unsigned int **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((_QWORD *)(v6 + 16 * v11));
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v19 = ++v20 + v21;
          }
          while (*(_QWORD *)(v17 + 16 * v21));
          v22 = v17 + 16 * v21;
          v23 = *(WTF::StringImpl **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 != 2)
            {
              *(_DWORD *)v23 -= 2;
              goto LABEL_19;
            }
            WTF::StringImpl::destroy(v23, v10);
            v26 = *(unsigned int **)v22;
            *(_QWORD *)v22 = 0;
            if (v26)
            {
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                atomic_store(1u, v26);
                WTF::fastFree((WTF *)v26, v10);
              }
            }
          }
          else
          {
LABEL_19:
            *(_QWORD *)v22 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *(_QWORD *)v22 = v29;
          v30 = v6 + 16 * v11;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v31;
          v32 = *(WTF::StringImpl **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v10);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v10);
            }
          }
          if (v13 == a3)
            v12 = v22;
          goto LABEL_36;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WTF::StringImpl **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v10);
            v14 = *v13;
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          do
          {
            v24 = __ldaxr(v14);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v14));
          if (!v25)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v10);
          }
        }
      }
LABEL_36:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a2);
  for (i = 0; ; v6 = i + v8)
  {
    v8 = v6 & v5;
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 == -1)
      goto LABEL_6;
    if (!v9)
      break;
    if (v9 == *a2)
      return v2 + 16 * v8;
LABEL_6:
    ++i;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

WTF::StringImpl *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  v7 = (WTF **)(v2 + 40 * v6);
  if ((WTF::equal(*v7, 0, v8) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 40 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v10 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
    {
      v6 = (v6 + v10) & v5;
      v7 = (WTF **)(v2 + 40 * v6);
      ++v10;
      if (WTF::equal(*v7, 0, v9))
        goto LABEL_7;
    }
  }
  return (uint64_t)v7;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t result;

  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)a1, a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, v3);
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v6 = *(_DWORD *)(v4 - 8);
    result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    for (i = 0; ; result = (i + v8))
    {
      v8 = result & v6;
      v9 = *(_QWORD *)(v4 + 16 * v8);
      if (v9 != -1)
      {
        if (!v9)
          goto LABEL_7;
        if (v9 == a2)
          break;
      }
      ++i;
    }
    v10 = *(_DWORD **)(v4 + 16 * v8 + 8);
    if (v10)
      *v10 += 2;
  }
  else
  {
LABEL_7:
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;

  v3 = result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_25;
  v5 = *(_DWORD *)(v4 - 4);
  if (!v5)
    goto LABEL_24;
  v6 = 0;
  do
  {
    while (1)
    {
      result = *(_QWORD *)(v4 + 8 * --v5);
      if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
        break;
      if (!v5)
        goto LABEL_13;
    }
    *(_QWORD *)(v4 + 8 * v5) = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_QWORD *)(v4 + 8 * v5) = -1;
    ++v6;
  }
  while (v5);
LABEL_13:
  v4 = *(_QWORD *)a2;
  if (v6)
  {
    *(_DWORD *)(v4 - 16) += v6;
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v10 = *(_DWORD *)(v9 - 12);
    else
      v10 = 0;
    *(_DWORD *)(v9 - 12) = v10 - v6;
    v4 = *(_QWORD *)a2;
  }
  if (!v4)
  {
LABEL_25:
    a2[2] = 0;
    goto LABEL_26;
  }
  v11 = *(_DWORD *)(v4 - 4);
  if (v11 >= 9 && 6 * *(_DWORD *)(v4 - 12) < v11)
  {
    result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    v4 = *(_QWORD *)a2;
    a2[2] = 0;
    if (v4)
      goto LABEL_28;
LABEL_26:
    a2[3] = 0;
    goto LABEL_34;
  }
LABEL_24:
  a2[2] = 0;
LABEL_28:
  v13 = *(_DWORD *)(v4 - 12);
  if (v13 >= 0x7FFFFFFF)
    v14 = -2;
  else
    v14 = 2 * v13;
  a2[3] = v14;
  v15 = *(unsigned int *)(v4 - 12);
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v3 + 8) = v15;
    *(_QWORD *)v3 = v16;
  }
LABEL_34:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)a2, &v31);
  v17 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v18 = *(unsigned int *)(v17 - 4);
    v19 = (_QWORD *)(v17 + 8 * v18);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v26 = a2;
  v27 = v19;
  v28 = v19;
  v29 = v19;
  v30 = v17 + 8 * v18;
  result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  while (v32 != v27)
  {
    v20 = *(_QWORD *)(*v32 + 8);
    if (v20)
      v21 = v20 - 16;
    else
      v21 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v21 + 24), v21 + 16);
    v22 = *(unsigned int **)(v21 + 24);
    if (v22)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    v24 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v24) = v22;
    *(_DWORD *)(v3 + 12) = v24 + 1;
    v25 = v32;
    do
      v32 = ++v25;
    while (v25 != v33 && (unint64_t)(*v25 + 1) <= 1);
    result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
    ++*(_DWORD *)(v31 + 8);
  }
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<std::tuple<WTF::String const&,WebKit::UserData const&>>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, a2[1]);
  return a1;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WebKit::UserData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7;

  IPC::Decoder::decode<std::tuple<WebKit::UserData>>(a1, (uint64_t)&v6);
  std::__optional_storage_base<std::tuple<WebKit::UserData>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::UserData>,false>>(a2, (uint64_t)&v6);
  if (v7)
  {
    v4 = v6;
    v6 = 0;
    if (v4)
      CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebKit::UserData>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::UserData>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v6);
  if (v7)
  {
    v3 = v6;
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 + 8));
      v4 = v7;
      *(_QWORD *)a2 = v3;
      *(_BYTE *)(a2 + 8) = 1;
      if (v4)
      {
        v5 = v6;
        v6 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void std::__optional_storage_base<std::tuple<WebKit::UserData>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::UserData>,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
      std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebKit::UserData>,std::tuple<WebKit::UserData>,WebKit::UserData,0ul>((uint64_t *)a1, (uint64_t *)a2);
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      CFRetain(*(CFTypeRef *)(v4 + 8));
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebKit::UserData>,std::tuple<WebKit::UserData>,WebKit::UserData,0ul>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*(CFTypeRef *)(v3 + 8));
  v4 = *a1;
  *a1 = v3;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[2]);
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setAsynchronousSpellCheckingEnabled(BOOL)::$_0,void,WebCore::Page &>::call(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + 112) + 664) = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 664) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(result + 8) << 32);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setUserStyleSheetLocation(WTF::String const&)::$_0,void,WebCore::Page &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E9D30;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setUserStyleSheetLocation(WTF::String const&)::$_0,void,WebCore::Page &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E9D30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setUserStyleSheetLocation(WTF::String const&)::$_0,void,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::Settings *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[5];

  v2 = *(WebCore::Settings **)(a2 + 112);
  WTF::URL::URL((uint64_t)v5, (WTF::StringImpl **)(a1 + 8));
  WebCore::Settings::setUserStyleSheetLocation(v2, (const WTF::URL *)v5);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t result;
  int v29;
  __int16 v30;
  char v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v12 = (_QWORD *)(v10 + 16);
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v6 + 32 * v13;
      if (*(_QWORD *)v15 ^ 1 | *(_QWORD *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          v16 = v6 + 32 * v13;
          v17 = *(WTF::StringImpl **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v11);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v29 = -1640531527;
          v30 = 0;
          v31 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, (_QWORD *)(v6 + 32 * v13));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = v18 + 32 * v22;
            v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v24 = *(WTF::StringImpl **)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v11);
            else
              *(_DWORD *)v24 -= 2;
          }
          *(_OWORD *)v23 = *(_OWORD *)v15;
          v25 = v6 + 32 * v13;
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)(v23 + 16) = v26;
          v27 = *(WTF::StringImpl **)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v11);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v15 == a3)
            v14 = v23;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectedBundle::liveDocumentURLs(BOOL)::$_0,void,WebCore::Page &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  __int16 v28;
  char v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 160);
  if (v2)
  {
    v3 = result;
    do
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v4 = *(_QWORD *)(v2 + 296);
        if (v4)
        {
          v5 = *(uint64_t **)(v3 + 8);
          v6 = *(_OWORD *)(v4 + 432);
          v30[0] = *(_OWORD *)(v4 + 416);
          v30[1] = v6;
          v7 = *v5;
          if (*v5)
          {
            v8 = *(_DWORD *)(v7 - 8);
            v27 = -1640531527;
            v28 = 0;
            v29 = 0;
            WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v27, v30);
            v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v8;
            v11 = (uint64_t *)(v7 + 32 * v10);
            v12 = *v11;
            v13 = v11[1];
            if (v13 == *((_QWORD *)&v30[0] + 1) && v12 == *(_QWORD *)&v30[0])
            {
LABEL_19:
              v18 = (_QWORD *)(v7 + 32 * v10);
              v19 = (_QWORD *)*v5;
              if (!*v5)
                goto LABEL_24;
            }
            else
            {
              v15 = 1;
              while (v12 | v13)
              {
                v10 = ((_DWORD)v10 + v15) & v8;
                v16 = (uint64_t *)(v7 + 32 * v10);
                v12 = *v16;
                v13 = v16[1];
                v17 = v13 == *((_QWORD *)&v30[0] + 1) && v12 == *(_QWORD *)&v30[0];
                ++v15;
                if (v17)
                  goto LABEL_19;
              }
              v19 = (_QWORD *)*v5;
              if (!*v5)
                goto LABEL_4;
              v18 = &v19[4 * *((unsigned int *)v19 - 1)];
            }
            v19 += 4 * *((unsigned int *)v19 - 1);
            if (v19 != v18)
            {
LABEL_24:
              if (v19 != v18)
              {
                v20 = (WTF::StringImpl *)v18[2];
                v18[1] = 0;
                v18[2] = 0;
                *v18 = 1;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v9);
                  else
                    *(_DWORD *)v20 -= 2;
                }
                ++*(_DWORD *)(*v5 - 16);
                v21 = *v5;
                if (*v5)
                  v22 = *(_DWORD *)(v21 - 12) - 1;
                else
                  v22 = -1;
                *(_DWORD *)(v21 - 12) = v22;
                v23 = *v5;
                if (*v5)
                {
                  v24 = 6 * *(_DWORD *)(v23 - 12);
                  v25 = *(_DWORD *)(v23 - 4);
                  if (v24 < v25 && v25 >= 9)
                    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v5, v25 >> 1, 0);
                }
              }
            }
          }
        }
      }
LABEL_4:
      result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v2 + 48), 0);
      v2 = result;
    }
    while (result);
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unsigned int **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = ~(*((_QWORD *)v15 + 1) << 32) + *((_QWORD *)v15 + 1);
          v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
          v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
          v28 = v24 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~((_DWORD)v27 << 27)));
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = *(_QWORD *)(v23 + 16 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (v31);
          v32 = (unsigned int **)(v23 + 16 * v30);
          v33 = v32[1];
          v32[1] = 0;
          if (v33)
          {
            do
            {
              v40 = __ldaxr(v33);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v33));
            if (!v41)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v10);
            }
          }
          v34 = *v32;
          *v32 = 0;
          if (v34)
          {
            do
            {
              v42 = __ldaxr(v34);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v34));
            if (!v43)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v10);
            }
          }
          v35 = *v14;
          *v14 = 0;
          *v32 = v35;
          v36 = v6 + 16 * v11;
          v37 = *(unsigned int **)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          v32[1] = v37;
          v38 = *(unsigned int **)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          if (v38)
          {
            do
            {
              v44 = __ldaxr(v38);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v38));
            if (!v45)
            {
              atomic_store(1u, v38);
              WTF::fastFree((WTF *)v38, v10);
            }
          }
          v39 = *v14;
          *v14 = 0;
          if (v39)
          {
            do
            {
              v46 = __ldaxr(v39);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v39));
            if (!v47)
            {
              atomic_store(1u, v39);
              WTF::fastFree((WTF *)v39, v10);
            }
          }
          if (v14 == a3)
            v12 = v32;
        }
        else
        {
          v16 = v6 + 16 * v11;
          v17 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            do
            {
              v21 = __ldaxr(v17);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v17));
            if (!v22)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
          v18 = *v14;
          *v14 = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldBeginEditing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 24);
  v4 = 1;
  if (v3)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *a3;
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(*a3 + 24) + 2;
    v11 = v7;
    v12 = *((_DWORD *)a3 + 2);
    v8 = a3[2];
    *(_DWORD *)(v8 + 24) += 2;
    v13 = v8;
    v14 = *((_DWORD *)a3 + 6);
    v15 = 1;
    WebKit::createHandle(&v16);
    v9 = v16;
    if (v16)
    {
      v4 = v3(v6, *(_QWORD *)(v16 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    else
    {
      v4 = v3(v6, 0, *(_QWORD *)(a1 + 16));
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
  }
  return v4;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldEndEditing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 32);
  v4 = 1;
  if (v3)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *a3;
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(*a3 + 24) + 2;
    v11 = v7;
    v12 = *((_DWORD *)a3 + 2);
    v8 = a3[2];
    *(_DWORD *)(v8 + 24) += 2;
    v13 = v8;
    v14 = *((_DWORD *)a3 + 6);
    v15 = 1;
    WebKit::createHandle(&v16);
    v9 = v16;
    if (v16)
    {
      v4 = v3(v6, *(_QWORD *)(v16 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    else
    {
      v4 = v3(v6, 0, *(_QWORD *)(a1 + 16));
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
  }
  return v4;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldInsertNode(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, int a5)
{
  WebKit::InjectedBundleNodeHandle *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  WebKit::InjectedBundleNodeHandle *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::InjectedBundleNodeHandle *v17;

  if (!*(_QWORD *)(a1 + 40))
    return 1;
  WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v17);
  v8 = v17;
  v9 = *(_QWORD *)(a2 + 8);
  if (v17)
    v10 = *((_QWORD *)v17 + 1);
  else
    v10 = 0;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 40);
  WebKit::createHandle((uint64_t *)&v17);
  v12 = v17;
  if (v17)
    v13 = *((_QWORD *)v17 + 1);
  else
    v13 = 0;
  if (a5 == 2)
    v14 = 2;
  else
    v14 = a5 == 1;
  v15 = v11(v9, v10, v13, v14, *(_QWORD *)(a1 + 16));
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
  if (v8)
    CFRelease(*((CFTypeRef *)v8 + 1));
  return v15;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldInsertText(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, int a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebKit *v12;
  uint64_t v13;
  WebKit *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WebKit *v20;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 48);
  if (!v5)
    return 1;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  v19 = v9;
  API::String::create(&v19, &v20);
  v11 = v19;
  v12 = v20;
  v19 = 0;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v10);
      if (v12)
        goto LABEL_8;
LABEL_21:
      v13 = 0;
      goto LABEL_9;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v12)
    goto LABEL_21;
LABEL_8:
  v13 = *((_QWORD *)v12 + 1);
LABEL_9:
  WebKit::createHandle((uint64_t *)&v20);
  v14 = v20;
  if (v20)
    v15 = *((_QWORD *)v20 + 1);
  else
    v15 = 0;
  if (a5 == 2)
    v16 = 2;
  else
    v16 = a5 == 1;
  v17 = v5(v8, v13, v15, v16, *(_QWORD *)(a1 + 16));
  if (v14)
    CFRelease(*((CFTypeRef *)v14 + 1));
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
  return v17;
}

WTF::StringImpl *WebKit::toAPI(WebKit *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = a2;
  API::String::create(&v5, &v6);
  result = v5;
  *(_QWORD *)this = v6;
  v5 = 0;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldDeleteRange(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 56);
  if (!v2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8);
  WebKit::createHandle(&v8);
  v5 = v8;
  if (!v8)
    return v2(v4, 0, *(_QWORD *)(a1 + 16));
  v6 = v2(v4, *(_QWORD *)(v8 + 8), *(_QWORD *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(v5 + 8));
  return v6;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldChangeSelectedRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 64);
  if (!v6)
    return 1;
  v10 = *(_QWORD *)(a2 + 8);
  WebKit::createHandle(&v18);
  v11 = v18;
  if (v18)
    v12 = *(_QWORD *)(v18 + 8);
  else
    v12 = 0;
  WebKit::createHandle(&v17);
  v13 = v17;
  if (v17)
    v14 = *(_QWORD *)(v17 + 8);
  else
    v14 = 0;
  v15 = v6(v10, v12, v14, a5, a6, *(_QWORD *)(a1 + 16));
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  return v15;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldApplyStyle(uint64_t a1, uint64_t a2, WebCore::StyleProperties *this)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::MutableStyleProperties *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WebCore::MutableStyleProperties *v13;
  uint64_t v14;
  uint64_t v16;
  WebCore::MutableStyleProperties *v17;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 72);
  if (!v3)
    return 1;
  v5 = *(_QWORD *)(a2 + 8);
  WebCore::StyleProperties::mutableCopy(this);
  v6 = WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(v17);
  WebKit::InjectedBundleCSSStyleDeclarationHandle::getOrCreate(v6, v7, &v16);
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::MutableStyleProperties::~MutableStyleProperties(v8);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  if (v16)
    v12 = *(_QWORD *)(v16 + 8);
  else
    v12 = 0;
  WebKit::createHandle((uint64_t *)&v17);
  v13 = v17;
  if (v17)
  {
    v9 = v3(v5, v12, *((_QWORD *)v17 + 1), *(_QWORD *)(a1 + 16));
    CFRelease(*((CFTypeRef *)v13 + 1));
  }
  else
  {
    v9 = v3(v5, v12, 0, *(_QWORD *)(a1 + 16));
  }
  v14 = v16;
  v16 = 0;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  return v9;
}

void WebKit::InjectedBundlePageEditorClient::didBeginEditing(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 10);
  if (v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::didEndEditing(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 11);
  if (v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::didChange(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 12);
  if (v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::didChangeSelection(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 13);
  if (v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::willWriteToPasteboard(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 112);
  if (v2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    WebKit::createHandle(&v6);
    v5 = v6;
    if (v6)
    {
      v2(v4, *(_QWORD *)(v6 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
    else
    {
      v2(v4, 0, *(_QWORD *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageEditorClient::getPasteboardDataForRange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  void (*v5)(uint64_t, _QWORD, id *, id *, _QWORD);
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int *v17;
  WTF *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int **v47;
  uint64_t v48;
  unsigned int **v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t *v52;
  uint64_t v54;
  WTF::StringImpl *v55[2];
  unsigned int *v56;
  id v57;
  id v58;

  v5 = *(void (**)(uint64_t, _QWORD, id *, id *, _QWORD))(a1 + 120);
  if (v5)
  {
    v57 = 0;
    v58 = 0;
    v9 = *(_QWORD *)(a2 + 8);
    WebKit::createHandle((uint64_t *)v55);
    v10 = v55[0];
    if (v55[0])
    {
      v5(v9, *((_QWORD *)v55[0] + 1), &v58, &v57, *(_QWORD *)(a1 + 16));
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v5(v9, 0, &v58, &v57, *(_QWORD *)(a1 + 16));
    }
    if (v58)
      v11 = objc_msgSend(v58, "_apiObject");
    else
      v11 = 0;
    if (v57)
      v12 = objc_msgSend(v57, "_apiObject");
    else
      v12 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a4, 0);
    if (*(_DWORD *)(a5 + 8))
    {
      v14 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v14)
      {
        v15 = *(unsigned int ***)a5;
        v16 = 8 * v14;
        do
        {
          v17 = *v15;
          *v15 = 0;
          if (v17)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v13);
          ++v15;
          v16 -= 8;
        }
        while (v16);
        *(_DWORD *)(a5 + 12) = 0;
      }
      v18 = *(WTF **)a5;
      if (*(_QWORD *)a5)
      {
        *(_QWORD *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        WTF::fastFree(v18, v13);
      }
    }
    if (v11)
    {
      if (!v12)
      {
LABEL_74:
        CFRelease(*(CFTypeRef *)(v11 + 8));
        return;
      }
      v19 = *(uint64_t **)(v11 + 16);
      v20 = *(unsigned int *)(v11 + 28);
      v21 = &v19[v20];
      if ((_DWORD)v20)
      {
        v22 = 8 * v20;
        while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v19 + 16))(*v19) != 21)
        {
          ++v19;
          v22 -= 8;
          if (!v22)
          {
            v19 = v21;
            break;
          }
        }
        v23 = v19;
        v19 = *(uint64_t **)(v11 + 16);
        v24 = *(unsigned int *)(v11 + 28);
      }
      else
      {
        v24 = 0;
        v23 = *(uint64_t **)(v11 + 16);
      }
      v25 = &v19[v24];
LABEL_27:
      while (v23 != v25)
      {
        WTF::String::isolatedCopy();
        v27 = a4[3];
        if ((_DWORD)v27 == a4[2])
        {
          v34 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a4, v27 + 1, (unint64_t)v55);
          v27 = a4[3];
          v28 = *(_QWORD *)a4;
          v29 = *v34;
          *v34 = 0;
        }
        else
        {
          v28 = *(_QWORD *)a4;
          v29 = v55[0];
          v55[0] = 0;
        }
        *(_QWORD *)(v28 + 8 * v27) = v29;
        a4[3] = v27 + 1;
        v30 = v55[0];
        v55[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v26);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v23 + 1;
        while (v31 - 1 != v21 && v31 != v21)
        {
          v33 = *v31++;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33) == 21)
          {
            v23 = v31 - 1;
            goto LABEL_27;
          }
        }
        v23 = v21;
      }
      v35 = *(uint64_t **)(v12 + 16);
      v36 = *(unsigned int *)(v12 + 28);
      v37 = &v35[v36];
      if ((_DWORD)v36)
      {
        v38 = 8 * v36;
        while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v35 + 16))(*v35) != 8)
        {
          ++v35;
          v38 -= 8;
          if (!v38)
          {
            v35 = v37;
            break;
          }
        }
        v39 = v35;
        v35 = *(uint64_t **)(v12 + 16);
        v40 = *(unsigned int *)(v12 + 28);
      }
      else
      {
        v40 = 0;
        v39 = *(uint64_t **)(v12 + 16);
      }
      v41 = &v35[v40];
      if (v39 == v41)
      {
LABEL_72:
        CFRelease(*(CFTypeRef *)(v12 + 8));
LABEL_73:
        if (!v11)
          return;
        goto LABEL_74;
      }
      do
      {
        *(_OWORD *)v55 = *(_OWORD *)(*v39 + 16);
        WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v56);
        v43 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v43 == *(_DWORD *)(a5 + 8))
        {
          v44 = v43 + (v43 >> 2);
          if (v44 >= 0x10)
            v45 = v44 + 1;
          else
            v45 = 16;
          if (v45 <= v43 + 1)
            v46 = v43 + 1;
          else
            v46 = v45;
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a5, v46);
          v43 = *(unsigned int *)(a5 + 12);
          v47 = *(unsigned int ***)a5;
          v48 = (uint64_t)v56;
          v56 = 0;
          v47[v43] = (unsigned int *)v48;
        }
        else
        {
          v49 = *(unsigned int ***)a5;
          v50 = (uint64_t)v56;
          v56 = 0;
          v49[v43] = (unsigned int *)v50;
        }
        *(_DWORD *)(a5 + 12) = v43 + 1;
        v51 = v56;
        v56 = 0;
        if (v51)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v51, v42);
        v52 = v39 + 1;
        while (v52 - 1 != v37 && v52 != v37)
        {
          v54 = *v52++;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54) == 8)
          {
            v39 = v52 - 1;
            goto LABEL_70;
          }
        }
        v39 = v37;
LABEL_70:
        ;
      }
      while (v39 != v41);
    }
    if (!v12)
      goto LABEL_73;
    goto LABEL_72;
  }
}

uint64_t WebKit::InjectedBundlePageEditorClient::performTwoStepDrop(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, uint64_t a5)
{
  WebKit::InjectedBundleNodeHandle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD);
  WebKit::InjectedBundleNodeHandle *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::InjectedBundleNodeHandle *v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;

  if (!*(_QWORD *)(a1 + 136))
    return 0;
  WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v18);
  v9 = v18;
  v10 = *(_QWORD *)(a2 + 8);
  if (v18)
    v11 = *((_QWORD *)v18 + 1);
  else
    v11 = 0;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 136);
  v13 = *(WebKit::InjectedBundleNodeHandle **)a4;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(*(_QWORD *)a4 + 24) + 2;
  v18 = v13;
  v19 = *(_DWORD *)(a4 + 8);
  v14 = *(_QWORD *)(a4 + 16);
  *(_DWORD *)(v14 + 24) += 2;
  v20 = v14;
  v21 = *(_DWORD *)(a4 + 24);
  v22 = 1;
  WebKit::createHandle(&v23);
  v15 = v23;
  if (v23)
  {
    v16 = v12(v10, v11, *(_QWORD *)(v23 + 8), a5, *(_QWORD *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    v16 = v12(v10, v11, 0, a5, *(_QWORD *)(a1 + 16));
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
  if (v9)
    CFRelease(*((CFTypeRef *)v9 + 1));
  return v16;
}

uint64_t WebKit::InjectedBundlePageEditorClient::didWriteToPasteboard(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 128);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

_OWORD *API::Client<WKBundlePageFormClientBase>::initialize(_OWORD *result, unsigned int *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a2)
  {
    if (*a2 == 3)
    {
      v3 = *(_OWORD *)a2;
      v4 = *((_OWORD *)a2 + 2);
      result[1] = *((_OWORD *)a2 + 1);
      result[2] = v4;
      *result = v3;
      v5 = *((_OWORD *)a2 + 3);
      v6 = *((_OWORD *)a2 + 4);
      v7 = *((_OWORD *)a2 + 5);
      *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
      result[4] = v6;
      result[5] = v7;
      result[3] = v5;
    }
    else
    {
      *((_QWORD *)result + 12) = 0;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *result = 0u;
      result[1] = 0u;
      v2 = *a2;
      if ((int)v2 <= 2)
      {
        if (v2 >= 4)
          __break(1u);
        else
          return memcpy(result, a2, qword_1978D0C88[v2]);
      }
    }
  }
  else
  {
    *((_QWORD *)result + 12) = 0;
    result[4] = 0u;
    result[5] = 0u;
    result[2] = 0u;
    result[3] = 0u;
    *result = 0u;
    result[1] = 0u;
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageFormClient::InjectedBundlePageFormClient(uint64_t a1, unsigned int *a2)
{
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E34E9E18;
  API::Client<WKBundlePageFormClientBase>::initialize((_OWORD *)(a1 + 8), a2);
  return a1;
}

void WebKit::InjectedBundlePageFormClient::didFocusTextField(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4)
{
  uint64_t v7;
  WebKit::InjectedBundleNodeHandle *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleNodeHandle *v11;

  if (*((_QWORD *)this + 10))
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v11);
    if (a2)
      v7 = *((_QWORD *)a2 + 1);
    else
      v7 = 0;
    v8 = v11;
    if (v11)
      v9 = *((_QWORD *)v11 + 1);
    else
      v9 = 0;
    if (a4)
      v10 = *((_QWORD *)a4 + 1);
    else
      v10 = 0;
    (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD))this + 10))(v7, v9, v10, *((_QWORD *)this + 2));
    if (v8)
      CFRelease(*((CFTypeRef *)v8 + 1));
  }
}

void WebKit::InjectedBundlePageFormClient::textFieldDidBeginEditing(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4)
{
  WebKit::InjectedBundleNodeHandle *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleNodeHandle *v11;

  if (*((_QWORD *)this + 3))
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v11);
    v7 = v11;
    if (a2)
      v8 = *((_QWORD *)a2 + 1);
    else
      v8 = 0;
    if (v11)
      v9 = *((_QWORD *)v11 + 1);
    else
      v9 = 0;
    if (a4)
      v10 = *((_QWORD *)a4 + 1);
    else
      v10 = 0;
    (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD))this + 3))(v8, v9, v10, *((_QWORD *)this + 2));
    if (v7)
      CFRelease(*((CFTypeRef *)v7 + 1));
  }
}

void WebKit::InjectedBundlePageFormClient::textFieldDidEndEditing(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4)
{
  WebKit::InjectedBundleNodeHandle *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleNodeHandle *v11;

  if (*((_QWORD *)this + 4))
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v11);
    v7 = v11;
    if (a2)
      v8 = *((_QWORD *)a2 + 1);
    else
      v8 = 0;
    if (v11)
      v9 = *((_QWORD *)v11 + 1);
    else
      v9 = 0;
    if (a4)
      v10 = *((_QWORD *)a4 + 1);
    else
      v10 = 0;
    (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD))this + 4))(v8, v9, v10, *((_QWORD *)this + 2));
    if (v7)
      CFRelease(*((CFTypeRef *)v7 + 1));
  }
}

void WebKit::InjectedBundlePageFormClient::textDidChangeInTextField(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4, int a5)
{
  BOOL v5;
  WebKit::InjectedBundleNodeHandle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::InjectedBundleNodeHandle *v13;

  if (*((_QWORD *)this + 5))
    v5 = a5 == 0;
  else
    v5 = 1;
  if (v5)
    return;
  WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v13);
  v9 = v13;
  if (!a2)
  {
    v10 = 0;
    if (v13)
      goto LABEL_9;
LABEL_15:
    v11 = 0;
    goto LABEL_10;
  }
  v10 = *((_QWORD *)a2 + 1);
  if (!v13)
    goto LABEL_15;
LABEL_9:
  v11 = *((_QWORD *)v13 + 1);
LABEL_10:
  if (a4)
    v12 = *((_QWORD *)a4 + 1);
  else
    v12 = 0;
  (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD))this + 5))(v10, v11, v12, *((_QWORD *)this + 2));
  if (v9)
    CFRelease(*((CFTypeRef *)v9 + 1));
}

void WebKit::InjectedBundlePageFormClient::textDidChangeInTextArea(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLTextAreaElement *a3, WebKit::WebFrame *a4)
{
  WebKit::InjectedBundleNodeHandle *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleNodeHandle *v11;

  if (!*((_QWORD *)this + 6))
    return;
  WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v11);
  v7 = v11;
  if (!a2)
  {
    v8 = 0;
    if (v11)
      goto LABEL_4;
LABEL_11:
    v9 = 0;
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a2 + 1);
  if (!v11)
    goto LABEL_11;
LABEL_4:
  v9 = *((_QWORD *)v11 + 1);
LABEL_5:
  if (a4)
    v10 = *((_QWORD *)a4 + 1);
  else
    v10 = 0;
  (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD))this + 6))(v8, v9, v10, *((_QWORD *)this + 2));
  if (v7)
    CFRelease(*((CFTypeRef *)v7 + 1));
}

uint64_t WebKit::InjectedBundlePageFormClient::shouldPerformActionInTextField(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, unsigned int a4, uint64_t a5)
{
  WebKit::InjectedBundleNodeHandle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::InjectedBundleNodeHandle *v16;

  if (!*(_QWORD *)(a1 + 56))
    return 0;
  WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v16);
  v9 = v16;
  if (!a2)
  {
    v10 = 0;
    if (v16)
      goto LABEL_4;
LABEL_15:
    v11 = 0;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(a2 + 8);
  if (!v16)
    goto LABEL_15;
LABEL_4:
  v11 = *((_QWORD *)v16 + 1);
LABEL_5:
  if (a4 >= 7)
    v12 = 2;
  else
    v12 = a4;
  if (a5)
    v13 = *(_QWORD *)(a5 + 8);
  else
    v13 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 56))(v10, v11, v12, v13, *(_QWORD *)(a1 + 16));
  if (v9)
    CFRelease(*((CFTypeRef *)v9 + 1));
  return v14;
}

void WebKit::InjectedBundlePageFormClient::willSendSubmitEvent(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  WebKit::InjectedBundleNodeHandle *v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WebKit *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WebKit::InjectedBundleNodeHandle *v23[3];
  WebKit *v24;
  uint64_t v25;

  if (!*(_QWORD *)(a1 + 72))
    return;
  if (this)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(this, v23);
    v11 = v23[0];
  }
  else
  {
    v11 = 0;
  }
  v25 = 0;
  if (*(_DWORD *)(a6 + 12))
  {
    v12 = 0;
    v13 = 8;
    do
    {
      v14 = (WTF::StringImpl **)(*(_QWORD *)a6 + v13 - 8);
      API::String::create(&v24);
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(&v25, v14, (uint64_t *)&v24, (uint64_t)v23);
      v15 = v24;
      v24 = 0;
      if (v15)
        CFRelease(*((CFTypeRef *)v15 + 1));
      ++v12;
      v13 += 16;
    }
    while (v12 < *(unsigned int *)(a6 + 12));
  }
  v16 = API::Object::newObject(0x18uLL, 9);
  *(_QWORD *)v16 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v16);
  *(_QWORD *)v16 = &off_1E34CC280;
  v17 = v25;
  v25 = 0;
  *(_QWORD *)(v16 + 16) = v17;
  if (a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    if (v11)
      goto LABEL_11;
LABEL_21:
    v19 = 0;
    if (a4)
      goto LABEL_12;
LABEL_22:
    v20 = 0;
    goto LABEL_13;
  }
  v18 = 0;
  if (!v11)
    goto LABEL_21;
LABEL_11:
  v19 = *((_QWORD *)v11 + 1);
  if (!a4)
    goto LABEL_22;
LABEL_12:
  v20 = *(_QWORD *)(a4 + 8);
LABEL_13:
  if (a5)
    v21 = *(_QWORD *)(a5 + 8);
  else
    v21 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 72))(v18, v19, v20, v21, *(_QWORD *)(v16 + 8), *(_QWORD *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(v16 + 8));
  if (v25)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v22);
  if (v11)
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void WebKit::InjectedBundlePageFormClient::willSubmitForm(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, uint64_t a5, uint64_t a6, WebKit::InjectedBundleNodeHandle **a7)
{
  WebKit::InjectedBundleNodeHandle *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WebKit *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebKit::InjectedBundleNodeHandle *v24;
  WebKit::InjectedBundleNodeHandle *v25;
  WTF::StringImpl *v26;
  WebKit::InjectedBundleNodeHandle *v27[3];
  WebKit *v28;
  uint64_t v29;

  if (!*(_QWORD *)(a1 + 64))
    return;
  if (this)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(this, v27);
    v13 = v27[0];
  }
  else
  {
    v13 = 0;
  }
  v29 = 0;
  if (*(_DWORD *)(a6 + 12))
  {
    v14 = 0;
    v15 = 8;
    do
    {
      v16 = (WTF::StringImpl **)(*(_QWORD *)a6 + v15 - 8);
      API::String::create(&v28);
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(&v29, v16, (uint64_t *)&v28, (uint64_t)v27);
      v17 = v28;
      v28 = 0;
      if (v17)
        CFRelease(*((CFTypeRef *)v17 + 1));
      ++v14;
      v15 += 16;
    }
    while (v14 < *(unsigned int *)(a6 + 12));
  }
  v18 = API::Object::newObject(0x18uLL, 9);
  *(_QWORD *)v18 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v18);
  *(_QWORD *)v18 = &off_1E34CC280;
  v19 = v29;
  v29 = 0;
  *(_QWORD *)(v18 + 16) = v19;
  v27[0] = 0;
  if (a2)
  {
    v20 = *(_QWORD *)(a2 + 8);
    if (v13)
      goto LABEL_11;
LABEL_25:
    v21 = 0;
    if (a4)
      goto LABEL_12;
LABEL_26:
    v22 = 0;
    goto LABEL_13;
  }
  v20 = 0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v21 = *((_QWORD *)v13 + 1);
  if (!a4)
    goto LABEL_26;
LABEL_12:
  v22 = *(_QWORD *)(a4 + 8);
LABEL_13:
  if (a5)
    v23 = *(_QWORD *)(a5 + 8);
  else
    v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, WebKit::InjectedBundleNodeHandle **, _QWORD))(a1 + 64))(v20, v21, v22, v23, *(_QWORD *)(v18 + 8), v27, *(_QWORD *)(a1 + 16));
  v24 = v27[0];
  if (v27[0])
    v24 = (WebKit::InjectedBundleNodeHandle *)-[WebKit::InjectedBundleNodeHandle _apiObject](v27[0], "_apiObject");
  v25 = *a7;
  *a7 = v24;
  if (v25)
    CFRelease(*((CFTypeRef *)v25 + 1));
  CFRelease(*(CFTypeRef *)(v18 + 8));
  if (v29)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v26);
  if (v13)
    CFRelease(*((CFTypeRef *)v13 + 1));
}

uint64_t WebKit::InjectedBundlePageFormClient::didAssociateFormControls(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  v6 = (_QWORD *)result;
  if (*(_QWORD *)(result + 96) || *(_QWORD *)(result + 104))
  {
    WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::InjectedBundlePageFormClient::didAssociateFormControls(WebKit::WebPage *,WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::WebFrame *)::$_0>((uint64_t)v16, a3);
    v7 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v6[13];
    if (v7)
    {
      if (a2)
        a2 = *(_QWORD *)(a2 + 8);
      API::Array::create(v16, &v15);
      if (v15)
        v13 = *(_QWORD *)(v15 + 8);
      else
        v13 = 0;
      if (a4)
        v14 = *(_QWORD *)(a4 + 8);
      else
        v14 = 0;
      v7(a2, v13, v14, v6[2]);
    }
    else
    {
      if (a2)
        v8 = *(_QWORD *)(a2 + 8);
      else
        v8 = 0;
      v9 = (void (*)(uint64_t, uint64_t, _QWORD))v6[12];
      API::Array::create(v16, &v15);
      if (v15)
        v10 = *(_QWORD *)(v15 + 8);
      else
        v10 = 0;
      v9(v8, v10, v6[2]);
    }
    v12 = v15;
    v15 = 0;
    if (v12)
      CFRelease(*(CFTypeRef *)(v12 + 8));
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v11);
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageFormClient::shouldNotifyOnFormChanges(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 11);
  if (!v2)
    return 0;
  if (a2)
    v3 = *((_QWORD *)a2 + 1);
  else
    v3 = 0;
  return v2(v3, *((_QWORD *)this + 2));
}

uint64_t WebKit::InjectedBundlePageFullScreenClient::supportsFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  _BYTE v11[16];
  int v12;
  char v13;

  v3 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)this + 2);
  if (!v3)
  {
    v13 = a3;
    v6 = (char *)a2 + 32;
    v7 = (*(uint64_t (**)(char *, WebKit::WebPage *))(*((_QWORD *)a2 + 4) + 56))((char *)a2 + 32, a2);
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 48))(v6);
    if (v8)
    {
      IPC::Connection::sendSync<Messages::WebFullScreenManagerProxy::SupportsFullScreen>(v8, &v13, v7, 0, (uint64_t)v11, INFINITY);
      v9 = v12;
      v10 = (v12 | v11[8]) != 0;
      if (v12 == -1)
        return v10;
    }
    else
    {
      v11[0] = 3;
      v10 = 1;
      v12 = 1;
      v9 = 1;
    }
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v9])(&v13, v11);
    return v10;
  }
  if (a2)
    v4 = *((_QWORD *)a2 + 1);
  else
    v4 = 0;
  return v3(v4, a3);
}

void WebKit::InjectedBundlePageFullScreenClient::enterFullScreenForElement(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, char a4, int a5, uint64_t a6)
{
  void (*v8)(uint64_t, _QWORD);
  IPC::Encoder *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  void *v29;
  IPC::Encoder *v30;

  v8 = *(void (**)(uint64_t, _QWORD))(a1 + 24);
  if (v8)
  {
    if (this)
    {
      WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v30);
      v10 = v30;
      v8 = *(void (**)(uint64_t, _QWORD))(a1 + 24);
      if (a2)
        goto LABEL_4;
    }
    else
    {
      v10 = 0;
      if (a2)
      {
LABEL_4:
        v11 = *(_QWORD *)(a2 + 8);
        if (v10)
        {
LABEL_5:
          v8(v11, *((_QWORD *)v10 + 1));
          CFRelease(*((CFTypeRef *)v10 + 1));
          return;
        }
        goto LABEL_20;
      }
    }
    v11 = 0;
    if (v10)
      goto LABEL_5;
LABEL_20:
    v8(v11, 0);
    return;
  }
  if (a5 != 4)
  {
    v13 = a2 + 32;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, WebKit::InjectedBundleNodeHandle *))(*(_QWORD *)(a2 + 32) + 56))(a2 + 32, a2, this);
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 1708;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    v30 = (IPC::Encoder *)v15;
    v16 = *(_QWORD *)(v15 + 544);
    v17 = v16 + 1;
    v18 = *(_QWORD *)(v15 + 552);
    if (v18 < v16 + 1)
    {
      v26 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v27 = v26;
        v26 *= 2;
      }
      while (v27 < v17);
      v28 = (char *)mmap(0, v27, 3, 4098, -1, 0);
      if (v28 == (char *)-1)
      {
        __break(0xC471u);
        return;
      }
      v19 = v28;
      memcpy(v28, *(const void **)(v15 + 528), *(_QWORD *)(v15 + 544));
      v29 = *(void **)(v15 + 528);
      if (v29 != (void *)(v15 + 16))
        munmap(v29, *(_QWORD *)(v15 + 552));
      *(_QWORD *)(v15 + 528) = v19;
      *(_QWORD *)(v15 + 552) = v27;
      v20 = *(_QWORD *)(v15 + 544);
    }
    else
    {
      v19 = *(char **)(v15 + 528);
      v20 = *(_QWORD *)(v15 + 544);
    }
    bzero(&v19[v20], v16 - v20);
    *(_QWORD *)(v15 + 544) = v17;
    v21 = (_BYTE *)(*(_QWORD *)(v15 + 528) + v16);
    *(_QWORD *)(v15 + 536) = v21 + 1;
    *v21 = a4;
    IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::encode((IPC::Encoder *)v15, a6);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v13, &v30, 0);
    v23 = v30;
    v30 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v22);
      WTF::fastFree(v24, v25);
    }
  }
}

void WebKit::InjectedBundlePageFullScreenClient::exitFullScreenForElement(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, WebCore::Element *a3, char a4)
{
  void (*v5)(uint64_t, _QWORD);
  IPC::Encoder *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v5 = (void (*)(uint64_t, _QWORD))*((_QWORD *)this + 4);
  if (v5)
  {
    if (a3)
    {
      WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v16);
      v7 = v16;
      v5 = (void (*)(uint64_t, _QWORD))*((_QWORD *)this + 4);
      if (a2)
        goto LABEL_4;
    }
    else
    {
      v7 = 0;
      if (a2)
      {
LABEL_4:
        v8 = *((_QWORD *)a2 + 1);
        if (v7)
        {
LABEL_5:
          v5(v8, *((_QWORD *)v7 + 1));
          CFRelease(*((CFTypeRef *)v7 + 1));
          return;
        }
        goto LABEL_12;
      }
    }
    v8 = 0;
    if (v7)
      goto LABEL_5;
LABEL_12:
    v5(v8, 0);
    return;
  }
  if ((a4 & 1) == 0)
  {
    v9 = (char *)a2 + 32;
    v10 = (*(uint64_t (**)(char *, WebKit::WebPage *, WebCore::Element *))(*((_QWORD *)a2 + 4) + 56))((char *)a2 + 32, a2, a3);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1709;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v16 = (IPC::Encoder *)v11;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v16, 0);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
  }
}

IPC::Encoder *WebKit::InjectedBundlePageFullScreenClient::beganEnterFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, WebCore::IntRect *a3, WebCore::IntRect *a4)
{
  uint64_t (*v7)(uint64_t, double, double, double, double, double, double, double, double);
  uint64_t v8;
  IPC::Encoder *result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v7 = (uint64_t (*)(uint64_t, double, double, double, double, double, double, double, double))*((_QWORD *)this + 5);
  if (v7)
  {
    if (a2)
      v8 = *((_QWORD *)a2 + 1);
    else
      v8 = 0;
    return (IPC::Encoder *)v7(v8, (double)*(int *)a3, (double)*((int *)a3 + 1), (double)*((int *)a3 + 2), (double)*((int *)a3 + 3), (double)*(int *)a4, (double)*((int *)a4 + 1), (double)*((int *)a4 + 2), (double)*((int *)a4 + 3));
  }
  else
  {
    v11 = *((_QWORD *)a2 + 4);
    v10 = (char *)a2 + 32;
    v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1705;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v17 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v13, (uint64_t *)a3);
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v13, (uint64_t *)a4);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v17, 0);
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

IPC::Encoder *WebKit::InjectedBundlePageFullScreenClient::beganExitFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, WebCore::IntRect *a3, WebCore::IntRect *a4)
{
  uint64_t (*v7)(uint64_t, double, double, double, double, double, double, double, double);
  uint64_t v8;
  IPC::Encoder *result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v7 = (uint64_t (*)(uint64_t, double, double, double, double, double, double, double, double))*((_QWORD *)this + 6);
  if (v7)
  {
    if (a2)
      v8 = *((_QWORD *)a2 + 1);
    else
      v8 = 0;
    return (IPC::Encoder *)v7(v8, (double)*(int *)a3, (double)*((int *)a3 + 1), (double)*((int *)a3 + 2), (double)*((int *)a3 + 3), (double)*(int *)a4, (double)*((int *)a4 + 1), (double)*((int *)a4 + 2), (double)*((int *)a4 + 3));
  }
  else
  {
    v11 = *((_QWORD *)a2 + 4);
    v10 = (char *)a2 + 32;
    v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1706;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v17 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v13, (uint64_t *)a3);
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v13, (uint64_t *)a4);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v17, 0);
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

IPC::Encoder *WebKit::InjectedBundlePageFullScreenClient::closeFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2)
{
  uint64_t (*v3)(_QWORD);
  IPC::Encoder *result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v3 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 7);
  if (v3)
  {
    if (a2)
      return (IPC::Encoder *)v3(*((_QWORD *)a2 + 1));
    else
      return (IPC::Encoder *)v3(0);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 4);
    v5 = (char *)a2 + 32;
    v7 = (*(uint64_t (**)(char *))(v6 + 56))(v5);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1707;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v12 = (IPC::Encoder *)v8;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
    result = v12;
    v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void WebKit::InjectedBundlePageLoaderClient::willLoadURLRequest(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, const WebCore::ResourceRequest *a3, API::Object *a4)
{
  void (*v4)(uint64_t, CFTypeRef, uint64_t, _QWORD);
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;

  v4 = (void (*)(uint64_t, CFTypeRef, uint64_t, _QWORD))*((_QWORD *)this + 35);
  if (v4)
  {
    v8 = *((_QWORD *)a2 + 1);
    v9 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v9 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v9);
    *v9 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v9 + 2, a3);
    if (a4)
      v10 = *((_QWORD *)a4 + 1);
    else
      v10 = 0;
    v4(v8, v9[1], v10, *((_QWORD *)this + 2));
    CFRelease(v9[1]);
  }
}

void WebKit::InjectedBundlePageLoaderClient::willLoadDataRequest(uint64_t a1, uint64_t a2, const WebCore::ResourceRequest *a3, WebCore::FragmentedSharedBuffer **a4, WTF::StringImpl **a5, WTF::StringImpl **a6, WTF::StringImpl **a7, uint64_t a8)
{
  void (*v8)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  WTF::StringImpl **v9;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::SharedBuffer *v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  CFTypeRef *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WebCore::SharedBuffer *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebCore::SharedBuffer *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::SharedBuffer *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v46;
  WebCore::SharedBuffer *v47;

  v8 = *(void (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 288);
  if (!v8)
    return;
  v9 = a7;
  if (*a4)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(*a4);
    do
      v16 = __ldaxr((unsigned int *)v47);
    while (__stlxr(v16 + 1, (unsigned int *)v47));
    v17 = WebCore::SharedBuffer::data(v47);
    v18 = *((_QWORD *)v47 + 6);
    v19 = v47;
    v20 = API::Object::newObject(0x30uLL, 8);
    *(_QWORD *)v20 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v20);
    *(_QWORD *)v20 = &off_1E34AE750;
    *(_QWORD *)(v20 + 16) = v17;
    *(_QWORD *)(v20 + 24) = v18;
    *(_QWORD *)(v20 + 32) = WebKit::releaseSharedBuffer;
    *(_QWORD *)(v20 + 40) = v19;
    v22 = (unsigned int *)v47;
    v47 = 0;
    if (v22)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v21);
    v8 = *(void (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 288);
    v9 = a7;
  }
  else
  {
    v20 = 0;
  }
  v43 = *(_QWORD *)(a2 + 8);
  v23 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
  *v23 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v23);
  *v23 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest(v23 + 2, a3);
  if (v20)
    v44 = *(_QWORD *)(v20 + 8);
  else
    v44 = 0;
  v42 = v23[1];
  v24 = *a5;
  if (*a5)
    *(_DWORD *)v24 += 2;
  v46 = v24;
  API::String::create(&v46, &v47);
  v26 = v46;
  v27 = v47;
  v46 = 0;
  v47 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, v25);
      if (v27)
        goto LABEL_17;
      goto LABEL_30;
    }
    *(_DWORD *)v26 -= 2;
  }
  if (v27)
  {
LABEL_17:
    v28 = *((_QWORD *)v27 + 1);
    goto LABEL_18;
  }
LABEL_30:
  v28 = 0;
LABEL_18:
  v29 = *a6;
  if (*a6)
    *(_DWORD *)v29 += 2;
  v46 = v29;
  API::String::create(&v46, &v47);
  v31 = v46;
  v32 = v47;
  v46 = 0;
  v47 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy(v31, v30);
      if (v32)
        goto LABEL_24;
LABEL_32:
      v33 = 0;
      goto LABEL_25;
    }
    *(_DWORD *)v31 -= 2;
  }
  if (!v32)
    goto LABEL_32;
LABEL_24:
  v33 = *((_QWORD *)v32 + 1);
LABEL_25:
  v34 = *v9;
  if (*v9)
  {
    *(_DWORD *)v34 += 2;
    v46 = v34;
    API::URL::create((API::URL *)&v46, &v47);
    v36 = v46;
    v37 = v47;
    v46 = 0;
    v47 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    v38 = a8;
    if (v37)
    {
      v39 = 0;
      v40 = *((_QWORD *)v37 + 1);
    }
    else
    {
      v40 = 0;
      v39 = 1;
    }
  }
  else
  {
    v37 = 0;
    v40 = 0;
    v39 = 1;
    v38 = a8;
  }
  if (v38)
    v41 = *(_QWORD *)(v38 + 8);
  else
    v41 = 0;
  v8(v43, v42, v44, v28, v33, v40, v41, *(_QWORD *)(a1 + 16));
  if ((v39 & 1) == 0)
    CFRelease(*((CFTypeRef *)v37 + 1));
  if (v32)
    CFRelease(*((CFTypeRef *)v32 + 1));
  if (v27)
    CFRelease(*((CFTypeRef *)v27 + 1));
  CFRelease(v23[1]);
  if (v20)
    CFRelease(*(CFTypeRef *)(v20 + 8));
}

unsigned int *WebKit::releaseSharedBuffer(WebKit *this, unsigned int *a2, const void *a3)
{
  return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a2, a2);
}

void WebKit::InjectedBundlePageLoaderClient::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 24);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReceiveServerRedirectForProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 32);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFailProvisionalLoadWithErrorForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void (*v5)(uint64_t, uint64_t, _QWORD, id *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, id *, _QWORD))(a1 + 40);
  if (v5)
  {
    v14 = 0;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v11, a4))
    {
      v5(v9, v10, *(_QWORD *)(v11 + 8), &v14, *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    else
    {
      v5(v9, v10, 0, &v14, *(_QWORD *)(a1 + 16));
    }
    v12 = (uint64_t)v14;
    if (v14)
      v12 = objc_msgSend(v14, "_apiObject");
    v13 = *a5;
    *a5 = v12;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 48);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFinishDocumentLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 56);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 64);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didFinishProgress(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 232);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

void WebKit::InjectedBundlePageLoaderClient::didFailLoadWithErrorForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void (*v5)(uint64_t, uint64_t, _QWORD, id *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, id *, _QWORD))(a1 + 72);
  if (v5)
  {
    v14 = 0;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v11, a4))
    {
      v5(v9, v10, *(_QWORD *)(v11 + 8), &v14, *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    else
    {
      v5(v9, v10, 0, &v14, *(_QWORD *)(a1 + 16));
    }
    v12 = (uint64_t)v14;
    if (v14)
      v12 = objc_msgSend(v14, "_apiObject");
    v13 = *a5;
    *a5 = v12;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didSameDocumentNavigationForFrame(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  void (*v5)(uint64_t, uint64_t, uint64_t, id *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, id *, _QWORD))(a1 + 80);
  if (v5)
  {
    v12 = 0;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a3 + 8);
    if ((a4 - 1) < 3)
      v9 = (a4 - 1) + 1;
    else
      v9 = 0;
    v5(v7, v8, v9, &v12, *(_QWORD *)(a1 + 16));
    v10 = (uint64_t)v12;
    if (v12)
      v10 = objc_msgSend(v12, "_apiObject");
    v11 = *a5;
    *a5 = v10;
    if (v11)
      CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReceiveTitleForFrame(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t *a5)
{
  void (*v5)(uint64_t, _QWORD, _QWORD, id *, _QWORD);
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  WTF::StringImpl *v17;
  WebKit *v18;

  v5 = *(void (**)(uint64_t, _QWORD, _QWORD, id *, _QWORD))(a1 + 88);
  if (v5)
  {
    v16 = 0;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v17 = v10;
    API::String::create(&v17, &v18);
    v12 = v17;
    v13 = v18;
    v17 = 0;
    v18 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v13)
    {
      v5(v9, *((_QWORD *)v13 + 1), *(_QWORD *)(a4 + 8), &v16, *(_QWORD *)(a1 + 16));
      CFRelease(*((CFTypeRef *)v13 + 1));
    }
    else
    {
      v5(v9, 0, *(_QWORD *)(a4 + 8), &v16, *(_QWORD *)(a1 + 16));
    }
    v14 = (uint64_t)v16;
    if (v16)
      v14 = objc_msgSend(v16, "_apiObject");
    v15 = *a5;
    *a5 = v14;
    if (v15)
      CFRelease(*(CFTypeRef *)(v15 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didRemoveFrameFromHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 112);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didDisplayInsecureContentForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 120);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didRunInsecureContentForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 128);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFirstLayoutForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 96);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFirstVisuallyNonEmptyLayoutForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 104);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReachLayoutMilestone(uint64_t a1, uint64_t a2, __int16 a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 264);
  if (v4)
  {
    v9 = 0;
    v6 = (a3 & 1) != 0;
    if ((a3 & 2) != 0)
      v6 |= 2u;
    if ((a3 & 4) != 0)
      v6 |= 4u;
    if ((a3 & 0x10) != 0)
      v6 |= 0x10u;
    if ((a3 & 0x20) != 0)
      v6 |= 0x20u;
    if ((a3 & 0x80) != 0)
      v6 |= 0x80u;
    v4(*(_QWORD *)(a2 + 8), v6 | a3 & 0x100u, &v9, *(_QWORD *)(a1 + 16));
    v7 = (uint64_t)v9;
    if (v9)
      v7 = objc_msgSend(v9, "_apiObject");
    v8 = *a4;
    *a4 = v7;
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::InjectedBundlePageLoaderClient::didClearWindowObjectForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  WebKit::InjectedBundleScriptWorld *v8;
  WebKit::InjectedBundleScriptWorld *v9;

  v4 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 17);
  if (v4)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a3 + 1);
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v9);
    v8 = v9;
    if (v9)
    {
      v4(v6, v7, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    else
    {
      v4(v6, v7, 0, *((_QWORD *)this + 2));
    }
  }
}

WTF::StringImpl *WebKit::InjectedBundleScriptWorld::getOrCreate@<X0>(WebKit::InjectedBundleScriptWorld *this@<X0>, WebKit::InjectedBundleScriptWorld **a2@<X8>)
{
  WebKit::InjectedBundleScriptWorld *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *result;
  WebKit::InjectedBundleScriptWorld *v9;
  WebKit::InjectedBundleScriptWorld *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v5 = (WebKit::InjectedBundleScriptWorld *)WebCore::mainThreadNormalWorld(this);
  if (v5 == this)
  {
    v9 = WebKit::InjectedBundleScriptWorld::normalWorld(v5);
    result = (WTF::StringImpl *)CFRetain(*((CFTypeRef *)v9 + 1));
    *a2 = v9;
  }
  else
  {
    {
      WebKit::allWorlds(void)::map = 0;
    }
    v6 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allWorlds(void)::map, (uint64_t)this);
    if (v6)
    {
      v7 = v6;
      result = (WTF::StringImpl *)CFRetain(*(CFTypeRef *)(v6 + 8));
      *a2 = (WebKit::InjectedBundleScriptWorld *)v7;
    }
    else
    {
      v10 = (WebKit::InjectedBundleScriptWorld *)API::Object::newObject(0x28uLL, 141);
      WebKit::uniqueWorldName(&v12);
      WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(v10, this, (const WTF::String *)&v12);
      *a2 = v10;
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didCancelClientRedirectForFrame(uint64_t this, WebKit::WebPage *a2, WebKit::WebFrame *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(this + 144);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1), *(_QWORD *)(this + 16));
  return this;
}

void WebKit::InjectedBundlePageLoaderClient::willPerformClientRedirectForFrame(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, double a5, double a6)
{
  void (*v6)(uint64_t, uint64_t, _QWORD, _QWORD, double, double);
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit *v15;
  WTF::StringImpl *v16;
  WebKit *v17;

  v6 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, double, double))(a1 + 152);
  if (v6)
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *a4;
    if (!*a4)
      goto LABEL_10;
    *(_DWORD *)v12 += 2;
    v16 = v12;
    API::URL::create((API::URL *)&v16, &v17);
    v14 = v16;
    v15 = v17;
    v16 = 0;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v15)
    {
      v6(v10, v11, *((_QWORD *)v15 + 1), *(_QWORD *)(a1 + 16), a5, a6);
      CFRelease(*((CFTypeRef *)v15 + 1));
    }
    else
    {
LABEL_10:
      v6(v10, v11, 0, *(_QWORD *)(a1 + 16), a5, a6);
    }
  }
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didHandleOnloadEventsForFrame(uint64_t this, WebKit::WebPage *a2, WebKit::WebFrame *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(this + 160);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1), *(_QWORD *)(this + 16));
  return this;
}

void WebKit::InjectedBundlePageLoaderClient::globalObjectIsAvailableForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  WebKit::InjectedBundleScriptWorld *v7;
  void (*v8)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleScriptWorld *v11;

  if (*((_QWORD *)this + 25))
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v11);
    v7 = v11;
    v8 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 25);
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a3 + 1);
    if (v11)
    {
      v8(v9, v10, *((_QWORD *)v11 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v7 + 1));
    }
    else
    {
      v8(v9, v10, 0, *((_QWORD *)this + 2));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::serviceWorkerGlobalObjectIsAvailableForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  WebKit::InjectedBundleScriptWorld *v7;
  void (*v8)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleScriptWorld *v11;

  if (*((_QWORD *)this + 41))
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v11);
    v7 = v11;
    v8 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 41);
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a3 + 1);
    if (v11)
    {
      v8(v9, v10, *((_QWORD *)v11 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v7 + 1));
    }
    else
    {
      v8(v9, v10, 0, *((_QWORD *)this + 2));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willInjectUserScriptForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  WebKit::InjectedBundleScriptWorld *v7;
  void (*v8)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  WebKit::InjectedBundleScriptWorld *v11;

  if (*((_QWORD *)this + 39))
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v11);
    v7 = v11;
    v8 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 39);
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a3 + 1);
    if (v11)
    {
      v8(v9, v10, *((_QWORD *)v11 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v7 + 1));
    }
    else
    {
      v8(v9, v10, 0, *((_QWORD *)this + 2));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willDisconnectDOMWindowExtensionFromGlobalObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 208))
  {
    {
      WebKit::allExtensions(void)::map = 0;
    }
    v5 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allExtensions(void)::map, a3);
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 208))(*(_QWORD *)(a2 + 8), *(_QWORD *)(v6 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 208))(*(_QWORD *)(a2 + 8), 0, *(_QWORD *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReconnectDOMWindowExtensionToGlobalObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 216))
  {
    {
      WebKit::allExtensions(void)::map = 0;
    }
    v5 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allExtensions(void)::map, a3);
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 216))(*(_QWORD *)(a2 + 8), *(_QWORD *)(v6 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 216))(*(_QWORD *)(a2 + 8), 0, *(_QWORD *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willDestroyGlobalObjectForDOMWindowExtension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 224))
  {
    {
      WebKit::allExtensions(void)::map = 0;
    }
    v5 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allExtensions(void)::map, a3);
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 224))(*(_QWORD *)(a2 + 8), *(_QWORD *)(v6 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 224))(*(_QWORD *)(a2 + 8), 0, *(_QWORD *)(a1 + 16));
    }
  }
}

uint64_t WebKit::InjectedBundlePageLoaderClient::shouldForceUniversalAccessFromLocalURL(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  WebKit *v13;

  v3 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 30);
  if (!v3)
    return 0;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *a3;
  if (*a3)
    *(_DWORD *)v6 += 2;
  v12 = v6;
  API::String::create(&v12, &v13);
  v8 = v12;
  v9 = v13;
  v12 = 0;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (v9)
        goto LABEL_8;
      return v3(v5, 0, *((_QWORD *)this + 2));
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v9)
    return v3(v5, 0, *((_QWORD *)this + 2));
LABEL_8:
  v10 = v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
  CFRelease(*((CFTypeRef *)v9 + 1));
  return v10;
}

void WebKit::InjectedBundlePageLoaderClient::featuresUsedInPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 272);
  if (v3)
  {
    v5 = *(_QWORD *)(a2 + 8);
    API::Array::createStringArray(a3, &v7);
    v6 = v7;
    if (v7)
    {
      v3(v5, *(_QWORD *)(v7 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    else
    {
      v3(v5, 0, *(_QWORD *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageResourceLoadClient::didInitiateLoadForResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::ResourceRequest *a5, uint64_t a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v13;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, _QWORD))(a1 + 24);
  if (v6)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a3 + 8);
    v13 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v13 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *v13 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v13 + 2, a5);
    v6(v11, v12, a4, v13[1], a6, *(_QWORD *)(a1 + 16));
    CFRelease(v13[1]);
  }
}

void WebKit::InjectedBundlePageResourceLoadClient::willSendRequestForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::ResourceRequest *a5, const WebCore::ResourceResponse *a6)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, CFTypeRef, CFTypeRef, _QWORD);
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v13;
  CFTypeRef v14;
  CFTypeRef *v15;
  CFTypeRef v16;
  void *v17;
  uint64_t v18;
  WTF::RefCountedBase *v19;
  _QWORD v20[26];

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef, CFTypeRef, _QWORD))(a1 + 32);
  if (v6)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a3 + 8);
    v13 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v13 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *v13 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v13 + 2, a5);
    v14 = v13[1];
    v15 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
    if (API::URLResponse::URLResponse((API::URLResponse *)v15, a6))
      v16 = v15[1];
    else
      v16 = 0;
    v17 = (void *)v6(v11, v12, a4, v14, v16, *(_QWORD *)(a1 + 16));
    if (v17)
      v18 = objc_msgSend(v17, "_apiObject");
    else
      v18 = 0;
    if (v15)
      CFRelease(v15[1]);
    CFRelease(v13[1]);
    if (v18)
    {
      WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequestBase *)(v18 + 16));
      WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties(a5, (const WebCore::ResourceRequest *)(v18 + 16));
      if (v20[0])
      {
        WebCore::ResourceRequestBase::setHTTPBody();
        v19 = (WTF::RefCountedBase *)v20[0];
        v20[0] = 0;
        WTF::RefCounted<WebCore::FormData>::deref(v19);
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v20);
      WebCore::ResourceRequest::operator=((uint64_t)a5, (uint64_t)v20);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v20);
    }
  }
}

void WebKit::InjectedBundlePageResourceLoadClient::didReceiveResponseForResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::ResourceResponse *a5)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, CFTypeRef, _QWORD);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, CFTypeRef, _QWORD);

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef, _QWORD))(a1 + 40);
  if (v6)
  {
    v12 = v6;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
    if (API::URLResponse::URLResponse((API::URLResponse *)v11, a5))
    {
      v12(v9, v10, a4, v11[1], *(_QWORD *)(a1 + 16));
      CFRelease(v11[1]);
    }
    else
    {
      v12(v9, v10, a4, 0, *(_QWORD *)(a1 + 16));
    }
  }
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::didReceiveContentLengthForResource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(result + 48);
  if (v5)
    return v5(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), a4, a5, *(_QWORD *)(result + 16));
  return result;
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::didFinishLoadForResource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(result + 56);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), a4, *(_QWORD *)(result + 16));
  return result;
}

void WebKit::InjectedBundlePageResourceLoadClient::didFailLoadForResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 64);
  if (v6)
  {
    v12 = v6;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v11, a5))
    {
      v12(v9, v10, a4, *(_QWORD *)(v11 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    else
    {
      v12(v9, v10, a4, 0, *(_QWORD *)(a1 + 16));
    }
  }
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::shouldCacheResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 72);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), a4, *(_QWORD *)(a1 + 16));
  else
    return 1;
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::shouldUseCredentialStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 80);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), a4, *(_QWORD *)(a1 + 16));
  else
    return 1;
}

_OWORD *API::Client<WKBundlePageUIClientBase>::initialize(_OWORD *result, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a2)
  {
    if (*(_DWORD *)a2 == 5)
    {
      v3 = a2[1];
      *result = *a2;
      result[1] = v3;
      v4 = a2[2];
      v5 = a2[3];
      v6 = a2[5];
      result[4] = a2[4];
      result[5] = v6;
      result[2] = v4;
      result[3] = v5;
      v7 = a2[6];
      v8 = a2[7];
      v9 = a2[9];
      result[8] = a2[8];
      result[9] = v9;
      result[6] = v7;
      result[7] = v8;
      v10 = a2[10];
      v11 = a2[11];
      v12 = a2[13];
      result[12] = a2[12];
      result[13] = v12;
      result[10] = v10;
      result[11] = v11;
    }
    else
    {
      result[12] = 0u;
      result[13] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *result = 0u;
      result[1] = 0u;
      v2 = *(unsigned int *)a2;
      if ((int)v2 <= 4)
      {
        if (v2 >= 6)
          __break(1u);
        else
          return memcpy(result, a2, qword_1978D0D08[v2]);
      }
    }
  }
  else
  {
    result[12] = 0u;
    result[13] = 0u;
    result[10] = 0u;
    result[11] = 0u;
    result[8] = 0u;
    result[9] = 0u;
    result[6] = 0u;
    result[7] = 0u;
    result[4] = 0u;
    result[5] = 0u;
    result[2] = 0u;
    result[3] = 0u;
    *result = 0u;
    result[1] = 0u;
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageUIClient::InjectedBundlePageUIClient(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E34EA018;
  API::Client<WKBundlePageUIClientBase>::initialize((_OWORD *)(a1 + 8), a2);
  return a1;
}

void WebKit::InjectedBundlePageUIClient::willAddMessageToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6)
{
  void (*v6)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 24);
  if (v6)
  {
    if (a2)
      v9 = *(_QWORD *)(a2 + 8);
    else
      v9 = 0;
    WebKit::toAPI((WebKit *)&v11, *a5);
    v10 = v11;
    if (v11)
    {
      v6(v9, *(_QWORD *)(v11 + 8), a6, *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    else
    {
      v6(v9, 0, a6, *(_QWORD *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageUIClient::willAddMessageWithArgumentsToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9, WTF::StringImpl **a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 224);
  if (v10)
  {
    if (a2)
      v15 = *(_QWORD *)(a2 + 8);
    else
      v15 = 0;
    WebKit::toAPI((WebKit *)&v24, *a5);
    v16 = v24;
    if (v24)
      v17 = *(_QWORD *)(v24 + 8);
    else
      v17 = 0;
    API::Array::createStringArray(a6, a7, &v23);
    v18 = v23;
    v23 = 0;
    if (v18)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    WebKit::toAPI((WebKit *)&v22, *a10);
    v20 = v22;
    if (v22)
    {
      v10(v15, v17, v19, a8, a9, *(_QWORD *)(v22 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v20 + 8));
    }
    else
    {
      v10(v15, v17, v19, a8, a9, 0, *(_QWORD *)(a1 + 16));
    }
    v21 = v23;
    v23 = 0;
    if (v21)
      CFRelease(*(CFTypeRef *)(v21 + 8));
    if (v16)
      CFRelease(*(CFTypeRef *)(v16 + 8));
  }
}

void WebKit::InjectedBundlePageUIClient::willSetStatusbarText(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 4);
  if (v3)
  {
    if (a2)
      v5 = *((_QWORD *)a2 + 1);
    else
      v5 = 0;
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_10;
        goto LABEL_13;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_10:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_13:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

void WebKit::InjectedBundlePageUIClient::willRunJavaScriptAlert(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3, WebKit::WebFrame *a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit *v15;

  v4 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 5);
  if (v4)
  {
    if (a2)
      v7 = *((_QWORD *)a2 + 1);
    else
      v7 = 0;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v14 = v8;
    API::String::create(&v14, &v15);
    v10 = v14;
    v11 = v15;
    v14 = 0;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_10:
          v12 = *((_QWORD *)v11 + 1);
          if (a4)
          {
LABEL_11:
            v13 = *((_QWORD *)a4 + 1);
            goto LABEL_12;
          }
LABEL_17:
          v13 = 0;
LABEL_12:
          v4(v7, v12, v13, *((_QWORD *)this + 2));
          if (v11)
            CFRelease(*((CFTypeRef *)v11 + 1));
          return;
        }
LABEL_16:
        v12 = 0;
        if (a4)
          goto LABEL_11;
        goto LABEL_17;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11)
      goto LABEL_10;
    goto LABEL_16;
  }
}

void WebKit::InjectedBundlePageUIClient::willRunJavaScriptConfirm(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3, WebKit::WebFrame *a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit *v15;

  v4 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 6);
  if (v4)
  {
    if (a2)
      v7 = *((_QWORD *)a2 + 1);
    else
      v7 = 0;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v14 = v8;
    API::String::create(&v14, &v15);
    v10 = v14;
    v11 = v15;
    v14 = 0;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_10:
          v12 = *((_QWORD *)v11 + 1);
          if (a4)
          {
LABEL_11:
            v13 = *((_QWORD *)a4 + 1);
            goto LABEL_12;
          }
LABEL_17:
          v13 = 0;
LABEL_12:
          v4(v7, v12, v13, *((_QWORD *)this + 2));
          if (v11)
            CFRelease(*((CFTypeRef *)v11 + 1));
          return;
        }
LABEL_16:
        v12 = 0;
        if (a4)
          goto LABEL_11;
        goto LABEL_17;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11)
      goto LABEL_10;
    goto LABEL_16;
  }
}

void WebKit::InjectedBundlePageUIClient::willRunJavaScriptPrompt(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WebKit::WebFrame *a5)
{
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebKit *v22;

  v5 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 7);
  if (!v5)
    return;
  if (a2)
    v9 = *((_QWORD *)a2 + 1);
  else
    v9 = 0;
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v21 = v10;
  API::String::create(&v21, &v22);
  v12 = v21;
  v13 = v22;
  v21 = 0;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v11);
      if (v13)
        goto LABEL_10;
      goto LABEL_25;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v13)
  {
LABEL_10:
    v14 = *((_QWORD *)v13 + 1);
    goto LABEL_11;
  }
LABEL_25:
  v14 = 0;
LABEL_11:
  v15 = *a4;
  if (*a4)
    *(_DWORD *)v15 += 2;
  v21 = v15;
  API::String::create(&v21, &v22);
  v17 = v21;
  v18 = v22;
  v21 = 0;
  v22 = 0;
  if (!v17)
  {
LABEL_16:
    if (v18)
      goto LABEL_17;
LABEL_27:
    v19 = 0;
    if (a5)
      goto LABEL_18;
LABEL_28:
    v20 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (!v18)
    goto LABEL_27;
LABEL_17:
  v19 = *((_QWORD *)v18 + 1);
  if (!a5)
    goto LABEL_28;
LABEL_18:
  v20 = *((_QWORD *)a5 + 1);
LABEL_19:
  v5(v9, v14, v19, v20, *((_QWORD *)this + 2));
  if (v18)
    CFRelease(*((CFTypeRef *)v18 + 1));
  if (v13)
    CFRelease(*((CFTypeRef *)v13 + 1));
}

void WebKit::InjectedBundlePageUIClient::mouseDidMoveOverElement(uint64_t a1, uint64_t a2, WebKit::InjectedBundleHitTestResult *this, char a4, uint64_t *a5)
{
  uint64_t v9;
  WebKit *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  WebKit *v15;

  if (*(_QWORD *)(a1 + 64))
  {
    WebKit::InjectedBundleHitTestResult::create(this, &v15);
    v14 = 0;
    if (a2)
      v9 = *(_QWORD *)(a2 + 8);
    else
      v9 = 0;
    v10 = v15;
    if (v15)
      v11 = *((_QWORD *)v15 + 1);
    else
      v11 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, id *, _QWORD))(a1 + 64))(v9, v11, a4 & 0x1F, &v14, *(_QWORD *)(a1 + 16));
    v12 = (uint64_t)v14;
    if (v14)
      v12 = objc_msgSend(v14, "_apiObject");
    v13 = *a5;
    *a5 = v12;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    if (v10)
      CFRelease(*((CFTypeRef *)v10 + 1));
  }
}

uint64_t WebKit::InjectedBundlePageUIClient::pageDidScroll(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 72);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WebKit::InjectedBundlePageUIClient::statusBarIsVisible(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  int v4;

  v2 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  if (a2)
    v3 = *((_QWORD *)a2 + 1);
  else
    v3 = 0;
  v4 = v2(v3, *((_QWORD *)this + 2));
  if (v4 == 2)
    return 2;
  else
    return v4 == 1;
}

uint64_t WebKit::InjectedBundlePageUIClient::menuBarIsVisible(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  int v4;

  v2 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 15);
  if (!v2)
    return 0;
  if (a2)
    v3 = *((_QWORD *)a2 + 1);
  else
    v3 = 0;
  v4 = v2(v3, *((_QWORD *)this + 2));
  if (v4 == 2)
    return 2;
  else
    return v4 == 1;
}

uint64_t WebKit::InjectedBundlePageUIClient::toolbarsAreVisible(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  int v4;

  v2 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 16);
  if (!v2)
    return 0;
  if (a2)
    v3 = *((_QWORD *)a2 + 1);
  else
    v3 = 0;
  v4 = v2(v3, *((_QWORD *)this + 2));
  if (v4 == 2)
    return 2;
  else
    return v4 == 1;
}

uint64_t WebKit::InjectedBundlePageUIClient::didExceedDatabaseQuota(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, API::SecurityOrigin *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD);
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebKit *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebKit *v24;
  uint64_t v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebKit *v29;

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD))*((_QWORD *)this + 18);
  if (!v9)
    return 0;
  if (a2)
  {
    v27 = *((_QWORD *)a2 + 1);
    if (a3)
    {
LABEL_4:
      v15 = *((_QWORD *)a3 + 1);
      goto LABEL_5;
    }
  }
  else
  {
    v27 = 0;
    if (a3)
      goto LABEL_4;
  }
  v15 = 0;
LABEL_5:
  v16 = *a4;
  if (*a4)
    *(_DWORD *)v16 += 2;
  v28 = v16;
  API::String::create(&v28, &v29);
  v18 = v28;
  v19 = v29;
  v28 = 0;
  v29 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v17);
      if (v19)
        goto LABEL_11;
      goto LABEL_23;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (v19)
  {
LABEL_11:
    v20 = *((_QWORD *)v19 + 1);
    goto LABEL_12;
  }
LABEL_23:
  v20 = 0;
LABEL_12:
  v21 = *a5;
  if (*a5)
    *(_DWORD *)v21 += 2;
  v28 = v21;
  API::String::create(&v28, &v29);
  v23 = v28;
  v24 = v29;
  v28 = 0;
  v29 = 0;
  if (!v23)
  {
LABEL_17:
    if (v24)
      goto LABEL_18;
LABEL_25:
    v25 = v9(v27, v15, v20, 0, a6, a7, a8, a9, *((_QWORD *)this + 2));
    if (!v19)
      return v25;
    goto LABEL_19;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v23, v22);
  if (!v24)
    goto LABEL_25;
LABEL_18:
  v25 = v9(v27, v15, v20, *((_QWORD *)v24 + 1), a6, a7, a8, a9, *((_QWORD *)this + 2));
  CFRelease(*((CFTypeRef *)v24 + 1));
  if (v19)
LABEL_19:
    CFRelease(*((CFTypeRef *)v19 + 1));
  return v25;
}

void WebKit::InjectedBundlePageUIClient::plugInStartLabelTitle(WebKit::InjectedBundlePageUIClient *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t (*v4)(uint64_t, _QWORD);
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebKit *v14;

  v4 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 19);
  if (!v4)
    goto LABEL_14;
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v13 = v6;
  API::String::create(&v13, &v14);
  v8 = v13;
  v9 = v14;
  v13 = 0;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (v9)
        goto LABEL_8;
      goto LABEL_16;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v9)
  {
LABEL_8:
    v10 = *((_QWORD *)v9 + 1);
    goto LABEL_9;
  }
LABEL_16:
  v10 = 0;
LABEL_9:
  v11 = (void *)v4(v10, *((_QWORD *)this + 2));
  if (v11)
  {
    v12 = objc_msgSend(v11, "_apiObject", v13, v14);
    if (!v9)
      goto LABEL_12;
    goto LABEL_11;
  }
  v12 = 0;
  if (v9)
LABEL_11:
    CFRelease(*((CFTypeRef *)v9 + 1));
LABEL_12:
  if (v12)
  {
    WTF::String::isolatedCopy();
    CFRelease(*(CFTypeRef *)(v12 + 8));
    return;
  }
LABEL_14:
  *a3 = 0;
}

void WebKit::InjectedBundlePageUIClient::plugInStartLabelSubtitle(WebKit::InjectedBundlePageUIClient *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t (*v4)(uint64_t, _QWORD);
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebKit *v14;

  v4 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)this + 20);
  if (!v4)
    goto LABEL_14;
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v13 = v6;
  API::String::create(&v13, &v14);
  v8 = v13;
  v9 = v14;
  v13 = 0;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (v9)
        goto LABEL_8;
      goto LABEL_16;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v9)
  {
LABEL_8:
    v10 = *((_QWORD *)v9 + 1);
    goto LABEL_9;
  }
LABEL_16:
  v10 = 0;
LABEL_9:
  v11 = (void *)v4(v10, *((_QWORD *)this + 2));
  if (v11)
  {
    v12 = objc_msgSend(v11, "_apiObject", v13, v14);
    if (!v9)
      goto LABEL_12;
    goto LABEL_11;
  }
  v12 = 0;
  if (v9)
LABEL_11:
    CFRelease(*((CFTypeRef *)v9 + 1));
LABEL_12:
  if (v12)
  {
    WTF::String::isolatedCopy();
    CFRelease(*(CFTypeRef *)(v12 + 8));
    return;
  }
LABEL_14:
  *a3 = 0;
}

void WebKit::InjectedBundlePageUIClient::plugInExtraStyleSheet(WebKit::InjectedBundlePageUIClient *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(_QWORD);
  void *v4;
  uint64_t v5;

  v3 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 21);
  if (v3 && (v4 = (void *)v3(*((_QWORD *)this + 2))) != 0)
  {
    v5 = objc_msgSend(v4, "_apiObject");
    WTF::String::isolatedCopy();
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    *a2 = 0;
  }
}

void WebKit::InjectedBundlePageUIClient::plugInExtraScript(WebKit::InjectedBundlePageUIClient *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(_QWORD);
  void *v4;
  uint64_t v5;

  v3 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 22);
  if (v3 && (v4 = (void *)v3(*((_QWORD *)this + 2))) != 0)
  {
    v5 = objc_msgSend(v4, "_apiObject");
    WTF::String::isolatedCopy();
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    *a2 = 0;
  }
}

void WebKit::InjectedBundlePageUIClient::didClickAutoFillButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 208);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::InjectedBundlePageUIClient::didResignInputElementStrongPasswordAppearance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(_QWORD, _QWORD, id *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(_QWORD, _QWORD, id *, _QWORD))(a1 + 216);
  if (v4)
  {
    v8 = 0;
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), &v8, *(_QWORD *)(a1 + 16));
    v6 = (uint64_t)v8;
    if (v8)
      v6 = objc_msgSend(v8, "_apiObject");
    v7 = *a4;
    *a4 = v6;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

WTF::StringImpl *WebKit::InjectedBundleScriptWorld::create@<X0>(WebKit::InjectedBundleScriptWorld **a1@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebKit::uniqueWorldName(&v4);
  WebKit::InjectedBundleScriptWorld::create((const WTF::String *)&v4, a1);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::DOMWrapperWorld *WebKit::InjectedBundleScriptWorld::create@<X0>(const WTF::String *a1@<X0>, WebKit::InjectedBundleScriptWorld **a2@<X8>)
{
  WebKit::InjectedBundleScriptWorld *v4;
  WebCore::DOMWrapperWorld *result;
  WebCore::DOMWrapperWorld *v6;

  v4 = (WebKit::InjectedBundleScriptWorld *)API::Object::newObject(0x28uLL, 141);
  WebCore::ScriptController::createWorld();
  WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(v4, v6, a1);
  *a2 = v4;
  result = v6;
  if (v6)
    return (WebCore::DOMWrapperWorld *)WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v6);
  return result;
}

uint64_t WebKit::uniqueWorldName@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6[2];

  v3 = WebKit::uniqueWorldName(void)::uniqueWorldNameNumber++;
  v6[0] = (uint64_t)"UniqueWorld_";
  v6[1] = 13;
  v5 = v3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(v6, (unint64_t *)&v5, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

void WebKit::InjectedBundleScriptWorld::~InjectedBundleScriptWorld(WebKit::InjectedBundleScriptWorld *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  *(_QWORD *)this = &off_1E34EA0C8;
  {
    v3 = WebKit::allWorlds(void)::map;
    v5 = (_DWORD **)((char *)this + 24);
    v4 = *((_QWORD *)this + 3);
    if (WebKit::allWorlds(void)::map)
    {
      v6 = *(_DWORD *)(WebKit::allWorlds(void)::map - 8);
      v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(WTF **)(WebKit::allWorlds(void)::map + 16 * v10);
        if (v13 != (WTF *)-1)
        {
          if (!v13)
            goto LABEL_19;
          if (*((_QWORD *)v13 + 1) == v4)
            break;
        }
        v10 = (v10 + i) & v6;
      }
      if (v10 != *(_DWORD *)(WebKit::allWorlds(void)::map - 4))
      {
        v14 = (_QWORD *)(WebKit::allWorlds(void)::map + 16 * v10);
        *v14 = 0;
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, a2);
        else
          --*(_DWORD *)v13;
        *v14 = -1;
        v15 = v3 + 16 * v12;
        v16 = *(unsigned int **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          do
          {
            v26 = __ldaxr(v16);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v16));
          if (!v27)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, a2);
          }
        }
        ++*(_DWORD *)(WebKit::allWorlds(void)::map - 16);
        if (WebKit::allWorlds(void)::map)
          v17 = *(_DWORD *)(WebKit::allWorlds(void)::map - 12) - 1;
        else
          v17 = -1;
        *(_DWORD *)(WebKit::allWorlds(void)::map - 12) = v17;
        if (WebKit::allWorlds(void)::map)
        {
          v18 = *(_DWORD *)(WebKit::allWorlds(void)::map - 4);
          if (6 * *(_DWORD *)(WebKit::allWorlds(void)::map - 12) < v18 && v18 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(&WebKit::allWorlds(void)::map, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebKit::allWorlds(void)::map = 0;
    v5 = (_DWORD **)((char *)this + 24);
  }
LABEL_19:
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *v5;
  *v5 = 0;
  if (v21)
    WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v21);
  v22 = *((_QWORD *)this + 2);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 0;
    v23 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::InjectedBundleScriptWorld::~InjectedBundleScriptWorld(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WKBundleGetTypeID()
{
  return 129;
}

uint64_t WKBundleSetServiceWorkerProxyCreationCallback(void *a1, uint64_t a2)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  *(_QWORD *)(result + 24) = a2;
  return result;
}

WTF::StringImpl *WKBundlePostMessage(void *a1, void *a2, void *a3)
{
  WebKit::InjectedBundle *v5;
  API::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  if (a1)
    v5 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v9 = 0;
  }
  if (a3)
    v6 = (API::Object *)objc_msgSend(a3, "_apiObject");
  else
    v6 = 0;
  WebKit::InjectedBundle::postMessage(v5, (const WTF::String *)&v9, v6);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WKBundlePostSynchronousMessage(void *a1, void *a2, void *a3, CFTypeRef **a4)
{
  uint64_t v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef *v11;
  WTF::StringImpl *v12;
  CFTypeRef *v13;

  v13 = 0;
  if (a1)
  {
    v7 = objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_17:
    v12 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_18;
  }
  v7 = 0;
  if (!a2)
    goto LABEL_17;
LABEL_3:
  objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    v8 = (const void *)objc_msgSend(a3, "_apiObject", v12);
    goto LABEL_5;
  }
LABEL_18:
  v8 = 0;
LABEL_5:
  WebKit::InjectedBundle::postSynchronousMessage(v7, (uint64_t *)&v12, v8, &v13);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13;
  if (a4)
  {
    if (v13)
      v11 = (CFTypeRef *)v13[1];
    *a4 = v11;
  }
  else if (v13)
  {
    CFRelease(v13[1]);
  }
}

uint64_t WKBundleGarbageCollectJavaScriptObjects(void *a1)
{
  WebCore::GCController *v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = (WebCore::GCController *)WebCore::GCController::singleton((WebCore::GCController *)a1);
  return WebCore::GCController::garbageCollectNow(v1);
}

uint64_t WKBundleGarbageCollectJavaScriptObjectsOnAlternateThreadForDebugging(void *a1)
{
  WebCore::GCController *v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = (WebCore::GCController *)WebCore::GCController::singleton((WebCore::GCController *)a1);
  return WebCore::GCController::garbageCollectOnAlternateThreadForDebugging(v1);
}

uint64_t WKBundleGetJavaScriptObjectsCount(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundle::javaScriptObjectsCount((WebKit::InjectedBundle *)a1);
}

WTF::StringImpl *WKBundleAddOriginAccessAllowListEntry(void *a1, void *a2, void *a3, void *a4, const WTF::String *a5)
{
  WebKit::InjectedBundle *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (a1)
  {
    v9 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
  }
  else
  {
    v9 = 0;
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      if (a3)
        goto LABEL_4;
LABEL_21:
      v15 = 0;
      if (a4)
        goto LABEL_5;
      goto LABEL_22;
    }
  }
  v16 = 0;
  if (!a3)
    goto LABEL_21;
LABEL_4:
  objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  if (a4)
  {
LABEL_5:
    objc_msgSend(a4, "_apiObject");
    WTF::String::isolatedCopy();
    goto LABEL_6;
  }
LABEL_22:
  v14 = 0;
LABEL_6:
  WebKit::InjectedBundle::addOriginAccessAllowListEntry(v9, (const WTF::String *)&v16, (const WTF::String *)&v15, (const WTF::String *)&v14, a5);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKBundleRemoveOriginAccessAllowListEntry(void *a1, void *a2, void *a3, void *a4, const WTF::String *a5)
{
  WebKit::InjectedBundle *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (a1)
  {
    v9 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
  }
  else
  {
    v9 = 0;
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      if (a3)
        goto LABEL_4;
LABEL_21:
      v15 = 0;
      if (a4)
        goto LABEL_5;
      goto LABEL_22;
    }
  }
  v16 = 0;
  if (!a3)
    goto LABEL_21;
LABEL_4:
  objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  if (a4)
  {
LABEL_5:
    objc_msgSend(a4, "_apiObject");
    WTF::String::isolatedCopy();
    goto LABEL_6;
  }
LABEL_22:
  v14 = 0;
LABEL_6:
  WebKit::InjectedBundle::removeOriginAccessAllowListEntry(v9, (const WTF::String *)&v16, (const WTF::String *)&v15, (const WTF::String *)&v14, a5);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKBundleResetOriginAccessAllowLists(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundle::resetOriginAccessAllowLists((WebKit::InjectedBundle *)a1);
}

uint64_t WKBundleSetAsynchronousSpellCheckingEnabledForTesting(void *a1, char a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundle::setAsynchronousSpellCheckingEnabled((WebKit::InjectedBundle *)a1, a2);
}

char *WKBundleGetLiveDocumentURLsForTesting(void *a1, char a2)
{
  WTF::StringImpl *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::UUID *v7;
  WTF::UUID *v8;
  uint64_t v9;
  WTF::UUID *v10;
  WebKit *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  void *v16;
  WTF::StringImpl *v17;
  CFTypeRef *v18;
  WTF::StringImpl *v19;
  CFTypeRef *v20;
  WTF::UUID *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;
  WTF::UUID *v27;
  WebKit *v28;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundle::liveDocumentURLs((WebKit::InjectedBundle *)a1, a2, (uint64_t *)&v27);
  API::Array::create(&v28);
  if (v28)
    v4 = (char *)*((_QWORD *)v28 + 1);
  else
    v4 = 0;
  v5 = (uint64_t)v27;
  if (v27)
  {
    v6 = *((unsigned int *)v27 - 1);
    v7 = (WTF::UUID *)((char *)v27 + 32 * v6);
    if (*((_DWORD *)v27 - 3))
    {
      v8 = v27;
      if ((_DWORD)v6)
      {
        v9 = 32 * v6;
        v8 = v27;
        while (*(_QWORD *)v8 <= 1uLL)
        {
          v8 = (WTF::UUID *)((char *)v8 + 32);
          v9 -= 32;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v8 = (WTF::UUID *)((char *)v27 + 32 * v6);
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = (WTF::UUID *)((char *)v27 + 32 * v6);
  if (v27)
  {
LABEL_12:
    v10 = (WTF::UUID *)((char *)v27 + 32 * *((unsigned int *)v27 - 1));
    goto LABEL_17;
  }
  v10 = 0;
LABEL_17:
  if (v10 != v8)
  {
    do
    {
      v11 = (WebKit *)API::Object::newObject(0x18uLL, 9);
      *(_QWORD *)v11 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v11);
      *(_QWORD *)v11 = &off_1E34CC280;
      *((_QWORD *)v11 + 2) = 0;
      v12 = (void *)*((_QWORD *)v11 + 1);
      v14 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"id", v13);
      v16 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"url", v15);
      WTF::UUID::toString(v8);
      API::String::create(&v28);
      if (v28)
        v18 = (CFTypeRef *)*((_QWORD *)v28 + 1);
      else
        v18 = 0;
      v19 = v26;
      v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      API::String::create(&v28);
      if (v28)
        v20 = (CFTypeRef *)*((_QWORD *)v28 + 1);
      else
        v20 = 0;
      WKDictionarySetItem(v12, v14, v18);
      WKDictionarySetItem(v12, v16, v20);
      WKArrayAppendItem(v4, v12);
      if (v20)
        CFRelease(*(CFTypeRef *)(-[CFTypeRef _apiObject](v20, "_apiObject") + 8));
      if (v18)
        CFRelease(*(CFTypeRef *)(-[CFTypeRef _apiObject](v18, "_apiObject") + 8));
      if (v16)
        CFRelease(*(CFTypeRef *)(objc_msgSend(v16, "_apiObject") + 8));
      if (v14)
        CFRelease(*(CFTypeRef *)(objc_msgSend(v14, "_apiObject") + 8));
      if (v12)
        CFRelease(*(CFTypeRef *)(objc_msgSend(v12, "_apiObject") + 8));
      v21 = (WTF::UUID *)((char *)v8 + 32);
      v8 = v7;
      if (v21 != v7)
      {
        v8 = v21;
        while (*(_QWORD *)v8 <= 1uLL)
        {
          v8 = (WTF::UUID *)((char *)v8 + 32);
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
    }
    while (v8 != v10);
    v5 = (uint64_t)v27;
  }
  if (v5)
  {
    v22 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v22)
    {
      v23 = (WTF::StringImpl **)(v5 + 16);
      do
      {
        if ((unint64_t)*(v23 - 2) ^ 1 | (unint64_t)*(v23 - 1))
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v3);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        v23 += 4;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v5 - 16), v3);
  }
  return v4;
}

uint64_t WKBundleSetDatabaseQuota(WebCore::DatabaseTracker *a1)
{
  WebCore::DatabaseTracker *v1;
  uint64_t result;
  char v3;
  _BYTE v4[24];
  int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (WebCore::DatabaseTracker *)WebCore::DatabaseTracker::singleton(a1);
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  if (!v6)
    __break(1u);
  result = WebCore::DatabaseTracker::setQuota(v1, (const WebCore::SecurityOriginData *)v4);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34EA0F0[v5])(&v3, v4);
  }
  return result;
}

uint64_t WKBundleReleaseMemory()
{
  return WebCore::releaseMemory();
}

uint64_t WKBundleCreateWKDataFromUInt8Array(void *a1, OpaqueJSContext *a2, OpaqueJSValue *a3)
{
  WebKit *v5;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundle::createWebDataFromUint8Array(a3, &v5);
  if (v5)
    return *((_QWORD *)v5 + 1);
  else
    return 0;
}

uint64_t WKBundleNumberOfPages(void *a1, void *a2, const FloatSize *a3, double a4, double a5)
{
  WebKit::InjectedBundle *v8;
  WebKit::WebFrame *v9;

  if (!a1)
  {
    v8 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v9 = 0;
    return WebKit::InjectedBundle::numberOfPages(v8, v9, a4, a5, a3);
  }
  v8 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v9 = (WebKit::WebFrame *)objc_msgSend(a2, "_apiObject");
  return WebKit::InjectedBundle::numberOfPages(v8, v9, a4, a5, a3);
}

uint64_t WKBundlePageNumberForElementById(void *a1, void *a2, void *a3, double a4, double a5)
{
  void *v8;
  WebKit::InjectedBundle *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  v8 = a2;
  if (a1)
  {
    v9 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = 0;
  if (a2)
LABEL_3:
    v8 = (void *)objc_msgSend(v8, "_apiObject");
LABEL_4:
  if (a3)
  {
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v14 = 0;
  }
  v11 = WebKit::InjectedBundle::pageNumberForElementById(v9, (WebKit::WebFrame *)v8, (const WTF::String *)&v14, a4, a5);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v11;
}

uint64_t WKBundlePageSizeAndMarginsInPixels(void *a1, void *a2, WebCore::LocalFrame *a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  WebKit::WebFrame *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  WebKit *v22;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  if (a2)
    v16 = (WebKit::WebFrame *)objc_msgSend(a2, "_apiObject");
  else
    v16 = 0;
  WebKit::InjectedBundle::pageSizeAndMarginsInPixels(v16, a3, a4, a5, a6, a7, a8, &v21, a9);
  API::String::create(&v22);
  if (v22)
    v18 = *((_QWORD *)v22 + 1);
  else
    v18 = 0;
  v19 = v21;
  v21 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  return v18;
}

uint64_t WKBundleIsPageBoxVisible(void *a1, void *a2, WebCore::LocalFrame *a3)
{
  WebKit::InjectedBundle *v5;
  WebKit::WebFrame *v6;

  if (!a1)
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v6 = 0;
    return WebKit::InjectedBundle::isPageBoxVisible(v5, v6, a3);
  }
  v5 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v6 = (WebKit::WebFrame *)objc_msgSend(a2, "_apiObject");
  return WebKit::InjectedBundle::isPageBoxVisible(v5, v6, a3);
}

uint64_t WKBundleIsProcessingUserGesture(uint64_t a1, const Document *a2)
{
  return WebCore::UserGestureIndicator::processingUserGesture(0, a2);
}

WTF::StringImpl *WKBundleSetUserStyleSheetLocationForTesting(void *a1, void *a2)
{
  WebKit::InjectedBundle *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::InjectedBundle::setUserStyleSheetLocation(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WKBundleRemoveAllWebNotificationPermissions(void *a1, void *a2)
{
  WebKit::WebPage *v3;
  WebKit::NotificationPermissionRequestManager *v4;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  if (a2)
    v3 = (WebKit::WebPage *)objc_msgSend(a2, "_apiObject");
  else
    v3 = 0;
  v4 = (WebKit::NotificationPermissionRequestManager *)WebKit::WebPage::notificationPermissionRequestManager(v3);
  return WebKit::NotificationPermissionRequestManager::removeAllPermissionsForTesting(v4);
}

uint64_t WKBundleCopyWebNotificationID(void *a1, uint64_t a2, JSValue a3)
{
  JSC::VM *isa;
  uint64_t result;
  uint64_t v7;
  WebKit *v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    objc_msgSend(a1, "_apiObject");
  if (a3.super.isa)
    isa = a3.super.isa;
  else
    isa = (JSC::VM *)2;
  result = WebCore::JSNotification::toWrapped(*(WebCore::JSNotification **)(a2 + 56), isa, a3);
  if (result)
  {
    v7 = *(_QWORD *)(result + 72);
    v9[0] = *(_QWORD *)(result + 64);
    v9[1] = v7;
    v10 = 1;
    API::Data::create((WTF *)0x10, v9, &v8);
    if (v8)
      return *((_QWORD *)v8 + 1);
    else
      return 0;
  }
  return result;
}

uint64_t WKBundleSetTabKeyCyclesThroughElements(void *a1, void *a2, char a3)
{
  uint64_t result;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  result = objc_msgSend(a2, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 48) + 338) = a3;
  return result;
}

uint64_t WKBundleClearResourceLoadStatistics(WebCore::ResourceLoadObserver *a1)
{
  uint64_t v1;

  v1 = WebCore::ResourceLoadObserver::shared(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
}

WebCore::ResourceLoadObserver *WKBundleResourceLoadStatisticsNotifyObserver(WebCore::ResourceLoadObserver *a1)
{
  uint64_t v1;
  WebCore::ResourceLoadObserver *v2;
  WebCore::ResourceLoadObserver *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;

  v1 = WebCore::ResourceLoadObserver::shared(a1);
  v2 = (WebCore::ResourceLoadObserver *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
  v3 = v2;
  if ((_DWORD)v2)
  {
    v4 = WebCore::ResourceLoadObserver::shared(v2);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34EA120;
    v8 = v5;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 96))(v4, &v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return v3;
}

void WKBundleExtendClassesForParameterCoder(void *a1, void *a2)
{
  API::Array *v3;
  WebKit::InjectedBundle *v4;

  if (a2)
  {
    v3 = (API::Array *)objc_msgSend(a2, "_apiObject");
    if (a1)
      v4 = (WebKit::InjectedBundle *)objc_msgSend(a1, "_apiObject");
    else
      v4 = 0;
    WebKit::InjectedBundle::extendClassesForParameterCoder(v4, v3);
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)141>::type()
{
  return 141;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

void WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::InjectedBundlePageFormClient::didAssociateFormControls(WebKit::WebPage *,WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::WebFrame *)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  WebKit::InjectedBundleNodeHandle *v9;
  WebKit::InjectedBundleNodeHandle *v10;
  WebKit::InjectedBundleNodeHandle *v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v5;
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6)
      {
        v7 = v5;
        for (i = 0; i < v6; ++i)
        {
          v9 = *(WebKit::InjectedBundleNodeHandle **)(*(_QWORD *)a2 + 8 * i);
          if (v9)
          {
            WebKit::InjectedBundleNodeHandle::getOrCreate(v9, &v11);
            v10 = v11;
            v6 = *(unsigned int *)(a2 + 12);
          }
          else
          {
            v10 = 0;
          }
          *(_QWORD *)(v7 + 8 * i) = v10;
          *(_DWORD *)(a1 + 12) = i + 1;
        }
      }
    }
  }
}

char *IPC::Connection::sendSync<Messages::WebFullScreenManagerProxy::SupportsFullScreen>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  char v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  unsigned __int16 v20;
  void *v21;
  uint64_t *v22;
  char *result;
  WTF *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  uint64_t *v29;
  int v30;
  IPC::Encoder *v31;
  uint64_t v32;
  char v33;

  v32 = 0;
  IPC::Connection::createSyncMessageEncoder(3648, a3, &v32, (uint64_t *)&v31);
  v11 = v31;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v31 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  v12 = *a2;
  v13 = *((_QWORD *)v11 + 68);
  v14 = v13 + 1;
  v15 = *((_QWORD *)v11 + 69);
  if (v15 < v13 + 1)
  {
    v26 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v27 = v26;
      v26 *= 2;
    }
    while (v27 < v14);
    result = (char *)mmap(0, v27, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_25;
    v16 = result;
    memcpy(result, *((const void **)v11 + 66), *((_QWORD *)v11 + 68));
    v28 = (char *)*((_QWORD *)v11 + 66);
    if (v28 != (char *)v11 + 16)
      munmap(v28, *((_QWORD *)v11 + 69));
    *((_QWORD *)v11 + 66) = v16;
    *((_QWORD *)v11 + 69) = v27;
    v17 = *((_QWORD *)v11 + 68);
  }
  else
  {
    v16 = (char *)*((_QWORD *)v11 + 66);
    v17 = *((_QWORD *)v11 + 68);
  }
  bzero(&v16[v17], v13 - v17);
  *((_QWORD *)v11 + 68) = v14;
  v18 = (_BYTE *)(*((_QWORD *)v11 + 66) + v13);
  *((_QWORD *)v11 + 67) = v18 + 1;
  *v18 = v12;
  IPC::Connection::sendSyncMessage(a1, v32, (uint64_t *)&v31, a4, (uint64_t)&v29, a6);
  v19 = v30;
  if (v30)
  {
    if (v30 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v29;
LABEL_13:
      *(_DWORD *)(a5 + 16) = v19;
      goto LABEL_14;
    }
LABEL_24:
    result = (char *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    __break(0xC471u);
    return result;
  }
  v20 = IPC::Decoder::decode<std::tuple<BOOL>>(v29);
  if (v20 >= 0x100u)
  {
    if (!v30)
    {
      v22 = v29;
      v29 = 0;
      *(_QWORD *)a5 = v22;
      *(_BYTE *)(a5 + 8) = v20;
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v19 = v30;
  if (v30 != -1)
LABEL_14:
    ((void (*)(char *, uint64_t **))off_1E34EA100[v19])(&v33, &v29);
  result = (char *)v31;
  v31 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v21);
    return (char *)WTF::fastFree(v24, v25);
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEAE9C8]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WKBundleBackForwardListGetTypeID()
{
  return 0;
}

uint64_t WKBundleBackForwardListCopyItemAtIndex()
{
  return 0;
}

uint64_t WKBundleBackForwardListGetBackListCount()
{
  return 0;
}

uint64_t WKBundleBackForwardListGetForwardListCount()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemGetTypeID()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemIsSame()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyOriginalURL()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyURL()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyTitle()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyTarget()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemIsTargetItem()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemIsInBackForwardCache()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemHasCachedPageExpired()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyChildren()
{
  return 0;
}

uint64_t WKBundleDOMWindowExtensionGetTypeID()
{
  return 133;
}

WebKit::InjectedBundleDOMWindowExtension *WKBundleDOMWindowExtensionCreate(void *a1, void *a2)
{
  void *v2;
  WebKit::WebFrame *v3;
  WebKit::InjectedBundleDOMWindowExtension *v4;
  WebKit::InjectedBundleDOMWindowExtension *result;

  v2 = a2;
  if (a1)
  {
    v3 = (WebKit::WebFrame *)objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
LABEL_3:
    v2 = (void *)objc_msgSend(v2, "_apiObject");
LABEL_4:
  v4 = (WebKit::InjectedBundleDOMWindowExtension *)API::Object::newObject(0x28uLL, 133);
  result = WebKit::InjectedBundleDOMWindowExtension::InjectedBundleDOMWindowExtension(v4, v3, (WebKit::InjectedBundleScriptWorld *)v2);
  if (result)
    return (WebKit::InjectedBundleDOMWindowExtension *)*((_QWORD *)result + 1);
  return result;
}

const void *WKBundleDOMWindowExtensionGetFrame(void *a1)
{
  const void *v1;
  uint64_t v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleDOMWindowExtension::frame((WebCore::DOMWindowExtension **)a1, &v3);
  if (!v3)
    return 0;
  v1 = *(const void **)(v3 + 8);
  v3 = 0;
  CFRelease(v1);
  return v1;
}

WebKit::InjectedBundleScriptWorld *WKBundleDOMWindowExtensionGetScriptWorld(void *a1)
{
  WebKit::InjectedBundleScriptWorld *result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebKit::InjectedBundleDOMWindowExtension::world((WebKit::InjectedBundleDOMWindowExtension *)a1);
  if (result)
    return (WebKit::InjectedBundleScriptWorld *)*((_QWORD *)result + 1);
  return result;
}

uint64_t WKBundleFrameGetTypeID()
{
  return 134;
}

BOOL WKBundleFrameIsMainFrame(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2;
}

uint64_t WKBundleFrameIsRemote(void *a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24) + 8) + 144);
}

const void *WKBundleFrameGetParentFrame(void *a1)
{
  const void *v1;
  uint64_t v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::parentFrame((unsigned int *)a1, &v3);
  if (!v3)
    return 0;
  v1 = *(const void **)(v3 + 8);
  CFRelease(v1);
  return v1;
}

uint64_t WKBundleFrameCopyURL(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5[5];
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::url((WebKit::WebFrame *)a1, (uint64_t)v5);
  if (!v5[0])
    return 0;
  API::URL::create((API::URL *)v5, &v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5[0];
  v5[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKBundleFrameCopyProvisionalURL(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::provisionalURL((unsigned int *)a1, &v5);
  if (!v5)
    return 0;
  API::URL::create((API::URL *)&v5, &v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WebKit::toCopiedURLAPI(WebKit *this, const WTF::String *a2)
{
  WebKit *v3;

  if (*(_QWORD *)this && (API::URL::create(this, &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKBundleFrameGetFrameLoadState(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  if (!v1)
    return 2;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 2;
  result = 2;
  if (!*(_BYTE *)(v2 + 144))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 280) + 80);
    if (v4 >= 2)
      return 2;
    else
      return v4;
  }
  return result;
}

uint64_t WKBundleFrameCopyChildFrames(void *a1)
{
  WebKit *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::childFrames((WebKit::WebFrame *)a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKBundleFrameGetJavaScriptContext(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::jsContext((WebKit::WebFrame *)a1);
}

const void *WKBundleFrameForJavaScriptContext(WebKit::WebFrame *a1, const OpaqueJSContext *a2)
{
  const void *v2;
  uint64_t v4;

  WebKit::WebFrame::frameForContext(a1, a2, &v4);
  if (!v4)
    return 0;
  v2 = *(const void **)(v4 + 8);
  CFRelease(v2);
  return v2;
}

uint64_t WKBundleFrameGetJavaScriptContextForWorld(void *a1, void *a2)
{
  WebKit::WebFrame *v3;

  if (a1)
    v3 = (WebKit::WebFrame *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  return WebKit::WebFrame::jsContextForWorld(v3, *(WebCore::DOMWrapperWorld **)(objc_msgSend(a2, "_apiObject") + 24));
}

uint64_t WKBundleFrameGetJavaScriptWrapperForNodeForWorld(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  if (a2)
    a2 = (void *)objc_msgSend(a2, "_apiObject");
  if (a3)
    v6 = objc_msgSend(a3, "_apiObject");
  else
    v6 = 0;
  return WebKit::WebFrame::jsWrapperForWorld(v5, (uint64_t)a2, v6);
}

uint64_t WKBundleFrameGetJavaScriptWrapperForRangeForWorld(void *a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2;
  if (a1)
  {
    v5 = objc_msgSend(a1, "_apiObject");
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a2)
LABEL_3:
    v4 = (void *)objc_msgSend(v4, "_apiObject");
LABEL_4:
  if (a3)
    v6 = objc_msgSend(a3, "_apiObject");
  else
    v6 = 0;
  return WebKit::WebFrame::jsWrapperForWorld(v5, (uint64_t)v4, v6);
}

uint64_t WKBundleFrameCopyName(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::name((WTF::StringImpl *)a1, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKBundleFrameCopyCounterValue(void *a1, WebKit::WebFrame *this)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WebKit *v8;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::counterValue((uint64_t *)this, &v7);
  API::String::create(&v8);
  if (v8)
    v4 = *((_QWORD *)v8 + 1);
  else
    v4 = 0;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WKBundleFrameGetPendingUnloadCount(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::pendingUnloadCount((WebKit::WebFrame *)a1);
}

uint64_t WKBundleFrameGetPage(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
    && (v6 = *(_QWORD *)(v5[2] + 8)) != 0)
  {
    return *(_QWORD *)(v6 - 8);
  }
  else
  {
    return 0;
  }
}

uint64_t WKBundleFrameClearOpener(void *a1)
{
  uint64_t result;
  uint64_t v2;

  result = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    result = *(_QWORD *)(v2 + 8);
    if (result)
    {
      if (!*(_BYTE *)(result + 144))
        return WebCore::Frame::setOpener((WebCore::Frame *)result, 0);
    }
  }
  return result;
}

unsigned int *WKBundleFrameStopLoading(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::stopLoading((unsigned int *)a1);
}

uint64_t WKBundleFrameCopyLayerTreeAsText(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::layerTreeAsText((unsigned int *)a1, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKBundleFrameAllowsFollowingLink(void *a1, void *a2)
{
  WebKit::WebFrame *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[5];

  if (a1)
  {
    v3 = (WebKit::WebFrame *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v3 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
LABEL_7:
  v10 = v4;
  MEMORY[0x19AEABB0C](v11, &v10, 0);
  v6 = WebKit::WebFrame::allowsFollowingLink(v3, (const WTF::URL *)v11);
  v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v6;
}

uint64_t WKBundleFrameHandlesPageScaleGesture()
{
  return 0;
}

double WKBundleFrameGetContentBounds(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::WebFrame::contentBounds((WebKit::WebFrame *)a1);
}

double WKBundleFrameGetVisibleContentBounds(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::WebFrame::visibleContentBounds((WebKit::WebFrame *)a1);
}

double WKBundleFrameGetVisibleContentBoundsExcludingScrollbars(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::WebFrame::visibleContentBoundsExcludingScrollbars((WebKit::WebFrame *)a1);
}

double WKBundleFrameGetScrollOffset(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::WebFrame::scrollOffset((WebKit::WebFrame *)a1);
}

BOOL WKBundleFrameHasHorizontalScrollbar(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::hasHorizontalScrollbar((WebKit::WebFrame *)a1);
}

BOOL WKBundleFrameHasVerticalScrollbar(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::hasVerticalScrollbar((WebKit::WebFrame *)a1);
}

uint64_t WKBundleFrameGetDocumentBackgroundColor(void *a1, double *a2, double *a3, double *a4, double *a5)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::getDocumentBackgroundColor((WebKit::WebFrame *)a1, a2, a3, a4, a5);
}

uint64_t WKBundleFrameCopySuggestedFilenameForResourceWithURL(void *a1, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[5];
  WTF::StringImpl *v13;
  WebKit *v14;

  if (a1)
  {
    v3 = (unsigned int *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v3 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
LABEL_7:
  v11 = v4;
  MEMORY[0x19AEABB0C](v12, &v11, 0);
  WebKit::WebFrame::suggestedFilenameForResourceWithURL(v3, (const WTF::URL *)v12, &v13);
  API::String::create(&v14);
  if (v14)
    v6 = *((_QWORD *)v14 + 1);
  else
    v6 = 0;
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v6;
}

uint64_t WKBundleFrameCopyMIMETypeForResourceWithURL(void *a1, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[5];
  WTF::StringImpl *v13;
  WebKit *v14;

  if (a1)
  {
    v3 = (unsigned int *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v3 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
LABEL_7:
  v11 = v4;
  MEMORY[0x19AEABB0C](v12, &v11, 0);
  WebKit::WebFrame::mimeTypeForResourceWithURL(v3, (const WTF::URL *)v12, &v13);
  API::String::create(&v14);
  if (v14)
    v6 = *((_QWORD *)v14 + 1);
  else
    v6 = 0;
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v6;
}

BOOL WKBundleFrameContainsAnyFormElements(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::containsAnyFormElements((WebKit::WebFrame *)a1);
}

uint64_t WKBundleFrameContainsAnyFormControls(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrame::containsAnyFormControls((WebKit::WebFrame *)a1);
}

WTF::StringImpl *WKBundleFrameSetTextDirection(void *a1, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (unsigned int *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebFrame::setTextDirection(v3, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKBundleFrameSetAccessibleName(void *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = a2;
  if (a1)
  {
    v3 = (unsigned int *)objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    if (!a2)
      goto LABEL_6;
  }
  -[WTF::StringImpl _apiObject](v2, "_apiObject");
  WTF::String::isolatedCopy();
  v2 = v8;
  if (v8 && (*((_BYTE *)v8 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addSlowCase();
    v2 = v9;
    v9 = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_6:
  v9 = v2;
  WebKit::WebFrame::setAccessibleName(v3, (const WTF::AtomString *)&v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return 0;
}

uint64_t WKBundleFrameCopyWebArchive(void *a1)
{
  return WKBundleFrameCopyWebArchiveFilteringSubframes(a1, 0, 0);
}

uint64_t WKBundleFrameCopyWebArchiveFilteringSubframes(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  const UInt8 *BytePtr;
  WTF *Length;
  uint64_t v8;
  CFDataRef v9;
  WebKit *v11[2];
  CFDataRef theData;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v11[0] = 0;
  v11[1] = 0;
  WebKit::WebFrame::webArchiveData((uint64_t)a1, a2, a3, &theData);
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v5);
  if (!theData)
    return 0;
  BytePtr = CFDataGetBytePtr(theData);
  Length = (WTF *)CFDataGetLength(theData);
  API::Data::create(Length, BytePtr, v11);
  if (v11[0])
    v8 = *((_QWORD *)v11[0] + 1);
  else
    v8 = 0;
  v9 = theData;
  theData = 0;
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t WKBundleFrameCallShouldCloseOnWebView(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && !*(_BYTE *)(v2 + 144))
    return WebCore::FrameLoader::shouldClose(*(WebCore::FrameLoader **)(v2 + 280));
  else
    return 1;
}

uint64_t WKBundleFrameCreateHitTestResult(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFrame::hitTest((unsigned int *)a1, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKBundleFrameCopySecurityOrigin(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return 0;
  result = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v2 + 296) + 192));
  if (result)
  {
    API::SecurityOrigin::create(&v4);
    if (!v4)
      return 0;
    return *(_QWORD *)(v4 + 8);
  }
  return result;
}

uint64_t WKBundleFrameFocus(void *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Page *v7;
  _DWORD *v8;

  result = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v3 + 24);
        if (v6)
          v7 = *(WebCore::Page **)(v6 + 8);
        else
          v7 = 0;
        WebCore::Page::checkedFocusController(v7);
        WebCore::FocusController::setFocusedFrame();
        if (v8)
        {
          if (!*v8)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          --*v8;
        }
        return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *_WKBundleFrameGenerateTestReport(void *a1, void *a2, void *a3)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  result = (unsigned int *)objc_msgSend(a1, "_apiObject");
  v6 = *((_QWORD *)result + 3);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (!*(_BYTE *)(v7 + 144))
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = *(_QWORD *)(v7 + 296);
        if (!v10)
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
        *(_DWORD *)(v10 + 24) += 2;
        if (!*(_QWORD *)(v10 + 3184))
          WebCore::Document::ensureReportingScope((WebCore::Document *)v10);
        if (a2)
        {
          objc_msgSend(a2, "_apiObject");
          WTF::String::isolatedCopy();
          if (a3)
          {
LABEL_11:
            objc_msgSend(a3, "_apiObject");
            WTF::String::isolatedCopy();
LABEL_12:
            WebCore::ReportingScope::generateTestReport();
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, v11);
              else
                *(_DWORD *)v12 -= 2;
            }
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v11);
              else
                *(_DWORD *)v13 -= 2;
            }
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
          }
        }
        else
        {
          v13 = 0;
          if (a3)
            goto LABEL_11;
        }
        v12 = 0;
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t WKBundleHitTestResultGetTypeID()
{
  return 135;
}

WebKit::InjectedBundleNodeHandle *WKBundleHitTestResultCopyNodeHandle(void *a1)
{
  WebKit::InjectedBundleNodeHandle *result;
  WebKit::InjectedBundleNodeHandle *v2;

  result = *(WebKit::InjectedBundleNodeHandle **)(objc_msgSend(a1, "_apiObject") + 96);
  if (result)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(result, &v2);
    if (v2)
      return (WebKit::InjectedBundleNodeHandle *)*((_QWORD *)v2 + 1);
    else
      return 0;
  }
  return result;
}

WebKit::InjectedBundleNodeHandle *WKBundleHitTestResultCopyURLElementHandle(void *a1)
{
  WebKit::InjectedBundleNodeHandle *result;
  WebKit::InjectedBundleNodeHandle *v2;

  result = *(WebKit::InjectedBundleNodeHandle **)(objc_msgSend(a1, "_apiObject") + 120);
  if (result)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(result, &v2);
    if (v2)
      return (WebKit::InjectedBundleNodeHandle *)*((_QWORD *)v2 + 1);
    else
      return 0;
  }
  return result;
}

const void *WKBundleHitTestResultGetFrame(void *a1)
{
  const void *v1;
  uint64_t v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::frame((uint64_t)a1, &v3);
  if (!v3)
    return 0;
  v1 = *(const void **)(v3 + 8);
  v3 = 0;
  CFRelease(v1);
  return v1;
}

const void *WKBundleHitTestResultGetTargetFrame(void *a1)
{
  const void *v1;
  uint64_t v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::targetFrame((WebKit::InjectedBundleHitTestResult *)a1, &v3);
  if (!v3)
    return 0;
  v1 = *(const void **)(v3 + 8);
  v3 = 0;
  CFRelease(v1);
  return v1;
}

uint64_t WKBundleHitTestResultCopyAbsoluteImageURL(void *a1)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::absoluteImageURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKBundleHitTestResultCopyAbsolutePDFURL(void *a1)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::absolutePDFURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKBundleHitTestResultCopyAbsoluteLinkURL(void *a1)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::absoluteLinkURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKBundleHitTestResultCopyAbsoluteMediaURL(void *a1)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::absoluteMediaURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKBundleHitTestResultMediaIsInFullscreen(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::HitTestResult::mediaIsInFullscreen((WebCore::HitTestResult *)(a1 + 16));
}

uint64_t WKBundleHitTestResultMediaHasAudio(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::HitTestResult::mediaHasAudio((WebCore::HitTestResult *)(a1 + 16));
}

uint64_t WKBundleHitTestResultIsDownloadableMedia(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::HitTestResult::isDownloadableMedia((WebCore::HitTestResult *)(a1 + 16));
}

uint64_t WKBundleHitTestResultGetMediaType(void *a1)
{
  int v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::InjectedBundleHitTestResult::mediaType((WebKit::InjectedBundleHitTestResult *)a1);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

double WKBundleHitTestResultGetImageRect(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::InjectedBundleHitTestResult::imageRect((WebKit::InjectedBundleHitTestResult *)a1);
}

uint64_t WKBundleHitTestResultCopyImage(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleHitTestResult::image((WebKit::InjectedBundleHitTestResult *)a1, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKBundleHitTestResultGetIsSelected(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)(a1 + 16));
}

uint64_t WKBundleHitTestResultCopyLinkLabel(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::HitTestResult::textContent((WebCore::HitTestResult *)(a1 + 16));
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKBundleHitTestResultCopyLinkTitle(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::HitTestResult::titleDisplayString((WebCore::HitTestResult *)(a1 + 16));
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKBundleHitTestResultCopyLinkSuggestedFilename(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::HitTestResult::linkSuggestedFilename((WebCore::HitTestResult *)(a1 + 16));
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKBundleNavigationActionGetTypeID()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetNavigationType()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetEventModifiers()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetEventMouseButton()
{
  return 0;
}

uint64_t WKBundleNavigationActionCopyHitTestResult()
{
  return 0;
}

uint64_t WKBundleNavigationActionCopyFormElement()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetShouldOpenExternalURLs()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetShouldTryAppLinks()
{
  return 0;
}

uint64_t WKBundleNavigationActionCopyDownloadAttribute()
{
  return 0;
}

uint64_t WKBundleNodeHandleGetTypeID()
{
  return 136;
}

uint64_t WKBundleNodeHandleCreate(uint64_t a1, const OpaqueJSContext *a2, JSValue a3)
{
  WebKit::InjectedBundleNodeHandle *v4;

  WebKit::InjectedBundleNodeHandle::getOrCreate(a2, a3, &v4);
  if (v4)
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKBundleNodeHandleCopyDocument(void *a1)
{
  WebKit::InjectedBundleNodeHandle *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleNodeHandle::document((WebKit::InjectedBundleNodeHandle *)a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

double WKBundleNodeHandleGetRenderRect()
{
  return 0.0;
}

uint64_t WKBundleNodeHandleCopySnapshotWithOptions(void *a1, unsigned int a2)
{
  _BYTE v4[8];
  uint64_t v5;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4[0] = 0;
  v4[4] = 0;
  WebKit::InjectedBundleNodeHandle::renderedImage((WebCore::RenderObject *)a1, a2 & 0xF | (((a2 >> 4) & 7) << 6), (a2 >> 7) & 1, (uint64_t)v4, &v5);
  if (v5)
    return *(_QWORD *)(v5 + 8);
  else
    return 0;
}

uint64_t WKBundleNodeHandleCopyVisibleRange()
{
  return 0;
}

double WKBundleNodeHandleGetElementBounds(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::InjectedBundleNodeHandle::elementBounds((WebKit::InjectedBundleNodeHandle *)a1);
}

WTF::StringImpl *WKBundleNodeHandleSetHTMLInputElementValueForUser(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::InjectedBundleNodeHandle::setHTMLInputElementValueForUser(v3, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementSpellcheckEnabled(void *a1, int a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementSpellcheckEnabled((WebKit::InjectedBundleNodeHandle *)a1, a2);
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFilled()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFilled(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilled((uint64_t)a1);
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFilledAndViewable(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndViewable((uint64_t)a1);
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFilledAndObscured(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndObscured((uint64_t)a1);
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFillButtonEnabled()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFillButtonEnabledWithButtonType(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFillButtonEnabled((uint64_t)a1);
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFillButtonType(void *a1)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  LODWORD(result) = WebKit::InjectedBundleNodeHandle::htmlInputElementAutoFillButtonType((WebKit::InjectedBundleNodeHandle *)a1);
  if (result >= 6)
    return 0;
  else
    return result;
}

uint64_t WKBundleNodeHandleGetHTMLInputElementLastAutoFillButtonType(void *a1)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  LODWORD(result) = WebKit::InjectedBundleNodeHandle::htmlInputElementLastAutoFillButtonType((WebKit::InjectedBundleNodeHandle *)a1);
  if (result >= 6)
    return 0;
  else
    return result;
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFillAvailable()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFillAvailable(void *a1, int a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setAutoFillAvailable((WebKit::InjectedBundleNodeHandle *)a1, a2);
}

double WKBundleNodeHandleGetHTMLInputElementAutoFillButtonBounds()
{
  return 0.0;
}

uint64_t WKBundleNodeHandleGetHTMLInputElementLastChangeWasUserEdit(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::htmlInputElementLastChangeWasUserEdit((WebKit::InjectedBundleNodeHandle *)a1);
}

uint64_t WKBundleNodeHandleGetHTMLTextAreaElementLastChangeWasUserEdit(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::htmlTextAreaElementLastChangeWasUserEdit((WebKit::InjectedBundleNodeHandle *)a1);
}

uint64_t WKBundleNodeHandleCopyHTMLTableCellElementCellAbove()
{
  return 0;
}

uint64_t WKBundleNodeHandleCopyDocumentFrame(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleNodeHandle::documentFrame((uint64_t)a1, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKBundleNodeHandleCopyHTMLFrameElementContentFrame()
{
  return 0;
}

uint64_t WKBundleNodeHandleCopyHTMLIFrameElementContentFrame(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleNodeHandle::htmlIFrameElementContentFrame((uint64_t)a1, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutofilled()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutofilled(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilled((uint64_t)a1);
}

uint64_t WKBundlePageGetTypeID()
{
  return 137;
}

_QWORD *WKBundlePageSetEditorClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD *result;
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_9:
    result = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *result = off_1E34EA238;
    goto LABEL_10;
  }
  v3 = 0;
  if (!a2)
    goto LABEL_9;
LABEL_3:
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x90);
  *(_OWORD *)(result + 1) = 0u;
  v5 = result + 1;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  *(_OWORD *)(result + 9) = 0u;
  *(_OWORD *)(result + 11) = 0u;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  result[17] = 0;
  *result = off_1E34E9D80;
  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    *v5 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[4];
    *(_OWORD *)(result + 7) = a2[3];
    *(_OWORD *)(result + 9) = v9;
    *(_OWORD *)(result + 3) = v7;
    *(_OWORD *)(result + 5) = v8;
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[7];
    result[17] = *((_QWORD *)a2 + 16);
    *(_OWORD *)(result + 13) = v11;
    *(_OWORD *)(result + 15) = v12;
    *(_OWORD *)(result + 11) = v10;
  }
  else if (v6 <= 0)
  {
    if (v6)
    {
      __break(1u);
      return result;
    }
    v13 = *a2;
    v14 = a2[2];
    *(_OWORD *)(result + 3) = a2[1];
    *(_OWORD *)(result + 5) = v14;
    *v5 = v13;
    v15 = a2[3];
    v16 = a2[4];
    v17 = a2[5];
    result[13] = *((_QWORD *)a2 + 12);
    *(_OWORD *)(result + 9) = v16;
    *(_OWORD *)(result + 11) = v17;
    *(_OWORD *)(result + 7) = v15;
  }
LABEL_10:
  v18 = result;
  WebKit::WebPage::setInjectedBundleEditorClient(v3, &v18);
  result = v18;
  if (v18)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 8))(v18);
  return result;
}

_QWORD *WKBundlePageSetFormClient(void *a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x70);
  v6 = (_QWORD *)WebKit::InjectedBundlePageFormClient::InjectedBundlePageFormClient(v4, a2);
  WebKit::WebPage::setInjectedBundleFormClient(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WKBundlePageSetUIClient(void *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0xE8);
  v6 = (_QWORD *)WebKit::InjectedBundlePageUIClient::InjectedBundlePageUIClient(v4, a2);
  WebKit::WebPage::setInjectedBundleUIClient(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_OWORD *WKBundlePageSetFullScreenClient(_OWORD *result, _OWORD *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (result)
    result = (_OWORD *)objc_msgSend(result, "_apiObject");
  v3 = result + 24;
  if (!a2)
  {
    v4 = 0uLL;
    result[26] = 0u;
    result[27] = 0u;
    result[25] = 0u;
LABEL_5:
    *v3 = v4;
    return result;
  }
  if (*(_DWORD *)a2 == 1)
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[3];
    result[26] = a2[2];
    result[27] = v6;
LABEL_12:
    result[25] = v5;
    goto LABEL_5;
  }
  result[26] = 0u;
  result[27] = 0u;
  *v3 = 0u;
  result[25] = 0u;
  if (*(int *)a2 <= 0)
  {
    if (*(_DWORD *)a2)
    {
      __break(1u);
      return result;
    }
    v4 = *a2;
    v5 = a2[1];
    *((_QWORD *)result + 52) = *((_QWORD *)a2 + 4);
    goto LABEL_12;
  }
  return result;
}

IPC::Encoder *WKBundlePageWillEnterFullScreen(void *a1)
{
  void *v1;
  WebKit::WebFullScreenManager *v2;
  uint64_t v3;
  WebKit::WebPage *v4;
  WebKit::WebFullScreenManager *v5;

  v1 = a1;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v2 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)a1);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 9) + 48) + 160);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  *((_QWORD *)v2 + 7) = WebCore::ScrollableArea::visibleContentRect();
  if (v1)
    v4 = (WebKit::WebPage *)objc_msgSend(v1, "_apiObject");
  else
    v4 = 0;
  v5 = WebKit::WebPage::fullScreenManager(v4);
  return WebKit::WebFullScreenManager::willEnterFullScreen(v5);
}

uint64_t WKBundlePageDidEnterFullScreen(void *a1)
{
  WebKit::WebFullScreenManager *v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)a1);
  return WebKit::WebFullScreenManager::didEnterFullScreen(v1);
}

IPC::Encoder *WKBundlePageWillExitFullScreen(void *a1)
{
  WebKit::WebFullScreenManager *v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)a1);
  return WebKit::WebFullScreenManager::willExitFullScreen(v1);
}

uint64_t WKBundlePageDidExitFullScreen(void *a1)
{
  WebKit::WebFullScreenManager *v2;
  WebKit::WebPage *v3;
  WebKit::WebFullScreenManager *v4;
  WebKit::WebFullScreenManager *v6;

  if (a1)
  {
    v2 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)objc_msgSend(a1, "_apiObject"));
    WebKit::WebFullScreenManager::didExitFullScreen(v2);
    v3 = (WebKit::WebPage *)objc_msgSend(a1, "_apiObject");
  }
  else
  {
    v6 = WebKit::WebPage::fullScreenManager(0);
    WebKit::WebFullScreenManager::didExitFullScreen(v6);
    v3 = 0;
  }
  v4 = WebKit::WebPage::fullScreenManager(v3);
  return WebKit::WebFullScreenManager::restoreScrollPosition((uint64_t)v4);
}

uint64_t WKBundlePageGetMainFrame(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 88);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WKBundleFrameCreateFrameHandle(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = API::Object::newObject(0x28uLL, 11);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34AD1B8;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 32) = 0;
  return *(_QWORD *)(v4 + 8);
}

uint64_t WKBundlePageCopyContextMenuItems()
{
  return 0;
}

uint64_t WKBundlePageCopyContextMenuAtPointInWindow()
{
  return 0;
}

uint64_t WKBundlePageInsertNewlineInQuotedContent(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::insertNewlineInQuotedContent((WebCore::Page **)a1);
}

WTF::StringImpl *WKAccessibilityTestingInjectPreference(WTF::StringImpl *result, void *a2, void *a3, void *a4)
{
  WebKit::WebProcess *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit::WebProcess *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (!result)
    return result;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    if (a2)
      goto LABEL_4;
  }
  else
  {
    v12 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v6);
    a2 = v12;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    if (v12)
    {
LABEL_4:
      objc_msgSend(a2, "_apiObject", v12);
      WTF::String::isolatedCopy();
      if (a3)
        goto LABEL_5;
LABEL_23:
      v16 = 0;
      if (a4)
        goto LABEL_6;
      goto LABEL_24;
    }
  }
  v17 = 0;
  if (!a3)
    goto LABEL_23;
LABEL_5:
  objc_msgSend(a3, "_apiObject", v12);
  WTF::String::isolatedCopy();
  if (a4)
  {
LABEL_6:
    objc_msgSend(a4, "_apiObject", v12);
    WTF::String::isolatedCopy();
    v7 = v13;
    goto LABEL_7;
  }
LABEL_24:
  v7 = 0;
LABEL_7:
  v14 = v7;
  v15 = 1;
  (*(void (**)(WebKit::WebProcess *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v6 + 64))(v6, &v17, &v16, &v14);
  if (v15)
  {
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WKAccessibilityEnable()
{
  atomic_store(1u, MEMORY[0x1E0DCF730]);
}

_QWORD *WKAccessibilityRootObject(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  WebCore::AXObjectCache *v4;

  if (result)
  {
    v1 = *(_QWORD *)(objc_msgSend(result, "_apiObject") + 48);
    if (v1 && ((v2 = *(_QWORD *)(v1 + 160)) != 0 ? (v3 = *(_BYTE *)(v2 + 144) == 0) : (v3 = 0), v3))
    {
      result = *(_QWORD **)(v2 + 296);
      if (result)
      {
        atomic_store(1u, MEMORY[0x1E0DCF730]);
        v4 = (WebCore::AXObjectCache *)WebCore::Document::axObjectCache((WebCore::Document *)result);
        result = (_QWORD *)WebCore::AXObjectCache::rootObject(v4);
        if (result)
          return (_QWORD *)result[3];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WKAccessibilityFocusedObject(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::FocusController *v10;

  if (!a1)
    return 0;
  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 48);
  if (!v2)
    return v2;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(v1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v10);
  v4 = v3;
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1975C6860);
    }
    --*(_DWORD *)v10;
  }
  if (!v3)
    return 0;
  v7 = *(_QWORD *)(v3 + 296);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    atomic_store(1u, MEMORY[0x1E0DCF730]);
    if (WebCore::Document::axObjectCache((WebCore::Document *)v7)
      && (v8 = WebCore::AXObjectCache::focusedObjectForPage()) != 0)
    {
      v2 = *(_QWORD *)(v8 + 24);
    }
    else
    {
      v2 = 0;
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v2 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  return v2;
}

_QWORD *WKAccessibilityAnnounce(_QWORD *result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (result)
  {
    result = (_QWORD *)objc_msgSend(result, "_apiObject");
    v3 = result[6];
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 160);
      if (v4 && *(_BYTE *)(v4 + 144) == 0)
      {
        result = *(_QWORD **)(v4 + 296);
        if (result)
        {
          result = (_QWORD *)WebCore::Document::axObjectCache((WebCore::Document *)result);
          if (result)
          {
            v6 = result;
            if (a2)
            {
              objc_msgSend(a2, "_apiObject");
              WTF::String::isolatedCopy();
            }
            else
            {
              v8 = 0;
            }
            MEMORY[0x19AEAD9FC](v6, &v8);
            result = v8;
            v8 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WKAccessibilitySetForceDeferredSpellChecking(uint64_t result)
{
  atomic_store(result, MEMORY[0x1E0DCF738]);
  return result;
}

uint64_t WKBundlePageCopyRenderTreeExternalRepresentation(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebPage::renderTreeExternalRepresentation((WebKit::WebPage *)a1);
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKBundlePageCopyRenderTreeExternalRepresentationForPrinting(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebPage::renderTreeExternalRepresentationForPrinting((uint64_t *)&v5, (WebKit::WebPage *)a1);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKBundlePageClearMainFrameName(void *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 160);
    if (v3)
      return WebCore::FrameTree::clearName((WebCore::FrameTree *)(v3 + 48));
  }
  return result;
}

IPC::Encoder *WKBundlePageClose(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::sendClose((WebKit::WebPage *)a1);
}

double WKBundlePageGetTextZoomFactor(void *a1, WebCore::LocalFrame *a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::textZoomFactor((WebKit::WebPage *)a1, a2);
}

double WKBundlePageGetPageZoomFactor(void *a1, WebCore::LocalFrame *a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::pageZoomFactor((WebKit::WebPage *)a1, a2);
}

unsigned __int8 *WKBundlePageSetScaleAtOrigin(void *a1, double a2, double a3, double a4)
{
  unint64_t v8;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v8 = (int)a3 | ((unint64_t)(int)a4 << 32);
  return WebKit::WebPage::scalePage((WebKit::WebPage *)a1, a2, (const WebCore::IntPoint *)&v8);
}

uint64_t WKBundlePageDumpHistoryForTesting(void *a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  if (a1)
  {
    v3 = (WTF::StringImpl *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v9 = 0;
LABEL_4:
  WebKit::WebPage::dumpHistoryForTesting(v3, (const WTF::String *)&v9, &v10);
  API::String::create(&v11);
  if (v11)
    v5 = *((_QWORD *)v11 + 1);
  else
    v5 = 0;
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5;
}

IPC::Encoder *WKBundleClearHistoryForTesting(void *a1)
{
  IPC::Encoder *result;
  uint64_t v2;

  result = (IPC::Encoder *)objc_msgSend(a1, "_apiObject");
  v2 = *((_QWORD *)result + 6);
  if (v2)
    return WebKit::WebBackForwardListProxy::clear(*(WebKit::WebBackForwardListProxy **)(*(_QWORD *)(v2 + 136) + 16));
  return result;
}

uint64_t WKBundlePageGetBackForwardList()
{
  return 0;
}

uint64_t WKBundlePageInstallPageOverlay(void *a1, void *a2)
{
  objc_msgSend(a1, "_apiObject");
  objc_msgSend(a2, "_apiObject");
  return WebCore::PageOverlayController::installPageOverlay();
}

uint64_t WKBundlePageUninstallPageOverlay(void *a1, void *a2)
{
  objc_msgSend(a1, "_apiObject");
  objc_msgSend(a2, "_apiObject");
  return WebCore::PageOverlayController::uninstallPageOverlay();
}

uint64_t WKBundlePageInstallPageOverlayWithAnimation(void *a1, void *a2)
{
  objc_msgSend(a1, "_apiObject");
  objc_msgSend(a2, "_apiObject");
  return WebCore::PageOverlayController::installPageOverlay();
}

uint64_t WKBundlePageUninstallPageOverlayWithAnimation(void *a1, void *a2)
{
  objc_msgSend(a1, "_apiObject");
  objc_msgSend(a2, "_apiObject");
  return WebCore::PageOverlayController::uninstallPageOverlay();
}

uint64_t WKBundlePageHasLocalDataForURL(void *a1, void *a2)
{
  WebCore::Page *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t hasLocalDataForURL;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[5];

  v3 = *(WebCore::Page **)(objc_msgSend(a1, "_apiObject") + 48);
  if (a2)
  {
    v4 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v4)
      *(_DWORD *)v4 += 2;
  }
  else
  {
    v4 = 0;
  }
  v10 = v4;
  MEMORY[0x19AEABB0C](v11, &v10, 0);
  hasLocalDataForURL = WebCore::Page::hasLocalDataForURL(v3, (const WTF::URL *)v11);
  v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  return hasLocalDataForURL;
}

void *WKBundlePageCanHandleRequest(void *result)
{
  uint64_t v1;
  const WebCore::ResourceRequest *v2;

  if (result)
  {
    v1 = objc_msgSend(result, "_apiObject");
    return (void *)WebKit::WebPage::canHandleRequest((WebKit::WebPage *)(v1 + 16), v2);
  }
  return result;
}

BOOL WKBundlePageFindString(void *a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  char v6;

  if (a1)
  {
    objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else if (a2)
  {
    goto LABEL_3;
  }
  v5 = 0;
LABEL_4:
  WebCore::Page::findString();
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v6 != 0;
}

WTF *WKBundlePageReplaceStringMatches(WTF *result, void *a2, void *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;

  v4 = (uint64_t *)result;
  if (a2)
  {
    result = (WTF *)objc_msgSend(a2, "_apiObject");
    v5 = (uint64_t)result;
  }
  else
  {
    v5 = 0;
  }
  v18 = 0;
  v19 = 0;
  v6 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v6)
  {
    if (v6 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v19) = *(_DWORD *)(v5 + 28);
    v18 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
    v7 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = API::Array::at<API::UInt64>(v5, i);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 16);
          v11 = HIDWORD(v19);
          if (HIDWORD(v19) == (_DWORD)v19)
          {
            v12 = HIDWORD(v19) + ((unint64_t)HIDWORD(v19) >> 2);
            if (v12 >= 0x10)
              v13 = v12 + 1;
            else
              v13 = 16;
            if (v13 <= (unint64_t)HIDWORD(v19) + 1)
              v14 = HIDWORD(v19) + 1;
            else
              v14 = v13;
            WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v18, v14);
            v11 = HIDWORD(v19);
          }
          *((_DWORD *)v18 + v11) = v10;
          ++HIDWORD(v19);
        }
      }
    }
  }
  if (v4)
    v4 = (uint64_t *)objc_msgSend(v4, "_apiObject");
  if (a3)
  {
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v17 = 0;
  }
  WebKit::FindController::replaceMatches(v4[56], (unsigned int **)&v18, (WTF::String *)&v17);
  v16 = v17;
  v17 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

uint64_t WKBundlePageCreateSnapshotWithOptions(void *a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  int32x2_t v12[2];
  uint64_t v13;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v12[0] = (int32x2_t)((int)a3 | ((unint64_t)(int)a4 << 32));
  v12[1] = (int32x2_t)((int)a5 | ((unint64_t)(int)a6 << 32));
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, v12, 1.0, (FloatSize *)(a2 & 0xF | (((a2 >> 4) & 7) << 6) & 0xFFFFFDFF | (((a2 >> 8) & 1) << 9)), &v13);
  if (v13)
    return *(_QWORD *)(v13 + 8);
  else
    return 0;
}

uint64_t WKBundlePageCreateSnapshotInViewCoordinates(void *a1, char a2, double a3, double a4, double a5, double a6)
{
  FloatSize *v10;
  int32x2_t v12[2];
  uint64_t v13;

  v10 = (FloatSize *)(a2 & 1 | 4u);
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v12[0] = (int32x2_t)((int)a3 | ((unint64_t)(int)a4 << 32));
  v12[1] = (int32x2_t)((int)a5 | ((unint64_t)(int)a6 << 32));
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, v12, 1.0, v10, &v13);
  if (v13)
    return *(_QWORD *)(v13 + 8);
  else
    return 0;
}

uint64_t WKBundlePageCreateSnapshotInDocumentCoordinates(void *a1, char a2, double a3, double a4, double a5, double a6)
{
  int32x2_t v12[2];
  uint64_t v13;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v12[0] = (int32x2_t)((int)a3 | ((unint64_t)(int)a4 << 32));
  v12[1] = (int32x2_t)((int)a5 | ((unint64_t)(int)a6 << 32));
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, v12, 1.0, (FloatSize *)(a2 & 1), &v13);
  if (v13)
    return *(_QWORD *)(v13 + 8);
  else
    return 0;
}

uint64_t WKBundlePageCreateScaledSnapshotInDocumentCoordinates(void *a1, char a2, double a3, double a4, double a5, double a6, double a7)
{
  int32x2_t v14[2];
  uint64_t v15;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v14[0] = (int32x2_t)((int)a3 | ((unint64_t)(int)a4 << 32));
  v14[1] = (int32x2_t)((int)a5 | ((unint64_t)(int)a6 << 32));
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, v14, a7, (FloatSize *)(a2 & 1), &v15);
  if (v15)
    return *(_QWORD *)(v15 + 8);
  else
    return 0;
}

double WKBundlePageGetBackingScaleFactor(void *a1)
{
  return *(float *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 364);
}

uint64_t WKBundlePageListenForLayoutMilestones(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::listenForLayoutMilestones((uint64_t)a1);
}

uint64_t WKBundlePageShowInspectorForTest(void *a1)
{
  uint64_t v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::WebPage::inspector((WebKit::WebInspector *)a1, 1);
  return WebKit::WebInspector::show(v1);
}

unsigned int *WKBundlePageCloseInspectorForTest(void *a1)
{
  unsigned int *v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = (unsigned int *)WebKit::WebPage::inspector((WebKit::WebInspector *)a1, 1);
  return WebKit::WebInspector::close(v1);
}

WTF::StringImpl *WKBundlePageEvaluateScriptInInspectorForTest(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v3 = WebKit::WebPage::inspector((WebKit::WebInspector *)a1, 1);
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v6 = 0;
  }
  WebKit::WebInspector::evaluateScriptForTest(v3, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKBundlePageForceRepaint(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 72))(*(_QWORD *)(v1 + 72));
}

uint64_t WKBundlePageFlushPendingEditorStateUpdate(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::flushPendingEditorStateUpdate((uint64_t)a1);
}

WebCore::Page *WKBundlePageGetRenderTreeSize(void *a1)
{
  WebCore::Page *result;

  result = *(WebCore::Page **)(objc_msgSend(a1, "_apiObject") + 48);
  if (result)
    return (WebCore::Page *)WebCore::Page::renderTreeSize(result);
  return result;
}

WebCore::LocalFrameView *WKBundlePageSetTracksRepaints(void *a1)
{
  WebCore::LocalFrameView *result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (result)
    return (WebCore::LocalFrameView *)WebCore::LocalFrameView::setTracksRepaints(result);
  return result;
}

uint64_t WKBundlePageIsTrackingRepaints(void *a1)
{
  uint64_t v1;
  BOOL v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (v1)
    v2 = *(_BYTE *)(v1 + 1371) != 0;
  return (v1 != 0) & v2;
}

WebCore::LocalFrameView *WKBundlePageResetTrackedRepaints(void *a1)
{
  WebCore::LocalFrameView *result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (result)
    return (WebCore::LocalFrameView *)WebCore::LocalFrameView::resetTrackedRepaints(result);
  return result;
}

uint64_t WKBundlePageCopyTrackedRepaintRects(void *a1)
{
  WebKit *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebPage::trackedRepaintRects((WebKit::WebPage *)a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKBundlePageSetComposition(void *a1, void *a2, int a3, int a4, char a5, void *a6, void *a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  void *v33;
  WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  WTF *v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  void *v47;
  uint64_t *v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  const WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  const WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  const WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int i;
  int v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  uint64_t *v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  const WTF::StringImpl *v93;
  WTF *v94;
  WTF::StringImpl *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  _QWORD *v99;
  int j;
  unsigned int v101;
  uint64_t v102;
  WTF *v103;
  void *v104;
  WTF *v105;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  WTF::StringImpl *v110;
  uint64_t *v111;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125[2];
  char v126;
  _BYTE v127[16];
  WTF::StringImpl *v128;
  char v129;
  WTF::StringImpl *v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134[2];

  v132 = 0;
  v133 = 0;
  if (a6)
  {
    result = objc_msgSend(a6, "_apiObject");
    v8 = result;
    v9 = *(unsigned int *)(result + 28);
    if ((_DWORD)v9)
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v133) = 40 * (int)v9 / 0x28u;
      v132 = WTF::fastMalloc((WTF *)(40 * v9));
      v10 = *(unsigned int *)(v8 + 28);
      v11 = *(uint64_t **)(v8 + 16);
      v12 = &v11[v10];
      if ((_DWORD)v10)
      {
        v13 = 8 * v10;
        while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 16))(*v11) != 9)
        {
          ++v11;
          v13 -= 8;
          if (!v13)
          {
            v11 = v12;
            break;
          }
        }
        v14 = v11;
        v11 = *(uint64_t **)(v8 + 16);
        v15 = *(unsigned int *)(v8 + 28);
      }
      else
      {
        v15 = 0;
        v14 = *(uint64_t **)(v8 + 16);
      }
    }
    else
    {
      v15 = 0;
      v12 = *(uint64_t **)(result + 16);
      v11 = v12;
      v14 = v12;
    }
    v16 = &v11[v15];
    if (v14 != v16)
    {
      while (1)
      {
        v17 = *v14;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v130 = v125[0];
        v18 = (uint64_t *)(v17 + 16);
        v21 = *((_QWORD *)WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v17 + 16), &v130, v19)+ 2);
        v22 = v130;
        v130 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v20);
          else
            *(_DWORD *)v22 -= 2;
        }
        LOBYTE(v130) = 0;
        v131 = 0;
        LOBYTE(v128) = 0;
        v129 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v134[0] = v125[0];
        v25 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v18, v134, v23);
        v26 = v134[0];
        v134[0] = 0;
        if (!v26)
          goto LABEL_20;
        if (*(_DWORD *)v26 != 2)
          break;
        WTF::StringImpl::destroy(v26, v24);
        if (!v25)
          goto LABEL_28;
LABEL_23:
        WTF::String::isolatedCopy();
        WebCore::CSSParser::parseColorWithoutContext((WebCore::CSSParser *)v134, 0);
        std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>((uint64_t)&v130);
        if (((unint64_t)v125[0] & 0x8000000000000) != 0)
        {
          v51 = (unsigned int *)((unint64_t)v125[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            atomic_store(1u, v51);
            WTF::fastFree((WTF *)v51, v27);
          }
        }
        v28 = v134[0];
        v134[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v27);
          else
            *(_DWORD *)v28 -= 2;
        }
LABEL_28:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v134[0] = v125[0];
        v31 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v18, v134, v29);
        v32 = v134[0];
        v134[0] = 0;
        if (!v32)
          goto LABEL_31;
        if (*(_DWORD *)v32 != 2)
        {
          *(_DWORD *)v32 -= 2;
LABEL_31:
          if (!v31)
            goto LABEL_39;
          goto LABEL_34;
        }
        WTF::StringImpl::destroy(v32, v30);
        if (!v31)
          goto LABEL_39;
LABEL_34:
        WTF::String::isolatedCopy();
        WebCore::CSSParser::parseColorWithoutContext((WebCore::CSSParser *)v134, 0);
        std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>((uint64_t)&v128);
        if (((unint64_t)v125[0] & 0x8000000000000) != 0)
        {
          v54 = (unsigned int *)((unint64_t)v125[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, v54);
            WTF::fastFree((WTF *)v54, v33);
          }
        }
        v34 = v134[0];
        v134[0] = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v33);
          else
            *(_DWORD *)v34 -= 2;
        }
LABEL_39:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v124 = v134[0];
        v36 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v18, &v124, v35);
        WebCore::CompositionHighlight::CompositionHighlight(v125, v21, *((_DWORD *)v36 + 4) + v21, (uint64_t)&v130, (uint64_t)&v128);
        v38 = HIDWORD(v133);
        if (HIDWORD(v133) == (_DWORD)v133)
        {
          WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v132, (unint64_t)v125);
        }
        else
        {
          v39 = v132;
          v40 = v132 + 40 * HIDWORD(v133);
          *(WTF::StringImpl **)v40 = v125[0];
          *(_BYTE *)(v40 + 8) = 0;
          *(_BYTE *)(v40 + 16) = 0;
          v41 = (_BYTE *)(v40 + 16);
          if (v126)
          {
            WebCore::Color::Color();
            *v41 = 1;
          }
          v42 = v39 + 40 * v38;
          *(_BYTE *)(v42 + 24) = 0;
          v42 += 24;
          *(_BYTE *)(v42 + 8) = 0;
          v43 = (_BYTE *)(v42 + 8);
          if (v127[8])
          {
            WebCore::Color::Color();
            *v43 = 1;
          }
          ++HIDWORD(v133);
        }
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v127, v37);
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v125[1], v44);
        v46 = v124;
        v124 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v45);
          else
            *(_DWORD *)v46 -= 2;
        }
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v128, v45);
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v130, v47);
        v48 = v14 + 1;
        while (v48 - 1 != v12 && v48 != v12)
        {
          v50 = *v48++;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50) == 9)
          {
            v14 = v48 - 1;
            goto LABEL_58;
          }
        }
        v14 = v12;
LABEL_58:
        if (v14 == v16)
          goto LABEL_68;
      }
      *(_DWORD *)v26 -= 2;
LABEL_20:
      if (!v25)
        goto LABEL_28;
      goto LABEL_23;
    }
  }
LABEL_68:
  v130 = 0;
  if (!a7)
    goto LABEL_150;
  v57 = objc_msgSend(a7, "_apiObject");
  v58 = *(uint64_t **)(v57 + 16);
  v59 = *(unsigned int *)(v57 + 28);
  v60 = &v58[v59];
  if ((_DWORD)v59)
  {
    v61 = v57;
    v62 = 8 * v59;
    while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v58 + 16))(*v58) != 9)
    {
      ++v58;
      v62 -= 8;
      if (!v62)
      {
        v58 = v60;
        break;
      }
    }
    v63 = v58;
    v58 = *(uint64_t **)(v61 + 16);
    v64 = *(unsigned int *)(v61 + 28);
  }
  else
  {
    v64 = 0;
    v63 = *(uint64_t **)(v57 + 16);
  }
  v123 = &v58[v64];
  if (v63 == v123)
    goto LABEL_150;
  do
  {
    v65 = *v63;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v128 = v125[0];
    v66 = (uint64_t *)(v65 + 16);
    v69 = (WTF::StringImpl *)*((_QWORD *)WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v66, &v128, v67)+ 2);
    v70 = v128;
    v128 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v68);
      else
        *(_DWORD *)v70 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v128 = v125[0];
    v73 = (WTF::StringImpl *)*((_QWORD *)WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v66, &v128, v71)+ 2);
    v74 = v128;
    v128 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v72);
      else
        *(_DWORD *)v74 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v134[0] = v125[0];
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v66, v134, v75);
    WTF::String::isolatedCopy();
    v78 = v134[0];
    v134[0] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v76);
      else
        *(_DWORD *)v78 -= 2;
    }
    v79 = v130;
    if (v130)
    {
      v80 = *((_DWORD *)v130 - 2);
      v81 = *((_DWORD *)v128 + 4);
      if (v81 >= 0x100)
        v82 = v81 >> 8;
      else
        v82 = WTF::StringImpl::hashSlowCase(v128);
      for (i = 0; ; v82 = i + v84)
      {
        v84 = v82 & v80;
        v85 = (WTF::StringImpl *)((char *)v79 + 24 * (v82 & v80));
        v86 = *(WTF **)v85;
        if (*(_QWORD *)v85 != -1)
        {
          if (!v86)
          {
            v87 = v130;
            if (!v130)
              goto LABEL_105;
            v85 = (WTF::StringImpl *)((char *)v130 + 24 * *((unsigned int *)v130 - 1));
            goto LABEL_101;
          }
          if ((WTF::equal(v86, v128, v77) & 1) != 0)
            break;
        }
        ++i;
      }
      v87 = v130;
      if (!v130)
        goto LABEL_102;
LABEL_101:
      v87 = (WTF::StringImpl *)((char *)v87 + 24 * *((unsigned int *)v87 - 1));
LABEL_102:
      if (v87 != v85)
      {
        v88 = (uint64_t *)((char *)v85 + 8);
        v125[0] = v69;
        v125[1] = v73;
        v89 = *((unsigned int *)v85 + 5);
        if ((_DWORD)v89 == *((_DWORD *)v85 + 4))
        {
          v90 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)v125);
          v89 = *((unsigned int *)v85 + 5);
          v91 = *((_QWORD *)v85 + 1);
          v92 = *v90;
        }
        else
        {
          v91 = *v88;
          v92 = *(_OWORD *)v125;
        }
        *(_OWORD *)(v91 + 16 * v89) = v92;
        ++*((_DWORD *)v85 + 5);
        goto LABEL_133;
      }
    }
LABEL_105:
    v94 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = v69;
    *((_QWORD *)v94 + 1) = v73;
    v95 = v130;
    if (v130
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v130, 0), (v95 = v130) != 0))
    {
      v96 = *((_DWORD *)v95 - 2);
    }
    else
    {
      v96 = 0;
    }
    v97 = *((_DWORD *)v128 + 4);
    if (v97 >= 0x100)
      v98 = v97 >> 8;
    else
      v98 = WTF::StringImpl::hashSlowCase(v128);
    v99 = 0;
    for (j = 1; ; ++j)
    {
      v101 = v98 & v96;
      v102 = (uint64_t)v95 + 24 * (v98 & v96);
      v103 = *(WTF **)v102;
      if (*(_QWORD *)v102 == -1)
      {
        v99 = (_QWORD *)((char *)v95 + 24 * v101);
        goto LABEL_117;
      }
      if (!v103)
        break;
      if (WTF::equal(v103, v128, v93))
      {
        WTF::fastFree(v94, v104);
        goto LABEL_133;
      }
LABEL_117:
      v98 = j + v101;
    }
    if (v99)
    {
      v99[1] = 0;
      v99[2] = 0;
      *v99 = 0;
      --*((_DWORD *)v130 - 4);
      v102 = (uint64_t)v99;
    }
    WTF::String::operator=((WTF::StringImpl **)v102, (WTF::StringImpl *)&v128);
    v105 = *(WTF **)(v102 + 8);
    if (v105)
    {
      *(_QWORD *)(v102 + 8) = 0;
      *(_DWORD *)(v102 + 16) = 0;
      WTF::fastFree(v105, v76);
    }
    *(_QWORD *)(v102 + 8) = v94;
    *(_QWORD *)(v102 + 16) = 0x100000001;
    if (v130)
      v106 = *((_DWORD *)v130 - 3) + 1;
    else
      v106 = 1;
    *((_DWORD *)v130 - 3) = v106;
    if (v130)
      v107 = *((_DWORD *)v130 - 3);
    else
      v107 = 0;
    v108 = (*((_DWORD *)v130 - 4) + v107);
    v109 = *((unsigned int *)v130 - 1);
    if (v109 > 0x400)
    {
      if (v109 <= 2 * v108)
LABEL_132:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v130, v102);
    }
    else if (3 * v109 <= 4 * v108)
    {
      goto LABEL_132;
    }
LABEL_133:
    v110 = v128;
    v128 = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v76);
      else
        *(_DWORD *)v110 -= 2;
    }
    v111 = v63 + 1;
    while (v111 - 1 != v60 && v111 != v60)
    {
      v113 = *v111++;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113) == 9)
      {
        v63 = v111 - 1;
        goto LABEL_145;
      }
    }
    v63 = v60;
LABEL_145:
    ;
  }
  while (v63 != v123);
LABEL_150:
  if (a1)
    v114 = objc_msgSend(a1, "_apiObject");
  else
    v114 = 0;
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v125[0] = 0;
  }
  WebKit::WebPage::setCompositionForTesting(v114, (uint64_t *)v125, a3, a4, a5);
  v116 = v125[0];
  v125[0] = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, v115);
    else
      *(_DWORD *)v116 -= 2;
  }
  if (v130)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v130, v115);
  return WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v132, v115);
}

uint64_t WKBundlePageHasComposition(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::hasCompositionForTesting((WebCore::Page **)a1);
}

WTF::StringImpl *WKBundlePageConfirmComposition(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v3 = 0;
  WebKit::WebPage::confirmCompositionForTesting((WebCore::Page **)a1, (const WTF::String *)&v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKBundlePageConfirmCompositionWithText(void *a1, void *a2)
{
  WebCore::Page **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebCore::Page **)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPage::confirmCompositionForTesting(v3, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void *WKBundlePageSetUseDarkAppearance(void *result)
{
  if (result)
  {
    result = *(void **)(objc_msgSend(result, "_apiObject") + 48);
    if (result)
      return (void *)WebCore::Page::effectiveAppearanceDidChange((WebCore::Page *)result);
  }
  return result;
}

uint64_t WKBundlePageIsUsingDarkAppearance(void *a1)
{
  WebCore::Page *v1;

  if (a1 && (v1 = *(WebCore::Page **)(objc_msgSend(a1, "_apiObject") + 48)) != 0)
    return WebCore::Page::useDarkAppearance(v1);
  else
    return 0;
}

uint64_t WKBundlePageCanShowMIMEType(void *a1, void *a2)
{
  WebKit::WebPage *v3;
  WTF::StringImpl *v4;
  uint64_t canShowMIMEType;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  if (a1)
  {
    v3 = (WebKit::WebPage *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  canShowMIMEType = WebKit::WebPage::canShowMIMEType(v3, (const WTF::String *)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return canShowMIMEType;
}

uint64_t WKBundlePageExtendIncrementalRenderingSuppression(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::extendIncrementalRenderingSuppression((WebKit::WebPage *)a1);
}

_DWORD *WKBundlePageStopExtendingIncrementalRenderingSuppression(void *a1, int a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::stopExtendingIncrementalRenderingSuppression((WebKit::WebPage *)a1, a2);
}

BOOL WKBundlePageIsUsingEphemeralSession(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::usesEphemeralSession((WebKit::WebPage *)a1);
}

uint64_t WKBundlePageIsControlledByAutomation(void *a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 1091);
}

uint64_t WKBundlePageSetUseTestingViewportConfiguration(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 1192) = a2;
  return result;
}

void *WKBundlePageStartMonitoringScrollOperations(void *result)
{
  if (result)
  {
    result = *(void **)(objc_msgSend(result, "_apiObject") + 48);
    if (result)
      return (void *)WebCore::Page::startMonitoringWheelEvents((WebCore::Page *)result);
  }
  return result;
}

uint64_t WKBundlePageRegisterScrollOperationCompletionCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  WebCore::Page *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 **v14;

  result = 0;
  if (a1 && a2)
  {
    v9 = objc_msgSend(a1, "_apiObject");
    v10 = *(WebCore::Page **)(v9 + 48);
    if (v10)
    {
      result = WebCore::Page::isMonitoringWheelEvents(*(WebCore::Page **)(v9 + 48));
      if ((_DWORD)result)
      {
        WebCore::Page::wheelEventTestMonitor(v10);
        if (v14)
        {
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v11 = off_1E34EA170;
          v11[1] = a2;
          v11[2] = a5;
          v13 = v11;
          WebCore::WheelEventTestMonitor::setTestCallbackAndStartMonitoring();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v14, v12);
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *WKBundlePageCallAfterTasksAndTimers(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  if (result)
  {
    if (a2)
    {
      result = (_QWORD *)objc_msgSend(result, "_apiObject");
      v5 = result[6];
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 160);
        if (v6)
          v7 = *(_BYTE *)(v6 + 144) == 0;
        else
          v7 = 0;
        if (v7 && *(_QWORD *)(v6 + 296))
        {
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v8 = off_1E34EA198;
          v8[1] = a2;
          v8[2] = a3;
          v9 = v8;
          WebCore::Document::postTask();
          result = v9;
          if (v9)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
        }
      }
    }
  }
  return result;
}

uint64_t WKBundlePageFlushDeferredDidReceiveMouseEventForTesting(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)a1);
}

WTF::StringImpl *WKBundlePagePostMessage(void *a1, void *a2, void *a3)
{
  WebKit::WebPage *v5;
  API::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  if (a1)
  {
    v5 = (WebKit::WebPage *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_11:
    v9 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_12;
  }
  v5 = 0;
  if (!a2)
    goto LABEL_11;
LABEL_3:
  objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    v6 = (API::Object *)objc_msgSend(a3, "_apiObject");
    goto LABEL_5;
  }
LABEL_12:
  v6 = 0;
LABEL_5:
  WebKit::WebPage::postMessage(v5, (const WTF::String *)&v9, v6);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKBundlePagePostMessageWithAsyncReply(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;

  if (a1)
  {
    v9 = objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
  }
  else
  {
    v9 = 0;
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v14 = 0;
  if (a3)
LABEL_4:
    a3 = (void *)objc_msgSend(a3, "_apiObject");
LABEL_5:
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34EA210;
  v10[1] = a4;
  v10[2] = a5;
  v13 = v10;
  WebKit::WebPage::postMessageWithAsyncReply(v9, (uint64_t *)&v14, (uint64_t)a3, (uint64_t *)&v13);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKBundlePagePostMessageIgnoringFullySynchronousMode(void *a1, void *a2, void *a3)
{
  WebKit::WebPage *v5;
  API::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  if (a1)
  {
    v5 = (WebKit::WebPage *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_11:
    v9 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_12;
  }
  v5 = 0;
  if (!a2)
    goto LABEL_11;
LABEL_3:
  objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    v6 = (API::Object *)objc_msgSend(a3, "_apiObject");
    goto LABEL_5;
  }
LABEL_12:
  v6 = 0;
LABEL_5:
  WebKit::WebPage::postMessageIgnoringFullySynchronousMode(v5, (const WTF::String *)&v9, v6);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WKBundlePagePostSynchronousMessageForTesting(void *a1, void *a2, void *a3, WebKit **a4)
{
  uint64_t v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  WTF::StringImpl *v12;
  WebKit **v13;

  v13 = 0;
  if (a1)
  {
    v7 = objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_17:
    v12 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_18;
  }
  v7 = 0;
  if (!a2)
    goto LABEL_17;
LABEL_3:
  objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    v8 = (const void *)objc_msgSend(a3, "_apiObject", v12);
    goto LABEL_5;
  }
LABEL_18:
  v8 = 0;
LABEL_5:
  WebKit::WebPage::postSynchronousMessageForTesting(v7, (uint64_t *)&v12, v8, (WebKit **)&v13);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WebKit *)v13;
  if (a4)
  {
    if (v13)
      v11 = v13[1];
    *a4 = v11;
  }
  else if (v13)
  {
    CFRelease(v13[1]);
  }
}

uint64_t WKBundlePageIsSuspended(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 2108);
}

WTF::StringImpl *WKBundlePageAddUserScript(void *a1, void *a2, int a3, int a4)
{
  WTF *v7;
  WebKit::InjectedBundleScriptWorld *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  if (a1)
  {
    a1 = (void *)objc_msgSend(a1, "_apiObject");
    v7 = (WTF *)a1;
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      a1 = (void *)WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  v11 = 0;
LABEL_4:
  v8 = WebKit::InjectedBundleScriptWorld::normalWorld((WebKit::InjectedBundleScriptWorld *)a1);
  WebKit::WebPage::addUserScript(v7, (uint64_t)&v11, (uint64_t)v8, a4 == 1, a3 == 1);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKBundlePageAddUserScriptInWorld(void *a1, void *a2, void *a3, int a4, int a5)
{
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  if (a1)
  {
    v9 = (WTF *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  v12 = 0;
LABEL_4:
  WebKit::WebPage::addUserScript(v9, (uint64_t)&v12, objc_msgSend(a3, "_apiObject"), a5 == 1, a4 == 1);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKBundlePageAddUserStyleSheet(void *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WTF *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPage::addUserStyleSheet(v3);
  result = (uint64_t)v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WKBundlePageRemoveAllUserContent(void *a1, void *a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPage::removeAllUserContent((WebKit::WebPage *)a1, a2);
}

uint64_t WKBundlePageCopyGroupIdentifier(void *a1)
{
  WebKit *v2;

  objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKBundlePageSetCaptionDisplayMode(void *a1, void *a2)
{
  WebCore::PageGroup *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  WTF::StringImpl *v9;

  v3 = (WebCore::PageGroup *)WebCore::Page::group(*(WebCore::Page **)(objc_msgSend(a1, "_apiObject") + 48));
  v5 = WebCore::PageGroup::ensureCaptionPreferences(v3);
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
    if (v9)
    {
      if ((WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "forcedonly", 0xAuLL) & 1) != 0)
      {
        v6 = 0;
        v7 = 1;
        goto LABEL_13;
      }
      if ((WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "manual", 6uLL) & 1) != 0)
      {
        v6 = 0;
        v7 = 3;
        goto LABEL_13;
      }
      if ((WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "automatic", 9uLL) & 1) != 0)
      {
        v7 = 0;
        v6 = 0;
        goto LABEL_13;
      }
      if ((WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "alwayson", 8uLL) & 1) != 0)
      {
        v6 = 0;
        v7 = 2;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v7 = 0;
  v6 = 1;
LABEL_13:
  result = (uint64_t)v9;
  if (!v9)
    goto LABEL_16;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_16:
    if ((v6 & 1) != 0)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v7);
  }
  result = WTF::StringImpl::destroy(v9, v4);
  if ((v6 & 1) != 0)
    return result;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v7);
}

uint64_t WKBundlePageCreateCaptionUserPreferencesTestingModeToken(void *a1)
{
  WebCore::PageGroup *v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int **v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  v1 = (WebCore::PageGroup *)WebCore::Page::group(*(WebCore::Page **)(objc_msgSend(a1, "_apiObject") + 48));
  v2 = WebCore::PageGroup::ensureCaptionPreferences(v1);
  v3 = (_QWORD *)API::Object::newObject(0x18uLL, 4);
  v4 = (unsigned int **)WTF::fastMalloc((WTF *)8);
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
    goto LABEL_13;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v2;
  v7 = *(unsigned int **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  if (!v7)
    goto LABEL_13;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
LABEL_13:
    do
      v10 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v10 + 1, (unsigned int *)v5));
  }
  *v4 = (unsigned int *)v5;
  ++*(_DWORD *)(v2 + 136);
  *v3 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *v3 = &off_1E34EA148;
  v11 = *v4;
  if (*v4)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v3[2] = v11;
  return v3[1];
}

uint64_t WKBundlePageSetEventThrottlingBehaviorOverride(void *a1, _DWORD *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t result;

  if (a2)
  {
    v2 = *a2 == 1;
    v3 = *a2 == 1 || *a2 == 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  result = objc_msgSend(a1, "_apiObject");
  *(_WORD *)(*(_QWORD *)(result + 48) + 1133) = v2 | (v3 << 8);
  return result;
}

uint64_t WKBundlePageLayoutIfNeeded(void *a1)
{
  objc_msgSend(a1, "_apiObject");
  return WebCore::Page::layoutIfNeeded();
}

uint64_t WKBundlePageSetSkipDecidePolicyForResponseIfPossible(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 2255) = a2;
  return result;
}

uint64_t WKBundlePageCopyFrameTextForTesting(void *a1, char a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  WebKit::WebFrame::frameTextForTesting(*(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 88), a2, &v6);
  API::String::create(&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t API::InjectedBundle::EditorClient::shouldInsertText()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::shouldChangeSelectedRange()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::performTwoStepDrop()
{
  return 0;
}

void API::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken(API::CaptionUserPreferencesTestingModeToken *this, void *a2)
{
  *(_QWORD *)this = &off_1E34EA148;
  WebCore::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken((API::CaptionUserPreferencesTestingModeToken *)((char *)this + 16), a2);
}

{
  *(_QWORD *)this = &off_1E34EA148;
  WebCore::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken((API::CaptionUserPreferencesTestingModeToken *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)4>::type()
{
  return 4;
}

void WebCore::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken(WebCore::CaptionUserPreferencesTestingModeToken *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(_QWORD *)this;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 136);
      if (v5)
        *(_DWORD *)(v4 + 136) = v5 - 1;
    }
    *(_QWORD *)this = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v3));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CompositionHighlight>::destruct(*(_QWORD *)a1, (char *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::CompositionHighlight>::destruct(uint64_t result, char *a2)
{
  char *v3;
  void *v4;

  if ((char *)result != a2)
  {
    v3 = (char *)result;
    do
    {
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 24), a2);
      result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 8), v4);
      v3 += 40;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 40 * v4;
  *(_QWORD *)v6 = *(_QWORD *)v3;
  *(_BYTE *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 0;
  v7 = (_BYTE *)(v6 + 16);
  if (*(_BYTE *)(v3 + 16))
  {
    WebCore::Color::Color();
    *v7 = 1;
  }
  v8 = v5 + 40 * v4;
  *(_BYTE *)(v8 + 24) = 0;
  v8 += 24;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = (_BYTE *)(v8 + 8);
  if (*(_BYTE *)(v3 + 32))
  {
    WebCore::Color::Color();
    *v9 = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1975C8F28);
    }
    v3 = *(WTF **)a1;
    v4 = (void *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::CompositionHighlight>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::CompositionHighlight>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if ((void *)result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = v5 + v6;
      v8 = a3 + v6;
      *(_QWORD *)v8 = *(_QWORD *)(v5 + v6);
      *(_BYTE *)(a3 + v6 + 8) = 0;
      *(_BYTE *)(v8 + 16) = 0;
      if (*(_BYTE *)(v5 + v6 + 16))
      {
        WebCore::Color::Color();
        *(_BYTE *)(v8 + 16) = 1;
      }
      *(_BYTE *)(v8 + 24) = 0;
      *(_BYTE *)(v8 + 32) = 0;
      if (*(_BYTE *)(v7 + 32))
      {
        WebCore::Color::Color();
        *(_BYTE *)(v8 + 32) = 1;
      }
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 24, a2);
      result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 8, v9);
      v6 += 40;
    }
    while ((void *)(v7 + 40) != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKBundlePageRegisterScrollOperationCompletionCallback::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WKBundlePageCallAfterTasksAndTimers::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (WebCore::TimerBase *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34EA1C0;
  v4[1] = v3;
  v5 = *(_QWORD *)(a1 + 16);
  WebCore::TimerBase::TimerBase(v2);
  *(_QWORD *)v2 = off_1E34B3740;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34EA1E8;
  v6[1] = WKBundlePageCallAfterTasksAndTimers::TimerOwner::timerFired;
  v6[2] = 0;
  v6[3] = v2;
  *((_QWORD *)v2 + 6) = v6;
  *((_QWORD *)v2 + 7) = v4;
  *((_QWORD *)v2 + 8) = v5;
  return WebCore::TimerBase::start();
}

uint64_t WTF::Detail::CallableWrapper<void (*)(void *),void,void *>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void WKBundlePageCallAfterTasksAndTimers::TimerOwner::timerFired(WKBundlePageCallAfterTasksAndTimers::TimerOwner *this)
{
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), *((_QWORD *)this + 8));
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E34B3740;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WKBundlePageCallAfterTasksAndTimers::TimerOwner::*&)(void),WKBundlePageCallAfterTasksAndTimers::TimerOwner*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WKBundlePagePostMessageWithAsyncReply::$_0,void,API::Object *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 8);
  else
    v2 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v2, *(_QWORD *)(a1 + 16));
}

uint64_t WKBundlePageOverlayGetTypeID()
{
  return 139;
}

uint64_t WKBundlePageOverlayCreate(__int128 *a1)
{
  uint64_t result;
  _OWORD *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  WebKit *v15;

  result = WTF::fastMalloc((WTF *)0x90);
  *(_OWORD *)(result + 8) = 0u;
  v3 = (_OWORD *)(result + 8);
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E34EA790;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  if (a1)
  {
    v4 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 == 1)
    {
      v5 = *a1;
      v6 = a1[2];
      *(_OWORD *)(result + 24) = a1[1];
      *(_OWORD *)(result + 40) = v6;
      *v3 = v5;
      v7 = a1[3];
      v8 = a1[4];
      v9 = a1[5];
      *(_QWORD *)(result + 104) = *((_QWORD *)a1 + 12);
      *(_OWORD *)(result + 72) = v8;
      *(_OWORD *)(result + 88) = v9;
      *(_OWORD *)(result + 56) = v7;
    }
    else if (v4 <= 0)
    {
      if (v4)
      {
        __break(1u);
        return result;
      }
      *v3 = *a1;
      v10 = a1[1];
      v11 = a1[2];
      v12 = a1[3];
      *(_QWORD *)(result + 72) = *((_QWORD *)a1 + 8);
      *(_OWORD *)(result + 40) = v11;
      *(_OWORD *)(result + 56) = v12;
      *(_OWORD *)(result + 24) = v10;
    }
  }
  v14 = result;
  WebKit::WebPageOverlay::create(&v14, &v15);
  if (v15)
    v13 = *((_QWORD *)v15 + 1);
  else
    v13 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return v13;
}

uint64_t WKBundlePageOverlaySetAccessibilityClient(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 40) + 80))(*(_QWORD *)(v3 + 40), a2);
}

uint64_t WKBundlePageOverlaySetNeedsDisplay(void *a1, const FloatRect *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  IntSize v15;
  _DWORD v17[4];
  IntRect v18;

  if (a1)
    v10 = objc_msgSend(a1, "_apiObject");
  else
    v10 = 0;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  *(float *)v17 = v11;
  *(float *)&v17[1] = v12;
  v14 = a6;
  *(float *)&v17[2] = v13;
  *(float *)&v17[3] = v14;
  v18.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v17, a2);
  v18.m_size = v15;
  return WebCore::PageOverlay::setNeedsDisplay(*(WebCore::PageOverlay **)(v10 + 32), &v18);
}

float WKBundlePageOverlayFractionFadedIn()
{
  return 1.0;
}

uint64_t WKBundlePageOverlayClear(void *a1)
{
  return WebCore::PageOverlay::clear(*(WebCore::PageOverlay **)(objc_msgSend(a1, "_apiObject") + 32));
}

uint64_t WKBundleRangeHandleGetTypeID()
{
  return 140;
}

uint64_t WKBundleRangeHandleCreate(uint64_t a1, JSC::VM *a2, JSValue a3)
{
  WTF *v3;
  WebCore::Range *v4;
  uint64_t v6;

  v3 = (WTF *)WebCore::JSRange::toWrapped(*(WebCore::JSRange **)(a1 + 56), a2, a3);
  WebKit::InjectedBundleRangeHandle::getOrCreate(v3, v4, &v6);
  if (v6)
    return *(_QWORD *)(v6 + 8);
  else
    return 0;
}

double WKBundleRangeHandleGetBoundingRectInWindowCoordinates(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return (double)(int)WebKit::InjectedBundleRangeHandle::boundingRectInWindowCoordinates((WebKit::InjectedBundleRangeHandle *)a1);
}

uint64_t WKBundleRangeHandleCopySnapshotWithOptions(void *a1, unsigned int a2)
{
  uint64_t v4;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WebKit::InjectedBundleRangeHandle::renderedImage(a2 & 0xF | (((a2 >> 4) & 7) << 6), &v4);
  if (v4)
    return *(_QWORD *)(v4 + 8);
  else
    return 0;
}

uint64_t WKBundleScriptWorldGetTypeID()
{
  return 141;
}

uint64_t WKBundleScriptWorldCreateWorld()
{
  WebKit::InjectedBundleScriptWorld *v1;

  WebKit::InjectedBundleScriptWorld::create(&v1);
  if (v1)
    return *((_QWORD *)v1 + 1);
  else
    return 0;
}

uint64_t WKBundleScriptWorldNormalWorld(WebKit::InjectedBundleScriptWorld *a1)
{
  return *((_QWORD *)WebKit::InjectedBundleScriptWorld::normalWorld(a1) + 1);
}

uint64_t WKBundleScriptWorldClearWrappers(void *a1)
{
  return WebCore::DOMWrapperWorld::clearWrappers(*(WebCore::DOMWrapperWorld **)(objc_msgSend(a1, "_apiObject") + 24));
}

uint64_t WKBundleScriptWorldMakeAllShadowRootsOpen(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 24) + 52) = 1;
  return result;
}

uint64_t WKBundleScriptWorldDisableOverrideBuiltinsBehavior(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 24) + 53) = 1;
  return result;
}

uint64_t WKBundleScriptWorldCopyName(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKBundlePageBannerGetTypeID()
{
  return 138;
}

uint64_t WebKit::InjectedBundleCSSStyleDeclarationHandle::getOrCreate@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  WTF **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  if (!result)
  {
    v20 = 0;
    goto LABEL_45;
  }
  v4 = (_QWORD *)result;
  if ((_MergedGlobals_101 & 1) == 0)
  {
    qword_1ECE72EC8 = 0;
    _MergedGlobals_101 = 1;
  }
  if (!*(_QWORD *)(result + 16))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    v6 = (WTF *)v4[2];
    v4[2] = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, a2);
      else
        --*(_DWORD *)v6;
    }
  }
  v7 = (WTF *)v4[2];
  ++*(_DWORD *)v7;
  v8 = qword_1ECE72EC8;
  if (qword_1ECE72EC8
    || (WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::expand(),
        (v8 = qword_1ECE72EC8) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *((_QWORD *)v7 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v9;
    v18 = (WTF **)(v8 + 16 * v17);
    v19 = *v18;
    if (*v18 == (WTF *)-1)
    {
      v10 = (WTF **)(v8 + 16 * v17);
      goto LABEL_17;
    }
    if (!v19)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(v8 - 16);
        *v10 = v7;
      }
      else
      {
        *v18 = v7;
        v10 = (WTF **)(v8 + 16 * v17);
      }
      v20 = API::Object::newObject(0x20uLL, 132);
      *(_QWORD *)v20 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v20);
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)v20 = &off_1E34EA2D0;
      (*(void (**)(_QWORD *))(*v4 + 16))(v4);
      *(_QWORD *)(v20 + 24) = v4;
      if (!*(_QWORD *)(v20 + 16))
      {
        v22 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = v20;
        v23 = *(unsigned int **)(v20 + 16);
        *(_QWORD *)(v20 + 16) = v22;
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v21);
          }
        }
      }
      v26 = *(unsigned int **)(v20 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      result = (uint64_t)v10[1];
      v10[1] = (WTF *)v26;
      if (result)
      {
        do
        {
          v29 = __ldaxr((unsigned int *)result);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, (unsigned int *)result));
        if (!v30)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v21);
        }
      }
      if (qword_1ECE72EC8)
        v28 = *(_DWORD *)(qword_1ECE72EC8 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(qword_1ECE72EC8 - 12) = v28;
      if (qword_1ECE72EC8)
        v31 = *(_DWORD *)(qword_1ECE72EC8 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(qword_1ECE72EC8 - 16) + v31);
      v33 = *(unsigned int *)(qword_1ECE72EC8 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_45;
      }
      else if (3 * v33 > 4 * v32)
      {
        goto LABEL_45;
      }
      result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::expand();
      goto LABEL_45;
    }
    if (*((_QWORD *)v19 + 1) == v11)
      break;
LABEL_17:
    v15 = i + v17;
  }
  if (*(_DWORD *)v7 == 1)
    WTF::fastFree(v7, a2);
  else
    --*(_DWORD *)v7;
  v20 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v17 + 8) + 8);
  result = (uint64_t)CFRetain(*(CFTypeRef *)(v20 + 8));
LABEL_45:
  *a3 = v20;
  return result;
}

void WebKit::InjectedBundleCSSStyleDeclarationHandle::~InjectedBundleCSSStyleDeclarationHandle(WebKit::InjectedBundleCSSStyleDeclarationHandle *this, void *a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)this = &off_1E34EA2D0;
  if ((_MergedGlobals_101 & 1) != 0)
  {
    v3 = dword_1ECE72000;
    v4 = qword_1ECE72EC8;
    v6 = (uint64_t *)((char *)this + 24);
    v5 = *((_QWORD *)this + 3);
    if (!qword_1ECE72EC8)
      goto LABEL_25;
    v7 = *(_DWORD *)(qword_1ECE72EC8 - 8);
    v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = v11;
      v14 = *(WTF **)(qword_1ECE72EC8 + 16 * v11);
      if (v14 != (WTF *)-1)
      {
        if (!v14)
          goto LABEL_24;
        if (*((_QWORD *)v14 + 1) == v5)
          break;
      }
      v11 = (v13 + i) & v7;
    }
    if ((_DWORD)v13 != *(_DWORD *)(qword_1ECE72EC8 - 4))
    {
      v15 = (_QWORD *)(qword_1ECE72EC8 + 16 * v13);
      *v15 = 0;
      if (*(_DWORD *)v14 == 1)
      {
        v31 = v4;
        v32 = v13;
        v30 = (_QWORD *)(v4 + 16 * v13);
        WTF::fastFree(v14, a2);
        v15 = v30;
        v4 = v31;
        v13 = v32;
        v3 = dword_1ECE72000;
      }
      else
      {
        --*(_DWORD *)v14;
      }
      *v15 = -1;
      v16 = v4 + 16 * v13;
      v17 = *(unsigned int **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v17)
      {
        do
        {
          v20 = __ldaxr(v17);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v17));
        if (!v21)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
          v3 = dword_1ECE72000;
        }
      }
      v18 = *((_QWORD *)v3 + 473);
      ++*(_DWORD *)(v18 - 16);
      if (v18)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v22 = *((_QWORD *)v3 + 473);
      if (v22)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(v24 >> 1);
      }
    }
  }
  else
  {
    qword_1ECE72EC8 = 0;
    _MergedGlobals_101 = 1;
    v6 = (uint64_t *)((char *)this + 24);
  }
LABEL_24:
  v5 = *v6;
LABEL_25:
  *v6 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v26 = *((_QWORD *)this + 2);
  if (v26)
  {
    *(_QWORD *)(v26 + 8) = 0;
    v27 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::InjectedBundleCSSStyleDeclarationHandle::~InjectedBundleCSSStyleDeclarationHandle(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

WebKit::RemoteWebInspectorUI *WebKit::RemoteWebInspectorUI::RemoteWebInspectorUI(WebKit::RemoteWebInspectorUI *this, WebKit::WebPage *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34EA2F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = &unk_1E34EA490;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a2;
  WTF::fastMalloc((WTF *)0x38);
  *((_QWORD *)this + 6) = WebCore::InspectorFrontendAPIDispatcher::InspectorFrontendAPIDispatcher();
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 0;
  return this;
}

void WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI(WebKit::RemoteWebInspectorUI *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::InspectorFrontendHost *v7;
  _DWORD *v8;
  void *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v7);
  v8 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    WTF::RefCounted<WebCore::InspectorFrontendAPIDispatcher>::deref(v8);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v9);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI(WebKit::RemoteWebInspectorUI *this, WTF::StringImpl *a2)
{
  WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::initialize(uint64_t a1, _BYTE *a2, WTF::StringImpl *a3)
{
  void *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *result;
  uint64_t v10[2];
  WTF::StringImpl *v11;
  _DWORD *v12[2];

  v12[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 64) = *a2;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 88), (WTF::StringImpl *)(a2 + 24));
  *(_BYTE *)(a1 + 96) = a2[32];
  WTF::String::operator=((WTF::StringImpl **)(a1 + 104), a3);
  WebCore::InspectorController::setInspectorFrontendClient();
  WebCore::InspectorFrontendAPIDispatcher::reset(*(WebCore::InspectorFrontendAPIDispatcher **)(a1 + 48));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v10, v12, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
  v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*v8 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v8;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::updateFindString(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  const WTF::String *v3;
  void *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;
  uint64_t v8[2];
  WTF::StringImpl *v9;
  _DWORD *v10[2];

  v10[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v3);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v10, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v4);
  v6 = v10[0];
  v10[0] = 0;
  if (v6)
  {
    if (*v6 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v6;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::sendMessageToBackend(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::RemoteWebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SendMessageToBackend>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 5) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::sendMessageToBackend(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::RemoteWebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SendMessageToBackend>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 2) + 40));
}

uint64_t WebKit::RemoteWebInspectorUI::windowObjectCleared(WebKit::RemoteWebInspectorUI *this)
{
  WebCore::InspectorFrontendHost *v2;
  WebCore::InspectorFrontendHost *v3;
  WebCore::InspectorFrontendHost *v4;
  WebCore::DOMWrapperWorld *v5;

  v2 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  if (v2)
    WebCore::InspectorFrontendHost::disconnectClient(v2);
  v3 = (WebCore::InspectorFrontendHost *)WTF::fastMalloc((WTF *)0x18);
  WebCore::InspectorFrontendHost::InspectorFrontendHost();
  v4 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v3;
  if (v4)
  {
    v4 = WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v4);
    v3 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  }
  v5 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v4);
  return WebCore::InspectorFrontendHost::addSelfToGlobalObjectInWorld(v3, v5);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::windowObjectCleared(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::windowObjectCleared((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::frontendLoaded(WebCore::InspectorFrontendAPIDispatcher **this)
{
  void *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  WebKit::WebProcess *v15;
  IPC::Encoder *v16[2];
  WTF::StringImpl *v17;
  _DWORD *v18[2];

  v18[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WebCore::InspectorFrontendAPIDispatcher::frontendLoaded(this[6]);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v16, v18, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v2);
  v4 = v18[0];
  v18[0] = 0;
  if (v4)
  {
    if (*v4 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v4;
  }
  v5 = v17;
  v17 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v8 = *((_QWORD *)this[5] + 5);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1399;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16[0] = (IPC::Encoder *)v9;
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)v16, 0, 0);
  v11 = v16[0];
  v16[0] = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v12, v13);
  }
  return WebKit::RemoteWebInspectorUI::bringToFront((WebKit::RemoteWebInspectorUI *)this);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::bringToFront(WebKit::RemoteWebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  WebKit::RemoteWebInspectorUI *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = this;
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v10);
    this = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1397;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::frontendLoaded(WebCore::InspectorFrontendAPIDispatcher **this)
{
  return WebKit::RemoteWebInspectorUI::frontendLoaded(this - 3);
}

uint64_t WebKit::RemoteWebInspectorUI::pagePaused(WebKit::RemoteWebInspectorUI *this)
{
  return WebCore::InspectorFrontendAPIDispatcher::suspend();
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::pagePaused(WebKit::RemoteWebInspectorUI *this)
{
  return WebCore::InspectorFrontendAPIDispatcher::suspend();
}

uint64_t WebKit::RemoteWebInspectorUI::pageUnpaused(WebCore::InspectorFrontendAPIDispatcher **this)
{
  return WebCore::InspectorFrontendAPIDispatcher::unsuspend(this[6]);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::pageUnpaused(WebCore::InspectorFrontendAPIDispatcher **this)
{
  return WebCore::InspectorFrontendAPIDispatcher::unsuspend(this[3]);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::changeSheetRect(WebKit::RemoteWebInspectorUI *this, const WebCore::FloatRect *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::FloatRect *v6;
  WebKit::RemoteWebInspectorUI *v7;
  int *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (int *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SetSheetRect>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 5) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::changeSheetRect(WebKit::RemoteWebInspectorUI *this, const WebCore::FloatRect *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::FloatRect *v6;
  WebKit::RemoteWebInspectorUI *v7;
  int *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (int *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SetSheetRect>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 2) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = a1;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    a1 = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1408;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  return WebKit::RemoteWebInspectorUI::setForcedAppearance(a1 - 24, a2);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::startWindowDrag(WebKit::RemoteWebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  WebKit::RemoteWebInspectorUI *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = this;
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v10);
    this = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1412;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::startWindowDrag(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::startWindowDrag((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

uint64_t WebKit::RemoteWebInspectorUI::moveWindowBy(WebKit::RemoteWebInspectorUI *this, float a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  FloatRect v11;

  WebCore::Chrome::windowRect(*(WebCore::Chrome **)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 48));
  v11.m_size.m_width = v6;
  v11.m_size.m_height = v7;
  v11.m_location.m_x = v8 + a2;
  v11.m_location.m_y = v9 + a3;
  return WebCore::Chrome::setWindowRect(*(WebCore::Chrome **)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 48), &v11);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::moveWindowBy(WebKit::RemoteWebInspectorUI *this, float a2, float a3)
{
  return WebKit::RemoteWebInspectorUI::moveWindowBy((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteWebInspectorUI::userInterfaceLayoutDirection(WebKit::RemoteWebInspectorUI *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 1132);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::userInterfaceLayoutDirection(WebKit::RemoteWebInspectorUI *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 1132);
}

BOOL WebKit::RemoteWebInspectorUI::supportsDockSide(uint64_t a1, int a2)
{
  return a2 == 0;
}

BOOL `non-virtual thunk to'WebKit::RemoteWebInspectorUI::supportsDockSide(uint64_t a1, int a2)
{
  return a2 == 0;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::bringToFront(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::bringToFront((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::closeWindow(WebKit::RemoteWebInspectorUI *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  WebCore::InspectorController::setInspectorFrontendClient();
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1398;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::closeWindow(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::closeWindow((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::reopen(WebKit::RemoteWebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  WebKit::RemoteWebInspectorUI *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = this;
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v10);
    this = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1403;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::reopen(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::reopen((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::resetState(WebKit::RemoteWebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  WebKit::RemoteWebInspectorUI *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = this;
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v10);
    this = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1404;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::resetState(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::resetState((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::showConsole(WebKit::RemoteWebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  _QWORD v4[2];
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 0;
  v4[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::showResources(WebKit::RemoteWebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  _QWORD v4[2];
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 0;
  v4[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::openURLExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::RemoteWebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::OpenURLExternally>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 5) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::openURLExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::RemoteWebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::OpenURLExternally>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 2) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::revealFileExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::RemoteWebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::RevealFileExternally>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 5) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::revealFileExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::RemoteWebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::RevealFileExternally>(v3, &v8, *(_QWORD *)(*((_QWORD *)this + 2) + 40));
}

char *WebKit::RemoteWebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  char *result;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  WebKit::WebProcess *v23;
  IPC::Encoder *v24;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *((_QWORD *)v6 + 4);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1406;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v24 = (IPC::Encoder *)v9;
  IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v9, a2);
  v10 = *(_QWORD *)(v9 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v9 + 552);
  if (v12 < v10 + 1)
  {
    v20 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v11);
    result = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
    v22 = *(void **)(v9 + 528);
    if (v22 != (void *)(v9 + 16))
      munmap(v22, *(_QWORD *)(v9 + 552));
    *(_QWORD *)(v9 + 528) = v13;
    *(_QWORD *)(v9 + 552) = v21;
    v14 = *(_QWORD *)(v9 + 544);
  }
  else
  {
    v13 = *(char **)(v9 + 528);
    v14 = *(_QWORD *)(v9 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v9 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
  *(_QWORD *)(v9 + 536) = v15 + 1;
  *v15 = a3;
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v24, 0, 0);
  result = (char *)v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
    return (char *)WTF::fastFree(v18, v19);
  }
  return result;
}

char *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::RemoteWebInspectorUI::save(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WebKit::WebProcess *v3;
  os_unfair_lock_s *v4;
  WebKit::WebProcess *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = a3;
    v9 = a1;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    a1 = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = (os_unfair_lock_s *)*((_QWORD *)v3 + 4);
  v10 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v4, &v10, a3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WebKit::WebProcess *v3;
  os_unfair_lock_s *v4;
  WebKit::WebProcess *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = a3;
    v9 = a1;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    a1 = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = (os_unfair_lock_s *)*((_QWORD *)v3 + 4);
  v10 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v4, &v10, a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;
  uint64_t *v5;
  uint64_t v6;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = a2;
    v6 = a1;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    a2 = v5;
    a1 = v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(*((os_unfair_lock_s **)v2 + 4), a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;
  uint64_t *v5;
  uint64_t v6;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = a2;
    v6 = a1;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    a2 = v5;
    a1 = v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(*((os_unfair_lock_s **)v2 + 4), a2, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::showCertificate(WebKit::RemoteWebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::CertificateInfo *v6;
  WebKit::RemoteWebInspectorUI *v7;
  const WebCore::CertificateInfo *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::ShowCertificate>(v3, (uint64_t)&v8, *(_QWORD *)(*((_QWORD *)this + 5) + 40));
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::showCertificate(WebKit::RemoteWebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::CertificateInfo *v6;
  WebKit::RemoteWebInspectorUI *v7;
  const WebCore::CertificateInfo *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::ShowCertificate>(v3, (uint64_t)&v8, *(_QWORD *)(*((_QWORD *)this + 2) + 40));
}

char *WebKit::RemoteWebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::RemoteWebInspectorUI *this, char a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  WebKit::WebProcess *v21;
  IPC::Encoder *v22;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *((_QWORD *)v4 + 4);
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1409;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v22 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v22, 0, 0);
  result = (char *)v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

char *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::RemoteWebInspectorUI *this, char a2)
{
  return WebKit::RemoteWebInspectorUI::setInspectorPageDeveloperExtrasEnabled((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteWebInspectorUI::debuggableType(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::debuggableType(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t WebKit::RemoteWebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 72);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 48);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 80);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 56);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 88);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 64);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::targetIsSimulator(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetIsSimulator(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebKit::RemoteWebInspectorUI::supportsDiagnosticLogging(WebKit::RemoteWebInspectorUI *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 112) + 672) >> 47) & 1;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::supportsDiagnosticLogging(WebKit::RemoteWebInspectorUI *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 112) + 672) >> 47) & 1;
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v5 = WebCore::Page::diagnosticLoggingClient(*(WebCore::Page **)(*(_QWORD *)(a1 + 40) + 48));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, a2, &v8, a3, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::RemoteWebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteWebInspectorUI::logDiagnosticEvent(a1 - 24, a2, a3);
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::setDiagnosticLoggingAvailable(WebKit::RemoteWebInspectorUI *this, char a2)
{
  void *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *result;
  uint64_t v7[2];
  WTF::StringImpl *v8;
  _DWORD *v9[2];

  v9[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 112) = a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 112));
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v5;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::RemoteWebInspectorUI::frontendPage(WebKit::RemoteWebInspectorUI *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 48);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::frontendPage(WebKit::RemoteWebInspectorUI *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 48);
}

uint64_t WebKit::RemoteWebInspectorUI::canSave()
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::canSave()
{
  return 0;
}

uint64_t WebKit::RemoteWebInspectorUI::canLoad(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::canLoad(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::RemoteWebInspectorUI::canPickColorFromScreen(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::canPickColorFromScreen(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

void WebKit::RemoteWebInspectorUI::localizedStringsURL(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void `non-virtual thunk to'WebKit::RemoteWebInspectorUI::localizedStringsURL(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

unsigned int *WebKit::WebInspector::create@<X0>(WebKit::WebInspector *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;

  v5 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = off_1E34EA610;
  *(_QWORD *)(v5 + 8) = 0;
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_WORD *)(v5 + 56) = 0;
  *a2 = v5;
  return result;
}

void WebKit::WebInspector::~WebInspector(WebKit::WebInspector *this, void *a2)
{
  uint64_t v3;
  void *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_1E34EA610;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    IPC::Connection::invalidate(v3);
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v5 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = *v5;
    if (__ldaxr(*v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v6);
LABEL_8:
    v8 = *((_QWORD *)v6 + 1);
    v9 = v8 - 1;
    *((_QWORD *)v6 + 1) = v8 - 1;
    if (v8 == 1)
    {
      v17 = *((_QWORD *)v6 + 2);
      v11 = *((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 3) = 0;
      v10 = v17 == 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v12 = __ldxr(v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, v6))
      {
        if (v9)
          goto LABEL_18;
LABEL_16:
        v13 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v13 = off_1E34ACA48;
        *(_QWORD *)(v13 + 8) = v6;
        *(_QWORD *)(v13 + 16) = v11;
        *(_BYTE *)(v13 + 24) = v10;
        v18 = v13;
        WTF::ensureOnMainRunLoop();
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_18:
  v14 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v4);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebInspector::~WebInspector(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebKit::WebInspector::canAttachWindow(WebKit::WebInspector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = v2 - 16;
    if (v2)
      v4 = v2 - 16;
    else
      v4 = 0;
    if (!*(_QWORD *)(v4 + 48))
      return 0;
  }
  else
  {
    if (!MEMORY[0x30])
      return 0;
    v3 = 0;
  }
  if (*(_QWORD *)(v3 + 472) || *(_QWORD *)(v3 + 480))
    return 0;
  if (*((_BYTE *)this + 56))
    return 1;
  v6 = *(_QWORD *)(v1 + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 160);
  if (v8)
    v9 = *(_BYTE *)(v8 + 144) == 0;
  else
    v9 = 0;
  if (!v9)
    return 0;
  v10 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 288) + 64) + 488))(*(_QWORD *)(v8 + 288) + 64) >> 32;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 288) + 64) + 488))(*(_QWORD *)(v8 + 288) + 64);
  return (float)((float)v10 * 0.75) > 0xF9 && v11 > 0x1F3;
}

unsigned int *WebKit::WebInspector::setFrontendConnection(uint64_t a1, WTF::MachSendRight *this)
{
  unsigned int *result;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  WTF::RunLoop *v25;
  IPC::Connection *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *object;
  unsigned __int8 **v38;
  unsigned int *v39;

  result = *(unsigned int **)(a1 + 32);
  if (!result)
    goto LABEL_17;
  result = (unsigned int *)IPC::Connection::invalidate((uint64_t)result);
  v5 = *(unsigned __int8 ***)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (!v5)
    goto LABEL_17;
  v6 = *v5;
  if (__ldaxr(*v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  result = (unsigned int *)MEMORY[0x19AEABB3C](v6);
LABEL_7:
  v8 = *((_QWORD *)v6 + 1);
  v9 = v8 - 1;
  *((_QWORD *)v6 + 1) = v8 - 1;
  if (v8 == 1)
  {
    v34 = *((_QWORD *)v6 + 2);
    v11 = *((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 3) = 0;
    v10 = v34 == 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = __ldxr(v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_14:
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (__stlxr(0, v6))
    goto LABEL_14;
  if (v9)
    goto LABEL_17;
LABEL_15:
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = off_1E34ACA48;
  *(_QWORD *)(v13 + 8) = v6;
  *(_QWORD *)(v13 + 16) = v11;
  *(_BYTE *)(v13 + 24) = v10;
  v39 = (unsigned int *)v13;
  WTF::ensureOnMainRunLoop();
  result = v39;
  v39 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
LABEL_17:
  if ((*(_DWORD *)this - 1) > 0xFFFFFFFD)
    return result;
  v36 = WTF::MachSendRight::leakSendRight(this);
  object = 0;
  IPC::Connection::createClientConnection((uint64_t)&v36, (mach_port_context_t *)&v38);
  v14 = v38;
  v38 = 0;
  v15 = *(unsigned __int8 ***)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  if (!v15)
    goto LABEL_33;
  v16 = *v15;
  if (__ldaxr(*v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEABB3C](v16);
LABEL_23:
  v18 = *((_QWORD *)v16 + 1);
  v19 = v18 - 1;
  *((_QWORD *)v16 + 1) = v18 - 1;
  if (v18 == 1)
  {
    v35 = *((_QWORD *)v16 + 2);
    v21 = *((_QWORD *)v16 + 3);
    *((_QWORD *)v16 + 3) = 0;
    v20 = v35 == 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v22 = __ldxr(v16);
  if (v22 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v19)
      goto LABEL_31;
    goto LABEL_33;
  }
  if (__stlxr(0, v16))
    goto LABEL_30;
  if (!v19)
  {
LABEL_31:
    v23 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v23 = off_1E34ACA48;
    *(_QWORD *)(v23 + 8) = v16;
    *(_QWORD *)(v23 + 16) = v21;
    *(_BYTE *)(v23 + 24) = v20;
    v39 = (unsigned int *)v23;
    WTF::ensureOnMainRunLoop();
    v24 = v39;
    v39 = 0;
    if (v24)
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
  }
LABEL_33:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v38);
  v25 = (WTF::RunLoop *)object;
  if (object)
    os_release(object);
  v26 = *(IPC::Connection **)(a1 + 32);
  v27 = WTF::RunLoop::current(v25);
  IPC::Connection::open(v26, a1, v27);
  v30 = *(uint64_t **)(a1 + 40);
  v28 = (unsigned int *)(a1 + 40);
  v29 = v30;
  v31 = v28[3];
  if ((_DWORD)v31)
  {
    v32 = 8 * v31;
    do
    {
      v33 = *v29++;
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      v32 -= 8;
    }
    while (v32);
  }
  return WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v28, 0);
}

unsigned int *WebKit::WebInspector::closeFrontendConnection(WebKit::WebInspector *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *result;
  uint64_t v18;
  WebKit::WebProcess *v19;
  char v20;
  uint64_t v21;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v20 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  IPC::Connection::send<Messages::WebInspectorUIProxy::DidClose>(v3, (uint64_t)&v20, *(_QWORD *)(v5 + 40), 0, 0);
  v6 = *((_QWORD *)this + 4);
  if (!v6)
    goto LABEL_22;
  IPC::Connection::invalidate(v6);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v7)
    goto LABEL_22;
  v8 = *v7;
  if (__ldaxr(*v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEABB3C](v8);
LABEL_12:
  v10 = *((_QWORD *)v8 + 1);
  v11 = v10 - 1;
  *((_QWORD *)v8 + 1) = v10 - 1;
  if (v10 == 1)
  {
    v18 = *((_QWORD *)v8 + 2);
    v13 = *((_QWORD *)v8 + 3);
    *((_QWORD *)v8 + 3) = 0;
    v12 = v18 == 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = __ldxr(v8);
  if (v14 == 1)
  {
    if (!__stlxr(0, v8))
    {
      if (v11)
        goto LABEL_22;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (v11)
    goto LABEL_22;
LABEL_20:
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = off_1E34ACA48;
  *(_QWORD *)(v15 + 8) = v8;
  *(_QWORD *)(v15 + 16) = v13;
  *(_BYTE *)(v15 + 24) = v12;
  v21 = v15;
  WTF::ensureOnMainRunLoop();
  v16 = v21;
  v21 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_22:
  result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 10, 0);
  *((_WORD *)this + 28) = 0;
  return result;
}

unint64_t WebKit::WebInspector::whenFrontendConnectionEstablished(unint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v2 = result;
  v3 = *(unsigned int *)(result + 52);
  if ((_DWORD)v3 == *(_DWORD *)(result + 48))
  {
    result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 40, v3 + 1, (unint64_t)a2);
    v3 = *(unsigned int *)(v2 + 52);
    v4 = v3 + 1;
    v5 = *(_QWORD *)(v2 + 40);
    v6 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
  }
  else
  {
    v4 = v3 + 1;
    v5 = *(_QWORD *)(result + 40);
    v6 = *a2;
    *a2 = 0;
  }
  *(_QWORD *)(v5 + 8 * v3) = v6;
  *(_DWORD *)(v2 + 52) = v4;
  return result;
}

uint64_t WebKit::WebInspector::show(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
      return WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
  }
  return this;
}

unsigned int *WebKit::WebInspector::close(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (*(_QWORD *)(v2 + 48))
  {
    if (*((_QWORD *)this + 4))
      return WebKit::WebInspector::closeFrontendConnection((WebKit::WebInspector *)this);
  }
  return this;
}

uint64_t WebKit::WebInspector::evaluateScriptForTest(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    if (v5)
      return WebCore::InspectorController::evaluateForTestInFrontend(*(WebCore::InspectorController **)(v5 + 80), a2);
  }
  return this;
}

_QWORD *WebKit::WebInspector::showConsole(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = this[3];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34EA998;
      v6[1] = v5;
      v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, &v7);
      this = v7;
      v7 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

_QWORD *WebKit::WebInspector::showResources(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = this[3];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34EA9C0;
      v6[1] = v5;
      v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, &v7);
      this = v7;
      v7 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebInspector::showMainResourceForFrame(unint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = a2;
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v17);
    a2 = v18;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  result = (WTF::StringImpl *)WebKit::WebProcess::webFrame((uint64_t)v5, a2, a3);
  if (result)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = v8 ? v8 - 16 : 0;
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
      {
        WebCore::InspectorController::show(*(WebCore::InspectorController **)(v10 + 80));
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (v11)
          v12 = v11 - 16;
        else
          v12 = 0;
        WebCore::InspectorController::ensurePageAgent(*(WebCore::InspectorController **)(*(_QWORD *)(v12 + 48) + 80));
        WebCore::InspectorPageAgent::frameId();
        v13 = v20;
        if (v20)
          *(_DWORD *)v20 += 2;
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v14 = &off_1E34EA9E8;
        v14[1] = a1;
        v14[2] = v13;
        v19 = v14;
        WebKit::WebInspector::whenFrontendConnectionEstablished(a1, &v19);
        v16 = v19;
        v19 = 0;
        if (v16)
          (*(void (**)(_QWORD *))(*v16 + 8))(v16);
        result = v20;
        v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WebKit::WebInspector::startPageProfiling(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = this[3];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34EAA10;
      v6[1] = v5;
      v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, &v7);
      this = v7;
      v7 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

_QWORD *WebKit::WebInspector::stopPageProfiling(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = this[3];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34EAA38;
      v6[1] = v5;
      v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, &v7);
      this = v7;
      v7 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

_QWORD *WebKit::WebInspector::startElementSelection(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(this[3] + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (*(_QWORD *)(v2 + 48))
  {
    v3 = (unint64_t)this;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34EAA60;
    v4[1] = v3;
    v5 = v4;
    WebKit::WebInspector::whenFrontendConnectionEstablished(v3, &v5);
    this = v5;
    v5 = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *WebKit::WebInspector::stopElementSelection(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(this[3] + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (*(_QWORD *)(v2 + 48))
  {
    v3 = (unint64_t)this;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34EAA88;
    v4[1] = v3;
    v5 = v4;
    WebKit::WebInspector::whenFrontendConnectionEstablished(v3, &v5);
    this = v5;
    v5 = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void WebKit::WebInspectorClient::~WebInspectorClient(WebKit::WebInspectorClient *this, void *a2)
{
  WebCore::GraphicsLayer **v3;
  uint64_t v4;
  WebCore::GraphicsLayer **v5;
  WebCore::GraphicsLayer **v6;
  uint64_t v7;
  WebCore::GraphicsLayer **v8;
  WebCore::GraphicsLayer **v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  WTF *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = off_1E34EA660;
  *((_QWORD *)this + 1) = &unk_1E34EA730;
  v3 = (WebCore::GraphicsLayer **)*((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 1);
    v5 = &v3[v4];
    if (*((_DWORD *)v3 - 3))
    {
      v6 = v3;
      if ((_DWORD)v4)
      {
        v7 = 8 * v4;
        v6 = v3;
        while ((unint64_t)*v6 + 1 <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = &v3[v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &v3[v4];
  if (v3)
  {
LABEL_8:
    v8 = &v3[*((unsigned int *)v3 - 1)];
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  if (v8 != v6)
  {
    do
    {
      v9 = v6 + 1;
      WebCore::GraphicsLayer::removeFromParent(*v6);
      v6 = v5;
      if (v9 != v5)
      {
        v6 = v9;
        while ((unint64_t)*v6 + 1 <= 1)
        {
          if (++v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    v3 = (WebCore::GraphicsLayer **)*((_QWORD *)this + 6);
  }
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable((_DWORD **)v3, a2);
  }
  if (*((_QWORD *)this + 4))
  {
    v10 = *((_QWORD *)this + 2);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        CFRetain(*(CFTypeRef *)(v11 - 8));
        if (*(_QWORD *)(v11 + 32))
          WebCore::PageOverlayController::uninstallPageOverlay();
        CFRelease(*(CFTypeRef *)(v11 - 8));
      }
    }
  }
  v12 = (_DWORD **)*((_QWORD *)this + 6);
  if (v12)
    WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v12, a2);
  v13 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    WTF::fastFree(v13, a2);
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v14 + 8));
  v15 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebInspectorClient::~WebInspectorClient(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebInspectorClient::~WebInspectorClient(WebKit::WebInspectorClient *this, void *a2)
{
  WebKit::WebInspectorClient::~WebInspectorClient((WebKit::WebInspectorClient *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebInspectorClient::~WebInspectorClient((WebKit::WebInspectorClient *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::WebInspectorClient::inspectedPageDestroyed(WebKit::WebInspectorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (!*(_BYTE *)(v2 + 170))
      {
        v3 = *(unsigned int **)(v2 + 448);
        if (v3)
        {
          v4 = v3 + 4;
          do
            v5 = __ldaxr(v4);
          while (__stlxr(v5 + 1, v4));
          WebKit::WebInspector::close(v3);
          do
          {
            v6 = __ldaxr(v4);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v4));
          if (!v7)
          {
            atomic_store(1u, v3 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::frontendCountChanged(WebKit::WebInspectorClient *this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebPage::inspectorFrontendCountChanged((WebKit::WebPage *)(v3 - 16), a2);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

uint64_t WebKit::WebInspectorClient::openLocalFrontend(WebKit::WebInspectorClient *this, WebCore::InspectorController *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebInspector *v5;
  char isUnderTest;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v18;
  char v19[2];
  IPC::Encoder *v20;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v5 = (WebKit::WebInspector *)WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1);
      isUnderTest = WebCore::InspectorController::isUnderTest(a2);
      {
        v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v7 = WebKit::WebProcess::WebProcess(v18);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
      }
      v8 = *((_QWORD *)v7 + 4);
      v19[0] = WebKit::WebInspector::canAttachWindow(v5);
      v19[1] = isUnderTest;
      v9 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
      if (v9)
        v10 = v9 - 16;
      else
        v10 = 0;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v12 = 1775;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(v12 + 528) = v12 + 16;
      *(_QWORD *)(v12 + 536) = v12 + 16;
      *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v12 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
      v20 = (IPC::Encoder *)v12;
      IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v12, v19);
      IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v20, 0, 0);
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v13);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
  return 0;
}

void WebKit::WebInspectorClient::bringFrontendToFront(WebKit::WebInspectorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (WebKit::WebPage::inspector((WebKit::WebInspector *)(v2 - 16), 1))
      {
        v3 = WebKit::WebPage::inspector((WebKit::WebInspector *)(v2 - 16), 1);
        {
          v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v8 = v3;
          v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v4);
          v3 = v8;
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
        }
        v5 = *((_QWORD *)v4 + 4);
        v9 = 0;
        v6 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if (v6)
          v7 = v6 - 16;
        else
          v7 = 0;
        IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(v5, (uint64_t)&v9, *(_QWORD *)(v7 + 40), 0, 0);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::didResizeMainFrame(WebKit::WebInspectorClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebInspector *v4;
  WebKit::WebInspector *v5;
  int canAttachWindow;
  char v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WebKit::WebProcess *v18;
  IPC::Encoder *v19;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1))
      {
        v4 = (WebKit::WebInspector *)WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1);
        if (!*((_BYTE *)v4 + 56))
        {
          v5 = v4;
          canAttachWindow = WebKit::WebInspector::canAttachWindow(v4);
          if (*((unsigned __int8 *)v5 + 57) != canAttachWindow)
          {
            v7 = canAttachWindow;
            *((_BYTE *)v5 + 57) = canAttachWindow;
            {
              v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
            }
            else
            {
              v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              v8 = WebKit::WebProcess::WebProcess(v18);
              WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
            }
            v9 = *((_QWORD *)v8 + 4);
            v10 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
            if (v10)
              v11 = v10 - 16;
            else
              v11 = 0;
            v12 = *(_QWORD *)(v11 + 40);
            v13 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v13 = 1763;
            *(_QWORD *)(v13 + 8) = v12;
            *(_QWORD *)(v13 + 528) = v13 + 16;
            *(_QWORD *)(v13 + 536) = v13 + 16;
            *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v13 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
            v19 = (IPC::Encoder *)v13;
            *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = v7;
            IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v19, 0, 0);
            v15 = v19;
            v19 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v14);
              WTF::fastFree(v16, v17);
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void WebKit::WebInspectorClient::highlight(WebKit::WebInspectorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 112) + 664) & 0x10) != 0)
      {
        v5 = 0;
        memset(v4, 0, sizeof(v4));
        v6 = 1;
        v8 = 0u;
        v9 = 0u;
        v7 = 0u;
        v10 = 1;
        WebCore::InspectorController::getHighlight();
        WebKit::WebPage::showInspectorHighlight((WebKit::WebPage *)(v2 - 16), (const WebCore::InspectorOverlayHighlight *)v4);
        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v4, v3);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::hideHighlight(WebKit::WebInspectorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPage::hideInspectorHighlight((WebKit::WebPage *)(v2 - 16));
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::showPaintRect(WebKit::WebInspectorClient *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Animation *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  _QWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int i;
  unsigned int v35;
  _QWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  _DWORD *v47;
  WTF *v48;
  void *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  _DWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  char v64;
  _DWORD *v65;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  CFRetain(*(CFTypeRef *)(v3 - 8));
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 112) + 664) & 0x10) == 0)
    goto LABEL_59;
  if (!*((_QWORD *)this + 4))
  {
    WebCore::PageOverlay::create();
    v6 = v62;
    v62 = 0;
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
    {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v7 + 8));
      v8 = v62;
      v62 = 0;
      if (v8)
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)v8 + 2);
    }
    WebCore::PageOverlayController::installPageOverlay();
  }
  if (!*((_QWORD *)this + 5))
  {
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34EA7F8;
    v10[1] = this;
    v11 = (WTF *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v10;
    if (v11)
      WTF::fastFree(v11, v9);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 232))(*(_QWORD *)(v3 + 56));
  WebCore::GraphicsLayer::create();
  WebKit::WebInspectorClient::showPaintRect(WebCore::FloatRect const&)::$_0::operator() const(void)::impl += 2;
  v62 = (WTF::StringImpl *)&WebKit::WebInspectorClient::showPaintRect(WebCore::FloatRect const&)::$_0::operator() const(void)::impl;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v65 + 40))(v65, &v62);
  v13 = v62;
  v62 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  LODWORD(v63) = 0;
  v62 = 0;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v65 + 152))(v65, &v62);
  v62 = *a2;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v65 + 128))(v65, &v62);
  v62 = a2[1];
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v65 + 160))(v65, &v62);
  v62 = (WTF::StringImpl *)0x11040000FF000033;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v65 + 256))(v65, &v62);
  if (((unint64_t)v62 & 0x8000000000000) != 0)
  {
    v55 = (unsigned int *)((unint64_t)v62 & 0xFFFFFFFFFFFFLL);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v14);
    }
  }
  v62 = 0;
  v63 = 0;
  v64 = 5;
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)v15 = off_1E34EA8F8;
  *(_DWORD *)(v15 + 24) = 1065353216;
  v61 = v15;
  WebCore::KeyframeValueList::insert();
  v16 = v61;
  v61 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v17 + 8) = 0x3FD0000000000000;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)v17 = off_1E34EA8F8;
  *(_DWORD *)(v17 + 24) = 0;
  v60 = v17;
  WebCore::KeyframeValueList::insert();
  v18 = v60;
  v60 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
  v20 = WebCore::Animation::Animation(v19);
  *(_QWORD *)(v20 + 64) = 0x3FD0000000000000;
  *(_DWORD *)(v20 + 112) |= 0x800u;
  v21 = v65;
  v59 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **, _DWORD **, WebCore::Animation *, WTF::StringImpl **, double))(*(_QWORD *)v21 + 424))(v21, &v62, &v59, v19, &v58, 0.0);
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v65;
  v26 = (uint64_t *)((char *)this + 48);
  v25 = *((_QWORD *)this + 6);
  if (v25
    || (WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)this + 6),
        (v25 = *v26) != 0))
  {
    v27 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = 0;
  v29 = v65;
  v30 = ((unint64_t)v65 + ~((_QWORD)v65 << 32)) ^ (((unint64_t)v65 + ~((_QWORD)v65 << 32)) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = (v32 >> 31) ^ v32;
  for (i = 1; ; ++i)
  {
    v35 = v33 & v27;
    v36 = (_QWORD *)(v25 + 8 * v35);
    v37 = (_DWORD *)*v36;
    if (*v36 == -1)
    {
      v28 = (_QWORD *)(v25 + 8 * v35);
      goto LABEL_34;
    }
    if (!v37)
      break;
    if (v37 == v65)
      goto LABEL_47;
LABEL_34:
    v33 = i + v35;
  }
  if (v28)
  {
    *v28 = 0;
    --*(_DWORD *)(*v26 - 16);
    v29 = v65;
    v36 = v28;
  }
  v65 = 0;
  v38 = (_DWORD *)*v36;
  *v36 = v29;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
    else
      --v38[2];
  }
  v39 = *v26;
  if (*v26)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v26;
  if (*v26)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 <= 2 * v43)
LABEL_46:
      WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)this + 6);
  }
  else if (3 * v44 <= 4 * v43)
  {
    goto LABEL_46;
  }
LABEL_47:
  v45 = WebCore::PageOverlay::layer(*((WebCore::PageOverlay **)this + 4));
  ++v24[2];
  v59 = v24;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v45 + 64))(v45, &v59);
  v47 = v59;
  v59 = 0;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47);
    else
      --v47[2];
  }
  if (*(_DWORD *)v19 == 1)
  {
    v48 = (WTF *)MEMORY[0x19AEB5658](v19);
    WTF::fastFree(v48, v49);
  }
  else
  {
    --*(_DWORD *)v19;
  }
  if (HIDWORD(v63))
  {
    v50 = v62;
    v51 = 8 * HIDWORD(v63);
    do
    {
      v52 = *(_QWORD *)v50;
      *(_QWORD *)v50 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      v50 = (WTF::StringImpl *)((char *)v50 + 8);
      v51 -= 8;
    }
    while (v51);
  }
  v53 = v62;
  if (v62)
  {
    v62 = 0;
    LODWORD(v63) = 0;
    WTF::fastFree(v53, v46);
  }
  v54 = v65;
  v65 = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 16))(v54);
    else
      --v54[2];
  }
LABEL_59:
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebInspectorClient::showInspectorIndication(WebKit::WebInspectorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPage::showInspectorIndication((WebKit::WebPage *)(v2 - 16));
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::hideInspectorIndication(WebKit::WebInspectorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPage::hideInspectorIndication((WebKit::WebPage *)(v2 - 16));
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::didSetSearchingForNode(WebKit::WebInspectorClient *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebPage *v5;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v5 = (WebKit::WebPage *)(v3 - 16);
      if (a2)
        WebKit::WebPage::enableInspectorNodeSearch(v5);
      else
        WebKit::WebPage::disableInspectorNodeSearch(v5);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void WebKit::WebInspectorClient::elementSelectionChanged(WebKit::WebInspectorClient *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1))
      {
        v5 = WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1);
        {
          v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v16 = v5;
          v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v6);
          v5 = v16;
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
        }
        v7 = *((_QWORD *)v6 + 4);
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
        if (v8)
          v9 = v8 - 16;
        else
          v9 = 0;
        v10 = *(_QWORD *)(v9 + 40);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1771;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v17 = (IPC::Encoder *)v11;
        *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v17, 0, 0);
        v13 = v17;
        v17 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v12);
          WTF::fastFree(v14, v15);
        }
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void WebKit::WebInspectorClient::timelineRecordingChanged(WebKit::WebInspectorClient *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1))
      {
        v5 = WebKit::WebPage::inspector((WebKit::WebInspector *)(v3 - 16), 1);
        {
          v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v16 = v5;
          v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v6);
          v5 = v16;
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
        }
        v7 = *((_QWORD *)v6 + 4);
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
        if (v8)
          v9 = v8 - 16;
        else
          v9 = 0;
        v10 = *(_QWORD *)(v9 + 40);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1792;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v17 = (IPC::Encoder *)v11;
        *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v17, 0, 0);
        v13 = v17;
        v17 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v12);
          WTF::fastFree(v14, v15);
        }
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void WebKit::WebInspectorClient::setDeveloperPreferenceOverride(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  __int16 v19;
  IPC::Encoder *v20;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 - 8));
      if (WebKit::WebPage::inspector((WebKit::WebInspector *)(v4 - 16), 1))
      {
        v7 = WebKit::WebPage::inspector((WebKit::WebInspector *)(v4 - 16), 1);
        v19 = a3;
        {
          v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v18 = v7;
          v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v8);
          v7 = v18;
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
        }
        v9 = *((_QWORD *)v8 + 4);
        v10 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
        if (v10)
          v11 = v10 - 16;
        else
          v11 = 0;
        v12 = *(_QWORD *)(v11 + 40);
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1785;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v20 = (IPC::Encoder *)v13;
        *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a2;
        IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v13, (char *)&v19);
        IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v20, 0, 0);
        v15 = v20;
        v20 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v14);
          WTF::fastFree(v16, v17);
        }
      }
      CFRelease(*(CFTypeRef *)(v4 - 8));
    }
  }
}

uint64_t WebKit::WebInspectorClient::willMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
    *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorClient::willMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
    *(_QWORD *)(result + 16) = 0;
  return result;
}

void WebKit::WebInspectorClient::drawRect(WebKit::WebInspectorClient *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      WebCore::InspectorController::drawHighlight(*(WebCore::InspectorController **)(*(_QWORD *)(v5 + 32) + 80), a3);
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
  }
}

void `non-virtual thunk to'WebKit::WebInspectorClient::drawRect(WebKit::WebInspectorClient *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  WebKit::WebInspectorClient::drawRect((WebKit::WebInspectorClient *)((char *)this - 8), a2, a3, a4);
}

uint64_t WebKit::WebInspectorClient::mouseEvent()
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorClient::mouseEvent()
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)132>::type()
{
  return 132;
}

uint64_t WebKit::RemoteWebInspectorUI::isRemote(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t WebKit::RemoteWebInspectorUI::backendCommandsURL@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 104);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::frontendAPIDispatcher(WebKit::RemoteWebInspectorUI *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebKit::RemoteWebInspectorUI::diagnosticLoggingAvailable(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebKit::RemoteWebInspectorUI::isUnderTest(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::RemoteWebInspectorUI::inspectionLevel(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::isRemote(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::backendCommandsURL@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 80);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::inspectionLevel(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::diagnosticLoggingAvailable(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::frontendAPIDispatcher(WebKit::RemoteWebInspectorUI *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::RemoteWebInspectorUI::isUnderTest(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::WebInspectorClient::overridesShowPaintRects(WebKit::WebInspectorClient *this)
{
  return 1;
}

uint64_t WebKit::WebInspectorClient::paintRectCount(WebKit::WebInspectorClient *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

uint64_t PageOverlayClientImpl::willMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (a3)
      v5 = *(_QWORD *)(a3 + 8);
    else
      v5 = 0;
    return v3(v4, v5, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t PageOverlayClientImpl::didMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (a3)
      v5 = *(_QWORD *)(a3 + 8);
    else
      v5 = 0;
    return v3(v4, v5, *(_QWORD *)(result + 16));
  }
  return result;
}

WebCore::DestinationColorSpace *PageOverlayClientImpl::drawRect(WebCore::DestinationColorSpace *result, uint64_t a2, uint64_t a3, int *a4)
{
  WebCore::DestinationColorSpace *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, double, double, double, double);
  uint64_t v12;
  uint64_t v13;
  WebCore::DestinationColorSpace *v14;
  void *v15;
  WebCore::DestinationColorSpace *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  WebCore::DestinationColorSpace *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  WebCore::DestinationColorSpace *v36;
  IntPoint v37;
  WebCore::DestinationColorSpace *v38;

  if (!*((_QWORD *)result + 5))
    return result;
  v7 = result;
  v8 = (float)a4[3];
  v34 = (float)a4[2];
  v35 = v8;
  v9 = WebCore::DestinationColorSpace::SRGB(result);
  (*(void (**)(WebCore::DestinationColorSpace **__return_ptr, uint64_t, float *, uint64_t, uint64_t))(*(_QWORD *)a3 + 336))(&v38, a3, &v34, v9, 256);
  result = v38;
  if (!v38)
    return result;
  v10 = (*(uint64_t (**)(WebCore::DestinationColorSpace *))(*(_QWORD *)v38 + 16))(v38);
  v37 = (IntPoint)(-*a4 - (*(_QWORD *)a4 & 0xFFFFFFFF00000000));
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v34, &v37);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)v10 + 648))(v10, v34, v35);
  v11 = (void (*)(uint64_t, uint64_t, _QWORD, double, double, double, double))*((_QWORD *)v7 + 5);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11(v12, v13, *((_QWORD *)v7 + 2), (double)*a4, (double)a4[1], (double)a4[2], (double)a4[3]);
  v14 = v38;
  v38 = 0;
  v36 = v14;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v34, (const WebCore::IntRect *)a4);
  result = (WebCore::DestinationColorSpace *)WebCore::GraphicsContext::drawConsumingImageBuffer();
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    v17 = *((_QWORD *)v16 + 1);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_8;
    }
    result = (WebCore::DestinationColorSpace *)MEMORY[0x19AEABB3C](v17);
LABEL_8:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v32 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v32 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (v20)
          goto LABEL_20;
LABEL_16:
        if (v21)
          result = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        if (!v22)
          result = (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v17, v15);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    result = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v24 = v38;
  v38 = 0;
  if (!v24)
    return result;
  v25 = *((_QWORD *)v24 + 1);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_25;
  }
  result = (WebCore::DestinationColorSpace *)MEMORY[0x19AEABB3C](v25);
LABEL_25:
  v27 = *(_QWORD *)(v25 + 8);
  v28 = v27 - 1;
  *(_QWORD *)(v25 + 8) = v27 - 1;
  if (v27 == 1)
  {
    v33 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = 0;
    v30 = v33 != 0;
  }
  else
  {
    v29 = 0;
    v30 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)v25);
  if (v31 != 1)
  {
    __clrex();
LABEL_32:
    result = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v25);
    if (v28)
      return result;
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
    goto LABEL_32;
  if (v28)
    return result;
LABEL_33:
  if (v29)
    result = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (!v30)
    return (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v25, v15);
  return result;
}

uint64_t PageOverlayClientImpl::mouseEvent(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5)
{
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, __n128, __n128);
  unsigned int v7;
  uint64_t (*v8)(_QWORD, _QWORD, double, double);
  uint64_t v10;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(a3 + 8);
  if (v5 == 5)
  {
    v7 = *(unsigned __int8 *)(a3 + 48);
    if (v7 == 254)
    {
      v8 = (uint64_t (*)(_QWORD, _QWORD, double, double))a1[8];
      if (v8)
        return v8(*(_QWORD *)(a2 + 8), a1[2], (double)*(int *)(a3 + 52), (double)*(int *)(a3 + 56));
      return 0;
    }
    v6 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, __n128, __n128))a1[9];
    if (v6)
    {
      a4.n128_f64[0] = (double)*(int *)(a3 + 52);
      v10 = *(_QWORD *)(a2 + 8);
      a5.n128_f64[0] = (double)*(int *)(a3 + 56);
      goto LABEL_13;
    }
    return 0;
  }
  if (v5 != 7)
  {
    if (v5 != 6)
      return 0;
    v6 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, __n128, __n128))a1[6];
    if (!v6)
      return 0;
    goto LABEL_10;
  }
  v6 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, __n128, __n128))a1[7];
  if (!v6)
    return 0;
LABEL_10:
  a4.n128_f64[0] = (double)*(int *)(a3 + 52);
  v10 = *(_QWORD *)(a2 + 8);
  a5.n128_f64[0] = (double)*(int *)(a3 + 56);
  v7 = *(unsigned __int8 *)(a3 + 48);
LABEL_13:
  if (v7 >= 3)
    v11 = 4294967294;
  else
    v11 = v7;
  return v6(v10, v11, a1[2], a4, a5);
}

uint64_t PageOverlayClientImpl::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, WTF::StringImpl **a6)
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v22;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 128);
  if (v6)
  {
    v11 = *(_QWORD *)(a2 + 8);
    API::String::create(&v22);
    v12 = v22 ? *((_QWORD *)v22 + 1) : 0;
    v13 = API::Object::newObject(0x20uLL, 36);
    *(_QWORD *)v13 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *(_QWORD *)v13 = &off_1E34AD208;
    *(double *)(v13 + 16) = a3;
    *(double *)(v13 + 24) = a4;
    v14 = (void *)v6(v11, v12, *(_QWORD *)(v13 + 8), *(_QWORD *)(a1 + 120));
    v15 = objc_msgSend(v14, "_apiObject");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) == 21)
    {
      if (v14)
      {
        objc_msgSend(v14, "_apiObject");
        WTF::String::isolatedCopy();
        v17 = v22;
      }
      else
      {
        v17 = 0;
      }
      v22 = 0;
      v18 = *a6;
      *a6 = v17;
      if (!v18)
        return 1;
      v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        v18 = v22;
        v22 = 0;
        if (!v18)
          return 1;
        v19 = *(_DWORD *)v18 - 2;
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v20);
          return 1;
        }
      }
      *(_DWORD *)v18 = v19;
      return 1;
    }
  }
  return 0;
}

uint64_t PageOverlayClientImpl::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, _BYTE *a6)
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WebKit *v17;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 128);
  if (!v6)
    return 0;
  v11 = *(_QWORD *)(a2 + 8);
  API::String::create(&v17);
  v12 = v17 ? *((_QWORD *)v17 + 1) : 0;
  v13 = API::Object::newObject(0x20uLL, 36);
  *(_QWORD *)v13 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v13);
  *(_QWORD *)v13 = &off_1E34AD208;
  *(double *)(v13 + 16) = a3;
  *(double *)(v13 + 24) = a4;
  v14 = (void *)v6(v11, v12, *(_QWORD *)(v13 + 8), *(_QWORD *)(a1 + 120));
  v15 = objc_msgSend(v14, "_apiObject");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) != 32)
    return 0;
  *a6 = *(_BYTE *)(objc_msgSend(v14, "_apiObject") + 16);
  return 1;
}

unsigned int *PageOverlayClientImpl::copyAccessibilityAttributeNames@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v4)(_QWORD, uint64_t, _QWORD);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v4 = (uint64_t (*)(_QWORD, uint64_t, _QWORD))*((_QWORD *)result + 17);
  if (v4)
  {
    v6 = (void *)v4(*(_QWORD *)(a2 + 8), a3, *((_QWORD *)result + 15));
    v7 = *(unsigned int *)(objc_msgSend(v6, "_apiObject") + 28);
    if ((_DWORD)v7)
    {
      if (v7 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = WTF::fastMalloc((WTF *)(8 * v7));
        v9 = 0;
        *(_DWORD *)(a4 + 8) = v7;
        *(_QWORD *)a4 = v8;
        while (1)
        {
          v10 = objc_msgSend(v6, "_apiObject");
          if (v9 >= *(unsigned int *)(v10 + 28))
            break;
          v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v9) + 8);
          v12 = objc_msgSend(v11, "_apiObject");
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) == 21)
          {
            objc_msgSend(v11, "_apiObject");
            WTF::String::isolatedCopy();
            v14 = *(unsigned int *)(a4 + 12);
            if ((_DWORD)v14 == *(_DWORD *)(a4 + 8))
            {
              v18 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v14 + 1, (unint64_t)&v20);
              v14 = *(unsigned int *)(a4 + 12);
              v15 = *(_QWORD *)a4;
              v16 = *v18;
              *v18 = 0;
            }
            else
            {
              v15 = *(_QWORD *)a4;
              v16 = v20;
              v20 = 0;
            }
            *(_QWORD *)(v15 + 8 * v14) = v16;
            *(_DWORD *)(a4 + 12) = v14 + 1;
            v17 = v20;
            v20 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v13);
              else
                *(_DWORD *)v17 -= 2;
            }
          }
          if (v7 == ++v9)
          {
            v19 = *(unsigned int *)(a4 + 12);
            return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a4, v19);
          }
        }
        __break(0xC471u);
      }
      JUMPOUT(0x1975CDD9CLL);
    }
    v19 = 0;
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a4, v19);
  }
  return result;
}

uint64_t PageOverlayClientImpl::setAccessibilityClient(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;

  v2 = (_OWORD *)(result + 112);
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      *v2 = 0u;
      *(_OWORD *)(result + 128) = 0u;
      if ((*(_DWORD *)a2 & 0x80000000) != 0)
        __break(1u);
    }
    else
    {
      v3 = *(_OWORD *)(a2 + 16);
      *v2 = *(_OWORD *)a2;
      *(_OWORD *)(result + 128) = v3;
    }
  }
  else
  {
    *v2 = 0u;
    *(_OWORD *)(result + 128) = 0u;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[2];
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebKit::RepaintIndicatorLayerClient::notifyAnimationEnded(WebKit::RepaintIndicatorLayerClient *this, const WebCore::GraphicsLayer *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  const WebCore::GraphicsLayer *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *((_QWORD *)this + 1);
  result = WebCore::GraphicsLayer::removeFromParent(a2);
  v8 = *(_QWORD *)(v4 + 48);
  v6 = (uint64_t *)(v4 + 48);
  v7 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v7 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    for (i = 1; ; ++i)
    {
      v15 = v13;
      v16 = *(const WebCore::GraphicsLayer **)(v7 + 8 * v13);
      if (v16 != (const WebCore::GraphicsLayer *)-1)
      {
        if (!v16)
          return result;
        if (v16 == a2)
          break;
      }
      v13 = (v15 + i) & v9;
    }
    if ((_DWORD)v15 != *(_DWORD *)(v7 - 4))
    {
      *(_QWORD *)(v7 + 8 * v15) = 0;
      if (a2)
      {
        if (*((_DWORD *)a2 + 2) == 1)
          result = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)a2 + 16))(a2);
        else
          --*((_DWORD *)a2 + 2);
      }
      *(_QWORD *)(v7 + 8 * v15) = -1;
      ++*(_DWORD *)(*v6 - 16);
      v17 = *v6;
      if (*v6)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v6;
      if (*v6)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          return WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::rehash(v6, v21 >> 1);
      }
    }
  }
  return result;
}

void WebCore::FloatAnimationValue::~FloatAnimationValue(WebCore::FloatAnimationValue *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E34EA920;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
}

void WebCore::FloatAnimationValue::~FloatAnimationValue(WebCore::FloatAnimationValue *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34EA920;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

float WebCore::FloatAnimationValue::clone@<S0>(WebCore::FloatAnimationValue *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void (***v5)(uint64_t *__return_ptr);
  uint64_t v6;
  float result;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = off_1E34EA920;
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  v5 = (void (***)(uint64_t *__return_ptr))*((_QWORD *)this + 2);
  if (v5)
  {
    (**v5)(&v8);
    v6 = v8;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)v4 = off_1E34EA8F8;
  result = *((float *)this + 6);
  *(float *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::expand()
{
  int v0;

  if (qword_1ECE72EC8 && (v0 = *(_DWORD *)(qword_1ECE72EC8 - 4)) != 0)
    return WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72EC8 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  uint64_t v11;
  unsigned int *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v2 = qword_1ECE72EC8;
  if (qword_1ECE72EC8)
  {
    v3 = *(_DWORD *)(qword_1ECE72EC8 - 4);
    v4 = *(_DWORD *)(qword_1ECE72EC8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72EC8 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72EC8 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = v3;
    while (1)
    {
      v9 = (WTF **)(v2 + 16 * v7);
      v10 = *v9;
      if (*v9 != (WTF *)-1)
      {
        if (v10)
        {
          if (qword_1ECE72EC8)
            v16 = *(_DWORD *)(qword_1ECE72EC8 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v10 + 1) << 32) + *((_QWORD *)v10 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(qword_1ECE72EC8 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = qword_1ECE72EC8 + 16 * v22;
          v25 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            do
            {
              v31 = __ldaxr(v25);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v25));
            if (!v32)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v6);
            }
          }
          v26 = *(WTF **)v24;
          *(_QWORD *)v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v6);
            else
              --*(_DWORD *)v26;
          }
          v27 = *v9;
          *v9 = 0;
          *(_QWORD *)v24 = v27;
          v28 = v2 + 16 * v7;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v24 + 8) = v29;
          v30 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            do
            {
              v33 = __ldaxr(v30);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v30));
            if (!v34)
            {
              atomic_store(1u, v30);
              WTF::fastFree((WTF *)v30, v6);
            }
          }
          v13 = *v9;
          *v9 = 0;
          if (!v13)
            goto LABEL_24;
          if (*(_DWORD *)v13 == 1)
            goto LABEL_36;
          --*(_DWORD *)v13;
        }
        else
        {
          v11 = v2 + 16 * v7;
          v12 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            do
            {
              v14 = __ldaxr(v12);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v12));
            if (!v15)
            {
              atomic_store(1u, v12);
              WTF::fastFree((WTF *)v12, v6);
            }
          }
          v13 = *v9;
          *v9 = 0;
          if (!v13)
            goto LABEL_24;
          if (*(_DWORD *)v13 == 1)
          {
LABEL_36:
            WTF::fastFree(v13, v6);
            goto LABEL_24;
          }
          --*(_DWORD *)v13;
        }
      }
LABEL_24:
      if (++v7 == v8)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::InspectorFrontendAPIDispatcher>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB3A38]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

WebCore::InspectorFrontendHost *WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(WebCore::InspectorFrontendHost *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::InspectorFrontendHost::~InspectorFrontendHost(result);
    return (WebCore::InspectorFrontendHost *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(v7 + 8 * v8++) = v9;
      ++*v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        else
          --*result;
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SendMessageToBackend>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1407;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SetSheetRect>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1410;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::OpenURLExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1401;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::RevealFileExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1405;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  void *v17;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 8;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 8)
  {
    v14 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v15 = v14;
      v14 *= 2;
    }
    while (v15 < v7);
    v16 = (char *)mmap(0, v15, 3, 4098, -1, 0);
    if (v16 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v9 = v16;
    memcpy(v16, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v17 = *(void **)(a1 + 528);
    if (v17 != (void *)(a1 + 16))
      munmap(v17, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v15;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)a2;
    v13 = 32 * v11;
    do
    {
      IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::encode((IPC::Encoder *)a1, v12);
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
  }
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34EA948;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1400;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v16[0] = (uint64_t)v8;
  v16[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v17, v16, 0, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EA948;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EA948;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34EA970;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1402;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14[1] = v7;
  v15 = (IPC::Encoder *)v8;
  v14[0] = (uint64_t)v6;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EA970;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EA970;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[16];
  char v8;

  if (!a2 || !*a2 || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::Color>>>(a2, v7), !v8))
  {
    v7[0] = 0;
    v7[8] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::ShowCertificate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1411;
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v5);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebInspectorUIProxy::DidClose>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1769;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

uint64_t IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1767;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::showConsole(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1803;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::showResources(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1805;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebInspector::showMainResourceForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34EA9E8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebInspector::showMainResourceForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34EA9E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::showMainResourceForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = (uint64_t *)(a1 + 16);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1804;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v3, v2);
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::startPageProfiling(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1807;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::stopPageProfiling(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1809;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::startElementSelection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1806;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::stopElementSelection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1808;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 8 * i);
      v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = (_DWORD *)*v10;
          *v10 = 0;
          *v21 = v22;
          v23 = (_DWORD *)*v10;
          *v10 = 0;
          if (v23)
          {
            if (v23[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[2];
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WebKit::WebInspectorInterruptDispatcher::~WebInspectorInterruptDispatcher(WebKit::WebInspectorInterruptDispatcher *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WebKit::WebInspectorInterruptDispatcher::notifyNeedDebuggerBreak(WebKit::WebInspectorInterruptDispatcher *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int *result;

  v1 = (unsigned int *)*MEMORY[0x1E0DD1108];
  if (*MEMORY[0x1E0DD1108])
  {
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
    JSC::VMTraps::fireTrap((JSC::VMTraps *)(v1 + 16));
    return WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v1);
  }
  return result;
}

WebKit::WebInspectorUI *WebKit::WebInspectorUI::WebInspectorUI(WebKit::WebInspectorUI *this, WebKit::WebPage *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34EAAE8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = &unk_1E34EAC98;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a2;
  WTF::fastMalloc((WTF *)0x38);
  *((_QWORD *)this + 6) = WebCore::InspectorFrontendAPIDispatcher::InspectorFrontendAPIDispatcher();
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = 0;
  WebKit::DebuggableInfoData::empty((uint64_t)this + 96);
  *((_WORD *)this + 68) = 0;
  *((_BYTE *)this + 138) = 0;
  *(_QWORD *)((char *)this + 140) = 0x100000000;
  return this;
}

void WebKit::WebInspectorUI::~WebInspectorUI(WebKit::WebInspectorUI *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::InspectorFrontendHost *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    v7 = *v6;
    if (__ldaxr(*v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEABB3C](v7);
LABEL_18:
    v9 = *((_QWORD *)v7 + 1);
    v10 = v9 - 1;
    *((_QWORD *)v7 + 1) = v9 - 1;
    if (v9 == 1)
    {
      v18 = *((_QWORD *)v7 + 2);
      v12 = *((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      v11 = v18 == 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = __ldxr(v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, v7))
      {
        if (v10)
          goto LABEL_28;
LABEL_26:
        v14 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v14 = off_1E34ACA48;
        *(_QWORD *)(v14 + 8) = v7;
        *(_QWORD *)(v14 + 16) = v12;
        *(_BYTE *)(v14 + 24) = v11;
        v19 = v14;
        WTF::ensureOnMainRunLoop();
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_28:
  v15 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
    WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v15);
  v16 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v16)
    WTF::RefCounted<WebCore::InspectorFrontendAPIDispatcher>::deref(v16);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v17);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebInspectorUI::~WebInspectorUI(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebInspectorUI::~WebInspectorUI(WebKit::WebInspectorUI *this, WTF::StringImpl *a2)
{
  WebKit::WebInspectorUI::~WebInspectorUI((WebKit::WebInspectorUI *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebInspectorUI::~WebInspectorUI((WebKit::WebInspectorUI *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebInspectorUI::establishConnection(uint64_t a1, uint64_t a2, _BYTE *a3, char a4, int a5)
{
  *(_QWORD *)(a1 + 80) = a2;
  *(_BYTE *)(a1 + 96) = *a3;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)(a3 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 112), (WTF::StringImpl *)(a3 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 120), (WTF::StringImpl *)(a3 + 24));
  *(_BYTE *)(a1 + 128) = a3[32];
  *(_BYTE *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 144) = a5;
  WebCore::InspectorFrontendAPIDispatcher::reset(*(WebCore::InspectorFrontendAPIDispatcher **)(a1 + 48));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 80);
  WebCore::InspectorController::setInspectorFrontendClient();
  return WebKit::WebInspectorUI::updateConnection((WebKit::WebInspectorUI *)a1);
}

uint64_t WebKit::WebInspectorUI::updateConnection(WebKit::WebInspectorUI *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF::RunLoop *v23;
  IPC::Connection *v24;
  uint64_t v25;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  WebKit::WebProcess *v37;
  int v38;
  void *v39;
  unsigned __int8 **v40;
  uint64_t v41;
  void *object;
  uint64_t v43;
  char v44;
  IPC::Encoder *v45;

  v3 = *((_QWORD *)this + 9);
  if (!v3)
    goto LABEL_17;
  IPC::Connection::invalidate(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (!v4)
    goto LABEL_17;
  v5 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEABB3C](v5);
    goto LABEL_7;
  }
  if (__stxr(1u, v5))
    goto LABEL_6;
LABEL_7:
  v7 = *((_QWORD *)v5 + 1);
  v1 = v7 - 1;
  *((_QWORD *)v5 + 1) = v7 - 1;
  if (v7 == 1)
    goto LABEL_44;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = __ldxr(v5);
    if (v10 != 1)
    {
      __clrex();
LABEL_14:
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v1)
        goto LABEL_17;
      goto LABEL_15;
    }
    if (__stlxr(0, v5))
      goto LABEL_14;
    if (v1)
      goto LABEL_17;
LABEL_15:
    v11 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v11 = off_1E34ACA48;
    *(_QWORD *)(v11 + 8) = v5;
    *(_QWORD *)(v11 + 16) = v9;
    *(_BYTE *)(v11 + 24) = v8;
    v41 = v11;
    WTF::ensureOnMainRunLoop();
    v12 = v41;
    v41 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_17:
    IPC::Connection::createConnectionIdentifierPair((uint64_t)&v41);
    if (!v44)
      return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
    v38 = v41;
    v39 = object;
    if (object)
      os_retain(object);
    IPC::Connection::createServerConnection((uint64_t)&v38, (mach_port_context_t *)&v40);
    v13 = v40;
    v40 = 0;
    v14 = (unsigned __int8 **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v13;
    if (v14)
    {
      v15 = *v14;
      if (__ldaxr(*v14))
      {
        __clrex();
        goto LABEL_24;
      }
      if (__stxr(1u, v15))
LABEL_24:
        MEMORY[0x19AEABB3C](v15);
      v17 = *((_QWORD *)v15 + 1);
      v1 = v17 - 1;
      *((_QWORD *)v15 + 1) = v17 - 1;
      if (v17 == 1)
      {
        v36 = *((_QWORD *)v15 + 2);
        v19 = *((_QWORD *)v15 + 3);
        *((_QWORD *)v15 + 3) = 0;
        v18 = v36 == 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = __ldxr(v15);
      if (v20 == 1)
      {
        if (!__stlxr(0, v15))
        {
          if (v1)
            goto LABEL_35;
LABEL_33:
          v21 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v21 = off_1E34ACA48;
          *(_QWORD *)(v21 + 8) = v15;
          *(_QWORD *)(v21 + 16) = v19;
          *(_BYTE *)(v21 + 24) = v18;
          v45 = (IPC::Encoder *)v21;
          WTF::ensureOnMainRunLoop();
          v22 = v45;
          v45 = 0;
          if (v22)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v22 + 8))(v22);
          goto LABEL_35;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      if (v1)
        goto LABEL_35;
      goto LABEL_33;
    }
LABEL_35:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v40);
    v23 = (WTF::RunLoop *)v39;
    if (v39)
      os_release(v39);
    v24 = (IPC::Connection *)*((_QWORD *)this + 9);
    v25 = WTF::RunLoop::current(v23);
    IPC::Connection::open(v24, (uint64_t)this, v25);
    v5 = (unsigned __int8 *)&_MergedGlobals_106;
    {
      v26 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v26 = WebKit::WebProcess::WebProcess(v37);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v26;
    }
    if (v44)
      break;
    __break(1u);
LABEL_44:
    v35 = *((_QWORD *)v5 + 2);
    v9 = *((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = 0;
    v8 = v35 == 0;
  }
  v27 = *((_QWORD *)v26 + 4);
  v28 = *((_QWORD *)this + 10);
  v29 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v29 = 1787;
  *(_QWORD *)(v29 + 8) = v28;
  *(_QWORD *)(v29 + 528) = v29 + 16;
  *(_QWORD *)(v29 + 536) = v29 + 16;
  *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v29 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
  v45 = (IPC::Encoder *)v29;
  IPC::Encoder::addAttachment(v29, (unint64_t)&v43);
  IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v45, 0, 0);
  v31 = v45;
  v45 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v30);
    WTF::fastFree(v32, v33);
  }
  return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
}

uint64_t WebKit::WebInspectorUI::windowObjectCleared(WebKit::WebInspectorUI *this)
{
  WebCore::InspectorFrontendHost *v2;
  WebCore::InspectorFrontendHost *v3;
  WebCore::InspectorFrontendHost *v4;
  WebCore::DOMWrapperWorld *v5;

  v2 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  if (v2)
    WebCore::InspectorFrontendHost::disconnectClient(v2);
  v3 = (WebCore::InspectorFrontendHost *)WTF::fastMalloc((WTF *)0x18);
  WebCore::InspectorFrontendHost::InspectorFrontendHost();
  v4 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v3;
  if (v4)
  {
    v4 = WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v4);
    v3 = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  }
  v5 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v4);
  return WebCore::InspectorFrontendHost::addSelfToGlobalObjectInWorld(v3, v5);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::windowObjectCleared(WebKit::WebInspectorUI *this)
{
  return WebKit::WebInspectorUI::windowObjectCleared((WebKit::WebInspectorUI *)((char *)this - 24));
}

uint64_t WebKit::WebInspectorUI::frontendLoaded(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  WebKit::WebProcess *v13;
  WebKit::WebProcess *v14;
  char v15;
  IPC::Encoder *v16;

  WebCore::InspectorFrontendAPIDispatcher::frontendLoaded(*((WebCore::InspectorFrontendAPIDispatcher **)this + 6));
  WebKit::WebInspectorUI::setDockingUnavailable(this, (WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 136));
  WebKit::WebInspectorUI::setDockSide((uint64_t)this, *((_DWORD *)this + 35));
  WebKit::WebInspectorUI::setIsVisible(this, (WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 137));
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v4 = *((_QWORD *)this + 10);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1772;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v16 = (IPC::Encoder *)v5;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v16, 0, 0);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v8, v9);
  }
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = *((_QWORD *)v10 + 4);
  v15 = 0;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(v11, (uint64_t)&v15, *((_QWORD *)this + 10), 0, 0);
}

WTF::StringImpl *WebKit::WebInspectorUI::setDockingUnavailable(WebKit::WebInspectorUI *this, WTF::JSONImpl::Value *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *result;
  uint64_t v7[2];
  WTF::StringImpl *v8;
  _DWORD *v9[2];

  v9[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 136) = (_BYTE)a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v5;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::setDockSide(uint64_t a1, int a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11[2];
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14[2];

  v14[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      *(_DWORD *)(a1 + 140) = a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v3 = v13;
      break;
    default:
      *(_DWORD *)(a1 + 140) = a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v3 = 0;
      break;
  }
  v10 = v3;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v10, v2);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11, v14, 1uLL);
  v13 = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  v5 = v13;
  v13 = 0;
  if (v5)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v4);
  v7 = v14[0];
  v14[0] = 0;
  if (v7)
  {
    if (*v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v7;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::setIsVisible(WebKit::WebInspectorUI *this, WTF::JSONImpl::Value *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *result;
  uint64_t v7[2];
  WTF::StringImpl *v8;
  _DWORD *v9[2];

  v9[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 137) = (_BYTE)a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v5;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::bringToFront(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v4;
  WebKit::WebInspectorUI *v5;
  char v6;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = this;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v4);
    this = v5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v6 = 0;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(v2, (uint64_t)&v6, *((_QWORD *)this + 10), 0, 0);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::frontendLoaded(WebKit::WebInspectorUI *this)
{
  return WebKit::WebInspectorUI::frontendLoaded((WebKit::WebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::WebInspectorUI::startWindowDrag(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebInspectorUI *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::StartWindowDrag>(*((_QWORD *)v1 + 4), *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::startWindowDrag(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebInspectorUI *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::StartWindowDrag>(*((_QWORD *)v1 + 4), *((_QWORD *)this + 7));
}

uint64_t WebKit::WebInspectorUI::moveWindowBy(WebKit::WebInspectorUI *this, float a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  FloatRect v11;

  WebCore::Chrome::windowRect(*(WebCore::Chrome **)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 48));
  v11.m_size.m_width = v6;
  v11.m_size.m_height = v7;
  v11.m_location.m_x = v8 + a2;
  v11.m_location.m_y = v9 + a3;
  return WebCore::Chrome::setWindowRect(*(WebCore::Chrome **)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 48), &v11);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::moveWindowBy(WebKit::WebInspectorUI *this, float a2, float a3)
{
  return WebKit::WebInspectorUI::moveWindowBy((WebKit::WebInspectorUI *)((char *)this - 24), a2, a3);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::bringToFront(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v4;
  WebKit::WebInspectorUI *v5;
  char v6;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = this;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v4);
    this = v5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v6 = 0;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(v2, (uint64_t)&v6, *((_QWORD *)this + 7), 0, 0);
}

WebCore::InspectorFrontendHost *WebKit::WebInspectorUI::closeWindow(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::InspectorFrontendHost *result;
  uint64_t v16;
  WebKit::WebProcess *v17;
  char v18;
  uint64_t v19;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v18 = 0;
  IPC::Connection::send<Messages::WebInspectorUIProxy::DidClose>(v3, (uint64_t)&v18, *((_QWORD *)this + 10), 0, 0);
  v4 = *((_QWORD *)this + 9);
  if (!v4)
    goto LABEL_19;
  IPC::Connection::invalidate(v4);
  v5 = (unsigned __int8 **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (!v5)
    goto LABEL_19;
  v6 = *v5;
  if (__ldaxr(*v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEABB3C](v6);
LABEL_9:
  v8 = *((_QWORD *)v6 + 1);
  v9 = v8 - 1;
  *((_QWORD *)v6 + 1) = v8 - 1;
  if (v8 == 1)
  {
    v16 = *((_QWORD *)v6 + 2);
    v11 = *((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 3) = 0;
    v10 = v16 == 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = __ldxr(v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_19;
    goto LABEL_17;
  }
  if (__stlxr(0, v6))
    goto LABEL_16;
  if (v9)
    goto LABEL_19;
LABEL_17:
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = off_1E34ACA48;
  *(_QWORD *)(v13 + 8) = v6;
  *(_QWORD *)(v13 + 16) = v11;
  *(_BYTE *)(v13 + 24) = v10;
  v19 = v13;
  WTF::ensureOnMainRunLoop();
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_19:
  if (*((_QWORD *)this + 8))
  {
    WebCore::InspectorController::setInspectorFrontendClient();
    *((_QWORD *)this + 8) = 0;
  }
  result = (WebCore::InspectorFrontendHost *)*((_QWORD *)this + 7);
  if (result)
    result = (WebCore::InspectorFrontendHost *)WebCore::InspectorFrontendHost::disconnectClient(result);
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  return result;
}

WebCore::InspectorFrontendHost *`non-virtual thunk to'WebKit::WebInspectorUI::closeWindow(WebKit::WebInspectorUI *this)
{
  return WebKit::WebInspectorUI::closeWindow((WebKit::WebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::WebInspectorUI::reopen(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebInspectorUI *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::Reopen>(*((_QWORD *)v1 + 4), *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::reopen(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebInspectorUI *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::Reopen>(*((_QWORD *)v1 + 4), *((_QWORD *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::resetState(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebInspectorUI *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::ResetState>(*((_QWORD *)v1 + 4), *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::resetState(WebKit::WebInspectorUI *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;
  WebKit::WebInspectorUI *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::ResetState>(*((_QWORD *)v1 + 4), *((_QWORD *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = a1;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    a1 = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1786;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  return WebKit::WebInspectorUI::setForcedAppearance(a1 - 24, a2);
}

IPC::Encoder *WebKit::WebInspectorUI::effectiveAppearanceDidChange(uint64_t a1, char a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = a1;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    a1 = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1770;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::userInterfaceLayoutDirection(WebKit::WebInspectorUI *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 1132);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::userInterfaceLayoutDirection(WebKit::WebInspectorUI *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 1132);
}

BOOL WebKit::WebInspectorUI::supportsDockSide(uint64_t a1, unsigned int a2)
{
  return a2 < 4;
}

BOOL `non-virtual thunk to'WebKit::WebInspectorUI::supportsDockSide(uint64_t a1, unsigned int a2)
{
  return a2 < 4;
}

IPC::Encoder *WebKit::WebInspectorUI::requestSetDockSide(IPC::Encoder *result, int a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  IPC::Encoder *v6;
  __int16 v7;
  void *v8;
  WTF *v9;
  void *v10;
  int v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;
  IPC::Encoder *v14;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = result;
    v11 = a2;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v12);
    a2 = v11;
    result = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  switch(a2)
  {
    case 0:
      v3 = *((_QWORD *)v2 + 4);
      v4 = *((_QWORD *)result + 10);
      v5 = WTF::fastMalloc((WTF *)0x240);
      v6 = (IPC::Encoder *)v5;
      v7 = 1768;
      goto LABEL_8;
    case 1:
      v3 = *((_QWORD *)v2 + 4);
      v4 = *((_QWORD *)result + 10);
      v5 = WTF::fastMalloc((WTF *)0x240);
      v6 = (IPC::Encoder *)v5;
      v7 = 1766;
      goto LABEL_8;
    case 2:
      v3 = *((_QWORD *)v2 + 4);
      v4 = *((_QWORD *)result + 10);
      v5 = WTF::fastMalloc((WTF *)0x240);
      v6 = (IPC::Encoder *)v5;
      v7 = 1765;
      goto LABEL_8;
    case 3:
      v3 = *((_QWORD *)v2 + 4);
      v4 = *((_QWORD *)result + 10);
      v5 = WTF::fastMalloc((WTF *)0x240);
      v6 = (IPC::Encoder *)v5;
      v7 = 1764;
LABEL_8:
      *(_WORD *)v5 = v7;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v14 = v6;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v14, 0, 0);
      result = v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        result = (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
      break;
    default:
      return result;
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::requestSetDockSide(uint64_t a1, int a2)
{
  return WebKit::WebInspectorUI::requestSetDockSide((IPC::Encoder *)(a1 - 24), a2);
}

WTF::StringImpl *WebKit::WebInspectorUI::updateFindString(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  const WTF::String *v3;
  void *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;
  uint64_t v8[2];
  WTF::StringImpl *v9;
  _DWORD *v10[2];

  v10[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v3);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v10, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v4);
  v6 = v10[0];
  v10[0] = 0;
  if (v6)
  {
    if (*v6 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v6;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::WebInspectorUI::changeAttachedWindowHeight(WebKit::WebInspectorUI *this, int a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  WebKit::WebInspectorUI *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = this;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    this = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = *((_QWORD *)this + 10);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1783;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::changeAttachedWindowHeight(WebKit::WebInspectorUI *this, int a2)
{
  return WebKit::WebInspectorUI::changeAttachedWindowHeight((WebKit::WebInspectorUI *)((char *)this - 24), a2);
}

IPC::Encoder *WebKit::WebInspectorUI::changeAttachedWindowWidth(WebKit::WebInspectorUI *this, int a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  WebKit::WebInspectorUI *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = this;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    this = v11;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v5 = *((_QWORD *)this + 10);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1784;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::changeAttachedWindowWidth(WebKit::WebInspectorUI *this, int a2)
{
  return WebKit::WebInspectorUI::changeAttachedWindowWidth((WebKit::WebInspectorUI *)((char *)this - 24), a2);
}

IPC::Encoder *WebKit::WebInspectorUI::changeSheetRect(WebKit::WebInspectorUI *this, const WebCore::FloatRect *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::FloatRect *v6;
  WebKit::WebInspectorUI *v7;
  int *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (int *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetSheetRect>(v3, &v8, *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::changeSheetRect(WebKit::WebInspectorUI *this, const WebCore::FloatRect *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::FloatRect *v6;
  WebKit::WebInspectorUI *v7;
  int *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (int *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetSheetRect>(v3, &v8, *((_QWORD *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::openURLExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::OpenURLExternally>(v3, &v8, *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::openURLExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::OpenURLExternally>(v3, &v8, *((_QWORD *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::revealFileExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::RevealFileExternally>(v3, &v8, *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::revealFileExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::RevealFileExternally>(v3, &v8, *((_QWORD *)this + 7));
}

char *WebKit::WebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a1 = v9;
    a3 = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v10 = a2;
  v11 = a3;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::Save>(v4, (uint64_t)&v10, *(_QWORD *)(a1 + 80));
}

char *`non-virtual thunk to'WebKit::WebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a1 = v9;
    a3 = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 4);
  v10 = a2;
  v11 = a3;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::Save>(v4, (uint64_t)&v10, *(_QWORD *)(a1 + 56));
}

IPC::Encoder *WebKit::WebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WebKit::WebProcess *v3;
  os_unfair_lock_s *v4;
  WebKit::WebProcess *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = a3;
    v9 = a1;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    a1 = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = (os_unfair_lock_s *)*((_QWORD *)v3 + 4);
  v10 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v4, &v10, a3, *(_QWORD *)(a1 + 80));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WebKit::WebProcess *v3;
  os_unfair_lock_s *v4;
  WebKit::WebProcess *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = a3;
    v9 = a1;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    a1 = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = (os_unfair_lock_s *)*((_QWORD *)v3 + 4);
  v10 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v4, &v10, a3, *(_QWORD *)(a1 + 56));
}

IPC::Encoder *WebKit::WebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;
  uint64_t *v5;
  uint64_t v6;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = a2;
    v6 = a1;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    a2 = v5;
    a1 = v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(*((os_unfair_lock_s **)v2 + 4), a2, *(_QWORD *)(a1 + 80));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;
  uint64_t *v5;
  uint64_t v6;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = a2;
    v6 = a1;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    a2 = v5;
    a1 = v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(*((os_unfair_lock_s **)v2 + 4), a2, *(_QWORD *)(a1 + 56));
}

IPC::Encoder *WebKit::WebInspectorUI::inspectedURLChanged(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::InspectedURLChanged>(v3, &v8, *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::inspectedURLChanged(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::InspectedURLChanged>(v3, &v8, *((_QWORD *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::showCertificate(WebKit::WebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::CertificateInfo *v6;
  WebKit::WebInspectorUI *v7;
  const WebCore::CertificateInfo *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::ShowCertificate>(v3, (uint64_t)&v8, *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::showCertificate(WebKit::WebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WebCore::CertificateInfo *v6;
  WebKit::WebInspectorUI *v7;
  const WebCore::CertificateInfo *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::ShowCertificate>(v3, (uint64_t)&v8, *((_QWORD *)this + 7));
}

char *WebKit::WebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::WebInspectorUI *this, char a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  char v6;
  WebKit::WebInspectorUI *v7;
  char v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = this;
    v6 = a2;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetInspectorPageDeveloperExtrasEnabled>(v3, &v8, *((_QWORD *)this + 10));
}

char *`non-virtual thunk to'WebKit::WebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::WebInspectorUI *this, char a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  char v6;
  WebKit::WebInspectorUI *v7;
  char v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = this;
    v6 = a2;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetInspectorPageDeveloperExtrasEnabled>(v3, &v8, *((_QWORD *)this + 7));
}

uint64_t WebKit::WebInspectorUI::supportsDiagnosticLogging(WebKit::WebInspectorUI *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 112) + 672) >> 47) & 1;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::supportsDiagnosticLogging(WebKit::WebInspectorUI *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 112) + 672) >> 47) & 1;
}

WTF::StringImpl *WebKit::WebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v5 = WebCore::Page::diagnosticLoggingClient(*(WebCore::Page **)(*(_QWORD *)(a1 + 40) + 48));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, a2, &v8, a3, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebInspectorUI::logDiagnosticEvent(a1 - 24, a2, a3);
}

WTF::StringImpl *WebKit::WebInspectorUI::setDiagnosticLoggingAvailable(WebKit::WebInspectorUI *this, char a2)
{
  void *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *result;
  uint64_t v7[2];
  WTF::StringImpl *v8;
  _DWORD *v9[2];

  v9[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 138) = a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 138));
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v5;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::showConsole(WebKit::WebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  _QWORD v4[2];
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 0;
  v4[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::showResources(WebKit::WebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  _QWORD v4[2];
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 0;
  v4[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::showMainResourceForFrame(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  const WTF::String *v3;
  void *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;
  uint64_t v8[2];
  WTF::StringImpl *v9;
  _DWORD *v10[2];

  v10[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v3);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v10, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v4);
  v6 = v10[0];
  v10[0] = 0;
  if (v6)
  {
    if (*v6 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v6;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::startPageProfiling(WebKit::WebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  uint64_t v5[2];
  WTF::StringImpl *v6;
  _DWORD *v7[2];

  v7[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v3;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::stopPageProfiling(WebKit::WebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  uint64_t v5[2];
  WTF::StringImpl *v6;
  _DWORD *v7[2];

  v7[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(0);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v3;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::startElementSelection(WebKit::WebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  uint64_t v5[2];
  WTF::StringImpl *v6;
  _DWORD *v7[2];

  v7[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v3;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::stopElementSelection(WebKit::WebInspectorUI *this)
{
  void *v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  uint64_t v5[2];
  WTF::StringImpl *v6;
  _DWORD *v7[2];

  v7[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(0);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v3;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::pagePaused(WebKit::WebInspectorUI *this)
{
  return WebCore::InspectorFrontendAPIDispatcher::suspend();
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::pagePaused(WebKit::WebInspectorUI *this)
{
  return WebCore::InspectorFrontendAPIDispatcher::suspend();
}

uint64_t WebKit::WebInspectorUI::pageUnpaused(WebCore::InspectorFrontendAPIDispatcher **this)
{
  return WebCore::InspectorFrontendAPIDispatcher::unsuspend(this[6]);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::pageUnpaused(WebCore::InspectorFrontendAPIDispatcher **this)
{
  return WebCore::InspectorFrontendAPIDispatcher::unsuspend(this[3]);
}

IPC::Encoder *WebKit::WebInspectorUI::sendMessageToBackend(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SendMessageToBackend>(v3, &v8, *((_QWORD *)this + 10));
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUI::sendMessageToBackend(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;
  const WTF::String *v6;
  WebKit::WebInspectorUI *v7;
  uint64_t *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = this;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    this = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *((_QWORD *)v2 + 4);
  v8 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SendMessageToBackend>(v3, &v8, *((_QWORD *)this + 7));
}

uint64_t WebKit::WebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 104);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 80);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 112);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 88);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 120);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 96);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebInspectorUI::frontendPage(WebKit::WebInspectorUI *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 48);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::frontendPage(WebKit::WebInspectorUI *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 48);
}

uint64_t WebKit::WebInspectorUI::canSave()
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::canSave()
{
  return 0;
}

uint64_t WebKit::WebInspectorUI::canLoad(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::canLoad(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::WebInspectorUI::canPickColorFromScreen(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::canPickColorFromScreen(WebKit::WebInspectorUI *this)
{
  return 0;
}

void WebKit::WebInspectorUI::localizedStringsURL(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void `non-virtual thunk to'WebKit::WebInspectorUI::localizedStringsURL(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebKit::WebPageInspectorTarget::identifier@<X0>(WebKit::WebPageInspectorTarget *this@<X0>, _QWORD *a2@<X8>)
{
  return WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *(_QWORD *)(*((_QWORD *)this + 4) + 40), a2);
}

WTF **WebKit::WebPageInspectorTarget::connect(WTF **result, char a2)
{
  WTF **v2;
  WTF **v4;
  WTF *v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11[2];

  v2 = result + 5;
  if (!result[5])
  {
    v4 = result;
    v5 = result[4];
    v6 = *((_QWORD *)v5 + 5);
    v11[0] = (uint64_t)"page-";
    v11[1] = 6;
    v10 = v6;
    result = (WTF **)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(v11, &v10, &v9);
    if (v9)
    {
      v7 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v7 = off_1E34EAE68;
      *(_QWORD *)(v7 + 8) = v5;
      result = (WTF **)v9;
      if (v9)
        *(_DWORD *)v9 += 2;
      *(_QWORD *)(v7 + 16) = result;
      *(_BYTE *)(v7 + 24) = a2;
      v8 = *v2;
      *v2 = (WTF *)v7;
      if (v8)
      {
        std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v8);
        result = (WTF **)v9;
      }
      v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      if (*((_QWORD *)v4[4] + 6))
        return (WTF **)WebCore::InspectorController::connectFrontend();
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void WebKit::WebPageInspectorTarget::disconnect(WebKit::WebPageInspectorTarget *this)
{
  WTF *v1;
  WTF **v2;

  v2 = (WTF **)((char *)this + 40);
  v1 = (WTF *)*((_QWORD *)this + 5);
  if (v1)
  {
    if (*(_QWORD *)(*((_QWORD *)this + 4) + 48))
    {
      WebCore::InspectorController::disconnectFrontend();
      v1 = *v2;
      *v2 = 0;
      if (!v1)
        return;
    }
    else
    {
      *v2 = 0;
    }
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v1);
  }
}

uint64_t WebKit::WebPageInspectorTarget::sendMessageToTargetBackend(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 32) + 48);
  if (v2)
    return WebCore::InspectorController::dispatchMessageFromFrontend(*(WebCore::InspectorController **)(v2 + 80), a2);
  return this;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long long>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v6 = a3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(v7, &v6, a4);
  if (!*a4)
    __break(0xC471u);
  return result;
}

void WebKit::WebPageInspectorTargetController::~WebPageInspectorTargetController(WebKit::WebPageInspectorTargetController *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(v3, a2);
  WebKit::WebPageInspectorTarget::~WebPageInspectorTarget((WebKit::WebPageInspectorTargetController *)((char *)this + 8));
}

unsigned int *WebKit::WebPageInspectorTargetController::connectInspector(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  void *v4;
  unsigned int *result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)(a1 + 56), a2, a3, (unsigned int **)&v9);
  result = (unsigned int *)v9;
  if (v9)
  {
    v6 = *((_QWORD *)v9 + 1);
    if (v6)
    {
      (*(void (**)(_QWORD, const WTF::StringImpl *))(*(_QWORD *)v6 + 40))(*((_QWORD *)v9 + 1), a3);
      result = (unsigned int *)v9;
      v9 = 0;
      if (!result)
        return result;
    }
    else
    {
      v9 = 0;
    }
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

unsigned int *WebKit::WebPageInspectorTargetController::disconnectInspector(WebKit::WebPageInspectorTargetController *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  void *v3;
  unsigned int *result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebPageInspectorTargetController *)((char *)this + 56), a2, a3, (unsigned int **)&v8);
  result = (unsigned int *)v8;
  if (v8)
  {
    v5 = *((_QWORD *)v8 + 1);
    if (v5)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v5 + 48))(*((_QWORD *)v8 + 1));
      result = (unsigned int *)v8;
      v8 = 0;
      if (!result)
        return result;
    }
    else
    {
      v8 = 0;
    }
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

unsigned int *WebKit::WebPageInspectorTargetController::sendMessageToTargetBackend(WebKit::WebPageInspectorTargetController *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  void *v4;
  unsigned int *result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebPageInspectorTargetController *)((char *)this + 56), a2, a3, (unsigned int **)&v9);
  result = (unsigned int *)v9;
  if (v9)
  {
    v6 = *((_QWORD *)v9 + 1);
    if (v6)
    {
      (*(void (**)(_QWORD, const WTF::String *))(*(_QWORD *)v6 + 56))(*((_QWORD *)v9 + 1), a3);
      result = (unsigned int *)v9;
      v9 = 0;
      if (!result)
        return result;
    }
    else
    {
      v9 = 0;
    }
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPageInspectorTargetFrontendChannel::sendMessageToFrontend(WebKit::WebPageInspectorTargetFrontendChannel *this, const WTF::String *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (uint64_t *)((char *)this + 16);
  v5 = v3[4];
  v3 += 4;
  v6 = (*(uint64_t (**)(_QWORD *))(v5 + 56))(v3);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2028;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v3 + 32))(v3, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::isRemote(WebKit::WebInspectorUI *this)
{
  return 0;
}

void WebKit::WebInspectorUI::backendCommandsURL(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebInspectorUI::debuggableType(WebKit::WebInspectorUI *this)
{
  return 4;
}

uint64_t WebKit::WebInspectorUI::targetIsSimulator(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::WebInspectorUI::inspectionLevel(WebKit::WebInspectorUI *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t WebKit::WebInspectorUI::diagnosticLoggingAvailable(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 138);
}

uint64_t WebKit::WebInspectorUI::frontendAPIDispatcher(WebKit::WebInspectorUI *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebKit::WebInspectorUI::isUnderTest(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::isRemote(WebKit::WebInspectorUI *this)
{
  return 0;
}

void `non-virtual thunk to'WebKit::WebInspectorUI::backendCommandsURL(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::debuggableType(WebKit::WebInspectorUI *this)
{
  return 4;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::targetIsSimulator(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::inspectionLevel(WebKit::WebInspectorUI *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::diagnosticLoggingAvailable(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 114);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::frontendAPIDispatcher(WebKit::WebInspectorUI *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUI::isUnderTest(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 64);
}

void WebKit::WebPageInspectorTargetFrontendChannel::~WebPageInspectorTargetFrontendChannel(WebKit::WebPageInspectorTargetFrontendChannel *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebPageInspectorTargetFrontendChannel::connectionType(WebKit::WebPageInspectorTargetFrontendChannel *this)
{
  return *((unsigned __int8 *)this + 24);
}

void WebKit::WebPageInspectorTarget::~WebPageInspectorTarget(WebKit::WebPageInspectorTarget *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebPageInspectorTarget::~WebPageInspectorTarget(this);
  WTF::fastFree(v1, v2);
}

{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  v4 = (WTF *)*((_QWORD *)this + 5);
  v2 = (_QWORD *)((char *)this + 40);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v3);
  *(_QWORD *)this = &unk_1E34D6048;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

uint64_t WebKit::WebPageInspectorTarget::type(WebKit::WebPageInspectorTarget *this)
{
  return 0;
}

void WebKit::WebMediaKeyStorageManager::~WebMediaKeyStorageManager(WebKit::WebMediaKeyStorageManager *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebMediaKeyStorageManager::~WebMediaKeyStorageManager(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34EAEE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

void std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF::StringImpl *v3;

  if (this)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, this);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~KeyValuePair(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;

  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

unsigned int *WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    v3 = (WTF *)MEMORY[0x19AEAAAA4]();
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::StartWindowDrag>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1791;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::Reopen>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1778;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::ResetState>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1779;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::SetSheetRect>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1789;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::OpenURLExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1776;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::RevealFileExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1780;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

char *IPC::Connection::send<Messages::WebInspectorUIProxy::Save>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1781;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v21 = (IPC::Encoder *)v6;
  IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *(_QWORD *)a2);
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *(_QWORD *)(v6 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v20 = *(void **)(v6 + 528);
    if (v20 != (void *)(v6 + 16))
      munmap(v20, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v19;
    v12 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
    v12 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v6 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v13 + 1;
  *v13 = v7;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34EAE98;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1774;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v16[0] = (uint64_t)v8;
  v16[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v17, v16, 0, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EAE98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EAE98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34EAEC0;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1777;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14[1] = v7;
  v15 = (IPC::Encoder *)v8;
  v14[0] = (uint64_t)v6;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EAEC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EAEC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[16];
  char v8;

  if (!a2 || !*a2 || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::Color>>>(a2, v7), !v8))
  {
    v7[0] = 0;
    v7[8] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::InspectedURLChanged>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1773;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::ShowCertificate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1790;
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v5);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

char *IPC::Connection::send<Messages::WebInspectorUIProxy::SetInspectorPageDeveloperExtrasEnabled>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1788;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v21 = (IPC::Encoder *)v6;
  v7 = *a2;
  v8 = *(_QWORD *)(v6 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v20 = *(void **)(v6 + 528);
    if (v20 != (void *)(v6 + 16))
      munmap(v20, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v19;
    v12 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
    v12 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v6 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v13 + 1;
  *v13 = v7;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::SendMessageToBackend>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1782;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v4);
  v8 = 0;
  do
  {
    v9 = v7 & v5;
    v7 = ++v8 + v9;
  }
  while (*(_QWORD *)(a1 + 16 * v9));
  v10 = a1 + 16 * v9;
  v11 = *(unsigned int **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = *(WTF::StringImpl **)v10;
  *(_QWORD *)v10 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v15;
  v16 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v10 + 8) = v16;
  return v10;
}

WTF *WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned int **a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      result = *(WTF **)(v5 + 16 * v11);
      if (result != (WTF *)-1)
      {
        if (!result)
          goto LABEL_10;
        result = (WTF *)WTF::equal(result, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = *(unsigned int **)(v5 + 16 * v11 + 8);
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  else
  {
LABEL_10:
    v12 = 0;
  }
  *a4 = v12;
  return result;
}

uint64_t WebKit::MediaDeviceSandboxExtensions::MediaDeviceSandboxExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 28) = v7;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 32) = v8;
  if (*(_DWORD *)(result + 12) != (_DWORD)v7)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::MediaDeviceSandboxExtensions::operator[]@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;

  v4 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v4 != *((_DWORD *)a1 + 7) || v4 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1975D3978);
  }
  v6 = *a1;
  v7 = a1[2];
  if (*(_QWORD *)(v7 + 8 * a2))
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    v9 = *(_QWORD *)(v7 + 8 * a2);
    *(_QWORD *)(v7 + 8 * a2) = 0;
    *(_QWORD *)(result + 8) = v9;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = 0;
  }
  v10 = *(_DWORD **)(v6 + 8 * a2);
  if (v10)
    *v10 += 2;
  *a3 = v10;
  a3[1] = result;
  return result;
}

void WebKit::UserMediaPermissionRequestManager::startUserMediaRequest(WebKit::UserMediaPermissionRequestManager *this, WebCore::UserMediaRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[2];
  WebCore::Node *v15;
  _QWORD v16[3];

  v4 = WebCore::UserMediaRequest::document(a2);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 528)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    if (*(_BYTE *)(v8 + 544))
    {
      WebKit::UserMediaPermissionRequestManager::sendUserMediaRequest(this, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) += 2;
      v14[1] = 0;
      v15 = (WebCore::Node *)v4;
      v14[0] = 0;
      WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this + 4, (uint64_t *)&v15, (uint64_t)v14, (uint64_t)v16);
      v9 = v16[0];
      WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v10);
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      v12 = *(_DWORD *)(v9 + 20);
      if (!v12)
      {
        WebCore::Document::addMediaCanStartListener();
        v12 = *(_DWORD *)(v9 + 20);
      }
      if (v12 == *(_DWORD *)(v9 + 16))
      {
        WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaKeySystemRequest&>(v9 + 8, (uint64_t)a2);
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 8);
        ++*((_DWORD *)a2 + 6);
        *(_QWORD *)(v13 + 8 * v12) = a2;
        *(_DWORD *)(v9 + 20) = v12 + 1;
      }
    }
  }
  else
  {
    WebCore::UserMediaRequest::deny();
  }
}

void WebKit::UserMediaPermissionRequestManager::sendUserMediaRequest(WebKit::UserMediaPermissionRequestManager *this, WebCore::UserMediaRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  IPC::Encoder *v39;

  if (!WebCore::UserMediaRequest::document(a2)
    || (v4 = *(_QWORD *)(WebCore::UserMediaRequest::document(a2) + 528)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    WebCore::UserMediaRequest::deny();
    return;
  }
  v7 = (uint64_t *)((char *)this + 24);
  v6 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)a2 + 4);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 3, 0), (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != v8)
    {
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v9;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          v14 = v16;
        }
        goto LABEL_15;
      }
    }
    goto LABEL_29;
  }
LABEL_15:
  *v14 = v8;
  ++*((_DWORD *)a2 + 6);
  v18 = (_DWORD *)v14[1];
  v14[1] = (uint64_t)a2;
  if (v18)
  {
    if (v18[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[6];
  }
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v7;
  if (*v7)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (3 * v24 <= 4 * v23)
LABEL_28:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 3, v14);
LABEL_29:
  WebKit::WebFrame::fromCoreFrame(v5, &v38);
  v25 = WebCore::UserMediaRequest::topLevelDocumentOrigin(a2);
  v26 = (_QWORD *)*((_QWORD *)this + 2);
  v37 = *((_QWORD *)a2 + 4);
  v27 = v38;
  v36 = *(_OWORD *)(v38 + 80);
  v28 = WebCore::UserMediaRequest::userMediaDocumentOrigin(a2) + 8;
  v29 = v26[4];
  v26 += 4;
  v30 = (*(uint64_t (**)(_QWORD *))(v29 + 56))(v26);
  v31 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v31 = 2016;
  *(_QWORD *)(v31 + 8) = v30;
  *(_QWORD *)(v31 + 528) = v31 + 16;
  *(_QWORD *)(v31 + 536) = v31 + 16;
  *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v31 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
  v39 = (IPC::Encoder *)v31;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v31, &v37);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v31, (uint64_t *)&v36);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v31, v28);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v31, v25 + 8);
  IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::encode((IPC::Encoder *)v31, (uint64_t)a2 + 88);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v26 + 32))(v26, &v39, 0);
  v33 = v39;
  v39 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v32);
    WTF::fastFree(v34, v35);
  }
  CFRelease(*(CFTypeRef *)(v27 + 8));
}

_QWORD *WebKit::UserMediaPermissionRequestManager::cancelUserMediaRequest(WebKit::UserMediaPermissionRequestManager *this, WebCore::UserMediaRequest *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::UserMediaRequest **v11;
  WebCore::UserMediaRequest **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  WebCore::UserMediaRequest **__dst;
  uint64_t v18;
  _QWORD *v19;

  v4 = (uint64_t *)((char *)this + 24);
  v18 = *((_QWORD *)a2 + 4);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 3, &v18);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v19);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    else
      --*((_DWORD *)result + 6);
  }
  else
  {
    result = (_QWORD *)WebCore::UserMediaRequest::document(a2);
    if (result)
    {
      v7 = *((_QWORD *)this + 4);
      result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v7, (uint64_t)result);
      v8 = result;
      v9 = v7 ? v7 + 24 * *(unsigned int *)(v7 - 4) : 0;
      if ((_QWORD *)v9 != result)
      {
        v10 = *((unsigned int *)result + 5);
        if (!(_DWORD)v10)
          goto LABEL_20;
        v11 = (WebCore::UserMediaRequest **)result[1];
        v12 = v11 + 1;
        v13 = *((unsigned int *)result + 5);
        while (*v11 != a2)
        {
          ++v11;
          ++v12;
          if (!--v13)
            return result;
        }
        __dst = v11;
        *v11 = 0;
        if (*((_DWORD *)a2 + 6) == 1)
        {
          (*(void (**)(WebCore::UserMediaRequest *))(*(_QWORD *)a2 + 16))(a2);
          v10 = *((unsigned int *)v8 + 5);
        }
        else
        {
          --*((_DWORD *)a2 + 6);
        }
        result = memmove(__dst, __dst + 1, v8[1] + 8 * v10 - (_QWORD)v12);
        v14 = *((_DWORD *)v8 + 5) - 1;
        *((_DWORD *)v8 + 5) = v14;
        if (!v14)
        {
LABEL_20:
          result = (_QWORD *)WebCore::Document::removeMediaCanStartListener();
          v15 = *((_QWORD *)this + 4);
          if (v15)
          {
            v16 = (_QWORD *)(v15 + 24 * *(unsigned int *)(v15 - 4));
            if (v16 == v8)
              return result;
          }
          else
          {
            if (!v8)
              return result;
            v16 = 0;
          }
          if (v16 != v8)
            return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove((uint64_t *)this + 4, v8);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManager::mediaCanStart(WebKit::UserMediaPermissionRequestManager *this, WebCore::Document *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  WebCore::UserMediaRequest **v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::UserMediaRequest *v13;
  WebCore::UserMediaRequest **v15;
  unint64_t v16;
  _QWORD v17[2];

  v3 = (uint64_t *)((char *)this + 32);
  v4 = *((_QWORD *)this + 4);
  v5 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v4, (uint64_t)a2);
  v6 = v5;
  if (v4)
    v7 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  else
    v7 = 0;
  if (v7 == v5)
  {
    v17[0] = 0;
    v15 = 0;
    v17[1] = 0;
    v16 = 0;
    WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v5);
    return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  }
  v8 = (WebCore::UserMediaRequest **)v5[1];
  v15 = v8;
  v9 = *((_DWORD *)v5 + 4);
  v10 = *((unsigned int *)v5 + 5);
  v5[1] = 0;
  v5[2] = 0;
  v16 = __PAIR64__(v10, v9);
  if (!*v3)
  {
    if (!v5)
      goto LABEL_13;
    v11 = 0;
LABEL_11:
    if ((uint64_t *)v11 != v5)
      WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove(v3, v5);
    goto LABEL_13;
  }
  v11 = *v3 + 24 * *(unsigned int *)(*v3 - 4);
  if ((uint64_t *)v11 != v5)
    goto LABEL_11;
LABEL_13:
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    do
    {
      v13 = *v8++;
      WebKit::UserMediaPermissionRequestManager::sendUserMediaRequest(this, v13);
      v12 -= 8;
    }
    while (v12);
  }
  return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
}

_DWORD *WebKit::UserMediaPermissionRequestManager::userMediaAccessWasGranted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *result;
  _DWORD *v11;
  uint64_t v12;

  v12 = a2;
  v7 = (uint64_t *)(a1 + 24);
  v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v12);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v7, v8, &v11);
  if (v11)
  {
    WebCore::UserMediaRequest::allow();
  }
  else
  {
    v9 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *WebKit::UserMediaPermissionRequestManager::userMediaAccessWasDenied(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;

  v6 = a2;
  v2 = (uint64_t *)(a1 + 24);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v2, v3, &v5);
  result = v5;
  if (v5)
  {
    WebCore::UserMediaRequest::deny();
    result = v5;
    v5 = 0;
    if (result)
    {
      if (result[6] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[6];
    }
  }
  return result;
}

void WebKit::UserMediaPermissionRequestManager::enumerateMediaDevices(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v4 = a2[66];
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    WebKit::WebFrame::fromCoreFrame(v5, &v17);
    v8 = v17;
    *(_OWORD *)v21 = *(_OWORD *)(v17 + 80);
    v9 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 24)) + 8;
    v10 = WebCore::Document::topOrigin((WebCore::Document *)a2);
    v18 = v21;
    v19 = v9;
    v20 = v10 + 8;
    v11 = *(_QWORD *)(v7 + 32);
    v7 += 32;
    v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v7);
    IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(v7, (uint64_t)&v18, a3, v12, 0);
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v21[0] = 0;
    v21[1] = 0;
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v18, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v15 = v21[1];
    v21[1] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v14);
  }
}

uint64_t WebKit::UserMediaPermissionRequestManager::addDeviceChangeObserver(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13[3];
  uint64_t IdentifierInternal;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::add<WTF::Function<void ()(void)>>((uint64_t *)(a1 + 40), &IdentifierInternal, a2, (uint64_t)v13);
  if (!*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 1;
    v4 = *(_QWORD **)(a1 + 16);
    v5 = v4[4];
    v4 += 4;
    v6 = (*(uint64_t (**)(_QWORD *))(v5 + 56))(v4);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1838;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v13[0] = (IPC::Encoder *)v7;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v4 + 32))(v4, v13, 0);
    v9 = v13[0];
    v13[0] = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
  }
  return IdentifierInternal;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::add<WTF::Function<void ()(void)>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t *WebKit::UserMediaPermissionRequestManager::removeDeviceChangeObserver(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 40);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v7);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManager::captureDevicesChanged(WebKit::UserMediaPermissionRequestManager *this)
{
  uint64_t *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = (uint64_t *)((char *)this + 40);
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 5);
  v4 = (_QWORD *)result;
  v6 = v5;
  v7 = *((_QWORD *)this + 5);
  if (v7)
    v8 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  else
    v8 = 0;
  if (v8 != (_QWORD *)result)
  {
    do
    {
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v2, v4);
      v9 = *v2;
      if (*v2)
        v9 += 16 * *(unsigned int *)(v9 - 4);
      if (v9 != result)
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8));
      while (1)
      {
        v4 += 2;
        if (v4 == v6)
          break;
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_13;
      }
      v4 = v6;
LABEL_13:
      ;
    }
    while (v4 != v8);
  }
  return result;
}

void WebKit::WebModelPlayerProvider::~WebModelPlayerProvider(WebKit::WebModelPlayerProvider *this)
{
  WTF *v1;
  void *v2;

  WebCore::ModelPlayerProvider::~ModelPlayerProvider(this);
  WTF::fastFree(v1, v2);
}

_QWORD *WebKit::WebModelPlayerProvider::createModelPlayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return WebKit::ARKitInlinePreviewModelPlayerIOS::create(*(_QWORD *)(a1 + 8), a2, a3);
}

void WebKit::NetworkProcessConnection::~NetworkProcessConnection(WebKit::NetworkProcessConnection *this)
{
  unsigned __int8 ***v2;
  void *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E34EAF70;
  v2 = (unsigned __int8 ***)((char *)this + 24);
  IPC::Connection::invalidate(*((_QWORD *)this + 3));
  v4 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)(v6 + 24), v3);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkProcessConnection::~NetworkProcessConnection(this);
  WTF::fastFree(v1, v2);
}

WebKit::WebSharedWorkerObjectConnection *WebKit::NetworkProcessConnection::sharedWorkerConnection(WebKit::NetworkProcessConnection *this)
{
  WebKit::WebSharedWorkerObjectConnection *result;
  WebKit::WebSharedWorkerObjectConnection *v3;
  _DWORD *v4;

  result = (WebKit::WebSharedWorkerObjectConnection *)*((_QWORD *)this + 11);
  if (!result)
  {
    v3 = (WebKit::WebSharedWorkerObjectConnection *)WTF::fastMalloc((WTF *)0x30);
    result = WebKit::WebSharedWorkerObjectConnection::WebSharedWorkerObjectConnection(v3);
    v4 = (_DWORD *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return (WebKit::WebSharedWorkerObjectConnection *)*((_QWORD *)this + 11);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::didReceiveSyncMessage(WebCore::SWContextManager *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  WebCore::SWContextManager *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned __int16 *)(a3 + 50);
  if (v3 >= 0xE98)
    v3 = 3736;
  v4 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v3 + 2]);
  if (v4 == 182)
  {
    {
      v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v11 = a3;
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v6 = WebKit::WebProcess::WebProcess(v10);
      a3 = v11;
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    }
    v12 = *(_QWORD *)(a3 + 64);
    v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v6 + 14, &v12);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 48);
      if (v8)
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 1240) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(v8 + 1240) + 8));
    }
  }
  else if (v4 == 193)
  {
    v5 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(a1);
    WebCore::SWContextManager::connection(v5);
  }
  return 0;
}

void WebKit::NetworkProcessConnection::didClose(WebKit::NetworkProcessConnection *this, IPC::Connection *a2)
{
  WebKit::WebProcess *v3;
  WebKit::WebIDBConnectionToServer *v4;
  void *v5;
  uint64_t v6;
  WebKit::WebProcess *v7;

  ++*((_DWORD *)this + 4);
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  WebKit::WebProcess::networkProcessConnectionClosed(v3, this);
  v4 = (WebKit::WebIDBConnectionToServer *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    WebKit::WebIDBConnectionToServer::connectionToServerLost(v4);
    WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)v4 + 6, v5);
  }
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    *(_BYTE *)(v6 + 12) = 1;
    WebCore::SWClientConnection::clearPendingJobs((WebCore::SWClientConnection *)v6);
    if (*(_DWORD *)(v6 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 8);
  }
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(WebKit::NetworkProcessConnection *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 4);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v20[2];
  IPC::Encoder *v21;

  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34EB110;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 280;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v21 = (IPC::Encoder *)v12;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v12, *a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  v15 = v20[0];
  v20[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v14)
    return 0;
  else
    return v11;
}

uint64_t WebKit::NetworkProcessConnection::didFinishPingLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebProcess *v4;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = a3;
    v9 = a4;
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    a3 = v8;
    a4 = v9;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  return WebKit::WebLoaderStrategy::didFinishPingLoad(*((_QWORD *)v4 + 40), a2, a3, a4);
}

uint64_t WebKit::WebLoaderStrategy::didFinishPingLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = (uint64_t *)(a1 + 64);
  v7 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::take(v6, v7, &v9);
  result = v9;
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a3, a4);
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::didFinishPreconnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    a3 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  return WebKit::WebLoaderStrategy::didFinishPreconnection(*((_QWORD *)v3 + 40), a2, a3);
}

uint64_t WebKit::WebLoaderStrategy::didFinishPreconnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v4 = (uint64_t *)(a1 + 72);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 72), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::take(v4, v5, &v7);
  result = v7;
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a3);
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebKit::NetworkProcessConnection::cookieAcceptPolicyChanged(uint64_t a1, int a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v3;

  if (*(unsigned __int8 *)(a1 + 96) != a2)
  {
    *(_BYTE *)(a1 + 96) = a2;
    {
      v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v2 = WebKit::WebProcess::WebProcess(v3);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
    }
    WebKit::WebCookieCache::clear((WebKit::WebCookieCache *)(*((_QWORD *)v2 + 51) + 32));
  }
}

uint64_t WebKit::NetworkProcessConnection::cookiesAdded(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebProcess *v3;
  WebKit::WebProcess *v5;
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    a3 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  return WebKit::WebCookieJar::cookiesAdded(*((_QWORD *)v3 + 51), a2, a3);
}

uint64_t WebKit::NetworkProcessConnection::cookiesDeleted(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebProcess *v3;
  WebKit::WebProcess *v5;
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    a3 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  return WebKit::WebCookieJar::cookiesDeleted(*((_QWORD *)v3 + 51), a2, a3);
}

void WebKit::NetworkProcessConnection::allCookiesDeleted(WebKit::NetworkProcessConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v2;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v2);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  WebKit::WebCookieCache::clear((WebKit::WebCookieCache *)(*((_QWORD *)v1 + 51) + 32));
}

uint64_t WebKit::NetworkProcessConnection::updateCachedCookiesEnabled(WebKit::NetworkProcessConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return WebKit::WebProcess::updateCachedCookiesEnabled(v1);
}

unsigned int *WebKit::NetworkProcessConnection::didCacheResource(WebCore::MemoryCache *a1)
{
  uint64_t v1;
  WebKit::WebProcess *v2;
  unsigned int *result;
  WebCore::CachedResource *v4;
  void *v5;
  WebKit::WebProcess *v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  WebCore::SharedBuffer *v9;

  v1 = WebCore::MemoryCache::singleton(a1);
  v2 = (WebKit::WebProcess *)&_MergedGlobals_106;
    goto LABEL_10;
  v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (!*((_BYTE *)v2 + 672))
  {
    __break(1u);
LABEL_10:
    v8 = v1;
    v6 = v2;
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v7);
    v1 = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
    *((_BYTE *)v6 + 2488) = 1;
  }
  result = (unsigned int *)WebCore::MemoryCache::resourceForRequest();
  if (result)
  {
    v4 = (WebCore::CachedResource *)result;
    result = (unsigned int *)WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
    if (v9)
    {
      WebCore::CachedResource::tryReplaceEncodedData(v4, v9);
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v9, v5);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::idbConnectionToServer(WebKit::NetworkProcessConnection *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    WebKit::WebIDBConnectionToServer::create(&v8);
    v4 = v8;
    v8 = 0;
    v5 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v4;
    if (v5)
    {
      WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)(v5 + 24), v3);
      v7 = v8;
      v8 = 0;
      if (v7)
        WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)(v7 + 24), v6);
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::messagesAvailableForPort()
{
  WebKit::WebProcess *v1;

  {
    v1 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v1);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return WebCore::MessagePort::notifyMessageAvailable();
}

void WebKit::NetworkProcessConnection::broadcastConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;

  v9 = a2;
  v8 = a3;
  if (atomic_load(MEMORY[0x1E0DD42D8]))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E34EB138;
    v6[1] = &v9;
    v6[2] = &v8;
    v6[3] = a4;
    v7 = v6;
    WebCore::Page::forEachPage();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
}

void WebKit::NetworkProcessConnection::loadCancelledDownloadRedirectRequestInFrame(uint64_t a1, WebCore::ResourceRequestBase *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  WebCore::ResourceRequest *v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  WebKit::WebProcess *v20;
  WebKit::WebProcess *v21;
  WTF *v22;
  __int128 buf;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  CFTypeRef cf;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  __int16 v35;
  _QWORD v36[3];
  int v37;
  char v38;
  char v39;
  __int16 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  *(_QWORD *)&buf = a5;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v9 + 14, &buf);
  v11 = v10;
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v21);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    if (WebKit::WebProcess::webFrame((uint64_t)v12, a3, a4))
    {
      v26 = 0;
      buf = 0uLL;
      LOBYTE(v24) = 0;
      v13 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v27);
      v34 = 0;
      v35 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0;
      *(_DWORD *)((char *)v36 + 7) = 0;
      v36[2] = 0;
      v36[0] = 0;
      v24 = a3;
      v25 = a4;
      if (!v26)
        v26 = 1;
      WebCore::ResourceRequestBase::operator=((uint64_t)v13, (uint64_t)a2);
      v14 = (const void *)*((_QWORD *)a2 + 24);
      if (v14)
        CFRetain(v14);
      v15 = cf;
      cf = v14;
      if (v15)
        CFRelease(v15);
      WebKit::WebPage::loadRequest(v11, (uint64_t)&buf);
      WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&buf, v16);
LABEL_16:
      CFRelease(*(CFTypeRef *)(v11 + 8));
      return;
    }
  }
  v17 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    WebCore::ResourceRequestBase::url(a2);
    WTF::String::utf8();
    v18 = v22 ? (uint64_t)v22 + 16 : 0;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Trying to load Invalid page or frame for %s", (uint8_t *)&buf, 0xCu);
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree(v22, v19);
      else
        --*(_DWORD *)v22;
    }
  }
  if (v11)
    goto LABEL_16;
}

uint64_t WebKit::NetworkProcessConnection::connectToRTCDataChannelRemoteSource(WebKit::RTCDataChannelRemoteManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t v13;

  v11 = (uint64_t *)WebKit::RTCDataChannelRemoteManager::sharedManager(a1);
  v12 = WebKit::RTCDataChannelRemoteManager::connectToRemoteSource(v11, a2, a3, a4, a5);
  v13 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12 | 0x100);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebKit::WebLoaderStrategy::internallyFailedLoadTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  CFTypeRef cf;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 12);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v3 = this;
        v4 = WTF::fastMalloc((WTF *)(8 * v2));
        v6 = (WTF *)v4;
        v7 = *(_QWORD *)(v3 + 8);
        if (v7 && *(_DWORD *)(v7 - 12))
        {
          v8 = *(unsigned int *)(v7 - 4);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *(uint64_t **)(v3 + 8); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *(uint64_t **)(v3 + 8);
          }
          v11 = (uint64_t *)(v7 + 8 * v8);
          if (v11 != i)
          {
            v12 = 0;
            v13 = *i;
            v14 = 1;
LABEL_14:
            v15 = v14;
            if (v13)
              ++*(_DWORD *)(v13 + 16);
            v16 = v12 + 1;
            *(_QWORD *)(v4 + 8 * v12) = v13;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v14;
                ++v12;
                if (i != v11)
                  goto LABEL_14;
                break;
              }
            }
            if (v16)
            {
              v17 = 8 * v15;
              v18 = v4;
              do
              {
                v19 = *(_QWORD *)v18;
                WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)v18 + 336));
                WebCore::createInternalError();
                (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v19 + 240))(v19, &v27);
                v20 = cf;
                cf = 0;
                if (v20)
                  CFRelease(v20);
                v21 = v29;
                v29 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v5);
                  else
                    *(_DWORD *)v21 -= 2;
                }
                v22 = v28;
                v28 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v5);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                v23 = v27;
                v27 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2)
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v5);
                  else
                    *(_DWORD *)v23 -= 2;
                }
                v18 += 8;
                v17 -= 8;
              }
              while (v17);
              v24 = 8 * v15;
              v25 = v6;
              do
              {
                v26 = *(_DWORD **)v25;
                *(_QWORD *)v25 = 0;
                if (v26)
                {
                  if (v26[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
                  else
                    --v26[4];
                }
                v25 = (WTF *)((char *)v25 + 8);
                v24 -= 8;
              }
              while (v24);
            }
          }
        }
        return WTF::fastFree(v6, v5);
      }
    }
  }
  return this;
}

void WebKit::WebLoaderStrategy::~WebLoaderStrategy(WebKit::WebLoaderStrategy *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  _DWORD *v23;

  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 10);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, a2);
  v9 = *((_QWORD *)this + 8);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, a2);
  v10 = *((_QWORD *)this + 7);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)(v10 + 16 * i) != -1)
        {
          v13 = v10 + 16 * i;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  v17 = *((_QWORD *)this + 6);
  if (v17)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v17, a2);
  *((_QWORD *)this + 2) = off_1E34ABE00;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebLoaderStrategy *)((char *)this + 16));
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (_DWORD **)*((_QWORD *)this + 1);
      do
      {
        v23 = *v22;
        if (*v22 != (_DWORD *)-1)
        {
          *v22 = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[4];
          }
        }
        ++v22;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), v19);
  }
  WebCore::LoaderStrategy::~LoaderStrategy(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebLoaderStrategy::~WebLoaderStrategy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebLoaderStrategy::schedulePluginStreamLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  v7 = *a5;
  *a5 = 0;
  v8 = (unsigned int *)(a2 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E34EB1B0;
  v10[1] = a1;
  v10[2] = v7;
  v10[3] = a2;
  v12 = v10;
  WebCore::NetscapePlugInStreamLoader::create();
  result = (uint64_t)v12;
  if (v12)
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  return result;
}

uint64_t *WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (a2)
    CFRetain(*(CFTypeRef *)(a2 + 8));
  v4 = *a1;
  *a1 = a2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;

  v3 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[4];
  }
  return a1;
}

uint64_t WebKit::WebLoaderStrategy::scheduleInternallyFailedLoad(WebKit::WebLoaderStrategy *this, WebCore::ResourceLoader *a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  WebCore::ResourceLoader **v10;
  WebCore::ResourceLoader *v11;
  WebCore::ResourceLoader **v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;

  ++*((_DWORD *)a2 + 4);
  v4 = (uint64_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  if (v3
    || (WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::expand((uint64_t *)this + 1),
        (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (WebCore::ResourceLoader **)(v3 + 8 * v9);
  v11 = *v10;
  if (*v10)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      if (v11 == a2)
      {
        if (*((_DWORD *)a2 + 4) == 1)
          (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 8))(a2);
        else
          --*((_DWORD *)a2 + 4);
        return WTF::RunLoop::TimerBase::start();
      }
      if (v11 == (WebCore::ResourceLoader *)-1)
        v12 = v10;
      v9 = (v9 + v13) & v5;
      v10 = (WebCore::ResourceLoader **)(v3 + 8 * v9);
      v11 = *v10;
      ++v13;
    }
    while (*v10);
    if (v12)
    {
      *v12 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = v12;
    }
  }
  *v10 = a2;
  v14 = *v4;
  if (*v4)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      return WTF::RunLoop::TimerBase::start();
    goto LABEL_22;
  }
  if (3 * v19 <= 4 * v18)
LABEL_22:
    WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::expand(v4);
  return WTF::RunLoop::TimerBase::start();
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeTaskProxy&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v8 - 4);
        v31 = 0;
        v32 = v8 + 16 * v30;
        goto LABEL_37;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  if (!*(_QWORD *)(a3 + 8))
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = a3;
    v21 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v20;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  v24 = *(unsigned int **)(a3 + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v24;
  if (result)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)result);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)result));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v26 = *v6;
  if (*v6)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v33 = *v6;
  if (*v6)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
    {
LABEL_34:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v33 = *v6;
      if (*v6)
        v36 = *(unsigned int *)(v33 - 4);
      else
        v36 = 0;
    }
  }
  else if (3 * v36 <= 4 * v35)
  {
    goto LABEL_34;
  }
  v32 = v33 + 16 * v36;
  v31 = 1;
LABEL_37:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

uint64_t *WebKit::WebLoaderStrategy::removeURLSchemeTaskProxy(WebKit::WebLoaderStrategy *this, WebKit::WebURLSchemeTaskProxy *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = (uint64_t *)((char *)this + 56);
  v7 = *((_QWORD *)a2 + 30);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 7, &v7);
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

uint64_t *WTF::HashSet<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 8 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 8 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      result = *(uint64_t **)(v2 + 8 * v8);
      *(_QWORD *)(v2 + 8 * v8) = -1;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        else
          --*((_DWORD *)result + 4);
      }
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      if (*v3)
        v12 = *(_DWORD *)(v11 - 12) - 1;
      else
        v12 = -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(v3, v15 >> 1);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebLoaderStrategy::networkProcessCrashed(WebKit::WebLoaderStrategy *this)
{
  NSObject *v2;
  void *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  CFTypeRef v39;
  _OWORD buf[3];
  WTF::StringImpl *v41;
  CFTypeRef v42;
  char v43;
  CFTypeRef cf;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = this;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - WebLoaderStrategy::networkProcessCrashed: failing all pending resource loaders", (uint8_t *)buf, 0xCu);
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (!result)
  {
    v7 = 0;
    v5 = 0;
    goto LABEL_11;
  }
  v5 = *((unsigned int *)result - 1);
  v6 = (char *)result + 16 * v5;
  if (!*((_DWORD *)result - 3))
  {
    v7 = (char *)result + 16 * v5;
LABEL_11:
    v6 = (char *)result + 16 * v5;
    goto LABEL_12;
  }
  v7 = (char *)*((_QWORD *)this + 6);
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = (char *)*((_QWORD *)this + 6);
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_12:
  if (result)
    v9 = (char *)result + 16 * *((unsigned int *)result - 1);
  else
    v9 = 0;
  if (v9 != v7)
  {
    do
    {
      WebKit::WebLoaderStrategy::scheduleInternallyFailedLoad(this, *(WebCore::ResourceLoader **)(*((_QWORD *)v7 + 1) + 16));
      WebKit::WebResourceLoader::detachFromCoreLoader(*((WebKit::WebResourceLoader **)v7 + 1));
      v10 = v7 + 16;
      v7 = v6;
      if (v10 != v6)
      {
        v7 = v10;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 16;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    result = (WTF::StringImpl *)*((_QWORD *)this + 6);
  }
  if (result)
  {
    *((_QWORD *)this + 6) = 0;
    result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)result, v3);
  }
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = v11 + 16 * v12;
    if (*(_DWORD *)(v11 - 12))
    {
      v14 = v11;
      if ((_DWORD)v12)
      {
        v15 = 16 * v12;
        v14 = v11;
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 += 16;
          v15 -= 16;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_31;
          }
        }
      }
      goto LABEL_31;
    }
    v14 = v11 + 16 * v12;
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = v11 + 16 * v12;
  if (v11)
  {
LABEL_31:
    v16 = v11 + 16 * *(unsigned int *)(v11 - 4);
    goto LABEL_36;
  }
  v16 = 0;
LABEL_36:
  while (v14 != v16)
  {
    v35 = 0;
    WTF::URL::invalidate((WTF::URL *)&v35);
    WebCore::createInternalError();
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
    cf = 0;
    v45 = 0;
    v43 = v43 & 0xF1 | 4;
    (*(void (**)(_QWORD, WTF::StringImpl **, _OWORD *))(**(_QWORD **)(v14 + 8) + 16))(*(_QWORD *)(v14 + 8), &v36, buf);
    v18 = cf;
    cf = 0;
    if (v18)
      CFRelease(v18);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v17);
    v19 = v39;
    v39 = 0;
    if (v19)
      CFRelease(v19);
    v20 = v38;
    v38 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v37;
    v37 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v36;
    v36 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)result -= 2;
    }
    v23 = v14 + 16;
    v14 = v13;
    if (v23 != v13)
    {
      v14 = v23;
      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
      {
        v14 += 16;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    v26 = v24 + 16 * v25;
    if (*(_DWORD *)(v24 - 12))
    {
      v27 = v24;
      if ((_DWORD)v25)
      {
        v28 = 16 * v25;
        v27 = v24;
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 16;
          v28 -= 16;
          if (!v28)
          {
            v27 = v26;
            goto LABEL_70;
          }
        }
      }
      goto LABEL_70;
    }
    v27 = v24 + 16 * v25;
  }
  else
  {
    v27 = 0;
    v25 = 0;
  }
  v26 = v24 + 16 * v25;
  if (v24)
  {
LABEL_70:
    v29 = v24 + 16 * *(unsigned int *)(v24 - 4);
    goto LABEL_75;
  }
  v29 = 0;
LABEL_75:
  while (v27 != v29)
  {
    v36 = 0;
    WTF::URL::invalidate((WTF::URL *)&v36);
    WebCore::createInternalError();
    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v27 + 8) + 16))(*(_QWORD *)(v27 + 8), buf);
    v30 = v42;
    v42 = 0;
    if (v30)
      CFRelease(v30);
    v31 = v41;
    v41 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = (WTF::StringImpl *)*((_QWORD *)&buf[0] + 1);
    *((_QWORD *)&buf[0] + 1) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = *(WTF::StringImpl **)&buf[0];
    *(_QWORD *)&buf[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v33 -= 2;
    }
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)result -= 2;
    }
    v34 = v27 + 16;
    v27 = v26;
    if (v34 != v26)
    {
      v27 = v34;
      while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
      {
        v27 += 16;
        if (v27 == v26)
        {
          v27 = v26;
          break;
        }
      }
    }
  }
  if (v24)
    result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v24, v3);
  if (v11)
    return (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, v3);
  return result;
}

WebKit::WebLoaderStrategy::SyncLoadResult *WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult(WebKit::WebLoaderStrategy::SyncLoadResult *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebCore::ResourceResponseBase::ResourceResponseBase(this);
  *(_QWORD *)(v2 + 240) = 0;
  *(_BYTE *)(v2 + 248) = 0;
  *(_BYTE *)(v2 + 138) = *(_BYTE *)(v2 + 138) & 0xF1 | 4;
  v3 = v2 + 256;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  WTF::URL::invalidate((WTF::URL *)(v2 + 264));
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  *(_QWORD *)(v3 + 54) = 0;
  *((_BYTE *)this + 328) = 1;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  return this;
}

void WebKit::WebLoaderStrategy::tryLoadingSynchronouslyUsingURLSchemeHandler(_BYTE *a1, _QWORD *a2, uint64_t a3, WebCore::ResourceRequestBase::RequestData *a4)
{
  WebKit::WebFrame *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::URL *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16[32];
  uint64_t v17;
  uint64_t v18;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 1072))(a2) & 1) == 0
    && (v8 = (WebKit::WebFrame *)a2[2]) != 0
    && (v9 = WebKit::WebFrame::page(v8)) != 0
    && (v10 = v9,
        v11 = (WTF::URL *)WebCore::ResourceRequestBase::url(a4),
        v16[0] = WTF::URL::protocol(v11),
        v16[1] = v12,
        (v13 = WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::get<WTF::StringViewHashTranslator,WTF::StringView>((uint64_t *)(v10 + 2080), v16)) != 0))
  {
    v14 = v13;
    WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v16);
    WebKit::WebURLSchemeHandlerProxy::loadSynchronously(v14, a3, v8, a4, (uint64_t)v16, (uint64_t)&v17, (uint64_t)&v18);
    WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult((uint64_t)a1, (uint64_t)v16);
    a1[352] = 1;
    WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v16, v15);
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
}

void WebKit::WebLoaderStrategy::loadResourceSynchronously(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  WebCore::ResourceRequestBase *v15;
  WebCore::ResourceRequestBase *v16;
  const void *v17;
  WebCore::FrameLoader *v18;
  WebCore::FrameLoader *v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  char *v23;
  WebCore::Page *v24;
  WebKit::WebFrame *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  CFTypeRef *v34;
  uint64_t v35;
  WebCore::ResourceRequestBase *v36;
  NSObject *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  CFTypeRef v40;
  CFTypeRef v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  NSObject *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  const void *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  NSObject *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WebCore *Parameters;
  WebKit::WebProcess *v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  CFTypeRef v70;
  WebCore::ResourceRequestBase *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  __int128 v75;
  unsigned int *v76;
  WTF::StringImpl *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  WTF::StringImpl *v81;
  unsigned int v82;
  uint64_t v83;
  WebCore::ContentSecurityPolicy *v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  WebKit *v88;
  char *v89;
  WebKit *v90;
  unsigned int v91;
  WebKit::WebProcess *v92;
  uint64_t v93;
  WebCore::DiagnosticLoggingKeys *v94;
  WebCore::DiagnosticLoggingKeys *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  CFTypeRef v101;
  void *v102;
  CFTypeRef v103;
  WTF *v104;
  int v105;
  WTF *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  CFTypeRef v113;
  CFTypeRef v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  CFTypeRef v127;
  const void *v128;
  CFTypeRef v129;
  const void *v130;
  WTF *v131;
  WTF *v132;
  uint64_t v133;
  CFTypeRef v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  CFTypeRef v137;
  const void *v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  CFTypeRef v145;
  const void *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  CFTypeRef v153;
  const void *v154;
  void *v155;
  uint64_t v156;
  const void *v157;
  WTF *isa;
  objc_class *v159;
  unsigned int v160;
  CFTypeRef v161;
  uint64_t v162;
  int v163;
  const char *v164;
  const void *v165;
  CFTypeRef v166;
  CFTypeRef v167;
  WebKit::WebProcess *v168;
  WebKit::WebProcess *v169;
  WebCore::Page *v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  const void *v175;
  WebCore::FrameLoader *v176;
  WTF::StringImpl *v177;
  _BYTE v178[24];
  WTF *v179;
  _BYTE v180[10];
  __int16 v181;
  _BYTE v182[18];
  __int16 v183;
  CFTypeRef v184;
  __int16 v185;
  const char *v186;
  char v187;
  CFTypeRef v188;
  char v189;
  uint64_t v190;
  char v191;
  objc_class *v192;
  objc_class *v193;
  _BYTE buf[22];
  __int16 v195;
  WebCore::FrameLoader *v196;
  __int16 v197;
  WebCore::ResourceRequestBase *v198;
  __int16 v199;
  _BYTE v200[18];
  __int16 v201;
  CFTypeRef v202;
  __int16 v203;
  int v204;
  CFTypeRef v205;
  char v206;
  int v207;
  _BYTE v208[24];
  void *v209;
  _BYTE v210[52];
  char v211;
  uint64_t v212;
  char v213;
  CFTypeRef cf;
  char v215;
  WTF::StringImpl *v216;
  _QWORD v217[2];
  CFTypeRef v218;
  __int16 v219;
  BOOL v220;
  char v221;
  BOOL v222;
  WTF::StringImpl *v223[2];
  CFTypeRef v224;
  char v225;
  WTF *v226;
  uint64_t v227;
  unsigned __int8 v228;
  __int16 isTopFrameNavigatingToAppBoundDomain;
  const void *v230;
  _DWORD v231[2];
  WTF::StringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE v235[568];
  uint64_t v236;

  v10 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v175 = v17;
  v19 = v18;
  v171 = v10;
  v236 = *MEMORY[0x1E0C80C00];
  v20 = (_QWORD *)*((_QWORD *)v18 + 2);
  v173 = v21;
  v172 = v22;
  if (((*(uint64_t (**)(_QWORD *))(*v20 + 1072))(v20) & 1) != 0)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
LABEL_14:
    v32 = 0;
    v34 = 0;
    v174 = 0;
    v33 = 1;
    goto LABEL_15;
  }
  v25 = (WebKit::WebFrame *)v20[2];
  if (!v25)
  {
    v23 = 0;
    v24 = 0;
    goto LABEL_14;
  }
  v26 = *((_QWORD *)v25 + 3);
  if (v26
    && (v27 = *(_QWORD *)(v26 + 8)) != 0
    && (v28 = *(_QWORD *)(v27 + 24)) != 0
    && (v29 = *(_QWORD *)(v28 + 8)) != 0
    && (v30 = *(_QWORD **)(*(_QWORD *)(v29 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v30 + 1368))(v30) & 1) == 0)
    && (v31 = *(_QWORD **)(v30[2] + 8)) != 0)
  {
    v32 = v31[263];
    v23 = (char *)v31[3];
    v24 = (WebCore::Page *)v31[4];
  }
  else
  {
    v32 = 0;
    v24 = 0;
    v23 = 0;
  }
  v33 = 0;
  v34 = (CFTypeRef *)*((_QWORD *)v25 + 11);
  v174 = *((_QWORD *)v25 + 10);
LABEL_15:
  v176 = v19;
  v35 = *(_QWORD *)(WebCore::FrameLoader::frame(v19) + 296);
  if (!v35)
  {
    v45 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v208 = 134219520;
      *(_QWORD *)&v208[4] = v171;
      *(_WORD *)&v208[12] = 2048;
      *(_QWORD *)&v208[14] = 0;
      *(_WORD *)&v208[22] = 2048;
      v209 = v176;
      *(_WORD *)v210 = 2048;
      *(_QWORD *)&v210[2] = WebCore::FrameLoader::frame(v176);
      *(_WORD *)&v210[10] = 2048;
      *(_QWORD *)&v210[12] = v23;
      *(_WORD *)&v210[20] = 2048;
      *(_QWORD *)&v210[22] = v174;
      *(_WORD *)&v210[30] = 2048;
      *(_QWORD *)&v210[32] = v175;
      _os_log_error_impl(&dword_196BCC000, v45, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: no document", v208, 0x48u);
    }
    WebCore::ResourceRequestBase::url(v16);
    WebCore::createInternalError();
    v47 = *(_QWORD *)v208;
    *(_QWORD *)v208 = 0;
    v48 = *(WTF::StringImpl **)v12;
    *(_QWORD *)v12 = v47;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v46);
      else
        *(_DWORD *)v48 -= 2;
    }
    WTF::URL::operator=(v12 + 8, (WTF::StringImpl *)&v208[8]);
    v54 = *(_QWORD *)&v210[16];
    *(_QWORD *)&v210[16] = 0;
    v55 = *(WTF::StringImpl **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v53);
      else
        *(_DWORD *)v55 -= 2;
    }
    *(_DWORD *)(v12 + 56) = *(_DWORD *)&v210[24];
    *(_WORD *)(v12 + 60) = *(_WORD *)&v210[28];
    v56 = *(_QWORD *)&v210[32];
    *(_QWORD *)&v210[32] = 0;
    v57 = *(const void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v56;
    if (v57)
    {
      CFRelease(v57);
      v165 = *(const void **)&v210[32];
      *(_BYTE *)(v12 + 72) = v210[40];
      *(_QWORD *)&v210[32] = 0;
      if (v165)
        CFRelease(v165);
    }
    else
    {
      *(_BYTE *)(v12 + 72) = v210[40];
      *(_QWORD *)&v210[32] = 0;
    }
    v58 = *(WTF::StringImpl **)&v210[16];
    *(_QWORD *)&v210[16] = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v53);
      else
        *(_DWORD *)v58 -= 2;
    }
    v59 = *(WTF::StringImpl **)&v208[8];
    *(_QWORD *)&v208[8] = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v53);
      else
        *(_DWORD *)v59 -= 2;
    }
    v60 = *(WTF::StringImpl **)v208;
    *(_QWORD *)v208 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v53);
      else
        *(_DWORD *)v60 -= 2;
    }
    return;
  }
  WebCore::ResourceRequestBase::url(v16);
  if (WTF::URL::protocolIs())
  {
    v36 = v16;
    v37 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v208 = 134219520;
      *(_QWORD *)&v208[4] = v171;
      *(_WORD *)&v208[12] = 2048;
      *(_QWORD *)&v208[14] = 0;
      *(_WORD *)&v208[22] = 2048;
      v209 = v176;
      *(_WORD *)v210 = 2048;
      *(_QWORD *)&v210[2] = WebCore::FrameLoader::frame(v176);
      *(_WORD *)&v210[10] = 2048;
      *(_QWORD *)&v210[12] = v23;
      *(_WORD *)&v210[20] = 2048;
      *(_QWORD *)&v210[22] = v174;
      *(_WORD *)&v210[30] = 2048;
      *(_QWORD *)&v210[32] = v175;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: URL will be loaded as data", v208, 0x48u);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v208);
    cf = 0;
    v215 = 0;
    v213 = v213 & 0xF1 | 4;
    v217[0] = 0;
    v216 = 0;
    WTF::URL::invalidate((WTF::URL *)v217);
    v224 = 0;
    memset(v223, 0, 14);
    v225 = 1;
    v227 = 0;
    v226 = 0;
    WebCore::ResourceRequestBase::url(v36);
    WebCore::DataURLDecoder::decode();
    if (v180[8])
    {
      WebCore::ResourceRequestBase::url(v36);
      v38 = a9;
      WebCore::ResourceResponseBase::dataURLResponse();
      WebCore::ResourceResponseBase::operator=((uint64_t)v208, (uint64_t)buf);
      v40 = v205;
      v205 = 0;
      v41 = cf;
      cf = v40;
      v14 = a10;
      if (v41)
      {
        CFRelease(v41);
        v134 = v205;
        v215 = v206;
        v205 = 0;
        if (v134)
          CFRelease(v134);
      }
      else
      {
        v215 = v206;
        v205 = 0;
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v39);
      v43 = v226;
      if (v226)
      {
        v226 = 0;
        LODWORD(v227) = 0;
        WTF::fastFree(v43, v42);
      }
      v226 = v179;
      v44 = *(_QWORD *)v180;
      v179 = 0;
      *(_QWORD *)v180 = 0;
      v227 = v44;
    }
    else
    {
      v61 = off_1ECE713E8;
      v38 = a9;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v171;
        _os_log_impl(&dword_196BCC000, v61, OS_LOG_TYPE_DEFAULT, "%p - WebLoaderStrategy::loadDataURLSynchronously: decoding of data failed", buf, 0xCu);
      }
      WebCore::ResourceRequestBase::url(v36);
      WebCore::createInternalError();
      v63 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      v64 = v216;
      v216 = v63;
      v14 = a10;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v62);
        else
          *(_DWORD *)v64 -= 2;
      }
      WTF::URL::operator=((uint64_t)v217, (WTF::StringImpl *)&buf[8]);
      v111 = *(WTF::StringImpl **)&v200[4];
      *(_QWORD *)&v200[4] = 0;
      v112 = v223[0];
      v223[0] = v111;
      if (v112)
      {
        if (*(_DWORD *)v112 == 2)
          WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v112 -= 2;
      }
      LODWORD(v223[1]) = *(_DWORD *)&v200[12];
      WORD2(v223[1]) = *(_WORD *)&v200[16];
      v113 = v202;
      v202 = 0;
      v114 = v224;
      v224 = v113;
      if (v114)
      {
        CFRelease(v114);
        v166 = v202;
        v225 = v203;
        v202 = 0;
        if (v166)
          CFRelease(v166);
      }
      else
      {
        v225 = v203;
        v202 = 0;
      }
      v115 = *(WTF::StringImpl **)&v200[4];
      *(_QWORD *)&v200[4] = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v115 -= 2;
      }
      v116 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
          WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v116 -= 2;
      }
      v117 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
          WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v117 -= 2;
      }
    }
    if (v180[8])
    {
      v118 = v179;
      if (v179)
      {
        v179 = 0;
        *(_DWORD *)v180 = 0;
        WTF::fastFree(v118, v42);
      }
      v119 = *(WTF::StringImpl **)&v178[16];
      *(_QWORD *)&v178[16] = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
          WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v119 -= 2;
      }
      v120 = *(WTF::StringImpl **)&v178[8];
      *(_QWORD *)&v178[8] = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
          WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v120 -= 2;
      }
      v121 = *(WTF::StringImpl **)v178;
      *(_QWORD *)v178 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
          WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v121 -= 2;
      }
    }
    v122 = v216;
    v216 = 0;
    v123 = *(WTF::StringImpl **)v12;
    *(_QWORD *)v12 = v122;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v42);
      else
        *(_DWORD *)v123 -= 2;
    }
    WTF::URL::operator=(v12 + 8, (WTF::StringImpl *)v217);
    v125 = v223[0];
    v223[0] = 0;
    v126 = *(WTF::StringImpl **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v125;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
        WTF::StringImpl::destroy(v126, v124);
      else
        *(_DWORD *)v126 -= 2;
    }
    *(_DWORD *)(v12 + 56) = v223[1];
    *(_WORD *)(v12 + 60) = WORD2(v223[1]);
    v127 = v224;
    v224 = 0;
    v128 = *(const void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v127;
    if (v128)
      CFRelease(v128);
    *(_BYTE *)(v12 + 72) = v225;
    WebCore::ResourceResponseBase::operator=(v38, (uint64_t)v208);
    v129 = cf;
    cf = 0;
    v130 = *(const void **)(v38 + 240);
    *(_QWORD *)(v38 + 240) = v129;
    if (v130)
      CFRelease(v130);
    *(_BYTE *)(v38 + 248) = v215;
    v131 = *(WTF **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      WTF::fastFree(v131, v102);
    }
    goto LABEL_162;
  }
  v170 = v24;
  WebKit::WebLoaderStrategy::tryLoadingSynchronouslyUsingURLSchemeHandler(v208, *((_QWORD **)v176 + 2), (uint64_t)v175, v16);
  if (!v228)
  {
    Parameters = WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v208);
    v230 = v175;
    *(_QWORD *)v208 = v32;
    v52 = (uint64_t)v23;
    *(_QWORD *)&v208[8] = v23;
    *(_QWORD *)&v208[16] = v174;
    v209 = v34;
    *(_DWORD *)&v210[16] = WebCore::presentingApplicationPID(Parameters);
    {
      v23 = &_MergedGlobals_106;
      v66 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v168 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v66 = WebKit::WebProcess::WebProcess(v168);
      v23 = &_MergedGlobals_106;
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v66;
    }
    v34 = (CFTypeRef *)v16;
    v67 = WebKit::WebProcess::ensureNetworkProcessConnection(v66);
    v68 = *(_BYTE *)(v67 + 64);
    v69 = *(_OWORD *)(v67 + 48);
    v16 = (WebCore::ResourceRequestBase *)v208;
    *(_OWORD *)&v210[20] = *(_OWORD *)(v67 + 32);
    *(_OWORD *)&v210[36] = v69;
    v211 = v68;
    WebCore::ResourceRequestBase::operator=((uint64_t)&v212, (uint64_t)v34);
    v70 = v34[24];
    if (v70)
      CFRetain(v34[24]);
    v71 = (WebCore::ResourceRequestBase *)v218;
    v218 = v70;
    if (!v71)
      goto LABEL_64;
    goto LABEL_217;
  }
  v14 = (char *)off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
  {
    v52 = (uint64_t)v176;
    v71 = (WebCore::ResourceRequestBase *)WebCore::FrameLoader::frame(v176);
    if (!v228)
      goto LABEL_216;
    v16 = v71;
    MEMORY[0x19AEB7BFC](&v216);
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = v171;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 0;
    v195 = 2048;
    v196 = v176;
    v197 = 2048;
    v198 = v16;
    v199 = 2048;
    *(_QWORD *)v200 = v23;
    *(_WORD *)&v200[8] = 2048;
    *(_QWORD *)&v200[10] = v174;
    v201 = 2048;
    v202 = v175;
    v203 = 1024;
    v204 = (int)v223[1];
    _os_log_error_impl(&dword_196BCC000, (os_log_t)v14, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: failed calling tryLoadingSynchronouslyUsingURLSchemeHandler (error=%d)", buf, 0x4Eu);
    if (!v228)
      goto LABEL_216;
  }
  v50 = v216;
  v216 = 0;
  v51 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = v50;
  v14 = a10;
  v52 = a9;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v49);
    else
      *(_DWORD *)v51 -= 2;
  }
  WTF::URL::operator=(v12 + 8, (WTF::StringImpl *)v217);
  v99 = v223[0];
  v223[0] = 0;
  v100 = *(WTF::StringImpl **)(v12 + 48);
  *(_QWORD *)(v12 + 48) = v99;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, v98);
    else
      *(_DWORD *)v100 -= 2;
  }
  *(_DWORD *)(v12 + 56) = v223[1];
  *(_WORD *)(v12 + 60) = WORD2(v223[1]);
  v101 = v224;
  v224 = 0;
  v71 = *(WebCore::ResourceRequestBase **)(v12 + 64);
  *(_QWORD *)(v12 + 64) = v101;
  if (v71)
    CFRelease(v71);
  *(_BYTE *)(v12 + 72) = v225;
  if (!v228)
    goto LABEL_216;
  WebCore::ResourceResponseBase::operator=(a9, (uint64_t)v208);
  v103 = cf;
  cf = 0;
  v71 = *(WebCore::ResourceRequestBase **)(a9 + 240);
  *(_QWORD *)(a9 + 240) = v103;
  if (v71)
    CFRelease(v71);
  *(_BYTE *)(a9 + 248) = v215;
  if (!v228)
  {
LABEL_216:
    __break(1u);
LABEL_217:
    CFRelease(v71);
LABEL_64:
    v219 = 0;
    v220 = v14[2] != 0;
    v221 = v172;
    if ((v33 & 1) == 0
      && (v72 = *((_QWORD *)v25 + 3)) != 0
      && (v73 = *(_QWORD *)(v72 + 8)) != 0
      && !*(_BYTE *)(v73 + 144)
      && (v71 = *(WebCore::ResourceRequestBase **)(v73 + 296)) != 0)
    {
      v71 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v71 + 24) + 8))((_QWORD *)v71 + 24);
      v74 = (_DWORD)v71 == 2;
    }
    else
    {
      v74 = 1;
    }
    v222 = v74;
    v235[16] = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v71) + 22);
    *(_DWORD *)((char *)v231 + 3) = *(_DWORD *)(v14 + 3);
    v231[0] = *(_DWORD *)v14;
    WTF::String::operator=(&v232, (WTF::StringImpl *)(v14 + 8));
    v75 = *((_OWORD *)v14 + 2);
    *((_OWORD *)v16 + 188) = *((_OWORD *)v14 + 1);
    *((_OWORD *)v16 + 189) = v75;
    v76 = (unsigned int *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v35 + 192));
    if (v76)
    {
      do
        v78 = __ldaxr(v76);
      while (__stlxr(v78 + 1, v76));
    }
    v79 = *(_QWORD *)&v210[8];
    *(_QWORD *)&v210[8] = v76;
    if (v79)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v79, v77);
    v80 = (unsigned int *)WebCore::Document::topOrigin((WebCore::Document *)v35);
    do
      v82 = __ldaxr(v80);
    while (__stlxr(v82 + 1, v80));
    v83 = *(_QWORD *)v210;
    *(_QWORD *)v210 = v80;
    if (v83)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v83, v81);
    if ((WebCore::Document::shouldBypassMainWorldContentSecurityPolicy((WebCore::Document *)v35) & 1) == 0)
    {
      v84 = (WebCore::ContentSecurityPolicy *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v35 + 192));
      if (v84)
      {
        WebCore::ContentSecurityPolicy::responseHeaders(v84);
        std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)&v233, (uint64_t *)buf);
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v85);
      }
    }
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((uint64_t)&v234, v173);
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((uint64_t)v235, v173 + 16);
    if ((v33 & 1) == 0)
      isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(v25);
    v86 = *((_QWORD *)v25 + 3);
    v87 = a10;
    if (v86)
    {
      v88 = *(WebKit **)(v86 + 8);
      v89 = &_MergedGlobals_106;
      if (!v88)
        goto LABEL_235;
      if (*((_BYTE *)v88 + 144))
        v90 = 0;
      else
        v90 = v88;
    }
    else
    {
      v90 = 0;
      v89 = &_MergedGlobals_106;
    }
    while (1)
    {
      WebKit::addParametersShared(v90, (const WebCore::LocalFrame *)v208, 0);
      HIDWORD(v87[1].isa) = 0;
      do
        v91 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
      while (__stlxr(v91 + 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
      if (v89[2488] == 1)
      {
        v92 = (WebKit::WebProcess *)*((_QWORD *)v23 + 310);
      }
      else
      {
        v169 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v92 = WebKit::WebProcess::WebProcess(v169);
        *((_QWORD *)v23 + 310) = v92;
        v89[2488] = 1;
      }
      v93 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v92) + 24);
      *(_QWORD *)v178 = v208;
      IPC::Connection::sendSync<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>((uint64_t)buf, v93, (uint64_t **)v178);
      if (!v207)
        break;
      v87 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
        goto LABEL_93;
      v162 = WebCore::FrameLoader::frame(v176);
      if (!v207)
      {
        v163 = 0;
        goto LABEL_224;
      }
      if (v207 == 1)
      {
        v163 = buf[0];
LABEL_224:
        v164 = IPC::errorAsString(v163);
        *(_DWORD *)v178 = 134219778;
        *(_QWORD *)&v178[4] = v171;
        *(_WORD *)&v178[12] = 2048;
        *(_QWORD *)&v178[14] = 0;
        *(_WORD *)&v178[22] = 2048;
        v179 = v176;
        *(_WORD *)v180 = 2048;
        *(_QWORD *)&v180[2] = v162;
        v181 = 2048;
        *(_QWORD *)v182 = v52;
        *(_WORD *)&v182[8] = 2048;
        *(_QWORD *)&v182[10] = v174;
        v183 = 2048;
        v184 = v175;
        v185 = 2082;
        v186 = v164;
        _os_log_error_impl(&dword_196BCC000, v87, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: failed sending synchronous network process message %{public}s", v178, 0x52u);
LABEL_93:
        if (v170)
        {
          v94 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(v170);
          v95 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey(v94);
          WebCore::DiagnosticLoggingKeys::synchronousMessageFailedKey(v95);
          (**(void (***)(WebCore::DiagnosticLoggingKeys *, _BYTE *, WTF::StringImpl **, _QWORD))v94)(v94, v178, &v177, 0);
          v97 = v177;
          v177 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
              WTF::StringImpl::destroy(v97, v96);
            else
              *(_DWORD *)v97 -= 2;
          }
          v135 = *(WTF::StringImpl **)v178;
          *(_QWORD *)v178 = 0;
          if (v135)
          {
            if (*(_DWORD *)v135 == 2)
              WTF::StringImpl::destroy(v135, v96);
            else
              *(_DWORD *)v135 -= 2;
          }
        }
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v178);
        v188 = 0;
        v189 = 0;
        v187 = v187 & 0xF1 | 4;
        WebCore::ResourceResponseBase::operator=(a9, (uint64_t)v178);
        v137 = v188;
        v188 = 0;
        v138 = *(const void **)(a9 + 240);
        *(_QWORD *)(a9 + 240) = v137;
        if (v138)
        {
          CFRelease(v138);
          v161 = v188;
          *(_BYTE *)(a9 + 248) = v189;
          v188 = 0;
          if (v161)
            CFRelease(v161);
        }
        else
        {
          *(_BYTE *)(a9 + 248) = v189;
          v188 = 0;
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v178, v136);
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v34);
        WebCore::createInternalError();
        v140 = *(_QWORD *)v178;
        *(_QWORD *)v178 = 0;
        v141 = *(WTF::StringImpl **)v12;
        *(_QWORD *)v12 = v140;
        if (v141)
        {
          if (*(_DWORD *)v141 == 2)
            WTF::StringImpl::destroy(v141, v139);
          else
            *(_DWORD *)v141 -= 2;
        }
        WTF::URL::operator=(v12 + 8, (WTF::StringImpl *)&v178[8]);
        v143 = *(_QWORD *)&v182[4];
        *(_QWORD *)&v182[4] = 0;
        v144 = *(WTF::StringImpl **)(v12 + 48);
        *(_QWORD *)(v12 + 48) = v143;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
            WTF::StringImpl::destroy(v144, v142);
          else
            *(_DWORD *)v144 -= 2;
        }
        *(_DWORD *)(v12 + 56) = *(_DWORD *)&v182[12];
        *(_WORD *)(v12 + 60) = *(_WORD *)&v182[16];
        v145 = v184;
        v184 = 0;
        v146 = *(const void **)(v12 + 64);
        *(_QWORD *)(v12 + 64) = v145;
        if (v146)
        {
          CFRelease(v146);
          v167 = v184;
          *(_BYTE *)(v12 + 72) = v185;
          v184 = 0;
          if (v167)
            CFRelease(v167);
        }
        else
        {
          *(_BYTE *)(v12 + 72) = v185;
          v184 = 0;
        }
        v147 = *(WTF::StringImpl **)&v182[4];
        *(_QWORD *)&v182[4] = 0;
        if (v147)
        {
          if (*(_DWORD *)v147 == 2)
            WTF::StringImpl::destroy(v147, v142);
          else
            *(_DWORD *)v147 -= 2;
        }
        v148 = *(WTF::StringImpl **)&v178[8];
        *(_QWORD *)&v178[8] = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 2)
            WTF::StringImpl::destroy(v148, v142);
          else
            *(_DWORD *)v148 -= 2;
        }
        v149 = *(WTF::StringImpl **)v178;
        *(_QWORD *)v178 = 0;
        if (v149)
        {
          if (*(_DWORD *)v149 == 2)
            WTF::StringImpl::destroy(v149, v142);
          else
            *(_DWORD *)v149 -= 2;
        }
        goto LABEL_209;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_235:
      v90 = 0;
    }
    IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::takeReply((uint64_t)v178, (uint64_t)buf);
    v109 = *(_QWORD *)v178;
    *(_QWORD *)v178 = 0;
    v110 = *(WTF::StringImpl **)v12;
    *(_QWORD *)v12 = v109;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v108);
      else
        *(_DWORD *)v110 -= 2;
    }
    WTF::URL::operator=(v12 + 8, (WTF::StringImpl *)&v178[8]);
    v151 = *(_QWORD *)&v182[4];
    *(_QWORD *)&v182[4] = 0;
    v152 = *(WTF::StringImpl **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v151;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
        WTF::StringImpl::destroy(v152, v150);
      else
        *(_DWORD *)v152 -= 2;
    }
    *(_DWORD *)(v12 + 56) = *(_DWORD *)&v182[12];
    *(_WORD *)(v12 + 60) = *(_WORD *)&v182[16];
    v153 = v184;
    v184 = 0;
    v154 = *(const void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v153;
    if (v154)
      CFRelease(v154);
    *(_BYTE *)(v12 + 72) = v185;
    WebCore::ResourceResponseBase::operator=(a9, (uint64_t)&v186 + 6);
    v156 = v190;
    v190 = 0;
    v157 = *(const void **)(a9 + 240);
    *(_QWORD *)(a9 + 240) = v156;
    if (v157)
      CFRelease(v157);
    *(_BYTE *)(a9 + 248) = v191;
    isa = v87->isa;
    if (v87->isa)
    {
      v87->isa = 0;
      LODWORD(v87[1].isa) = 0;
      WTF::fastFree(isa, v155);
    }
    v87->isa = v192;
    v159 = v193;
    v192 = 0;
    v193 = 0;
    v87[1].isa = v159;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v178, v155);
LABEL_209:
    if (v207 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34EB098[v207])(v178, buf);
    do
      v160 = __ldaxr((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount);
    while (__stlxr(v160 - 1, (unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount));
    WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v208, v142);
    return;
  }
  v104 = *(WTF **)a10;
  if (!*(_QWORD *)a10)
  {
LABEL_162:
    v132 = v226;
    v226 = 0;
    *(_QWORD *)v14 = v132;
    v133 = v227;
    v227 = 0;
    *((_QWORD *)v14 + 1) = v133;
    goto LABEL_163;
  }
  *(_QWORD *)a10 = 0;
  *((_DWORD *)a10 + 2) = 0;
  WTF::fastFree(v104, v102);
  v105 = v228;
  v106 = v226;
  v226 = 0;
  *(_QWORD *)a10 = v106;
  v107 = v227;
  v227 = 0;
  *((_QWORD *)a10 + 1) = v107;
  if (v105)
LABEL_163:
    WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v208, v102);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  void *v6;
  int v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12[44];
  char v13;
  IPC::Decoder *v14;
  int v15;
  IPC::Encoder *v16;
  uint64_t v17;

  v17 = 0;
  IPC::Connection::createSyncMessageEncoder(3525, 0, &v17, (uint64_t *)&v16);
  IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v16, *a3);
  IPC::Connection::sendSyncMessage(a2, v17, (uint64_t *)&v16, 0, (uint64_t)&v14, INFINITY);
  if (!v15)
  {
    LOBYTE(v12[0]) = 0;
    v13 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v14, (uint64_t)v12);
    if (!v13)
    {
      *(_BYTE *)a1 = 13;
      *(_DWORD *)(a1 + 360) = 1;
      goto LABEL_6;
    }
    if (!v15)
    {
      IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::ConnectionSendSyncResult(a1, &v14, v12);
      if (v13)
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v12, v6);
LABEL_6:
      v7 = v15;
      if (v15 == -1)
        goto LABEL_8;
      goto LABEL_7;
    }
LABEL_14:
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::takeReply(v11);
  }
  if (v15 != 1)
    goto LABEL_14;
  *(_BYTE *)a1 = (_BYTE)v14;
  v7 = 1;
  *(_DWORD *)(a1 + 360) = 1;
LABEL_7:
  ((void (*)(uint64_t *, IPC::Decoder **))off_1E34EB218[v7])(v12, &v14);
LABEL_8:
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::takeReply(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!*(_DWORD *)(a2 + 360))
    return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(a1, (uint64_t *)(a2 + 8));
  v3 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebLoaderStrategy::startPingLoad(v3);
}

void WebKit::WebLoaderStrategy::startPingLoad(uint64_t a1, WebKit *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v14;
  WebKit::WebFrame *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  const void *v23;
  CFTypeRef v24;
  unsigned int *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  WTF *v28;
  unsigned int *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF *v32;
  WebKit::WebProcess *v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  WebCore::DeprecatedGlobalSettings *v38;
  BOOL v39;
  WebCore::ContentSecurityPolicy *v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  WTF::StringImpl *v65;
  CFTypeRef v66;
  WTF::StringImpl *v67;
  CFTypeRef v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  CFTypeRef v71;
  WTF::StringImpl *v72;
  CFTypeRef v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  WebKit::WebProcess *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  IPC::Encoder *v87;
  WTF *v88;
  void *v89;
  WebKit::WebProcess *v90;
  WebKit::WebProcess *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  CFTypeRef v96;
  WebKit::WebFrame *v97;
  uint64_t v98[2];
  __int128 v99;
  WTF *v100;
  WTF *v101;
  int v102;
  __int128 v103;
  __int128 v104;
  char v105;
  uint64_t v106;
  char v107;
  CFTypeRef cf;
  char v109;
  CFTypeRef v110;
  BOOL v111;
  BOOL v112;
  __int16 isTopFrameNavigatingToAppBoundDomain;
  uint64_t v114;
  _DWORD v115[2];
  WTF::StringImpl *v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  _BYTE v124[496];
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v97);
  v14 = *((_QWORD *)a2 + 37);
  if (v14)
  {
    *(_DWORD *)(v14 + 24) += 2;
    v15 = v97;
    if (v97)
    {
      v16 = *((_QWORD *)v97 + 3);
      if (!v16
        || (v17 = *(_QWORD *)(v16 + 8)) == 0
        || (v18 = *(_QWORD *)(v17 + 24)) == 0
        || (v19 = *(_QWORD *)(v18 + 8)) == 0
        || (v20 = *(_QWORD **)(*(_QWORD *)(v19 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v20 + 1368))(v20) & 1) != 0)
        || (v21 = *(_QWORD **)(v20[2] + 8)) == 0)
      {
        if (*a7)
        {
          WebCore::ResourceRequestBase::url(a3);
          WebCore::createInternalError();
          WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v98);
          cf = 0;
          v109 = 0;
          v107 = v107 & 0xF1 | 4;
          (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)*a7 + 16))(*a7, &v93, v98);
          v66 = cf;
          cf = 0;
          if (v66)
            CFRelease(v66);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v98, v65);
          v68 = v96;
          v96 = 0;
          if (v68)
            CFRelease(v68);
          v69 = v95;
          v95 = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v67);
            else
              *(_DWORD *)v69 -= 2;
          }
          v75 = v94;
          v94 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v67);
            else
              *(_DWORD *)v75 -= 2;
          }
          v76 = v93;
          v93 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
              WTF::StringImpl::destroy(v76, v67);
            else
              *(_DWORD *)v76 -= 2;
          }
        }
        goto LABEL_100;
      }
      v92 = a1;
      CFRetain((CFTypeRef)*(v21 - 1));
      WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v98);
      v114 = WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v22 = v21[3];
      v98[0] = v21[263];
      v98[1] = v22;
      v99 = *((_OWORD *)v15 + 5);
      WebCore::ResourceRequestBase::operator=((uint64_t)&v106, (uint64_t)a3);
      v23 = (const void *)*((_QWORD *)a3 + 24);
      if (v23)
        CFRetain(v23);
      v24 = v110;
      v110 = v23;
      if (v24)
        CFRelease(v24);
      v25 = (unsigned int *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v14 + 192));
      if (v25)
      {
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 + 1, v25));
      }
      v28 = v101;
      v101 = (WTF *)v25;
      if (v28)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v28, v26);
      v29 = (unsigned int *)WebCore::Document::topOrigin((WebCore::Document *)v14);
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 + 1, v29));
      v32 = v100;
      v100 = (WTF *)v29;
      if (v32)
        v29 = (unsigned int *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v32, v30);
      v102 = WebCore::presentingApplicationPID((WebCore *)v29);
      {
        v33 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v90 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v33 = WebKit::WebProcess::WebProcess(v90);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v33;
      }
      v34 = WebKit::WebProcess::ensureNetworkProcessConnection(v33);
      v35 = *(_BYTE *)(v34 + 64);
      v36 = *(_OWORD *)(v34 + 48);
      v103 = *(_OWORD *)(v34 + 32);
      v104 = v36;
      v105 = v35;
      v111 = *(_BYTE *)(a5 + 2) != 0;
      *(_DWORD *)((char *)v115 + 3) = *(_DWORD *)(a5 + 3);
      v115[0] = *(_DWORD *)a5;
      WTF::String::operator=(&v116, (WTF::StringImpl *)(a5 + 8));
      v37 = *(_OWORD *)(a5 + 32);
      v117 = *(_OWORD *)(a5 + 16);
      v118 = v37;
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((uint64_t)&v123, a4);
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((uint64_t)v124, a4 + 16);
      v38 = (WebCore::DeprecatedGlobalSettings *)*((_QWORD *)a2 + 37);
      if (v38)
      {
        v38 = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v38 + 24) + 8))((_QWORD *)v38 + 24);
        v39 = (_DWORD)v38 == 2;
      }
      else
      {
        v39 = 1;
      }
      v112 = v39;
      v124[16] = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v38) + 22);
      if (a6 == 1 && (WebCore::Document::shouldBypassMainWorldContentSecurityPolicy((WebCore::Document *)v14) & 1) == 0)
      {
        v40 = (WebCore::ContentSecurityPolicy *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v14 + 192));
        if (v40)
        {
          WebCore::ContentSecurityPolicy::responseHeaders(v40);
          std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)&v119, (uint64_t *)&v93);
          WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v93, v41);
        }
      }
      WebKit::addParametersShared(a2, (const WebCore::LocalFrame *)v98, 0);
      isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(v97);
      WTF::String::operator=(&v120, (WTF::StringImpl *)(v14 + 736));
      v42 = *(_OWORD *)(v14 + 744);
      v122 = *(_OWORD *)(v14 + 760);
      v121 = v42;
      v43 = *(_QWORD *)(v14 + 528);
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + 8);
        if (v44)
        {
          v45 = *(_QWORD *)(v44 + 24);
          if (v45)
          {
            v46 = *(_OWORD **)(v45 + 8);
            if (v46)
            {
              WTF::String::operator=(&v125, (WTF::StringImpl *)((char *)v46 + 168));
              v47 = v46[12];
              v126 = v46[11];
              v127 = v47;
            }
          }
        }
      }
      v48 = *(_QWORD *)(v21[76] + 64);
      if (!v129)
        v129 = 1;
      v128 = v48;
      if (*a7)
      {
        v50 = (uint64_t *)(a1 + 64);
        v49 = *(_QWORD *)(v92 + 64);
        if (v49
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(v92 + 64)),
              (v49 = *v50) != 0))
        {
          v51 = *(_DWORD *)(v49 - 8);
        }
        else
        {
          v51 = 0;
        }
        v52 = v114;
        v53 = (v114 + ~(v114 << 32)) ^ ((unint64_t)(v114 + ~(v114 << 32)) >> 22);
        v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
        v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
        v56 = v51 & ((v55 >> 31) ^ v55);
        v57 = (uint64_t *)(v49 + 16 * v56);
        v58 = *v57;
        if (*v57)
        {
          v59 = 0;
          v60 = 1;
          while (v58 != v114)
          {
            if (v58 == -1)
              v59 = v57;
            v56 = (v56 + v60) & v51;
            v57 = (uint64_t *)(v49 + 16 * v56);
            v58 = *v57;
            ++v60;
            if (!*v57)
            {
              if (v59)
              {
                *v59 = 0;
                v59[1] = 0;
                --*(_DWORD *)(*v50 - 16);
                v52 = v114;
                v57 = v59;
              }
              goto LABEL_48;
            }
          }
          goto LABEL_95;
        }
LABEL_48:
        *v57 = v52;
        v61 = *a7;
        *a7 = 0;
        v62 = v57[1];
        v57[1] = v61;
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
        v63 = *v50;
        if (*v50)
          v64 = *(_DWORD *)(v63 - 12) + 1;
        else
          v64 = 1;
        *(_DWORD *)(v63 - 12) = v64;
        v79 = *v50;
        if (*v50)
          v80 = *(_DWORD *)(v79 - 12);
        else
          v80 = 0;
        v81 = (*(_DWORD *)(v79 - 16) + v80);
        v82 = *(unsigned int *)(v79 - 4);
        if (v82 > 0x400)
        {
          if (v82 > 2 * v81)
            goto LABEL_95;
          goto LABEL_94;
        }
        if (3 * v82 <= 4 * v81)
LABEL_94:
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v50);
      }
LABEL_95:
      {
        v83 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v91 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v83 = WebKit::WebProcess::WebProcess(v91);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v83;
      }
      v84 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v83) + 24);
      v85 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v85 = 236;
      *(_QWORD *)(v85 + 8) = 0;
      *(_QWORD *)(v85 + 528) = v85 + 16;
      *(_QWORD *)(v85 + 536) = v85 + 16;
      *(_OWORD *)(v85 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v85 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v85);
      v93 = (WTF::StringImpl *)v85;
      IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode((IPC::Encoder *)v85, v98);
      IPC::Connection::sendMessageImpl(v84, (uint64_t *)&v93, 0, 0);
      v87 = v93;
      v93 = 0;
      if (v87)
      {
        IPC::Encoder::~Encoder(v87, v86);
        WTF::fastFree(v88, v89);
      }
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v98, (WTF::StringImpl *)v86);
      CFRelease((CFTypeRef)*(v21 - 1));
LABEL_100:
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      goto LABEL_102;
    }
  }
  if (*a7)
  {
    WebCore::ResourceRequestBase::url(a3);
    WebCore::createInternalError();
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v98);
    cf = 0;
    v109 = 0;
    v107 = v107 & 0xF1 | 4;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)*a7 + 16))(*a7, &v93, v98);
    v71 = cf;
    cf = 0;
    if (v71)
      CFRelease(v71);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v98, v70);
    v73 = v96;
    v96 = 0;
    if (v73)
      CFRelease(v73);
    v74 = v95;
    v95 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v72);
      else
        *(_DWORD *)v74 -= 2;
    }
    v77 = v94;
    v94 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v72);
      else
        *(_DWORD *)v77 -= 2;
    }
    v78 = v93;
    v93 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v72);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (v14)
    goto LABEL_100;
LABEL_102:
  if (v97)
    CFRelease(*((CFTypeRef *)v97 + 1));
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

void WebKit::WebLoaderStrategy::preconnectTo(uint64_t a1, uint64_t a2, const WTF::URL *a3, char a4, int a5, WTF::StringImpl **a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  const void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::RefCountedBase *v34;
  WTF::RefCountedBase *v35;
  CFTypeRef v36;
  CFTypeRef v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WebCore::Document *v43;
  const WTF::URL *v44;
  WTF::StringImpl *v45;
  WebKit::WebProcess *v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  const WebCore::LocalFrame *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  WebKit::WebProcess *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  IPC::Encoder *v77;
  WTF *v78;
  void *v79;
  CFTypeRef v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WebKit::WebProcess *v83;
  WebKit::WebProcess *v84;
  _BYTE v85[152];
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::RefCountedBase *v88;
  uint64_t v89;
  char v90;
  CFTypeRef cf;
  WTF::StringImpl *v92;
  char v93;
  IPC::Encoder *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  __int128 v97;
  _BYTE v98[36];
  char v99;
  _BYTE v100[152];
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::RefCountedBase *v103;
  uint64_t v104;
  char v105;
  CFTypeRef v106;
  char v107;
  char v108;
  __int16 isTopFrameNavigatingToAppBoundDomain;
  __int16 v110;
  WebCore *v111;
  char v112;
  char v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD **)(a2 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v11 + 1072))(v11))
  {
    if (!*a6)
      return;
LABEL_19:
    WebCore::createInternalError();
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)*a6 + 16))(*a6, &v95);
    v25 = *(const void **)&v98[16];
    *(_QWORD *)&v98[16] = 0;
    if (v25)
      CFRelease(v25);
    v26 = *(WTF::StringImpl **)v98;
    *(_QWORD *)v98 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v96;
    v96 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v24);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v95;
    v95 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v24);
      else
        *(_DWORD *)v28 -= 2;
    }
    return;
  }
  v12 = v11[2];
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13
    || (v14 = *(_QWORD *)(v13 + 8)) == 0
    || (v15 = *(_QWORD *)(v14 + 24)) == 0
    || (v16 = *(_QWORD *)(v15 + 8)) == 0
    || (v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) != 0)
    || (v18 = *(_QWORD *)(v17[2] + 8)) == 0)
  {
    if (!*a6)
      return;
    goto LABEL_19;
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v85, a3, 0);
  cf = 0;
  if (*(_QWORD *)(v18 + 32))
  {
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v85);
    if ((WebCore::Page::allowsLoadFromURL() & 1) == 0)
    {
      if (*a6)
      {
        v95 = 0;
        v96 = 0;
        WTF::URL::invalidate((WTF::URL *)&v96);
        *(_QWORD *)&v98[16] = 0;
        *(_QWORD *)v98 = 0;
        *(_QWORD *)&v98[6] = 0;
        v98[24] = 1;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)*a6 + 16))(*a6, &v95);
        v30 = *(const void **)&v98[16];
        *(_QWORD *)&v98[16] = 0;
        if (v30)
          CFRelease(v30);
        v31 = *(WTF::StringImpl **)v98;
        *(_QWORD *)v98 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v29);
          else
            *(_DWORD *)v31 -= 2;
        }
        v81 = v96;
        v96 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v29);
          else
            *(_DWORD *)v81 -= 2;
        }
        v82 = v95;
        v95 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v29);
          else
            *(_DWORD *)v82 -= 2;
        }
      }
      goto LABEL_101;
    }
    v19 = *(_QWORD *)(v18 + 32);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 160);
      if (v20)
      {
        if (!*(_BYTE *)(v20 + 144))
        {
          v43 = *(WebCore::Document **)(v20 + 296);
          if (v43)
          {
            v44 = a5
                ? (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v85)
                : (WebCore::Document *)((char *)v43 + 1008);
            WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v85, v44);
            if (WebCore::Document::loader(v43))
              WebCore::ResourceRequestBase::setIsAppInitiated((WebCore::ResourceRequestBase *)v85);
          }
        }
      }
    }
  }
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v95);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v100, (uint64_t)v85);
  v22 = v86;
  v86 = 0;
  v23 = v101;
  v101 = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v32 = v87;
  v87 = 0;
  v33 = v102;
  v102 = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v21);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v88;
  v88 = 0;
  v35 = v103;
  v103 = v34;
  if (v35)
    WTF::RefCounted<WebCore::FormData>::deref(v35);
  v104 = v89;
  v105 = v90;
  v36 = cf;
  cf = 0;
  v37 = v106;
  v106 = v36;
  if (v37)
    CFRelease(v37);
  WebCore::ResourceRequestBase::httpUserAgent((WebCore::ResourceRequestBase *)v100);
  v39 = v92;
  if (v92)
  {
    v40 = *((_DWORD *)v92 + 1);
    v92 = 0;
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::destroy(v39, v38);
      if (v40)
        goto LABEL_64;
    }
    else
    {
      *(_DWORD *)v39 -= 2;
      if (v40)
        goto LABEL_64;
    }
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v100);
  WebKit::WebPage::userAgent((WTF::StringImpl **)(v18 - 16), &v92);
  v42 = v92;
  if (v92)
  {
    if (*((_DWORD *)v92 + 1))
    {
      WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v100, (const WTF::String *)&v92);
      v42 = v92;
      v92 = 0;
      if (!v42)
        goto LABEL_64;
    }
    else
    {
      v92 = 0;
    }
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
LABEL_64:
  v111 = (WebCore *)WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v45 = *(WTF::StringImpl **)(v18 + 24);
  v95 = *(WTF::StringImpl **)(v18 + 2104);
  v96 = v45;
  v97 = *(_OWORD *)(v12 + 80);
  *(_DWORD *)v98 = WebCore::presentingApplicationPID(v111);
  {
    v46 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v83 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v46 = WebKit::WebProcess::WebProcess(v83);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v46;
  }
  v47 = WebKit::WebProcess::ensureNetworkProcessConnection(v46);
  v48 = *(_BYTE *)(v47 + 64);
  v49 = *(_OWORD *)(v47 + 48);
  *(_OWORD *)&v98[4] = *(_OWORD *)(v47 + 32);
  *(_OWORD *)&v98[20] = v49;
  v99 = v48;
  v107 = a4;
  v108 = 1;
  v113 = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)v47) + 22);
  v112 = 0;
  isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain((WebKit::WebFrame *)v12);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 144))
    v50 = 0;
  else
    v50 = *(const WebCore::LocalFrame **)(*(_QWORD *)(v12 + 24) + 8);
  WebKit::policySourceDocumentLoaderForFrame((unsigned int *)&v92, v50);
  v51 = v92;
  if (v92)
  {
    v110 = *((_WORD *)v92 + 1757);
    v92 = 0;
    if (*((_DWORD *)v51 + 6) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v51 + 24))(v51);
    else
      --*((_DWORD *)v51 + 6);
  }
  LOBYTE(v92) = 0;
  v93 = 0;
  if (!*a6)
    goto LABEL_96;
  v52 = v111;
  v93 = 1;
  v92 = v111;
  v55 = *(_QWORD *)(a1 + 72);
  v54 = (uint64_t *)(a1 + 72);
  v53 = v55;
  if (v55
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v54),
        (v53 = *v54) != 0))
  {
    v56 = *(_DWORD *)(v53 - 8);
  }
  else
  {
    v56 = 0;
  }
  v57 = ((unint64_t)v52 + ~((_QWORD)v52 << 32)) ^ (((unint64_t)v52 + ~((_QWORD)v52 << 32)) >> 22);
  v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
  v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
  v60 = v56 & ((v59 >> 31) ^ v59);
  v61 = (WTF::StringImpl **)(v53 + 16 * v60);
  v62 = *v61;
  if (*v61)
  {
    v63 = 0;
    v64 = 1;
    while (v62 != v52)
    {
      if (v62 == (WTF::StringImpl *)-1)
        v63 = v61;
      v60 = (v60 + v64) & v56;
      v61 = (WTF::StringImpl **)(v53 + 16 * v60);
      v62 = *v61;
      ++v64;
      if (!*v61)
      {
        if (v63)
        {
          *v63 = 0;
          v63[1] = 0;
          --*(_DWORD *)(*v54 - 16);
          v52 = v92;
          v61 = v63;
        }
        goto LABEL_85;
      }
    }
    goto LABEL_96;
  }
LABEL_85:
  *v61 = v52;
  v65 = *a6;
  *a6 = 0;
  v66 = v61[1];
  v61[1] = v65;
  if (v66)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v66 + 8))(v66);
  v67 = *v54;
  if (*v54)
    v68 = *(_DWORD *)(v67 - 12) + 1;
  else
    v68 = 1;
  *(_DWORD *)(v67 - 12) = v68;
  v69 = *v54;
  if (*v54)
    v70 = *(_DWORD *)(v69 - 12);
  else
    v70 = 0;
  v71 = (*(_DWORD *)(v69 - 16) + v70);
  v72 = *(unsigned int *)(v69 - 4);
  if (v72 > 0x400)
  {
    if (v72 > 2 * v71)
      goto LABEL_96;
    goto LABEL_95;
  }
  if (3 * v72 <= 4 * v71)
LABEL_95:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v54);
LABEL_96:
  {
    v73 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v84 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v73 = WebKit::WebProcess::WebProcess(v84);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v73;
  }
  v74 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v73) + 24);
  v75 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v75 = 247;
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v75 + 528) = v75 + 16;
  *(_QWORD *)(v75 + 536) = v75 + 16;
  *(_OWORD *)(v75 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v75 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v75);
  v94 = (IPC::Encoder *)v75;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v75, (uint64_t *)&v92);
  IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode((IPC::Encoder *)v75, (uint64_t *)&v95);
  IPC::Connection::sendMessageImpl(v74, (uint64_t *)&v94, 0, 0);
  v77 = v94;
  v94 = 0;
  if (v77)
  {
    IPC::Encoder::~Encoder(v77, v76);
    WTF::fastFree(v78, v79);
  }
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v95, (WTF::StringImpl *)v76);
LABEL_101:
  v80 = cf;
  cf = 0;
  if (v80)
    CFRelease(v80);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v85);
}

uint64_t WebKit::WebLoaderStrategy::isOnLine(WebKit::WebLoaderStrategy *this)
{
  return *((unsigned __int8 *)this + 112);
}

IPC::Encoder *WebKit::WebLoaderStrategy::isResourceLoadFinished(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WebKit::WebProcess *v18;
  uint64_t v19[2];
  IPC::Encoder *v20;

  if (*(_QWORD *)(a2 + 384)
      ? (WebKit::WebProcess *)(v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330),
                               v5 = WebKit::WebProcess::WebProcess(v18),
                               WebKit::WebProcess::singleton(void)::process = (uint64_t)v5,
      : (v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process),
        *((_QWORD *)v5 + 37)))
  {
    v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 384) + 744);
    v8 = *a3;
    *a3 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34EB238;
    v9[1] = v8;
    v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 234;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v20 = (IPC::Encoder *)v11;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v7;
    v19[0] = (uint64_t)v9;
    v19[1] = v10;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v20, v19, 0, 0);
    v13 = v19[0];
    v19[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, 1);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

IPC::Encoder *WebKit::WebLoaderStrategy::setCaptureExtraNetworkLoadMetricsEnabled(WebKit::WebLoaderStrategy *this, char a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 267;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebLoaderStrategy::responseFromResourceLoadIdentifier(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  IPC::Decoder *v9;
  IPC::Decoder *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  IPC::Decoder *v13;
  WTF *v14;
  void *v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  IPC::Decoder *v27;
  _BYTE v28[256];
  int v29;
  _BYTE v30[138];
  char v31;
  CFTypeRef v32;
  char v33;
  char v34;
  uint64_t *v35;
  int v36;
  IPC::Encoder *v37;
  uint64_t v38;
  IPC::Decoder *v39;
  _BYTE v40[232];
  CFTypeRef cf;
  CFTypeRef v42;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v25);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v4) + 24);
  v38 = 0;
  IPC::Connection::createSyncMessageEncoder(3522, 0, &v38, (uint64_t *)&v37);
  *(_QWORD *)IPC::Encoder::grow(v37, 8uLL, 8) = a1;
  IPC::Connection::sendSyncMessage(v5, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
  if (v36)
  {
    if (v36 == 1)
    {
      LOBYTE(v27) = (_BYTE)v35;
      v6 = 1;
      v29 = 1;
LABEL_16:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34EB218[v6])(&v39, &v35);
      goto LABEL_17;
    }
LABEL_32:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::WebLoaderStrategy::intermediateLoadInformationFromResourceLoadIdentifier(v26);
    return;
  }
  v30[0] = 0;
  v34 = 0;
  IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>(v35, &v27);
  if (v28[248])
  {
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v30, (uint64_t)&v27);
    v34 = 1;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v27, v7);
  if (v34)
  {
    if (v36)
      goto LABEL_32;
    v9 = (IPC::Decoder *)v35;
    v35 = 0;
    v39 = v9;
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v40, (uint64_t)v30);
    v10 = v39;
    v39 = 0;
    v27 = v10;
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v28, (uint64_t)v40);
    v29 = 0;
    v12 = v42;
    v42 = 0;
    if (v12)
      CFRelease(v12);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v40, v11);
    v13 = v39;
    v39 = 0;
    if (v13)
    {
      IPC::Decoder::~Decoder(v13);
      WTF::fastFree(v14, v15);
    }
  }
  else
  {
    LOBYTE(v27) = 13;
    v29 = 1;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v30, v8);
  v6 = v36;
  if (v36 != -1)
    goto LABEL_16;
LABEL_17:
  v17 = v37;
  v37 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v18, v19);
  }
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v30);
  v32 = 0;
  v33 = 0;
  v31 = v31 & 0xF1 | 4;
  if (v29)
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v39, (uint64_t)v30);
  else
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v39, (uint64_t)v28);
  v21 = v32;
  v32 = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v30, v20);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)a2, (const WebCore::ResourceResponseBase *)&v39);
  v23 = cf;
  *(_QWORD *)(a2 + 240) = cf;
  if (v23)
  {
    CFRetain(v23);
    v24 = cf;
    *(_BYTE *)(a2 + 248) = (_BYTE)v42;
    cf = 0;
    if (v24)
      CFRelease(v24);
  }
  else
  {
    *(_BYTE *)(a2 + 248) = (_BYTE)v42;
    cf = 0;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v39, v22);
  if (v29 != -1)
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1E34EB0A8[v29])(&v39, &v27);
}

uint64_t WebKit::WebLoaderStrategy::intermediateLoadInformationFromResourceLoadIdentifier@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  WebKit::WebProcess *v5;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  IPC::Decoder *v22;
  WTF *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  void *v46;
  const void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _DWORD *v52;
  __int128 v53;
  _DWORD *v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  WebKit::WebProcess *v58;
  WTF *v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  int v63;
  IPC::Encoder *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  int v72;
  char v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v58 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v58);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v65 = 0;
  IPC::Connection::createSyncMessageEncoder(3523, 0, &v65, (uint64_t *)&v64);
  *(_QWORD *)IPC::Encoder::grow(v64, 8uLL, 8) = a1;
  IPC::Connection::sendSyncMessage(v6, v65, (uint64_t *)&v64, 0, (uint64_t)&v62, INFINITY);
  if (!v63)
  {
    a1 = v62;
    v10 = v62[1];
    v11 = *v62;
    v12 = ((v62[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v62;
    if (v10 < v12 || v10 - v12 <= 7)
    {
      v26 = 0;
      v27 = 0;
      *v62 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (!v28)
        goto LABEL_28;
      goto LABEL_76;
    }
    v14 = (unint64_t *)(v11 + v12);
    v62[2] = (uint64_t)(v14 + 1);
    if (!v11)
    {
      v26 = v10;
      v27 = 0;
      goto LABEL_28;
    }
    v2 = *v14;
    v59 = 0;
    v60 = 0;
    if (v2 >= 0x6EB)
    {
      LODWORD(v6) = 592;
      do
      {
        IPC::Decoder::decode<WebCore::NetworkTransactionInformation>(&v69, a1);
        if (!v73)
          goto LABEL_45;
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>((uint64_t)&v59, (unint64_t)&v69);
        }
        else
        {
          WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)v59 + 592 * HIDWORD(v60), (uint64_t)&v69);
          ++HIDWORD(v60);
        }
        std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v30);
        --v2;
      }
      while (v2);
      v31 = HIDWORD(v60);
      a1 = (uint64_t *)v59;
      if (v60 > HIDWORD(v60))
      {
        v32 = v59;
        if (HIDWORD(v60))
        {
          if (HIDWORD(v60) >= 0x6EB3E5)
            goto LABEL_84;
          v33 = (WTF *)WTF::fastMalloc((WTF *)(592 * HIDWORD(v60)));
          LODWORD(v60) = 592 * v31 / 0x250;
          v59 = v33;
          v32 = (WTF *)a1;
          if (v33 != (WTF *)a1)
          {
            WTF::VectorMover<false,WebCore::NetworkTransactionInformation>::move(a1, &a1[74 * v31], (uint64_t)v33);
            v32 = v59;
          }
        }
        if (a1)
        {
          if (v32 == (WTF *)a1)
          {
            v59 = 0;
            LODWORD(v60) = 0;
          }
          WTF::fastFree((WTF *)a1, v7);
          a1 = (uint64_t *)v59;
        }
        else
        {
          a1 = (uint64_t *)v32;
        }
      }
      v59 = 0;
      LODWORD(v2) = v60;
      LODWORD(v6) = HIDWORD(v60);
    }
    else
    {
      if (v2)
      {
        LODWORD(v6) = 592 * v2;
        LODWORD(v60) = 592 * (int)v2 / 0x250u;
        v59 = (WTF *)WTF::fastMalloc((WTF *)(592 * v2));
        while (1)
        {
          IPC::Decoder::decode<WebCore::NetworkTransactionInformation>(&v69, a1);
          if (!v73)
            break;
          if (HIDWORD(v60) == (_DWORD)v60)
          {
            WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>((uint64_t)&v59, (unint64_t)&v69);
          }
          else
          {
            WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)v59 + 592 * HIDWORD(v60), (uint64_t)&v69);
            ++HIDWORD(v60);
          }
          std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
          if (!--v2)
          {
            a1 = (uint64_t *)v59;
            LODWORD(v2) = v60;
            LODWORD(v6) = HIDWORD(v60);
            goto LABEL_22;
          }
        }
LABEL_45:
        std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v15);
        WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v34);
        goto LABEL_46;
      }
      LODWORD(v6) = 0;
      a1 = 0;
LABEL_22:
      v59 = 0;
    }
    v60 = 0;
    LOBYTE(v76) = 1;
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v7);
    v74 = 0;
    v75 = 0;
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v17);
    v68 = 1;
    v66 = 0;
    v67 = 0;
    v61 = 1;
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v18);
    if (!v63)
    {
      v20 = v62;
      v62 = 0;
      v59 = 0;
      v60 = 0;
      v74 = 0;
      v75 = 0;
      v69 = v20;
      v70 = a1;
      v76 = 0;
      v71 = __PAIR64__(v6, v2);
      v72 = 0;
      WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v19);
      v22 = (IPC::Decoder *)v74;
      v74 = 0;
      if (v22)
      {
        IPC::Decoder::~Decoder(v22);
        WTF::fastFree(v23, v24);
      }
      WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v21);
      v8 = 0;
LABEL_49:
      v9 = v63;
      if (v63 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
LABEL_75:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_76:
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v11, v10);
      v27 = *a1;
      v26 = a1[1];
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v26)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
LABEL_46:
    v25 = (void *)*a1;
    v35 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36 && v35)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v36 + 16))(v36, v25);
      v25 = (void *)*a1;
      v56 = a1[1];
      v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v57 && v56)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v57 + 16))(v57, v25);
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    LOBYTE(v69) = 13;
    v8 = 1;
    v72 = 1;
    goto LABEL_49;
  }
  if (v63 != 1)
    goto LABEL_75;
  LOBYTE(v69) = (_BYTE)v62;
  v8 = 1;
  v72 = 1;
  v9 = 1;
LABEL_50:
  ((void (*)(uint64_t **, uint64_t **))off_1E34EB218[v9])(&v74, &v62);
LABEL_51:
  v37 = v64;
  v64 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v25);
    WTF::fastFree(v38, v39);
  }
  v66 = 0;
  v67 = 0;
  if (v8)
  {
    a1 = 0;
    LODWORD(v2) = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    v70 = 0;
    v71 = 0;
  }
  v74 = a1;
  v75 = __PAIR64__(v6, v2);
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v25);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  if (!(_DWORD)v6)
  {
    result = WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v40);
    return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34EB0B8[v8])(result, &v69);
  }
  if (v6 >= 0x6EB3E5)
  {
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x1975D9488);
  }
  v41 = WTF::fastMalloc((WTF *)(592 * v6));
  *(_DWORD *)(a2 + 8) = 592 * (int)v6 / 0x250u;
  *(_QWORD *)a2 = v41;
  v42 = &a1[74 * v6];
  v43 = v41 + 208;
  v44 = a1 + 26;
  do
  {
    v45 = v44 - 26;
    *(_BYTE *)(v43 - 208) = *((_BYTE *)v44 - 208);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v43 - 200), (const WebCore::ResourceRequest *)(v44 - 25));
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v43, (const WebCore::ResourceResponseBase *)v44);
    v47 = (const void *)v44[30];
    *(_QWORD *)(v43 + 240) = v47;
    if (v47)
      CFRetain(v47);
    *(_BYTE *)(v43 + 248) = *((_BYTE *)v44 + 248);
    v48 = *((_OWORD *)v44 + 17);
    *(_OWORD *)(v43 + 256) = *((_OWORD *)v44 + 16);
    *(_OWORD *)(v43 + 272) = v48;
    v49 = *((_OWORD *)v44 + 18);
    v50 = *((_OWORD *)v44 + 19);
    v51 = *((_OWORD *)v44 + 20);
    *(_QWORD *)(v43 + 336) = v44[42];
    *(_OWORD *)(v43 + 304) = v50;
    *(_OWORD *)(v43 + 320) = v51;
    *(_OWORD *)(v43 + 288) = v49;
    v52 = (_DWORD *)v44[43];
    if (v52)
      *v52 += 2;
    *(_QWORD *)(v43 + 344) = v52;
    v53 = *((_OWORD *)v44 + 22);
    *(_QWORD *)(v43 + 368) = v44[46];
    *(_OWORD *)(v43 + 352) = v53;
    v54 = (_DWORD *)v44[47];
    if (v54)
      ++*v54;
    *(_QWORD *)(v43 + 376) = v54;
    v43 += 592;
    v44 += 74;
  }
  while (v45 + 74 != v42);
  v8 = v72;
  result = WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v46);
  if (v8 != -1)
    return ((uint64_t (*)(uint64_t, uint64_t **))off_1E34EB0B8[v8])(result, &v69);
  return result;
}

void WebKit::WebLoaderStrategy::networkMetricsFromResourceLoadIdentifier(WTF::StringImpl *a1@<X1>, uint64_t a2@<X8>)
{
  WebKit::WebProcess *v4;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v16;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  WebKit::WebProcess *v21;
  WebKit::UserMediaPermissionRequestManager *v22;
  __int128 v23;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  _BYTE v31[88];
  WTF::StringImpl *v32;
  _BYTE v33[24];
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v34;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 v44;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v45;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v46;
  char v47;
  IPC::Encoder *v48;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(WebKit::WebProcess::ensureNetworkProcessConnection(v4)
                                                                + 24);
  *(_QWORD *)&v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3526, 0, (uint64_t *)&v23, (uint64_t *)&v48);
  *(_QWORD *)IPC::Encoder::grow(v48, 8uLL, 8) = a1;
  IPC::Connection::sendSyncMessage((uint64_t)v5, v23, (uint64_t *)&v48, 0, (uint64_t)&v25, INFINITY);
  if (DWORD2(v25))
  {
    if (DWORD2(v25) == 1)
    {
      v31[0] = v25;
      v6 = 1;
      v36 = 1;
      v7 = 1;
LABEL_11:
      ((void (*)(__int128 *, __int128 *))off_1E34EB218[v7])(&v37, &v25);
      goto LABEL_12;
    }
LABEL_35:
    v22 = (WebKit::UserMediaPermissionRequestManager *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::UserMediaPermissionRequestManager::~UserMediaPermissionRequestManager(v22);
    return;
  }
  LOBYTE(v37) = 0;
  v47 = 0;
  IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>((uint64_t *)v25, (uint64_t)v31);
  if ((_BYTE)v35)
  {
    v39 = *(_OWORD *)&v31[32];
    v40 = *(_OWORD *)&v31[48];
    v41 = *(_OWORD *)&v31[64];
    a1 = v32;
    v42 = *(WTF::StringImpl **)&v31[80];
    v37 = *(_OWORD *)v31;
    v38 = *(_OWORD *)&v31[16];
    v44 = *(_OWORD *)v33;
    v5 = v34;
    v45 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)&v33[16];
    v32 = 0;
    v34 = 0;
    v47 = 1;
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v8);
    if (DWORD2(v25))
      goto LABEL_35;
    v6 = 0;
    *(_OWORD *)&v31[40] = v39;
    *(_OWORD *)&v31[56] = v40;
    *(_OWORD *)&v31[72] = v41;
    *(_OWORD *)&v31[8] = v37;
    v10 = v25;
    *(_QWORD *)&v25 = 0;
    *(_OWORD *)&v31[24] = v38;
    *(_OWORD *)&v33[8] = v44;
    v43 = 0;
    v46 = 0;
    v32 = v42;
    *(_QWORD *)v33 = a1;
    *(_QWORD *)v31 = v10;
    v34 = v45;
    v35 = v5;
  }
  else
  {
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v8);
    v31[0] = 13;
    v6 = 1;
  }
  v36 = v6;
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v9);
  v7 = DWORD2(v25);
  if (DWORD2(v25) != -1)
    goto LABEL_11;
LABEL_12:
  v12 = v48;
  v48 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
  }
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v37);
  if (v6)
  {
    a1 = v43;
    v30 = v42;
    v5 = v46;
    v24 = v45;
    v27 = v39;
    v28 = v40;
    v29 = v41;
    v25 = v37;
    v26 = v38;
    v43 = 0;
    v16 = &v46;
    v23 = v44;
  }
  else
  {
    v30 = v32;
    v27 = *(_OWORD *)&v31[40];
    v28 = *(_OWORD *)&v31[56];
    v29 = *(_OWORD *)&v31[72];
    v25 = *(_OWORD *)&v31[8];
    v26 = *(_OWORD *)&v31[24];
    *(_QWORD *)v33 = 0;
    v23 = *(_OWORD *)&v33[8];
    v16 = &v35;
    v24 = v34;
  }
  *v16 = 0;
  v17 = v46;
  v46 = 0;
  if (v17)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v17);
  v18 = v43;
  v43 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v28;
  *(_OWORD *)(a2 + 32) = v27;
  *(_OWORD *)(a2 + 48) = v19;
  *(_OWORD *)(a2 + 64) = v29;
  *(_QWORD *)(a2 + 80) = v30;
  v20 = v26;
  *(_OWORD *)a2 = v25;
  *(_OWORD *)(a2 + 16) = v20;
  if (a1)
    *(_DWORD *)a1 += 2;
  *(_QWORD *)(a2 + 88) = a1;
  *(_OWORD *)(a2 + 96) = v23;
  *(_QWORD *)(a2 + 112) = v24;
  if (v5)
  {
    ++*(_DWORD *)v5;
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5);
  }
  *(_QWORD *)(a2 + 120) = v5;
  if (a1)
  {
    if (*(_DWORD *)a1 == 2)
      WTF::StringImpl::destroy(a1, v15);
    else
      *(_DWORD *)a1 -= 2;
  }
  if (v36 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E34EB0C8[v36])(&v37, v31);
}

void WebKit::UserMediaPermissionRequestManager::~UserMediaPermissionRequestManager(WebKit::UserMediaPermissionRequestManager *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::UserMediaPermissionRequestManager::~UserMediaPermissionRequestManager(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;

  *(_QWORD *)this = &off_1E34EAF20;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = v7 + 8;
      do
      {
        if (*(_QWORD *)(v9 - 8) != -1)
        {
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, a2);
          v10 = *(_QWORD *)(v9 - 8);
          *(_QWORD *)(v9 - 8) = 0;
          if (v10)
          {
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
          }
        }
        v9 += 24;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (_DWORD **)(v11 + 8);
      do
      {
        if (*(v13 - 1) != (_DWORD *)-1)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (v14[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
            else
              --v14[6];
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t WebKit::WebLoaderStrategy::usePingLoad(WebKit::WebLoaderStrategy *this)
{
  return 0;
}

uint64_t WebKit::WebLoaderStrategy::ongoingLoads@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(this + 48);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = this;
        this = WTF::fastMalloc((WTF *)(8 * v4));
        *(_DWORD *)(a2 + 8) = v4;
        *(_QWORD *)a2 = this;
        v6 = *(_QWORD *)(v5 + 48);
        if (v6 && *(_DWORD *)(v6 - 12))
        {
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            v8 = 16 * v7;
            for (i = *(uint64_t **)(v5 + 48); (unint64_t)(*i + 1) <= 1; i += 2)
            {
              v8 -= 16;
              if (!v8)
                return this;
            }
          }
          else
          {
            i = *(uint64_t **)(v5 + 48);
          }
          v10 = (uint64_t *)(v6 + 16 * v7);
          if (v10 != i)
          {
            v11 = 0;
            v12 = *i;
LABEL_14:
            *(_QWORD *)(this + 8 * v11++) = v12;
            *(_DWORD *)(a2 + 12) = v11;
            while (1)
            {
              i += 2;
              if (i == v10)
                break;
              v12 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i != v10)
                  goto LABEL_14;
                return this;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

_DWORD *WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(_DWORD *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer((WebKit::WebIDBConnectionToServer *)(result - 6), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

void WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult(WebKit::WebLoaderStrategy::SyncLoadResult *this, void *a2)
{
  WTF *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;

  v3 = (WTF *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, (WTF::StringImpl *)a2);
}

uint64_t WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v5;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v6 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v6 + 80) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v6 + 88) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v6 + 92) = v10;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v6 + 96) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v6 + 104) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v6 + 108) = v11;
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v6 + 112) = v12;
  *(_BYTE *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v13 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a1 + 120) = v13;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v14 = *(_OWORD *)(a2 + 136);
  v15 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v15;
  *(_OWORD *)(a1 + 136) = v14;
  v16 = *(_OWORD *)(a2 + 184);
  v17 = *(_OWORD *)(a2 + 200);
  v18 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(a1 + 216) = v18;
  *(_OWORD *)(a1 + 200) = v17;
  *(_OWORD *)(a1 + 184) = v16;
  v19 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v19;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v20 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 256) = v20;
  WTF::URL::URL(a1 + 264, (uint64_t *)(a2 + 264));
  v21 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 312);
  *(_WORD *)(a1 + 316) = *(_WORD *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v21;
  v22 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a1 + 320) = v22;
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v23 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a1 + 336) = v23;
  LODWORD(v23) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a2 + 344) = 0;
  *(_DWORD *)(a1 + 344) = v23;
  LODWORD(v23) = *(_DWORD *)(a2 + 348);
  *(_DWORD *)(a2 + 348) = 0;
  *(_DWORD *)(a1 + 348) = v23;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl(uint64_t a1, void *a2)
{
  WTF *v3;
  const void *v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(WTF **)(a1 + 336);
  if (v3)
  {
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(const void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 80), (WTF::StringImpl *)a2);
  v6 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

_DWORD **WTF::RefPtr<WebCore::DocumentLoader,WTF::RawPtrTraits<WebCore::DocumentLoader>,WTF::DefaultRefDerefTraits<WebCore::DocumentLoader>>::operator=(_DWORD **a1, _DWORD *a2)
{
  _DWORD *v3;

  if (a2)
    ++a2[6];
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  return a1;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v3;

  v3 = (const void *)a2[31];
  a2[31] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a2 + 1), (WTF::StringImpl *)a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;

  v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1935;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34EB0E8;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(_QWORD *)(a2 + 8));
  return IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(_QWORD *)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB0E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB0E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v37;
  int v38;
  __int128 v39;
  int v40;
  void *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  WTF *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  void *__src;
  _DWORD __n[5];
  __int128 v96;
  char v97;
  _DWORD *v98;
  _DWORD *v99;
  __int128 v100;
  void *v101;
  _DWORD v102[5];
  _BYTE v103[22];
  char v104;
  uint64_t v105;
  uint64_t v106;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>((uint64_t *)(a1 + 8));
  v4 = (void *)*a2;
  if (!v4)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 >= v6 && v5 - v6 > 7)
  {
    v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    v9 = *v8;
    a2[2] = (uint64_t)(v8 + 1);
    v105 = 0;
    v106 = 0;
    if (v9 >= 0x11A7)
    {
      v78 = (uint64_t *)(a1 + 8);
      while (1)
      {
        IPC::Decoder::decode<WebCore::CaptureDeviceWithCapabilities>(&v87, a2);
        if (!v104)
          break;
        v47 = HIDWORD(v106);
        if (HIDWORD(v106) == (_DWORD)v106)
        {
          WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v105, (unint64_t)&v87);
        }
        else
        {
          v48 = v105;
          v49 = v105 + 232 * HIDWORD(v106);
          v50 = v87;
          *(_QWORD *)&v87 = 0;
          *(_QWORD *)v49 = v50;
          *(_BYTE *)(v49 + 8) = BYTE8(v87);
          v51 = v88;
          v88 = 0;
          *(_QWORD *)(v49 + 16) = v51;
          v52 = v89;
          v89 = 0;
          *(_QWORD *)(v49 + 24) = v52;
          *(_DWORD *)(v49 + 32) = v90;
          v53 = v91;
          v54 = v92;
          *(_OWORD *)(v49 + 72) = v93;
          *(_OWORD *)(v49 + 56) = v54;
          *(_OWORD *)(v49 + 40) = v53;
          v55 = (WTF *)__n[0];
          *(_QWORD *)(v49 + 88) = 0;
          *(_QWORD *)(v49 + 96) = 0;
          v56 = v49 + 88;
          *(_DWORD *)(v56 + 12) = (_DWORD)v55;
          if ((_DWORD)v55)
          {
            v57 = (void *)WTF::fastMalloc(v55);
            *(_DWORD *)(v48 + 232 * v47 + 96) = (_DWORD)v55;
            *(_QWORD *)v56 = v57;
            memcpy(v57, __src, __n[0]);
          }
          v58 = v48 + 232 * v47;
          v59 = *(_OWORD *)&__n[1];
          v60 = v96;
          *(_BYTE *)(v58 + 136) = v97;
          *(_OWORD *)(v58 + 120) = v60;
          *(_OWORD *)(v58 + 104) = v59;
          v61 = v98;
          if (v98)
            *v98 += 2;
          *(_QWORD *)(v58 + 144) = v61;
          v62 = v99;
          if (v99)
            *v99 += 2;
          *(_QWORD *)(v48 + 232 * v47 + 152) = v62;
          v63 = v48 + 232 * v47;
          *(_OWORD *)(v63 + 160) = v100;
          v64 = (WTF *)v102[0];
          *(_QWORD *)(v63 + 176) = 0;
          *(_QWORD *)(v63 + 184) = 0;
          v65 = v63 + 176;
          *(_DWORD *)(v65 + 12) = (_DWORD)v64;
          if ((_DWORD)v64)
          {
            v66 = (void *)WTF::fastMalloc(v64);
            *(_DWORD *)(v48 + 232 * v47 + 184) = (_DWORD)v64;
            *(_QWORD *)v65 = v66;
            memcpy(v66, v101, v102[0]);
          }
          v67 = v48 + 232 * v47;
          v69 = *(_OWORD *)&v102[1];
          v68 = *(_OWORD *)v103;
          *(_QWORD *)(v67 + 222) = *(_QWORD *)&v103[14];
          *(_OWORD *)(v67 + 192) = v69;
          *(_OWORD *)(v67 + 208) = v68;
          ++HIDWORD(v106);
        }
        std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v87, v10);
        if (!--v9)
        {
          WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v105, HIDWORD(v106));
          v34 = v105;
          v105 = 0;
          v84 = v34;
          v35 = v106;
          LODWORD(v9) = HIDWORD(v106);
          LODWORD(v106) = 0;
          LODWORD(v85) = v35;
          v2 = v78;
          goto LABEL_28;
        }
      }
    }
    else
    {
      if (!v9)
      {
        v35 = 0;
        v34 = 0;
LABEL_27:
        v105 = 0;
        v84 = v34;
        LODWORD(v106) = 0;
        LODWORD(v85) = v35;
LABEL_28:
        HIDWORD(v106) = 0;
        HIDWORD(v85) = v9;
        v86 = 1;
        WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v4);
        IPC::Decoder::decode<WebCore::MediaDeviceHashSalts>(a2, (uint64_t)&v87);
        v38 = v88;
        if ((_BYTE)v88)
        {
          v84 = 0;
          v85 = 0;
          v79 = v34;
          v80 = v35;
          v81 = v9;
          v39 = v87;
          v87 = 0uLL;
          v82 = v39;
          v40 = 1;
        }
        else
        {
          v40 = 0;
          LOBYTE(v79) = 0;
        }
        v83 = v40;
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v87, v37);
        WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v41);
        if (v38)
          goto LABEL_57;
        goto LABEL_56;
      }
      v78 = (uint64_t *)(a1 + 8);
      LODWORD(v106) = 232 * (int)v9 / 0xE8u;
      v105 = WTF::fastMalloc((WTF *)(232 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::CaptureDeviceWithCapabilities>(&v87, a2);
        if (!v104)
          break;
        v11 = HIDWORD(v106);
        if (HIDWORD(v106) == (_DWORD)v106)
        {
          WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v105, (unint64_t)&v87);
        }
        else
        {
          v12 = v105;
          v13 = v105 + 232 * HIDWORD(v106);
          v14 = v87;
          *(_QWORD *)&v87 = 0;
          *(_QWORD *)v13 = v14;
          *(_BYTE *)(v13 + 8) = BYTE8(v87);
          v15 = v88;
          v88 = 0;
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v89;
          v89 = 0;
          *(_QWORD *)(v13 + 24) = v16;
          *(_DWORD *)(v13 + 32) = v90;
          v17 = v91;
          v18 = v92;
          *(_OWORD *)(v13 + 72) = v93;
          *(_OWORD *)(v13 + 56) = v18;
          *(_OWORD *)(v13 + 40) = v17;
          v19 = (WTF *)__n[0];
          *(_QWORD *)(v13 + 88) = 0;
          *(_QWORD *)(v13 + 96) = 0;
          v20 = v13 + 88;
          *(_DWORD *)(v20 + 12) = (_DWORD)v19;
          if ((_DWORD)v19)
          {
            v21 = (void *)WTF::fastMalloc(v19);
            *(_DWORD *)(v12 + 232 * v11 + 96) = (_DWORD)v19;
            *(_QWORD *)v20 = v21;
            memcpy(v21, __src, __n[0]);
          }
          v22 = v12 + 232 * v11;
          v23 = *(_OWORD *)&__n[1];
          v24 = v96;
          *(_BYTE *)(v22 + 136) = v97;
          *(_OWORD *)(v22 + 120) = v24;
          *(_OWORD *)(v22 + 104) = v23;
          v25 = v98;
          if (v98)
            *v98 += 2;
          *(_QWORD *)(v22 + 144) = v25;
          v26 = v99;
          if (v99)
            *v99 += 2;
          *(_QWORD *)(v12 + 232 * v11 + 152) = v26;
          v27 = v12 + 232 * v11;
          *(_OWORD *)(v27 + 160) = v100;
          v28 = (WTF *)v102[0];
          *(_QWORD *)(v27 + 176) = 0;
          *(_QWORD *)(v27 + 184) = 0;
          v29 = v27 + 176;
          *(_DWORD *)(v29 + 12) = (_DWORD)v28;
          if ((_DWORD)v28)
          {
            v30 = (void *)WTF::fastMalloc(v28);
            *(_DWORD *)(v12 + 232 * v11 + 184) = (_DWORD)v28;
            *(_QWORD *)v29 = v30;
            memcpy(v30, v101, v102[0]);
          }
          v31 = v12 + 232 * v11;
          v33 = *(_OWORD *)&v102[1];
          v32 = *(_OWORD *)v103;
          *(_QWORD *)(v31 + 222) = *(_QWORD *)&v103[14];
          *(_OWORD *)(v31 + 192) = v33;
          *(_OWORD *)(v31 + 208) = v32;
          ++HIDWORD(v106);
        }
        std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v87, v10);
        if (!--v9)
        {
          v34 = v105;
          v35 = v106;
          LODWORD(v9) = HIDWORD(v106);
          v2 = v78;
          goto LABEL_27;
        }
      }
    }
    std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v87, v10);
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v70);
    v2 = v78;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    v43 = a2[3];
    if (v43)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v44 = *a2;
        v45 = a2[1];
        v46 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v46)
        {
          if (v45)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
        }
      }
    }
  }
  v71 = *a2;
  v72 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v73 = a2[3];
  if (v73 && v72)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v71);
  v40 = 0;
  LOBYTE(v79) = 0;
  v83 = 0;
LABEL_56:
  v42 = (WTF::StringImpl *)*a2;
  v74 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v75 = a2[3];
  if (v75 && v74)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v75 + 16))(v75, v42);
LABEL_57:
  if (v40)
  {
    v76 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v76 + 16))(v76, &v79, &v82);
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    return std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MediaDeviceHashSalts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v77);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MediaDeviceHashSalts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v42);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v6 = 0;
  v7 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, v8, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v2);
}

uint64_t IPC::Decoder::decode<WebCore::CaptureDeviceWithCapabilities>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::CaptureDeviceWithCapabilities,void>::decode(a2, a1);
  if (!a1[232])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaDeviceHashSalts>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MediaDeviceHashSalts,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MediaDeviceHashSalts>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          *v29 = *v16;
          v31 = v6 + 16 * v13;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v29[1] = v32;
          v33 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (v16 == a3)
            v14 = v29;
        }
        else
        {
          v18 = v6 + 16 * v13;
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB110;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB110;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessConnection::broadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    if (*(_QWORD *)(v2 + 296))
      return WebCore::Document::addConsoleMessage();
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebLoaderStrategy::*&)(void),WebKit::WebLoaderStrategy*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E34EB188;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 4));
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *a1 = off_1E34EB188;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 4));
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, WebCore::ResourceLoader **a2)
{
  WebKit::WebLoaderStrategy *v4;
  WebCore::ResourceLoader *v5;
  WebCore::CachedResource *v6;
  NSObject *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  WebKit::WebLoaderStrategy *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(WebKit::WebLoaderStrategy **)(a1 + 8);
  v5 = *a2;
  if (*a2)
  {
    v6 = (WebCore::CachedResource *)WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(a1 + 32));
    WebKit::WebLoaderStrategy::scheduleLoad(v4, v5, v6, *(_BYTE *)(a1 + 16) == 2);
  }
  else
  {
    v7 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 40));
      if (v9)
        v10 = v8;
      else
        v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
      v14 = 134218496;
      v15 = v4;
      v16 = 2048;
      v17 = v10;
      v18 = 2048;
      v19 = v11;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu] WebLoaderStrategy::loadResource: Unable to create SubresourceLoader", (uint8_t *)&v14, 0x20u);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebCore::ResourceLoader **))(*(_QWORD *)v12 + 16))(v12, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::schedulePluginStreamLoad(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34EB1B0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::schedulePluginStreamLoad(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EB1B0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::schedulePluginStreamLoad(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(_QWORD *a1, WebCore::ResourceLoader **a2)
{
  WebCore::ResourceLoader *v4;
  WebKit::WebLoaderStrategy *v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  if (*a2)
  {
    v5 = (WebKit::WebLoaderStrategy *)a1[1];
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1[3] + 296) + 192) + 8))(*(_QWORD *)(a1[3] + 296) + 192) == 2;
    WebKit::WebLoaderStrategy::scheduleLoad(v5, v4, 0, v6);
  }
  v7 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, WebCore::ResourceLoader **))(*(_QWORD *)v7 + 16))(v7, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_4:
    *v16 = v11;
    v18 = *a4;
    *a4 = 0;
    result = (uint64_t *)v16[1];
    v16[1] = v18;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_13;
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_13:
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v22 + 16 * v25;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
    v16 = result;
    v22 = *a2;
    if (*a2)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
    goto LABEL_13;
  }
  v26 = 0;
  v27 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v26 = v16;
    v15 = (v15 + v27) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v27;
    if (!*v16)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v26;
      }
      goto LABEL_4;
    }
  }
  if ((v9 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v28;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *a4;
  *a4 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v29;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (_DWORD *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (v25[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
            else
              --v25[2];
          }
          *v24 = *v13;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (v28[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[2];
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        v29 = (_DWORD *)v13[1];
        v13[1] = 0;
        if (v29)
        {
          if (v29[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
          else
            --v29[2];
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoad(WebCore::ResourceLoader &,WebCore::CachedResource *,BOOL)::$_0,void,WebCore::ResourceRequest const&>::~CallableWrapper(_QWORD *result)
{
  _DWORD *v1;
  _QWORD *v2;

  *result = off_1E34EB1D8;
  v1 = (_DWORD *)result[2];
  result[2] = 0;
  if (v1)
  {
    if (v1[4] == 1)
    {
      v2 = result;
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      return v2;
    }
    else
    {
      --v1[4];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoad(WebCore::ResourceLoader &,WebCore::CachedResource *,BOOL)::$_0,void,WebCore::ResourceRequest const&>::~CallableWrapper(WTF *a1, void *a2)
{
  _DWORD *v2;
  WTF *v4;

  *(_QWORD *)a1 = off_1E34EB1D8;
  v2 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v2)
  {
    if (v2[4] == 1)
    {
      v4 = a1;
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
      a1 = v4;
    }
    else
    {
      --v2[4];
    }
  }
  return WTF::fastFree(a1, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoad(WebCore::ResourceLoader &,WebCore::CachedResource *,BOOL)::$_0,void,WebCore::ResourceRequest const&>::call(_QWORD *a1, uint64_t a2)
{
  WebCore::ResourceLoader *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  WebCore::ResourceLoader *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v4 = (WebCore::ResourceLoader *)a1[2];
  v6 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = WebCore::ResourceLoader::frameLoader(v4);
    v8 = *((_QWORD *)v4 + 4);
    v9 = a1[4];
    v10 = a1[5];
    v11 = a1[7];
    v12 = 134219520;
    v13 = v5;
    v14 = 2048;
    v15 = v4;
    v16 = 2048;
    v17 = v7;
    v18 = 2048;
    v19 = v8;
    v20 = 2048;
    v21 = v9;
    v22 = 2048;
    v23 = v10;
    v24 = 2048;
    v25 = v11;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: intercepted URL will be scheduled with the NetworkProcess", (uint8_t *)&v12, 0x48u);
  }
  WebKit::maximumBufferingTime(a1[9]);
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(v5, (uint64_t)v4, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34EB200;
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34EB200;
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 240))(*(_QWORD *)(a1 + 8), a1 + 16);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 8 * i);
      v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = (_DWORD *)*v10;
          *v10 = 0;
          *v21 = v22;
          v23 = (_DWORD *)*v10;
          *v10 = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[4];
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  v11 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a3) & v9;
  v12 = (uint64_t *)(v8 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_4:
    *v12 = v10;
    v14 = *a4;
    *a4 = 0;
    result = (uint64_t *)v12[1];
    v12[1] = v14;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v16 = *a2;
    if (*a2)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_13;
    }
    else if (3 * v21 > 4 * v20)
    {
LABEL_13:
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v18 + 16 * v21;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v12);
    v12 = result;
    v18 = *a2;
    if (*a2)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_13;
  }
  v22 = 0;
  v23 = 1;
  while (v13 != v10)
  {
    if (v13 == -1)
      v22 = v12;
    v11 = (v11 + v23) & v9;
    v12 = (uint64_t *)(v8 + 16 * v11);
    v13 = *v12;
    ++v23;
    if (!*v12)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v10 = *a3;
        v12 = v22;
      }
      goto LABEL_4;
    }
  }
  v24 = v8 + 16 * *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = 0;
  v25 = *a4;
  *a4 = 0;
  result = (uint64_t *)v12[1];
  v12[1] = v25;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (unsigned int *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            do
            {
              v33 = __ldaxr(v29);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v29));
            if (!v34)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v10);
            }
          }
          *v28 = *v13;
          v30 = v6 + 16 * v11;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v28[1] = v31;
          v32 = *(unsigned int **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            do
            {
              v35 = __ldaxr(v32);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v32));
            if (!v36)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v10);
            }
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2)
{
  _QWORD *v2;

  if (*result)
  {
    v2 = (_QWORD *)(*result + 16 * *(unsigned int *)(*result - 4));
    if (v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if (v2 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v11;

  v2 = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v2)
  {
    do
    {
      v5 = __ldaxr(v2);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v2));
    if (!v6)
    {
      atomic_store(1u, v2);
      v11 = result;
      WTF::fastFree((WTF *)v2, a2);
      result = v11;
    }
  }
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v7 = *result;
  if (*result)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return v4 + 16 * *(unsigned int *)(v4 - 4);
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2 + ~(*a2 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
      return v2 + 16 * v7;
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        return v2 + 16 * v7;
    }
  }
  return 0;
}

WebKit::WebURLSchemeTaskProxy *WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(WebKit::WebURLSchemeTaskProxy *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebURLSchemeTaskProxy::~WebURLSchemeTaskProxy(result, a2);
    return (WebKit::WebURLSchemeTaskProxy *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::WebURLSchemeTaskProxy::~WebURLSchemeTaskProxy(WebKit::WebURLSchemeTaskProxy *this, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 32);
  v4 = *((_QWORD *)this + 33);
  v5 = (WTF *)*((_QWORD *)this + 34);
  if (v3 > v4)
  {
    v13 = v5;
    if (v4)
    {
      v18 = 8 * v4;
      do
      {
        v19 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v13 = (WTF *)((char *)v13 + 8);
        v18 -= 8;
      }
      while (v18);
      v13 = (WTF *)*((_QWORD *)this + 34);
      v3 = *((_QWORD *)this + 32);
    }
    v14 = *((unsigned int *)this + 70);
    if (v3 != v14)
    {
      v15 = (uint64_t *)((char *)v13 + 8 * v3);
      v16 = 8 * v14 - 8 * v3;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
LABEL_17:
    v5 = (WTF *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v3 != v4)
  {
    v10 = (uint64_t *)((char *)v5 + 8 * v3);
    v11 = 8 * v4 - 8 * v3;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
    goto LABEL_17;
  }
  if (!v5)
    goto LABEL_5;
LABEL_18:
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  WTF::fastFree(v5, a2);
LABEL_5:
  v6 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::WebURLSchemeTaskProxy *)((char *)this + 40));
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[4];
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WebCore::ResourceLoader const*>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 8 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 8 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 8 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, uint64_t a2)
{
  void *v4;
  _BYTE v6[360];

  IPC::Decoder::decode<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v6, a1);
  std::__optional_storage_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>(a2, (uint64_t)v6);
  if (v6[352])
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v6, v4);
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[352])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  _BYTE v6[88];

  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)v6);
  if (v6[80])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError>(a1, a2, (uint64_t)v6);
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  _BYTE v8[264];

  IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v8);
  if (v8[256])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse>(a1, a2, a3, (uint64_t)v8);
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v8, v6);
}

WTF *IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  WTF *result;
  void *v8;
  WTF *v9;
  int v10;
  char v11;

  result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v9);
  if (v11)
  {
    result = (WTF *)IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    if (v11)
    {
      result = v9;
      if (v9)
      {
        v9 = 0;
        v10 = 0;
        return (WTF *)WTF::fastFree(result, v8);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a2 + 80) && *(_BYTE *)(a3 + 256) && *(_BYTE *)(a4 + 16))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore13ResourceErrorENS3_16ResourceResponseEN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S5_SA_EJEJEJS4_S5_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(result, (uint64_t *)a2, a3, (uint64_t *)a4);
    *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore13ResourceErrorENS3_16ResourceResponseEN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S5_SA_EJEJEJS4_S5_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v8;
  WTF::URL::URL(a1 + 8, a2 + 1);
  v9 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1 + 80, a3);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 336) = v11;
  LODWORD(v11) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 344) = v11;
  LODWORD(v11) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 348) = v11;
  return a1;
}

uint64_t std::__optional_storage_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;

  v3 = result;
  if (*(unsigned __int8 *)(result + 352) == *(unsigned __int8 *)(a2 + 352))
  {
    if (*(_BYTE *)(result + 352))
    {
      WTF::String::operator=((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
      WTF::URL::operator=(v3 + 8, (WTF::StringImpl *)(a2 + 8));
      WTF::String::operator=((WTF::StringImpl **)(v3 + 48), (WTF::StringImpl *)(a2 + 48));
      v4 = *(_DWORD *)(a2 + 56);
      *(_WORD *)(v3 + 60) = *(_WORD *)(a2 + 60);
      *(_DWORD *)(v3 + 56) = v4;
      v5 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      v6 = *(const void **)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v5;
      if (v6)
        CFRelease(v6);
      *(_BYTE *)(v3 + 72) = *(_BYTE *)(a2 + 72);
      WebCore::ResourceResponseBase::operator=(v3 + 80, a2 + 80);
      v7 = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a2 + 320) = 0;
      v8 = *(const void **)(v3 + 320);
      *(_QWORD *)(v3 + 320) = v7;
      if (v8)
        CFRelease(v8);
      *(_BYTE *)(v3 + 328) = *(_BYTE *)(a2 + 328);
      return WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(v3 + 336, (uint64_t *)(a2 + 336));
    }
  }
  else if (*(_BYTE *)(result + 352))
  {
    result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl(result, (void *)a2);
    *(_BYTE *)(v3 + 352) = 0;
  }
  else
  {
    result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(result, (uint64_t *)a2);
    *(_BYTE *)(v3 + 352) = 1;
  }
  return result;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  WTF::URL::URL(a1 + 80, a2 + 10);
  v7 = a2[15];
  v8 = a2[16];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v8;
  v9 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 136) = v9;
  v10 = a2[18];
  a2[18] = 0;
  *(_QWORD *)(a1 + 144) = v10;
  v11 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = v11;
  v12 = a2[20];
  a2[20] = 0;
  *(_QWORD *)(a1 + 160) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = 0;
  *(_DWORD *)(a1 + 168) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = 0;
  *(_DWORD *)(a1 + 172) = v12;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v13 = a2[22];
  a2[22] = 0;
  *(_QWORD *)(a1 + 176) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = 0;
  *(_DWORD *)(a1 + 184) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = 0;
  *(_DWORD *)(a1 + 188) = v13;
  v14 = a2[24];
  a2[24] = 0;
  *(_QWORD *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*((_BYTE *)a2 + 208))
  {
    v15 = a2[25];
    a2[25] = 0;
    *(_QWORD *)(a1 + 200) = v15;
    *(_BYTE *)(a1 + 208) = 1;
  }
  v16 = *(_OWORD *)(a2 + 27);
  v17 = *(_OWORD *)(a2 + 29);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  v18 = *(_OWORD *)(a2 + 33);
  v19 = *(_OWORD *)(a2 + 35);
  v20 = *(_OWORD *)(a2 + 37);
  *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
  *(_OWORD *)(a1 + 280) = v19;
  *(_OWORD *)(a1 + 296) = v20;
  *(_OWORD *)(a1 + 264) = v18;
  v21 = a2[40];
  a2[40] = 0;
  *(_QWORD *)(a1 + 320) = v21;
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v22 = a2[42];
  a2[42] = 0;
  *(_QWORD *)(a1 + 336) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 86);
  *((_DWORD *)a2 + 86) = 0;
  *(_DWORD *)(a1 + 344) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 87);
  *((_DWORD *)a2 + 87) = 0;
  *(_DWORD *)(a1 + 348) = v22;
  return a1;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t *a3)
{
  IPC::Decoder *v4;
  void *v5;
  IPC::Decoder *v7;
  uint64_t v8[44];

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v8, a3);
  *(_QWORD *)a1 = v7;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(a1 + 8, v8);
  *(_DWORD *)(a1 + 360) = 0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v8, v5);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsResourceLoadFinished,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB238;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsResourceLoadFinished,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB238;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsResourceLoadFinished,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::NetworkTransactionInformation>(_BYTE *a1, uint64_t *a2)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::decode(a2, a1);
  if (!a1[592])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WebCore::ResourceRequestBase *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;

  if (*(_BYTE *)(a1 + 592))
  {
    v3 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 584);
    *(_QWORD *)(a1 + 584) = 0;
    if (v3)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
    v4 = *(WTF::StringImpl **)(a1 + 552);
    *(_QWORD *)(a1 + 552) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(const void **)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 208), a2);
    v6 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::LoadSchedulingMode>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::LoadSchedulingMode>,0ul,1ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void WebKit::WebResourceInterceptController::beginInterceptingResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;

  v4 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1),
        (v4 = *a1) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = v4 + 40 * v9;
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      if (v11 == a2)
      {
        v14 = *(_QWORD *)(v10 + 8);
        v15 = *(_QWORD *)(v10 + 16);
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        v16 = *(WTF **)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        v17 = *(_DWORD *)(v10 + 32);
        *(_DWORD *)(v10 + 32) = 0;
        goto LABEL_22;
      }
      if (v11 == -1)
        v12 = (_QWORD *)v10;
      v9 = (v9 + v13) & v5;
      v10 = v4 + 40 * v9;
      v11 = *(_QWORD *)v10;
      ++v13;
    }
    while (*(_QWORD *)v10);
    if (v12)
    {
      v12[4] = 0;
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v10 = (uint64_t)v12;
    }
  }
  v14 = *(_QWORD *)(v10 + 8);
  v15 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)v10 = a2;
  *(_QWORD *)(v10 + 8) = 0;
  v16 = *(WTF **)(v10 + 24);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v17 = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v10 + 32) = 0;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v23 <= 2 * v22)
LABEL_21:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1);
LABEL_22:
  if (v14 > v15)
  {
    if (v15)
    {
      v30 = 8 * v15;
      v31 = v16;
      do
      {
        v32 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v31 = (WTF *)((char *)v31 + 8);
        v30 -= 8;
      }
      while (v30);
    }
    if (v14 != v17)
    {
      v27 = (uint64_t *)((char *)v16 + 8 * v14);
      v28 = 8 * v17 - 8 * v14;
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  else if (v14 != v15)
  {
    v24 = (uint64_t *)((char *)v16 + 8 * v14);
    v25 = 8 * v15 - 8 * v14;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  if (v16)
    WTF::fastFree(v16, (void *)v10);
}

void WebKit::WebResourceInterceptController::continueResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;

  v3 = *a1;
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*a1, a2);
  v5 = v4;
  if (v3)
    v6 = (uint64_t *)(v3 + 40 * *(unsigned int *)(v3 - 4));
  else
    v6 = 0;
  if (v6 == v4)
    return;
  v7 = v4[1];
  v8 = v4[2];
  v4[1] = 0;
  v4[2] = 0;
  v9 = (WTF *)v4[3];
  v4[3] = 0;
  v10 = *((unsigned int *)v4 + 8);
  *((_DWORD *)v4 + 8) = 0;
  if (*a1)
  {
    v11 = *a1 + 40 * *(unsigned int *)(*a1 - 4);
    if ((uint64_t *)v11 == v4)
      goto LABEL_12;
LABEL_10:
    if ((uint64_t *)v11 != v4)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, (unsigned int *)v4);
    goto LABEL_12;
  }
  if (v4)
  {
    v11 = 0;
    goto LABEL_10;
  }
LABEL_12:
  if (v7 != v8)
  {
    v12 = v7;
    do
    {
      (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)v9 + v12) + 16))(*((_QWORD *)v9 + v12), v5);
      v12 += v10 + 1;
      do
        v12 -= v10;
      while (v12 >= v10);
    }
    while (v8 != v12);
    if (v7 > v8)
    {
      if (v8)
      {
        v19 = 8 * v8;
        v20 = v9;
        do
        {
          v21 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = (WTF *)((char *)v20 + 8);
          v19 -= 8;
        }
        while (v19);
      }
      if (v7 != v10)
      {
        v16 = (uint64_t *)((char *)v9 + 8 * v7);
        v17 = 8 * v10 - 8 * v7;
        do
        {
          v18 = *v16;
          *v16 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
    }
    else
    {
      v13 = (uint64_t *)((char *)v9 + 8 * v7);
      v14 = 8 * v8 - 8 * v7;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  if (v9)
    WTF::fastFree(v9, v5);
}

uint64_t *WebKit::WebResourceInterceptController::defer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v6;

  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2);
  if (a1)
    v6 = (uint64_t *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  else
    v6 = 0;
  if (v6 != result)
    return (uint64_t *)WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>((uint64_t)(result + 1), a3);
  return result;
}

uint64_t WebKit::WebResourceLoader::WebResourceLoader(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34EB260;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *a3;
  v6 = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 40) = a3[1];
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = off_1ECE713E8;
  v9 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
    v14 = v13 - *(double *)(a1 + 80);
    v16 = 134219008;
    v17 = a1;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    v22 = 2048;
    v23 = v12;
    v24 = 2048;
    v25 = v14;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::WebResourceLoader", (uint8_t *)&v16, 0x34u);
  }
  return a1;
}

uint64_t WebKit::WebResourceLoader::mainFrameMainResource(WebKit::WebResourceLoader *this)
{
  WebCore::ResourceLoader *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (WebCore::ResourceLoader *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)v2 + 4);
  if (!v3 || *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) != v3)
    return 0;
  result = WebCore::ResourceLoader::frameLoader(v2);
  if (result)
    return *(_BYTE *)(result + 48) && *(_QWORD *)(result + 40) == *(_QWORD *)(*((_QWORD *)this + 2) + 744);
  return result;
}

uint64_t WebKit::WebResourceLoader::willSendRequest(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  WTF::RefCountedBase *v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::RefCountedBase *v26;
  CFTypeRef v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  CFTypeRef v33;
  _BYTE v34[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  CFTypeRef cf;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)v34 = v9;
  WebCore::ResourceRequestBase::setHTTPBody();
  v10 = *(WTF::RefCountedBase **)v34;
  *(_QWORD *)v34 = 0;
  if (v10)
    WTF::RefCounted<WebCore::FormData>::deref(v10);
  v11 = off_1ECE713E8;
  v12 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
    v17 = v16 - *(double *)(a1 + 80);
    *(_DWORD *)v34 = 134219008;
    *(_QWORD *)&v34[4] = a1;
    v35 = 2048;
    v36 = v13;
    v37 = 2048;
    v38 = v14;
    v39 = 2048;
    v40 = v15;
    v41 = 2048;
    v42 = v17;
    _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::willSendRequest:", v34, 0x34u);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 24);
    if (v19)
    {
      if (*(_QWORD *)(v19 + 8))
      {
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
        WebKit::WebResourceLoader::mainFrameMainResource((WebKit::WebResourceLoader *)a1);
        if ((WebCore::Page::allowsLoadFromURL() & 1) == 0)
        {
          WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v34);
          WebCore::ResourceRequestBase::RequestData::operator=(a2, (uint64_t)v34);
          v21 = v43;
          v43 = 0;
          v22 = *(WTF::StringImpl **)(a2 + 152);
          *(_QWORD *)(a2 + 152) = v21;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v20);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v44;
          v44 = 0;
          v24 = *(WTF::StringImpl **)(a2 + 160);
          *(_QWORD *)(a2 + 160) = v23;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v20);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v45;
          v45 = 0;
          v26 = *(WTF::RefCountedBase **)(a2 + 168);
          *(_QWORD *)(a2 + 168) = v25;
          if (v26)
            WTF::RefCounted<WebCore::FormData>::deref(v26);
          *(_QWORD *)(a2 + 176) = v46;
          *(_BYTE *)(a2 + 184) = v47;
          v27 = cf;
          cf = 0;
          v28 = *(const void **)(a2 + 192);
          *(_QWORD *)(a2 + 192) = v27;
          if (v28)
          {
            CFRelease(v28);
            v33 = cf;
            cf = 0;
            if (v33)
              CFRelease(v33);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
        }
      }
    }
  }
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *a5;
  *a5 = 0;
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v31 = &off_1E34EB490;
  v31[1] = a1;
  v31[2] = a1;
  v31[3] = v30;
  *(_QWORD *)v34 = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v29 + 192))(v29, a2, a4, v34);
  result = *(_QWORD *)v34;
  *(_QWORD *)v34 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

_QWORD *WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0::~$_0(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _DWORD *v5;

  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

_QWORD *WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[17];
  a1[17] = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  v4 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

_QWORD *WebKit::WebResourceLoader::didFailServiceWorkerLoad(WebKit::WebResourceLoader *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(v4 + 32);
  if (v5 && *(_QWORD *)(v5 + 296) && (*(_BYTE *)(v4 + 976) || *((_BYTE *)a2 + 60) == 1))
  {
    MEMORY[0x19AEB7BFC](a2);
    WebCore::Document::addConsoleMessage();
    if (*(_BYTE *)(*((_QWORD *)this + 2) + 976))
    {
      MEMORY[0x19AEB7BFC](a2);
      v7 = a2[1];
      if (v7)
        *(_DWORD *)v7 += 2;
      v12 = v7;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Cannot load ", 13, (uint64_t *)&v12, 46, &v13);
      WebCore::Document::addConsoleMessage();
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return WebKit::WebResourceLoader::didFailResourceLoad(this, (const WebCore::ResourceError *)a2);
}

_QWORD *WebKit::WebResourceLoader::didFailResourceLoad(WebKit::WebResourceLoader *this, const WebCore::ResourceError *a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE buf[22];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  v5 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = *((_QWORD *)this + 4);
    v7 = *((_QWORD *)this + 5);
    v8 = *((_QWORD *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    v10 = v9 - *((double *)this + 10);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    v20 = 2048;
    v21 = v7;
    v22 = 2048;
    v23 = v8;
    v24 = 2048;
    v25 = v10;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didFailResourceLoad:", buf, 0x34u);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 2);
  if (!*((_QWORD *)this + 8))
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, const WebCore::ResourceError *))(*v11 + 240))(v11, a2);
  v13 = v11[93];
  v14 = (_QWORD *)*((_QWORD *)this + 2);
  v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*((_QWORD *)this + 8), v13);
  v11 = v14;
  if (!v15)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, const WebCore::ResourceError *))(*v11 + 240))(v11, a2);
  ++*((_DWORD *)this + 2);
  *(_QWORD *)buf = this;
  *(_QWORD *)&buf[8] = this;
  WebCore::ResourceError::ResourceError((uint64_t)&buf[16], (uint64_t)a2);
  WTF::Function<void ()(void)>::Function<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>(&v18, (uint64_t *)buf);
  WebKit::WebResourceInterceptController::defer(*((_QWORD *)this + 8), v13, &v18);
  v17 = v18;
  v18 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0(buf, v16);
}

WTF::StringImpl *WebKit::WebResourceLoader::serviceWorkerDidNotHandle(WebKit::WebResourceLoader *this)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  _BYTE v14[22];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20[2];
  CFTypeRef cf;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  v3 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    v8 = v7 - *((double *)this + 10);
    *(_DWORD *)v14 = 134219008;
    *(_QWORD *)&v14[4] = this;
    *(_WORD *)&v14[12] = 2048;
    *(_QWORD *)&v14[14] = v4;
    v15 = 2048;
    v16 = v5;
    v17 = 2048;
    v18 = v6;
    v19 = 2048;
    v20[0] = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::serviceWorkerDidNotHandle:", v14, 0x34u);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 2) + 336));
  WebCore::createInternalError();
  WebCore::ResourceErrorBase::setType();
  (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 2) + 240))(*((_QWORD *)this + 2), v14);
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(WTF::StringImpl **)((char *)v20 + 4);
  *(double *)((char *)v20 + 4) = 0.0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)&v14[8];
  *(_QWORD *)&v14[8] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = *(WTF::StringImpl **)v14;
  *(_QWORD *)v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;
  int v12;
  const void *v13;

  v4 = WTF::fastMalloc((WTF *)0x68);
  v5 = v4;
  v6 = *a2;
  *(_QWORD *)v4 = off_1E34EB580;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v7;
  v8 = (_DWORD *)a2[2];
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v4 + 24) = v8;
  v9 = (_DWORD *)a2[3];
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v4 + 32) = v9;
  v10 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v4 + 56) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v4 + 40) = v10;
  v11 = (_DWORD *)a2[8];
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v4 + 72) = v11;
  v12 = *((_DWORD *)a2 + 18);
  *(_WORD *)(v4 + 84) = *((_WORD *)a2 + 38);
  *(_DWORD *)(v4 + 80) = v12;
  v13 = (const void *)a2[10];
  *(_QWORD *)(v5 + 88) = v13;
  if (v13)
    CFRetain(v13);
  *(_BYTE *)(v5 + 96) = *((_BYTE *)a2 + 88);
  *a1 = v5;
  return a1;
}

_QWORD *WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;

  v3 = (const void *)a1[10];
  a1[10] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  return a1;
}

uint64_t WebKit::WebResourceLoader::didBlockAuthenticationChallenge(WebKit::WebResourceLoader *this)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  int v10;
  WebKit::WebResourceLoader *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  v3 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    v8 = v7 - *((double *)this + 10);
    v10 = 134219008;
    v11 = this;
    v12 = 2048;
    v13 = v4;
    v14 = 2048;
    v15 = v5;
    v16 = 2048;
    v17 = v6;
    v18 = 2048;
    v19 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didBlockAuthenticationChallenge:", (uint8_t *)&v10, 0x34u);
  }
  return WebCore::ResourceLoader::didBlockAuthenticationChallenge(*((WebCore::ResourceLoader **)this + 2));
}

uint64_t WebKit::WebResourceLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied(WebKit::WebResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  NSObject *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int v11;
  WebKit::WebResourceLoader *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = off_1ECE713E8;
  v4 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *((_QWORD *)this + 5);
    v7 = *((_QWORD *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
    v9 = v8 - *((double *)this + 10);
    v11 = 134219008;
    v12 = this;
    v13 = 2048;
    v14 = v5;
    v15 = 2048;
    v16 = v6;
    v17 = 2048;
    v18 = v7;
    v19 = 2048;
    v20 = v9;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied:", (uint8_t *)&v11, 0x34u);
  }
  return WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied();
}

unsigned int *WebKit::WebResourceLoader::didReceiveResource(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unsigned int *result;
  NSObject *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Page *v25;
  WebCore::DiagnosticLoggingKeys *v26;
  WebCore::DiagnosticLoggingKeys *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  _BYTE buf[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  v3 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    v8 = v7 - *(double *)(a1 + 80);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v35 = 2048;
    v36 = v4;
    v37 = 2048;
    v38 = v5;
    v39 = 2048;
    v40 = v6;
    v41 = 2048;
    v42 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResource:", buf, 0x34u);
  }
  WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
  v10 = v33;
  if (v33)
  {
    ++*(_DWORD *)(a1 + 8);
    if (v10[12])
    {
      v11 = *(_QWORD *)(a1 + 16);
      v33 = 0;
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v11 + 216))(v11, v10);
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v12);
    }
    if (*(_QWORD *)(a1 + 16))
    {
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16), buf);
      WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf, v13);
    }
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
  else
  {
    v15 = off_1ECE713E8;
    v16 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      v21 = v20 - *(double *)(a1 + 80);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      v35 = 2048;
      v36 = v17;
      v37 = 2048;
      v38 = v18;
      v39 = 2048;
      v40 = v19;
      v41 = 2048;
      v42 = v21;
      _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResource: Unable to create FragmentedSharedBuffer", buf, 0x34u);
    }
    v22 = *(_QWORD **)(a1 + 16);
    v23 = v22[4];
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      if (v24)
      {
        v25 = *(WebCore::Page **)(v24 + 8);
        if (v25)
        {
          v26 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(v25);
          v27 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey(v26);
          WebCore::DiagnosticLoggingKeys::createSharedBufferFailedKey(v27);
          (**(void (***)(WebCore::DiagnosticLoggingKeys *, _BYTE *, WTF::StringImpl **, _QWORD))v26)(v26, buf, &v32, 0);
          v29 = v32;
          v32 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v28);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v28);
            else
              *(_DWORD *)v30 -= 2;
          }
          v22 = *(_QWORD **)(a1 + 16);
        }
      }
    }
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v22 + 42));
    WebCore::createInternalError();
    (*(void (**)(_QWORD *, _BYTE *))(*v22 + 240))(v22, buf);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v31);
  }
  result = v33;
  v33 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v9);
  return result;
}

uint64_t WebKit::WebResourceLoader::contentFilterDidBlockLoad(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const void *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  _QWORD *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _BYTE v30[24];
  _BYTE *v31;
  CFTypeRef cf;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(result + 16);
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
    return result;
  WTF::String::operator=((WTF::StringImpl **)(v7 + 2976), (WTF::StringImpl *)a5);
  v12 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(v7 + 2984) = *(_OWORD *)(a5 + 8);
  *(_OWORD *)(v7 + 3000) = v12;
  v13 = *a6;
  *a6 = 0;
  v14 = *(unsigned int **)(v7 + 3016);
  *(_QWORD *)(v7 + 3016) = v13;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v11);
  WTF::URL::operator=(v7 + 3024, (WTF::StringImpl *)(a6 + 1));
  WebCore::ResourceResponseBase::operator=(v7 + 3064, (uint64_t)(a6 + 6));
  v15 = a6[36];
  a6[36] = 0;
  v16 = *(const void **)(v7 + 3304);
  *(_QWORD *)(v7 + 3304) = v15;
  if (v16)
    CFRelease(v16);
  *(_BYTE *)(v7 + 3312) = *((_BYTE *)a6 + 296);
  *(_BYTE *)(v7 + 3320) = *((_BYTE *)a6 + 304);
  v17 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v17 += 2;
  v28 = v17;
  v18 = *(WTF::StringImpl **)(a2 + 8);
  if (v18)
    *(_DWORD *)v18 += 2;
  v29 = v18;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100]((uint64_t)v30, a2 + 48);
  v19 = *(const void **)(a2 + 80);
  cf = v19;
  if (v19)
    CFRetain(v19);
  v33 = *(_BYTE *)(a2 + 88);
  WebCore::DocumentLoader::handleContentFilterDidBlock();
  if (v27)
    CFRelease(v27);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  v22 = v31;
  if (v31 == v30)
  {
    v23 = 4;
    v22 = v30;
    goto LABEL_33;
  }
  if (v31)
  {
    v23 = 5;
LABEL_33:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v20);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v20);
    else
      *(_DWORD *)v28 -= 2;
  }
  return WebCore::DocumentLoader::cancelMainResourceLoad();
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::WebSocketChannel&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3 + 8);
  v21 = *(unsigned int **)(a3 + 16);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)result));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannelManager::networkProcessCrashed(WTF::StringImpl *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebSocketChannel *v10;
  _QWORD *v11;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = (_QWORD *)(v2 + 16 * v3);
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = (_QWORD *)(v2 + 16 * v3);
    goto LABEL_10;
  }
  v5 = (_QWORD *)v2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_QWORD *)v2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
    v7 = (_QWORD *)(v2 + 16 * *(unsigned int *)(v2 - 4));
  else
    v7 = 0;
  while (v5 != v7)
  {
    v8 = v5[1];
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v10 = (WebKit::WebSocketChannel *)(v9 - 8);
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    this = WebKit::WebSocketChannel::networkProcessCrashed(v10);
    v11 = v5 + 2;
    v5 = v4;
    if (v11 != v4)
    {
      v5 = v11;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  if (v2)
    return (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, a2);
  return this;
}

uint64_t WebKit::WebSocketChannelManager::didReceiveMessage(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(_QWORD *)(a3 + 64);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v10);
  v7 = *a1;
  if (*a1)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  if (v7 != result)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
    if (v8)
      v9 = v8 - 8;
    else
      v9 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, a2, a3);
  }
  return result;
}

uint64_t WebKit::WebSocketProvider::createWebSocketChannel@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = WTF::fastMalloc((WTF *)0x2B0);
  result = WebKit::WebSocketChannel::WebSocketChannel(v8, v7, a2, a3);
  *a4 = result + 24;
  return result;
}

IPC::Encoder *WebKit::WebSocketProvider::initializeWebTransportSession(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  IPC::Encoder *result;
  _QWORD *v8;
  uint64_t v9;
  WebKit::WebProcess *v10;
  os_unfair_lock_s *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
  {
    v20[0] = 0;
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = (IPC::Encoder *)v20[0];
    v20[0] = 0;
    if (result)
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34EB5A8;
    v9 = *a4;
    *a4 = 0;
    v8[1] = v9;
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v10 = WebKit::WebProcess::WebProcess(v19);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
    }
    v11 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v10) + 24);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E34EB630;
    v12[1] = v8;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 232;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v21 = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
    v20[0] = (uint64_t)v12;
    v20[1] = v13;
    IPC::Connection::sendMessageWithAsyncReply(v11, &v21, v20, 0, 0);
    v16 = v20[0];
    v20[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::WebTransportReceiveStreamSource::receiveBytes(WTF::DeferrableRefCountedBase *result, const void *a2, JSC::ArrayBuffer *this)
{
  WTF::DeferrableRefCountedBase *v5;
  unint64_t v6;
  uint64_t v7;
  id v9;
  WTF::DeferrableRefCountedBase *v10;

  if (!*((_BYTE *)result + 36))
  {
    v5 = result;
    JSC::ArrayBuffer::tryCreateUninitialized(this);
    if (v10)
    {
      v6 = *((_QWORD *)v10 + 2);
      if (v6)
      {
        v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v7)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || *MEMORY[0x1E0CC10F0] == 0)
            v6 = (v6 & 0x3FFFFFFFFLL) + v7;
        }
      }
      memcpy((void *)v6, a2, (size_t)this);
    }
    if (*((_BYTE *)v5 + 24))
    {
      if ((WebCore::ReadableStreamDefaultController::enqueue() & 1) == 0)
        (*(void (**)(WTF::DeferrableRefCountedBase *))(*(_QWORD *)v5 + 64))(v5);
      result = v10;
      if (v10)
        return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v10);
    }
    else
    {
      v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF::DeferrableRefCountedBase *)WebKit::WebTransportReceiveStreamSource::doCancel((uint64_t)v9);
    }
  }
  return result;
}

uint64_t WebKit::WebTransportReceiveStreamSource::doCancel(uint64_t this)
{
  *(_BYTE *)(this + 36) = 1;
  return this;
}

void WebKit::WebTransportSendStreamSink::~WebTransportSendStreamSink(WebKit::WebTransportSendStreamSink *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34EB2B0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34EB2B0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebTransportSendStreamSink::write(JSC::ArrayBufferView *a1, WebCore::ScriptExecutionContext *this, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)();
  JSC::ArrayBufferView *v20;
  uint64_t v21;
  int v22;
  JSC::ArrayBufferView *v23;
  char v24;
  JSC::ArrayBufferView *v25;
  WTF::StringImpl *v26;
  char v27[8];
  WTF::StringImpl *v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 2);
  if (v5 && *(_QWORD *)(v5 + 8) && WebCore::ScriptExecutionContext::globalObject(this))
  {
    v21 = *(_QWORD *)(WebCore::ScriptExecutionContext::globalObject(this) + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_12;
    v9 = *(unsigned __int8 *)(a3 + 5);
    if (v9 == 38)
    {
      v10 = *(_QWORD *)(a3 + 16);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 32)
            ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
            : 0;
        if (!v11 && !*(_BYTE *)(v10 + 64))
        {
          *(_DWORD *)v10 += 2;
          v25 = (JSC::ArrayBufferView *)v10;
          LODWORD(v26) = 0;
          LOBYTE(v28) = 0;
          v29 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v28, (uint64_t)&v25);
          v30 = 0;
          if ((_DWORD)v26 != -1)
            ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E34EB450[v26])(&v23, &v25);
          goto LABEL_13;
        }
      }
      goto LABEL_12;
    }
    if ((v9 - 39) > 0xB)
    {
LABEL_12:
      JSC::throwTypeError();
      v30 = 1;
      goto LABEL_13;
    }
    v15 = *(unsigned __int8 *)(a3 + 40);
    v16 = v15 - 88;
    if ((v15 - 88) <= 0x35)
    {
      if (((1 << v16) & 0x3D) != 0)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a3 + 8) - 8);
LABEL_35:
        if (*(_QWORD *)(v17 + 32))
          v18 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        else
          v18 = 0;
        if (v18)
          goto LABEL_12;
        goto LABEL_39;
      }
      if (((1 << v16) & 0x3D000000000000) != 0)
      {
        v17 = *(_QWORD *)(a3 + 48);
        goto LABEL_35;
      }
    }
LABEL_39:
    if ((v15 & 6) == 0)
    {
      JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)a3);
      if (v23)
      {
        if (!JSC::ArrayBufferView::isDetached(v23))
        {
          if (*(_QWORD *)(*((_QWORD *)v23 + 4) + 32)
             ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
             : 0)
          {
            goto LABEL_51;
          }
        }
        v20 = v23;
        v23 = 0;
        v25 = v20;
        LODWORD(v26) = 1;
        LOBYTE(v28) = 0;
        v29 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v28, (uint64_t)&v25);
        v30 = 0;
        if ((_DWORD)v26 != -1)
          ((void (*)(char *, JSC::ArrayBufferView **))off_1E34EB450[v26])(&v24, &v25);
        v23 = 0;
LABEL_13:
        if (v30)
        {
          LOBYTE(v25) = 37;
          v26 = 0;
          WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a4, (uint64_t)&v25);
          result = (uint64_t)v26;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              result = WTF::StringImpl::destroy(v26, v14);
            else
              *(_DWORD *)v26 -= 2;
          }
          goto LABEL_17;
        }
        LOBYTE(v21) = 0;
        v22 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v21, (uint64_t)&v28);
        v25 = a1;
        v26 = (WTF::StringImpl *)a4;
        if (v22 != -1)
        {
          v23 = (JSC::ArrayBufferView *)&v25;
          result = ((uint64_t (*)(JSC::ArrayBufferView **, uint64_t *))off_1E34EB5C0[v22])(&v23, &v21);
          if (v22 != -1)
            result = ((uint64_t (*)(JSC::ArrayBufferView **, uint64_t *))off_1E34EB450[v22])(&v25, &v21);
LABEL_17:
          if (v30 != -1)
            return ((uint64_t (*)(JSC::ArrayBufferView **, WTF::StringImpl **))off_1E34EB470[v30])(&v25, &v28);
          return result;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_51:
        result = 90;
        __break(0xC471u);
        return result;
      }
    }
    goto LABEL_12;
  }
  v27[0] = 8;
  v28 = 0;
  WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a4, (uint64_t)v27);
  result = (uint64_t)v28;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      return WTF::StringImpl::destroy(v28, v13);
    else
      *(_DWORD *)v28 -= 2;
  }
  return result;
}

uint64_t WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;

  v2 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = v2;
  WebCore::DeferredPromise::reject();
  result = (uint64_t)v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSendStreamSink::sendBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[2];
  IPC::Encoder *v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v23[1] = a3;
    v24 = v7;
    v23[0] = a2;
    v21[0] = &v24;
    v21[1] = v23;
    v22 = 0;
    v9 = *(_QWORD *)(v6 + 16);
    v8 = v6 + 16;
    v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 587;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v26 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,0ul,1ul,2ul>(v11, (uint64_t)v21);
    v12 = *a4;
    *a4 = 0;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = &off_1E34EB6D0;
    v13[1] = v12;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v25[0] = v13;
    v25[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v8 + 40))(v8, &v26, v25, 0);
    v16 = v25[0];
    v25[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = v26;
    v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  else
  {
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  return result;
}

void WebKit::WebTransportSession::~WebTransportSession(WebKit::WebTransportSession *this)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  WebKit::WebProcess *v14;
  WebKit::WebProcess *v15;
  IPC::Encoder *v16;

  *(_QWORD *)this = off_1E34EB2E8;
  *((_QWORD *)this + 3) = &unk_1E34EB350;
  *((_QWORD *)this + 5) = &unk_1E34EB388;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::removeWebTransportSession((uint64_t)v2, *((_QWORD *)this + 7));
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 226;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v16 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)this + 7);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v16, 0, 0);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v8, v9);
  }
  v10 = *((_QWORD *)this + 8);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_DWORD **)(v10 + 8);
      do
      {
        if (*(v12 - 1) != (_DWORD *)-1)
        {
          v13 = *v12;
          *v12 = 0;
          if (v13)
          {
            if (v13[8] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            else
              --v13[8];
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), v6);
  }
  *((_QWORD *)this + 3) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v6);
  WebCore::WebTransportSession::~WebTransportSession(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebTransportSession::~WebTransportSession(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebTransportSession::~WebTransportSession(WebKit::WebTransportSession *this)
{
  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 24));
}

{
  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebTransportSession::messageSenderConnection(WebKit::WebTransportSession *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t `non-virtual thunk to'WebKit::WebTransportSession::messageSenderConnection(WebKit::WebTransportSession *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t WebKit::WebTransportSession::messageSenderDestinationID(WebKit::WebTransportSession *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t `non-virtual thunk to'WebKit::WebTransportSession::messageSenderDestinationID(WebKit::WebTransportSession *this)
{
  return *((_QWORD *)this + 2);
}

unsigned __int8 *WebKit::WebTransportSession::receiveDatagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *result;
  void *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  result = *(unsigned __int8 **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 16), &v9);
    result = v9;
    if (v9)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2, a3);
      v8 = v9;
      v9 = 0;
      if (v8)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v8 + 1), v7);
    }
  }
  return result;
}

unsigned __int8 *WebKit::WebTransportSession::receiveIncomingUnidirectionalStream(uint64_t a1)
{
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  result = *(unsigned __int8 **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 16), &v5);
    result = v5;
    if (v5)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 24))(v5);
      v4 = v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v4 + 1), v3);
    }
  }
  return result;
}

unsigned __int8 *WebKit::WebTransportSession::receiveBidirectionalStream(uint64_t a1)
{
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  result = *(unsigned __int8 **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 16), &v5);
    result = v5;
    if (v5)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 32))(v5);
      v4 = v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v4 + 1), v3);
    }
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::WebTransportSession::streamReceiveBytes(uint64_t a1, uint64_t a2, const void *a3, JSC::ArrayBuffer *a4)
{
  WTF::DeferrableRefCountedBase *result;
  uint64_t v7;

  v7 = a2;
  result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v7);
  if (result)
    return WebKit::WebTransportReceiveStreamSource::receiveBytes(result, a3, a4);
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::sendDatagram(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  IPC::Encoder *v18;

  v7 = a1 + 40;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 56))(a1 + 40);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 585;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v18 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34EB658;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v18, v17, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::createOutgoingUnidirectionalStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v4 = a1 + 40;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 32), a1 + 24);
  v5 = *(unsigned int **)(a1 + 32);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *a2;
  *a2 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 56))(v4);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 582;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E34EB680;
  v10[1] = a1;
  v10[2] = v5;
  v10[3] = v7;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 40) + 40))(v4, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::createBidirectionalStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v4 = a1 + 40;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 32), a1 + 24);
  v5 = *(unsigned int **)(a1 + 32);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *a2;
  *a2 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 56))(v4);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 581;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E34EB6A8;
  v10[1] = a1;
  v10[2] = v5;
  v10[3] = v7;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 40) + 40))(v4, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

char *WebKit::WebTransportSession::terminate(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  void *v17;
  char *result;
  WTF *v19;
  void *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  IPC::Encoder *v24;

  v5 = a1 + 40;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 56))(a1 + 40);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 588;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v24 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v9 + 4;
  v11 = *(_QWORD *)(v7 + 552);
  if (v11 < v9 + 4)
  {
    v21 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v22 = v21;
      v21 *= 2;
    }
    while (v22 < v10);
    result = (char *)mmap(0, v22, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v12 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v23 = *(void **)(v7 + 528);
    if (v23 != (void *)(v7 + 16))
      munmap(v23, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v12;
    *(_QWORD *)(v7 + 552) = v22;
    v8 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v12 = *(char **)(v7 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v7 + 544) = v10;
  v13 = (_DWORD *)(*(_QWORD *)(v7 + 528) + v9);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  v14 = *a3;
  if (*a3)
  {
    v15 = (const void *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, v15, v16);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v24, 0);
  result = (char *)v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
    return (char *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve@<X0>(rtc::SocketAddress *a1@<X1>, uint64_t a2@<X2>, WebKit::LibWebRTCResolver **a3@<X8>)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  WebKit::LibWebRTCResolver *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  WebKit::WebProcess *v12;
  _BYTE v13[16];
  __int128 v14;
  uint64_t v15;
  WebKit::LibWebRTCResolver *v16;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  WebKit::WebProcess::libWebRTCNetwork(v6);
  WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver((WebKit::LibWebRTCSocketFactory *)(v7 + 24), &v16);
  v8 = v16;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a2 + 16))(0, a2, v13);
  v14 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v9 = off_1E34EB6F8;
  ((void (*)(_QWORD, _BYTE *, uint64_t))v14)(0, v13, v9 + 8);
  *(_OWORD *)(v9 + 24) = v14;
  v14 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v15 = v9;
  WebKit::LibWebRTCResolver::start((uint64_t)v8, a1, &v15);
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v14)(1, v13, v13);
  *a3 = v8;
  return result;
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve@<X0>(rtc::SocketAddress *a1@<X1>, uint64_t a2@<X3>, WebKit::LibWebRTCResolver **a3@<X8>)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  WebKit::LibWebRTCResolver *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  WebKit::WebProcess *v12;
  _BYTE v13[16];
  __int128 v14;
  uint64_t v15;
  WebKit::LibWebRTCResolver *v16;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  WebKit::WebProcess::libWebRTCNetwork(v6);
  WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver((WebKit::LibWebRTCSocketFactory *)(v7 + 24), &v16);
  v8 = v16;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a2 + 16))(0, a2, v13);
  v14 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v9 = off_1E34EB720;
  ((void (*)(_QWORD, _BYTE *, uint64_t))v14)(0, v13, v9 + 8);
  *(_OWORD *)(v9 + 24) = v14;
  v14 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v15 = v9;
  WebKit::LibWebRTCResolver::start((uint64_t)v8, a1, &v15);
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v14)(1, v13, v13);
  *a3 = v8;
  return result;
}

uint64_t *WebKit::LibWebRTCDnsResolverFactory::Create@<X0>(WebKit::LibWebRTCResolver **a1@<X8>)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  WebKit::WebProcess *v6;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  WebKit::WebProcess::libWebRTCNetwork(v3);
  return WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver((WebKit::LibWebRTCSocketFactory *)(v4 + 24), a1);
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  __int128 v10;
  uint64_t v11;

  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v9);
  v10 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = off_1E34EB748;
  ((void (*)(_QWORD, _BYTE *, uint64_t))v10)(0, v9, v6 + 8);
  *(_OWORD *)(v6 + 24) = v10;
  v10 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v11 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a2, &v11);
  v7 = v11;
  v11 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v10)(1, v9, v9);
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  __int128 v11;
  uint64_t v12;

  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v10);
  v11 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a4 + 24) = 0;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = off_1E34EB770;
  ((void (*)(_QWORD, _BYTE *, uint64_t))v11)(0, v10, v7 + 8);
  *(_OWORD *)(v7 + 24) = v11;
  v11 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v12 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a2, &v12);
  v8 = v12;
  v12 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v11)(1, v10, v10);
}

void WebKit::WebTransportReceiveStreamSource::~WebTransportReceiveStreamSource(WebKit::WebTransportReceiveStreamSource *this)
{
  WTF *v1;
  void *v2;

  WebCore::ReadableStreamSource::~ReadableStreamSource(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::RefCountedReadableStreamSource::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

_DWORD *WebCore::RefCountedReadableStreamSource::deref(_DWORD *this)
{
  if (this[8] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[8];
  return this;
}

uint64_t WebKit::WebTransportSession::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 48);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebKit::WebTransportSession::deref(WebKit::WebTransportSession *this)
{
  return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref((unsigned int *)this + 12);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (*(_QWORD *)(a1 + 40 * i) == -1)
        continue;
      v4 = a1 + 40 * i;
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v4 + 16);
      v7 = v4 + 8;
      v9 = (WTF **)(v7 + 16);
      v8 = *(WTF **)(v7 + 16);
      if (v5 > v6)
      {
        v23 = (unint64_t *)v7;
        v24 = *(WTF **)(v7 + 16);
        v28 = i;
        v30 = (WTF **)(v7 + 16);
        v26 = v2;
        v33 = a1;
        if (v6)
        {
          v20 = 8 * v6;
          do
          {
            v21 = *(_QWORD *)v24;
            *(_QWORD *)v24 = 0;
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v24 = (WTF *)((char *)v24 + 8);
            v20 -= 8;
          }
          while (v20);
          v24 = *v30;
          v5 = *v23;
        }
        a1 = v33;
        v2 = v26;
        i = v28;
        v16 = *(unsigned int *)(v33 + 40 * v28 + 32);
        v9 = v30;
        if (v5 != v16)
        {
          v17 = (uint64_t *)((char *)v24 + 8 * v5);
          v18 = 8 * v16 - 8 * v5;
          do
          {
            v19 = *v17;
            *v17 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            ++v17;
            v18 -= 8;
            a1 = v33;
            v2 = v26;
            i = v28;
            v9 = v30;
          }
          while (v18);
        }
      }
      else
      {
        if (v5 == v6)
        {
          if (v8)
            goto LABEL_14;
          continue;
        }
        v10 = (_QWORD *)((char *)v8 + 8 * v5);
        v11 = 8 * v6 - 8 * v5;
        v27 = i;
        v31 = a1;
        v25 = v2;
        v29 = (WTF **)(v7 + 16);
        do
        {
          v12 = *v10;
          v13 = v10;
          *v10 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          v10 = v13 + 1;
          v11 -= 8;
          a1 = v31;
          v2 = v25;
          i = v27;
          v9 = v29;
        }
        while (v11);
      }
      v8 = *v9;
      if (*v9)
      {
LABEL_14:
        *v9 = 0;
        *(_DWORD *)(a1 + 40 * i + 32) = 0;
        v32 = a1;
        v14 = v2;
        v15 = i;
        WTF::fastFree(v8, a2);
        i = v15;
        v2 = v14;
        a1 = v32;
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::DeferredPromise::resolve(uint64_t this)
{
  uint64_t v1;
  _BYTE v2[8];

  v1 = *(_QWORD *)(this + 24);
  if (v1 && *(_QWORD *)v1 && (*(_BYTE *)(v1 + 8) & 3) == 0)
  {
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction();
    return MEMORY[0x19AEAA9E4](v2);
  }
  return this;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34EB450[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34EB460[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34EB450[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 40 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return 0;
  }
  return v7;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  WTF *v19;
  uint64_t **v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  WTF *v37;
  __n128 *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t *v79;
  __n128 *v80;
  __n128 *v81;
  unint64_t *v82;
  __n128 *v83;
  __n128 *v84;
  WTF **v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t **v91;
  _QWORD *v92;
  _QWORD *v93;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0uLL;
    while (1)
    {
      v13 = (_QWORD *)(v4 + 40 * v11);
      v14 = *v13;
      if (*v13 == -1)
        goto LABEL_27;
      if (v14)
        break;
      v15 = v4 + 40 * v11;
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(v15 + 16);
      v18 = (unint64_t *)(v15 + 8);
      v20 = (uint64_t **)(v18 + 2);
      v19 = (WTF *)v18[2];
      if (v16 > v17)
      {
        v90 = (uint64_t *)v18[2];
        v91 = (uint64_t **)(v18 + 2);
        if (v17)
        {
          v69 = 8 * v17;
          do
          {
            v70 = *v90;
            *v90 = 0;
            if (v70)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v70 + 8))(v70, v12);
            ++v90;
            v69 -= 8;
          }
          while (v69);
          v90 = *v91;
          v16 = *v18;
        }
        v56 = *(unsigned int *)(v4 + 40 * v11 + 32);
        if (v16 != v56)
        {
          v57 = &v90[v16];
          v58 = 8 * v56 - 8 * v16;
          do
          {
            v59 = *v57;
            *v57 = 0;
            if (v59)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v59 + 8))(v59, v12);
            ++v57;
            v58 -= 8;
          }
          while (v58);
        }
LABEL_32:
        v20 = v91;
        v19 = (WTF *)*v91;
        v12 = 0uLL;
        if (!*v91)
          goto LABEL_27;
LABEL_14:
        *v20 = 0;
        *(_DWORD *)(v4 + 40 * v11 + 32) = 0;
        WTF::fastFree(v19, v8);
        v12 = 0uLL;
        goto LABEL_27;
      }
      if (v16 != v17)
      {
        v91 = (uint64_t **)(v18 + 2);
        v45 = (uint64_t *)((char *)v19 + 8 * v16);
        v46 = 8 * v17 - 8 * v16;
        do
        {
          v47 = *v45;
          *v45 = 0;
          if (v47)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v47 + 8))(v47, v12);
          ++v45;
          v46 -= 8;
        }
        while (v46);
        goto LABEL_32;
      }
      if (v19)
        goto LABEL_14;
LABEL_27:
      if (++v11 == v5)
        goto LABEL_82;
    }
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 8);
    else
      v22 = 0;
    v23 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = 1;
    do
    {
      v28 = v26;
      v29 = (_QWORD *)(v21 + 40 * v26);
      v26 = (v26 + v27++) & v22;
    }
    while (*v29);
    v30 = v28;
    v31 = v21 + 40 * v28;
    v34 = *(_QWORD *)(v31 + 8);
    v33 = (__n128 *)(v31 + 8);
    v32 = v34;
    v35 = &v33->n128_u64[1];
    v36 = v33->n128_u64[1];
    v38 = v33 + 1;
    v37 = (WTF *)v33[1].n128_u64[0];
    v39 = v34 == v36;
    if (v34 > v36)
    {
      v80 = v33 + 1;
      v83 = v33;
      v77 = v30;
      v78 = &v33->n128_u64[1];
      v86 = *a1;
      v89 = v29;
      v92 = (_QWORD *)(v4 + 40 * v11);
      v76 = (uint64_t *)v33[1].n128_u64[0];
      if (v36)
      {
        v71 = 8 * v36;
        do
        {
          v72 = *v76;
          *v76 = 0;
          if (v72)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v72 + 8))(v72, v12);
          ++v76;
          v71 -= 8;
        }
        while (v71);
        v76 = (uint64_t *)v80->n128_u64[0];
        v32 = v83->n128_u64[0];
      }
      v60 = *(unsigned int *)(v86 + 40 * v30 + 32);
      if (v32 != v60)
      {
        v61 = &v76[v32];
        v62 = 8 * v60 - 8 * v32;
        do
        {
          v63 = *v61;
          *v61 = 0;
          if (v63)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v63 + 8))(v63, v12);
          ++v61;
          v62 -= 8;
        }
        while (v62);
      }
    }
    else
    {
      if (v39)
      {
        if (v37)
        {
LABEL_38:
          v38->n128_u64[0] = 0;
          *(_DWORD *)(v21 + 40 * v30 + 32) = 0;
          v93 = v13;
          v51 = v29;
          v84 = v33;
          v87 = v21;
          v79 = v35;
          v81 = v38;
          WTF::fastFree(v37, v8);
          v12 = 0uLL;
          v38 = v81;
          v33 = v84;
          v35 = v79;
          v21 = v87;
          v29 = v51;
          v13 = v93;
        }
LABEL_24:
        *v29 = *v13;
        v40 = v4 + 40 * v11;
        *v33 = v12;
        v33[1] = v12;
        v42 = *(_QWORD *)(v40 + 24);
        v41 = v40 + 24;
        v33->n128_u64[0] = *(_QWORD *)(v41 - 16);
        *(_QWORD *)(v41 - 16) = 0;
        v43 = *v35;
        *v35 = *(_QWORD *)(v41 - 8);
        *(_QWORD *)(v41 - 8) = v43;
        v38->n128_u64[0] = v42;
        *(_QWORD *)v41 = 0;
        *(_DWORD *)(v21 + 40 * v30 + 32) = *(_DWORD *)(v41 + 8);
        *(_DWORD *)(v41 + 8) = 0;
        v44 = *(_QWORD *)(v41 - 16);
        if (v44 > v43)
        {
          v82 = (unint64_t *)(v41 - 16);
          v85 = (WTF **)v41;
          v88 = (_DWORD *)(v41 + 8);
          if (v43)
          {
            v73 = 0;
            v74 = 8 * v43;
            do
            {
              v75 = *v73;
              *v73 = 0;
              if (v75)
                (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
              ++v73;
              v74 -= 8;
            }
            while (v74);
            v65 = *v85;
            v44 = *v82;
            v64 = *v88;
          }
          else
          {
            v64 = 0;
            v65 = 0;
          }
          if (v44 != v64)
          {
            v66 = (uint64_t *)((char *)v65 + 8 * v44);
            v67 = 8 * v64 - 8 * v44;
            do
            {
              v68 = *v66;
              *v66 = 0;
              if (v68)
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
              ++v66;
              v67 -= 8;
            }
            while (v67);
          }
          goto LABEL_42;
        }
        if (v44 != v43)
        {
          v85 = (WTF **)v41;
          v88 = (_DWORD *)(v41 + 8);
          v52 = (uint64_t *)(8 * v44);
          v53 = 8 * v43 - 8 * v44;
          do
          {
            v54 = *v52;
            *v52 = 0;
            if (v54)
              (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
            ++v52;
            v53 -= 8;
          }
          while (v53);
LABEL_42:
          v55 = *v85;
          v12 = 0uLL;
          if (*v85)
          {
            *v85 = 0;
            *v88 = 0;
            WTF::fastFree(v55, v8);
            v12 = 0uLL;
          }
          goto LABEL_27;
        }
        goto LABEL_27;
      }
      v80 = v33 + 1;
      v83 = v33;
      v77 = v30;
      v78 = &v33->n128_u64[1];
      v86 = *a1;
      v89 = v29;
      v92 = (_QWORD *)(v4 + 40 * v11);
      v48 = (uint64_t *)((char *)v37 + 8 * v32);
      v49 = 8 * v36 - 8 * v32;
      do
      {
        v50 = *v48;
        *v48 = 0;
        if (v50)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v50 + 8))(v50, v12);
        ++v48;
        v49 -= 8;
      }
      while (v49);
    }
    v35 = v78;
    v38 = v80;
    v37 = (WTF *)v80->n128_u64[0];
    v29 = v89;
    v13 = v92;
    v33 = v83;
    v21 = v86;
    v30 = v77;
    v12 = 0uLL;
    if (v80->n128_u64[0])
      goto LABEL_38;
    goto LABEL_24;
  }
  if (v4)
LABEL_82:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  WTF *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int *v23;

  *(_QWORD *)a2 = -1;
  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = (WTF *)*((_QWORD *)a2 + 3);
  if (v2 > v3)
  {
    v21 = (uint64_t *)*((_QWORD *)a2 + 3);
    v22 = a1;
    v23 = a2;
    if (v3)
    {
      v19 = 8 * v3;
      do
      {
        v20 = *v21;
        *v21 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        ++v21;
        v19 -= 8;
      }
      while (v19);
      v21 = (uint64_t *)*((_QWORD *)v23 + 3);
      v2 = *((_QWORD *)v23 + 1);
    }
    v15 = v23[8];
    if (v2 != v15)
    {
      v16 = &v21[v2];
      v17 = 8 * v15 - 8 * v2;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
LABEL_18:
    a1 = v22;
    a2 = v23;
    v4 = (WTF *)*((_QWORD *)v23 + 3);
    if (!v4)
      goto LABEL_5;
    goto LABEL_19;
  }
  if (v2 != v3)
  {
    v22 = a1;
    v23 = a2;
    v11 = (uint64_t *)((char *)v4 + 8 * v2);
    v12 = 8 * v3 - 8 * v2;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      ++v11;
      v12 -= 8;
    }
    while (v12);
    goto LABEL_18;
  }
  if (!v4)
    goto LABEL_5;
LABEL_19:
  *((_QWORD *)a2 + 3) = 0;
  a2[8] = 0;
  v14 = a1;
  WTF::fastFree(v4, a2);
  a1 = v14;
LABEL_5:
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v9 >> 1);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 40 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::willSendRequest(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34EB490;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::willSendRequest(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34EB490;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::willSendRequest(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::ResourceLoader *v4;
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t isAllowedToAskUserForCredentials;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  CFTypeRef v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  CFTypeRef cf;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(WebCore::ResourceLoader **)(v3 + 16);
  if (v4 && *((_QWORD *)v4 + 93))
  {
    v6 = off_1ECE713E8;
    v7 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      v8 = *(_QWORD *)(v3 + 32);
      v9 = *(_QWORD *)(v3 + 40);
      v10 = *(_QWORD *)(v3 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
      v12 = v11 - *(double *)(v3 + 80);
      v24 = 134219008;
      v25 = v3;
      v26 = 2048;
      v27 = v8;
      v28 = 2048;
      v29 = v9;
      v30 = 2048;
      v31 = v10;
      v32 = 2048;
      v33 = v12;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::willSendRequest: returning ContinueWillSendRequest", (uint8_t *)&v24, 0x34u);
      v4 = *(WebCore::ResourceLoader **)(v3 + 16);
    }
    isAllowedToAskUserForCredentials = WebCore::ResourceLoader::isAllowedToAskUserForCredentials(v4);
    v14 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2, isAllowedToAskUserForCredentials);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v15 = off_1ECE713E8;
    v16 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      v17 = *(_QWORD *)(v3 + 32);
      v18 = *(_QWORD *)(v3 + 40);
      v19 = *(_QWORD *)(v3 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      v21 = v20 - *(double *)(v3 + 80);
      v24 = 134219008;
      v25 = v3;
      v26 = 2048;
      v27 = v17;
      v28 = 2048;
      v29 = v18;
      v30 = 2048;
      v31 = v19;
      v32 = 2048;
      v33 = v21;
      _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::willSendRequest: exiting early because no coreloader or identifier", (uint8_t *)&v24, 0x34u);
    }
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v24);
    v22 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v22 + 16))(v22, &v24, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = cf;
    cf = 0;
    if (v23)
      CFRelease(v23);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v24);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E34EB4B8;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E34EB4B8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_0,void>::call(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  double result;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  _BYTE v17[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *(double **)(a1 + 8);
  v2 = *((_QWORD *)v1 + 2);
  if (v2 && *(_QWORD *)(v2 + 744))
  {
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 56))(*(_QWORD *)(a1 + 8));
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 515;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    *(_QWORD *)v17 = v4;
    (*(void (**)(double *, _BYTE *, _QWORD))(*(_QWORD *)v1 + 32))(v1, v17, 0);
    v7 = *(IPC::Encoder **)v17;
    *(_QWORD *)v17 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v5);
      WTF::fastFree(v8, v9);
    }
  }
  else
  {
    v10 = off_1ECE713E8;
    v11 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      v12 = *((_QWORD *)v1 + 4);
      v13 = *((_QWORD *)v1 + 5);
      v14 = *((_QWORD *)v1 + 7);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      v16 = v15 - v1[10];
      *(_DWORD *)v17 = 134219008;
      *(_QWORD *)&v17[4] = v1;
      v18 = 2048;
      v19 = v12;
      v20 = 2048;
      v21 = v13;
      v22 = 2048;
      v23 = v14;
      v24 = 2048;
      v25 = v16;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResponse: not continuing load because no coreLoader or no ID", v17, 0x34u);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1,void,WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34EB4E0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1,void,WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34EB4E0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1,void,WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>>::call(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  void *v18;
  __int128 v19;
  _BYTE buf[12];
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  *a3 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD **)(v5 + 16);
  if (v6 && v6[93])
  {
    v19 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    v9 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v9 = &off_1E34EB508;
    *(_QWORD *)(v9 + 8) = v5;
    *(_OWORD *)(v9 + 16) = v19;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 40) = v4;
    *(_QWORD *)buf = v9;
    (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*v6 + 208))(v6, a2, buf);
    v10 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    v11 = off_1ECE713E8;
    v12 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      v13 = *(_QWORD *)(v5 + 32);
      v14 = *(_QWORD *)(v5 + 40);
      v15 = *(_QWORD *)(v5 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
      v17 = v16 - *(double *)(v5 + 80);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v5;
      v21 = 2048;
      v22 = v13;
      v23 = 2048;
      v24 = v14;
      v25 = 2048;
      v26 = v15;
      v27 = 2048;
      v28 = v17;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResponse: not continuing intercept load because no coreLoader or no ID", buf, 0x34u);
    }
    WebKit::WebResourceInterceptController::continueResponse((uint64_t *)(v5 + 64), *(_QWORD *)(a1 + 24));
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v18);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::operator()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  _DWORD *v5;

  *a1 = &off_1E34EB508;
  v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::operator()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34EB508;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::operator()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  WTF::StringImpl *v12;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v13;
  WTF::StringImpl *v14;
  _BYTE v15[88];
  WTF::StringImpl *v16;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v17;

  v2 = a1[1];
  v3 = a1[4];
  if (v3)
  {
    a1[4] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(_DWORD **)(v2 + 16);
  if (!v4 || !*((_QWORD *)v4 + 93))
  {
    WebKit::WebResourceInterceptController::continueResponse((uint64_t *)(v2 + 64), a1[3]);
    return;
  }
  ++v4[4];
  v5 = (unsigned int *)a1[5];
  v6 = (uint64_t *)(v2 + 64);
  v7 = a1[3];
  if (v5)
  {
    v8 = *v6;
    v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*v6, v7);
    if (v8)
    {
      v10 = (uint64_t *)(v8 + 40 * *(unsigned int *)(v8 - 4));
      if (v10 == v9)
        goto LABEL_15;
    }
    else
    {
      if (!v9)
      {
LABEL_15:
        if (v5[12])
        {
          a1[5] = 0;
          (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)v4 + 224))(v4, v5);
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v11);
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v15);
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)v4 + 232))(v4, v15);
        v13 = v17;
        v17 = 0;
        if (v13)
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
        v14 = v16;
        v16 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        goto LABEL_23;
      }
      v10 = 0;
    }
    if (v10 != v9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v6, (unsigned int *)v9);
      v5 = (unsigned int *)a1[5];
    }
    goto LABEL_15;
  }
  WebKit::WebResourceInterceptController::continueResponse(v6, v7);
LABEL_23:
  if (v4[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[4];
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _DWORD *v5;

  *a1 = &off_1E34EB530;
  v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34EB530;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0,void>::call(_QWORD *a1)
{
  unsigned int *result;

  result = (unsigned int *)a1[1];
  if (*((_QWORD *)result + 2))
    return WebKit::WebResourceLoader::didReceiveData((uint64_t)result, (IPC::SharedBufferReference *)(a1 + 3), a1[6]);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *a1 = &off_1E34EB558;
  v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[18];
  a1[18] = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  v4 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34EB558;
  v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 8);
  if (result[2])
    return WebKit::WebResourceLoader::didFinishResourceLoad((uint64_t)result, a1 + 24);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34EB580;
  WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34EB580;
  WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

WebKit::WebResourceLoader *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebResourceLoader *result;

  result = *(WebKit::WebResourceLoader **)(a1 + 8);
  if (*((_QWORD *)result + 2))
    return (WebKit::WebResourceLoader *)WebKit::WebResourceLoader::didFailResourceLoad(result, (const WebCore::ResourceError *)(a1 + 24));
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if (*v15 != -1)
      {
        if (*v15)
        {
          v20 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, (_QWORD *)(v6 + 16 * v13));
          v21 = (unsigned int *)v20[1];
          v20[1] = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, v10);
            }
          }
          *v20 = *v15;
          v24 = v6 + 16 * v13;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v20[1] = v25;
          v26 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v15 == a3)
            v14 = v20;
        }
        else
        {
          v16 = v6 + 16 * v13;
          v17 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransportSession>,WTF::DefaultRefDerefTraits<WebCore::WebTransportSession>> &&)>,void,WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB5A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransportSession>,WTF::DefaultRefDerefTraits<WebCore::WebTransportSession>> &&)>,void,WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB5A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransportSession>,WTF::DefaultRefDerefTraits<WebCore::WebTransportSession>> &&)>,void,WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v5 = v2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebTransportSendStreamSink::write(WebCore::ScriptExecutionContext &,JSC::JSValue,WebCore::DOMPromiseDeferred<void> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<JSC::ArrayBufferView,WTF::RefPtr<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &&>(uint64_t **a1, JSC::ArrayBuffer **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v2 = *a1;
  v3 = **a1;
  v4 = JSC::ArrayBuffer::span(*a2);
  v6 = v5;
  v7 = (uint64_t *)v2[1];
  v8 = *v7;
  *v7 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34EB5E0;
  v9[1] = v8;
  v11 = v9;
  WebKit::WebTransportSendStreamSink::sendBytes(v3, v4, v6, (uint64_t *)&v11);
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebTransportSendStreamSink::write(WebCore::ScriptExecutionContext &,JSC::JSValue,WebCore::DOMPromiseDeferred<void> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<JSC::ArrayBufferView,WTF::RefPtr<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &&>(uint64_t **a1, JSC::ArrayBufferView **a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::ArrayBufferView *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v2 = *a1;
  v3 = **a1;
  v4 = *a2;
  v5 = JSC::ArrayBufferView::baseAddress(*a2);
  v6 = JSC::ArrayBufferView::byteLength(v4);
  v7 = (uint64_t *)v2[1];
  v8 = *v7;
  *v7 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34EB608;
  v9[1] = v8;
  v11 = v9;
  WebKit::WebTransportSendStreamSink::sendBytes(v3, v5, v6, (uint64_t *)&v11);
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_11ArrayBufferENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34EB5E0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_11ArrayBufferENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB5E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_11ArrayBufferENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve(*(_QWORD *)(a1 + 8));
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_15ArrayBufferViewENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34EB608;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_15ArrayBufferViewENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB608;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_15ArrayBufferViewENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB630;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB630;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebKit::WebProcess *v29;
  _QWORD v30[3];
  uint64_t v31;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(v2);
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(v2);
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v4, v5);
        v16 = 0;
        v26 = *a2;
        v27 = a2[1];
        v28 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v17 = 0;
        if (v28 && v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v27);
          v17 = *a2;
          v16 = a2[1];
        }
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_16;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v16 = v5;
    v17 = v4;
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
LABEL_17:
    v20 = *a2;
    v21 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v25)
        {
          if (v24)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
        }
      }
    }
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(v2);
  }
  if (v7)
  {
    v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v10 = v8;
      v11 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)(v11 + 48) = 1;
      *(_QWORD *)v11 = off_1E34EB2E8;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = &unk_1E34EB350;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = &unk_1E34EB388;
      *(_QWORD *)(v11 + 56) = v10;
      *(_QWORD *)(v11 + 64) = 0;
      {
        v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v12 = WebKit::WebProcess::WebProcess(v29);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
      }
      if (!*((_BYTE *)v12 + 780))
      {
        __break(0xC471u);
        JUMPOUT(0x1975E1CF8);
      }
      v31 = *(_QWORD *)(v11 + 56);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebTransportSession&>((uint64_t *)v12 + 100, &v31, v11, (uint64_t)v30);
      v30[0] = v11;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v30[0] = 0;
LABEL_12:
  v13 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v30);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = v30[0];
  v30[0] = 0;
  if (v15)
    return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 48));
  return result;
}

unsigned int *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *result;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v4);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v4;
  v4 = 0;
  if (v3)
    return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 48));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::SendDatagram,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB658;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::SendDatagram,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB658;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::SendDatagram,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34EB680;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34EB680;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>::call(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1 + 1;
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>((uint64_t)v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>((uint64_t)v2);
  IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v7, a2);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>((uint64_t)v2);
  if (v8 && (v4 = a1[2]) != 0 && *(_QWORD *)(v4 + 8))
  {
    WebKit::WebTransportSendStreamSink::create(&v10, *v2, v7);
    v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  v6 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = (_DWORD *)v11;
  v11 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  _DWORD *v3;

  v3 = 0;
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v1 + 16))(v1, &v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
    goto LABEL_12;
  }
  if (!v9)
  {
    result = 0;
    goto LABEL_8;
  }
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v11)
  {
    LOBYTE(v9) = 1;
LABEL_8:
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
LABEL_12:
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result)
  {
    v18 = 0;
LABEL_14:
    v19 = 0;
    goto LABEL_15;
  }
  if (!v18)
    goto LABEL_14;
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  v19 = *a2;
  v18 = a2[1];
  result = a2[3];
LABEL_15:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v18)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  }
  return result;
}

unsigned int *WebKit::WebTransportSendStreamSink::create(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E34EB2B0;
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 32), a2 + 24);
  v8 = *(unsigned int **)(a2 + 32);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = a3;
  *a1 = v6;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34EB6A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34EB6A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>::call(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  WebCore::WebTransportBidirectionalStreamConstructionParameters *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;

  v2 = a1 + 1;
  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v33, a2), !v35))
  {
    IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>((uint64_t)v2);
    return;
  }
  if (v34)
  {
    v4 = a1[2];
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        v5 = v33;
        v6 = *v2;
        v7 = WTF::fastMalloc((WTF *)0x28);
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_QWORD *)(v7 + 32) = 0;
        v8 = WebCore::ReadableStreamSource::ReadableStreamSource((WebCore::ReadableStreamSource *)v7);
        *(_DWORD *)(v8 + 32) = 1;
        *(_QWORD *)v8 = off_1E34EB408;
        *(_BYTE *)(v8 + 36) = 0;
        v10 = (uint64_t *)(v6 + 64);
        v9 = *(_QWORD *)(v6 + 64);
        if (v9
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(v6 + 64)),
              (v9 = *v10) != 0))
        {
          v11 = *(_DWORD *)(v9 - 8);
        }
        else
        {
          v11 = 0;
        }
        v12 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = (uint64_t *)(v9 + 16 * v15);
        v17 = *v16;
        if (*v16)
        {
          v18 = 0;
          v19 = 1;
          while (v17 != v5)
          {
            if (v17 == -1)
              v18 = v16;
            v15 = (v15 + v19) & v11;
            v16 = (uint64_t *)(v9 + 16 * v15);
            v17 = *v16;
            ++v19;
            if (!*v16)
            {
              if (v18)
              {
                *v18 = 0;
                v18[1] = 0;
                --*(_DWORD *)(*v10 - 16);
                v16 = v18;
              }
              goto LABEL_18;
            }
          }
          ++*(_DWORD *)(v7 + 32);
          v23 = (_DWORD *)v16[1];
          v16[1] = v7;
          if (v23)
          {
            if (v23[8] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[8];
          }
          goto LABEL_37;
        }
LABEL_18:
        *v16 = v5;
        ++*(_DWORD *)(v7 + 32);
        v20 = (_DWORD *)v16[1];
        v16[1] = v7;
        if (v20)
        {
          if (v20[8] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
          else
            --v20[8];
        }
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) + 1;
        else
          v25 = 1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
          v27 = *(_DWORD *)(v26 - 12);
        else
          v27 = 0;
        v28 = (*(_DWORD *)(v26 - 16) + v27);
        v29 = *(unsigned int *)(v26 - 4);
        if (v29 > 0x400)
        {
          if (v29 > 2 * v28)
            goto LABEL_37;
        }
        else if (3 * v29 > 4 * v28)
        {
LABEL_37:
          v39[0] = v7;
          WebKit::WebTransportSendStreamSink::create(&v36, v6, v5);
          v37 = v36;
          WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters();
          v30 = (_DWORD *)v37;
          v37 = 0;
          if (v30)
          {
            if (v30[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            else
              --v30[2];
          }
          v31 = v39[0];
          v39[0] = 0;
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
          WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters();
          v40 = 1;
          v32 = a1[3];
          a1[3] = 0;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v32 + 16))(v32, v39);
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          if (v40)
            WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters((WebCore::WebTransportBidirectionalStreamConstructionParameters *)v39);
          v22 = (WebCore::WebTransportBidirectionalStreamConstructionParameters *)&v38;
          goto LABEL_46;
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(v6 + 64));
        goto LABEL_37;
      }
    }
  }
  LOBYTE(v39[0]) = 0;
  v40 = 0;
  v21 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 16))(v21, v39);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v40)
    return;
  v22 = (WebCore::WebTransportBidirectionalStreamConstructionParameters *)v39;
LABEL_46:
  WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters(v22);
}

void IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[16];
  char v3;

  v2[0] = 0;
  v3 = 0;
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v3)
    WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters((WebCore::WebTransportBidirectionalStreamConstructionParameters *)v2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (uint64_t *)(v2 + 16 * v8);
      v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (uint64_t *)(v13 + 16 * v20);
          v23 = (_DWORD *)v22[1];
          v22[1] = 0;
          if (v23)
          {
            if (v23[8] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[8];
          }
          *v22 = *v9;
          v24 = v2 + 16 * v8;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v22[1] = v25;
          v12 = *(_DWORD **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v12)
            goto LABEL_27;
          if (v12[8] == 1)
          {
LABEL_26:
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            goto LABEL_27;
          }
          --v12[8];
        }
        else
        {
          v11 = v2 + 16 * v8;
          v12 = *(_DWORD **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            if (v12[8] == 1)
              goto LABEL_26;
            --v12[8];
          }
        }
      }
LABEL_27:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::StreamSendBytes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EB6D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::StreamSendBytes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EB6D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::StreamSendBytes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34EB6F8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34EB6F8;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34EB720;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34EB720;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34EB748;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34EB748;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34EB770;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34EB770;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

void WebKit::LibWebRTCNetwork::~LibWebRTCNetwork(WebKit::LibWebRTCNetwork *this, WTF::StringImpl *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)this = off_1E34EC1F8;
  *((_QWORD *)this + 1) = &unk_1E34EC228;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (!v3)
    goto LABEL_16;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v56 = *((_QWORD *)v4 + 2);
    v9 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v8 = v56 == 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (__stlxr(0, v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_16;
LABEL_14:
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v11 = off_1E34ACA48;
  *(_QWORD *)(v11 + 8) = v4;
  *(_QWORD *)(v11 + 16) = v9;
  *(_BYTE *)(v11 + 24) = v8;
  v58 = v11;
  WTF::ensureOnMainRunLoop();
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
LABEL_16:
  v12 = *((_QWORD *)this + 23);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (WTF::StringImpl ***)(v12 + 32);
      do
      {
        if (*(v14 - 2) != (WTF::StringImpl **)-1 && *v14)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, a2);
        v14 += 6;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v15 = *((_QWORD *)this + 22);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 22) = 0;
  }
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  v20 = *((_QWORD *)this + 12);
  if (v20)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v20, v19);
  v21 = *((_QWORD *)this + 7);
  v22 = *((_QWORD *)this + 8);
  v23 = (WTF *)*((_QWORD *)this + 9);
  if (v21 <= v22)
  {
    if (v21 == v22)
      goto LABEL_51;
    v30 = (uint64_t *)((char *)v23 + 8 * v21);
    v31 = 8 * v22 - 8 * v21;
    do
    {
      v32 = *v30;
      *v30 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
  else
  {
    if (v22)
    {
      v24 = 8 * v22;
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
      v23 = (WTF *)*((_QWORD *)this + 9);
      v21 = *((_QWORD *)this + 7);
    }
    v26 = *((unsigned int *)this + 20);
    if (v21 != v26)
    {
      v27 = (uint64_t *)((char *)v23 + 8 * v21);
      v28 = 8 * v26 - 8 * v21;
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  v23 = (WTF *)*((_QWORD *)this + 9);
LABEL_51:
  if (v23)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v23, v19);
  }
  v33 = (unsigned __int8 **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v33)
  {
    v34 = *v33;
    if (__ldaxr(*v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, v34))
    {
      goto LABEL_58;
    }
    MEMORY[0x19AEABB3C](v34);
LABEL_58:
    v36 = *((_QWORD *)v34 + 1);
    v37 = v36 - 1;
    *((_QWORD *)v34 + 1) = v36 - 1;
    if (v36 == 1)
    {
      v57 = *((_QWORD *)v34 + 2);
      v39 = *((_QWORD *)v34 + 3);
      *((_QWORD *)v34 + 3) = 0;
      v38 = v57 == 0;
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v40 = __ldxr(v34);
    if (v40 == 1)
    {
      if (!__stlxr(0, v34))
      {
        if (v37)
          goto LABEL_68;
LABEL_66:
        v41 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v41 = off_1E34ACA48;
        *(_QWORD *)(v41 + 8) = v34;
        *(_QWORD *)(v41 + 16) = v39;
        *(_BYTE *)(v41 + 24) = v38;
        v59 = v41;
        WTF::ensureOnMainRunLoop();
        if (v59)
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        goto LABEL_68;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    if (v37)
      goto LABEL_68;
    goto LABEL_66;
  }
LABEL_68:
  v42 = *((_QWORD *)this + 4);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 - 4);
    if ((_DWORD)v43)
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)(v42 + 16 * i) != -1)
        {
          v45 = v42 + 16 * i;
          v46 = *(unsigned int **)(v45 + 8);
          *(_QWORD *)(v45 + 8) = 0;
          if (v46)
          {
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              atomic_store(1u, v46);
              WTF::fastFree((WTF *)v46, v19);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v42 - 16), v19);
  }
  v49 = *((_QWORD *)this + 3);
  if (v49)
  {
    v50 = *(unsigned int *)(v49 - 4);
    if ((_DWORD)v50)
    {
      for (j = 0; j != v50; ++j)
      {
        if (*(_QWORD *)(v49 + 16 * j) != -1)
        {
          v52 = v49 + 16 * j;
          v53 = *(unsigned int **)(v52 + 8);
          *(_QWORD *)(v52 + 8) = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              WTF::fastFree((WTF *)v53, v19);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v49 - 16), v19);
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v19);
  WTF::FunctionDispatcher::~FunctionDispatcher(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetwork::~LibWebRTCNetwork(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::LibWebRTCNetwork::~LibWebRTCNetwork(WebKit::LibWebRTCNetwork *this, WTF::StringImpl *a2)
{
  WebKit::LibWebRTCNetwork::~LibWebRTCNetwork((WebKit::LibWebRTCNetwork *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetwork::~LibWebRTCNetwork((WebKit::LibWebRTCNetwork *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::LibWebRTCNetwork::setSocketFactoryConnection(WebKit::LibWebRTCNetwork *this)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  _QWORD *v5;
  IPC::Encoder *result;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  IPC::Encoder *v16;

  v2 = (unsigned __int8 **)*((_QWORD *)this + 25);
  if (v2)
  {
    v3 = *v2;
    if (__ldaxr(*v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v3);
LABEL_8:
    ++*((_QWORD *)v3 + 1);
    v7 = __ldxr(v3);
    if (v7 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34EBCD0;
    v8[1] = this;
    v8[2] = v2;
    v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 223;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v15[1] = v9;
    v16 = (IPC::Encoder *)v10;
    v15[0] = (uint64_t)v8;
    IPC::Connection::sendMessageWithAsyncReply((os_unfair_lock_s *)v2, &v16, v15, 0, 0);
    v12 = v15[0];
    v15[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = v16;
    v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    return result;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34EBCA8;
  v5[1] = this;
  v15[0] = (uint64_t)v5;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  result = (IPC::Encoder *)v15[0];
  v15[0] = 0;
  if (result)
    return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WebKit::LibWebRTCNetwork::networkProcessCrashed(WebKit::LibWebRTCNetwork *this)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;

  v14 = 0;
  WebKit::LibWebRTCNetwork::setConnection((uint64_t)this, &v14);
  v2 = v14;
  v14 = 0;
  if (!v2)
    return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
  v3 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 - 1;
  *((_QWORD *)v3 + 1) = v5 - 1;
  if (v5 == 1)
  {
    v13 = *((_QWORD *)v3 + 2);
    v8 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    v7 = v13 == 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v6)
        return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
    return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
LABEL_14:
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = off_1E34ACA48;
  *(_QWORD *)(v10 + 8) = v3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 24) = v7;
  v15 = v10;
  WTF::ensureOnMainRunLoop();
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
}

void WebKit::LibWebRTCNetwork::dispatch(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (*(_BYTE *)(a1 + 192))
  {
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  }
  else
  {
    v1 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_error_impl(&dword_196BCC000, v1, OS_LOG_TYPE_ERROR, "Received WebRTCSocket message while libWebRTCNetwork is not active", v2, 2u);
    }
  }
}

void WebKit::LibWebRTCNetwork::signalAddressReady(uint64_t a1, void *a2, WebKit::RTC::Network::SocketAddress *a3)
{
  uint64_t v4;
  WebKit::LibWebRTCSocket *v5;
  void *__p[2];
  char v7;

  __p[0] = a2;
  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), __p);
  if (v4)
  {
    v5 = (WebKit::LibWebRTCSocket *)v4;
    WebKit::RTC::Network::SocketAddress::rtcAddress(a3, (rtc::SocketAddress *)__p);
    WebKit::LibWebRTCSocket::signalAddressReady(v5, (const rtc::SocketAddress *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

_QWORD *WebKit::LibWebRTCSocket::signalAddressReady(WebKit::LibWebRTCSocket *this, const rtc::SocketAddress *a2)
{
  char *v3;
  int v4;
  _QWORD *result;
  _QWORD *v6;
  void (*v7)(_QWORD *, WebKit::LibWebRTCSocket *, char *);

  v3 = (char *)this + 376;
  rtc::SocketAddress::operator=();
  if (*((_DWORD *)this + 92) == 1)
    v4 = 4;
  else
    v4 = 2;
  *((_DWORD *)this + 131) = v4;
  result = (_QWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 26) = result;
  while (result != (_QWORD *)((char *)this + 184))
  {
    v7 = (void (*)(_QWORD *, WebKit::LibWebRTCSocket *, char *))result[2];
    v6 = result + 2;
    *((_QWORD *)this + 26) = *(v6 - 1);
    v7(v6, this, v3);
    result = (_QWORD *)*((_QWORD *)this + 26);
  }
  return result;
}

void WebKit::LibWebRTCNetwork::signalReadPacket(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, WebKit::RTC::Network::IPAddress *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[4];
  void *__p[2];
  char v10;

  __p[0] = a2;
  v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), __p);
  if (v6)
  {
    v7 = v6;
    WebKit::RTC::Network::IPAddress::rtcAddress(v8, a5);
    rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)__p, (const rtc::IPAddress *)v8);
    if (!*(_BYTE *)(v7 + 584))
    {
      rtc::SocketAddress::operator=();
      rtc::ReceivedPacket::ReceivedPacket();
      rtc::AsyncPacketSocket::NotifyPacketReceived();
    }
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void WebKit::LibWebRTCNetwork::signalSentPacket(uint64_t a1, uint64_t a2)
{
  WebKit::LibWebRTCSocket *v2;
  uint64_t v3;

  v3 = a2;
  v2 = (WebKit::LibWebRTCSocket *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v3);
  if (v2)
    WebKit::LibWebRTCSocket::signalSentPacket(v2);
}

void WebKit::LibWebRTCSocket::signalSentPacket(WebKit::LibWebRTCSocket *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void (*v4)(_QWORD *, WebKit::LibWebRTCSocket *, _BYTE *);
  _BYTE v5[16];
  uint64_t v6;

  rtc::SentPacket::SentPacket((rtc::SentPacket *)v5);
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 12) = v2;
  while (v2 != (_QWORD *)((char *)this + 72))
  {
    v4 = (void (*)(_QWORD *, WebKit::LibWebRTCSocket *, _BYTE *))v2[2];
    v3 = v2 + 2;
    *((_QWORD *)this + 12) = *(v3 - 1);
    v4(v3, this, v5);
    v2 = (_QWORD *)*((_QWORD *)this + 12);
  }
  rtc::PacketInfo::~PacketInfo((rtc::PacketInfo *)&v6);
}

uint64_t WebKit::LibWebRTCNetwork::signalConnect(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v7 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v7);
  if (result)
  {
    v3 = result;
    *(_DWORD *)(result + 524) = 4;
    v4 = result + 240;
    result = *(_QWORD *)(result + 248);
    *(_QWORD *)(v3 + 264) = result;
    while (result != v4)
    {
      v6 = *(void (**)(uint64_t, uint64_t))(result + 16);
      v5 = result + 16;
      *(_QWORD *)(v3 + 264) = *(_QWORD *)(v5 - 8);
      v6(v5, v3);
      result = *(_QWORD *)(v3 + 264);
    }
  }
  return result;
}

uint64_t WebKit::LibWebRTCNetwork::signalClose(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  _QWORD v7[2];

  v7[0] = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), v7);
  if (result)
  {
    *(_DWORD *)(result + 524) = 0;
    v6 = a3;
    v5 = result;
    v7[0] = &v5;
    v7[1] = &v6;
    return webrtc::callback_list_impl::CallbackListReceivers::Foreach();
  }
  return result;
}

uint64_t WebKit::LibWebRTCNetwork::signalUsedInterface(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v3;
  __int128 v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4[0] = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), v4);
  if (result)
  {
    v3 = *(_OWORD *)(result + 608);
    v4[0] = *(_OWORD *)(result + 592);
    v4[1] = v3;
    return WebKit::LibWebRTCNetworkManager::signalUsedInterface(v4);
  }
  return result;
}

uint64_t WebKit::LibWebRTCNetworkManager::getOrCreate(WebCore::Document *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  unsigned int v37;
  WebKit::WebProcess *v38;
  _QWORD v39[3];
  WTF *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  v3 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v2, (uint64_t *)a1);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v3 + 3144);
  if (!v6)
  {
    v6 = WTF::fastMalloc((WTF *)0x170);
    v7 = *((_OWORD *)a1 + 1);
    v41 = *(_OWORD *)a1;
    v42 = v7;
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)v6 = off_1E34EBC38;
    rtc::NetworkManagerBase::NetworkManagerBase((rtc::NetworkManagerBase *)(v6 + 16));
    *(_QWORD *)v6 = off_1E34EB810;
    *(_QWORD *)(v6 + 16) = &unk_1E34EB888;
    *(_QWORD *)(v6 + 24) = &unk_1E34EB8F8;
    *(_QWORD *)(v6 + 288) = &unk_1E34EB920;
    *(_QWORD *)(v6 + 296) = &unk_1E34EB950;
    *(_QWORD *)(v6 + 304) = 0;
    v8 = v42;
    *(_OWORD *)(v6 + 320) = v41;
    *(_OWORD *)(v6 + 336) = v8;
    *(_BYTE *)(v6 + 352) = 1;
    *(_QWORD *)(v6 + 360) = 0;
    *(_DWORD *)(v6 + 353) = 0;
    WebCore::Document::setRTCNetworkManager();
    v39[0] = 0;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 8));
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v9 = WebKit::WebProcess::WebProcess(v38);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
    }
    WebKit::WebProcess::libWebRTCNetwork(v9);
    v12 = (uint64_t *)(v10 + 96);
    v13 = *(_DWORD *)(v10 + 108);
    v14 = *(_DWORD *)(v10 + 104) + 1;
    *(_DWORD *)(v10 + 104) = v14;
    if (v14 <= v13)
      goto LABEL_37;
    v15 = v10;
    v16 = *v12;
    if (*v12)
    {
      v17 = *(_DWORD *)(v16 - 4);
      if (!v17)
        goto LABEL_31;
      v18 = 0;
      do
      {
        while (1)
        {
          v19 = *(_QWORD *)(v16 + 8 * --v17);
          if ((unint64_t)(v19 + 1) >= 2 && !*(_QWORD *)(v19 + 8))
            break;
          if (!v17)
            goto LABEL_20;
        }
        *(_QWORD *)(v16 + 8 * v17) = 0;
        do
        {
          v20 = __ldaxr((unsigned int *)v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v19));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)v19);
          WTF::fastFree((WTF *)v19, v11);
        }
        *(_QWORD *)(v16 + 8 * v17) = -1;
        ++v18;
      }
      while (v17);
LABEL_20:
      v16 = *v12;
      if (v18)
      {
        *(_DWORD *)(v16 - 16) += v18;
        v22 = *v12;
        if (*v12)
          v23 = *(_DWORD *)(v22 - 12);
        else
          v23 = 0;
        *(_DWORD *)(v22 - 12) = v23 - v18;
        v16 = *v12;
      }
      if (v16)
      {
        v24 = *(_DWORD *)(v16 - 4);
        if (v24 >= 9 && 6 * *(_DWORD *)(v16 - 12) < v24)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v12);
          v16 = *(_QWORD *)(v15 + 96);
          *(_DWORD *)(v15 + 104) = 0;
          if (!v16)
          {
            v26 = 0;
            goto LABEL_35;
          }
          goto LABEL_34;
        }
LABEL_31:
        *(_DWORD *)(v15 + 104) = 0;
LABEL_34:
        v26 = *(_DWORD *)(v16 - 12);
        v27 = 0x7FFFFFFF;
        if (v26 >= 0x7FFFFFFF)
        {
LABEL_36:
          *(_DWORD *)(v15 + 108) = 2 * v27;
LABEL_37:
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 304), v6 + 296);
          v28 = *(unsigned int **)(v6 + 304);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 + 1, v28));
          v40 = (WTF *)v28;
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v40, (uint64_t)v39);
          v32 = (unsigned int *)v40;
          v40 = 0;
          if (v32)
          {
            do
            {
              v36 = __ldaxr(v32);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v32));
            if (!v37)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v31);
            }
          }
          if (v28)
          {
            do
            {
              v33 = __ldaxr(v28);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v28));
            if (!v34)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v31);
            }
          }
          v5 = *(_DWORD *)(v4 + 24) - 2;
          goto LABEL_46;
        }
LABEL_35:
        v27 = v26;
        goto LABEL_36;
      }
    }
    v26 = 0;
    *(_DWORD *)(v15 + 104) = 0;
    goto LABEL_35;
  }
LABEL_46:
  if (v5)
  {
    *(_DWORD *)(v4 + 24) = v5;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  return v6;
}

uint64_t WebKit::LibWebRTCNetworkManager::signalUsedInterface(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  WTF::StringImpl *v6;

  v4 = *a1;
  *(_QWORD *)&v5 = *((_QWORD *)a1 + 2);
  WTF::String::isolatedCopy();
  v1 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v1 = &off_1E34EBD48;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v6;
  v3 = v1;
  WTF::callOnMainRunLoop();
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return 0;
}

void WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager(WebKit::LibWebRTCNetworkManager *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 45);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 38);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 38) = 0;
  }
  v8 = MEMORY[0x1E0DCDD40] + 128;
  *((_QWORD *)this + 2) = MEMORY[0x1E0DCDD40] + 16;
  *((_QWORD *)this + 3) = v8;
  std::unique_ptr<rtc::Network>::reset[abi:sn180100]((uint64_t *)this + 26, 0);
  std::unique_ptr<rtc::Network>::reset[abi:sn180100]((uint64_t *)this + 25, 0);
  std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*((char **)this + 23));
  v9 = (void *)*((_QWORD *)this + 19);
  if (v9)
  {
    *((_QWORD *)this + 20) = v9;
    operator delete(v9);
  }
  v10 = MEMORY[0x1E0DCDD30] + 128;
  *((_QWORD *)this + 2) = MEMORY[0x1E0DCDD30] + 16;
  *((_QWORD *)this + 3) = v10;
  sigslot::_signal_base<sigslot::single_threaded>::disconnect_all((uint64_t)this + 88);
  std::__list_imp<sigslot::_opaque_connection>::clear((_QWORD *)this + 13);
  sigslot::_signal_base<sigslot::single_threaded>::disconnect_all((uint64_t)this + 32);
  std::__list_imp<sigslot::_opaque_connection>::clear((_QWORD *)this + 6);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager(WebKit::LibWebRTCNetworkManager *this, WTF::StringImpl *a2)
{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 16), a2);
}

{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 24), a2);
}

{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 288), a2);
}

{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 296), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 288), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 296), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::LibWebRTCNetworkManager::close(WebKit::LibWebRTCNetworkManager *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int **v22;
  uint64_t v23;
  WebKit::WebProcess *v24;
  uint64_t v25;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v24);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::libWebRTCNetwork(v2);
  v5 = (uint64_t *)(v3 + 96);
  v6 = *(_DWORD *)(v3 + 108);
  v7 = *(_DWORD *)(v3 + 104) + 1;
  *(_DWORD *)(v3 + 104) = v7;
  if (v7 > v6)
  {
    v8 = v3;
    v9 = *v5;
    if (*v5)
    {
      v10 = *(_DWORD *)(v9 - 4);
      if (!v10)
        goto LABEL_27;
      v11 = 0;
      do
      {
        while (1)
        {
          v12 = *(_QWORD *)(v9 + 8 * --v10);
          if ((unint64_t)(v12 + 1) >= 2 && !*(_QWORD *)(v12 + 8))
            break;
          if (!v10)
            goto LABEL_16;
        }
        *(_QWORD *)(v9 + 8 * v10) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          WTF::fastFree((WTF *)v12, v4);
        }
        *(_QWORD *)(v9 + 8 * v10) = -1;
        ++v11;
      }
      while (v10);
LABEL_16:
      v9 = *v5;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        v15 = *v5;
        if (*v5)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v11;
        v9 = *v5;
      }
      if (v9)
      {
        v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v5);
          v9 = *(_QWORD *)(v8 + 96);
          *(_DWORD *)(v8 + 104) = 0;
          if (!v9)
          {
            v19 = 0;
            goto LABEL_31;
          }
          goto LABEL_30;
        }
LABEL_27:
        *(_DWORD *)(v8 + 104) = 0;
LABEL_30:
        v19 = *(_DWORD *)(v9 - 12);
        v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_32:
          *(_DWORD *)(v8 + 108) = 2 * v20;
          goto LABEL_33;
        }
LABEL_31:
        v20 = v19;
        goto LABEL_32;
      }
    }
    v19 = 0;
    *(_DWORD *)(v8 + 104) = 0;
    goto LABEL_31;
  }
LABEL_33:
  v21 = *((_QWORD *)this + 38);
  if (v21 && *(_QWORD *)(v21 + 8))
  {
    v25 = *((_QWORD *)this + 38);
    v22 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v5, &v25);
    if (*v5)
    {
      v23 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
      if ((unsigned int **)v23 == v22)
        return;
    }
    else
    {
      if (!v22)
        return;
      v23 = 0;
    }
    if ((unsigned int **)v23 != v22)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v5, v22);
  }
}

unsigned __int8 ***WebKit::LibWebRTCNetworkManager::unregisterMDNSNames(WebKit::LibWebRTCNetworkManager *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  unsigned __int8 ***result;
  WTF::StringImpl *v8;
  unsigned __int8 ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v18;
  WebKit::WebProcess *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WebKit::WebProcess *v26;
  WebKit::WebProcess *v27;
  unsigned __int8 **v28;
  IPC::Encoder *v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v26);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::libWebRTCNetwork(v2);
  v4 = v3;
  v5 = *((_OWORD *)this + 21);
  v30[0] = *((_OWORD *)this + 20);
  v30[1] = v5;
  v6 = (uint64_t *)(v3 + 184);
  result = (unsigned __int8 ***)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(v3 + 184), (uint64_t *)v30);
  v9 = *(unsigned __int8 ****)(v4 + 184);
  if (v9)
    v9 += 6 * *((unsigned int *)v9 - 1);
  if (v9 != result)
  {
    v10 = (WTF::StringImpl **)result[4];
    result[4] = 0;
    if (*v6)
    {
      v11 = *v6 + 48 * *(unsigned int *)(*v6 - 4);
      if ((unsigned __int8 ***)v11 == result)
        goto LABEL_22;
    }
    else
    {
      if (!result)
      {
LABEL_22:
        if (v10)
        {
          v18 = *((_DWORD *)v10 - 3);
          result = (unsigned __int8 ***)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v8);
          if (v18)
          {
            {
              v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
            }
            else
            {
              v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              v19 = WebKit::WebProcess::WebProcess(v27);
              WebKit::WebProcess::singleton(void)::process = (uint64_t)v19;
            }
            v20 = *(unsigned __int8 ***)(WebKit::WebProcess::ensureNetworkProcessConnection(v19) + 24);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v20);
            v28 = v20;
            v21 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v21 = 286;
            *(_QWORD *)(v21 + 8) = 0;
            *(_QWORD *)(v21 + 528) = v21 + 16;
            *(_QWORD *)(v21 + 536) = v21 + 16;
            *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v21 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
            v29 = (IPC::Encoder *)v21;
            IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v21, (uint64_t *)v30);
            IPC::Connection::sendMessageImpl((uint64_t)v20, (uint64_t *)&v29, 0, 0);
            v23 = v29;
            v29 = 0;
            if (v23)
            {
              IPC::Encoder::~Encoder(v23, v22);
              WTF::fastFree(v24, v25);
            }
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v28);
          }
        }
        return result;
      }
      v11 = 0;
    }
    if ((unsigned __int8 ***)v11 != result)
    {
      *result = (unsigned __int8 **)1;
      result[1] = 0;
      result[2] = (unsigned __int8 **)-1;
      ++*(_DWORD *)(*v6 - 16);
      v12 = *v6;
      v13 = *v6 ? *(_DWORD *)(v12 - 12) - 1 : -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *v6;
      if (*v6)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          result = (unsigned __int8 ***)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v6, v16 >> 1, 0);
      }
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t WebKit::LibWebRTCNetworkManager::StartUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 76, (uint64_t)this + 296);
  v2 = (unsigned int *)*((_QWORD *)this + 38);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34EBD70;
  v4[1] = this;
  v4[2] = v2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCNetworkManager::StartUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  return WebKit::LibWebRTCNetworkManager::StartUpdating((WebKit::LibWebRTCNetworkManager *)((char *)this - 16));
}

uint64_t WebKit::LibWebRTCNetworkManager::StopUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 76, (uint64_t)this + 296);
  v2 = (unsigned int *)*((_QWORD *)this + 38);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34EBDC0;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCNetworkManager::StopUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  return WebKit::LibWebRTCNetworkManager::StopUpdating((WebKit::LibWebRTCNetworkManager *)((char *)this - 16));
}

uint64_t WebKit::LibWebRTCNetworkManager::GetMdnsResponder(WebKit::LibWebRTCNetworkManager *this)
{
  WebKit::LibWebRTCNetworkManager *v1;

  if (*((_BYTE *)this + 352))
    v1 = this;
  else
    v1 = 0;
  if (v1)
    return (uint64_t)v1 + 288;
  else
    return 0;
}

char *`non-virtual thunk to'WebKit::LibWebRTCNetworkManager::GetMdnsResponder(WebKit::LibWebRTCNetworkManager *this)
{
  char *v1;
  char *v2;

  v1 = (char *)this - 16;
  if (!*((_BYTE *)this + 336))
    v1 = 0;
  v2 = v1 + 288;
  if (*((_BYTE *)this + 336))
    return v2;
  else
    return 0;
}

{
  char *v1;
  char *v2;

  v1 = (char *)this - 24;
  if (!*((_BYTE *)this + 328))
    v1 = 0;
  v2 = v1 + 288;
  if (*((_BYTE *)this + 328))
    return v2;
  else
    return 0;
}

uint64_t WebKit::LibWebRTCNetworkManager::networksChanged(uint64_t a1, int *a2, WebKit::RTC::Network::IPAddress *a3, WebKit::RTC::Network::IPAddress *a4)
{
  char v4;

  v4 = *(_BYTE *)(a1 + 353) == 0;
  *(_BYTE *)(a1 + 353) = 1;
  return WebKit::LibWebRTCNetworkManager::networksChanged(a1, a2, a3, a4, v4);
}

uint64_t WebKit::LibWebRTCNetworkManager::networksChanged(uint64_t a1, int *a2, WebKit::RTC::Network::IPAddress *a3, WebKit::RTC::Network::IPAddress *a4, char a5)
{
  WebKit::RTC::Network::IPAddress *v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  unint64_t v23;
  WebKit::RTC::Network::IPAddress *v24;
  unsigned int v25;
  WebKit::RTC::Network::IPAddress *v26;
  int v27;
  int v28;
  WTF::StringImpl *v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  void *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 **v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  void *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int i;
  int v64;
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  WTF *v70;
  uint64_t v71;
  void *v72;
  WTF *v73;
  uint64_t v74;
  void *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  void *v86;
  IPC::Encoder *v87;
  void *v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  const WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WebKit::WebProcess *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  size_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  size_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  _BYTE *v124;
  void *v125;
  WTF::StringImpl *v126;
  IPC::Encoder *v127;
  WTF *v128;
  void *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  unint64_t v132;
  size_t v133;
  char *v134;
  void *v135;
  unint64_t v136;
  size_t v137;
  char *v138;
  void *v139;
  WebKit::WebProcess *v140;
  size_t v141;
  char v142;
  size_t v143;
  uint64_t v144;
  unint64_t v146;
  os_unfair_lock_s *v147;
  WTF::StringImpl *v151;
  _BYTE v152[24];
  __int128 v153;
  _BYTE v154[25];
  int v155[2];
  uint64_t v156;
  void *v157;
  int v158;
  __int128 v159;
  int v160;
  uint64_t *v161[4];
  WTF::StringImpl *v162;
  int v163;
  __int128 v164;
  int v165;
  IPC::Encoder *v166[5];

  v5 = a4;
  v7 = a1;
  *(_QWORD *)v155 = 0;
  v156 = 0;
  if (!*(_BYTE *)(a1 + 354))
  {
    if (*(_BYTE *)(a1 + 352)
      || !*(_BYTE *)(a1 + 355)
      || (v91 = *(_QWORD *)(a1 + 360)) != 0 && *(_DWORD *)(v91 - 12)
      || *(_BYTE *)(a1 + 356)
      || (v92 = (uint64_t *)WebCore::Document::allDocumentsMap((WebCore::Document *)a1),
          (v93 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v92, (uint64_t *)(v7 + 320))) == 0))
    {
LABEL_21:
      v22 = a2[3];
      if (!v22)
        goto LABEL_72;
      v23 = *(_QWORD *)a2;
      v146 = v23 + 96 * v22;
      while (1)
      {
        v24 = *(WebKit::RTC::Network::IPAddress **)(v23 + 80);
        v25 = *(_DWORD *)(v23 + 92);
        if (v25)
        {
          v26 = (WebKit::RTC::Network::IPAddress *)((char *)v24 + 24 * v25);
          while (1)
          {
            WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)v166, a3);
            WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)&v151, v24);
            v27 = *((_DWORD *)v24 + 5);
            v164 = *(_OWORD *)&v152[4];
            v162 = (WTF::StringImpl *)&unk_1E34CB0D8;
            v163 = *(_DWORD *)v152;
            v165 = v27;
            if (rtc::IPAddress::operator==())
              break;
            WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)v161, v5);
            WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)&v151, v24);
            v28 = *((_DWORD *)v24 + 5);
            v159 = *(_OWORD *)&v152[4];
            v157 = &unk_1E34CB0D8;
            v158 = *(_DWORD *)v152;
            v160 = v28;
            if ((rtc::IPAddress::operator==() & 1) != 0)
              break;
            v24 = (WebKit::RTC::Network::IPAddress *)((char *)v24 + 24);
            if (v24 == v26)
              goto LABEL_28;
          }
LABEL_37:
          v33 = HIDWORD(v156);
          if (HIDWORD(v156) == (_DWORD)v156)
          {
            v34 = WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v155, HIDWORD(v156) + 1, v23);
            v35 = HIDWORD(v156);
            v36 = *(_QWORD *)v155;
            v37 = *(_QWORD *)v155 + 96 * HIDWORD(v156);
            v38 = (WTF *)*(unsigned int *)(v34 + 12);
            *(_QWORD *)v37 = 0;
            *(_QWORD *)(v37 + 8) = 0;
            *(_DWORD *)(v37 + 12) = (_DWORD)v38;
            if ((_DWORD)v38)
            {
              v39 = (void *)WTF::fastMalloc(v38);
              *(_DWORD *)(v37 + 8) = (_DWORD)v38;
              *(_QWORD *)v37 = v39;
              memcpy(v39, *(const void **)v34, *(unsigned int *)(v34 + 12));
            }
            v40 = v36 + 96 * v35;
            v41 = (WTF *)*(unsigned int *)(v34 + 28);
            *(_QWORD *)(v40 + 16) = 0;
            *(_QWORD *)(v40 + 24) = 0;
            v42 = v40 + 16;
            *(_DWORD *)(v42 + 12) = (_DWORD)v41;
            if ((_DWORD)v41)
            {
              v43 = (void *)WTF::fastMalloc(v41);
              *(_DWORD *)(v36 + 96 * v35 + 24) = (_DWORD)v41;
              *(_QWORD *)v42 = v43;
              memcpy(v43, *(const void **)(v34 + 16), *(unsigned int *)(v34 + 28));
            }
            v44 = (_OWORD *)(v36 + 96 * v35);
            v45 = *(_OWORD *)(v34 + 32);
            v46 = *(_OWORD *)(v34 + 48);
            *(_OWORD *)((char *)v44 + 60) = *(_OWORD *)(v34 + 60);
            v44[2] = v45;
            v44[3] = v46;
            v47 = (uint64_t)(v44 + 5);
            v48 = (__int128 **)(v34 + 80);
          }
          else
          {
            v49 = *(_QWORD *)v155;
            v50 = (WTF *)*(unsigned int *)(v23 + 12);
            v51 = *(_QWORD *)v155 + 96 * HIDWORD(v156);
            *(_QWORD *)v51 = 0;
            *(_QWORD *)(v51 + 8) = 0;
            *(_DWORD *)(v51 + 12) = (_DWORD)v50;
            if ((_DWORD)v50)
            {
              v52 = (void *)WTF::fastMalloc(v50);
              *(_DWORD *)(v51 + 8) = (_DWORD)v50;
              *(_QWORD *)v51 = v52;
              memcpy(v52, *(const void **)v23, *(unsigned int *)(v23 + 12));
            }
            v53 = v49 + 96 * v33;
            v54 = (WTF *)*(unsigned int *)(v23 + 28);
            *(_QWORD *)(v53 + 16) = 0;
            *(_QWORD *)(v53 + 24) = 0;
            v55 = v53 + 16;
            *(_DWORD *)(v55 + 12) = (_DWORD)v54;
            if ((_DWORD)v54)
            {
              v56 = (void *)WTF::fastMalloc(v54);
              *(_DWORD *)(v49 + 96 * v33 + 24) = (_DWORD)v54;
              *(_QWORD *)v55 = v56;
              memcpy(v56, *(const void **)(v23 + 16), *(unsigned int *)(v23 + 28));
            }
            v57 = (_OWORD *)(v49 + 96 * v33);
            v58 = *(_OWORD *)(v23 + 32);
            v59 = *(_OWORD *)(v23 + 48);
            *(_OWORD *)((char *)v57 + 60) = *(_OWORD *)(v23 + 60);
            v57[2] = v58;
            v57[3] = v59;
            v47 = (uint64_t)(v57 + 5);
            v48 = (__int128 **)(v23 + 80);
          }
          WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v47, v48);
          ++HIDWORD(v156);
          v5 = a4;
          v7 = a1;
          goto LABEL_49;
        }
LABEL_28:
        if (!*(_BYTE *)(v7 + 352) && *(_BYTE *)(v7 + 355))
        {
          WTF::String::fromUTF8();
          v31 = *(_QWORD *)(v7 + 360);
          v32 = v151;
          if (v31)
          {
            v60 = *(_DWORD *)(v31 - 8);
            v61 = *((_DWORD *)v151 + 4);
            if (v61 >= 0x100)
              v62 = v61 >> 8;
            else
              v62 = WTF::StringImpl::hashSlowCase(v151);
            for (i = 0; ; v62 = i + v64)
            {
              v64 = v62 & v60;
              v65 = *(WTF **)(v31 + 8 * (v62 & v60));
              if (v65 != (WTF *)-1)
              {
                if (!v65)
                {
                  LODWORD(v31) = 0;
                  goto LABEL_61;
                }
                if ((WTF::equal(v65, v151, v30) & 1) != 0)
                  break;
              }
              ++i;
            }
            LODWORD(v31) = 1;
LABEL_61:
            v32 = v151;
            v5 = a4;
            v7 = a1;
          }
          v151 = 0;
          if (!v32)
            goto LABEL_34;
          if (*(_DWORD *)v32 != 2)
          {
            *(_DWORD *)v32 -= 2;
LABEL_34:
            if ((_DWORD)v31)
              goto LABEL_37;
            goto LABEL_49;
          }
          WTF::StringImpl::destroy(v32, v29);
          if ((_DWORD)v31)
            goto LABEL_37;
        }
LABEL_49:
        v23 += 96;
        if (v23 == v146)
          goto LABEL_72;
      }
    }
    v94 = v93;
    v95 = *(_DWORD *)(v93 + 24);
    *(_DWORD *)(v93 + 24) = v95 + 2;
    v96 = *(_QWORD *)(v93 + 528);
    if (!v96
      || (v97 = *(_QWORD *)(v96 + 8)) == 0
      || (v98 = *(_QWORD *)(v97 + 24)) == 0
      || (v99 = *(_QWORD *)(v98 + 8)) == 0)
    {
LABEL_112:
      if (v95)
      {
        *(_DWORD *)(v94 + 24) = v95;
        v5 = a4;
        v7 = a1;
      }
      else
      {
        v5 = a4;
        v7 = a1;
        if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v94);
      }
      goto LABEL_21;
    }
    ++*(_DWORD *)v99;
    v100 = *(_QWORD **)(*(_QWORD *)(v99 + 48) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v100 + 1368))(v100) & 1) != 0
      || (v101 = *(_QWORD *)(v100[2] + 8)) == 0)
    {
LABEL_111:
      WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v99);
      v95 = *(_DWORD *)(v94 + 24) - 2;
      goto LABEL_112;
    }
    CFRetain(*(CFTypeRef *)(v101 - 8));
    *(_BYTE *)(a1 + 356) = 1;
    WebCore::RegistrableDomain::RegistrableDomain(&v162, (const WTF::URL *)(v94 + 736));
    WebCore::RegistrableDomain::RegistrableDomain(&v151, (const WTF::URL *)(v94 + 1008));
    v142 = WTF::equal(v162, v151, v102);
    v104 = v151;
    v151 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v103);
      else
        *(_DWORD *)v104 -= 2;
    }
    {
      v105 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v140 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v105 = WebKit::WebProcess::WebProcess(v140);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v105;
    }
    v106 = WebKit::WebProcess::ensureNetworkProcessConnection(v105);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v161, (uint64_t **)(v106 + 24));
    v147 = (os_unfair_lock_s *)v161[0];
    v157 = *(void **)(v101 + 2104);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 304), a1 + 296);
    v107 = *(unsigned int **)(a1 + 304);
    if (v107)
    {
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 + 1, v107));
    }
    v109 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v109 = &off_1E34EBDE8;
    *((_QWORD *)v109 + 1) = v107;
    v110 = v109;
    v144 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v111 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v111 = 508;
    *(_QWORD *)(v111 + 8) = 0;
    v112 = (void *)(v111 + 16);
    *(_QWORD *)(v111 + 528) = v111 + 16;
    *(_QWORD *)(v111 + 536) = v111 + 16;
    *(_OWORD *)(v111 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v111 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v111);
    v166[0] = (IPC::Encoder *)v111;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v111, (uint64_t *)(v94 + 736));
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v111, (uint64_t *)&v157);
    v113 = *(_QWORD *)(v111 + 544);
    v114 = v113 + 1;
    v115 = *(_QWORD *)(v111 + 552);
    if (v115 < v113 + 1)
    {
      v132 = (2 * v115 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v133 = v132;
        v132 *= 2;
        v141 = v133;
      }
      while (v133 < v114);
      v134 = (char *)mmap(0, v133, 3, 4098, -1, 0);
      if (v134 == (char *)-1)
        goto LABEL_129;
      v116 = v134;
      memcpy(v134, *(const void **)(v111 + 528), *(_QWORD *)(v111 + 544));
      v135 = *(void **)(v111 + 528);
      if (v135 != v112)
        munmap(v135, *(_QWORD *)(v111 + 552));
      *(_QWORD *)(v111 + 528) = v116;
      *(_QWORD *)(v111 + 552) = v141;
      v117 = *(_QWORD *)(v111 + 544);
    }
    else
    {
      v116 = *(char **)(v111 + 528);
      v117 = *(_QWORD *)(v111 + 544);
    }
    bzero(&v116[v117], v113 - v117);
    *(_QWORD *)(v111 + 544) = v114;
    v118 = (_BYTE *)(*(_QWORD *)(v111 + 528) + v113);
    *(_QWORD *)(v111 + 536) = v118 + 1;
    *v118 = v142;
    v119 = *(_QWORD *)(v111 + 544);
    v120 = v119 + 1;
    v121 = *(_QWORD *)(v111 + 552);
    if (v121 >= v119 + 1)
    {
      v122 = *(char **)(v111 + 528);
      v123 = *(_QWORD *)(v111 + 544);
LABEL_102:
      bzero(&v122[v123], v119 - v123);
      *(_QWORD *)(v111 + 544) = v120;
      v124 = (_BYTE *)(*(_QWORD *)(v111 + 528) + v119);
      *(_QWORD *)(v111 + 536) = v124 + 1;
      *v124 = 1;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v111, (uint64_t *)&v162);
      v151 = v110;
      *(_QWORD *)v152 = v144;
      IPC::Connection::sendMessageWithAsyncReply(v147, v166, (uint64_t *)&v151, 0, 0);
      v126 = v151;
      v151 = 0;
      if (v126)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v126 + 8))(v126);
      v127 = v166[0];
      v166[0] = 0;
      if (v127)
      {
        IPC::Encoder::~Encoder(v127, v125);
        WTF::fastFree(v128, v129);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v161);
      v131 = v162;
      v162 = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2)
          WTF::StringImpl::destroy(v131, v130);
        else
          *(_DWORD *)v131 -= 2;
      }
      CFRelease(*(CFTypeRef *)(v101 - 8));
      goto LABEL_111;
    }
    v136 = (2 * v121 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v137 = v136;
      v136 *= 2;
      v143 = v137;
    }
    while (v137 < v120);
    v138 = (char *)mmap(0, v137, 3, 4098, -1, 0);
    if (v138 != (char *)-1)
    {
      v122 = v138;
      memcpy(v138, *(const void **)(v111 + 528), *(_QWORD *)(v111 + 544));
      v139 = *(void **)(v111 + 528);
      if (v139 != v112)
        munmap(v139, *(_QWORD *)(v111 + 552));
      *(_QWORD *)(v111 + 528) = v122;
      *(_QWORD *)(v111 + 552) = v143;
      v123 = *(_QWORD *)(v111 + 544);
      goto LABEL_102;
    }
LABEL_129:
    __break(0xC471u);
    JUMPOUT(0x1975E4E88);
  }
  if (v155 != a2)
  {
    v8 = a2[3];
    if (v8)
    {
      WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)v155, 0);
      WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v155, a2[3]);
      v8 = HIDWORD(v156);
      v9 = *(_QWORD *)v155;
      v10 = *(_QWORD *)a2;
      if (HIDWORD(v156))
      {
        v11 = v10 + 96 * HIDWORD(v156);
        do
        {
          WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9, (const void **)v10);
          WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9 + 16, (const void **)(v10 + 16));
          v12 = *(_OWORD *)(v10 + 32);
          v13 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
          *(_OWORD *)(v9 + 32) = v12;
          *(_OWORD *)(v9 + 48) = v13;
          if (v10 != v9)
          {
            v14 = *(unsigned int *)(v9 + 92);
            v15 = *(unsigned int *)(v10 + 92);
            if (v14 <= v15)
            {
              if (v15 > *(unsigned int *)(v9 + 88))
              {
                WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v9 + 80, 0);
                WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v9 + 80, *(unsigned int *)(v10 + 92));
                v14 = *(unsigned int *)(v9 + 92);
              }
            }
            else
            {
              *(_DWORD *)(v9 + 92) = v15;
              v14 = v15;
            }
            if (v14)
            {
              memmove(*(void **)(v9 + 80), *(const void **)(v10 + 80), 24 * v14);
              v14 = *(unsigned int *)(v9 + 92);
            }
            v16 = *(unsigned int *)(v10 + 92);
            if (v14 != v16)
            {
              v17 = 3 * v14;
              v18 = *(_QWORD *)(v9 + 80) + 24 * v14;
              v19 = *(_QWORD *)(v10 + 80) + 8 * v17;
              v20 = 24 * v16 - 8 * v17;
              do
              {
                v21 = *(_OWORD *)v19;
                *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
                *(_OWORD *)v18 = v21;
                v18 += 24;
                v19 += 24;
                v20 -= 24;
              }
              while (v20);
              LODWORD(v14) = *(_DWORD *)(v10 + 92);
            }
            v5 = a4;
            v7 = a1;
            *(_DWORD *)(v9 + 92) = v14;
          }
          v10 += 96;
          v9 += 96;
        }
        while (v10 != v11);
        v10 = *(_QWORD *)a2;
        v8 = HIDWORD(v156);
        v9 = *(_QWORD *)v155;
      }
    }
    else
    {
      v9 = 0;
      v10 = *(_QWORD *)a2;
    }
    v66 = a2[3];
    if (v8 != (_DWORD)v66)
    {
      v67 = 96 * v8;
      v68 = 96 * v66;
      do
      {
        v69 = v10 + v67;
        v70 = (WTF *)*(unsigned int *)(v10 + v67 + 12);
        v71 = v9 + v67;
        *(_QWORD *)v71 = 0;
        *(_QWORD *)(v71 + 8) = 0;
        *(_DWORD *)(v71 + 12) = (_DWORD)v70;
        if ((_DWORD)v70)
        {
          v72 = (void *)WTF::fastMalloc(v70);
          *(_DWORD *)(v71 + 8) = (_DWORD)v70;
          *(_QWORD *)v71 = v72;
          memcpy(v72, *(const void **)(v10 + v67), *(unsigned int *)(v69 + 12));
        }
        v73 = (WTF *)*(unsigned int *)(v69 + 28);
        *(_QWORD *)(v71 + 16) = 0;
        *(_QWORD *)(v71 + 24) = 0;
        v74 = v71 + 16;
        *(_DWORD *)(v74 + 12) = (_DWORD)v73;
        if ((_DWORD)v73)
        {
          v75 = (void *)WTF::fastMalloc(v73);
          *(_DWORD *)(v9 + v67 + 24) = (_DWORD)v73;
          *(_QWORD *)v74 = v75;
          memcpy(v75, *(const void **)(v10 + v67 + 16), *(unsigned int *)(v69 + 28));
        }
        v76 = (_OWORD *)(v9 + v67);
        v77 = *(_OWORD *)(v10 + v67 + 32);
        v78 = *(_OWORD *)(v10 + v67 + 48);
        *(_OWORD *)((char *)v76 + 60) = *(_OWORD *)(v10 + v67 + 60);
        v76[2] = v77;
        v76[3] = v78;
        WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9 + v67 + 80, (__int128 **)(v10 + v67 + 80));
        v9 += 96;
        v10 += 96;
        v68 -= 96;
      }
      while (v67 != v68);
      v8 = a2[3];
      v5 = a4;
      v7 = a1;
    }
    HIDWORD(v156) = v8;
  }
LABEL_72:
  v151 = (WTF::StringImpl *)v7;
  v79 = (unsigned int *)(v7 + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 + 1, v79));
  v81 = *(_QWORD *)v155;
  *(_QWORD *)v155 = 0;
  v153 = *(_OWORD *)a3;
  *(_DWORD *)v154 = *((_DWORD *)a3 + 4);
  *(_OWORD *)&v154[4] = *(_OWORD *)v5;
  *(_DWORD *)&v154[20] = *((_DWORD *)v5 + 4);
  v154[24] = a5;
  v82 = v156;
  v156 = 0;
  v83 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v83 = off_1E34EBE10;
  *(_QWORD *)(v83 + 8) = v151;
  *(_QWORD *)(v83 + 16) = v7;
  *(_QWORD *)v152 = 0;
  *(_QWORD *)&v152[8] = 0;
  *(_QWORD *)(v83 + 24) = v81;
  *(_QWORD *)&v152[16] = 0;
  *(_QWORD *)(v83 + 32) = v82;
  v84 = *(_OWORD *)&v154[9];
  v85 = v153;
  *(_OWORD *)(v83 + 56) = *(_OWORD *)v154;
  *(_OWORD *)(v83 + 65) = v84;
  *(_OWORD *)(v83 + 40) = v85;
  v166[0] = (IPC::Encoder *)v83;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  v87 = v166[0];
  v166[0] = 0;
  if (v87)
    (*(void (**)(IPC::Encoder *))(*(_QWORD *)v87 + 8))(v87);
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v152[8], v86);
  v89 = *(_QWORD *)v152;
  *(_QWORD *)v152 = 0;
  if (v89)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v89 + 8));
  return WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v155, v88);
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCNetworkManager::networksChanged(uint64_t a1, int *a2, WebKit::RTC::Network::IPAddress *a3, WebKit::RTC::Network::IPAddress *a4)
{
  char v4;

  v4 = *(_BYTE *)(a1 + 57) == 0;
  *(_BYTE *)(a1 + 57) = 1;
  return WebKit::LibWebRTCNetworkManager::networksChanged(a1 - 296, a2, a3, a4, v4);
}

_QWORD *WebKit::LibWebRTCNetworkManager::interfaceNameForTesting(WebKit::LibWebRTCNetworkManager *this)
{
  _QWORD *result;
  _QWORD *v3;

  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 45);
  v3 = (_QWORD *)*((_QWORD *)this + 45);
  if (v3)
    v3 += *((unsigned int *)v3 - 1);
  if (v3 == result)
    return (_QWORD *)MEMORY[0x1E0CBF738];
  return result;
}

void WebKit::LibWebRTCNetworkManager::signalUsedInterface(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  _BYTE v7[24];

  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 360), a2, a3, (uint64_t)v7);
  if (v7[16] && !*(_BYTE *)(a1 + 352) && *(_BYTE *)(a1 + 355))
  {
    {
      v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v4 = WebKit::WebProcess::WebProcess(v6);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
    }
    WebKit::WebProcess::libWebRTCNetwork(v4);
    if (*(_BYTE *)(v5 + 112))
      WebKit::LibWebRTCNetworkManager::networksChanged(a1, (int *)(v5 + 120), (WebKit::RTC::Network::IPAddress *)(v5 + 136), (WebKit::RTC::Network::IPAddress *)(v5 + 156), 0);
  }
}

uint64_t WebKit::LibWebRTCNetworkManager::networkProcessCrashed(WebKit::LibWebRTCNetworkManager *this)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;

  *((_BYTE *)this + 353) = 0;
  result = WebCore::LibWebRTCProvider::hasWebRTCThreads(this);
  if ((_DWORD)result)
  {
    v3 = (unsigned int *)((char *)this + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E34EBE38;
    v5[1] = this;
    v5[2] = this;
    v6 = (uint64_t)v5;
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
    result = v6;
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCNetworkManager::networkProcessCrashed(WebKit::LibWebRTCNetworkManager *this)
{
  return WebKit::LibWebRTCNetworkManager::networkProcessCrashed((WebKit::LibWebRTCNetworkManager *)((char *)this - 296));
}

uint64_t WebKit::LibWebRTCNetworkManager::CreateNameForAddress(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v14;
  int v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 304), a1 + 296);
  v6 = *(unsigned int **)(a1 + 304);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v14 = (WTF *)v6;
  v15 = *(_DWORD *)(a2 + 8);
  v16 = *(_OWORD *)(a2 + 12);
  v8 = v17;
  v9 = (_QWORD *)a3[3];
  if (v9)
  {
    if (v9 == a3)
    {
      v18 = v17;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v17);
    }
    else
    {
      v18 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v10 = WTF::fastMalloc((WTF *)0x50);
  v11 = v10;
  *(_QWORD *)v10 = &off_1E34EBE60;
  *(_QWORD *)(v10 + 8) = v14;
  *(_QWORD *)(v10 + 16) = &off_1E34B67B0;
  *(_DWORD *)(v10 + 24) = v15;
  *(_OWORD *)(v10 + 28) = v16;
  if (v18)
  {
    if (v18 == v17)
    {
      *(_QWORD *)(v10 + 72) = v10 + 48;
      (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      *(_QWORD *)(v10 + 72) = v18;
      v18 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v10 + 72) = 0;
  }
  WTF::callOnMainRunLoop();
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v18 == v17)
  {
    v12 = 4;
    goto LABEL_19;
  }
  if (v18)
  {
    v12 = 5;
    v8 = v18;
LABEL_19:
    (*(void (**)(_QWORD *))(*v8 + 8 * v12))(v8);
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCNetworkManager::CreateNameForAddress(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return WebKit::LibWebRTCNetworkManager::CreateNameForAddress(a1 - 288, a2, a3);
}

void WebKit::LibWebRTCProvider::~LibWebRTCProvider(WebKit::LibWebRTCProvider *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (!v2)
    goto LABEL_2;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
  {
LABEL_2:
    WebCore::LibWebRTCProvider::~LibWebRTCProvider(this);
  }
  else
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
    WebCore::LibWebRTCProvider::~LibWebRTCProvider(this);
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCProvider::~LibWebRTCProvider(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::LibWebRTCProvider::createPeerConnection@<X0>(WebKit::LibWebRTCCodecs *a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _OWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WebKit::LibWebRTCCodecs::initializeIfNeeded(a1);
  v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  result = WebKit::LibWebRTCNetworkManager::getOrCreate((WebCore::Document *)v11);
  if (result)
  {
    v8 = result;
    *(_BYTE *)(result + 354) = WebCore::LibWebRTCProvider::isEnumeratingAllNetworkInterfacesEnabled(a1);
    *(_BYTE *)(v8 + 355) = *((_BYTE *)a1 + 197);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v9 = off_1E34EB798;
    v10 = v9;
    WebCore::LibWebRTCProvider::createPeerConnection();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebKit::LibWebRTCProvider::disableNonLocalhostConnections(WebKit::LibWebRTCProvider *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  WebKit::WebProcess::libWebRTCNetwork(v1);
  *(_BYTE *)(v2 + 40) = 1;
}

BOOL WebKit::LibWebRTCProvider::isSupportingVP9HardwareDecoder(WebKit::LibWebRTCProvider *this)
{
  WebKit::WebProcess *v1;
  WebKit::LibWebRTCCodecs *v2;
  unsigned __int8 *v3;
  WebKit::WebProcess *v5;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = WebKit::WebProcess::libWebRTCCodecs(v1);
  v3 = (unsigned __int8 *)v2 + 128;
  if (!*((_BYTE *)v2 + 129))
    v3 = (unsigned __int8 *)v2 + 130;
  return *v3 != 0;
}

WebKit::LibWebRTCCodecs *WebKit::LibWebRTCProvider::setVP9HardwareSupportForTesting(uint64_t a1, __int16 a2)
{
  WebKit::WebProcess *v3;
  WebKit::LibWebRTCCodecs *result;
  WebKit::WebProcess *v5;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  result = WebKit::WebProcess::libWebRTCCodecs(v3);
  *((_WORD *)result + 64) = a2;
  return result;
}

uint64_t WebKit::RTCSocketFactory::CreateUdpSocket(WebKit::RTCSocketFactory *this, const rtc::SocketAddress *a2, __int16 a3, __int16 a4)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  _QWORD *v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WebKit::WebProcess *v37;
  void *__p;
  WTF **v39;
  WTF *v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int16 v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49[2];
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v37);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  WebKit::WebProcess::libWebRTCNetwork(v8);
  v10 = v9;
  v11 = v9 + 24;
  v12 = *((_OWORD *)this + 3);
  *(_OWORD *)v49 = *((_OWORD *)this + 2);
  v50 = v12;
  v13 = *((_QWORD *)this + 1);
  v14 = *((_BYTE *)this + 64);
  v15 = *((_BYTE *)this + 65);
  v16 = (WTF::StringImpl **)((char *)this + 72);
  v48 = v13;
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)&__p);
  v17 = WTF::fastMalloc((WTF *)0x270);
  WebKit::LibWebRTCSocket::LibWebRTCSocket(v17, v11, v49, 0, a2, (const rtc::SocketAddress *)&__p);
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  v18 = *(_QWORD *)(v10 + 48);
  if (v18)
  {
    v47 = *(_QWORD *)(v17 + 352);
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v49, a2);
    __p = &v47;
    v39 = v49;
    LOWORD(v40) = a3;
    WORD1(v40) = a4;
    v41 = &v48;
    LOBYTE(v42) = v14;
    BYTE1(v42) = v15;
    *((_QWORD *)&v42 + 1) = v16;
    IPC::Connection::send<Messages::NetworkRTCProvider::CreateUDPSocket>(v18, (uint64_t **)&__p);
    v20 = v49[1];
    if (v49[1])
    {
      v49[1] = 0;
      LODWORD(v50) = 0;
LABEL_8:
      WTF::fastFree(v20, v19);
      return v17;
    }
    return v17;
  }
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v21 = off_1E34EBFF0;
  __p = v21;
  WTF::callOnMainRunLoop();
  v22 = __p;
  __p = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  __p = *(void **)(v17 + 352);
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v39, a2);
  LOWORD(v44) = a3;
  WORD1(v44) = a4;
  *((_QWORD *)&v44 + 1) = v13;
  LOBYTE(v45) = v14;
  HIBYTE(v45) = v15;
  v23 = *v16;
  if (*v16)
    *(_DWORD *)v23 += 2;
  v46 = v23;
  v24 = *(_QWORD *)(v10 + 56);
  v25 = *(_QWORD *)(v10 + 64);
  if (v24)
  {
    if (v25 + 1 != v24)
      goto LABEL_22;
    goto LABEL_21;
  }
  v26 = *(unsigned int *)(v10 + 80);
  if (!v25)
  {
    if ((_DWORD)v26)
    {
      v25 = 0;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v25 == v26 - 1)
  {
LABEL_21:
    WTF::Deque<WTF::Function<void ()(IPC::Connection &)>,0ul>::expandCapacity(v10 + 56);
    v25 = *(_QWORD *)(v10 + 64);
  }
LABEL_22:
  v27 = *(_QWORD *)(v10 + 72);
  v28 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v28 = &off_1E34EC018;
  *(_QWORD *)(v28 + 8) = __p;
  *(_QWORD *)(v28 + 16) = v39;
  *(_QWORD *)(v28 + 24) = v40;
  v30 = v41;
  v40 = 0;
  v41 = 0;
  *(_QWORD *)(v28 + 32) = v30;
  v31 = v43;
  *(_OWORD *)(v28 + 40) = v42;
  *(_QWORD *)(v28 + 56) = v31;
  LOWORD(v31) = v45;
  *(_OWORD *)(v28 + 64) = v44;
  *(_WORD *)(v28 + 80) = v31;
  v32 = v46;
  if (v46)
    *(_DWORD *)v46 += 2;
  *(_QWORD *)(v28 + 88) = v32;
  *(_QWORD *)(v27 + 8 * v25) = v28;
  v33 = *(_QWORD *)(v10 + 64);
  if (v33 == *(unsigned int *)(v10 + 80) - 1)
    v34 = 0;
  else
    v34 = v33 + 1;
  *(_QWORD *)(v10 + 64) = v34;
  v35 = v46;
  v46 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 != 2)
    {
      *(_DWORD *)v35 -= 2;
      return v17;
    }
    WTF::StringImpl::destroy(v35, v29);
    v20 = v40;
    if (!v40)
      return v17;
    v40 = 0;
    LODWORD(v41) = 0;
    goto LABEL_8;
  }
  return v17;
}

uint64_t WebKit::RTCSocketFactory::CreateClientTcpSocket(uint64_t a1, const rtc::SocketAddress *a2, const rtc::SocketAddress *a3, _DWORD *a4)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  WTF *v36;
  __int128 v37;
  WTF::StringImpl *v38;
  __int128 v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  WTF *v46;
  WebKit::WebProcess *v48;
  _DWORD *v49;
  char v50;
  _DWORD **v51;
  WTF::StringImpl *v52;
  void *v53[2];
  char *v54;
  WTF::StringImpl **v55;
  _DWORD *v56;
  uint64_t *v57;
  char v58;
  char v59;
  _DWORD **v60;
  void *__p[2];
  char v62;
  char v63[8];
  WTF *v64;
  int v65;
  char v66[8];
  WTF *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  __int128 v83;
  __int16 v84;
  WTF::StringImpl *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v48);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  WebKit::WebProcess::libWebRTCNetwork(v8);
  v10 = v9;
  v11 = v9 + 24;
  v12 = *(_OWORD *)(a1 + 48);
  v71 = *(_OWORD *)(a1 + 32);
  v72 = v12;
  v13 = *(WTF::StringImpl **)(a1 + 16);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_BYTE *)(a1 + 64);
  v50 = *(_BYTE *)(a1 + 65);
  v51 = (_DWORD **)(a1 + 72);
  v52 = v13;
  v70 = v14;
  v16 = WTF::fastMalloc((WTF *)0x270);
  v73 = v71;
  v74 = v72;
  *(_DWORD *)(WebKit::LibWebRTCSocket::LibWebRTCSocket(v16, v11, &v73, 1, a2, a3) + 524) = 3;
  v17 = *(_QWORD *)(v10 + 48);
  if (v17)
  {
    v69 = *(_QWORD *)(v16 + 352);
    v18 = *(unsigned __int8 *)(v10 + 40);
    WebKit::RTC::Network::SocketAddress::isolatedCopy((size_t *)a2, (rtc::SocketAddress *)&v73);
    if (v18)
      rtc::SocketAddress::SetIP();
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v66, (const rtc::SocketAddress *)&v73);
    v19 = *(unsigned __int8 *)(v10 + 40);
    WebKit::RTC::Network::SocketAddress::isolatedCopy((size_t *)a3, (rtc::SocketAddress *)__p);
    if (v19)
      rtc::SocketAddress::SetIP();
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v63, (const rtc::SocketAddress *)__p);
    v53[0] = &v69;
    v53[1] = v66;
    v54 = v63;
    v55 = &v52;
    v56 = a4;
    v57 = &v70;
    v58 = v15;
    v59 = v50;
    v60 = v51;
    IPC::Connection::send<Messages::NetworkRTCProvider::CreateClientTCPSocket>(v17, (uint64_t **)v53);
    v21 = v64;
    if (v64)
    {
      v64 = 0;
      v65 = 0;
      WTF::fastFree(v21, v20);
    }
    if (v62 < 0)
      operator delete(__p[0]);
    v22 = v67;
    if (v67)
    {
      v67 = 0;
      v68 = 0;
      WTF::fastFree(v22, v20);
    }
    if (SBYTE7(v74) < 0)
      operator delete((void *)v73);
    v13 = v52;
    goto LABEL_59;
  }
  v49 = a4;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = off_1E34EC040;
  *(_QWORD *)&v73 = v23;
  WTF::callOnMainRunLoop();
  v24 = v73;
  *(_QWORD *)&v73 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  *(_QWORD *)&v73 = *(_QWORD *)(v16 + 352);
  v25 = *(unsigned __int8 *)(v10 + 40);
  WebKit::RTC::Network::SocketAddress::isolatedCopy((size_t *)a2, (rtc::SocketAddress *)__p);
  if (v25)
    rtc::SocketAddress::SetIP();
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)((char *)&v73 + 8), (const rtc::SocketAddress *)__p);
  v26 = *(unsigned __int8 *)(v10 + 40);
  WebKit::RTC::Network::SocketAddress::isolatedCopy((size_t *)a3, (rtc::SocketAddress *)v53);
  if (v26)
    rtc::SocketAddress::SetIP();
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v77, (const rtc::SocketAddress *)v53);
  if (v13)
    *(_DWORD *)v13 += 2;
  v82 = v13;
  LODWORD(v83) = *v49;
  *((_QWORD *)&v83 + 1) = v14;
  LOBYTE(v84) = v15;
  HIBYTE(v84) = v50;
  v27 = (WTF::StringImpl *)*v51;
  if (*v51)
    *(_DWORD *)v27 += 2;
  v85 = v27;
  v28 = *(_QWORD *)(v10 + 56);
  v29 = *(_QWORD *)(v10 + 64);
  if (v28)
  {
    if (v29 + 1 != v28)
      goto LABEL_38;
    goto LABEL_37;
  }
  v30 = *(unsigned int *)(v10 + 80);
  if (v29)
  {
    if (v29 != v30 - 1)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (!(_DWORD)v30)
  {
LABEL_37:
    WTF::Deque<WTF::Function<void ()(IPC::Connection &)>,0ul>::expandCapacity(v10 + 56);
    v29 = *(_QWORD *)(v10 + 64);
    goto LABEL_38;
  }
  v29 = 0;
LABEL_38:
  v31 = *(_QWORD *)(v10 + 72);
  v32 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v32 = &off_1E34EC068;
  *(_OWORD *)(v32 + 8) = v73;
  v33 = v74;
  *(_QWORD *)&v74 = 0;
  *(_QWORD *)(v32 + 24) = v33;
  v34 = *((_QWORD *)&v74 + 1);
  *((_QWORD *)&v74 + 1) = 0;
  *(_QWORD *)(v32 + 32) = v34;
  v35 = v75;
  *(_QWORD *)(v32 + 56) = v76;
  *(_OWORD *)(v32 + 40) = v35;
  *(_QWORD *)(v32 + 64) = v77;
  v36 = v78;
  v78 = 0;
  *(_QWORD *)(v32 + 72) = v36;
  *(_QWORD *)&v35 = v79;
  v79 = 0;
  *(_QWORD *)(v32 + 80) = v35;
  v37 = v80;
  *(_QWORD *)(v32 + 104) = v81;
  *(_OWORD *)(v32 + 88) = v37;
  v38 = v82;
  v82 = 0;
  *(_QWORD *)(v32 + 112) = v38;
  v39 = v83;
  *(_WORD *)(v32 + 136) = v84;
  *(_OWORD *)(v32 + 120) = v39;
  v40 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  *(_QWORD *)(v32 + 144) = v40;
  *(_QWORD *)(v31 + 8 * v29) = v32;
  v41 = *(_QWORD *)(v10 + 64);
  if (v41 == *(unsigned int *)(v10 + 80) - 1)
    v42 = 0;
  else
    v42 = v41 + 1;
  *(_QWORD *)(v10 + 64) = v42;
  v43 = v85;
  v85 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v82;
  v82 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v78;
  if (v78)
  {
    v78 = 0;
    LODWORD(v79) = 0;
    WTF::fastFree(v45, v20);
  }
  v46 = (WTF *)v74;
  if ((_QWORD)v74)
  {
    *(_QWORD *)&v74 = 0;
    DWORD2(v74) = 0;
    WTF::fastFree(v46, v20);
  }
  if (SHIBYTE(v54) < 0)
    operator delete(v53[0]);
  if (v62 < 0)
    operator delete(__p[0]);
LABEL_59:
  v52 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v16;
}

uint64_t *WebKit::RTCSocketFactory::CreateAsyncDnsResolver@<X0>(WebKit::LibWebRTCResolver **a1@<X8>)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  WebKit::WebProcess *v6;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  WebKit::WebProcess::libWebRTCNetwork(v3);
  return WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver((WebKit::LibWebRTCSocketFactory *)(v4 + 24), a1);
}

uint64_t *WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver@<X0>(WebKit::LibWebRTCSocketFactory *this@<X0>, WebKit::LibWebRTCResolver **a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *a2 = WebKit::LibWebRTCResolver::LibWebRTCResolver((WebKit::LibWebRTCResolver *)v4);
  v7 = *(_QWORD *)(v4 + 24);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<API::ContentWorld&>((uint64_t *)this + 1, &v7, v4, (uint64_t)&v6);
}

uint64_t WebKit::RTCSocketFactory::suspend(WebKit::RTCSocketFactory *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v4 = *((_OWORD *)this + 2);
  *(_QWORD *)&v5 = *((_QWORD *)this + 6);
  v1 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v1 = off_1E34EBED8;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  v3 = v1;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t WebKit::RTCSocketFactory::resume(WebKit::RTCSocketFactory *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v4 = *((_OWORD *)this + 2);
  *(_QWORD *)&v5 = *((_QWORD *)this + 6);
  v1 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v1 = off_1E34EBF28;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  v3 = v1;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void WebKit::LibWebRTCProvider::startedNetworkThread(WebKit::LibWebRTCProvider *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  WebKit::WebProcess::libWebRTCNetwork(v1);
  *(_BYTE *)(v2 + 192) = 1;
  if (*(_QWORD *)(v2 + 200))
    WebKit::LibWebRTCNetwork::setSocketFactoryConnection((WebKit::LibWebRTCNetwork *)v2);
}

void WebKit::LibWebRTCProvider::createSocketFactory(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8);
  if (v11)
    v12 = v11 - 16;
  else
    v12 = 0;
  CFRetain(*(CFTypeRef *)(v12 + 8));
  v13 = *(_QWORD *)(v12 + 2120);
  v14 = WTF::fastMalloc((WTF *)0x50);
  v16 = *a3;
  v15 = a3[1];
  *(_QWORD *)v14 = off_1E34EBA70;
  *(_QWORD *)(v14 + 8) = v13;
  v17 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 16) = v17;
  *(_OWORD *)(v14 + 32) = v16;
  *(_OWORD *)(v14 + 48) = v15;
  *(_BYTE *)(v14 + 64) = a4;
  *(_BYTE *)(v14 + 65) = 0;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(v14 + 72) = v18;
  v19 = *(_QWORD *)(v12 + 48);
  if (!v19 || (*(_DWORD *)(*(_QWORD *)(v19 + 112) + 720) & 0x100000) == 0)
    *(_BYTE *)(v14 + 65) = 1;
  *a6 = v14;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 - 8));
}

uint64_t WebKit::RTCSocketFactory::disableRelay(uint64_t this)
{
  *(_BYTE *)(this + 65) = 1;
  return this;
}

uint64_t WebKit::LibWebRTCProvider::createRTCDataChannelRemoteHandlerConnection@<X0>(WebKit::LibWebRTCProvider *this@<X0>, _QWORD *a2@<X8>)
{
  WebKit::RTCDataChannelRemoteManager *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = WebKit::RTCDataChannelRemoteManager::sharedManager(this);
  result = WebKit::RTCDataChannelRemoteManager::remoteHandlerConnection(v3);
  v5 = (unsigned int *)(result + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *a2 = result;
  return result;
}

WebKit::RTCDataChannelRemoteManager *WebKit::RTCDataChannelRemoteManager::sharedManager(WebKit::RTCDataChannelRemoteManager *this)
{
  WebKit::RTCDataChannelRemoteManager *result;
  WebKit::RTCDataChannelRemoteManager *v2;
  WebKit::RTCDataChannelRemoteManager *v3;

    return (WebKit::RTCDataChannelRemoteManager *)WebKit::RTCDataChannelRemoteManager::sharedManager(void)::sharedManager;
  v2 = (WebKit::RTCDataChannelRemoteManager *)operator new();
  v3 = WebKit::RTCDataChannelRemoteManager::RTCDataChannelRemoteManager(v2);
  IPC::Connection::addMessageReceiver(*((_QWORD *)v3 + 3), *((_QWORD *)v2 + 2) + 32, (uint64_t)v2, 0x32u, 0);
  result = v2;
  WebKit::RTCDataChannelRemoteManager::sharedManager(void)::sharedManager = (uint64_t)v2;
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::remoteHandlerConnection(WebKit::RTCDataChannelRemoteManager *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    v3 = *((_QWORD *)this + 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v7 = v3;
    v4 = WTF::fastMalloc((WTF *)0x20);
    v5 = WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::RemoteHandlerConnection(v4, &v7);
    v6 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v5;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    return *((_QWORD *)this + 4);
  }
  return result;
}

char *WebKit::LibWebRTCProvider::setLoggingLevel(uint64_t a1, __int16 a2)
{
  WebKit::WebProcess *v3;
  WebKit::LibWebRTCCodecs *v4;
  WebKit::WebProcess *v6;

  WebCore::LibWebRTCProvider::setLoggingLevel();
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::libWebRTCCodecs(v3);
  return WebKit::LibWebRTCCodecs::setLoggingLevel((uint64_t)v4, a2);
}

uint64_t WebKit::LibWebRTCResolver::sendOnMainThread(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *a1;
  *a1 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E34EBF78;
  v2[1] = v1;
  v4 = v2;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void WebKit::LibWebRTCResolver::~LibWebRTCResolver(WebKit::LibWebRTCResolver *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WebKit::WebProcess *v35;
  uint64_t *v36;
  _QWORD *v37;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v35);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::libWebRTCNetwork(v2);
  v7 = *(_QWORD *)(v4 + 32);
  v5 = (uint64_t *)(v4 + 32);
  v6 = v7;
  if (v7)
  {
    v8 = *((_QWORD *)this + 3);
    v9 = *(_DWORD *)(v6 - 8);
    v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v6 + 16 * v13);
    if (v14 != v8)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v6 + 16 * v13);
        ++v15;
        if (v14 == v8)
          goto LABEL_10;
      }
      v13 = *(unsigned int *)(v6 - 4);
    }
LABEL_10:
    if (v13 != *(_DWORD *)(v6 - 4))
    {
      v16 = (_QWORD *)(v6 + 16 * v13);
      v17 = (unsigned int *)v16[1];
      *v16 = -1;
      v16[1] = 0;
      if (v17)
      {
        do
        {
          v20 = __ldaxr(v17);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v17));
        if (!v21)
        {
          atomic_store(1u, v17);
          v36 = v5;
          WTF::fastFree((WTF *)v17, v3);
          v5 = v36;
        }
      }
      ++*(_DWORD *)(*v5 - 16);
      v18 = *v5;
      if (*v5)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v22 = *v5;
      if (*v5)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v24 >> 1, 0);
      }
    }
  }
  v26 = *((_QWORD *)this + 3);
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v27 = off_1E34EBFA0;
  v27[1] = v26;
  v37 = v27;
  WebKit::LibWebRTCResolver::sendOnMainThread((uint64_t *)&v37);
  if (v37)
    (*(void (**)(_QWORD *))(*v37 + 8))(v37);
  v29 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v28);
  v31 = *((_QWORD *)this + 2);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 0;
    v32 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v30);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::LibWebRTCResolver::~LibWebRTCResolver(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::LibWebRTCResolver::~LibWebRTCResolver(WebKit::LibWebRTCResolver *this)
{
  WebKit::LibWebRTCResolver::~LibWebRTCResolver((WebKit::LibWebRTCResolver *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebKit::LibWebRTCResolver::~LibWebRTCResolver((WebKit::LibWebRTCResolver *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

void WebKit::LibWebRTCResolver::start(uint64_t a1, rtc::SocketAddress *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  void *__p;
  char v18;

  v5 = *a3;
  *a3 = 0;
  v6 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  rtc::SocketAddress::operator=();
  *(_WORD *)(a1 + 132) = rtc::SocketAddress::port(a2);
  rtc::SocketAddress::HostAsURIString(a2);
  WTF::String::String();
  if (v16 && WTF::StringImpl::endsWithIgnoringASCIICase() && (WTF::isVersion4UUID() & 1) == 0)
  {
    v11 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "mDNS candidate is not a Version 4 UUID", (uint8_t *)&v13, 2u);
    }
    *(_DWORD *)(a1 + 128) = -1;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 24);
    WTF::String::isolatedCopy();
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E34EBFC8;
    v7[1] = v13;
    v8 = v14;
    v14 = 0;
    v7[2] = v8;
    v15 = v7;
    WebKit::LibWebRTCResolver::sendOnMainThread((uint64_t *)&v15);
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v18 < 0)
    operator delete(__p);
}

uint64_t WebKit::LibWebRTCResolver::result(WebKit::LibWebRTCResolver *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebKit::LibWebRTCResolver::GetResolvedAddress(WebKit::LibWebRTCResolver *this, int a2, rtc::SocketAddress *a3)
{
  uint64_t v7;
  const rtc::IPAddress *v8;
  uint64_t v9;

  if (*((_DWORD *)this + 32))
    return 0;
  if (!*((_DWORD *)this + 11))
    return 0;
  rtc::SocketAddress::operator=();
  v7 = *((unsigned int *)this + 11);
  if (!(_DWORD)v7)
    return 0;
  v8 = (const rtc::IPAddress *)*((_QWORD *)this + 4);
  v9 = 32 * v7;
  while (*((_DWORD *)v8 + 2) != a2)
  {
    v8 = (const rtc::IPAddress *)((char *)v8 + 32);
    v9 -= 32;
    if (!v9)
      return 0;
  }
  rtc::SocketAddress::SetResolvedIP(a3, v8);
  rtc::SocketAddress::SetPort(a3);
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCResolver::GetResolvedAddress(WebKit::LibWebRTCResolver *this, int a2, rtc::SocketAddress *a3)
{
  return WebKit::LibWebRTCResolver::GetResolvedAddress((WebKit::LibWebRTCResolver *)((char *)this - 8), a2, a3);
}

uint64_t WebKit::LibWebRTCResolver::setResolvedAddress(uint64_t a1, _DWORD *a2)
{
  void (****v4)(void);
  uint64_t v5;
  uint64_t v6;
  void (***v7)(void);
  void (**v8)(void);

  v4 = (void (****)(void))(a1 + 32);
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    v7 = *v4;
    do
    {
      v8 = *v7;
      v7 += 4;
      (*v8)();
      v6 -= 32;
    }
    while (v6);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, a2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
}

uint64_t WebKit::LibWebRTCSocket::LibWebRTCSocket(uint64_t a1, uint64_t a2, _OWORD *a3, int a4, const rtc::SocketAddress *a5, const rtc::SocketAddress *a6)
{
  uint64_t v12;
  uint64_t IdentifierInternal;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;

  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = MEMORY[0x1E0DCDD38];
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = v12 + 16;
  *(_QWORD *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 72;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 120) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 128;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 176) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 184) = a1 + 184;
  *(_QWORD *)(a1 + 192) = a1 + 184;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 184;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 232) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 240) = a1 + 240;
  *(_QWORD *)(a1 + 248) = a1 + 240;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 240;
  *(_BYTE *)(a1 + 272) = 0;
  webrtc::callback_list_impl::CallbackListReceivers::CallbackListReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(a1 + 280));
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = absl::internal_any_invocable::EmptyManager;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34EBAC8;
  *(_QWORD *)(a1 + 352) = IdentifierInternal;
  *(_QWORD *)(a1 + 360) = a2;
  *(_DWORD *)(a1 + 368) = a4;
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(a1 + 376), a5);
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(a1 + 448), a6);
  *(_QWORD *)(a1 + 520) = 0x100000000;
  v15 = 528;
  do
  {
    v16 = (_BYTE *)(a1 + v15);
    *v16 = 0;
    v16[4] = 0;
    v15 += 8;
  }
  while (v16 + 8 != (_BYTE *)(a1 + 584));
  *(_BYTE *)(a1 + 584) = 0;
  v17 = a3[1];
  *(_OWORD *)(a1 + 592) = *a3;
  *(_OWORD *)(a1 + 608) = v17;
  v19 = *(_QWORD *)(a1 + 352);
  v18 = *(uint64_t **)(a1 + 360);
  v20 = *v18;
  if (*v18
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(*(uint64_t **)(a1 + 360)),
        (v20 = *v18) != 0))
  {
    v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v21 = 0;
  }
  v22 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = v21 & ((v24 >> 31) ^ v24);
  v26 = (_QWORD *)(v20 + 16 * v25);
  v27 = *v26;
  if (!*v26)
  {
LABEL_14:
    *v26 = v19;
    if (!*(_QWORD *)(a1 + 344))
    {
      v30 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = a1;
      v31 = *(unsigned int **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v30;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v14);
        }
      }
    }
    v34 = *(unsigned int **)(a1 + 344);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v36 = (unsigned int *)v26[1];
    v26[1] = v34;
    if (v36)
    {
      do
      {
        v39 = __ldaxr(v36);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v36));
      if (!v40)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v14);
      }
    }
    v37 = *v18;
    if (*v18)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v41 = *v18;
    if (*v18)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        return a1;
    }
    else if (3 * v44 > 4 * v43)
    {
      return a1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v18);
    return a1;
  }
  v28 = 0;
  v29 = 1;
  while (v27 != v19)
  {
    if (v27 == -1)
      v28 = v26;
    v25 = (v25 + v29) & v21;
    v26 = (_QWORD *)(v20 + 16 * v25);
    v27 = *v26;
    ++v29;
    if (!*v26)
    {
      if (v28)
      {
        *v28 = 0;
        v28[1] = 0;
        --*(_DWORD *)(*v18 - 16);
        v26 = v28;
      }
      goto LABEL_14;
    }
  }
  return a1;
}

void WebKit::LibWebRTCSocket::~LibWebRTCSocket(void **this)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;

  WebKit::LibWebRTCSocket::Close((WebKit::LibWebRTCSocket *)this);
  v3 = (uint64_t *)this[45];
  v4 = *v3;
  if (*v3)
  {
    v5 = this[44];
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(void **)(v4 + 16 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(void **)(v4 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (_QWORD *)(v4 + 16 * v10);
      v14 = (unsigned int *)v13[1];
      *v13 = -1;
      v13[1] = 0;
      if (v14)
      {
        do
        {
          v17 = __ldaxr(v14);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v14));
        if (!v18)
        {
          atomic_store(1u, v14);
          v27 = v3;
          WTF::fastFree((WTF *)v14, v2);
          v3 = v27;
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      v15 = *v3;
      if (*v3)
        v16 = *(_DWORD *)(v15 - 12) - 1;
      else
        v16 = -1;
      *(_DWORD *)(v15 - 12) = v16;
      v19 = *v3;
      if (*v3)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v21 >> 1);
      }
    }
  }
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  v23 = this[43];
  if (v23)
  {
    v23[1] = 0;
    v24 = (unsigned int *)this[43];
    this[43] = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v2);
      }
    }
  }
  else
  {
    this[43] = 0;
  }
  rtc::AsyncPacketSocket::~AsyncPacketSocket((rtc::AsyncPacketSocket *)this);
}

{
  WTF *v1;
  void *v2;

  WebKit::LibWebRTCSocket::~LibWebRTCSocket(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::LibWebRTCSocket::Close(WebKit::LibWebRTCSocket *this)
{
  uint64_t v1;
  unsigned __int8 **v2;
  uint64_t v5;
  uint64_t *v6;

  v1 = *((_QWORD *)this + 45);
  v2 = *(unsigned __int8 ***)(v1 + 24);
  if (v2)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(unsigned __int8 ***)(v1 + 24));
    if (*((_DWORD *)this + 131))
    {
      *((_DWORD *)this + 131) = 0;
      v5 = *((_QWORD *)this + 44);
      v6 = &v5;
      IPC::Connection::send<Messages::NetworkRTCProvider::CloseSocket>((uint64_t)v2, &v6);
    }
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v2);
  }
  return 0;
}

uint64_t WebKit::LibWebRTCSocket::GetLocalAddress@<X0>(WebKit::LibWebRTCSocket *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  return rtc::SocketAddress::SocketAddress(a2, (WebKit::LibWebRTCSocket *)((char *)this + 376));
}

uint64_t WebKit::LibWebRTCSocket::GetRemoteAddress@<X0>(WebKit::LibWebRTCSocket *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  return rtc::SocketAddress::SocketAddress(a2, (WebKit::LibWebRTCSocket *)((char *)this + 448));
}

size_t WebKit::LibWebRTCSocket::SendTo(WebKit::LibWebRTCSocket *this, const void *a2, size_t a3, const rtc::SocketAddress *a4, const rtc::PacketOptions *a5)
{
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  void *v17;
  WTF *v18;
  _BYTE v20[112];
  __int16 v21;
  WTF *v22;
  int v23;
  IPC::Encoder *v24;
  _BYTE v25[48];

  v5 = *((_QWORD *)this + 45);
  v6 = *(unsigned __int8 ***)(v5 + 24);
  if (!v6)
    return 0xFFFFFFFFLL;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(unsigned __int8 ***)(v5 + 24));
  if (!*((_BYTE *)this + 584))
  {
    v11 = *((_QWORD *)this + 44);
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v21, a4);
    rtc::PacketOptions::PacketOptions();
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 509;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v24 = (IPC::Encoder *)v12;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v11;
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v12, a2, a3);
    IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode((IPC::Encoder *)v12, &v21);
    WebKit::RTCPacketOptions::serializableData((uint64_t)v20, (uint64_t)v25);
    IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::encode((IPC::Encoder *)v12, (uint64_t)v25);
    IPC::Connection::sendMessageImpl((uint64_t)v6, (uint64_t *)&v24, 0, 0);
    v14 = v24;
    v24 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v15, v16);
    }
    rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)v20);
    v18 = v22;
    if (v22)
    {
      v22 = 0;
      v23 = 0;
      WTF::fastFree(v18, v17);
    }
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v6);
  return a3;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkRTCProvider::CloseSocket>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 504;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocket::GetOption(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8 * a2 + 528);
  if ((v3 & 0xFF00000000) == 0)
    return 0xFFFFFFFFLL;
  *a3 = v3;
  return 0;
}

uint64_t WebKit::LibWebRTCSocket::SetOption(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v3 = a1 + 8 * a2;
  *(_DWORD *)(v3 + 528) = a3;
  *(_BYTE *)(v3 + 532) = 1;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 24);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 352);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 512;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v14 = (IPC::Encoder *)v8;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v7;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a2;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v14, 0, 0);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
  }
  return 0;
}

WebCore::DeprecatedGlobalSettings *WebKit::LibWebRTCSocketFactory::setConnection(uint64_t a1, unsigned __int8 ***a2)
{
  WebCore::DeprecatedGlobalSettings *result;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 **v24;
  char v25;
  uint64_t v26;
  void *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  unsigned __int8 **v31;
  char v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 **v45;
  IPC::Encoder *v46;

  result = (WebCore::DeprecatedGlobalSettings *)WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::copyRef(a2, &v45);
  v5 = v45;
  v45 = 0;
  v6 = *(unsigned __int8 ***)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
  {
    v7 = *v6;
    if (__ldaxr(*v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_6;
    }
    result = (WebCore::DeprecatedGlobalSettings *)MEMORY[0x19AEABB3C](v7);
LABEL_6:
    v9 = *((_QWORD *)v7 + 1);
    v10 = v9 - 1;
    *((_QWORD *)v7 + 1) = v9 - 1;
    if (v9 == 1)
    {
      v43 = *((_QWORD *)v7 + 2);
      v12 = *((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      v11 = v43 == 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = __ldxr(v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, v7))
      {
        if (v10)
          goto LABEL_16;
LABEL_14:
        v14 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v14 = off_1E34ACA48;
        *(_QWORD *)(v14 + 8) = v7;
        *(_QWORD *)(v14 + 16) = v12;
        *(_BYTE *)(v14 + 24) = v11;
        v46 = (IPC::Encoder *)v14;
        WTF::ensureOnMainRunLoop();
        result = v46;
        v46 = 0;
        if (result)
          result = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(WebCore::DeprecatedGlobalSettings *))(*(_QWORD *)result + 8))(result);
LABEL_16:
        v15 = v45;
        v45 = 0;
        if (!v15)
          goto LABEL_31;
        v16 = *v15;
        if (__ldaxr(*v15))
        {
          __clrex();
        }
        else if (!__stxr(1u, v16))
        {
          goto LABEL_21;
        }
        result = (WebCore::DeprecatedGlobalSettings *)MEMORY[0x19AEABB3C](v16);
LABEL_21:
        v18 = *((_QWORD *)v16 + 1);
        v19 = v18 - 1;
        *((_QWORD *)v16 + 1) = v18 - 1;
        if (v18 == 1)
        {
          v44 = *((_QWORD *)v16 + 2);
          v21 = *((_QWORD *)v16 + 3);
          *((_QWORD *)v16 + 3) = 0;
          v20 = v44 == 0;
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
        v22 = __ldxr(v16);
        if (v22 == 1)
        {
          if (!__stlxr(0, v16))
          {
            if (!v19)
            {
LABEL_29:
              v23 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v23 = off_1E34ACA48;
              *(_QWORD *)(v23 + 8) = v16;
              *(_QWORD *)(v23 + 16) = v21;
              *(_BYTE *)(v23 + 24) = v20;
              v46 = (IPC::Encoder *)v23;
              WTF::ensureOnMainRunLoop();
              result = v46;
              v46 = 0;
              if (result)
                result = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(WebCore::DeprecatedGlobalSettings *))(*(_QWORD *)result + 8))(result);
            }
LABEL_31:
            v5 = *(unsigned __int8 ***)(a1 + 24);
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        result = (WebCore::DeprecatedGlobalSettings *)WTF::Lock::unlockSlow((WTF::Lock *)v16);
        if (!v19)
          goto LABEL_29;
        goto LABEL_31;
      }
    }
    else
    {
      __clrex();
    }
    result = (WebCore::DeprecatedGlobalSettings *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_32:
  if (v5)
  {
    v24 = *a2;
    v25 = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(result) + 27);
    v26 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v26 = 510;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 528) = v26 + 16;
    *(_QWORD *)(v26 + 536) = v26 + 16;
    *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v26 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
    v46 = (IPC::Encoder *)v26;
    *IPC::Encoder::grow((IPC::Encoder *)v26, 1uLL, 1) = v25;
    IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v46, 0, 0);
    v28 = v46;
    v46 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v27);
      v28 = (IPC::Encoder *)WTF::fastFree(v29, v30);
    }
    v31 = *a2;
    v32 = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v28) + 28);
    v33 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v33 = 511;
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 528) = v33 + 16;
    *(_QWORD *)(v33 + 536) = v33 + 16;
    *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v33 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
    v46 = (IPC::Encoder *)v33;
    *IPC::Encoder::grow((IPC::Encoder *)v33, 1uLL, 1) = v32;
    IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v46, 0, 0);
    result = v46;
    v46 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v34);
      result = (WebCore::DeprecatedGlobalSettings *)WTF::fastFree(v35, v36);
    }
    while (1)
    {
      v41 = *(_QWORD *)(a1 + 32);
      if (v41 == *(_QWORD *)(a1 + 40))
        break;
      v37 = *(_QWORD *)(a1 + 48);
      v38 = *(_QWORD *)(v37 + 8 * v41);
      *(_QWORD *)(v37 + 8 * v41) = 0;
      v39 = *(_QWORD *)(a1 + 48);
      v40 = *(_QWORD *)(v39 + 8 * v41);
      *(_QWORD *)(v39 + 8 * v41) = 0;
      if (v40)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        v41 = *(_QWORD *)(a1 + 32);
      }
      if (v41 == *(unsigned int *)(a1 + 56) - 1)
        v42 = 0;
      else
        v42 = v41 + 1;
      *(_QWORD *)(a1 + 32) = v42;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v38 + 16))(v38, *a2);
      result = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkRTCProvider::CreateUDPSocket>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 507;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode((IPC::Encoder *)v4, (__int16 *)a2[1]);
  LOWORD(v5) = *((_WORD *)a2 + 8);
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 2uLL, 2) = v5;
  LOWORD(v5) = *((_WORD *)a2 + 9);
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 2uLL, 2) = v5;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, a2[3]);
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 33);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[5]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkRTCProvider::CreateClientTCPSocket>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 505;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode((IPC::Encoder *)v4, (__int16 *)a2[1]);
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode((IPC::Encoder *)v4, (__int16 *)a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[3]);
  LODWORD(v5) = *(_DWORD *)a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = v5;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, a2[5]);
  LOBYTE(v5) = *((_BYTE *)a2 + 48);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 49);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[7]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocketFactory::forSocketInGroup(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v13;

  if (!result)
  {
    v7 = 0;
    v5 = 0;
LABEL_10:
    v6 = (_QWORD *)(result + 16 * v5);
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(result - 4);
  v6 = (_QWORD *)(result + 16 * v5);
  if (!*(_DWORD *)(result - 12))
  {
    v7 = (_QWORD *)(result + 16 * v5);
    goto LABEL_10;
  }
  v7 = (_QWORD *)result;
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = (_QWORD *)result;
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (result)
    v9 = (_QWORD *)(result + 16 * *(unsigned int *)(result - 4));
  else
    v9 = 0;
  while (v7 != v9)
  {
    v10 = *(_QWORD **)(v7[1] + 8);
    if (v10[75] == a2[1] && v10[74] == *a2 && v10[76] == a2[2])
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
    v13 = v7 + 2;
    v7 = v6;
    if (v13 != v6)
    {
      v7 = v13;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  return result;
}

WebKit::RTCDataChannelRemoteManager *WebKit::RTCDataChannelRemoteManager::RTCDataChannelRemoteManager(WebKit::RTCDataChannelRemoteManager *this)
{
  WebKit::WebProcess *v2;
  unsigned __int8 **v3;
  WebKit::WebProcess *v5;

  *(_QWORD *)this = &off_1E34B4690;
  *((_QWORD *)this + 1) = 0;
  WTF::WorkQueue::create();
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(unsigned __int8 ***)(WebKit::WebProcess::ensureNetworkProcessConnection(v2) + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  *((_QWORD *)this + 3) = v3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

BOOL WebKit::RTCDataChannelRemoteManager::connectToRemoteSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *v7;
  unsigned int *v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int *v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a4;
  v17 = a5;
  if (WebCore::Process::identifier((WebCore::Process *)a1) != a2)
    return 0;
  WebCore::RTCDataChannel::handlerFromIdentifier();
  v6 = v15;
  if (!v15)
    return 0;
  v15 = 0;
  v12 = v6;
  v7 = WebKit::RTCDataChannelRemoteManager::remoteSourceConnection((WebKit::RTCDataChannelRemoteManager *)a1);
  WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::RTCDataChannelRemoteSource,WebCore::RTCDataChannelIdentifier &,WTF::UniqueRef<WebCore::RTCDataChannelHandler>,WebCore::RTCDataChannelRemoteSourceConnection &>((uint64_t)v7, &v13);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::add<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>(a1 + 6, &v17, (uint64_t *)&v13, (uint64_t)v14);
  v8 = v13;
  v13 = 0;
  if (v8)
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v9 = v14[16] != 0;
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v9;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::add<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *WebKit::RTCDataChannelRemoteManager::remoteSourceConnection(WebKit::RTCDataChannelRemoteManager *this)
{
  WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *result;
  WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *v3;
  uint64_t v4;

  result = (WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *)*((_QWORD *)this + 5);
  if (!result)
  {
    v3 = (WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *)WTF::fastMalloc((WTF *)0x18);
    result = WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::RemoteSourceConnection(v3);
    v4 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = result;
    if (v4)
    {
      WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      return (WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *)*((_QWORD *)this + 5);
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::postTaskToHandler(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  result = WebCore::Process::identifier((WebCore::Process *)a1);
  if (result == a2)
  {
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 7, &v15);
    v8 = a1[7];
    if (v8)
      v8 += (unint64_t)*(unsigned int *)(v8 - 4) << 6;
    if (v8 != result)
    {
      v9 = *(_OWORD *)(result + 48);
      v16 = *(_OWORD *)(result + 32);
      v17 = v9;
      v10 = *(unsigned int **)(result + 16);
      if (v10)
      {
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      v12 = *a4;
      *a4 = 0;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = &off_1E34EC090;
      v13[1] = v10;
      v13[2] = v12;
      v14 = v13;
      WebCore::ScriptExecutionContext::postTaskTo();
      result = (uint64_t)v14;
      if (v14)
        return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::sourceFromIdentifier(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a3;
  if (WebCore::Process::identifier((WebCore::Process *)a1) == a2)
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 6, &v5);
  else
    return 0;
}

WTF *WebKit::RTCDataChannelRemoteManager::sendData(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  WTF *result;
  WTF *v10;
  void *v11;
  WTF *v12;

  result = (WTF *)WebKit::RTCDataChannelRemoteManager::sourceFromIdentifier(a1, a2, a3);
  if (result)
  {
    v10 = result;
    if (a4)
    {
      return (WTF *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)result + 4) + 32))(*((_QWORD **)result + 4), a5, a6);
    }
    else
    {
      WTF::CString::CString();
      (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v10 + 4) + 24))(*((_QWORD *)v10 + 4), &v12);
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return (WTF *)WTF::fastFree(result, v11);
        else
          --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::changeReadyState(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E34EC0B8;
  *(_BYTE *)(v8 + 8) = a4;
  v10 = v8;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(a1, a2, a3, &v10);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

WTF::StringImpl *WebKit::RTCDataChannelRemoteManager::receiveData(WTF::StringImpl *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, WTF *this)
{
  WTF *v6;
  char v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v6 = this;
  v8 = a4;
  v11 = (uint64_t *)result;
  v20 = 0;
  if (a4)
  {
    if (this)
    {
      if ((unint64_t)this >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v12 = WTF::fastMalloc(this);
      v13 = v12;
      v14 = 0;
      do
      {
        *((_BYTE *)v14 + v12) = *((_BYTE *)v14 + a5);
        v14 = (WTF *)((char *)v14 + 1);
      }
      while (v6 != v14);
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    WTF::String::fromUTF8();
    v13 = 0;
    LODWORD(v6) = 0;
  }
  WTF::String::isolatedCopy();
  LODWORD(v18) = (_DWORD)v6;
  HIDWORD(v18) = (_DWORD)v6;
  v15 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v15 = &off_1E34EC0E0;
  *(_BYTE *)(v15 + 8) = v8;
  *(_QWORD *)(v15 + 16) = v17;
  *(_QWORD *)(v15 + 24) = v13;
  v19 = v15;
  *(_QWORD *)(v15 + 32) = v18;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(v11, a2, a3, &v19);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::detectError(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v9 = *a5;
  *a5 = 0;
  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v10 = &off_1E34EC108;
  *(_BYTE *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 16) = v9;
  v12 = v10;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(a1, a2, a3, &v12);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::bufferedAmountIsDecreasing(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34EC130;
  v8[1] = a4;
  v10 = v8;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(a1, a2, a3, (uint64_t *)&v10);
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::RemoteHandlerConnection(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  WebKit::WebProcess *v8;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34EBB38;
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(unsigned __int8 ***)(WebKit::WebProcess::ensureNetworkProcessConnection(v4) + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v6;
  return a1;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  os_unfair_lock_s *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  IPC::Encoder *result;
  WTF *v30;
  void *v31;
  IPC::Encoder *v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
    goto LABEL_16;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = a2;
  v17 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v14;
  if (!v17)
    goto LABEL_16;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
LABEL_16:
    do
      v20 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v20 + 1, (unsigned int *)v14));
  }
  v34 = *a3;
  *(_QWORD *)&v35 = *((_QWORD *)a3 + 2);
  v21 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v21 = &off_1E34EC158;
  *(_QWORD *)(v21 + 16) = v14;
  *(_OWORD *)(v21 + 32) = v34;
  *(_OWORD *)(v21 + 48) = v35;
  *(_QWORD *)(v21 + 64) = a4;
  *(_QWORD *)(v21 + 72) = a5;
  v32 = (IPC::Encoder *)v21;
  (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v13 + 32))(v13, &v32);
  v22 = v32;
  v32 = 0;
  if (v22)
    (*(void (**)(IPC::Encoder *))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(os_unfair_lock_s **)(a1 + 16);
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v24 = off_1E34EC180;
  v24[1] = a4;
  v24[2] = a5;
  v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v26 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v26 = 218;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 528) = v26 + 16;
  *(_QWORD *)(v26 + 536) = v26 + 16;
  *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v26 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
  v32 = (IPC::Encoder *)v26;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v26, 8uLL, 8) = a4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v26, 8uLL, 8) = a5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v26, 8uLL, 8) = a6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v26, 8uLL, 8) = a7;
  v33 = v24;
  *(_QWORD *)&v34 = v25;
  IPC::Connection::sendMessageWithAsyncReply(v23, &v32, (uint64_t *)&v33, 0, 0);
  v28 = (uint64_t)v33;
  v33 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  result = v32;
  v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v27);
    return (IPC::Encoder *)WTF::fastFree(v30, v31);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::sendData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  IPC::Encoder *v17;

  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a5;
  v15[1] = a6;
  v6 = *(_QWORD *)(a1 + 16);
  v12 = v16;
  v13 = a4;
  v14 = v15;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 670;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v7, (uint64_t)&v12);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 667;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a3;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::RemoteSourceConnection(WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *this)
{
  WebKit::WebProcess *v2;
  unsigned __int8 **v3;
  WebKit::WebProcess *v5;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E34EBB70;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(unsigned __int8 ***)(WebKit::WebProcess::ensureNetworkProcessConnection(v2) + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  *((_QWORD *)this + 2) = v3;
  return this;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didChangeReadyState(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 666;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a3;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a4;
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

WTF *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didReceiveStringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF *v5;
  char *v6;
  void *v7;
  WTF *result;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  WTF *v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  WTF::String::utf8();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v13;
  if (v13)
  {
    v6 = (char *)v13 + 16;
    v5 = (WTF *)*((_QWORD *)v13 + 1);
  }
  else
  {
    v6 = 0;
  }
  v9[0] = v6;
  v9[1] = v5;
  v10 = v14;
  v11 = 0;
  v12 = v9;
  IPC::Connection::send<Messages::RTCDataChannelRemoteManagerProxy::ReceiveData>(v4, (uint64_t)&v10);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v7);
    else
      --*(_DWORD *)result;
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RTCDataChannelRemoteManagerProxy::ReceiveData>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 669;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didReceiveRawData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a4;
  v10[1] = a5;
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v11;
  v8 = 1;
  v9 = v10;
  return IPC::Connection::send<Messages::RTCDataChannelRemoteManagerProxy::ReceiveData>(v5, (uint64_t)&v7);
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didDetectError(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v14[0] = a2;
  v14[1] = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v11 = v14;
  v12 = a4;
  v13 = a5;
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 668;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v15 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v6, (uint64_t)&v11);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::bufferedAmountIsDecreasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 665;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a4;
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t WebKit::WebMDNSRegister::finishedRegisteringMDNSName(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl *a4, unsigned __int16 a5, uint64_t *a6)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[24];

  if ((a5 & 0xFF00) != 0)
    goto LABEL_6;
  v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 8), a2);
  v12 = *(uint64_t **)(a1 + 8);
  if (v12)
    v12 += 6 * *((unsigned int *)v12 - 1);
  if (v12 != v11)
  {
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v11 + 4, a3, a4, (uint64_t)v17);
LABEL_6:
    v13 = a5;
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v14 + 16))(v14, a4, v13);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v16 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v16 + 16))(v16, a4, 258);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

uint64_t WebKit::LibWebRTCNetworkManager::setICECandidateFiltering(uint64_t this, char a2)
{
  *(_BYTE *)(this + 352) = a2;
  return this;
}

void WebKit::RTCSocketFactory::~RTCSocketFactory(WebKit::RTCSocketFactory *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::RTCSocketFactory::CreateServerTcpSocket()
{
  return 0;
}

uint64_t WebKit::LibWebRTCResolver::GetError(WebKit::LibWebRTCResolver *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCResolver::GetError(WebKit::LibWebRTCResolver *this)
{
  return *((unsigned int *)this + 30);
}

size_t WebKit::LibWebRTCSocket::Send(WebKit::LibWebRTCSocket *this, const void *a2, size_t a3, const rtc::PacketOptions *a4)
{
  return WebKit::LibWebRTCSocket::SendTo(this, a2, a3, (WebKit::LibWebRTCSocket *)((char *)this + 448), a4);
}

uint64_t WebKit::LibWebRTCSocket::GetState(WebKit::LibWebRTCSocket *this)
{
  return *((unsigned int *)this + 131);
}

uint64_t WebKit::LibWebRTCSocket::GetError(WebKit::LibWebRTCSocket *this)
{
  return *((unsigned int *)this + 130);
}

uint64_t WebKit::LibWebRTCSocket::SetError(uint64_t this, int a2)
{
  *(_DWORD *)(this + 520) = a2;
  return this;
}

void WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::~RemoteHandlerConnection(WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E34EBB38;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 2);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E34EBB38;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 2);
  WTF::fastFree(this, v3);
}

void WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::~RemoteSourceConnection(unsigned __int8 ***this)
{
  *this = (unsigned __int8 **)off_1E34EBB70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);
}

{
  void *v2;

  *this = (unsigned __int8 **)off_1E34EBB70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

uint64_t std::unique_ptr<rtc::Network>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x19AEAC0D0]();
    JUMPOUT(0x19AEB936CLL);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*((_QWORD *)a1 + 1));
    std::unique_ptr<rtc::Network>::reset[abi:sn180100]((uint64_t *)a1 + 7, 0);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t sigslot::_signal_base<sigslot::single_threaded>::disconnect_all(uint64_t result)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)result;
  for (i = *(_QWORD *)(result + 32); i; i = v1[4])
  {
    v3 = (uint64_t *)v1[3];
    v4 = v3[3];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    v1[4] = i - 1;
    operator delete(v3);
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(v4 + 16))(v4, v1);
  }
  v1[5] = v1 + 2;
  return result;
}

_QWORD *std::__list_imp<sigslot::_opaque_connection>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = a1 + 2;
  v3 = (uint64_t *)a1[3];
  if (v3 != a1 + 2)
  {
    do
    {
      v6 = v3;
      v3 = (uint64_t *)v3[1];
      if (v6[3] == a2)
      {
        if (v6 == v2)
        {
          __break(1u);
          return;
        }
        v7 = *v6;
        *(_QWORD *)(v7 + 8) = v3;
        *(_QWORD *)v6[1] = v7;
        v8 = (uint64_t *)a1[5];
        --a1[4];
        operator delete(v6);
        if (v8 == v6)
          a1[5] = v3;
      }
    }
    while (v3 != v2);
  }
}

_QWORD *sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate(_QWORD *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = (char *)(result + 2);
  v4 = result[3];
  if ((_QWORD *)v4 != result + 2)
  {
    v7 = result;
    do
    {
      if (*(_QWORD *)(v4 + 24) == a2)
      {
        v8 = *(_QWORD *)(v4 + 16);
        v10 = *(_OWORD *)(v4 + 32);
        result = operator new(0x30uLL);
        result[2] = v8;
        result[3] = a3;
        *((_OWORD *)result + 2) = v10;
        v9 = v7[2];
        *result = v9;
        result[1] = v3;
        *(_QWORD *)(v9 + 8) = result;
        v7[2] = result;
        ++v7[4];
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(webrtc::UntypedFunction &)>::CallVoidPtr<void webrtc::CallbackList<rtc::AsyncPacketSocket *,int>::Send<rtc::AsyncPacketSocket *,int &>(rtc::AsyncPacketSocket *,int &)::{lambda(webrtc::UntypedFunction &)#1}>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 32))(a2, **(_QWORD **)a1, **(unsigned int **)(a1 + 8));
}

WebKit::LibWebRTCResolver *WebKit::LibWebRTCResolver::LibWebRTCResolver(WebKit::LibWebRTCResolver *this)
{
  uint64_t IdentifierInternal;

  *(_QWORD *)this = off_1E34EB7D0;
  *((_QWORD *)this + 1) = off_1E34EBC78;
  *((_QWORD *)this + 2) = 0;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = off_1E34EBBB8;
  *((_QWORD *)this + 1) = &unk_1E34EBC08;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = IdentifierInternal;
  rtc::SocketAddress::SocketAddress((WebKit::LibWebRTCResolver *)((char *)this + 48));
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_WORD *)this + 66) = 0;
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 8) + 24;
  v13 = 0;
  result = (uint64_t)WebKit::LibWebRTCSocketFactory::setConnection(v1, &v13);
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    v4 = *v3;
    if (__ldaxr(*v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEABB3C](v4);
LABEL_6:
    v6 = *((_QWORD *)v4 + 1);
    v7 = v6 - 1;
    *((_QWORD *)v4 + 1) = v6 - 1;
    if (v6 == 1)
    {
      v12 = *((_QWORD *)v4 + 2);
      v9 = *((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      v8 = v12 == 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v10 = __ldxr(v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, v4))
      {
        if (v7)
          return result;
LABEL_14:
        v11 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v11 = off_1E34ACA48;
        *(_QWORD *)(v11 + 8) = v4;
        *(_QWORD *)(v11 + 16) = v9;
        *(_BYTE *)(v11 + 24) = v8;
        v14 = v11;
        WTF::ensureOnMainRunLoop();
        result = v14;
        v14 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      return result;
    goto LABEL_14;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CreateRTCProvider,WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1>(WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *a1 = &off_1E34EBCD0;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 - 1;
  *((_QWORD *)v3 + 1) = v5 - 1;
  if (v5 == 1)
  {
    v12 = *((_QWORD *)v3 + 2);
    v8 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    v7 = v12 == 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v6)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
    return a1;
LABEL_14:
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = off_1E34ACA48;
  *(_QWORD *)(v10 + 8) = v3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 24) = v7;
  v13 = v10;
  WTF::ensureOnMainRunLoop();
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CreateRTCProvider,WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1>(WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34EBCD0;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *((_QWORD *)v4 + 2);
    v9 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v8 = v13 == 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v11 = off_1E34ACA48;
  *(_QWORD *)(v11 + 8) = v4;
  *(_QWORD *)(v11 + 16) = v9;
  *(_BYTE *)(v11 + 24) = v8;
  v14 = v11;
  WTF::ensureOnMainRunLoop();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CreateRTCProvider,WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1>(WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(result + 8);
  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 16) + 33));
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v4 = &off_1E34EBCF8;
    v4[1] = v1;
    v4[2] = v3;
    v5 = v4;
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *a1 = &off_1E34EBCF8;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 - 1;
  *((_QWORD *)v3 + 1) = v5 - 1;
  if (v5 == 1)
  {
    v12 = *((_QWORD *)v3 + 2);
    v8 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    v7 = v12 == 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v6)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
    return a1;
LABEL_14:
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = off_1E34ACA48;
  *(_QWORD *)(v10 + 8) = v3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 24) = v7;
  v13 = v10;
  WTF::ensureOnMainRunLoop();
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34EBCF8;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *((_QWORD *)v4 + 2);
    v9 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v8 = v13 == 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v11 = off_1E34ACA48;
  *(_QWORD *)(v11 + 8) = v4;
  *(_QWORD *)(v11 + 16) = v9;
  *(_BYTE *)(v11 + 24) = v8;
  v14 = v11;
  WTF::ensureOnMainRunLoop();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return WTF::fastFree(this, a2);
}

WebCore::DeprecatedGlobalSettings *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::LibWebRTCSocketFactory::setConnection(*(_QWORD *)(a1 + 8) + 24, (unsigned __int8 ***)(a1 + 16));
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v20;
  int v22;
  __int16 v23;
  char v24;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v22 = -1640531527;
    v23 = 0;
    v24 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v22, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = v5 & v4;
    v10 = (uint64_t *)(v2 + 48 * (v5 & v4));
    v11 = *v10;
    v12 = v10[1];
    v13 = v12 == v7 && v11 == v6;
    v14 = v10[2];
    if (v13 && v14 == v8)
    {
LABEL_20:
      v20 = *(_QWORD *)(v2 + 48 * v9 + 32);
      if (v20)
        return *(_QWORD *)(v20 + 8);
    }
    else
    {
      v16 = 1;
      while (v11 | v12 || v14)
      {
        v9 = (v9 + v16) & v4;
        v17 = (uint64_t *)(v2 + 48 * v9);
        v11 = *v17;
        v12 = v17[1];
        v18 = v12 == v7 && v11 == v6;
        v14 = v17[2];
        ++v16;
        if (v18 && v14 == v8)
          goto LABEL_20;
      }
    }
  }
  return 0;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34EBD20;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::signalUsedInterface(WebCore::ProcessQualified<WTF::UUID>,WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34EBD48;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::signalUsedInterface(WebCore::ProcessQualified<WTF::UUID>,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34EBD48;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::signalUsedInterface(WebCore::ProcessQualified<WTF::UUID>,WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  const WTF::StringImpl *v4;
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v2;
  v3 = WebKit::LibWebRTCNetworkManager::getOrCreate((WebCore::Document *)v5);
  if (v3)
    WebKit::LibWebRTCNetworkManager::signalUsedInterface(v3, (WTF::StringImpl **)(a1 + 48), v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34EBD70;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34EBD70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  WebKit::WebRTCMonitor *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  WebKit::WebProcess *v9;
  _QWORD *v10;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((_QWORD *)result + 1);
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v3 = WebKit::WebProcess::WebProcess(v9);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
    }
    WebKit::WebProcess::libWebRTCNetwork(v3);
    v5 = (WebKit::WebRTCMonitor *)(v4 + 88);
    if (*(_BYTE *)(v2 + 353))
    {
      v6 = (unsigned int *)(v2 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = &off_1E34EBD98;
      v8[1] = v2;
      v8[2] = v2;
      v10 = v8;
      WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
    else if (*(_BYTE *)(v4 + 112))
    {
      *(_BYTE *)(v2 + 353) = 1;
      WebKit::LibWebRTCNetworkManager::networksChanged(v2, (int *)(v4 + 120), (WebKit::RTC::Network::IPAddress *)(v4 + 136), (WebKit::RTC::Network::IPAddress *)(v4 + 156), 1);
    }
    return WebKit::WebRTCMonitor::startUpdating(v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34EBD98;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34EBD98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void (*v3)(void);

  v1 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 72) = result;
  while (result != v1 + 48)
  {
    v3 = *(void (**)(void))(result + 16);
    *(_QWORD *)(v1 + 72) = *(_QWORD *)(result + 8);
    v3();
    result = *(_QWORD *)(v1 + 72);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StopUpdating(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34EBDC0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StopUpdating(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EBDC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StopUpdating(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebKit::WebProcess *v2;
  uint64_t v3;
  WebKit::WebProcess *v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    {
      v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v2 = WebKit::WebProcess::WebProcess(v4);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
    }
    WebKit::WebProcess::libWebRTCNetwork(v2);
    WebKit::WebRTCMonitor::stopUpdating((WebKit::WebRTCMonitor *)(v3 + 88));
  }
}

unsigned int *WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct((WTF *)(*(_QWORD *)result + 96 * this), (WTF *)(*(_QWORD *)result + 96 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x2AAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1975E9D24);
      }
      v6 = (WTF *)(96 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFE0) / 0x60;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebKit::RTCNetwork>::move(v5, (WTF *)((char *)v5 + 96 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebKit::RTCNetwork>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v6;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      v8 = *((_OWORD *)v5 + 2);
      v9 = *((_OWORD *)v5 + 3);
      *(_OWORD *)(a3 + 60) = *(_OWORD *)((char *)v5 + 60);
      *(_OWORD *)(a3 + 32) = v8;
      *(_OWORD *)(a3 + 48) = v9;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      v10 = *((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      *(_QWORD *)(a3 + 80) = v10;
      LODWORD(v10) = *((_DWORD *)v5 + 22);
      *((_DWORD *)v5 + 22) = 0;
      *(_DWORD *)(a3 + 88) = v10;
      LODWORD(v10) = *((_DWORD *)v5 + 23);
      *((_DWORD *)v5 + 23) = 0;
      *(_DWORD *)(a3 + 92) = v10;
      v11 = (WTF *)*((_QWORD *)v5 + 10);
      if (v11)
      {
        *((_QWORD *)v5 + 10) = 0;
        *((_DWORD *)v5 + 22) = 0;
        WTF::fastFree(v11, a2);
      }
      v12 = (WTF *)*((_QWORD *)v5 + 2);
      if (v12)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v12, a2);
      }
      result = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v5 = (WTF *)((char *)v5 + 96);
      a3 += 96;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x2AAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (WTF *)(*(_QWORD *)result + 96 * *(unsigned int *)(result + 12));
    v5 = 96 * a2;
    v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    WTF::VectorMover<false,WebKit::RTCNetwork>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;

  if (a2 != (const void **)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
            *(_DWORD *)(a1 + 12) = 0;
          v7 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v7, a2);
          }
        }
        WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, (WTF *)*((unsigned int *)a2 + 3));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *a2, v4);
      v8 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v8 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + v8), (char *)*a2 + v8, (_BYTE *)*a2 + *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + v8));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34EBDE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EBDE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  char v12;

  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(*(WTF::StringImpl **)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v11);
  if (!v12)
    return IPC::Connection::cancelReply<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(*(WTF::StringImpl **)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_11;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_11;
  v7 = v6 - 296;
  v8 = (unsigned int *)(v6 - 288);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (v11)
    WebKit::LibWebRTCNetworkManager::signalUsedInterface(v7, &v11, v4);
  result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(v8);
  if (v12)
  {
LABEL_11:
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WTF::StringImpl *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v5 = 0;
  if (result)
  {
    v1 = *((_QWORD *)result + 1);
    if (v1)
    {
      v2 = (unsigned int *)(v1 - 288);
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
      WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(v2);
      result = v5;
      v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34EBE10;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_2,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34EBE10;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 8));
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_2,void>::call(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12[4];
  char v13;
  uint64_t v14[37];
  void **v15;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = operator new(8 * v3);
    v5 = (uint64_t)v4 + 8 * v3;
    bzero(v4, 8 * v3);
    v6 = 0;
    v7 = 0;
    v8 = (uint64_t *)v4;
    while (1)
    {
      WebKit::RTCNetwork::value((WebKit::RTCNetwork *)(*(_QWORD *)(a1 + 24) + v6), (uint64_t)v14);
      v9 = operator new();
      rtc::Network::Network();
      if (v7 >= v3)
        break;
      std::unique_ptr<rtc::Network>::reset[abi:sn180100](v8, v9);
      MEMORY[0x19AEAC0D0](v14);
      ++v7;
      ++v8;
      v6 += 96;
      if (v7 >= *(unsigned int *)(a1 + 36))
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v5 = 0;
    v4 = 0;
LABEL_7:
    v13 = 0;
    WebKit::RTC::Network::IPAddress::rtcAddress(v14, (WebKit::RTC::Network::IPAddress *)(a1 + 40));
    WebKit::RTC::Network::IPAddress::rtcAddress(v12, (WebKit::RTC::Network::IPAddress *)(a1 + 60));
    rtc::NetworkManagerBase::set_default_local_addresses((rtc::NetworkManagerBase *)(v2 + 2), (const rtc::IPAddress *)v14, (const rtc::IPAddress *)v12);
    v12[0] = (uint64_t)v4;
    v12[1] = v5;
    v12[2] = v5;
    memset(v14, 0, 24);
    rtc::NetworkManagerBase::MergeNetworkList();
    v15 = (void **)v12;
    std::vector<std::unique_ptr<rtc::Network>>::__destroy_vector::operator()[abi:sn180100](&v15);
    if (v13 || *(_BYTE *)(a1 + 80))
    {
      v10 = v2[7];
      v2[9] = v10;
      while ((_QWORD *)v10 != v2 + 6)
      {
        v11 = *(void (**)(void))(v10 + 16);
        v2[9] = *(_QWORD *)(v10 + 8);
        v11();
        v10 = v2[9];
      }
    }
    v15 = (void **)v14;
    std::vector<std::unique_ptr<rtc::Network>>::__destroy_vector::operator()[abi:sn180100](&v15);
  }
}

void std::vector<std::unique_ptr<rtc::Network>>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<rtc::Network>::reset[abi:sn180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networkProcessCrashed(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34EBE38;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networkProcessCrashed(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34EBE38;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networkProcessCrashed(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void (*v3)(void);

  v1 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 72) = result;
  while (result != v1 + 48)
  {
    v3 = *(void (**)(void))(result + 16);
    *(_QWORD *)(v1 + 72) = *(_QWORD *)(result + 8);
    v3();
    result = *(_QWORD *)(v1 + 72);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::CreateNameForAddress(rtc::IPAddress const&,std::function<void ()(rtc::IPAddress const&,std::string_view)>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34EBE60;
  v3 = a1 + 6;
  v4 = (_QWORD *)a1[9];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::CreateNameForAddress(rtc::IPAddress const&,std::function<void ()(rtc::IPAddress const&,std::string_view)>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34EBE60;
  v3 = (char *)this + 48;
  v4 = (char *)*((_QWORD *)this + 9);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::CreateNameForAddress(rtc::IPAddress const&,std::function<void ()(rtc::IPAddress const&,std::string_view)>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  WebKit::WebProcess *v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WebKit::WebProcess *v63;
  WebKit::WebProcess *v64;
  void *__p;
  char v66;
  WTF::StringImpl *v67;
  uint64_t v68[3];
  int v69;
  __int128 v70;
  _QWORD v71[3];
  _QWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return;
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v63 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v63);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  WebKit::WebProcess::libWebRTCNetwork(v3);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 296;
    else
      v6 = 0;
  }
  v8 = *(_OWORD *)(v6 + 336);
  v73 = *(_OWORD *)(v6 + 320);
  v74 = v8;
  rtc::IPAddress::ToString((rtc::IPAddress *)(a1 + 16));
  WTF::String::fromUTF8();
  v68[2] = (uint64_t)&off_1E34B67B0;
  v69 = *(_DWORD *)(a1 + 24);
  v70 = *(_OWORD *)(a1 + 28);
  v9 = v71;
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    if (v10 == a1 + 48)
    {
      v72 = v71;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v71);
    }
    else
    {
      v72 = *(_QWORD **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  else
  {
    v72 = 0;
  }
  v11 = WTF::fastMalloc((WTF *)0x48);
  v12 = v11;
  *(_QWORD *)v11 = &off_1E34EBE88;
  *(_QWORD *)(v11 + 8) = &off_1E34B67B0;
  *(_DWORD *)(v11 + 16) = v69;
  *(_OWORD *)(v11 + 20) = v70;
  if (v72)
  {
    if (v72 == v71)
    {
      *(_QWORD *)(v11 + 64) = v11 + 40;
      (*(void (**)(_QWORD *))(v71[0] + 24))(v71);
    }
    else
    {
      *(_QWORD *)(v11 + 64) = v72;
      v72 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v11 + 64) = 0;
  }
  v13 = (uint64_t *)(v5 + 184);
  v14 = *(_QWORD *)(v5 + 184);
  if (v14
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(v5 + 184), 0), (v14 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  LODWORD(v77) = -1640531527;
  WORD2(v77) = 0;
  BYTE6(v77) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v77, &v73);
  v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v77) & v15;
  v19 = (uint64_t *)(v14 + 48 * v18);
  v21 = *v19;
  v20 = v19[1];
  v22 = v19[2];
  if (*(_OWORD *)v19 != 0 || v22)
  {
    v16 = 0;
    v25 = 1;
    while (1)
    {
      v26 = v20 == *((_QWORD *)&v73 + 1) && v21 == (_QWORD)v73;
      if (v26 && v22 == (_QWORD)v74)
        break;
      if (v22 == -1)
        v16 = (WTF::StringImpl *)v19;
      v18 = (v18 + v25) & v15;
      v19 = (uint64_t *)(v14 + 48 * v18);
      v21 = *v19;
      v20 = v19[1];
      v22 = v19[2];
      ++v25;
      if (*(_OWORD *)v19 == 0 && v22 == 0)
      {
        if (!v16)
          goto LABEL_24;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        *((_QWORD *)v16 + 4) = 0;
        --*(_DWORD *)(*v13 - 16);
        v29 = v73;
        *((_QWORD *)v16 + 2) = v74;
        *(_OWORD *)v16 = v29;
        *((_QWORD *)v16 + 4) = 0;
        goto LABEL_44;
      }
    }
  }
  else
  {
LABEL_24:
    v23 = (WTF::StringImpl **)v19[4];
    v24 = v74;
    *(_OWORD *)v19 = v73;
    v19[2] = v24;
    v19[4] = 0;
    if (v23)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v16);
    v16 = (WTF::StringImpl *)v19;
LABEL_44:
    v30 = *v13;
    if (*v13)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v32 = *v13;
    if (*v13)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34)
        goto LABEL_52;
    }
    else if (3 * v35 > 4 * v34)
    {
LABEL_52:
      v19 = (uint64_t *)v16;
      goto LABEL_56;
    }
    v19 = (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(v5 + 184), (uint64_t)v16);
  }
LABEL_56:
  v36 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v19 + 4, &v67, v17);
  v37 = v19[4];
  if (v37)
    v37 += 16 * *(unsigned int *)(v37 - 4);
  if (v37 == v36)
  {
    v39 = (uint64_t *)(v5 + 176);
    {
      v40 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v64 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v40 = WebKit::WebProcess::WebProcess(v64);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v40;
    }
    v41 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v40) + 24);
    v42 = *v39;
    if (*v39)
      goto LABEL_101;
    v42 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = v39;
    v44 = (unsigned int *)*v39;
    *v39 = v42;
    if (!v44)
      goto LABEL_101;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v43);
    }
    v42 = *v39;
    if (*v39)
    {
LABEL_101:
      do
        v47 = __ldaxr((unsigned int *)v42);
      while (__stlxr(v47 + 1, (unsigned int *)v42));
    }
    v75 = v73;
    *(_QWORD *)&v76 = v74;
    v48 = v67;
    if (v67)
    {
      v49 = *(_DWORD *)v67;
      v77 = v75;
      v78 = v76;
      *(_DWORD *)v67 = v49 + 4;
    }
    else
    {
      v77 = v75;
      v78 = v76;
    }
    v50 = WTF::fastMalloc((WTF *)0x50);
    v52 = v50;
    *(_QWORD *)v50 = &off_1E34EC1D0;
    *(_QWORD *)(v50 + 16) = v42;
    *(_QWORD *)(v50 + 24) = v12;
    v53 = v78;
    *(_OWORD *)(v50 + 32) = v77;
    *(_OWORD *)(v50 + 48) = v53;
    if (v48)
    {
      v54 = *(_DWORD *)v48;
      *(_DWORD *)v48 += 2;
      *(_QWORD *)(v50 + 64) = v48;
      if (v54)
        *(_DWORD *)v48 = v54;
      else
        WTF::StringImpl::destroy(v48, v51);
    }
    else
    {
      *(_QWORD *)(v50 + 64) = 0;
    }
    v55 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v56 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v56 = 285;
    *(_QWORD *)(v56 + 8) = 0;
    *(_QWORD *)(v56 + 528) = v56 + 16;
    *(_QWORD *)(v56 + 536) = v56 + 16;
    *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v56 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
    *(_QWORD *)&v77 = v56;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v56, (uint64_t *)&v73);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v56, (uint64_t *)&v67);
    v68[0] = v52;
    v68[1] = v55;
    IPC::Connection::sendMessageWithAsyncReply(v41, (IPC::Encoder **)&v77, v68, 0, 0);
    v57 = v68[0];
    v68[0] = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v58 = (IPC::Encoder *)v77;
    *(_QWORD *)&v77 = 0;
    if (v58)
    {
      IPC::Encoder::~Encoder(v58, v38);
      WTF::fastFree(v59, v60);
    }
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v38);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, v36 + 8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v72 == v71)
  {
    v61 = 4;
    goto LABEL_87;
  }
  if (v72)
  {
    v61 = 5;
    v9 = v72;
LABEL_87:
    (*(void (**)(_QWORD *))(*v9 + 8 * v61))(v9);
  }
  v62 = v67;
  v67 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v38);
    else
      *(_DWORD *)v62 -= 2;
  }
  if (v66 < 0)
    operator delete(__p);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvEUlT_T0_E_vJRKNS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E34EBE88;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvEUlT_T0_E_vJRKNS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEED0Ev(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34EBE88;
  v3 = (char *)this + 40;
  v4 = (char *)*((_QWORD *)this + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvEUlT_T0_E_vJRKNS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEE4callESM_SQ_(uint64_t a1, WTF::StringImpl **a2, __int16 a3)
{
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  int v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  WTF::StringImpl *v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v14 = v4;
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *(_OWORD *)(a1 + 20);
  v5 = v17;
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    if (v6 == a1 + 40)
    {
      v18 = v17;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v17);
    }
    else
    {
      v18 = *(_QWORD **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  WTF::String::isolatedCopy();
  v20 = a3;
  v7 = WTF::fastMalloc((WTF *)0x58);
  v8 = v7;
  *(_QWORD *)v7 = &off_1E34EBEB0;
  *(_QWORD *)(v7 + 8) = &off_1E34B67B0;
  *(_DWORD *)(v7 + 16) = v15;
  *(_OWORD *)(v7 + 20) = v16;
  if (v18)
  {
    if (v18 == v17)
    {
      *(_QWORD *)(v7 + 64) = v7 + 40;
      (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      *(_QWORD *)(v7 + 64) = v18;
      v18 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 64) = 0;
  }
  v9 = v19;
  v19 = 0;
  *(_QWORD *)(v8 + 72) = v9;
  *(_WORD *)(v8 + 80) = v20;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v11 = v19;
  v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v18 == v17)
  {
    v12 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_24;
    v12 = 5;
    v5 = v18;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v12))(v5);
LABEL_24:
  result = (uint64_t)v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      return WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvENUlT_T0_E_clINS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEEDaSH_SI_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E34EBEB0;
  v3 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_QWORD *)a1[8];
  if (v4 == a1 + 5)
  {
    v5 = 4;
    v4 = a1 + 5;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvENUlT_T0_E_clINS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEEDaSH_SI_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34EBEB0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4 == (WTF *)((char *)this + 40))
  {
    v5 = 4;
    v4 = (WTF *)((char *)this + 40);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvENUlT_T0_E_clINS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEEDaSH_SI_EUlvE_vJEE4callEv(uint64_t a1)
{
  size_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  char *v8;
  uint8_t buf[8];
  size_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 81))
  {
    v6 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      v7 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "MDNS registration of a host candidate failed with error %hhu", buf, 8u);
    }
  }
  WTF::String::utf8();
  if (!v8)
  {
    __break(1u);
LABEL_12:
    std::__throw_bad_function_call[abi:sn180100]();
  }
  v2 = strlen(v8 + 16);
  *(_QWORD *)buf = v8 + 16;
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    goto LABEL_12;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, a1 + 8, buf);
  result = (uint64_t)v8;
  if (*(_DWORD *)v8 == 1)
    return WTF::fastFree((WTF *)v8, v4);
  --*(_DWORD *)v8;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCSocketFactory::suspend(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  WebKit::WebProcess *v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::libWebRTCNetwork(v2);
  v4 = v3;
  v5 = *(_OWORD *)(a1 + 32);
  v10[0] = *(_OWORD *)(a1 + 16);
  v10[1] = v5;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34EBF00;
  v9 = v6;
  WebKit::LibWebRTCSocketFactory::forSocketInGroup(*(_QWORD *)(v4 + 24), v10, &v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16RTCSocketFactory7suspendEvENK3__0clEvEUlRT_E_vJRNS2_15LibWebRTCSocketEEE4callES9_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6[2];

  *(_BYTE *)(a2 + 584) = 1;
  if (*(_DWORD *)(a2 + 524))
  {
    *(_DWORD *)(a2 + 524) = 0;
    v5 = -1;
    v4 = a2;
    v6[0] = &v4;
    v6[1] = (uint64_t *)&v5;
    webrtc::callback_list_impl::CallbackListReceivers::Foreach();
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 360) + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 352);
      v6[0] = &v4;
      IPC::Connection::send<Messages::NetworkRTCProvider::CloseSocket>(v3, v6);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCSocketFactory::resume(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  WebKit::WebProcess *v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  WebKit::WebProcess::libWebRTCNetwork(v2);
  v4 = v3;
  v5 = *(_OWORD *)(a1 + 32);
  v10[0] = *(_OWORD *)(a1 + 16);
  v10[1] = v5;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34EBF50;
  v9 = v6;
  WebKit::LibWebRTCSocketFactory::forSocketInGroup(*(_QWORD *)(v4 + 24), v10, &v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16RTCSocketFactory6resumeEvENK3__0clEvEUlRT_E_vJRNS2_15LibWebRTCSocketEEE4callES9_(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 584) = 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::sendOnMainThread(WTF::Function<void ()(IPC::Connection &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EBF78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::sendOnMainThread(WTF::Function<void ()(IPC::Connection &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EBF78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::sendOnMainThread(WTF::Function<void ()(IPC::Connection &)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  unsigned __int8 **v3;
  WebKit::WebProcess *v5;
  unsigned __int8 **v6;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = *(unsigned __int8 ***)(WebKit::WebProcess::ensureNetworkProcessConnection(v2) + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  v6 = v3;
  (*(void (**)(_QWORD, unsigned __int8 **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v6);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::~LibWebRTCResolver()::$_0,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 513;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (***v5)(void);
  void (**v6)(void);
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = *(void (****)(void))a1;
    do
    {
      v6 = *v5;
      v5 += 4;
      (*v6)();
      v4 -= 32;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::start(rtc::SocketAddress const&,WTF::Function<void ()(void)> &&)::$_0,void,IPC::Connection &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34EBFC8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::start(rtc::SocketAddress const&,WTF::Function<void ()(void)> &&)::$_0,void,IPC::Connection &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34EBFC8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::start(rtc::SocketAddress const&,WTF::Function<void ()(void)> &&)::$_0,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = (uint64_t *)(a1 + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 506;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, v4);
  IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0,void>::call()
{
  WebKit::WebProcess *v0;
  WebKit::WebProcess *v2;

  {
    v0 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v0 = WebKit::WebProcess::WebProcess(v2);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v0;
  }
  return WebKit::WebProcess::ensureNetworkProcessConnection(v0);
}

uint64_t WTF::Deque<WTF::Function<void ()(IPC::Connection &)>,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    v7 = (_QWORD *)result;
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v9)
    {
      if (*(_QWORD *)v3 != v9)
      {
        v19 = (uint64_t *)(result + 8 * v8);
        v20 = (uint64_t *)((char *)v4 + 8 * v8);
        v21 = 8 * v9 - 8 * v8;
        do
        {
          v22 = *v20;
          *v20 = 0;
          *v19 = v22;
          result = *v20;
          *v20 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v19;
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
    }
    else
    {
      if (v9)
      {
        v10 = 8 * v9;
        v11 = (uint64_t *)v4;
        do
        {
          v12 = *v11;
          *v11 = 0;
          *v7 = v12;
          result = *v11;
          *v11 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v7;
          ++v11;
          v10 -= 8;
        }
        while (v10);
        v5 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        v7 = *(_QWORD **)(v3 + 16);
      }
      v13 = v8 - v1 + v5;
      if (v8 != v1)
      {
        v14 = v5;
        v15 = (uint64_t *)((char *)v4 + 8 * v8);
        v16 = &v7[v14];
        v17 = 8 * v8 - 8 * v1;
        do
        {
          v18 = *v15;
          *v15 = 0;
          *(_QWORD *)((char *)v16 + v17) = v18;
          result = *v15;
          *v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v15;
          v17 += 8;
        }
        while (v17);
      }
      *(_QWORD *)v3 = v13;
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34EC018;
  v3 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34EC018;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  __int16 v3;
  uint64_t *v5[2];
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 64);
  v3 = *(_WORD *)(a1 + 80);
  v5[0] = (uint64_t *)(a1 + 8);
  v5[1] = (uint64_t *)(a1 + 16);
  v6 = v2;
  v7 = a1 + 72;
  v8 = v3;
  v9 = a1 + 88;
  return IPC::Connection::send<Messages::NetworkRTCProvider::CreateUDPSocket>(a2, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0,void>::call()
{
  WebKit::WebProcess *v0;
  WebKit::WebProcess *v2;

  {
    v0 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v0 = WebKit::WebProcess::WebProcess(v2);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v0;
  }
  return WebKit::WebProcess::ensureNetworkProcessConnection(v0);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;

  *(_QWORD *)a1 = &off_1E34EC068;
  v3 = *(WTF::StringImpl **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E34EC068;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  uint64_t *v4[6];
  __int16 v5;
  uint64_t v6;

  v2 = *(_WORD *)(a1 + 136);
  v4[0] = (uint64_t *)(a1 + 8);
  v4[1] = (uint64_t *)(a1 + 16);
  v4[2] = (uint64_t *)(a1 + 64);
  v4[3] = (uint64_t *)(a1 + 112);
  v4[4] = (uint64_t *)(a1 + 120);
  v4[5] = (uint64_t *)(a1 + 128);
  v5 = v2;
  v6 = a1 + 144;
  return IPC::Connection::send<Messages::NetworkRTCProvider::CreateClientTCPSocket>(a2, v4);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 16 * v23);
          v26 = (unsigned int *)v25[1];
          v25[1] = 0;
          if (v26)
          {
            do
            {
              v29 = __ldaxr(v26);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v26));
            if (!v30)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v8);
            }
          }
          *v25 = *v10;
          v27 = v4 + 16 * v9;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v25[1] = v28;
          v13 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (!v13)
            goto LABEL_19;
          do
          {
            v31 = __ldaxr(v13);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v13));
          if (v32)
            goto LABEL_19;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (!v13)
            goto LABEL_19;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (v15)
            goto LABEL_19;
        }
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v8);
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unsigned int *WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::RTCDataChannelRemoteSource,WebCore::RTCDataChannelIdentifier &,WTF::UniqueRef<WebCore::RTCDataChannelHandler>,WebCore::RTCDataChannelRemoteSourceConnection &>@<X0>(uint64_t a1@<X2>, unsigned int **a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;

  WTF::fastMalloc((WTF *)0x30);
  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  result = (unsigned int *)WebCore::RTCDataChannelRemoteSource::RTCDataChannelRemoteSource();
  *a2 = result;
  if (a1)
    return WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(a1 + 8));
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 16 * v23);
          v26 = v25[1];
          v25[1] = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          *v25 = *v12;
          v27 = v4 + 16 * v10;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v25[1] = v28;
          v29 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          if (v12 == a2)
            v11 = v25;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + (v7 << 6));
  if (v8 == *a2)
    return v2 + (v7 << 6);
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + ((unint64_t)v7 << 6));
    ++v9;
    if (v8 == *a2)
      return v2 + (v7 << 6);
  }
  return v2 + ((unint64_t)*(unsigned int *)(v2 - 4) << 6);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::RTCDataChannelIdentifier,WTF::Function<void ()(WebCore::RTCDataChannelRemoteHandler &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34EC090;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::RTCDataChannelIdentifier,WTF::Function<void ()(WebCore::RTCDataChannelRemoteHandler &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34EC090;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::RTCDataChannelIdentifier,WTF::Function<void ()(WebCore::RTCDataChannelRemoteHandler &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::changeReadyState(WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call()
{
  return WebCore::RTCDataChannelRemoteHandler::didChangeReadyState();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::receiveData(WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)a1 = &off_1E34EC0E0;
  v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::receiveData(WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34EC0E0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::receiveData(WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return WebCore::RTCDataChannelRemoteHandler::didReceiveRawData();
  else
    return WebCore::RTCDataChannelRemoteHandler::didReceiveStringData();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::detectError(WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String &&)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34EC108;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::detectError(WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String &&)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34EC108;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::detectError(WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String &&)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call()
{
  _DWORD *result;
  _DWORD *v1;

  WebCore::RTCError::create((uint64_t *)&v1);
  WebCore::RTCDataChannelRemoteHandler::didDetectError();
  result = v1;
  v1 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::RTCError::create(uint64_t *a1)
{
  uint64_t result;

  WTF::fastMalloc((WTF *)0x48);
  result = WebCore::RTCError::RTCError();
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::bufferedAmountIsDecreasing(WebCore::RTCDataChannelIdentifier,unsigned long)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call(int a1, WebCore::RTCDataChannelRemoteHandler *this)
{
  return WebCore::RTCDataChannelRemoteHandler::bufferedAmountIsDecreasing(this);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34EC158;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34EC158;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;

  result = (uint64_t)WebKit::RTCDataChannelRemoteManager::sharedManager((WebKit::RTCDataChannelRemoteManager *)a1);
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(result + 56);
  v5 = *(_QWORD *)(result + 56);
  v27 = *(_OWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 48);
  if (v5
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(result + 56)),
        (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)(a1 + 72);
  v9 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v7 & ((v11 >> 31) ^ v11);
  v13 = v5 + (v12 << 6);
  v14 = *(_QWORD *)v13;
  if (!*(_QWORD *)v13)
  {
LABEL_12:
    *(_QWORD *)v13 = v8;
    result = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v13 + 16) = v4;
    if (result)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)result);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)result));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v3);
      }
    }
    *(_OWORD *)(v13 + 32) = v27;
    *(_QWORD *)(v13 + 48) = v28;
    v19 = *v6;
    if (*v6)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *v6;
    if (*v6)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        return result;
    }
    else if (3 * v26 > 4 * v25)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6);
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v8)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = ((_DWORD)v12 + v16) & v7;
    v13 = v5 + (v12 << 6);
    v14 = *(_QWORD *)v13;
    ++v16;
    if (!*(_QWORD *)v13)
    {
      if (v15)
      {
        *(_QWORD *)v15 = 0;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        --*(_DWORD *)(*v6 - 16);
        v8 = *(_QWORD *)(a1 + 72);
        v13 = v15;
      }
      goto LABEL_12;
    }
  }
  if (v4)
  {
    do
    {
      v21 = __ldaxr(v4);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v4));
    if (!v22)
    {
      atomic_store(1u, v4);
      return WTF::fastFree((WTF *)v4, v3);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = v5;
  result = WTF::fastMalloc((WTF *)(((unint64_t)v5 << 6) | 0x10));
  if (v5)
  {
    v9 = (_OWORD *)(result + 32);
    do
    {
      *((_QWORD *)v9 - 2) = 0;
      *v9 = 0uLL;
      v9[1] = 0uLL;
      v9[2] = 0uLL;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    while (1)
    {
      v11 = (uint64_t *)(v2 + (v10 << 6));
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + ((unint64_t)v22 << 6));
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + ((unint64_t)v24 << 6);
          v27 = *(unsigned int **)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v8);
            }
          }
          *(_QWORD *)v26 = *v11;
          v30 = v2 + (v10 << 6);
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          *(_QWORD *)(v26 + 16) = v31;
          v32 = *(_OWORD *)(v30 + 48);
          *(_OWORD *)(v26 + 32) = *(_OWORD *)(v30 + 32);
          *(_OWORD *)(v26 + 48) = v32;
          v14 = *(unsigned int **)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (!v14)
            goto LABEL_30;
          do
          {
            v33 = __ldaxr(v14);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v14));
          if (v34)
            goto LABEL_30;
        }
        else
        {
          v13 = v2 + (v10 << 6);
          v14 = *(unsigned int **)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          if (!v14)
            goto LABEL_30;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_30;
        }
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v8);
      }
LABEL_30:
      if (++v10 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v8);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::RTCDataChannelRemoteManager *v2;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = (WebKit::RTCDataChannelRemoteManager *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(v2);
  v4 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a2);
  if ((v4 & 0xFF0000) == 0)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(v2);
  v5 = v4;
  v6 = (uint64_t *)WebKit::RTCDataChannelRemoteManager::sharedManager((WebKit::RTCDataChannelRemoteManager *)v4);
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = off_1E34EC1A8;
  *(_WORD *)(v9 + 8) = v5;
  v11 = v9;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(v6, v8, v7, &v11);
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(WebKit::RTCDataChannelRemoteManager *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = (uint64_t *)WebKit::RTCDataChannelRemoteManager::sharedManager(a1);
  v4 = *(_QWORD *)a1;
  v3 = *((_QWORD *)a1 + 1);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E34EC1A8;
  *(_WORD *)(v5 + 8) = 0;
  v7 = v5;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(v2, v4, v3, &v7);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit27RTCDataChannelRemoteManager23RemoteHandlerConnection15connectToSourceERN7WebCore27RTCDataChannelRemoteHandlerENS5_16ProcessQualifiedINS_4UUIDEEENS5_24RTCDataChannelIdentifierESB_ENK3__1clINSt3__18optionalIbEEEEDaOT_EUlRSI_E_vJS7_EE4callES7_(uint64_t a1, WebCore::RTCDataChannelRemoteHandler *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  if (*(_BYTE *)(a1 + 9) && *(_BYTE *)(a1 + 8))
    return (WTF::StringImpl *)WebCore::RTCDataChannelRemoteHandler::readyToSend(this);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::RTCError::create((uint64_t *)&v6);
  WebCore::RTCDataChannelRemoteHandler::didDetectError();
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  BOOL v18;
  int v20;
  __int16 v21;
  char v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v20 = -1640531527;
  v21 = 0;
  v22 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v20, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = v6 & v5;
  result = (uint64_t *)(v2 + 48 * (v6 & v5));
  v12 = *result;
  v13 = result[1];
  v14 = v13 == v8 && v12 == v7;
  v15 = result[2];
  if (!v14 || v15 != v9)
  {
    v17 = 1;
    while (v12 | v13 || v15)
    {
      v10 = (v10 + v17) & v5;
      result = (uint64_t *)(v2 + 48 * v10);
      v12 = *result;
      v13 = result[1];
      v18 = v13 == v8 && v12 == v7;
      v15 = result[2];
      ++v17;
      if (v18 && v15 == v9)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  WTF::StringImpl **v26;
  _QWORD *v27;
  WTF::StringImpl **v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t result;
  int v35;
  __int16 v36;
  char v37;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 48);
    do
    {
      *(v11 - 4) = 0;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *v11 = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v5 + 48 * v12;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15)
          v16 = 0;
        else
          v16 = *(_OWORD *)v14 == 0;
        if (v16)
        {
          v19 = *(WTF::StringImpl ***)(v5 + 48 * v12 + 32);
          if (v19)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v9);
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v35 = -1640531527;
          v36 = 0;
          v37 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v35, (_QWORD *)(v5 + 48 * v12));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v23 = v17 + 48 * (v20 & v18);
            v20 = ++v21 + (v20 & v18);
          }
          while (*(_OWORD *)v23 != 0 || *(_QWORD *)(v23 + 16) != 0);
          v25 = v17 + 48 * v22;
          v28 = *(WTF::StringImpl ***)(v25 + 32);
          v27 = (_QWORD *)(v25 + 32);
          v26 = v28;
          if (v28)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v9);
          v29 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v23 = *(_OWORD *)v14;
          *(_OWORD *)(v23 + 16) = v29;
          v30 = v5 + 48 * v12;
          *v27 = 0;
          v31 = *(_QWORD *)(v30 + 32);
          *(_QWORD *)(v30 + 32) = 0;
          *v27 = v31;
          v32 = *(WTF::StringImpl ***)(v30 + 32);
          if (v32)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v9);
          if (v14 == a3)
            v13 = v23;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v12 = *(WTF **)(v3 + 16 * v11);
    if (!v12)
      break;
    if (v12 != (WTF *)-1 && (WTF::equal(v12, *a2, a3) & 1) != 0)
      return v3 + 16 * v11;
    ++i;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34EC1D0;
  v3 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34EC1D0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  WTF::StringImpl *result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int128 v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int16 v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37[2];
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 16;
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(a1 + 16);
  v5 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, v37);
  if (!LOBYTE(v37[1]))
    goto LABEL_46;
  v6 = a2[1];
  v7 = (WTF::StringImpl *)*a2;
  v8 = a2[2] - *a2;
  if (v6 <= v8)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_15;
  }
  v9 = (unsigned __int8 *)v7 + v8;
  a2[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v15 = v6;
    v16 = 0;
LABEL_15:
    v6 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_16;
  }
  v10 = *v9;
  if (v10 < 2)
  {
    if (!*v9)
    {
      v13 = 0;
      goto LABEL_13;
    }
    if (v6 <= v9 + 1 - (unsigned __int8 *)v7)
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v19 = a2[3];
      if (v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v11 = 0;
        v7 = (WTF::StringImpl *)*a2;
        v31 = a2[1];
        v32 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v12 = 0;
        if (v32)
        {
          if (v31)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32, v7);
            v12 = *a2;
            v11 = a2[1];
          }
        }
      }
    }
    else
    {
      a2[2] = (uint64_t)(v9 + 2);
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t)v7;
      if (v10 <= 4)
      {
        v13 = 256;
LABEL_13:
        LODWORD(v11) = 0x10000;
        goto LABEL_22;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v5 = (WTF::StringImpl *)a2[3];
    if (v5)
    {
      if (!v11)
        goto LABEL_21;
      v5 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v12, v11);
    }
    LODWORD(v11) = 0;
LABEL_21:
    LOWORD(v10) = 0;
    v13 = 256;
    goto LABEL_22;
  }
LABEL_16:
  *a2 = 0;
  a2[1] = 0;
  v5 = (WTF::StringImpl *)a2[3];
  if (v5 && v6)
    v5 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5, v7);
  LODWORD(v11) = 0;
  LOWORD(v10) = 0;
  v13 = 0;
LABEL_22:
  if (!WORD1(v11))
  {
    v7 = (WTF::StringImpl *)*a2;
    v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27 && v26)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v27 + 16))(v27, v7);
    if (!LOBYTE(v37[1]))
      goto LABEL_46;
    v5 = v37[0];
    v37[0] = 0;
    if (!v5)
      goto LABEL_46;
    if (*(_DWORD *)v5 != 2)
    {
      *(_DWORD *)v5 -= 2;
      goto LABEL_46;
    }
LABEL_45:
    WTF::StringImpl::destroy(v5, v7);
LABEL_46:
    v28 = *a2;
    v29 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30 && v29)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
    return IPC::Connection::cancelReply<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(v2);
  }
  if (!LOBYTE(v37[1]))
  {
    __break(1u);
    goto LABEL_45;
  }
  v20 = v10 | v11 | v13;
  v33 = v37[0];
  v34 = v20;
  v35 = 1;
  if (*(_QWORD *)v2 && (v21 = *(_QWORD *)(*(_QWORD *)v2 + 8)) != 0)
  {
    v22 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)v37 = *(_OWORD *)(a1 + 32);
    v38 = v22;
    result = (WTF::StringImpl *)WebKit::WebMDNSRegister::finishedRegisteringMDNSName(v21, (uint64_t *)v37, (WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)&v33, v20 & 0x1FF, (uint64_t *)(a1 + 24));
    if (!v35)
      return result;
  }
  else
  {
    v36 = 0;
    v24 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v24 + 16))(v24, &v36, 259);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v36;
    v36 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v23);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (*(_QWORD *)a1 && (v1 = *(_QWORD *)(*(_QWORD *)a1 + 8)) != 0)
  {
    v2 = *(_OWORD *)(a1 + 32);
    v8[0] = *(_OWORD *)(a1 + 16);
    v8[1] = v2;
    WebKit::WebMDNSRegister::finishedRegisteringMDNSName(v1, (uint64_t *)v8, (WTF::StringImpl **)(a1 + 48), (WTF::StringImpl *)&v6, 0, (uint64_t *)(a1 + 8));
    result = v6;
    v6 = 0;
    if (!result)
      return result;
  }
  else
  {
    v7 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v5 + 16))(v5, &v7, 259);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = v7;
    v7 = 0;
    if (!result)
      return result;
  }
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
  *(_DWORD *)result -= 2;
  return result;
}

IPC::Encoder *WebKit::WebRTCMonitor::startUpdating(WebKit::WebRTCMonitor *this)
{
  NSObject *v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  _BYTE v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v11 = 134217984;
    *(_QWORD *)&v11[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::StartUpdating - Asking network process to start updating", v11, 0xCu);
  }
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 502;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  *(_QWORD *)v11 = v5;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)v11, 0, 0);
  result = *(IPC::Encoder **)v11;
  *(_QWORD *)v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  ++*(_DWORD *)this;
  return result;
}

void WebKit::WebRTCMonitor::stopUpdating(WebKit::WebRTCMonitor *this)
{
  NSObject *v2;
  NSObject *v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  _BYTE v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v13 = 134217984;
    *(_QWORD *)&v13[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::StopUpdating", v13, 0xCu);
  }
  if ((*(_DWORD *)this)-- == 1)
  {
    v4 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v13 = 134217984;
      *(_QWORD *)&v13[4] = this;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::StopUpdating - Asking network process to stop updating", v13, 0xCu);
    }
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v12);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 503;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    *(_QWORD *)v13 = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)v13, 0, 0);
    v9 = *(IPC::Encoder **)v13;
    *(_QWORD *)v13 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
  }
}

_QWORD *WebKit::WebRTCMonitor::networksChanged(uint64_t a1, _DWORD *a2, __int128 *a3, __int128 *a4)
{
  NSObject *v8;
  WTF **v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  _DWORD v26[11];

  *(_QWORD *)&v26[9] = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v26 = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::NetworksChanged", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 24) = 1;
  v9 = (WTF **)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 44);
  if (v10)
    WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(*v9, (WTF *)((char *)*v9 + 96 * v10));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 32, a2);
  v11 = *a3;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *a4;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 68) = v12;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 8), buf);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + 8 * v14;
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  v20 = a1 + 8;
  v21 = v15;
  v22 = v15;
  v23 = v15;
  v24 = v13 + 8 * v14;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v20);
  v17 = *(_QWORD *)&v26[1];
  if (*(_QWORD *)&v26[1] != v21)
  {
    v18 = a1 + 48;
    v19 = a1 + 68;
    do
    {
      (*(void (**)(_QWORD, WTF **, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v17 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v17 + 8), v9, v18, v19);
      result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
      v17 = *(_QWORD *)&v26[1];
    }
    while (*(_QWORD *)&v26[1] != v21);
  }
  return result;
}

_QWORD *WebKit::WebRTCMonitor::networkProcessCrashed(WebKit::WebRTCMonitor *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 8;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 1, &v12);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v7 = v2;
  v8 = v5;
  v9 = v5;
  v10 = v5;
  v11 = v3 + 8 * v4;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v13 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v13 + 8));
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

_QWORD *WebKit::WebRTCResolver::setResolvedAddress(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  _BYTE v17[32];

  v2 = result;
  v3 = *result;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)(32 * v4));
    v7 = v6;
    if (*(_DWORD *)(a2 + 12))
    {
      v8 = 0;
      v9 = 0;
      v10 = (_OWORD *)(v6 + 12);
      do
      {
        WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)v17, (WebKit::RTC::Network::IPAddress *)(*(_QWORD *)a2 + v8));
        *(_QWORD *)((char *)v10 - 12) = &off_1E34B67B0;
        *((_DWORD *)v10 - 1) = *(_DWORD *)&v17[8];
        *v10 = *(_OWORD *)&v17[12];
        v10 += 2;
        ++v9;
        v8 += 20;
      }
      while (v9 < *(unsigned int *)(a2 + 12));
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  else
  {
    LODWORD(v9) = 0;
    v7 = 0;
  }
  v11 = v2[1];
  *(_QWORD *)v17 = v3;
  *(_QWORD *)&v17[8] = v11;
  v16[0] = 0;
  v16[1] = 0;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = off_1E34ECB80;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)v17;
  *(_QWORD *)(v12 + 24) = v7;
  *(_QWORD *)&v17[16] = 0;
  *(_QWORD *)&v17[24] = 0;
  *(_DWORD *)(v12 + 32) = v4;
  *(_DWORD *)(v12 + 36) = v9;
  v15 = v12;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17[16], v13);
  return (_QWORD *)WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v14);
}

uint64_t WebKit::WebRTCResolver::resolvedAddressError(WebKit::WebRTCResolver *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = off_1E34ECBA8;
  *(_QWORD *)(v5 + 8) = v3;
  *(_QWORD *)(v5 + 16) = v4;
  *(_DWORD *)(v5 + 24) = a2;
  v7 = v5;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebKit::NotificationPermissionRequestManager::create@<X0>(WebKit::NotificationPermissionRequestManager *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  result = WTF::fastMalloc((WTF *)0x18);
  v6 = result;
  v7 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  if (this)
  {
    result = (uint64_t)WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    v7 = (unsigned int *)*((_QWORD *)this + 3);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  *(_QWORD *)(v6 + 16) = v7;
  *a2 = v6;
  return result;
}

void WebKit::NotificationPermissionRequestManager::~NotificationPermissionRequestManager(WebKit::NotificationPermissionRequestManager *this, void *a2)
{
  WebCore::SecurityOriginData *v3;
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  unsigned int v7;
  WebCore::SecurityOriginData *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::SecurityOriginData *v17;
  WebCore::SecurityOriginData *v18;

  v3 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 - 3))
    {
      v4 = (WebCore::SecurityOriginData *)((char *)v3 + 48 * *((unsigned int *)v3 - 1));
      v17 = v3;
      v18 = v4;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(&v17);
      v6 = v17;
      v5 = v18;
      v7 = *((_DWORD *)v3 - 1);
    }
    else
    {
      v7 = *((_DWORD *)v3 - 1);
      v5 = (WebCore::SecurityOriginData *)((char *)v3 + 48 * v7);
      v6 = v5;
    }
    v8 = (WebCore::SecurityOriginData *)((char *)v3 + 48 * v7);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v8 = 0;
  }
  v18 = v5;
  if (v8 != v6)
  {
    do
    {
      v9 = *((unsigned int *)v6 + 11);
      if ((_DWORD)v9)
      {
        v10 = (uint64_t *)*((_QWORD *)v6 + 4);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10++ = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          v11 -= 8;
        }
        while (v11);
      }
      v17 = (WebCore::SecurityOriginData *)((char *)v6 + 48);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(&v17);
      v6 = v17;
    }
    while (v17 != v8);
  }
  if (v3)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)v3, a2);
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if (v16)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v16, a2);
}

WTF::StringImpl *WebKit::NotificationPermissionRequestManager::startRequest(uint64_t a1, WebCore::SecurityOriginData *a2, WTF::StringImpl *a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unsigned int *v29;
  uint64_t v30;
  WTF::StringImpl *result;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  WebKit::NotificationPermissionRequestManager *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  IPC::Encoder *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  WebKit::NotificationPermissionRequestManager *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  IPC::Encoder *v58;
  char v59;
  __int128 v60;
  _BYTE v61[24];
  int v62;
  uint64_t v63;
  __int128 v64;
  _BYTE v65[24];
  int v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  v64 = 0uLL;
  if (v7
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)(a1 + 8), 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v56 = a3;
  LODWORD(v60) = -1640531527;
  WORD2(v60) = 0;
  BYTE6(v60) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v60, (uint64_t)a2);
  v9 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v60) & v8;
  v10 = (unsigned int *)(v7 + 48 * v9);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10) & 1) == 0)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v10);
      if ((v13 & 1) != 0)
      {
        v11 = v10;
      }
      else if ((WebCore::operator==() & 1) != 0)
      {
        v28 = 1;
        v24 = v56;
        goto LABEL_29;
      }
      v9 = (v9 + v12) & v8;
      v10 = (unsigned int *)(v7 + 48 * v9);
      ++v12;
    }
    while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10));
    if (v11)
    {
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)v11 = 0u;
      --*(_DWORD *)(*v6 - 16);
      v10 = v11;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, (uint64_t)a2);
  v15 = v10[11];
  if ((_DWORD)v15)
  {
    v16 = (uint64_t *)*((_QWORD *)v10 + 4);
    v17 = 8 * v15;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v19 = (WTF *)*((_QWORD *)v10 + 4);
  if (v19)
  {
    *((_QWORD *)v10 + 4) = 0;
    v10[10] = 0;
    WTF::fastFree(v19, v14);
  }
  *((_QWORD *)v10 + 4) = v64;
  v20 = *((_QWORD *)&v64 + 1);
  v64 = 0uLL;
  *((_QWORD *)v10 + 5) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  v24 = v56;
  if (*v6)
    v25 = *(_DWORD *)(v23 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v23 - 16) + v25);
  v27 = *(unsigned int *)(v23 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (3 * v27 <= 4 * v26)
LABEL_27:
    v10 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v6, v10);
LABEL_28:
  v28 = 0;
LABEL_29:
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v14);
  v29 = v10 + 8;
  v30 = v10[11];
  if ((_DWORD)v30 == v10[10])
  {
    result = (WTF::StringImpl *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)v24);
    v30 = v10[11];
    v32 = (_QWORD *)(*((_QWORD *)v10 + 4) + 8 * v30);
  }
  else
  {
    v32 = (_QWORD *)(*(_QWORD *)v29 + 8 * v30);
    result = v24;
  }
  v33 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *v32 = v33;
  v10[11] = v30 + 1;
  if ((v28 & 1) == 0)
  {
    v34 = *(_QWORD *)(a1 + 16);
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 8);
      if (v35)
        v36 = v35 - 16;
      else
        v36 = 0;
    }
    else
    {
      v36 = 0;
    }
    WebCore::SecurityOriginData::toString(a2);
    ++*(_DWORD *)a1;
    *(_QWORD *)&v60 = a1;
    *((_QWORD *)&v60 + 1) = a1;
    v61[0] = 0;
    v62 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v61, (uint64_t)a2);
    v38 = *(_QWORD *)(v36 + 32);
    v37 = v36 + 32;
    v39 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    v63 = v39;
    v40 = (*(uint64_t (**)(uint64_t))(v38 + 56))(v37);
    v41 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v41 = 2012;
    *(_QWORD *)(v41 + 8) = v40;
    *(_QWORD *)(v41 + 528) = v41 + 16;
    *(_QWORD *)(v41 + 536) = v41 + 16;
    *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v41 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
    v58 = (IPC::Encoder *)v41;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)&v57);
    v42 = v60;
    *((_QWORD *)&v60 + 1) = 0;
    v64 = v42;
    v65[0] = 0;
    v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v65, (uint64_t)v61);
    v43 = v63;
    v63 = 0;
    v67 = v43;
    v44 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v44 = &off_1E34ECBD0;
    *(_QWORD *)(v44 + 8) = v64;
    v45 = *((_QWORD *)&v64 + 1);
    *((_QWORD *)&v64 + 1) = 0;
    *(_QWORD *)(v44 + 16) = v45;
    *(_BYTE *)(v44 + 24) = 0;
    *(_DWORD *)(v44 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v44 + 24, (uint64_t)v65);
    *(_QWORD *)(v44 + 56) = v67;
    v67 = 0;
    if (v66 != -1)
      ((void (*)(char *, _BYTE *))off_1E34ECA90[v66])(&v59, v65);
    v66 = -1;
    v47 = (WebKit::NotificationPermissionRequestManager *)*((_QWORD *)&v64 + 1);
    *((_QWORD *)&v64 + 1) = 0;
    if (v47)
      WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v47, v46);
    v48 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_QWORD *)&v64 = v44;
    *((_QWORD *)&v64 + 1) = v48;
    (*(void (**)(uint64_t, IPC::Encoder **, __int128 *, _QWORD))(*(_QWORD *)v37 + 40))(v37, &v58, &v64, 0);
    v50 = v64;
    *(_QWORD *)&v64 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v51 = v58;
    v58 = 0;
    if (v51)
    {
      IPC::Encoder::~Encoder(v51, v49);
      WTF::fastFree(v52, v53);
    }
    v54 = v63;
    v63 = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    if (v62 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E34ECA90[v62])(&v64, v61);
    v62 = -1;
    v55 = (WebKit::NotificationPermissionRequestManager *)*((_QWORD *)&v60 + 1);
    *((_QWORD *)&v60 + 1) = 0;
    if (v55)
      WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v55, v49);
    result = v57;
    v57 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v49);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::policyForOrigin(WebKit::WebNotificationManager *this, WTF::StringImpl **a2, WebKit::WebPage *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  char v11;
  _QWORD *v12;

  if (!*a2 || !*((_DWORD *)*a2 + 1))
    return 0;
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 4, a2, a3);
  v6 = v5;
  v7 = *((_QWORD *)this + 4);
  if (v7)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  if (v7 == v5)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 8);
  if (a3 && *(_BYTE *)(v5 + 8))
  {
    v11 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E34ECBF8;
    v9[1] = &v11;
    v12 = v9;
    WebKit::sendMessage(a3, (uint64_t)&v12);
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    v8 = *(unsigned __int8 *)(v6 + 8);
  }
  if (v8)
    return 2;
  else
    return 1;
}

uint64_t WebKit::NotificationPermissionRequestManager::setPermissionLevelForTesting(WebKit::NotificationPermissionRequestManager *this, WTF::StringImpl **a2, char a3)
{
  WebKit::WebProcess *v5;
  const char *v6;
  WebKit::WebProcess *v8;
  _QWORD v9[2];

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v9[0] = "WebNotificationManager";
  v9[1] = 23;
  v6 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v5 + 34, (WTF::ASCIILiteralHash *)v9);
  return WebKit::WebNotificationManager::didUpdateNotificationDecision((uint64_t)v6, a2, a3);
}

uint64_t WebKit::WebNotificationManager::didUpdateNotificationDecision(uint64_t this, WTF::StringImpl **a2, char a3)
{
  uint64_t v3;
  char v4;

  v4 = a3;
  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1))
      return WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::String const&,BOOL &>((uint64_t *)(this + 32), a2, (const WTF::StringImpl *)&v4, (uint64_t)&v3);
  }
  return this;
}

WTF::StringImpl **WebKit::NotificationPermissionRequestManager::removeAllPermissionsForTesting(WebKit::NotificationPermissionRequestManager *this)
{
  WebKit::WebProcess *v1;
  WTF::StringImpl *v2;
  const char *v3;
  WTF::StringImpl **result;
  WebKit::WebProcess *v5;
  _QWORD v6[2];

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v6[0] = "WebNotificationManager";
  v6[1] = 23;
  v3 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v1 + 34, (WTF::ASCIILiteralHash *)v6);
  result = (WTF::StringImpl **)*((_QWORD *)v3 + 4);
  if (result)
  {
    *((_QWORD *)v3 + 4) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v2);
  }
  return result;
}

void WebKit::WebNotificationManager::~WebNotificationManager(WebKit::WebNotificationManager *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34EC260;
  *((_QWORD *)this + 1) = &unk_1E34EC2A0;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebNotificationManager::~WebNotificationManager(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebNotificationManager::~WebNotificationManager(WebKit::WebNotificationManager *this, WTF::StringImpl *a2)
{
  WebKit::WebNotificationManager::~WebNotificationManager((WebKit::WebNotificationManager *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebNotificationManager::~WebNotificationManager((WebKit::WebNotificationManager *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebNotificationManager::didRemoveNotificationDecisions(WTF::StringImpl **result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = (uint64_t *)(result + 4);
    for (i = 8 * v3; i; i -= 8)
    {
      if (!*v4 || !*((_DWORD *)*v4 + 1))
        goto LABEL_10;
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, v4, a3);
      if (*v5)
      {
        v7 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
        if ((WTF::StringImpl **)v7 != result)
          goto LABEL_8;
      }
      else if (result)
      {
        v7 = 0;
LABEL_8:
        if ((WTF::StringImpl **)v7 != result)
          result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, result);
      }
LABEL_10:
      ++v4;
    }
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::show(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::DeprecatedGlobalSettings *a4, uint64_t *a5)
{
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD v13[3];
  __int128 v14;
  _QWORD *v15;

  v14 = *(_OWORD *)(a2 + 144);
  if (a4 && (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 6) + 112) + 712) & 0x200000000) == 0)
  {
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return 0;
  }
  v13[0] = a2;
  v13[1] = a3;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34ECC20;
  v10[1] = v13;
  v10[2] = a5;
  v15 = v10;
  v11 = WebKit::sendMessage(a4, (uint64_t)&v15);
  (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  if (!v11)
    return 0;
  if (!*(_QWORD *)(a2 + 96))
    WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::add<WebCore::ProcessQualified<WTF::UUID>&>((uint64_t *)(a1 + 24), &v14, (__int128 *)(a2 + 160), (uint64_t)v13);
  return 1;
}

uint64_t WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::add<WebCore::ProcessQualified<WTF::UUID>&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  __int16 v30;
  char v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v29 = -1640531527;
  v30 = 0;
  v31 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  v11 = result & v9;
  v12 = v8 + 48 * (result & v9);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v13 == a2[1] && v14 == *a2)
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 4);
        else
          v22 = 0;
        v28 = 0;
        v27 = v21 + 48 * v22;
        goto LABEL_32;
      }
      if (!(v14 ^ 1 | v13))
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = v8 + 48 * v11;
      v14 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *(_QWORD *)(v15 + 32) = 0;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  v18 = *a3;
  *(_QWORD *)(v12 + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v12 + 16) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v23 = *a1;
  if (*a1)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_25:
      result = (uint64_t)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (__int128 *)v12);
      v12 = result;
      v23 = *a1;
      if (*a1)
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      else
        LODWORD(v26) = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_25;
  }
  v27 = v23 + 48 * v26;
  v28 = 1;
LABEL_32:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WebKit::WebNotificationManager::cancel(uint64_t a1, uint64_t a2, WebCore::DeprecatedGlobalSettings *a3)
{
  _QWORD *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;

  v7 = *(_OWORD *)(a2 + 144);
  v6 = &v7;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34ECC70;
  v4[1] = &v6;
  v8 = v4;
  WebKit::sendMessage(a3, (uint64_t)&v8);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebKit::WebNotificationManager::didDestroyNotification(uint64_t a1, uint64_t a2, WebCore::DeprecatedGlobalSettings *a3)
{
  _QWORD *v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12[3];
  _QWORD *v13;

  *(_OWORD *)v12 = *(_OWORD *)(a2 + 144);
  if (!*(_QWORD *)(a2 + 96))
  {
    v7 = (uint64_t *)(a1 + 24);
    v8 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(a1 + 24), v12);
    v9 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + 48 * *(unsigned int *)(v9 - 4));
      if (v10 == v8)
        goto LABEL_2;
    }
    else
    {
      if (!v8)
        goto LABEL_2;
      v10 = 0;
    }
    if (v10 != v8)
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(v7, v8);
  }
LABEL_2:
  v11 = v12;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34ECC98;
  v4[1] = &v11;
  v13 = v4;
  WebKit::sendMessage(a3, (uint64_t)&v13);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebKit::WebNotificationManager::didShowNotification(WebKit::WebNotificationManager *this, const WTF::UUID *a2)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t)this + 24, (uint64_t *)a2, (uint64_t)&v5);
  if (v5 != 0)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34ECCC0;
    v4 = (uint64_t)v3;
    WebCore::Notification::ensureOnNotificationThread();
    result = v4;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::didClickNotification(WebKit::WebNotificationManager *this, const WTF::UUID *a2)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t)this + 24, (uint64_t *)a2, (uint64_t)&v5);
  if (v5 != 0)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34ECCE8;
    v4 = (uint64_t)v3;
    WebCore::Notification::ensureOnNotificationThread();
    result = v4;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::didCloseNotifications(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)a2;
    v4 = result + 24;
    v5 = 16 * v2;
    do
    {
      result = WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v4, v3, (uint64_t)&v8);
      if (v8 != 0)
      {
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E34ECD10;
        v7 = v6;
        WebCore::Notification::ensureOnNotificationThread();
        result = (uint64_t)v7;
        if (v7)
          result = (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
      }
      v3 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

void WebKit::PluginView::Stream::~Stream(WebKit::PluginView::Stream *this)
{
  uint64_t v2;
  CFTypeRef v3;
  _DWORD *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[192];
  CFTypeRef cf;

  *(_QWORD *)this = off_1E34EC2D8;
  if (*((_QWORD *)this + 29))
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v13);
    v2 = *((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = cf;
    cf = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v13);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v5 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (const void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::PluginView::Stream *)((char *)this + 32));
  v8 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, v7);
    else
      --*(_DWORD *)v8;
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::PluginView::Stream::~Stream(this);
  WTF::fastFree(v1, v2);
}

void WebKit::PluginView::Stream::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::RefCountedBase *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  v7 = *a5;
  *a5 = 0;
  v8 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 32, a3);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 184), (WTF::StringImpl *)(a3 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 192), (WTF::StringImpl *)(a3 + 160));
  v9 = *(_QWORD *)(a3 + 168);
  *(_QWORD *)(a3 + 168) = 0;
  v10 = *(WTF::RefCountedBase **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v9;
  if (v10)
    WTF::RefCounted<WebCore::FormData>::deref(v10);
  v11 = *(_QWORD *)(a3 + 176);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a3 + 184);
  *(_QWORD *)(a1 + 208) = v11;
  v12 = *(_QWORD *)(a3 + 192);
  *(_QWORD *)(a3 + 192) = 0;
  v13 = *(const void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v12;
  if (v13)
    CFRelease(v13);
}

unsigned __int8 *WebKit::PluginView::Stream::didReceiveResponse(uint64_t a1, uint64_t a2, const WebCore::ResourceResponse *a3)
{
  unsigned __int8 **v4;
  unsigned __int8 *result;
  void *v6;

  v4 = *(unsigned __int8 ***)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 9);
  result = (unsigned __int8 *)WebKit::PDFPluginBase::streamDidReceiveResponse((WebKit::PDFPluginBase *)v4, a3);
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4[9], v6);
  return result;
}

unsigned __int8 *WebKit::PluginView::Stream::didReceiveData(uint64_t a1, uint64_t a2, const WebCore::SharedBuffer *a3)
{
  unsigned __int8 **v4;
  unsigned __int8 *result;
  void *v6;

  v4 = *(unsigned __int8 ***)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 9);
  result = (unsigned __int8 *)WebKit::PDFPluginBase::streamDidReceiveData((WebKit::PDFPluginBase *)v4, a3);
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4[9], v6);
  return result;
}

WTF *WebKit::PluginView::Stream::didFail(uint64_t a1, void *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  _DWORD *v5;
  WTF *result;

  ++*(_DWORD *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 240))
  {
    v3 = *(unsigned __int8 ***)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
    WebKit::PDFPluginBase::streamDidFail((WebKit::PDFPluginBase *)v3);
    if (v3)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], a2);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = *(_DWORD **)(v4 + 184);
  *(_QWORD *)(v4 + 184) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 56))(v5);
    else
      --v5[4];
  }
  result = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)(a1 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  --*(_DWORD *)(a1 + 16);
  return result;
}

WTF *WebKit::PluginView::Stream::didFinishLoading(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _DWORD *v5;
  WTF *result;

  ++*(_DWORD *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 72));
  WebKit::PDFPluginBase::streamDidFinishLoading((unsigned __int8 *)v2);
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 72), v3);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = *(_DWORD **)(v4 + 184);
  *(_QWORD *)(v4 + 184) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 56))(v5);
    else
      --v5[4];
  }
  result = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v3);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)(a1 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  --*(_DWORD *)(a1 + 16);
  return result;
}

unsigned int *WebKit::PluginView::create@<X0>(unsigned int *result@<X0>, WTF::URL *a2@<X1>, WebCore::MIMETypeRegistry *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 5) + 8) + 528);
  if (v6 && (v7 = (uint64_t)result, (result = *(unsigned int **)(v6 + 8)) != 0))
  {
    v11 = result + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, &v23);
    v13 = v23;
    if (v23)
    {
      v14 = *(_QWORD *)(v23 + 24);
      if (v14
        && (v15 = *(_QWORD *)(v14 + 8)) != 0
        && (v16 = *(_QWORD *)(v15 + 24)) != 0
        && (v17 = *(_QWORD *)(v16 + 8)) != 0
        && (v18 = *(_QWORD **)(*(_QWORD *)(v17 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v18 + 1368))(v18) & 1) == 0)
        && (v19 = *(_QWORD *)(v18[2] + 8)) != 0)
      {
        CFRetain(*(CFTypeRef *)(v19 - 8));
        WTF::URL::path(a2);
        if (WebKit::WebPage::shouldUsePDFPlugin(v19 - 16, a3))
        {
          v20 = WTF::fastMalloc((WTF *)0x1D8);
          v22 = WebKit::PluginView::PluginView(v20, v7, (uint64_t)a2, v21, a4, v19 - 16);
        }
        else
        {
          v22 = 0;
        }
        *a5 = v22;
        CFRelease(*(CFTypeRef *)(v19 - 8));
      }
      else
      {
        *a5 = 0;
      }
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    else
    {
      *a5 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t WebKit::PluginView::PluginView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;
  __int128 v16;
  WTF::RunLoop *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24[3];

  v11 = (_QWORD *)WebCore::Widget::Widget();
  *v11 = off_1E34EC328;
  *(_DWORD *)(a2 + 24) += 2;
  v11[8] = a2;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 680) + 712) & 0x8000000000000) != 0)
  {
    WebKit::UnifiedPDFPlugin::create(a2, v24);
    *(_QWORD *)(a1 + 72) = v24[0];
    v12 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a6 + 24), a6 + 16);
    v13 = *(unsigned int **)(a6 + 24);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    *(_QWORD *)(a1 + 80) = v13;
    v15 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v15 += 2;
    *(_QWORD *)(a1 + 88) = v15;
    v16 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 136) = a5;
    *(_BYTE *)(a1 + 137) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v17 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v12);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v18 = off_1E34ECD60;
    v18[1] = WebKit::PluginView::pendingResourceRequestTimerFired;
    v18[2] = 0;
    v18[3] = a1;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 152), v17);
    *(_QWORD *)(a1 + 152) = off_1E34ABE00;
    *(_QWORD *)(a1 + 176) = v18;
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 200));
    *(_QWORD *)(a1 + 440) = 0;
    *(_BYTE *)(a1 + 448) = 0;
    *(_BYTE *)(a1 + 338) = *(_BYTE *)(a1 + 338) & 0xF1 | 4;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    v19 = *(_QWORD *)(a1 + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v19 + 72));
    if (v19)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v19 + 72), v20);
    v21 = *(_QWORD *)(a1 + 80);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
        v21 = v22 - 16;
      else
        v21 = 0;
    }
    WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PluginView>(v21 + 160, a1, (uint64_t)v24);
    return a1;
  }
  else
  {
    result = 228;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PluginView::pendingResourceRequestTimerFired(WebKit::PluginView *this)
{
  WebCore::ResourceRequestBase *v2;
  WTF::URL *v3;
  uint64_t result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  _QWORD *v14;
  CFTypeRef v15;
  WebKit::WebProcess *v16;
  _QWORD *v17;
  CFTypeRef v18[24];
  CFTypeRef cf;

  v2 = (WebCore::ResourceRequestBase *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  v3 = (WTF::URL *)WebCore::ResourceRequestBase::url(v2);
  result = WTF::URL::protocolIsJavaScript(v3);
  if ((result & 1) != 0)
  {
LABEL_23:
    if (!v2)
      return result;
    return std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v2);
  }
  ++*((_DWORD *)this + 2);
  v5 = WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = off_1E34EC2D8;
  *(_QWORD *)(v5 + 8) = 0;
  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebKit::PluginView *)((char *)this + 16), (uint64_t)this);
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  if (v6)
    ++*v6;
  *(_QWORD *)(v5 + 24) = v6;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v5 + 32), v2);
  *(_QWORD *)(v5 + 232) = 0;
  *(_BYTE *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 248) = 0;
  ++*(_DWORD *)(v5 + 16);
  v7 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v5;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 56))(v7);
    else
      --v7[4];
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 64) + 40) + 8)
                 + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
  }
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v16);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = *((_QWORD *)v12 + 40);
  WebCore::ResourceRequest::ResourceRequest(v18, (const WebCore::ResourceRequest *)(v5 + 32));
  ++*(_DWORD *)(v5 + 16);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = &off_1E34ECD38;
  v14[1] = v5;
  v14[2] = v5;
  v17 = v14;
  WebKit::WebLoaderStrategy::schedulePluginStreamLoad(v13, v9, v5, (uint64_t)v18, (uint64_t *)&v17);
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
  result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  if (*(_DWORD *)(v5 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  else
    --*(_DWORD *)(v5 + 16);
  if (*((_DWORD *)this + 2) != 1)
  {
    --*((_DWORD *)this + 2);
    goto LABEL_23;
  }
  result = (*(uint64_t (**)(WebKit::PluginView *))(*(_QWORD *)this + 8))(this);
  if (v2)
    return std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v2);
  return result;
}

void WebKit::PluginView::~PluginView(WebKit::PluginView *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ResourceLoader *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  const void *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::ResourceRequestBase *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::PluginView>(v3 + 144, this);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
  v4 = *((_QWORD *)this + 23);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 16);
    *(_BYTE *)(v4 + 240) = 1;
    v5 = *(WebCore::ResourceLoader **)(v4 + 248);
    *(_QWORD *)(v4 + 248) = 0;
    WebCore::ResourceLoader::cancelledError(v5);
    WebCore::ResourceLoader::cancel();
    if (cf)
      CFRelease(cf);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v6);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v6);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v6);
        if (!v5)
          goto LABEL_24;
        goto LABEL_21;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (!v5)
    {
LABEL_24:
      if (*(_DWORD *)(v4 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      else
        --*(_DWORD *)(v4 + 16);
      goto LABEL_27;
    }
LABEL_21:
    if (*((_DWORD *)v5 + 4) == 1)
      (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 4);
    goto LABEL_24;
  }
LABEL_27:
  v7 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v7 + 9);
  WebKit::PDFPluginBase::destroy((WebKit::PDFPluginBase *)v7);
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v7[9], v8);
  v9 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v9, v8);
  v10 = (unsigned int *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v8);
  v11 = (const void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::PluginView *)((char *)this + 200), (WTF::StringImpl *)v8);
  v12 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 56))(v12);
    else
      --v12[4];
  }
  *((_QWORD *)this + 19) = off_1E34ABE00;
  v13 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::PluginView *)((char *)this + 152));
  v15 = (WebCore::ResourceRequestBase *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v15)
    std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v15);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v14);
    }
  }
  v21 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v21)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v21 + 72), v14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)this + 8);
  WebCore::Widget::~Widget(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::PluginView::~PluginView(this);
  WTF::fastFree(v1, v2);
}

void WebKit::PluginView::manualLoadDidReceiveResponse(WebKit::PluginView *this, CFTypeRef *a2)
{
  unsigned __int8 **v4;
  void *v5;
  CFTypeRef v6;
  const void *v7;

  if (*((_BYTE *)this + 137))
  {
    v4 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 9);
    WebKit::PDFPluginBase::streamDidReceiveResponse((WebKit::PDFPluginBase *)v4, (const WebCore::ResourceResponse *)a2);
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4[9], v5);
  }
  else
  {
    *((_DWORD *)this + 48) = 1;
    WebCore::ResourceResponseBase::operator=((uint64_t)this + 200, (uint64_t)a2);
    v6 = a2[30];
    if (v6)
      CFRetain(a2[30]);
    v7 = (const void *)*((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = v6;
    if (v7)
      CFRelease(v7);
    *((_BYTE *)this + 448) = *((_BYTE *)a2 + 248);
  }
}

unsigned __int8 *WebKit::PluginView::manualLoadDidReceiveData(WebKit::PluginView *this, const WebCore::SharedBuffer *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *result;
  void *v5;

  if (*((_BYTE *)this + 137))
  {
    v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
    result = (unsigned __int8 *)WebKit::PDFPluginBase::streamDidReceiveData((WebKit::PDFPluginBase *)v3, a2);
    if (v3)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v5);
  }
  else
  {
    WebCore::SharedBufferBuilder::ensureBuffer((WebKit::PluginView *)((char *)this + 456));
    return (unsigned __int8 *)WebCore::FragmentedSharedBuffer::append();
  }
  return result;
}

unsigned __int8 *WebKit::PluginView::manualLoadDidFinishLoading(unsigned __int8 *this)
{
  uint64_t v1;
  void *v2;

  if (this[137])
  {
    v1 = *((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v1 + 72));
    this = WebKit::PDFPluginBase::streamDidFinishLoading((unsigned __int8 *)v1);
    if (v1)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v1 + 72), v2);
  }
  else
  {
    *((_DWORD *)this + 48) = 2;
  }
  return this;
}

uint64_t *WebKit::PluginView::layerHostingStrategyDidChange(uint64_t *this)
{
  WebCore::Element *v1;
  WebCore::Element *v2;

  if (*((_BYTE *)this + 137))
  {
    v1 = (WebCore::Element *)this[8];
    *((_DWORD *)v1 + 6) += 2;
    v2 = v1;
    WebCore::Element::invalidateStyleAndLayerComposition(v1);
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v2);
  }
  return this;
}

unsigned __int8 *WebKit::PluginView::manualLoadDidFail(unsigned __int8 *this, void *a2)
{
  unsigned __int8 **v2;
  void *v3;
  unsigned int *v4;

  if (this[137])
  {
    v2 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 9);
    this = (unsigned __int8 *)WebKit::PDFPluginBase::streamDidFail((WebKit::PDFPluginBase *)v2);
    if (v2)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v2[9], v3);
  }
  else
  {
    *((_DWORD *)this + 48) = 2;
    v4 = (unsigned int *)*((_QWORD *)this + 57);
    *((_QWORD *)this + 57) = 0;
    if (v4)
      return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return this;
}

unsigned __int8 *WebKit::PluginView::viewGeometryDidChange(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  WebCore::ScrollView *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WebCore::ScrollView *v13[2];
  __int128 v14;
  __int128 v15;
  _DWORD v16[2];

  if (this[137])
  {
    v1 = this;
    this = (unsigned __int8 *)WebCore::Widget::parent((WebCore::Widget *)this);
    if (this)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 8) + 40) + 8) + 528) + 8)
                     + 24);
      v3 = 1.0;
      if (v2)
      {
        v4 = *(_QWORD *)(v2 + 8);
        if (v4)
          v3 = *(float *)(v4 + 356);
      }
      v16[0] = (int)(float)(v3 * (float)(int)WebCore::Widget::frameRect((WebCore::Widget *)v1));
      v16[1] = (int)(float)(v3 * (float)(int)((unint64_t)WebCore::Widget::frameRect((WebCore::Widget *)v1) >> 32));
      WebCore::Widget::protectedParent((WebCore::Widget *)v1);
      v5 = WebCore::ScrollView::contentsToRootView(v13[0], (const WebCore::IntPoint *)v16);
      v6 = v5;
      v7 = HIDWORD(v5);
      v8 = v13[0];
      v13[0] = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
        else
          --*((_DWORD *)v8 + 2);
      }
      *(_OWORD *)v13 = xmmword_1978D0DD8;
      v14 = unk_1978D0DE8;
      v15 = xmmword_1978D0DF8;
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)v13, (double)v6, (double)(int)v7);
      WebCore::AffineTransform::scale((WebCore::AffineTransform *)v13, v3);
      v9 = (unsigned __int8 **)*((_QWORD *)v1 + 9);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v9 + 9);
      WebCore::Widget::frameRect((WebCore::Widget *)v1);
      v12 = v10;
      (*((void (**)(unsigned __int8 **, uint64_t *, WebCore::ScrollView **))*v9 + 121))(v9, &v12, v13);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v9[9], v11);
    }
  }
  return this;
}

unsigned __int8 *WebKit::PluginView::setPageScaleFactor(unsigned __int8 *result, uint64_t a2, unsigned int a3, double a4)
{
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  void *v9;

  if (result[137])
  {
    v7 = result;
    WebKit::PluginView::pluginScaleFactorDidChange((WebKit::PluginView *)result);
    v8 = (unsigned __int8 **)*((_QWORD *)v7 + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v8 + 9);
    (*((void (**)(unsigned __int8 **, uint64_t, _QWORD, double))*v8 + 118))(v8, a2, a3, a4);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v8[9], v9);
  }
  return result;
}

void WebKit::PluginView::pluginScaleFactorDidChange(WebKit::PluginView *this)
{
  unsigned __int8 **v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  v2 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 9);
  v3 = (*((double (**)(unsigned __int8 **))*v2 + 117))(v2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v2[9], v4);
  v5 = *((_QWORD *)this + 10);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = v7 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 56))(v7 + 32);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 1991;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v22 = (IPC::Encoder *)v11;
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v7 + 32) + 32))(v7 + 32, &v22, 0);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v12);
    WTF::fastFree(v14, v15);
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v7 + 32);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 1992;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v22 = (IPC::Encoder *)v17;
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v7 + 32, &v22, 0);
  v19 = v22;
  v22 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v18);
    WTF::fastFree(v20, v21);
  }
  if ((v8 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v7 + 8));
}

uint64_t WebKit::PluginView::accessibilityAssociatedPluginParentForElement(WebKit::PluginView *this, WebCore::Element *a2)
{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 72));
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 72), v3);
  return 0;
}

uint64_t WebKit::PluginView::accessibilityObject(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 148))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

unsigned __int8 *WebKit::PluginView::viewVisibilityDidChange(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  unsigned __int8 **v2;
  _BOOL8 v3;
  void *v4;

  if (this[137])
  {
    v1 = this;
    this = (unsigned __int8 *)WebCore::Widget::parent((WebCore::Widget *)this);
    if (this)
    {
      v2 = (unsigned __int8 **)*((_QWORD *)v1 + 9);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 9);
      if (v1[24])
        v3 = v1[25] != 0;
      else
        v3 = 0;
      (*((void (**)(unsigned __int8 **, _BOOL8))*v2 + 122))(v2, v3);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v2[9], v4);
    }
  }
  return this;
}

uint64_t WebKit::PluginView::layerHostingStrategy(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 108))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

uint64_t WebKit::PluginView::platformLayer(WebKit::PluginView *this)
{
  return 0;
}

uint64_t WebKit::PluginView::graphicsLayer(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  unsigned __int8 **v2;
  void *v3;
  uint64_t v4;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  v2 = v1 + 9;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  if ((*((unsigned int (**)(unsigned __int8 **))*v1 + 108))(v1) == 2)
    v4 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 110))(v1);
  else
    v4 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*v2, v3);
  return v4;
}

uint64_t WebKit::PluginView::scroll()
{
  return 0;
}

uint64_t WebKit::PluginView::scrollPositionForTesting(WebKit::PluginView *this)
{
  return 0;
}

uint64_t WebKit::PluginView::horizontalScrollbar(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 49))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

uint64_t WebKit::PluginView::verticalScrollbar(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 50))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

uint64_t WebKit::PluginView::wantsWheelEvents(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 127))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

unsigned __int8 *WebKit::PluginView::setFrameRect(WebKit::PluginView *this, const IntRect *a2)
{
  WebCore::Widget::setFrameRect(this, a2);
  return WebKit::PluginView::viewGeometryDidChange((unsigned __int8 *)this);
}

unsigned __int8 *WebKit::PluginView::paint(unsigned __int8 *result, WebCore::GraphicsContext *a2, IntRect *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ShareableBitmap *v15;
  IntSize v16;
  WebCore::LocalFrameView *v17;
  __int16 v18;
  __int16 v19;
  IntPoint v20;
  unsigned __int8 **v21;
  int v22;
  void *v23;
  unsigned __int8 **v24;
  void *v25;
  IntPoint v26[2];
  IntRect v27;
  unsigned __int8 *v28;

  if (!result[137])
    return result;
  v5 = result;
  if ((*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2))
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 56))(a2);
    if ((_DWORD)result)
    {
      v6 = (unsigned __int8 **)*((_QWORD *)v5 + 9);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v6 + 9);
      result = (unsigned __int8 *)WebKit::PDFPluginBase::updateControlTints((WebKit::PDFPluginBase *)v6, a2);
      if (v6)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v6[9], v7);
    }
    return result;
  }
  result = (unsigned __int8 *)WebCore::Widget::frameRect((WebCore::Widget *)v5);
  if (v9 < 1 || v8 < 1)
    return result;
  if (!*((_QWORD *)v5 + 58))
  {
    v17 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 40) + 8)
                                                              + 528)
                                                  + 8)
                                      + 288);
    if (v17)
    {
      ++*((_DWORD *)v17 + 2);
      v18 = WebCore::LocalFrameView::paintBehavior(v17);
      v19 = v18;
      if (*((_DWORD *)v17 + 2) == 1)
      {
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v17 + 8))(v17);
        if ((v19 & 0x200) != 0)
        {
LABEL_26:
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
          v26[0] = (IntPoint)WebCore::Widget::frameRect((WebCore::Widget *)v5);
          WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v27, v26);
          (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, *(float *)&v27.m_location.m_x, *(float *)&v27.m_location.m_y);
          v27 = *a3;
          v27.m_location = (IntPoint)vsub_s32((int32x2_t)v27.m_location, (int32x2_t)v26[0]);
          v24 = (unsigned __int8 **)*((_QWORD *)v5 + 9);
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v24 + 9);
          (*((void (**)(unsigned __int8 **, WebCore::GraphicsContext *, IntRect *))*v24 + 116))(v24, a2, &v27);
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v24[9], v25);
          return (unsigned __int8 *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
        }
      }
      else
      {
        --*((_DWORD *)v17 + 2);
        if ((v18 & 0x200) != 0)
          goto LABEL_26;
      }
    }
    v21 = (unsigned __int8 **)*((_QWORD *)v5 + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v21 + 9);
    v22 = (*((uint64_t (**)(unsigned __int8 **))*v21 + 108))(v21);
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v21[9], v23);
    if (v22 == 2)
      return result;
    goto LABEL_26;
  }
  if ((*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 40) + 8) + 528);
    v11 = 1.0;
    if (v10)
    {
      v12 = *(_QWORD *)(v10 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            ++*(_DWORD *)v14;
            v11 = (float)(int)*(float *)(v14 + 364);
            WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v14);
          }
        }
      }
    }
    v15 = (WebCore::ShareableBitmap *)*((_QWORD *)v5 + 58);
    v26[0] = (IntPoint)WebCore::Widget::frameRect((WebCore::Widget *)v5);
    v16 = *(IntSize *)(*((_QWORD *)v5 + 58) + 8);
    v27.m_location = 0;
    v27.m_size = v16;
    return (unsigned __int8 *)WebCore::ShareableBitmap::paint(v15, a2, v11, v26, &v27);
  }
  else
  {
    result = (unsigned __int8 *)WebCore::ShareableBitmap::createImage(*((WebCore::ShareableBitmap **)v5 + 58));
    if (v28)
    {
      v26[0] = (IntPoint)WebCore::Widget::frameRect((WebCore::Widget *)v5);
      v26[1] = v20;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v27, (const WebCore::IntRect *)v26);
      WebCore::GraphicsContext::drawImage();
      result = v28;
      v28 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
    }
  }
  return result;
}

unsigned __int8 *WebKit::PluginView::setParent(CFTypeRef *this, WebCore::ScrollView *a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  void *v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  WebCore::OriginAccessPatternsForWebProcess *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::LocalFrameView *v19;
  WTF::StringImpl *v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WebCore::LocalFrameView *v27;
  WebKit::WebFrame *v28;
  WTF::StringImpl *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WebCore::ResourceRequestBase *v40;
  WebCore::ResourceRequestBase *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WebKit::WebFrame *v44;
  WTF::StringImpl *v45[5];
  WTF::StringImpl *v46;

  result = (unsigned __int8 *)WebCore::Widget::setParent((WebCore::Widget *)this, a2);
  if (a2 && !*((_BYTE *)this + 137))
  {
    v5 = (unsigned __int8 **)this[9];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v5 + 9);
    (*((void (**)(unsigned __int8 **, CFTypeRef *))*v5 + 111))(v5, this);
    if (!*((_BYTE *)this + 136))
    {
      v8 = this[11];
      if (v8)
      {
        if (v8[1])
        {
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[8] + 5) + 8) + 528) + 8) + 296);
          (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 192) + 8))(v9 + 192);
          v10 = (WebCore::OriginAccessPatternsForWebProcess *)WebCore::FrameLoader::outgoingReferrerURL(*(WebCore::FrameLoader **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[8] + 5) + 8) + 528) + 8) + 280));
          WebCore::OriginAccessPatternsForWebProcess::singleton(v10);
          WebCore::SecurityPolicy::generateReferrerHeader();
          v12 = v45[0];
          v45[0] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          v38 = v46;
          if (v46)
          {
            if (!*((_DWORD *)v46 + 1))
            {
              v46 = 0;
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v11);
              else
                *(_DWORD *)v38 -= 2;
            }
          }
          else
          {
            v46 = 0;
          }
          v39 = WTF::fastMalloc((WTF *)0xC8);
          v40 = (WebCore::ResourceRequestBase *)WebCore::ResourceRequestBase::ResourceRequestBase(v39, (const WTF::URL *)(this + 11), 0);
          *((_QWORD *)v40 + 24) = 0;
          WebCore::ResourceRequestBase::setHTTPReferrer(v40, (const WTF::String *)&v46);
          v41 = (WebCore::ResourceRequestBase *)this[18];
          this[18] = (CFTypeRef)v39;
          if (v41)
            std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v41);
          WTF::RunLoop::TimerBase::start();
          v43 = v46;
          v46 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v42);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
      }
    }
    *((_BYTE *)this + 137) = 1;
    WebKit::PluginView::viewVisibilityDidChange((unsigned __int8 *)this);
    WebKit::PluginView::viewGeometryDidChange((unsigned __int8 *)this);
    v7 = *((_DWORD *)this + 48);
    if (v7)
    {
      if (v7 == 3)
      {
        WebKit::PluginView::manualLoadDidFail((unsigned __int8 *)this, v6);
      }
      else
      {
        WebKit::PluginView::manualLoadDidReceiveResponse((WebKit::PluginView *)this, this + 25);
        if (this[57])
        {
          WebCore::SharedBufferBuilder::take((WebCore::SharedBufferBuilder *)(this + 57));
          v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v13 = off_1E34ECD88;
          *((_QWORD *)v13 + 1) = this;
          v46 = v13;
          WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer();
          v15 = v46;
          v46 = 0;
          if (v15)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
          v16 = (unsigned int *)v45[0];
          v45[0] = 0;
          if (v16)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v14);
        }
        if (*((_DWORD *)this + 48) == 2)
          WebKit::PluginView::manualLoadDidFinishLoading((unsigned __int8 *)this);
      }
    }
    if ((*((unsigned int (**)(unsigned __int8 **))*v5 + 113))(v5))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[8] + 5) + 8) + 528);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = *(WebCore::LocalFrameView **)(v18 + 288);
          if (v19)
          {
            ++*((_DWORD *)v19 + 2);
            WebCore::LocalFrameView::enterCompositingMode(v19);
            if (*((_DWORD *)v19 + 2) == 1)
              (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v19 + 8))(v19);
            else
              --*((_DWORD *)v19 + 2);
          }
          else
          {
            WebCore::LocalFrameView::enterCompositingMode(0);
          }
          v20 = (WTF::StringImpl *)this[8];
          *((_DWORD *)v20 + 6) += 2;
          v45[0] = v20;
          WebCore::Element::invalidateStyleAndLayerComposition(v20);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v45);
        }
      }
    }
    if (*((_BYTE *)this + 24))
      v21 = *((_BYTE *)this + 25) != 0;
    else
      v21 = 0;
    (*((void (**)(unsigned __int8 **, _BOOL8))*v5 + 122))(v5, v21);
    v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[8] + 5) + 8) + 528);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
      {
        v25 = (unsigned int *)(v24 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        v27 = *(WebCore::LocalFrameView **)(v24 + 288);
        if (v27)
        {
          ++*((_DWORD *)v27 + 2);
          WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(v27);
          if (*((_DWORD *)v27 + 2) == 1)
            (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v27 + 8))(v27);
          else
            --*((_DWORD *)v27 + 2);
        }
        if (*(_QWORD *)(*(_QWORD *)(v24 + 128) + 8) == v24
          && WebKit::PDFPluginBase::isFullFramePlugin((WebKit::PDFPluginBase *)v5))
        {
          WebKit::WebFrame::fromCoreFrame(v24, &v44);
          v28 = v44;
          WebKit::WebFrame::protectedPage((uint64_t)v44, &v46);
          v29 = v46;
          v30 = (*((double (**)(unsigned __int8 **))*v5 + 119))(v5);
          v31 = (*((double (**)(unsigned __int8 **))*v5 + 120))(v5);
          v32 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v29 + 4) + 56))((uint64_t)v29 + 32);
          v33 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v33 = 1969;
          *(_QWORD *)(v33 + 8) = v32;
          *(_QWORD *)(v33 + 528) = v33 + 16;
          *(_QWORD *)(v33 + 536) = v33 + 16;
          *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v33 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
          v45[0] = (WTF::StringImpl *)v33;
          *IPC::Encoder::grow((IPC::Encoder *)v33, 1uLL, 1) = 1;
          *(double *)IPC::Encoder::grow((IPC::Encoder *)v33, 8uLL, 8) = v30;
          *(double *)IPC::Encoder::grow((IPC::Encoder *)v33, 8uLL, 8) = v31;
          (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*((_QWORD *)v29 + 4) + 32))((uint64_t)v29 + 32, v45, 0);
          v35 = v45[0];
          v45[0] = 0;
          if (v35)
          {
            IPC::Encoder::~Encoder(v35, v34);
            WTF::fastFree(v36, v37);
          }
          CFRelease(*((CFTypeRef *)v29 + 1));
          if (v28)
            CFRelease(*((CFTypeRef *)v28 + 1));
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5[9], v22);
  }
  return result;
}

uint64_t WebKit::PluginView::countFindMatches(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  unsigned __int8 **v7;
  uint64_t v8;
  void *v9;

  if (!*(_BYTE *)(a1 + 137))
    return 0;
  v7 = *(unsigned __int8 ***)(a1 + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v7 + 9);
  v8 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, _QWORD, uint64_t))*v7 + 139))(v7, a2, a3, a4);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v7[9], v9);
  return v8;
}

uint64_t WebKit::PluginView::findString(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  unsigned __int8 **v7;
  uint64_t v8;
  void *v9;

  if (!*(_BYTE *)(a1 + 137))
    return 0;
  v7 = *(unsigned __int8 ***)(a1 + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v7 + 9);
  v8 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, _QWORD, uint64_t))*v7 + 140))(v7, a2, a3, a4);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v7[9], v9);
  return v8;
}

unsigned __int8 *WebKit::PluginView::rectsForTextMatchesInRect@<X0>(unsigned __int8 *this@<X0>, const WebCore::IntRect *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 **v4;
  void *v5;

  if (this[137])
  {
    v4 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 9);
    (*((void (**)(unsigned __int8 **, const WebCore::IntRect *))*v4 + 141))(v4, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4[9], v5);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

uint64_t WebKit::PluginView::drawsFindOverlay(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 142))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

unsigned __int8 *WebKit::PluginView::selectionString@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v2;
  void *v3;

  if (this[137])
  {
    v2 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 9);
    (*((void (**)(unsigned __int8 **))*v2 + 136))(v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v2[9], v3);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WebCore *WebKit::PluginView::handleEvent(WebCore *result, uint64_t a2)
{
  _BYTE *v2;
  WebCore *v4;
  unint64_t StatusReg;
  uint64_t v6;
  WebCore::ThreadGlobalData *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::ThreadGlobalData *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ThreadGlobalData *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  WebCore::Page *v28;
  WebCore::Node *v29;
  uint64_t v30;
  WebCore::ThreadGlobalData *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::ThreadGlobalData *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char v37;
  void *v38;
  uint64_t v39;
  WebCore::ThreadGlobalData *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::ThreadGlobalData *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::ThreadGlobalData *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::ThreadGlobalData *v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::ThreadGlobalData *v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  unsigned __int8 **v59;
  int v60;
  void *v61;
  char v62;
  uint64_t v63;
  WebCore::Node *v64;
  int *v65;

  if (!*((_BYTE *)result + 137))
    return result;
  v2 = (_BYTE *)WebKit::g_currentEvent;
  if (!WebKit::g_currentEvent)
    return result;
  v4 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 736);
  if (!v6 || (v7 = *(WebCore::ThreadGlobalData **)(v6 + 96)) == 0)
  {
    result = (WebCore *)WebCore::threadGlobalDataSlow(result);
    v7 = result;
  }
  v8 = *((_QWORD *)v7 + 5);
  if (!v8)
  {
    result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v7);
    v8 = *((_QWORD *)v7 + 5);
  }
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v8 + 1232) || (v9 = *v2, v9 != 2))
  {
    v10 = *(_QWORD *)(StatusReg + 736);
    if (!v10 || (v11 = *(WebCore::ThreadGlobalData **)(v10 + 96)) == 0)
    {
      result = (WebCore *)WebCore::threadGlobalDataSlow(result);
      v11 = result;
    }
    v12 = *((_QWORD *)v11 + 5);
    if (!v12)
    {
      result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v11);
      v12 = *((_QWORD *)v11 + 5);
    }
    if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v12 + 1208) || (v9 = *v2, *v2))
    {
      v13 = *(_QWORD *)(StatusReg + 736);
      if (!v13 || (v14 = *(WebCore::ThreadGlobalData **)(v13 + 96)) == 0)
      {
        result = (WebCore *)WebCore::threadGlobalDataSlow(result);
        v14 = result;
      }
      v15 = *((_QWORD *)v14 + 5);
      if (!v15)
      {
        result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v14);
        v15 = *((_QWORD *)v14 + 5);
      }
      if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v15 + 1256) || (v9 = *v2, v9 != 1))
      {
        v30 = *(_QWORD *)(StatusReg + 736);
        if (!v30 || (v31 = *(WebCore::ThreadGlobalData **)(v30 + 96)) == 0)
        {
          result = (WebCore *)WebCore::threadGlobalDataSlow(result);
          v31 = result;
        }
        v32 = *((_QWORD *)v31 + 5);
        if (!v32)
        {
          result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v31);
          v32 = *((_QWORD *)v31 + 5);
        }
        if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v32 + 2512))
        {
          v33 = *(_QWORD *)(StatusReg + 736);
          if (!v33 || (v34 = *(WebCore::ThreadGlobalData **)(v33 + 96)) == 0)
          {
            result = (WebCore *)WebCore::threadGlobalDataSlow(result);
            v34 = result;
          }
          v35 = *((_QWORD *)v34 + 5);
          if (!v35)
          {
            result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v34);
            v35 = *((_QWORD *)v34 + 5);
          }
          if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v35 + 1264))
            goto LABEL_56;
        }
        if (*v2 == 6)
        {
          v36 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v36 + 9);
          v37 = (*((uint64_t (**)(unsigned __int8 **, _BYTE *))*v36 + 129))(v36, v2);
        }
        else
        {
LABEL_56:
          v39 = *(_QWORD *)(StatusReg + 736);
          if (!v39 || (v40 = *(WebCore::ThreadGlobalData **)(v39 + 96)) == 0)
          {
            result = (WebCore *)WebCore::threadGlobalDataSlow(result);
            v40 = result;
          }
          v41 = *((_QWORD *)v40 + 5);
          if (!v41)
          {
            result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v40);
            v41 = *((_QWORD *)v40 + 5);
          }
          if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(v41 + 1248) && *v2 == 2)
          {
            v36 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v36 + 9);
            v37 = (*((uint64_t (**)(unsigned __int8 **, _BYTE *))*v36 + 130))(v36, v2);
          }
          else
          {
            v42 = *(_QWORD *)(StatusReg + 736);
            if (!v42 || (v43 = *(WebCore::ThreadGlobalData **)(v42 + 96)) == 0)
            {
              result = (WebCore *)WebCore::threadGlobalDataSlow(result);
              v43 = result;
            }
            v44 = *((_QWORD *)v43 + 5);
            if (!v44)
            {
              result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v43);
              v44 = *((_QWORD *)v43 + 5);
            }
            if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(v44 + 1240) && *v2 == 2)
            {
              v36 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
              WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v36 + 9);
              v37 = (*((uint64_t (**)(unsigned __int8 **, _BYTE *))*v36 + 131))(v36, v2);
            }
            else
            {
              v45 = *(_QWORD *)(StatusReg + 736);
              if (!v45 || (v46 = *(WebCore::ThreadGlobalData **)(v45 + 96)) == 0)
              {
                result = (WebCore *)WebCore::threadGlobalDataSlow(result);
                v46 = result;
              }
              v47 = *((_QWORD *)v46 + 5);
              if (!v47)
              {
                result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v46);
                v47 = *((_QWORD *)v46 + 5);
              }
              if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(v47 + 496) && !*v2)
              {
                v36 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
                WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v36 + 9);
                v37 = (*((uint64_t (**)(unsigned __int8 **, _BYTE *))*v36 + 132))(v36, v2);
              }
              else
              {
                v48 = *(_QWORD *)(StatusReg + 736);
                if (!v48 || (v49 = *(WebCore::ThreadGlobalData **)(v48 + 96)) == 0)
                {
                  result = (WebCore *)WebCore::threadGlobalDataSlow(result);
                  v49 = result;
                }
                v50 = *((_QWORD *)v49 + 5);
                if (!v50)
                {
                  result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v49);
                  v50 = *((_QWORD *)v49 + 5);
                }
                if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v50 + 1048) || *v2 != 7)
                {
                  v51 = *(_QWORD *)(StatusReg + 736);
                  if (!v51 || (v52 = *(WebCore::ThreadGlobalData **)(v51 + 96)) == 0)
                  {
                    result = (WebCore *)WebCore::threadGlobalDataSlow(result);
                    v52 = result;
                  }
                  v53 = *((_QWORD *)v52 + 5);
                  if (!v53)
                  {
                    result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v52);
                    v53 = *((_QWORD *)v52 + 5);
                  }
                  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(v53 + 1072) || *v2 != 8)
                    return result;
                }
                v36 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
                WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v36 + 9);
                v37 = (*((uint64_t (**)(unsigned __int8 **, _BYTE *))*v36 + 133))(v36, v2);
              }
            }
          }
        }
        v62 = v37;
        result = (WebCore *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v36[9], v38);
        if ((v62 & 1) == 0)
          return result;
LABEL_110:
        *(_DWORD *)(a2 + 20) |= 0x80u;
        return result;
      }
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 40) + 8) + 528);
  if (!v16)
  {
    v17 = 0;
    goto LABEL_116;
  }
  v17 = *(unsigned int **)(v16 + 8);
  if (!v17)
  {
LABEL_116:
    v20 = 1;
    goto LABEL_29;
  }
  v18 = v17 + 2;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = 0;
  v9 = *v2;
LABEL_29:
  if (v9 == 1)
  {
    WebCore::LocalFrame::checkedEventHandler((WebCore::LocalFrame *)v17);
    WebCore::EventHandler::setCapturingMouseEventsElement();
    v64 = 0;
    v54 = v65;
    v65 = 0;
    if (!v54)
      goto LABEL_108;
    v55 = *v54;
    if (!*v54)
    {
      __break(0xC471u);
      JUMPOUT(0x1975F1260);
    }
    goto LABEL_107;
  }
  if (v9)
    goto LABEL_108;
  v21 = *((_QWORD *)v4 + 8);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8) + 528);
  if (!v22)
  {
    v23 = 0;
    goto LABEL_118;
  }
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23)
  {
LABEL_118:
    v26 = 1;
    goto LABEL_36;
  }
  v24 = (unsigned int *)(v23 + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v26 = 0;
  v21 = *((_QWORD *)v4 + 8);
LABEL_36:
  *(_DWORD *)(v21 + 24) += 2;
  v65 = (int *)v21;
  v27 = *(_QWORD *)(v23 + 24);
  if (v27 && (v28 = *(WebCore::Page **)(v27 + 8)) != 0)
  {
    ++*(_DWORD *)v28;
    WebCore::Page::checkedFocusController(v28);
    WORD2(v63) = 0;
    LODWORD(v63) = 0;
    WebCore::FocusController::setFocusedElement();
    v29 = v64;
    v64 = 0;
    if (v29)
    {
      if (!*(_DWORD *)v29)
      {
        __break(0xC471u);
        JUMPOUT(0x1975F14C0);
      }
      --*(_DWORD *)v29;
    }
    WTF::RefCounted<WebCore::Page>::deref(v28);
  }
  else
  {
    v56 = *(_QWORD *)(v23 + 296);
    if (v56)
    {
      *(_DWORD *)(v56 + 24) += 2;
      WebCore::Document::setFocusedElement((WebCore::Document *)v56, (WebCore::Element *)v21);
      if (*(_DWORD *)(v56 + 24) == 2)
      {
        if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v56);
      }
      else
      {
        *(_DWORD *)(v56 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::setFocusedElement(0, (WebCore::Element *)v21);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v65);
  if ((v26 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
  WebCore::LocalFrame::checkedEventHandler((WebCore::LocalFrame *)v17);
  v57 = (WebCore::Node *)*((_QWORD *)v4 + 8);
  *((_DWORD *)v57 + 6) += 2;
  v63 = 0;
  v64 = v57;
  WebCore::EventHandler::setCapturingMouseEventsElement();
  v58 = v64;
  v64 = 0;
  if (v58)
  {
    if (*((_DWORD *)v58 + 6) == 2)
    {
      if ((*((_WORD *)v58 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v58);
    }
    else
    {
      *((_DWORD *)v58 + 6) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v63);
  v54 = v65;
  v65 = 0;
  if (v54)
  {
    v55 = *v54;
    if (!*v54)
    {
      __break(0xC471u);
      JUMPOUT(0x1975F14E0);
    }
LABEL_107:
    *v54 = v55 - 1;
  }
LABEL_108:
  v59 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v59 + 9);
  v60 = (*((uint64_t (**)(unsigned __int8 **, _BYTE *))*v59 + 128))(v59, v2);
  result = (WebCore *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v59[9], v61);
  if ((v20 & 1) == 0)
  {
    result = (WebCore *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17 + 2);
    if ((v60 & 1) == 0)
      return result;
    goto LABEL_110;
  }
  if (v60)
    goto LABEL_110;
  return result;
}

uint64_t WebKit::PluginView::handleEditingCommand(WebKit::PluginView *this, const WTF::String *a2, const WTF::String *a3)
{
  unsigned __int8 **v5;
  uint64_t v6;
  void *v7;

  if (!*((_BYTE *)this + 137))
    return 0;
  v5 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v5 + 9);
  v6 = (*((uint64_t (**)(unsigned __int8 **, const WTF::String *, const WTF::String *))*v5 + 134))(v5, a2, a3);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5[9], v7);
  return v6;
}

uint64_t WebKit::PluginView::isEditingCommandEnabled(WebKit::PluginView *this, const WTF::String *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  void *v5;

  if (!*((_BYTE *)this + 137))
    return 0;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
  v4 = (*((uint64_t (**)(unsigned __int8 **, const WTF::String *))*v3 + 135))(v3, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v5);
  return v4;
}

uint64_t WebKit::PluginView::shouldAllowNavigationFromDrags(WebKit::PluginView *this)
{
  return 1;
}

unsigned __int8 *WebKit::PluginView::willDetachRenderer(unsigned __int8 *this)
{
  unsigned __int8 **v1;
  void *v2;

  if (this[137])
  {
    v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
    (*((void (**)(unsigned __int8 **))*v1 + 112))(v1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v2);
  }
  return this;
}

uint64_t WebKit::PluginView::scrollableArea(WebKit::PluginView *this)
{
  if (*((_BYTE *)this + 137))
    return *((_QWORD *)this + 9);
  else
    return 0;
}

uint64_t WebKit::PluginView::usesAsyncScrolling(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 83))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

uint64_t WebKit::PluginView::scrollingNodeID(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  uint64_t v2;
  void *v3;

  if (!*((_BYTE *)this + 137))
    return 0;
  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  v2 = (*((uint64_t (**)(unsigned __int8 **))*v1 + 37))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v3);
  return v2;
}

unsigned __int8 *WebKit::PluginView::willAttachScrollingNode(unsigned __int8 *this)
{
  unsigned __int8 **v1;
  void *v2;

  if (this[137])
  {
    v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
    (*((void (**)(unsigned __int8 **))*v1 + 150))(v1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v2);
  }
  return this;
}

unsigned __int8 *WebKit::PluginView::didAttachScrollingNode(unsigned __int8 *this)
{
  unsigned __int8 **v1;
  void *v2;

  if (this[137])
  {
    v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
    (*((void (**)(unsigned __int8 **))*v1 + 151))(v1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v2);
  }
  return this;
}

unsigned __int8 *WebKit::PluginView::liveResourceData@<X0>(unsigned __int8 *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned __int8 **v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;

  if (this[137])
  {
    v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
    (*((void (**)(unsigned __int8 **))*v3 + 126))(v3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v4);
  }
  else if (*((_DWORD *)this + 48) == 2)
  {
    v5 = (unsigned int *)*((_QWORD *)this + 57);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    *a2 = v5;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::PluginView::performDictionaryLookupAtLocation(WebKit::PluginView *this, const WebCore::FloatPoint *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  void *v5;

  if (!*((_BYTE *)this + 137))
    return 0;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
  v4 = (*((uint64_t (**)(unsigned __int8 **, const WebCore::FloatPoint *))*v3 + 145))(v3, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v5);
  return v4;
}

uint64_t WebKit::PluginView::notifyWidget(uint64_t result, void *a2)
{
  uint64_t v2;
  WebCore::LocalFrameView *v3;
  int v4;
  unsigned __int8 **v5;
  int v6;
  void *v7;
  unsigned __int8 **v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;

  v2 = result;
  if ((_DWORD)a2 == 1)
  {
    result = *(_QWORD *)(result + 464);
    *(_QWORD *)(v2 + 464) = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, a2);
  }
  else if (!(_DWORD)a2 && *(_BYTE *)(result + 137))
  {
    v3 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 64) + 40)
                                                                         + 8)
                                                             + 528)
                                                 + 8)
                                     + 288);
    if (v3)
    {
      ++*((_DWORD *)v3 + 2);
      result = WebCore::LocalFrameView::paintBehavior(v3);
      v4 = *((_DWORD *)v3 + 2) - 1;
      if ((result & 0x85) != 0)
      {
        if (*((_DWORD *)v3 + 2) == 1)
          return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
        *((_DWORD *)v3 + 2) = v4;
        return result;
      }
      if (*((_DWORD *)v3 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
      else
        *((_DWORD *)v3 + 2) = v4;
    }
    v5 = *(unsigned __int8 ***)(v2 + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v5 + 9);
    v6 = (*((uint64_t (**)(unsigned __int8 **))*v5 + 114))(v5);
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5[9], v7);
    if (v6)
    {
      v8 = *(unsigned __int8 ***)(v2 + 72);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v8 + 9);
      (*((void (**)(WTF **__return_ptr, unsigned __int8 **))*v8 + 115))(&v13, v8);
      v10 = v13;
      v13 = 0;
      v11 = *(_QWORD *)(v2 + 464);
      *(_QWORD *)(v2 + 464) = v10;
      if (v11)
      {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v11, v9);
        v12 = v13;
        v13 = 0;
        if (v12)
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v12, v9);
      }
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v8[9], v9);
    }
  }
  return result;
}

uint64_t WebKit::PluginView::show(WebKit::PluginView *this)
{
  int v2;

  if (!*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 1;
LABEL_5:
    WebKit::PluginView::viewVisibilityDidChange((unsigned __int8 *)this);
    return WebCore::Widget::show(this);
  }
  v2 = *((unsigned __int8 *)this + 25);
  *((_BYTE *)this + 24) = 1;
  if (!v2)
    goto LABEL_5;
  return WebCore::Widget::show(this);
}

uint64_t WebKit::PluginView::hide(WebKit::PluginView *this)
{
  int v2;

  if (*((_BYTE *)this + 24))
  {
    v2 = *((unsigned __int8 *)this + 25);
    *((_BYTE *)this + 24) = 0;
    if (v2)
      WebKit::PluginView::viewVisibilityDidChange((unsigned __int8 *)this);
  }
  else
  {
    *((_BYTE *)this + 24) = 0;
  }
  return WebCore::Widget::hide(this);
}

unsigned __int8 *WebKit::PluginView::setParentVisible(unsigned __int8 *this, int a2)
{
  if ((this[25] != 0) != a2)
  {
    this[25] = a2;
    return WebKit::PluginView::viewVisibilityDidChange(this);
  }
  return this;
}

uint64_t WebKit::PluginView::transformsAffectFrameRect(WebKit::PluginView *this)
{
  return 0;
}

uint64_t WebKit::PluginView::invalidateRect(WebKit::PluginView *this, const WebCore::IntRect *a2)
{
  uint64_t result;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  float v14;
  float v15;
  float v16;
  double v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  double v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  float v27;
  int v28;
  float v29;
  float v30;
  double v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int v39;
  int8x16_t v40;

  result = WebCore::Widget::parent(this);
  if (result)
  {
    if (*((_BYTE *)this + 137))
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 904))(*((_QWORD *)this + 9));
      if ((result & 1) == 0)
      {
        v5 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) & 0xFFFFFFFFFFFFLL);
        if (v5)
        {
          if ((*((_BYTE *)v5 + 45) & 2) != 0)
          {
            __break(0xC471u);
            goto LABEL_66;
          }
          if (*((_BYTE *)v5 + 46) != 7)
            return result;
          ++v5[4];
          v6 = *(_DWORD *)a2;
          v7 = *((_DWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 1);
          v9 = WebCore::BorderData::borderLeftWidth((WebCore::BorderData *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 24)
                                                                          + 104))
             * 64.0;
          if (v9 >= 2147483650.0)
          {
            v10 = 0x7FFFFFFF;
          }
          else if (v9 <= -2147483650.0)
          {
            v10 = 0x80000000;
          }
          else
          {
            v10 = (int)v9;
          }
          v11 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
          v12 = v11[100];
          if ((v12 & 0xFFFFFFF7) == 3)
          {
            v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 1144))(v5);
            v12 = v11[100];
            v14 = (float)v13 * 0.015625;
          }
          else
          {
            v14 = 0.0;
          }
          switch(v12)
          {
            case 3:
              v16 = *((float *)v11 + 24);
              if (!v11[102])
                v16 = (float)*((int *)v11 + 24);
              v15 = (float)(v14 * v16) / 100.0;
              break;
            case 11:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 96), v14);
              break;
            case 4:
              v15 = *((float *)v11 + 24);
              if (!v11[102])
                v15 = (float)SLODWORD(v15);
              break;
            default:
              v18 = 0;
              goto LABEL_31;
          }
          v17 = v15 * 64.0;
          if (v17 >= 2147483650.0)
          {
            v18 = 0x7FFFFFFF;
          }
          else if (v17 <= -2147483650.0)
          {
            v18 = 0x80000000;
          }
          else
          {
            v18 = (int)v17;
          }
LABEL_31:
          v19 = __OFADD__(v10, v18);
          v20 = v10 + v18;
          v21 = 0x7FFFFFFF;
          if (v19)
            v20 = (v10 >> 31) + 0x7FFFFFFF;
          if (v20 >= 0)
            v22 = v20;
          else
            v22 = v20 + 63;
          v23 = WebCore::BorderData::borderTopWidth((WebCore::BorderData *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 24)
                                                                          + 104))
              * 64.0;
          if (v23 < 2147483650.0)
          {
            if (v23 <= -2147483650.0)
              v21 = 0x80000000;
            else
              v21 = (int)v23;
          }
          v24 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
          v25 = v24[76];
          if ((v25 & 0xFFFFFFF7) == 3)
          {
            v26 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 1144))(v5);
            v25 = v24[76];
            v27 = (float)v26 * 0.015625;
          }
          else
          {
            v27 = 0.0;
          }
          v28 = v22 >> 6;
          switch(v25)
          {
            case 3:
              v30 = *((float *)v24 + 18);
              if (!v24[78])
                v30 = (float)*((int *)v24 + 18);
              v29 = (float)(v27 * v30) / 100.0;
              break;
            case 11:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v24 + 72), v27);
              break;
            case 4:
              v29 = *((float *)v24 + 18);
              if (!v24[78])
                v29 = (float)SLODWORD(v29);
              break;
            default:
              v32 = 0;
              goto LABEL_59;
          }
          v31 = v29 * 64.0;
          if (v31 >= 2147483650.0)
          {
            v32 = 0x7FFFFFFF;
          }
          else if (v31 <= -2147483650.0)
          {
            v32 = 0x80000000;
          }
          else
          {
            v32 = (int)v31;
          }
LABEL_59:
          v19 = __OFADD__(v21, v32);
          v33 = v21 + v32;
          if (v19)
            v33 = (v21 >> 31) + 0x7FFFFFFF;
          v34.i32[0] = v28 + v6;
          v34.i32[1] = v7 + v33 / 64;
          v34.i64[1] = v8;
          v35.i64[0] = 0xFE000000FE000000;
          v35.i64[1] = 0xFE000000FE000000;
          v36 = (int8x16_t)vcgtq_s32(v34, v35);
          v37.i64[0] = 0xFE000000FE000000;
          v37.i64[1] = 0xFE000000FE000000;
          v38.i64[0] = 0x8000000080000000;
          v38.i64[1] = 0x8000000080000000;
          v40 = vorrq_s8((int8x16_t)(*(_OWORD *)&v36 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v37, v34), v38, (int8x16_t)vshlq_n_s32(v34, 6uLL)), v36));
          result = WebCore::RenderObject::repaintRectangle((WebCore::RenderObject *)v5, (const WebCore::LayoutRect *)&v40);
          v39 = v5[4];
          if (v39)
          {
            v5[4] = v39 - 1;
            return result;
          }
          __break(0xC471u);
LABEL_66:
          JUMPOUT(0x1975F1E58);
        }
      }
    }
  }
  return result;
}

unsigned __int8 *WebKit::PluginView::releaseMemory(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  void *v2;

  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(unsigned __int8 **))*v1 + 149))(v1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v2);
}

float WebKit::PluginView::pdfDocumentSizeForPrinting(WebKit::PluginView *this)
{
  uint64_t v1;
  void *v2;
  float v3;

  v1 = *((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v1 + 72));
  v3 = WebKit::PDFPluginBase::pdfDocumentSizeForPrinting((id *)v1);
  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v1 + 72), v2);
  return v3;
}

uint64_t WebKit::PluginView::accessibilityHitTest(WebKit::PluginView *this, const WebCore::IntPoint *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  void *v5;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
  v4 = (*((uint64_t (**)(unsigned __int8 **, const WebCore::IntPoint *))*v3 + 147))(v3, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v5);
  return v4;
}

unsigned __int8 *WebKit::PluginView::windowActivityDidChange(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  void *v2;

  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(unsigned __int8 **))*v1 + 160))(v1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v2);
}

unsigned __int8 *WebKit::PluginView::didSameDocumentNavigationForFrame(unsigned __int8 *this, WebKit::WebFrame *a2)
{
  unsigned __int8 **v3;
  void *v4;

  if (this[137])
  {
    v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
    (*((void (**)(unsigned __int8 **, WebKit::WebFrame *))*v3 + 161))(v3, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v4);
  }
  return this;
}

uint64_t WebKit::PluginView::sendEditingCommandToPDFForTesting(WebKit::PluginView *this, const WTF::String *a2, const WTF::String *a3)
{
  unsigned __int8 **v5;
  uint64_t v6;
  void *v7;

  v5 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v5 + 9);
  v6 = (*((uint64_t (**)(unsigned __int8 **, const WTF::String *, const WTF::String *))*v5 + 134))(v5, a2, a3);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5[9], v7);
  return v6;
}

unsigned __int8 *WebKit::PluginView::setPDFDisplayModeForTesting(WebKit::PluginView *this, const WTF::String *a2)
{
  unsigned __int8 **v3;
  void *v4;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 9);
  (*((void (**)(unsigned __int8 **, const WTF::String *))*v3 + 158))(v3, a2);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3[9], v4);
}

unsigned __int8 *WebKit::PluginView::pdfAnnotationRectsForTesting(WebKit::PluginView *this)
{
  unsigned __int8 **v1;
  void *v2;

  v1 = (unsigned __int8 **)*((_QWORD *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(unsigned __int8 **))*v1 + 157))(v1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v1[9], v2);
}

unsigned __int8 *WebKit::PluginView::registerPDFTestCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  void *v5;

  v3 = *(_QWORD *)(a1 + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 72));
  result = (unsigned __int8 *)WebKit::PDFPluginBase::registerPDFTest(v3, a2);
  if (v3)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 72), v5);
  return result;
}

WTF::StringImpl *WebKit::WebPluginInfoProvider::pluginInfo@<X0>(uint64_t a1@<X1>, WTF::StringImpl *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 112);
  return WebKit::pluginInfoVector(a2, *(WebCore::Page **)(v3 + 664), *(_QWORD *)(v3 + 672), *(_QWORD *)(v3 + 680), *(_QWORD *)(v3 + 688), *(_QWORD *)(v3 + 696), *(_QWORD *)(v3 + 704), *(_QWORD *)(v3 + 712), *(_DWORD *)(v3 + 720));
}

WTF::StringImpl *WebKit::pluginInfoVector(WTF::StringImpl *this, WebCore::Page *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;

  v9 = (uint64_t *)this;
  v20 = *MEMORY[0x1E0C80C00];
  if (a8 & 0x8000000000000 | a9 & 0x20000000)
  {
    WebKit::PDFPluginBase::pluginInfo((uint64_t)&v15);
    WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9, (uint64_t)&v15, 1uLL);
    v11 = v19;
    v19 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v10);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    this = v15;
    v15 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

WTF::StringImpl *WebKit::WebPluginInfoProvider::webVisiblePluginInfo@<X0>(WebCore::Page *a1@<X1>, WTF::StringImpl *a2@<X8>)
{
  uint64_t v5;

  v5 = *((_QWORD *)a1 + 14);
  return WebKit::pluginInfoVector(a2, *(WebCore::Page **)(v5 + 664), *(_QWORD *)(v5 + 672), *(_QWORD *)(v5 + 680), *(_QWORD *)(v5 + 688), *(_QWORD *)(v5 + 696), *(_QWORD *)(v5 + 704), *(_QWORD *)(v5 + 712), *(_DWORD *)(v5 + 720));
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::SpeechRecognitionRealtimeMediaSourceManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebKit::WebProcess *v4;
  WebKit::WebProcess *v6;
  unsigned int *v7;
  char v8;

  *(_QWORD *)a1 = off_1E34EC4E0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1E34EC528;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v8 = -117;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)v4 + 5, &v8, a1, &v7);
  return a1;
}

void WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  const char ***v4;
  const char ***v5;
  const char ***v6;
  uint64_t v7;
  void *v8;
  WebKit::WebProcess *v9;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::WebProcess *)((char *)v2 + 40), this);
  v4 = (const char ***)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v4);
  v5 = (const char ***)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v5);
  v6 = (const char ***)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v7, v3);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v8);
}

{
  WTF *v1;
  void *v2;

  WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager((WebKit::SpeechRecognitionRealtimeMediaSourceManager *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager((WebKit::SpeechRecognitionRealtimeMediaSourceManager *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::createSource(uint64_t a1, uint64_t a2)
{
  WebCore::RealtimeMediaSourceObserver *v4;
  uint64_t v5;
  IPC::Encoder *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  WebCore::RealtimeMediaSource *v33;
  WTF::StringImpl *v34;
  uint8_t buf[8];

  WebCore::SpeechRecognitionCaptureSource::createRealtimeMediaSource();
  if (v33)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)buf, *(unsigned __int8 ***)(a1 + 24));
    v4 = (WebCore::RealtimeMediaSourceObserver *)WTF::fastMalloc((WTF *)0x98);
    v5 = WebCore::RealtimeMediaSourceObserver::RealtimeMediaSourceObserver(v4);
    *(_DWORD *)(v5 + 24) = 0;
    *(_QWORD *)v5 = off_1E34ECAB0;
    *(_QWORD *)(v5 + 16) = &unk_1E34ECB38;
    *(_QWORD *)(v5 + 32) = a2;
    *(_QWORD *)(v5 + 40) = v33;
    v6 = *(IPC::Encoder **)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)(v5 + 48) = v6;
    *(_QWORD *)(v5 + 56) = 0;
    *(_BYTE *)(v5 + 64) = 0;
    *(_BYTE *)(v5 + 144) = 0;
    WebCore::RealtimeMediaSource::addObserver(v33, v4);
    WebCore::RealtimeMediaSource::addAudioSampleObserver();
    v9 = *(_QWORD *)(a1 + 32);
    v8 = (uint64_t *)(a1 + 32);
    v7 = v9;
    if (v9
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v8, 0), (v7 = *v8) != 0))
    {
      v10 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = (uint64_t *)(v7 + 16 * v14);
    v16 = *v15;
    if (*v15)
    {
      v17 = 0;
      v18 = 1;
      do
      {
        if (v16 == a2)
        {
          (*(void (**)(WebCore::RealtimeMediaSourceObserver *))(*(_QWORD *)v4 + 8))(v4);
          goto LABEL_29;
        }
        if (v16 == -1)
          v17 = v15;
        v14 = (v14 + v18) & v10;
        v15 = (uint64_t *)(v7 + 16 * v14);
        v16 = *v15;
        ++v18;
      }
      while (*v15);
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v15 = v17;
      }
    }
    v19 = v15[1];
    *v15 = a2;
    v15[1] = (uint64_t)v4;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *v8;
    if (*v8)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v28 = *v8;
    if (*v8)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_29;
    }
    else if (3 * v31 > 4 * v30)
    {
LABEL_29:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
      goto LABEL_30;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v8, v15);
    goto LABEL_29;
  }
  v22 = qword_1ECE71348;
  if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_196BCC000, v22, OS_LOG_TYPE_ERROR, "Failed to create realtime source", buf, 2u);
  }
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 1452;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  *(_QWORD *)buf = v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, uint8_t *, _QWORD))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16, buf, 0);
  v25 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v24);
    WTF::fastFree(v26, v27);
  }
LABEL_30:
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v34 -= 2;
  }
  return 0;
}

uint64_t *WebKit::SpeechRecognitionRealtimeMediaSourceManager::deleteSource(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 32);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v7);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::start(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v3);
  if (result)
    return WebCore::RealtimeMediaSource::start(*(WebCore::RealtimeMediaSource **)(result + 40));
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::stop(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v3);
  if (result)
    return WebCore::RealtimeMediaSource::stop(*(WebCore::RealtimeMediaSource **)(result + 40));
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return 0;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  _DWORD *v7;
  NSObject *v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &unk_1E34EC578;
  *(_QWORD *)(a1 + 8) = a2;
  v7 = *a4;
  if (*a4)
    *v7 += 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v8 = qword_1ECE71B68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134218240;
    v11 = a2;
    v12 = 2048;
    v13 = a3;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient webPageProxyID %llu, pageID %llu", (uint8_t *)&v10, 0x16u);
  }
  return a1;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::createDocumentLoader@<X0>(const WebCore::ResourceRequest *a1@<X1>, const WebCore::SubstituteData *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = WTF::fastMalloc((WTF *)0xDF0);
  result = MEMORY[0x19AEADFD8](v7, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::NetscapePlugInStreamLoaderClient::wantsAllStreams(WebCore::NetscapePlugInStreamLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::Widget::isLocalFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isRemoteFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::isPluginViewBase(WebCore::PluginViewBase *this)
{
  return 1;
}

uint64_t WebCore::Widget::isScrollbar(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isScrollView(WebCore::Widget *this)
{
  return 0;
}

void WebKit::WebPluginInfoProvider::~WebPluginInfoProvider(WebKit::WebPluginInfoProvider *this)
{
  WTF *v1;
  void *v2;

  WebCore::PluginInfoProvider::~PluginInfoProvider(this);
  WTF::fastFree(v1, v2);
}

void WebKit::RemoteWorkerFrameLoaderClient::~RemoteWorkerFrameLoaderClient(WebKit::RemoteWorkerFrameLoaderClient *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::shouldUseCredentialStorage()
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::hasCustomUserAgent(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::userAgent@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)(this + 16);
  if (v3)
    *v3 += 2;
  *a2 = v3;
  return this;
}

void WebCore::LocalFrameLoaderClient::overrideContentSecurityPolicy(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::dataDetectionReferenceDate(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldLoadMediaElementURL(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::allowScript(WebCore::LocalFrameLoaderClient *this, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldPaintBrokenImage(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 1;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebKit::RemoteWorkerFrameLoaderClient *this)
{
  return 1;
}

void WebCore::LocalFrameLoaderClient::loadedSubresourceDomains(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebCore::LocalFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldUsePDFPlugin()
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 32;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v4 - 32));
      if ((v5 & 1) == 0)
      {
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v6 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E34ECA90[v6])(&v8, v4 - 32);
        *(_DWORD *)(v4 - 8) = -1;
      }
      v4 += 48;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::NotificationPermissionRequestManager *WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(WebKit::NotificationPermissionRequestManager *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::NotificationPermissionRequestManager::~NotificationPermissionRequestManager(result, a2);
    return (WebKit::NotificationPermissionRequestManager *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  const void *v2;
  WTF *v3;
  void *v4;

  v2 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  return WTF::fastFree(v3, v4);
}

IPC::Encoder *WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::sourceStopped(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *v4;
  __int16 v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(*((_QWORD *)this + 5) + 293))
  {
    v3 = WTF::fastMalloc((WTF *)0x240);
    v4 = (IPC::Encoder *)v3;
    v5 = 1452;
  }
  else
  {
    v3 = WTF::fastMalloc((WTF *)0x240);
    v4 = (IPC::Encoder *)v3;
    v5 = 1453;
  }
  *(_WORD *)v3 = v5;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v11 = v4;
  v6 = *((_QWORD *)this + 4);
  *(_QWORD *)IPC::Encoder::grow(v4, 8uLL, 8) = v6;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioUnitWillStart(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  uint64_t v1;
  WebCore::AudioSession *v2;
  float v3;
  float v4;
  uint64_t v5;
  WebCore::AudioSession *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = WebCore::AudioSession::sharedSession(this);
  v2 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  v4 = v3 / 50.0;
  v5 = WebCore::AudioSession::sharedSession(v2);
  v6 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  if (v4 < (float)(unint64_t)v6)
  {
    v7 = WebCore::AudioSession::sharedSession(v6);
    v6 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 112))(v7, (unint64_t)v4);
  }
  v8 = WebCore::AudioSession::sharedSession(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 5, 0, 0);
}

uint64_t WebCore::RealtimeMediaSourceObserver::preventSourceFromEnding(WebCore::RealtimeMediaSourceObserver *this)
{
  return 0;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCount(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCountWithoutThreadCheck(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 24) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioSamplesAvailable(uint64_t a1, _QWORD *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  WebCore::CAAudioStreamDescription *v10;
  uint64_t v11;
  double v12;
  const WebCore::CAAudioStreamDescription *v13;
  const AudioStreamBasicDescription *v14;
  WebCore::CARingBuffer *v15;
  WebCore::CARingBuffer *v16;
  WebCore::CARingBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WebCore::CARingBuffer *v26;
  WebCore::CARingBuffer *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *v35;
  WebCore::CARingBuffer *v36;
  _BYTE v37[24];
  IPC::Encoder *v38[10];
  _QWORD v39[2];
  __int128 v40;
  char v41;
  IPC::Encoder *v42;

  v10 = (WebCore::CAAudioStreamDescription *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 144) || (WebCore::CAAudioStreamDescription::operator==() & 1) == 0)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if (*(_DWORD *)(v11 + 16) != 1)
    {
      v35 = (WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)std::__throw_bad_variant_access[abi:sn180100]();
      return;
    }
    std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(v10, *(const AudioStreamBasicDescription **)(v11 + 8));
    if (!*(_BYTE *)(a1 + 144) || (WebCore::CAAudioStreamDescription::sampleRate(v10), !*(_BYTE *)(a1 + 144)))
    {
      __break(1u);
      goto LABEL_19;
    }
    v13 = (const WebCore::CAAudioStreamDescription *)(v12 + v12);
    v14 = (const AudioStreamBasicDescription *)WebCore::CAAudioStreamDescription::streamDescription(v10);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38, v14);
    WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)v38, v13, (uint64_t)v39);
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38);
    if (!v41)
    {
      __break(0xC471u);
      JUMPOUT(0x1975F3148);
    }
    v15 = (WebCore::CARingBuffer *)v39[0];
    v39[0] = 0;
    v36 = v15;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v37[8] = v40;
    v16 = *(WebCore::CARingBuffer **)(a1 + 56);
    v17 = v36;
    v36 = 0;
    *(_QWORD *)(a1 + 56) = v17;
    if (v16)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 56, v16);
    v18 = *(_QWORD *)(a1 + 48);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38, v14);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 1454;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v42 = (IPC::Encoder *)v19;
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v19, 8uLL, 8) = v20;
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode((IPC::Encoder *)v19, (unint64_t)v37);
    v21 = (_QWORD *)WebCore::CAAudioStreamDescription::streamDescription((WebCore::CAAudioStreamDescription *)v38);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode((IPC::Encoder *)v19, v21);
    IPC::Connection::sendMessageImpl(v18, (uint64_t *)&v42, 0, 0);
    v23 = v42;
    v42 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v22);
      WTF::fastFree(v24, v25);
    }
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v37);
    v26 = v36;
    v36 = 0;
    if (v26)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v36, v26);
    std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39);
  }
  v27 = *(WebCore::CARingBuffer **)(a1 + 56);
  if (((unsigned int (*)(const AudioBufferList **))(*a3)->mBuffers[0].mData)(a3) != 1)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1975F3128);
  }
  WebCore::CARingBuffer::store(v27, a3[5]);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v29 = 1451;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 528) = v29 + 16;
  *(_QWORD *)(v29 + 536) = v29 + 16;
  *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v29 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
  v38[0] = (IPC::Encoder *)v29;
  v30 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = v30;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v29, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = a5;
  IPC::Connection::sendMessageImpl(v28, (uint64_t *)v38, 0, 0);
  v32 = v38[0];
  v38[0] = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
}

void `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source((WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)((char *)this - 16));
}

{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::operator delete((WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)((char *)this - 16));
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCount(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCountWithoutThreadCheck(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void `non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioSamplesAvailable(uint64_t a1, _QWORD *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioSamplesAvailable(a1 - 16, a2, a3, a4, a5);
}

void WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  WebCore::CARingBuffer *v2;
  uint64_t v3;

  WebCore::RealtimeMediaSource::removeAudioSampleObserver();
  WebCore::RealtimeMediaSource::removeObserver(*((WebCore::RealtimeMediaSource **)this + 5), this);
  if (*((_BYTE *)this + 144))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)((char *)this + 64));
  v2 = (WebCore::CARingBuffer *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 56, v2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 6);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  WebCore::RealtimeMediaSourceObserver::~RealtimeMediaSourceObserver(this);
}

double WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::operator delete(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *a1)
{
  uint64_t v1;
  void *v2;
  double result;

  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source(a1);
  if (*(_DWORD *)(v1 + 24))
  {
    *(_QWORD *)(v1 + 144) = 0;
    result = 0.0;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::setResolvedAddress(WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34ECB80;
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::setResolvedAddress(WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34ECB80;
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::setResolvedAddress(WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::call(uint64_t a1)
{
  uint64_t result;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;

  result = (uint64_t)WebKit::LibWebRTCSocketFactory::resolver((unsigned int *)&v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a1 + 16));
  v4 = (unsigned int *)v7;
  if (v7)
  {
    result = *((_QWORD *)v7 + 1);
    if (result)
      result = WebKit::LibWebRTCResolver::setResolvedAddress(result, (_DWORD *)(a1 + 24));
    v7 = 0;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      return WTF::fastFree((WTF *)v4, v3);
    }
  }
  return result;
}

unsigned int *WebKit::LibWebRTCSocketFactory::resolver(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v3 = result;
  if (!a2)
    goto LABEL_11;
  v4 = *(_DWORD *)(a2 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a2 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(a2 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_6:
  v11 = *(_QWORD *)(a2 + 16 * v8 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v12 + 16), *(_QWORD *)(v11 + 8));
      v11 = *(_QWORD *)(v12 + 16);
      if (v11)
      {
        do
          v13 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v13 + 1, (unsigned int *)v11));
      }
      goto LABEL_12;
    }
LABEL_11:
    v11 = 0;
  }
LABEL_12:
  *(_QWORD *)v3 = v11;
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::resolvedAddressError(int)::$_0,void>::call(uint64_t a1)
{
  unsigned int *result;
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  result = WebKit::LibWebRTCSocketFactory::resolver((unsigned int *)&v8, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a1 + 16));
  v4 = (unsigned int *)v8;
  if (v8)
  {
    v5 = *((_QWORD *)v8 + 1);
    if (v5)
    {
      *(_DWORD *)(v5 + 128) = *(_DWORD *)(a1 + 24);
      result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 16))(*(_QWORD *)(v5 + 120));
    }
    v8 = 0;
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      return (unsigned int *)WTF::fastFree((WTF *)v4, v3);
    }
  }
  return result;
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WebCore::SecurityOriginData::isNull(v1) & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 48);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  void *v24;
  int isNull;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  unsigned int *v38;
  char v39;
  char v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 48 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (!v5)
  {
    v12 = 0;
    if (!v4)
      return v12;
    goto LABEL_26;
  }
  v11 = 0;
  v12 = 0;
  v13 = v5;
  do
  {
    v14 = (unsigned int *)(v4 + 48 * v11);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
    if ((v15 & 1) == 0)
    {
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 48 * v11)))
      {
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 48 * v11 + 32, v16);
        v17 = v14[6];
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, uint64_t))off_1E34ECA90[v17])(&v39, v4 + 48 * v11);
        v14[6] = -1;
      }
      else
      {
        v18 = *a1;
        v38 = v12;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        v42 = -1640531527;
        v43 = 0;
        v44 = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v42, v4 + 48 * v11);
        v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
        v21 = 0;
        do
        {
          v22 = v20 & v19;
          v23 = (unsigned int *)(v18 + 48 * (v20 & v19));
          isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23);
          v20 = ++v21 + v22;
        }
        while (!isNull);
        v26 = (_QWORD *)(v18 + 48 * v22 + 32);
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v24);
        v27 = v23[6];
        if ((_DWORD)v27 != -1)
          ((void (*)(char *, uint64_t))off_1E34ECA90[v27])(&v40, v18 + 48 * v22);
        *(_BYTE *)v23 = 0;
        v23[6] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 48 * v22, v4 + 48 * v11);
        v28 = v4 + 48 * v11;
        *v26 = 0;
        *(_QWORD *)(v18 + 48 * v22 + 40) = 0;
        v29 = *(_QWORD *)(v28 + 32);
        v28 += 32;
        *(_QWORD *)v28 = 0;
        *v26 = v29;
        v30 = *(_DWORD *)(v28 + 8);
        *(_DWORD *)(v28 + 8) = 0;
        v31 = v18 + 48 * v22;
        *(_DWORD *)(v31 + 40) = v30;
        v32 = *(_DWORD *)(v28 + 12);
        *(_DWORD *)(v28 + 12) = 0;
        *(_DWORD *)(v31 + 44) = v32;
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, v33);
        v34 = v14[6];
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))off_1E34ECA90[v34])(&v41, v4 + 48 * v11);
        v14[6] = -1;
        v12 = v38;
        if (v14 == a3)
          v12 = v23;
      }
    }
    ++v11;
  }
  while (v11 != v13);
  if (v4)
LABEL_26:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestNotificationPermission,WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0>(WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::NotificationPermissionRequestManager *v5;
  char v7;

  *(_QWORD *)a1 = &off_1E34ECBD0;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34ECA90[v4])(&v7, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(WebKit::NotificationPermissionRequestManager **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestNotificationPermission,WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0>(WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::NotificationPermissionRequestManager *v5;
  char v7;

  *(_QWORD *)this = &off_1E34ECBD0;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34ECA90[v4])(&v7, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v5 = (WebKit::NotificationPermissionRequestManager *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v5, a2);
  return WTF::fastFree(this, a2);
}

WebKit::NotificationPermissionRequestManager *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestNotificationPermission,WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0>(WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  BOOL v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WebKit::WebProcess *v9;
  const char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  WebKit::NotificationPermissionRequestManager *result;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::WebProcess *v38;
  _QWORD *v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  _DWORD *v43;
  WebKit::NotificationPermissionRequestManager *v44;
  _BYTE v45[24];
  int v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    if ((_BYTE)v3)
      v4 = v3 > 0xFFu;
    else
      v4 = 0;
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_DWORD **)(a1 + 8);
  v43 = v6;
  ++*v6;
  v44 = (WebKit::NotificationPermissionRequestManager *)v6;
  v45[0] = 0;
  v46 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v45, a1 + 24);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v47 = v7;
  v8 = v43;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v38);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v41 = (WTF::StringImpl *)"WebNotificationManager";
  v42 = 23;
  v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)v9 + 34, (WTF::ASCIILiteralHash *)&v41);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v45);
  WebKit::WebNotificationManager::didUpdateNotificationDecision((uint64_t)v10, &v41, v5);
  v12 = v41;
  v41 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v15 = *((_QWORD *)v8 + 1);
  v13 = (uint64_t *)(v8 + 2);
  v14 = v15;
  if (!v15)
    goto LABEL_33;
  v16 = *(_DWORD *)(v14 - 8);
  LODWORD(v41) = -1640531527;
  WORD2(v41) = 0;
  BYTE6(v41) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v41, (uint64_t)v45);
  v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41) & v16;
  v18 = v14 + 48 * v17;
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v18) & 1) != 0)
  {
LABEL_22:
    v21 = *v13;
    if (!*v13)
    {
LABEL_33:
      v41 = 0;
      v39 = 0;
      v42 = 0;
      v40 = 0;
      WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v11);
      goto LABEL_34;
    }
    v18 = v21 + 48 * *(unsigned int *)(v21 - 4);
    goto LABEL_24;
  }
  v19 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v18);
    if ((v20 & 1) == 0 && (WebCore::operator==() & 1) != 0)
      break;
    v17 = (v17 + v19) & v16;
    v18 = v14 + 48 * v17;
    ++v19;
    if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v18))
      goto LABEL_22;
  }
  v21 = *v13;
  if (*v13)
LABEL_24:
    v21 += 48 * *(unsigned int *)(v21 - 4);
  if (v21 == v18)
    goto LABEL_33;
  v22 = *(_QWORD **)(v18 + 32);
  v39 = v22;
  v23 = *(_DWORD *)(v18 + 40);
  v24 = *(unsigned int *)(v18 + 44);
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  v40 = __PAIR64__(v24, v23);
  v25 = *v13;
  if (!*v13 || (v25 += 48 * *(unsigned int *)(v25 - 4), v25 != v18))
  {
    if (v25 != v18)
    {
      v26 = *(unsigned int *)(v18 + 24);
      if ((_DWORD)v26 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E34ECA90[v26])(&v41, v18);
      *(_QWORD *)v18 = -1;
      *(_QWORD *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 16) = 0;
      *(_DWORD *)(v18 + 24) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 32, v11);
      ++*(_DWORD *)(*v13 - 16);
      v27 = *v13;
      if (*v13)
        v28 = *(_DWORD *)(v27 - 12) - 1;
      else
        v28 = -1;
      *(_DWORD *)(v27 - 12) = v28;
      v32 = *v13;
      if (*v13)
      {
        v33 = 6 * *(_DWORD *)(v32 - 12);
        v34 = *(_DWORD *)(v32 - 4);
        if (v33 < v34 && v34 >= 9)
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v13, v34 >> 1, 0);
      }
    }
  }
  if (v5)
    v35 = 2;
  else
    v35 = 1;
  if ((_DWORD)v24)
  {
    v36 = 8 * v24;
    do
    {
      v37 = *v22;
      *v22++ = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v36 -= 8;
    }
    while (v36);
  }
LABEL_34:
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v11);
  v30 = v47;
  v47 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v46 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34ECA90[v46])(&v41, v45);
  v46 = -1;
  result = v44;
  v44 = 0;
  if (result)
    return WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(result, v29);
  return result;
}

WTF::StringImpl *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v12 = *(WTF **)(v3 + 16 * v11);
    if (v12 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return v3 + 16 * v11;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t WebKit::sendMessage(WebCore::DeprecatedGlobalSettings *a1, uint64_t a2)
{
  WebCore::SWContextManager *v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  WebKit::WebProcess *v7;
  uint64_t (*v8)(void);
  int v9;
  WebCore::SWContextManager *v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  WebKit::WebProcess *v15;
  WebKit::WebProcess *v16;
  WebKit::WebProcess *v17;
  unsigned __int8 **v18;

  v4 = (WebCore::SWContextManager *)WebCore::DeprecatedGlobalSettings::shared(a1);
  if (!*((_BYTE *)v4 + 36))
  {
    if (a1)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v10 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v4);
    v11 = WebCore::SWContextManager::connection(v10);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 168))(v11);
      v9 = 0;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::ensureNetworkProcessConnection(v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, *(unsigned __int8 ***)(v6 + 24));
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v16);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  if (*((_BYTE *)v7 + 672))
  {
    v8 = *(uint64_t (**)(void))(**(_QWORD **)a2 + 16);
  }
  else
  {
    do
    {
      __break(1u);
LABEL_18:
      v9 = 1;
LABEL_12:
      {
        v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v12 = WebKit::WebProcess::WebProcess(v17);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, *((unsigned __int8 ***)v12 + 4));
    }
    while (v9);
    v8 = *(uint64_t (**)(void))(**(_QWORD **)a2 + 16);
  }
  v13 = v8();
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  return v13;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL23sendNotificationMessageIN8Messages33NotificationManagerMessageHandler39PageWasNotifiedOfNotificationPermissionEEEbOT_PNS2_7WebPageEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESG_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  int v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v12;

  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 592;
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  v7 = IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v12, 0, 0);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v9, v10);
  }
  return v7 == 0;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL37sendNotificationMessageWithAsyncReplyIN8Messages33NotificationManagerMessageHandler16ShowNotificationEEEbOT_PNS2_7WebPageEONS_17CompletionHandlerIFvvEEEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESK_y(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  BOOL v20;
  uint64_t v22[2];
  IPC::Encoder *v23;

  v6 = *(uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 16);
  v7 = *v5;
  *v5 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ECC48;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 593;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v23 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebCore::NotificationData,void>::encode((IPC::Encoder *)v10, *v6);
  v11 = v6[1];
  v12 = *(_QWORD *)v11;
  v13 = IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1);
  if (v12)
  {
    *v13 = 1;
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>((IPC::Encoder *)v10, (WebCore::Image **)(*(_QWORD *)v11 + 8));
  }
  else
  {
    *v13 = 0;
  }
  v22[0] = (uint64_t)v8;
  v22[1] = v9;
  v15 = IPC::Connection::sendMessageWithAsyncReply(a2, &v23, v22, 0, 0);
  v16 = v22[0];
  v22[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    v20 = 1;
  else
    v20 = v9 == 0;
  return !v20;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ECC48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ECC48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  _OWORD *result;
  int v24;
  __int16 v25;
  char v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = v9 + 16;
    do
    {
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      v12 += 48;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (__int128 *)(v6 + 48 * v13);
      if (*v15 >= (unsigned __int128)2uLL)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v24 = -1640531527;
        v25 = 0;
        v26 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v24, (_QWORD *)(v6 + 48 * v13));
        v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v24);
        v19 = 0;
        do
        {
          v20 = (_OWORD *)(v16 + 48 * (v18 & v17));
          v18 = ++v19 + (v18 & v17);
        }
        while (*v20 != 0);
        v21 = *v15;
        v22 = v15[2];
        v20[1] = v15[1];
        v20[2] = v22;
        *v20 = v21;
        if (v15 == a3)
          v14 = v20;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL23sendNotificationMessageIN8Messages33NotificationManagerMessageHandler18CancelNotificationEEEbOT_PNS2_7WebPageEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESG_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  void *v7;
  int v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v5 = *(uint64_t ***)(a1 + 8);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 589;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v6, *v5);
  v8 = IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v13, 0, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8 == 0;
}

uint64_t *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = 1;
  a2[1] = 0;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL23sendNotificationMessageIN8Messages33NotificationManagerMessageHandler22DidDestroyNotificationEEEbOT_PNS2_7WebPageEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESG_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  void *v7;
  int v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v5 = *(uint64_t ***)(a1 + 8);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 591;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v6, *v5);
  v8 = IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v13, 0, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8 == 0;
}

uint64_t WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int16 v20;
  char v21;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v19 = -1640531527;
    v20 = 0;
    v21 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v19, a2);
    result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v19);
    v7 = *a2;
    v8 = a2[1];
    v9 = result & v6;
    v10 = (uint64_t *)(v4 + 48 * (result & v6));
    v11 = *v10;
    v12 = v10[1];
    if (v12 == v8 && v11 == v7)
    {
LABEL_13:
      v17 = v4 + 48 * v9;
      v18 = *(_OWORD *)(v17 + 32);
      *(_OWORD *)a3 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)(a3 + 16) = v18;
      return result;
    }
    v14 = 1;
    while (v11 | v12)
    {
      v9 = (v9 + v14) & v6;
      v15 = (uint64_t *)(v4 + 48 * v9);
      v11 = *v15;
      v12 = v15[1];
      v16 = v12 == v8 && v11 == v7;
      ++v14;
      if (v16)
        goto LABEL_13;
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationManager::didShowNotification(WTF::UUID const&)::$_0,void,WebCore::Notification *>::call(int a1, WebCore::Notification *this)
{
  uint64_t result;

  if (this)
    return WebCore::Notification::dispatchShowEvent(this);
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebNotificationManager::didClickNotification(WTF::UUID const&)::$_0,void,WebCore::Notification *>::call(WTF *result, WebCore::Notification *a2)
{
  _BYTE v3[48];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (WTF::isMainRunLoop(result))
    {
      v3[8] = 0;
      v3[24] = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator();
      WebCore::Notification::dispatchClickEvent(a2);
      return (WTF *)MEMORY[0x19AEB0CA8](v3);
    }
    else
    {
      return (WTF *)WebCore::Notification::dispatchClickEvent(a2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationManager::didCloseNotifications(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::Notification *>::call(int a1, WebCore::Notification *this)
{
  uint64_t result;

  if (this)
    return WebCore::Notification::dispatchCloseEvent(this);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PluginView::Stream::start(void)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E34ECD38;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 56))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PluginView::Stream::start(void)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E34ECD38;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 56))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::PluginView::Stream::start(void)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(v2 + 248);
  *(_QWORD *)(v2 + 248) = v3;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PluginView::*&)(void),WebKit::PluginView*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::PluginView::redeliverManualStream(void)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>::call(uint64_t a1, const WebCore::SharedBuffer **a2)
{
  return WebKit::PluginView::manualLoadDidReceiveData(*(WebKit::PluginView **)(a1 + 8), *a2);
}

void WebKit::WebSWClientConnection::~WebSWClientConnection(unsigned int **this)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  WTF *v9;
  WTF *v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  WebCore::SWClientConnection::clearPendingJobs((WebCore::SWClientConnection *)this);
  v3 = this[13];
  if (v3)
  {
    v4 = *(v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 2);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 4), v2);
  }
  v7 = this[8];
  v8 = this[9];
  v9 = (WTF *)this[10];
  if (v7 > v8)
  {
    v15 = this[10];
    if (v8)
    {
      v20 = 8 * (_QWORD)v8;
      do
      {
        v21 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v15 += 2;
        v20 -= 8;
      }
      while (v20);
      v15 = this[10];
      v7 = this[8];
    }
    v16 = (unsigned int *)*((unsigned int *)this + 22);
    if (v7 != v16)
    {
      v17 = &v15[2 * (_QWORD)v7];
      v18 = 8 * (_QWORD)v16 - 8 * (_QWORD)v7;
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v17 += 2;
        v18 -= 8;
      }
      while (v18);
    }
LABEL_21:
    v9 = (WTF *)this[10];
    if (!v9)
      goto LABEL_13;
    goto LABEL_22;
  }
  if (v7 != v8)
  {
    v12 = (uint64_t *)((char *)v9 + 8 * (_QWORD)v7);
    v13 = 8 * (_QWORD)v8 - 8 * (_QWORD)v7;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
    goto LABEL_21;
  }
  if (!v9)
    goto LABEL_13;
LABEL_22:
  this[10] = 0;
  *((_DWORD *)this + 22) = 0;
  WTF::fastFree(v9, v2);
LABEL_13:
  v10 = (WTF *)this[7];
  this[7] = 0;
  if (v10)
  {
    v11 = *(unsigned int **)v10;
    *(_QWORD *)v10 = 0;
    if (v11)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
    WTF::fastFree(v10, v2);
  }
  this[4] = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 5, v2);
  WebCore::SWClientConnection::~SWClientConnection((WebCore::SWClientConnection *)this);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSWClientConnection::~WebSWClientConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSWClientConnection::~WebSWClientConnection(unsigned int **this)
{
  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3);
}

{
  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 4);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3);
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 4);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSWClientConnection::messageSenderConnection(WebKit::WebSWClientConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

void WebKit::WebSWClientConnection::scheduleJobInServer(WebKit::WebSWClientConnection *this, const WebCore::ServiceWorkerJobData *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 v14;
  _DWORD *v15;
  __int128 v16;
  _DWORD *v17;
  __int128 v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v28;
  __int128 v29;
  __int128 v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[24];
  int v35;
  _DWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  _DWORD *v43;
  char v44;
  _DWORD *v45;
  __int16 v46;
  char v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v28 = v4;
  v29 = *(_OWORD *)((char *)a2 + 8);
  v30 = *(_OWORD *)((char *)a2 + 24);
  v5 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v5)
    *v5 += 2;
  v31 = v5;
  v6 = *((_OWORD *)a2 + 4);
  v32 = *((_OWORD *)a2 + 3);
  v33 = v6;
  v34[0] = 0;
  v35 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v34, (uint64_t)a2 + 80);
  v7 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v7)
    *v7 += 2;
  v36 = v7;
  v37 = *(_OWORD *)((char *)a2 + 120);
  v38 = *(_OWORD *)((char *)a2 + 136);
  v8 = *((_OWORD *)a2 + 11);
  v39 = *((_OWORD *)a2 + 10);
  v40 = v8;
  v41 = *((_OWORD *)a2 + 12);
  v42 = *((_WORD *)a2 + 104);
  v9 = (_DWORD *)*((_QWORD *)a2 + 27);
  if (v9)
    *v9 += 2;
  v43 = v9;
  v44 = *((_BYTE *)a2 + 224);
  LOBYTE(v45) = 0;
  v47 = 0;
  if (*((_BYTE *)a2 + 248))
  {
    v10 = (_DWORD *)*((_QWORD *)a2 + 29);
    if (v10)
      *v10 += 2;
    v45 = v10;
    v46 = *((_WORD *)a2 + 120);
    v47 = 1;
  }
  v48 = *((_OWORD *)a2 + 16);
  v11 = WTF::fastMalloc((WTF *)0x130);
  v12 = v11;
  *(_QWORD *)v11 = off_1E34ED478;
  *(_QWORD *)(v11 + 16) = this;
  v13 = v28;
  if (v28)
    *v28 += 2;
  *(_QWORD *)(v11 + 32) = v13;
  v14 = v30;
  *(_OWORD *)(v11 + 40) = v29;
  *(_OWORD *)(v11 + 56) = v14;
  v15 = v31;
  if (v31)
    *v31 += 2;
  *(_BYTE *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 72) = v15;
  v16 = v33;
  *(_OWORD *)(v11 + 80) = v32;
  *(_OWORD *)(v11 + 96) = v16;
  *(_DWORD *)(v11 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v11 + 112, (uint64_t)v34);
  v17 = v36;
  if (v36)
    *v36 += 2;
  *(_QWORD *)(v12 + 144) = v17;
  v18 = v38;
  *(_OWORD *)(v12 + 152) = v37;
  *(_OWORD *)(v12 + 168) = v18;
  v19 = v42;
  v21 = v40;
  v20 = v41;
  *(_OWORD *)(v12 + 192) = v39;
  *(_OWORD *)(v12 + 208) = v21;
  *(_OWORD *)(v12 + 224) = v20;
  *(_WORD *)(v12 + 240) = v19;
  v22 = v43;
  if (v43)
    *v43 += 2;
  *(_QWORD *)(v12 + 248) = v22;
  *(_BYTE *)(v12 + 256) = v44;
  *(_BYTE *)(v12 + 264) = 0;
  *(_BYTE *)(v12 + 280) = 0;
  if (v47)
  {
    v23 = v45;
    if (v45)
      *v45 += 2;
    *(_QWORD *)(v12 + 264) = v23;
    *(_WORD *)(v12 + 272) = v46;
    *(_BYTE *)(v12 + 280) = 1;
  }
  *(_OWORD *)(v12 + 288) = v48;
  if (*(_BYTE *)(*((_QWORD *)this + 7) + 24))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 64);
    v25 = *((_QWORD *)this + 9);
    *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v25) = v12;
    if (v25 == *((unsigned int *)this + 22) - 1)
      v26 = 0;
    else
      v26 = v25 + 1;
    *((_QWORD *)this + 9) = v26;
  }
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)&v28, v24);
}

uint64_t WebKit::WebSWClientConnection::runOrDelayTaskForImport(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 24))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  else
    return WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(a1 + 64, a2);
}

IPC::Encoder *WebKit::WebSWClientConnection::finishFetchingScriptInServer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2728;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, a2 + 1);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode((IPC::Encoder *)v9, a3);
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode((IPC::Encoder *)v9, a4);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::addServiceWorkerRegistrationInServer(uint64_t a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  WebKit::WebProcess *v13;
  IPC::Encoder *v14[3];
  uint64_t v15;
  int v16;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v15 = a2;
  v16 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)v4 + 81, &v15, &v16, (uint64_t)v14);
  ++*((_DWORD *)v14[0] + 2);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = a1 + 24;
  v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2722;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14[0] = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, v14, 0);
  result = v14[0];
  v14[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

WTF::RunLoop *WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(uint64_t a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  WTF::RunLoop *result;
  WTF::RunLoop *v6;
  WebKit::WebProcess *v7;
  WTF::RunLoop *v8;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  result = (WTF::RunLoop *)WebKit::WebProcess::removeServiceWorkerRegistration((uint64_t)v4, a2);
  if ((_DWORD)result)
  {
    WTF::RunLoop::main(result);
    ++*(_DWORD *)(a1 + 8);
    v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = &off_1E34ED4A0;
    *((_QWORD *)v6 + 1) = a2;
    *((_QWORD *)v6 + 2) = a1;
    v8 = v6;
    WTF::RunLoop::dispatch();
    result = v8;
    if (v8)
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t IdentifierInternal;
  _QWORD v20[2];
  IPC::Encoder *v21;

  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v8 = *a4;
  *a4 = 0;
  v9 = a1[3];
  a1 += 3;
  v10 = (*(uint64_t (**)(_QWORD *))(v9 + 56))(a1);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2741;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v21 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &IdentifierInternal);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a2;
  LODWORD(a2) = *(_DWORD *)(a3 + 32);
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
  IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&>((char *)v11, a3, a2);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34ED4C8;
  v12[1] = v8;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20[0] = v12;
  v20[1] = v13;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*a1 + 40))(a1, &v21, v20, 0);
  v15 = v20[0];
  v20[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::postMessageToServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  IPC::Encoder *result;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  v8 = a3 + 8;
  v9 = *(uint64_t **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      {
        v12 = (_QWORD *)WebKit::WebMessagePortChannelProvider::singleton(void)::provider;
      }
      else
      {
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        v12[1] = 0;
        v12[2] = 0;
        *v12 = off_1E34EF690;
        WebKit::WebMessagePortChannelProvider::singleton(void)::provider = (uint64_t)v12;
      }
      WebKit::WebMessagePortChannelProvider::messagePortSentToRemote((uint64_t)v12, v9);
      v9 += 4;
      v11 -= 32;
    }
    while (v11);
  }
  v14 = *(_QWORD *)(a1 + 24);
  v13 = a1 + 24;
  v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2735;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v22 = (IPC::Encoder *)v16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>((IPC::Encoder *)v16, (uint64_t *)a3);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v16, v8);
  v17 = *(_DWORD *)(a4 + 32);
  *IPC::Encoder::grow((IPC::Encoder *)v16, 1uLL, 1) = v17;
  IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&>((char *)v16, a4, v17);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v13, &v22, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::registerServiceWorkerClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v9 = a1 + 24;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2736;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v11, a2);
  IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode((IPC::Encoder *)v11, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>((IPC::Encoder *)v11, a4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a5);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::unregisterServiceWorkerClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2748;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::didResolveRegistrationPromise(WebKit::WebSWClientConnection *this, const WebCore::ServiceWorkerRegistrationKey *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 24;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 56))((char *)this + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2725;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode((IPC::Encoder *)v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

BOOL WebKit::WebSWClientConnection::mayHaveServiceWorkerRegisteredForOrigin(WebKit::WebSWClientConnection *this, const WebCore::SecurityOriginData *a2)
{
  WebKit::WebSWOriginTable *v2;

  v2 = (WebKit::WebSWOriginTable *)*((_QWORD *)this + 7);
  return !*((_BYTE *)v2 + 24) || WebKit::WebSWOriginTable::contains(v2, a2);
}

BOOL WebKit::WebSWOriginTable::contains(WebKit::WebSWOriginTable *this, const WebCore::SecurityOriginData *a2)
{
  const WTF::String *v3;
  unsigned int v4;
  _DWORD *Slot;
  WTF::StringImpl *v6;
  _BOOL8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  WebCore::SecurityOriginData::toString(a2);
  v4 = WebCore::computeSharedStringHash((WebCore *)&v10, v3);
  Slot = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot(this, v4);
  if (Slot)
    v7 = *Slot != 0;
  else
    v7 = 0;
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

unsigned int *WebKit::WebSWClientConnection::setSWOriginTableSharedMemory(uint64_t a1)
{
  uint64_t v1;
  unsigned int *result;
  unsigned int *v3;
  unsigned int *v4;

  v1 = *(_QWORD *)(a1 + 56);
  result = (unsigned int *)WebCore::SharedMemory::map();
  if (v4)
  {
    v3 = v4;
    v4 = 0;
    WebKit::SharedStringHashTableReadOnly::setSharedMemory(v1, &v3);
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    result = v4;
    v4 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::takeFirst(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *a2;
  if (*a2 == a2[1])
  {
    result = 80;
    __break(0xC471u);
  }
  else
  {
    v4 = a2[2];
    v5 = *(_QWORD *)(v4 + 8 * v2);
    *(_QWORD *)(v4 + 8 * v2) = 0;
    *a1 = v5;
    v6 = a2[2];
    result = *(_QWORD *)(v6 + 8 * v2);
    *(_QWORD *)(v6 + 8 * v2) = 0;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v2 = *a2;
    }
    if (v2 == *((unsigned int *)a2 + 6) - 1)
      v8 = 0;
    else
      v8 = v2 + 1;
    *a2 = v8;
  }
  return result;
}

uint64_t WebKit::WebSWClientConnection::matchRegistration(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebSWOriginTable *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  _BYTE v18[24];
  int v19;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(WebKit::WebSWOriginTable **)(a1 + 56);
  if (!*((_BYTE *)v8 + 24) || WebKit::WebSWOriginTable::contains(v8, a2))
  {
    v12 = *a4;
    *a4 = 0;
    v17[0] = a1;
    v17[1] = v12;
    v18[0] = 0;
    v19 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v18, (uint64_t)a2);
    v13 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v13 += 2;
    v20 = v13;
    v21 = *(_OWORD *)(a3 + 8);
    v22 = *(_OWORD *)(a3 + 24);
    WTF::Function<void ()(void)>::Function<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>(&v16, v17);
    WebKit::WebSWClientConnection::runOrDelayTaskForImport(a1, &v16);
    v15 = v16;
    v16 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WebCore::SecurityOriginData &&::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0::~$_0((uint64_t)v17, v14);
  }
  else
  {
    LOBYTE(v17[0]) = 0;
    v23 = 0;
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v10);
  }
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;

  v4 = WTF::fastMalloc((WTF *)0x60);
  v5 = *a2;
  *(_QWORD *)v4 = &off_1E34ED510;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4 + 24, (uint64_t)(a2 + 2));
  v7 = (_DWORD *)a2[6];
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 56) = v7;
  v8 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v4 + 80) = v8;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WebCore::SecurityOriginData &&::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34ED2C0[v4])(&v7, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

IPC::Encoder *WebKit::WebSWClientConnection::whenRegistrationReady(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v6 = *a4;
  *a4 = 0;
  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2750;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34ED560;
  v10[1] = v6;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

unsigned int *WebKit::WebSWClientConnection::setServiceWorkerClientIsControlled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;

  if (WebCore::DocumentLoader::fromScriptExecutionContextIdentifier())
  {
    v6 = WebCore::DocumentLoader::setControllingServiceWorkerRegistration();
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  WebCore::WorkerScriptLoader::serviceWorkerDataManagerFromIdentifier();
  if (!v10)
  {
LABEL_8:
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (!*(_BYTE *)(a3 + 344))
  {
    WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(v10);
    goto LABEL_8;
  }
  WebCore::WorkerScriptLoader::ServiceWorkerDataManager::setData();
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(v10);
}

uint64_t WebKit::WebSWClientConnection::getRegistrations(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebSWOriginTable *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  int v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = *(WebKit::WebSWOriginTable **)(a1 + 56);
  if (*((_BYTE *)v8 + 24) && !WebKit::WebSWOriginTable::contains(v8, a2))
  {
    v23 = 0;
    v24 = 0;
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    v23 = a1;
    v24 = v9;
    v25[0] = 0;
    v26 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v25, (uint64_t)a2);
    v10 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v10 += 2;
    v27 = v10;
    v28 = *(_OWORD *)(a3 + 8);
    v29 = *(_OWORD *)(a3 + 24);
    v11 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v11 = &off_1E34ED5B0;
    *(_QWORD *)(v11 + 8) = v23;
    v12 = v24;
    v24 = 0;
    *(_QWORD *)(v11 + 16) = v12;
    *(_BYTE *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v11 + 24, (uint64_t)v25);
    v13 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    *(_QWORD *)(v11 + 56) = v13;
    v14 = v29;
    *(_OWORD *)(v11 + 64) = v28;
    *(_OWORD *)(v11 + 80) = v14;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 24))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    else
    {
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 64);
      v19 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19) = v11;
      if (v19 == *(unsigned int *)(a1 + 88) - 1)
        v20 = 0;
      else
        v20 = v19 + 1;
      *(_QWORD *)(a1 + 72) = v20;
    }
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v15);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v26 != -1)
      ((void (*)(char *, _BYTE *))off_1E34ED2C0[v26])(&v22, v25);
    v26 = -1;
    result = v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::whenServiceWorkerIsTerminatedForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2751;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34ED628;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::storeRegistrationsOnDiskForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD v13[2];
  IPC::Encoder *v14;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2745;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34ED650;
  v7[1] = v6;
  v13[0] = v7;
  v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v3 + 40))(v3, &v14, v13, 0);
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v6 = *a4;
  *a4 = 0;
  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2746;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, *(const void **)a3, *(unsigned int *)(a3 + 12));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34ED678;
  v10[1] = v6;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::unsubscribeFromPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v6 = *a4;
  *a4 = 0;
  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2749;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a3;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34ED6C0;
  v10[1] = v6;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getPushSubscription(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v4 = *a3;
  *a3 = 0;
  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2731;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ED6E8;
  v8[1] = v4;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getPushPermissionState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v4 = *a3;
  *a3 = 0;
  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2730;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ED730;
  v8[1] = v4;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getNotifications(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  WebKit::WebProcess *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  WebKit::WebProcess *v18;
  uint64_t v19[2];
  IPC::Encoder *v20;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = a4;
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v18);
    a4 = v17;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = (os_unfair_lock_s *)*((_QWORD *)v6 + 4);
  v8 = *a4;
  *a4 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34ED778;
  v9[1] = v8;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2559;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v20 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  v19[0] = (uint64_t)v9;
  v19[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v20, v19, 0, 0);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::enableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v4 = *a3;
  *a3 = 0;
  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2727;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ED7B0;
  v8[1] = v4;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::disableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v4 = *a3;
  *a3 = 0;
  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2726;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ED7D8;
  v8[1] = v4;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v6 = *a4;
  *a4 = 0;
  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2742;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34ED800;
  v10[1] = v6;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getNavigationPreloadState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v4 = *a3;
  *a3 = 0;
  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2729;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ED828;
  v8[1] = v4;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::startBackgroundFetch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  _QWORD v25[2];
  IPC::Encoder *v26;

  v11 = a1 + 24;
  v10 = *(_QWORD *)(a1 + 24);
  v12 = *a6;
  *a6 = 0;
  v13 = (*(uint64_t (**)(uint64_t))(v10 + 56))(a1 + 24);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2744;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v26 = (IPC::Encoder *)v14;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
  v15 = *(unsigned int *)(a4 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v15;
  v16 = *(_DWORD *)(a4 + 12);
  if (v16)
  {
    v17 = *(_QWORD *)a4;
    v18 = 336 * v16;
    do
    {
      IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::encode((IPC::Encoder *)v14, v17);
      v17 += 336;
      v18 -= 336;
    }
    while (v18);
  }
  IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::encode((IPC::Encoder *)v14, a5);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = &off_1E34ED880;
  v19[1] = v12;
  v25[0] = v19;
  v25[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v11 + 40))(v11, &v26, v25, 0);
  v21 = v25[0];
  v25[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::backgroundFetchInformation(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v6 = *a4;
  *a4 = 0;
  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2724;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34ED8D8;
  v10[1] = v6;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::backgroundFetchIdentifiers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2723;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34ED900;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::abortBackgroundFetch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  IPC::Encoder *v18;

  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2721;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v18 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34ED928;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v18, v17, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::matchBackgroundFetch(uint64_t a1, uint64_t a2, uint64_t *a3, WebCore::ResourceRequest *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  _QWORD v19[2];
  IPC::Encoder *v20;

  v9 = a1 + 24;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2733;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v20 = (IPC::Encoder *)v11;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::encode((IPC::Encoder *)v11, a4);
  v12 = *a5;
  *a5 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34ED950;
  v13[1] = v12;
  v19[0] = v13;
  v19[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v9 + 40))(v9, &v20, v19, 0);
  v15 = v19[0];
  v19[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::retrieveRecordResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v4 = *a3;
  *a3 = 0;
  v5 = a1 + 24;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2738;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34ED978;
  v8[1] = v4;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::retrieveRecordResponseBody(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t IdentifierInternal;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  IPC::Encoder *result;
  WTF *v32;
  void *v33;
  IPC::Encoder *v34;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v8 = (uint64_t *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 104);
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 104)),
        (v7 = *v8) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v7 + 16 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    *v14 = IdentifierInternal;
    v18 = *a3;
    *a3 = 0;
    v19 = v14[1];
    v14[1] = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *v8;
    if (*v8)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v8;
    if (*v8)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_23;
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 104));
    goto LABEL_23;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != IdentifierInternal)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v9;
    v14 = (uint64_t *)(v7 + 16 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  v27 = *(_QWORD *)(a1 + 24);
  v26 = a1 + 24;
  v28 = (*(uint64_t (**)(uint64_t))(v27 + 56))(v26);
  v29 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v29 = 2739;
  *(_QWORD *)(v29 + 8) = v28;
  *(_QWORD *)(v29 + 528) = v29 + 16;
  *(_QWORD *)(v29 + 536) = v29 + 16;
  *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v29 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
  v34 = (IPC::Encoder *)v29;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = IdentifierInternal;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v26 + 32))(v26, &v34, 0);
  result = v34;
  v34 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v30);
    return (IPC::Encoder *)WTF::fastFree(v32, v33);
  }
  return result;
}

void WebKit::WebSWClientConnection::notifyRecordResponseBodyChunk(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[10];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, a2);
  v7 = v6;
  if (v5)
    v8 = v5 + 16 * *(unsigned int *)(v5 - 4);
  else
    v8 = 0;
  if (v8 != v6)
  {
    IPC::SharedBufferReference::unsafeBuffer(a3, &v11);
    v9 = v11;
    v13[0] = v11;
    v14 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8), v13);
    if (v14 != -1)
      ((void (*)(char *, _QWORD *))off_1E34ED2D0[v14])(&v12, v13);
    if (!v9)
    {
      if (*v4)
      {
        v10 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
        if (v10 == v7)
          return;
      }
      else
      {
        if (!v7)
          return;
        v10 = 0;
      }
      if (v10 != v7)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(v4, (_QWORD *)v7);
    }
  }
}

void WebKit::WebSWClientConnection::notifyRecordResponseBodyEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];
  __int128 v19;
  __int128 v20;
  WTF::StringImpl *v21;
  int v22;
  __int16 v23;
  CFTypeRef cf;
  char v25;
  char v26;
  _OWORD v27[3];
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 104);
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, a2);
  if (v4)
    v7 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v7 = 0;
  if (v7 == v6)
    return;
  v8 = v6[1];
  v6[1] = 0;
  if (!*v5)
  {
    if (!v6)
      goto LABEL_12;
    v9 = 0;
LABEL_10:
    if ((_QWORD *)v9 != v6)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(v5, v6);
    goto LABEL_12;
  }
  v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
  if ((_QWORD *)v9 != v6)
    goto LABEL_10;
LABEL_12:
  if (v8)
  {
    v10 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v18[0] = v10;
    WTF::URL::URL((uint64_t)&v18[1], (uint64_t *)(a3 + 8));
    v11 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 48) = 0;
    v22 = *(_DWORD *)(a3 + 56);
    v23 = *(_WORD *)(a3 + 60);
    v12 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    v25 = *(_BYTE *)(a3 + 72);
    v13 = *(_OWORD *)v18;
    v18[1] = 0;
    v27[0] = v13;
    v27[1] = v19;
    v27[2] = v20;
    LODWORD(v19) = v19 & 0xFFFFFFFE;
    v21 = 0;
    v28 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 56);
    v30 = *(_WORD *)(a3 + 60);
    v29 = v11;
    cf = 0;
    v31 = v12;
    v32 = v25;
    v33 = 1;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 16))(v8, v27);
    if (v33 != -1)
      ((void (*)(char *, _OWORD *))off_1E34ED2D0[v33])(&v26, v27);
    v33 = -1;
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v18[1];
    v18[1] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

IPC::Encoder *WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::Document *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *result;
  WTF *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  IPC::Encoder *v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  v6 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v5, a2);
  v7 = v6;
  if (v6
    && (*(_DWORD *)(v6 + 24) += 2, (v8 = *(_QWORD *)(v6 + 528)) != 0)
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (v10 = *(_QWORD *)(v9 + 24)) != 0
    && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v12 = *(_QWORD **)(*(_QWORD *)(v11 + 48) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v12 + 1368))(v12) & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      v13 = *(_QWORD *)(v12[2] + 8);
      if (v13)
        v14 = v13 - 16;
      else
        v14 = 0;
    }
    v29 = *(_OWORD *)a2;
    *(_QWORD *)&v30 = a2[2];
    v15 = *a3;
    *a3 = 0;
    v17 = *(_QWORD *)(v14 + 32);
    v16 = v14 + 32;
    v18 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v16);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 1937;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v28 = (IPC::Encoder *)v19;
    v20 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v20 = &off_1E34ED9D0;
    *(_OWORD *)(v20 + 16) = v29;
    *(_OWORD *)(v20 + 32) = v30;
    *(_QWORD *)(v20 + 48) = v15;
    *(_QWORD *)&v29 = v20;
    *((_QWORD *)&v29 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    (*(void (**)(uint64_t, IPC::Encoder **, __int128 *, _QWORD))(*(_QWORD *)v16 + 40))(v16, &v28, &v29, 0);
    v22 = v29;
    *(_QWORD *)&v29 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    result = v28;
    v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v21);
      result = (IPC::Encoder *)WTF::fastFree(v24, v25);
    }
  }
  else
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    v26 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 16))(v26, &v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    result = (IPC::Encoder *)std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v27);
    if (!v7)
      return result;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return (IPC::Encoder *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::WebSWContextManagerConnection(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, WebKit::WebPage *a8, uint64_t *a9)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  const WebKit::WebPreferencesStore *v23;
  WebKit::WebProcess *v24;
  WebKit::WebProcess *v26;

  *(_QWORD *)a1 = off_1E34ED2F0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = &off_1E34B0558;
  v17 = (_QWORD *)(a1 + 16);
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)a1 = off_1E34ECF78;
  *v17 = &unk_1E34ED068;
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 40) = v19;
  v20 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v20;
  v21 = *a4;
  v22 = a4[2];
  *(_OWORD *)(a1 + 80) = a4[1];
  *(_OWORD *)(a1 + 96) = v22;
  *(_OWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 128) = a7;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  WebCore::standardUserAgentWithApplicationName();
  *(_BYTE *)(a1 + 176) = 1;
  WebKit::WebUserContentController::getOrCreate(*a9, (uint64_t **)(a1 + 184));
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  WTF::WorkQueue::create();
  *(_QWORD *)(a1 + 256) = 0;
  WebKit::WebUserContentController::addContentRuleLists(*(_QWORD *)(a1 + 184), (uint64_t)(a9 + 1));
  WebKit::WebPage::updatePreferencesGenerated(a8, v23);
  std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(a1 + 192, (uint64_t *)a8);
  {
    v24 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v24 = WebKit::WebProcess::WebProcess(v26);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v24;
  }
  ++*((_DWORD *)v24 + 6);
  return a1;
}

void WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection(WebKit::WebSWContextManagerConnection *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  WTF::StringImpl *v25;
  void *v26;
  _QWORD *v27;

  v2 = (_QWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  v27 = v2;
  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v27);
  v5 = v3;
  v6 = 0;
  v7 = v27;
  if (v27)
    v6 = &v27[2 * *((unsigned int *)v27 - 1)];
  if (v6 != v4)
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v4[1] + 16))(v4[1]);
      while (1)
      {
        v4 += 2;
        if (v4 == v5)
          break;
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_9;
      }
      v4 = v5;
LABEL_9:
      ;
    }
    while (v4 != v6);
    v7 = v27;
  }
  if (v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v7, v3);
  v8 = *((_QWORD *)this + 32);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (uint64_t *)(v8 + 16);
      do
      {
        if (*(v10 - 2) != -1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
            WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v3);
  }
  v12 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
  std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 192);
  v14 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *((_QWORD *)this + 19);
  if (v16)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v16, v13);
  v17 = *((_QWORD *)this + 18);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = (uint64_t *)(v17 + 8);
      do
      {
        if (*(v19 - 1) != -1)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), v13);
  }
  v21 = *((_QWORD *)this + 17);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      v23 = (WTF **)*((_QWORD *)this + 17);
      do
      {
        v24 = *v23;
        if (*v23 != (WTF *)-1)
        {
          *v23 = 0;
          if (v24)
            std::default_delete<WebKit::RemoteWorkerFrameLoaderClient>::operator()[abi:sn180100](v24, v13);
        }
        ++v23;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v21 - 16), v13);
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v13);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 5);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v26);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection(WebKit::WebSWContextManagerConnection *this)
{
  WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection((WebKit::WebSWContextManagerConnection *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection((WebKit::WebSWContextManagerConnection *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::establishConnection(uint64_t *a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17[2];
  IPC::Encoder *v18;

  IPC::Connection::addWorkQueueMessageReceiver(a1[5], 0xC1u, a1[31], (uint64_t)(a1 + 2), 0);
  v4 = (os_unfair_lock_s *)a1[5];
  v5 = a1 + 6;
  v6 = (uint64_t)(a1 + 8);
  v7 = *a2;
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34EDA20;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 229;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  v11 = a1[15];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, v5);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>((IPC::Encoder *)v10, v6);
  v17[0] = (uint64_t)v8;
  v17[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v17, 0, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::stop(WebKit::WebSWContextManagerConnection *this)
{
  IPC::Connection::removeWorkQueueMessageReceiver(*((_QWORD *)this + 5), 0xC1u, 0);
}

WTF *WebKit::WebSWContextManagerConnection::updatePreferencesStore(uint64_t a1, uint64_t *a2)
{
  const WebKit::WebPreferencesStore *v4;
  WTF *result;
  uint64_t v6;
  int v7;
  char v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[2];
  int v25;
  char v26;
  WTF *v27;

  if ((WTF::isMainRunLoop((WTF *)a1) & 1) != 0)
  {
    result = (WTF *)WebKit::WebPage::updatePreferencesGenerated((WebKit::WebPage *)a2, v4);
    if (*(_BYTE *)(a1 + 240))
    {
      v6 = *a2;
      *a2 = 0;
      v7 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      v8 = *((_BYTE *)a2 + 20);
      *((_BYTE *)a2 + 20) = 0;
      v9 = *(WTF **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v6;
      v10 = a2[1];
      a2[1] = 0;
      v11 = (WTF::StringImpl *)*(unsigned int *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v10;
      *(_DWORD *)(a1 + 208) = v7;
      *(_BYTE *)(a1 + 212) = v8;
      if (v9)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v9, v11);
      v12 = a2[3];
      a2[3] = 0;
      v13 = *((_DWORD *)a2 + 10);
      *((_DWORD *)a2 + 10) = 0;
      v14 = *((_BYTE *)a2 + 44);
      *((_BYTE *)a2 + 44) = 0;
      result = *(WTF **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v12;
      v15 = a2[4];
      a2[4] = 0;
      v16 = (WTF::StringImpl *)*(unsigned int *)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v15;
      *(_DWORD *)(a1 + 232) = v13;
      *(_BYTE *)(a1 + 236) = v14;
      if (result)
        return (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(result, v16);
    }
    else
    {
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_QWORD *)(a1 + 205) = 0;
      v18 = *a2;
      *a2 = 0;
      *(_QWORD *)(a1 + 192) = v18;
      LODWORD(v18) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(a1 + 200) = v18;
      LODWORD(v18) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(a1 + 204) = v18;
      LODWORD(v18) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      *(_DWORD *)(a1 + 208) = v18;
      LOBYTE(v18) = *((_BYTE *)a2 + 20);
      *((_BYTE *)a2 + 20) = 0;
      *(_BYTE *)(a1 + 212) = v18;
      *(_QWORD *)(a1 + 229) = 0;
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 224) = 0;
      v19 = a2[3];
      a2[3] = 0;
      *(_QWORD *)(a1 + 216) = v19;
      LODWORD(v19) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = 0;
      *(_DWORD *)(a1 + 224) = v19;
      LODWORD(v19) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = 0;
      *(_DWORD *)(a1 + 228) = v19;
      LODWORD(v19) = *((_DWORD *)a2 + 10);
      *((_DWORD *)a2 + 10) = 0;
      *(_DWORD *)(a1 + 232) = v19;
      LOBYTE(v19) = *((_BYTE *)a2 + 44);
      *((_BYTE *)a2 + 44) = 0;
      *(_BYTE *)(a1 + 236) = v19;
      *(_BYTE *)(a1 + 240) = 1;
    }
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 32));
    *(_QWORD *)&v20 = a1;
    WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>::copy((uint64_t)&v20 + 8, a2);
    WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>::copy((uint64_t)v24, a2 + 3);
    v17 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v17 = &off_1E34EDA48;
    *(_OWORD *)(v17 + 8) = v20;
    *(_QWORD *)(v17 + 24) = v21;
    *(_DWORD *)(v17 + 32) = v22;
    *(_BYTE *)(v17 + 36) = v23;
    *(_QWORD *)(v17 + 40) = v24[0];
    *(_QWORD *)(v17 + 48) = v24[1];
    *(_DWORD *)(v17 + 56) = v25;
    *(_BYTE *)(v17 + 60) = v26;
    v27 = (WTF *)v17;
    WTF::callOnMainRunLoop();
    result = v27;
    v27 = 0;
    if (result)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WebCore::ServiceWorkerThreadProxy *WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(unsigned __int8 **a1, uint64_t a2, char a3)
{
  uint64_t isMainRunLoop;
  WebCore::ServiceWorkerThreadProxy *result;
  uint64_t v8;
  WebCore::ServiceWorkerThreadProxy *v9;

  isMainRunLoop = WTF::isMainRunLoop((WTF *)a1);
  if ((isMainRunLoop & 1) != 0)
  {
    WebCore::SWContextManager::singleton((WebCore::SWContextManager *)isMainRunLoop);
    result = (WebCore::ServiceWorkerThreadProxy *)WebCore::SWContextManager::serviceWorkerThreadProxy();
    if (result)
      return (WebCore::ServiceWorkerThreadProxy *)WebCore::ServiceWorkerThreadProxy::setLastNavigationWasAppInitiated(result);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1 + 4);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = &off_1E34EDA70;
    *(_QWORD *)(v8 + 8) = a1;
    *(_QWORD *)(v8 + 16) = a2;
    *(_BYTE *)(v8 + 24) = a3;
    v9 = (WebCore::ServiceWorkerThreadProxy *)v8;
    WTF::callOnMainRunLoop();
    result = v9;
    if (v9)
      return (WebCore::ServiceWorkerThreadProxy *)(*(uint64_t (**)(WebCore::ServiceWorkerThreadProxy *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::installServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, __int16 a7)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[45];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38[5];
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  WTF::StringImpl *v50;
  __int16 v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 32));
  *((_QWORD *)&v26 + 1) = a1;
  WebCore::ServiceWorkerContextData::isolatedCopy();
  WebCore::ServiceWorkerData::isolatedCopy();
  WTF::String::isolatedCopy();
  LOBYTE(v53) = a5;
  BYTE1(v53) = a6;
  HIWORD(v53) = a7;
  v11 = WTF::fastMalloc((WTF *)0x2C0);
  *(_QWORD *)v11 = off_1E34EDB98;
  *(_OWORD *)(v11 + 16) = v26;
  v12 = v28;
  *(_OWORD *)(v11 + 32) = v27;
  *(_QWORD *)(v11 + 48) = v12;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v11 + 56, (uint64_t)v29);
  *(_QWORD *)(v11 + 408) = v29[44];
  v13 = v30;
  v30 = 0u;
  *(_OWORD *)(v11 + 416) = v13;
  v14 = v31;
  v31 = 0;
  *(_QWORD *)(v11 + 432) = v14;
  *(_QWORD *)&v13 = v32;
  v32 = 0;
  *(_QWORD *)(v11 + 440) = v13;
  *(_DWORD *)(v11 + 448) = v33;
  *(_BYTE *)(v11 + 452) = v34;
  *(_WORD *)(v11 + 456) = v35;
  v15 = v36;
  v36 = 0u;
  *(_OWORD *)(v11 + 464) = v15;
  v16 = v37;
  v37 = 0;
  *(_QWORD *)(v11 + 480) = v16;
  WTF::URL::URL(v11 + 488, v38);
  *(_DWORD *)(v11 + 528) = v39;
  v17 = v40;
  v40 = 0;
  *(_QWORD *)(v11 + 536) = v17;
  v18 = v41;
  v41 = 0;
  *(_QWORD *)(v11 + 544) = v18;
  LODWORD(v17) = v42;
  v42 = 0;
  *(_DWORD *)(v11 + 552) = v17;
  LOBYTE(v17) = v43;
  v43 = 0;
  *(_BYTE *)(v11 + 556) = v17;
  v19 = v46;
  v20 = v44;
  *(_OWORD *)(v11 + 576) = v45;
  *(_OWORD *)(v11 + 592) = v19;
  *(_OWORD *)(v11 + 560) = v20;
  *(_BYTE *)(v11 + 608) = v47;
  v21 = v48;
  v48 = 0;
  *(_QWORD *)(v11 + 616) = v21;
  *(_OWORD *)(v11 + 624) = v49;
  WTF::URL::URL(v11 + 640, (uint64_t *)&v50);
  *(_WORD *)(v11 + 680) = v51;
  v22 = v52;
  v52 = 0;
  *(_QWORD *)(v11 + 688) = v22;
  *(_DWORD *)(v11 + 696) = v53;
  WTF::callOnMainRunLoopAndWait();
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v24 = v52;
  v52 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v50;
  v50 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)&v27, v23);
}

WTF::StringImpl **WebKit::WebSWContextManagerConnection::setUserAgent(uint64_t a1, WTF::StringImpl *a2)
{
  _QWORD *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;

  if ((WTF::isMainThread((WTF *)a1) & 1) != 0)
    return WTF::String::operator=((WTF::StringImpl **)(a1 + 168), a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 32));
  WTF::String::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34EDC10;
  v5[1] = a1;
  v5[2] = v6;
  v7 = v5;
  WTF::callOnMainRunLoop();
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return 0;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::serviceWorkerStarted(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t *v10[2];
  char v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v12 = a3;
  v4 = *(_QWORD *)(a1 + 40);
  v10[0] = a2;
  v10[1] = &v12;
  v11 = a4;
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2764;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::serviceWorkerFailedToStart(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2763;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v8, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a3;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a4);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t *WebKit::WebSWContextManagerConnection::cancelFetch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11[2];

  WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  if (v11[0])
  {
    WebCore::ServiceWorkerThreadProxy::cancelFetch();
    v7 = v11[0];
    v11[0] = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 8));
  }
  v11[0] = a2;
  v11[1] = a4;
  result = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 32, v11);
  v9 = a1[32];
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
    if (v10 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v10 = 0;
  }
  if (v10 != result)
    return (uint64_t *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((unsigned int *)a1 + 64, result);
  return result;
}

void WebKit::WebSWContextManagerConnection::continueDidReceiveFetchResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t *v5;
  WebKit::WebServiceWorkerFetchTaskClient *v6;
  uint64_t v7[2];
  WebKit::WebServiceWorkerFetchTaskClient *v8;

  v4 = (unsigned int *)(a1 + 256);
  v7[0] = a2;
  v7[1] = a4;
  v5 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 256), v7);
  WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::take(v4, v5, &v8);
  if (v8)
  {
    WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)v6 + 2);
  }
}

void WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  unsigned __int8 *v2;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint8_t *v12;
  uint8_t buf[8];
  WebKit::WebServiceWorkerFetchTaskClient *v14;
  WebKit::WebServiceWorkerFetchTaskClient *v15;
  WebKit::WebServiceWorkerFetchTaskClient *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 13);
LABEL_5:
  v4 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 2) != 0;
    v6 = *((unsigned __int8 *)this + 232);
    v7 = *((unsigned int *)this + 24);
    if ((_DWORD)v7 == -1)
      v7 = -1;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 2) = v6;
    HIWORD(v14) = 2048;
    v15 = (WebKit::WebServiceWorkerFetchTaskClient *)v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "ServiceWorkerFrameLoaderClient::continueDidReceiveResponse, has connection %d, didFinish %d, response type %ld", buf, 0x18u);
  }
  if (*((_QWORD *)this + 2))
  {
    *((_BYTE *)this + 81) = 0;
    *(_QWORD *)buf = this;
    v14 = this;
    v15 = this;
    v16 = this;
    v8 = *((unsigned int *)this + 24);
    if ((_DWORD)v8 == -1)
    {
      v11 = std::__throw_bad_variant_access[abi:sn180100]();
      WebKit::WebSWContextManagerConnection::startFetch(v11);
      return;
    }
    v12 = buf;
    ((void (*)(uint8_t **, char *))*(&off_1E34EE068 + v8))(&v12, (char *)this + 88);
    v9 = *((unsigned int *)this + 24);
    if ((_DWORD)v9 != -1)
    {
      if (!(_DWORD)v9)
      {
        *((_QWORD *)this + 11) = 0;
        goto LABEL_16;
      }
      ((void (*)(uint8_t *, char *))off_1E34ED448[v9])(buf, (char *)this + 88);
    }
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
  }
LABEL_16:
  v10 = __ldxr(v2);
  if (v10 == 1)
  {
    if (!__stlxr(0, v2))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::startFetch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 ***a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 **v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned __int8 **v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *result;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 **v39;
  WTF::RefCountedBase *v40;
  unsigned __int8 **v41;
  uint64_t v42;
  unsigned __int8 **v43;
  uint64_t v44;

  WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  v13 = v44;
  if (!v44)
  {
    result = (unsigned __int8 *)IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidNotHandle>(a1[5], a4);
    goto LABEL_36;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v44 + 8));
  v14 = (*(unsigned __int8 *)(a5 + 148) >> 2) & 1;
  v15 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v15 = &off_1E34EDC38;
  *(_QWORD *)(v15 + 8) = v13;
  *(_BYTE *)(v15 + 16) = v14;
  v43 = (unsigned __int8 **)v15;
  WTF::callOnMainRunLoop();
  v16 = v43;
  v43 = 0;
  if (v16)
    (*((void (**)(unsigned __int8 **))*v16 + 1))(v16);
  v17 = *(unsigned __int8 *)(a5 + 147);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (unsigned __int8 **)a1[5]);
  v18 = WTF::fastMalloc((WTF *)0xF8);
  *(_DWORD *)(v18 + 8) = 1;
  v19 = (unsigned int *)(v18 + 8);
  *(_WORD *)(v18 + 12) = 0;
  *(_QWORD *)v18 = off_1E34ED0A0;
  v20 = v43;
  v43 = 0;
  *(_QWORD *)(v18 + 16) = v20;
  *(_QWORD *)(v18 + 24) = a2;
  *(_QWORD *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = a4;
  *(_BYTE *)(v18 + 48) = 0;
  *(_BYTE *)(v18 + 72) = 0;
  *(_BYTE *)(v18 + 80) = v17 == 1;
  *(_BYTE *)(v18 + 81) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_DWORD *)(v18 + 96) = 0;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v18 + 104));
  *(_WORD *)(v18 + 232) = 0;
  *(_BYTE *)(v18 + 234) = 0;
  *(_QWORD *)(v18 + 240) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v43);
  if (v17 == 1)
  {
    v21 = a1 + 32;
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 + 1, v19));
    v23 = *v21;
    if (*v21
      || (WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1 + 32, 0), (v23 = *v21) != 0))
    {
      v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a2, a4) & v24;
    v26 = (uint64_t *)(v23 + 24 * v25);
    v27 = *v26;
    v28 = v26[1];
    if (*(_OWORD *)v26 != 0)
    {
      v29 = 0;
      v30 = 1;
      do
      {
        if (v27 == a2 && v28 == a4)
        {
          WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref(v19);
          goto LABEL_32;
        }
        if (v27 == -1)
          v29 = v26;
        v25 = (v25 + v30) & v24;
        v26 = (uint64_t *)(v23 + 24 * v25);
        v27 = *v26;
        v28 = v26[1];
        ++v30;
      }
      while (*(_OWORD *)v26 != 0);
      if (v29)
      {
        *v29 = 0;
        v29[1] = 0;
        v29[2] = 0;
        --*(_DWORD *)(*v21 - 16);
        v26 = v29;
      }
    }
    *v26 = a2;
    v26[1] = a4;
    v31 = v26[2];
    v26[2] = v18;
    if (v31)
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v31 + 8));
    v32 = *v21;
    if (*v21)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v35 = *v21;
    if (*v21)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        goto LABEL_32;
      goto LABEL_30;
    }
    if (3 * v38 <= 4 * v37)
LABEL_30:
      WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v21, v26);
  }
LABEL_32:
  v39 = *a7;
  *a7 = 0;
  v43 = v39;
  WebCore::ResourceRequestBase::setHTTPBody();
  v40 = (WTF::RefCountedBase *)v43;
  v43 = 0;
  if (v40)
    WTF::RefCounted<WebCore::FormData>::deref(v40);
  v43 = (unsigned __int8 **)v18;
  result = (unsigned __int8 *)WebCore::ServiceWorkerThreadProxy::startFetch();
  v41 = v43;
  v43 = 0;
  if (v41)
    result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)v41 + 2);
LABEL_36:
  v42 = v44;
  v44 = 0;
  if (v42)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v42 + 8));
  return result;
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::postMessageToServiceWorker(WebCore::SWContextManager *a1)
{
  unsigned __int8 *result;
  uint64_t v2;

  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  result = (unsigned __int8 *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::fireMessageEvent();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  }
  return result;
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::fireInstallEvent(WebCore::SWContextManager *a1)
{
  unsigned __int8 *result;
  unsigned __int8 **v2;

  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  result = (unsigned __int8 *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::fireInstallEvent((WebCore::ServiceWorkerThreadProxy *)v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(v2[1]);
  }
  return result;
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::fireActivateEvent(WebCore::SWContextManager *a1)
{
  unsigned __int8 *result;
  unsigned __int8 **v2;

  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  result = (unsigned __int8 *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::fireActivateEvent((WebCore::ServiceWorkerThreadProxy *)v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(v2[1]);
  }
  return result;
}

WTF *WebKit::WebSWContextManagerConnection::firePushEvent(WTF *result, WTF *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF *v8;
  WTF *v9;
  char *v10;
  WTF *v11;
  char v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  char v30;
  _BYTE v31[144];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  char v37;

  v8 = result;
  LOBYTE(v35) = 0;
  v37 = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    v10 = *(char **)a3;
    v9 = *(WTF **)(a3 + 8);
    v27 = 0;
    LODWORD(v28) = 0;
    HIDWORD(v28) = (_DWORD)v9;
    if (v9)
    {
      if ((unint64_t)v9 >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v11 = (WTF *)WTF::fastMalloc(v9);
      LODWORD(v28) = (_DWORD)v9;
      v27 = v11;
      do
      {
        v12 = *v10++;
        *(_BYTE *)v11 = v12;
        v11 = (WTF *)((char *)v11 + 1);
        v9 = (WTF *)((char *)v9 - 1);
      }
      while (v9);
    }
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v35, (uint64_t)&v27);
    v14 = v27;
    if (v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v14, v13);
    }
  }
  v15 = *((_QWORD *)v8 + 31);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
  v16 = *a5;
  *a5 = 0;
  v27 = a2;
  LOBYTE(v28) = 0;
  v30 = 0;
  if (v37)
  {
    v28 = v35;
    v17 = v36;
    v35 = 0;
    v36 = 0;
    v29 = v17;
    v30 = 1;
  }
  WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::NotificationPayload>>::copy<std::optional<WebCore::NotificationPayload>>((WTF::StringImpl *)v31, a4);
  v32 = v15;
  v33 = v16;
  v18 = WTF::fastMalloc((WTF *)0xC8);
  v19 = v18;
  *(_QWORD *)v18 = off_1E34EDC60;
  *(_QWORD *)(v18 + 8) = v27;
  *(_BYTE *)(v18 + 16) = 0;
  *(_BYTE *)(v18 + 32) = 0;
  if (v30)
  {
    *(_QWORD *)(v18 + 16) = v28;
    v20 = v29;
    v28 = 0;
    v29 = 0;
    *(_QWORD *)(v18 + 24) = v20;
    *(_BYTE *)(v18 + 32) = 1;
  }
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v18 + 40, (uint64_t)v31);
  *(_QWORD *)(v19 + 184) = v32;
  v21 = v33;
  v32 = 0;
  v33 = 0;
  *(_QWORD *)(v19 + 192) = v21;
  v34 = v19;
  WTF::callOnMainRunLoop();
  v23 = v34;
  v34 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v33;
  v33 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v32;
  v32 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 56))(v25);
  result = (WTF *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v22);
  if (v30)
  {
    result = v28;
    if (v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      result = (WTF *)WTF::fastFree(result, v26);
    }
  }
  if (v37)
  {
    result = v35;
    if (v35)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      return (WTF *)WTF::fastFree(result, v26);
    }
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::fireNotificationEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[5];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 248);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v9 = *a5;
  *a5 = 0;
  WebCore::NotificationData::isolatedCopy();
  v34 = a4;
  *(_QWORD *)&v35 = v8;
  *((_QWORD *)&v35 + 1) = v9;
  v10 = WTF::fastMalloc((WTF *)0x130);
  *(_QWORD *)v10 = off_1E34EDCD8;
  *(_QWORD *)(v10 + 16) = a2;
  WTF::URL::URL(v10 + 32, v20);
  v11 = v21;
  v21 = 0u;
  *(_OWORD *)(v10 + 72) = v11;
  v12 = v22;
  v22 = 0u;
  *(_OWORD *)(v10 + 88) = v12;
  *(_QWORD *)(v10 + 104) = v23;
  *(_BYTE *)(v10 + 112) = v24;
  v13 = v25;
  v23 = 0;
  v25 = 0;
  *(_QWORD *)(v10 + 120) = v13;
  WTF::URL::URL(v10 + 128, v26);
  v14 = v30;
  *(_OWORD *)(v10 + 208) = v29;
  *(_OWORD *)(v10 + 224) = v14;
  v15 = v28;
  *(_OWORD *)(v10 + 176) = v27;
  *(_OWORD *)(v10 + 192) = v15;
  *(_QWORD *)(v10 + 240) = v31;
  *(_QWORD *)&v15 = v32;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)(v10 + 248) = v15;
  *(_WORD *)(v10 + 256) = v33;
  *(_BYTE *)(v10 + 272) = v34;
  v16 = v35;
  v35 = 0u;
  *(_OWORD *)(v10 + 280) = v16;
  WTF::callOnMainRunLoop();
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v18 = *((_QWORD *)&v35 + 1);
  *((_QWORD *)&v35 + 1) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v35;
  *(_QWORD *)&v35 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v20, v17);
}

WTF::StringImpl *WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  uint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  _BYTE v21[19];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 248);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v8 = *a4;
  *a4 = 0;
  WebCore::BackgroundFetchInformation::isolatedCopy((uint64_t)&v18, a3);
  v22 = v7;
  v23 = v8;
  v9 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v9 = &off_1E34EDD50;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 24) = v19;
  v10 = v20;
  v11 = *(_OWORD *)v21;
  *(_DWORD *)(v9 + 63) = *(_DWORD *)&v21[15];
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 72) = v22;
  v12 = v23;
  v19 = 0;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)(v9 + 80) = v12;
  v24 = v9;
  WTF::callOnMainRunLoop();
  v14 = v24;
  v24 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v23;
  v23 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 WebCore::BackgroundFetchInformation::isolatedCopy(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  WTF::String::isolatedCopy();
  result = *(__n128 *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  return result;
}

WTF::StringImpl *WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  uint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  _BYTE v21[19];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 248);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v8 = *a4;
  *a4 = 0;
  WebCore::BackgroundFetchInformation::isolatedCopy((uint64_t)&v18, a3);
  v22 = v7;
  v23 = v8;
  v9 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v9 = &off_1E34EDDC8;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 24) = v19;
  v10 = v20;
  v11 = *(_OWORD *)v21;
  *(_DWORD *)(v9 + 63) = *(_DWORD *)&v21[15];
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 72) = v22;
  v12 = v23;
  v19 = 0;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)(v9 + 80) = v12;
  v24 = v9;
  WTF::callOnMainRunLoop();
  v14 = v24;
  v24 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v23;
  v23 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::terminateWorker(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34EDE40;
  v3[1] = a2;
  v5 = v3;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::didSaveScriptsToDisk(WebCore::SWContextManager *a1)
{
  unsigned __int8 *result;
  uint64_t v2;

  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  result = (unsigned __int8 *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::didSaveScriptsToDisk();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::convertFetchToDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t *v5;
  WebKit::WebServiceWorkerFetchTaskClient *v6;
  WebKit::WebServiceWorkerFetchTaskClient *v7;
  uint64_t v8[2];
  WebKit::WebServiceWorkerFetchTaskClient *v9;

  v4 = (unsigned int *)(a1 + 256);
  v8[0] = a2;
  v8[1] = a4;
  v5 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 256), v8);
  WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::take(v4, v5, &v9);
  v6 = v9;
  if (v9)
  {
    *((_BYTE *)v9 + 233) = 1;
    WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(v6);
    v7 = v9;
    v9 = 0;
    if (v7)
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)v7 + 2);
  }
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::navigationPreloadIsReady(WebCore::SWContextManager *a1)
{
  unsigned __int8 *result;
  uint64_t v2;

  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  result = (unsigned __int8 *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::navigationPreloadIsReady();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  }
  return result;
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::navigationPreloadFailed(WebCore::SWContextManager *a1)
{
  unsigned __int8 *result;
  uint64_t v2;

  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  result = (unsigned __int8 *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::navigationPreloadFailed();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::postMessageToServiceWorkerClient(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  IPC::Encoder *v21;

  v10 = a3 + 8;
  v11 = *(uint64_t **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v12)
  {
    v13 = 32 * v12;
    do
    {
      {
        v14 = (_QWORD *)WebKit::WebMessagePortChannelProvider::singleton(void)::provider;
      }
      else
      {
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        v14[1] = 0;
        v14[2] = 0;
        *v14 = off_1E34EF690;
        WebKit::WebMessagePortChannelProvider::singleton(void)::provider = (uint64_t)v14;
      }
      WebKit::WebMessagePortChannelProvider::messagePortSentToRemote((uint64_t)v14, v11);
      v11 += 4;
      v13 -= 32;
    }
    while (v13);
  }
  v15 = *(_QWORD *)(a1 + 40);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2761;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v21 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v16, a2);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>((IPC::Encoder *)v16, (uint64_t *)a3);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v16, v10);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a5);
  IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v21, 0, 0);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::didFinishInstall(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t *v10[2];
  char v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v12 = a3;
  v4 = *(_QWORD *)(a1 + 40);
  v10[0] = a2;
  v10[1] = &v12;
  v11 = a4;
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2755;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::didFinishActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2754;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::setServiceWorkerHasPendingEvents(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2767;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::skipWaiting(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  WTF *v32;
  void *v33;
  IPC::Encoder *v34;

  v6 = a1[19];
  v8 = a1[20];
  v7 = a1 + 19;
  v9 = v8 + 1;
  a1[20] = v8 + 1;
  if (v6
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a1 + 19, 0), (v6 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (v8 - (v9 << 32)) ^ ((unint64_t)(v8 - (v9 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (uint64_t *)(v6 + 16 * v14);
  v16 = *v15;
  if (*v15)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != v9)
    {
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v6 + 16 * v14);
      v16 = *v15;
      ++v18;
      if (!*v15)
      {
        if (v17)
        {
          *v17 = 0;
          v17[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          v15 = v17;
        }
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  *v15 = v9;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v20 = *a3;
  *a3 = 0;
  *v19 = &off_1E34B0530;
  v19[1] = v20;
  if (!v20)
  {
    result = 139;
    __break(0xC471u);
    return result;
  }
  v21 = v15[1];
  v15[1] = (uint64_t)v19;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *v7;
  if (*v7)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v7;
  if (*v7)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v27 <= 2 * v26)
LABEL_21:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v7, v15);
LABEL_22:
  v28 = a1[5];
  v29 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v29 = 2768;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 528) = v29 + 16;
  *(_QWORD *)(v29 + 536) = v29 + 16;
  *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v29 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
  v34 = (IPC::Encoder *)v29;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v34, 0, 0);
  result = (uint64_t)v34;
  v34 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v30);
    return WTF::fastFree(v32, v33);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned __int8 **this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34EDE68;
  v4[1] = this;
  v4[2] = a2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::setScriptResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2766;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a3);
  IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::encode((IPC::Encoder *)v8, a4);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::workerTerminated(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2769;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::findClientByVisibleIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v6 = *(os_unfair_lock_s **)(a1 + 40);
  v7 = *a4;
  *a4 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34EDE90;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2756;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a3);
  v16[0] = (uint64_t)v8;
  v16[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v17, v16, 0, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::matchAll(_QWORD *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  void *v33;
  IPC::Encoder *result;
  WTF *v35;
  void *v36;
  IPC::Encoder *v37;

  v9 = a1 + 18;
  v8 = a1[18];
  v10 = a1[20];
  v11 = v10 + 1;
  a1[20] = v10 + 1;
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(a1 + 18),
        (v8 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (v10 - (v11 << 32)) ^ ((unint64_t)(v10 - (v11 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (_QWORD *)(v8 + 16 * v16);
  v18 = *v17;
  if (!*v17)
  {
LABEL_12:
    v21 = *a4;
    *a4 = 0;
    v22 = v17[1];
    *v17 = v11;
    v17[1] = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *v9;
    if (*v9)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v9;
    if (*v9)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_23;
    }
    else if (3 * v28 > 4 * v27)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v9);
    goto LABEL_23;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != v11)
  {
    if (v18 == -1)
      v19 = v17;
    v16 = (v16 + v20) & v12;
    v17 = (_QWORD *)(v8 + 16 * v16);
    v18 = *v17;
    ++v20;
    if (!*v17)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v9 - 16);
        v17 = v19;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  v29 = a1[5];
  v30 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v30 = 2758;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 528) = v30 + 16;
  *(_QWORD *)(v30 + 536) = v30 + 16;
  *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v30 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
  v37 = (IPC::Encoder *)v30;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v30, 8uLL, 8) = v11;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v30, 8uLL, 8) = a2;
  v31 = *a3;
  *IPC::Encoder::grow((IPC::Encoder *)v30, 1uLL, 1) = v31;
  v32 = a3[1];
  *IPC::Encoder::grow((IPC::Encoder *)v30, 1uLL, 1) = v32;
  IPC::Connection::sendMessageImpl(v29, (uint64_t *)&v37, 0, 0);
  result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v33);
    return (IPC::Encoder *)WTF::fastFree(v35, v36);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::matchAllCompleted(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 32));
  *(_QWORD *)&v11 = a1;
  *((_QWORD *)&v11 + 1) = a2;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(a3, (uint64_t)&v12);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = off_1E34EDEB8;
  *(_OWORD *)(v6 + 8) = v11;
  *(_QWORD *)(v6 + 24) = v12;
  v7 = v13;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)(v6 + 32) = v7;
  v14 = v6;
  WTF::callOnMainRunLoop();
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v8);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::openWindow(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v6 = *(os_unfair_lock_s **)(a1 + 40);
  v7 = *a4;
  *a4 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34EDEE0;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2760;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a3);
  v16[0] = (uint64_t)v8;
  v16[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v17, v16, 0, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::claim(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v4 = *(os_unfair_lock_s **)(a1 + 40);
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34EDF38;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2752;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::navigate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v8 = *(os_unfair_lock_s **)(a1 + 40);
  v9 = *a5;
  *a5 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34EDF60;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2759;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v19 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v12, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a3;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a4);
  v18[0] = (uint64_t)v10;
  v18[1] = v11;
  IPC::Connection::sendMessageWithAsyncReply(v8, &v19, v18, 0, 0);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::focus(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v4 = *(os_unfair_lock_s **)(a1 + 40);
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34EDF88;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2757;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v8, a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::close(WebKit::WebSWContextManagerConnection *this)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  WebCore::SWContextManager *v10;
  WebKit::WebProcess *v11;
  IPC::Encoder *v12;
  IPC::Encoder *v13;
  WebKit::WebProcess *v14;
  IPC::Encoder *v15[2];

  v15[1] = *(IPC::Encoder **)MEMORY[0x1E0C80C00];
  if ((WTF::isMainRunLoop(this) & 1) != 0)
  {
    v2 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((unsigned __int8 *)this + 8);
      LODWORD(v15[0]) = 67109120;
      HIDWORD(v15[0]) = v3;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "Service worker process is requested to stop all service workers (already stopped = %d)", (uint8_t *)v15, 8u);
    }
    if (!*((_BYTE *)this + 8))
    {
      *((_BYTE *)this + 8) = 1;
      v4 = *((_QWORD *)this + 5);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 216;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v15[0] = (IPC::Encoder *)v5;
      IPC::Connection::sendMessageImpl(v4, (uint64_t *)v15, 0, 0);
      v7 = v15[0];
      v15[0] = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, v6);
        v7 = (IPC::Encoder *)WTF::fastFree(v8, v9);
      }
      v10 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v7);
      WebCore::SWContextManager::stopAllServiceWorkers(v10);
      {
        v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v11 = WebKit::WebProcess::WebProcess(v14);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
      }
      WebKit::AuxiliaryProcess::enableTermination((uint64_t)v11);
    }
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 4);
    v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = &off_1E34EDFB0;
    *((_QWORD *)v12 + 1) = this;
    v15[0] = v12;
    WTF::callOnMainRunLoop();
    v13 = v15[0];
    v15[0] = 0;
    if (v13)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v13 + 8))(v13);
  }
}

uint64_t WebKit::WebSWContextManagerConnection::setThrottleState(unsigned __int8 **this, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34EDFD8;
  *(_QWORD *)(v4 + 8) = this;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::setInspectable(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E34EE000;
  *(_BYTE *)(v3 + 8) = a2;
  v5 = v3;
  WTF::callOnMainRunLoop();
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::isThrottleable(WebKit::WebSWContextManagerConnection *this)
{
  return *((unsigned __int8 *)this + 176);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::didFailHeartBeatCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2753;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::setAsInspected(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2765;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::reportConsoleMessage(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v11 = *(_QWORD *)(a1 + 40);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2762;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v17 = (IPC::Encoder *)v12;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a3;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a5);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a6;
  IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::removeNavigationFetch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 248);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 32));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34EE028;
  v7[1] = a1;
  v7[2] = a2;
  v7[3] = a3;
  v9 = v7;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didReceiveRedirection(uint64_t this, const WebCore::ResourceResponse *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  int v13;
  IPC::Encoder *v14;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 13);
  if (__ldaxr((unsigned __int8 *)(this + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](this + 13);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    *(_BYTE *)(v3 + 234) = 1;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1432;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v14 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v8, a2);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    this = WebKit::WebServiceWorkerFetchTaskClient::cleanup((WebKit::WebServiceWorkerFetchTaskClient *)v3);
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::cleanup(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  unsigned __int8 **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v2);
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  v6 = *((_BYTE *)this + 80);
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = off_1E34EE098;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v6;
  v9 = v7;
  WTF::ensureOnMainRunLoop();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

unsigned __int8 *WebKit::WebServiceWorkerFetchTaskClient::didReceiveResponse(unsigned __int8 *this, const WebCore::ResourceResponse *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  int v13;
  IPC::Encoder *v14;

  v3 = this;
  v4 = this + 13;
  if (__ldaxr(this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this + 13);
LABEL_5:
  v6 = *((_QWORD *)v3 + 2);
  if (v6)
  {
    v3[234] = 1;
    v7 = v3[80];
    if (v7)
      v3[81] = 1;
    v8 = *((_QWORD *)v3 + 5);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1433;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v14 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v9, a2);
    *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
    this = (unsigned __int8 *)v14;
    v14 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v10);
      this = (unsigned __int8 *)WTF::fastFree(v11, v12);
    }
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::didReceiveData(WebKit::WebServiceWorkerFetchTaskClient *this, const WebCore::SharedBuffer *a2)
{
  unsigned __int8 *v4;
  unsigned int *result;
  int v7;

  v4 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 13);
LABEL_5:
  result = WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal(this, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal(WebKit::WebServiceWorkerFetchTaskClient *this, const WebCore::SharedBuffer *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;

  result = (unsigned int *)*((_QWORD *)this + 2);
  if (result)
  {
    if (*((_BYTE *)this + 81))
    {
      v4 = *((unsigned int *)this + 24);
      if ((_DWORD)v4 != -1)
      {
        if ((_DWORD)v4 == 1)
        {
LABEL_7:
          WebCore::SharedBufferBuilder::ensureBuffer((WebKit::WebServiceWorkerFetchTaskClient *)((char *)this + 88));
          return (unsigned int *)WebCore::FragmentedSharedBuffer::append();
        }
        ((void (*)(uint64_t *, char *))off_1E34ED448[v4])(&v11, (char *)this + 88);
      }
      *((_QWORD *)this + 11) = 0;
      *((_DWORD *)this + 24) = 1;
      goto LABEL_7;
    }
    if (*((_BYTE *)this + 233))
    {
      v11 = *((_QWORD *)a2 + 6);
      do
        v5 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v5 + 1, (unsigned int *)a2));
      v12 = (unsigned int *)a2;
      v13 = 0;
      v6 = *((_QWORD *)a2 + 6);
      v14 = &v11;
      v15 = v6;
      IPC::Connection::send<Messages::ServiceWorkerDownloadTask::DidReceiveData>((uint64_t)result, (uint64_t)&v14, *((_QWORD *)this + 5));
    }
    else
    {
      v11 = *((_QWORD *)a2 + 6);
      do
        v8 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v8 + 1, (unsigned int *)a2));
      v12 = (unsigned int *)a2;
      v13 = 0;
      v9 = *((_QWORD *)a2 + 6);
      v14 = &v11;
      v15 = v9;
      IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidReceiveData>((uint64_t)result, (uint64_t)&v14, *((_QWORD *)this + 5));
    }
    v10 = v13;
    v13 = 0;
    if (v10)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v10);
    result = v12;
    v12 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
  }
  return result;
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinish(uint64_t a1, WebCore::FormData **a2)
{
  unsigned __int8 *v4;
  unsigned int *result;
  int v7;

  v4 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 13);
LABEL_5:
  result = WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(a1, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(uint64_t a1, WebCore::FormData **a2)
{
  unsigned int *result;
  WTF::StringImpl *v5;
  void *v6;
  WTF::StringImpl *v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int **v11;
  IPC::Encoder *v12;
  uint64_t v13;
  WebCore::FormData *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  __int16 v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  WebCore::FormData *v23;
  WTF::StringImpl *v24;
  IPC::Encoder *v25;
  WTF::StringImpl *v26;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v27;

  result = (unsigned int *)WebCore::FormData::asSharedBuffer(*a2);
  v5 = v24;
  if (v24)
  {
    v24 = 0;
    WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal((WebKit::WebServiceWorkerFetchTaskClient *)a1, v5);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v6);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v25);
    WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal((WTF::StringImpl *)a1, (const WebCore::NetworkLoadMetrics *)&v25);
    v8 = v27;
    v27 = 0;
    if (v8)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
    v9 = v26;
    v26 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = (unsigned int *)v24;
    v24 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
    return result;
  }
  if (!*(_QWORD *)(a1 + 16))
    return result;
  if (*(_BYTE *)(a1 + 81))
  {
    result = (unsigned int *)WebCore::FormData::isolatedCopy(*a2);
    v10 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v10 != -1)
    {
      v11 = (unsigned int **)(a1 + 88);
      if ((_DWORD)v10 == 2)
      {
        v12 = v25;
        v25 = 0;
        result = *v11;
        *v11 = (unsigned int *)v12;
        if (result)
        {
          WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)result);
          result = (unsigned int *)v25;
          v25 = 0;
          if (result)
            return (unsigned int *)WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)result);
        }
        return result;
      }
      result = (unsigned int *)((uint64_t (*)(WTF::StringImpl **, unsigned int **))off_1E34ED448[v10])(&v24, v11);
    }
    *(_QWORD *)(a1 + 88) = v25;
    *(_DWORD *)(a1 + 96) = 2;
    return result;
  }
  WebCore::FormData::asBlobURL(*a2);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *a2;
  if (*(_BYTE *)(a1 + 233))
  {
    *a2 = 0;
    v23 = v14;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = WTF::fastMalloc((WTF *)0x240);
    v17 = (IPC::Encoder *)v16;
    v18 = 1426;
  }
  else
  {
    *a2 = 0;
    v23 = v14;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = WTF::fastMalloc((WTF *)0x240);
    v17 = (IPC::Encoder *)v16;
    v18 = 1431;
  }
  *(_WORD *)v16 = v18;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v25 = v17;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v17, (_DWORD **)&v23);
  IPC::Connection::sendMessageImpl(v13, (uint64_t *)&v25, 0, 0);
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  if (v14)
    WTF::RefCounted<WebCore::FormData>::deref(v14);
  result = (unsigned int *)v24;
  v24 = 0;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal(WTF::StringImpl *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  NSObject *v5;
  IPC::Encoder *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v14;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v15;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  uint64_t v30;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = this;
    if (*((_BYTE *)this + 81))
    {
      v5 = qword_1ECE71848;
      if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (IPC::Encoder *)*((_QWORD *)v4 + 5);
        LODWORD(v22[0]) = 134217984;
        *(IPC::Encoder **)((char *)v22 + 4) = v6;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "ServiceWorkerFrameLoaderClient::didFinish while waiting, fetch identifier %llu", (uint8_t *)v22, 0xCu);
      }
      *((_BYTE *)v4 + 232) = 1;
      WebCore::NetworkLoadMetrics::isolatedCopy(a2);
      v8 = v25;
      *(_OWORD *)((char *)v4 + 136) = v24;
      *(_OWORD *)((char *)v4 + 152) = v8;
      *(_OWORD *)((char *)v4 + 168) = v26;
      v9 = v23;
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)v22;
      *(_OWORD *)((char *)v4 + 120) = v9;
      v10 = v28;
      v28 = 0;
      v11 = (WTF::StringImpl *)*((_QWORD *)v4 + 24);
      *((_QWORD *)v4 + 23) = v27;
      *((_QWORD *)v4 + 24) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      *(_OWORD *)((char *)v4 + 200) = v29;
      v14 = v31;
      v31 = 0;
      v15 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)v4 + 28);
      *((_QWORD *)v4 + 27) = v30;
      *((_QWORD *)v4 + 28) = v14;
      if (v15)
      {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v15);
        v16 = v31;
        v31 = 0;
        if (v16)
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
      }
      this = v28;
      v28 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        else
          *(_DWORD *)this -= 2;
      }
    }
    else
    {
      v12 = *((_QWORD *)this + 5);
      if (*((_BYTE *)this + 233))
      {
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1424;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v22[0] = (IPC::Encoder *)v13;
      }
      else
      {
        v17 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v17 = 1428;
        *(_QWORD *)(v17 + 8) = v12;
        *(_QWORD *)(v17 + 528) = v17 + 16;
        *(_QWORD *)(v17 + 536) = v17 + 16;
        *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v17 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
        v22[0] = (IPC::Encoder *)v17;
        IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode((IPC::Encoder *)v17, (uint64_t *)a2);
      }
      IPC::Connection::sendMessageImpl(v2, (uint64_t *)v22, 0, 0);
      v19 = v22[0];
      v22[0] = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v18);
        WTF::fastFree(v20, v21);
      }
      return (WTF::StringImpl *)WebKit::WebServiceWorkerFetchTaskClient::cleanup(v4);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebServiceWorkerFetchTaskClient::didFinish(WebKit::WebServiceWorkerFetchTaskClient *this, const WebCore::NetworkLoadMetrics *a2)
{
  unsigned __int8 *v4;
  WTF::StringImpl *result;
  int v7;

  v4 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 13);
LABEL_5:
  result = WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal(this, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didFail(WebKit::WebServiceWorkerFetchTaskClient *this, const WebCore::ResourceError *a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;

  v4 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 13);
LABEL_5:
  result = WebKit::WebServiceWorkerFetchTaskClient::didFailInternal((uint64_t)this, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didFailInternal(uint64_t this, const WebCore::ResourceError *a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  double v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  __int16 v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  char v26;
  _OWORD buf[3];
  WTF::StringImpl *v28;
  int v29;
  __int16 v30;
  CFTypeRef cf;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
    return this;
  v4 = this;
  if (*(_BYTE *)(this + 81))
  {
    v5 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = v6;
      _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "ServiceWorkerFrameLoaderClient::didFail while waiting, fetch identifier %llu", (uint8_t *)buf, 0xCu);
    }
    WebCore::ResourceErrorBase::isolatedCopy(a2);
    v7 = WTF::fastMalloc((WTF *)0x50);
    v8 = *(_QWORD *)&buf[0];
    *(_QWORD *)&buf[0] = 0;
    *(_QWORD *)v7 = v8;
    v10 = WTF::URL::URL(v7 + 8, (uint64_t *)buf + 1);
    v11 = v28;
    v28 = 0;
    *(_QWORD *)(v7 + 48) = v11;
    LODWORD(v11) = v29;
    *(_WORD *)(v7 + 60) = v30;
    *(_DWORD *)(v7 + 56) = (_DWORD)v11;
    v12 = cf;
    cf = 0;
    *(_QWORD *)(v7 + 64) = v12;
    *(_BYTE *)(v7 + 72) = v32;
    v13 = *(unsigned int *)(v4 + 96);
    if ((_DWORD)v13 != -1)
    {
      v9 = (WTF::StringImpl *)(v4 + 88);
      if ((_DWORD)v13 == 3)
      {
        v14 = *(WTF **)v9;
        *(_QWORD *)v9 = v7;
        if (v14)
          std::default_delete<WebCore::ResourceError>::operator()[abi:sn180100](v14, v9);
        goto LABEL_13;
      }
      ((void (*)(char *, WTF::StringImpl *, double))off_1E34ED448[v13])(&v26, v9, v10);
    }
    *(_QWORD *)(v4 + 88) = v7;
    *(_DWORD *)(v4 + 96) = 3;
LABEL_13:
    v19 = cf;
    cf = 0;
    if (v19)
      CFRelease(v19);
    v20 = v28;
    v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v9);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = (WTF::StringImpl *)*((_QWORD *)&buf[0] + 1);
    *((_QWORD *)&buf[0] + 1) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v9);
      else
        *(_DWORD *)v21 -= 2;
    }
    this = *(_QWORD *)&buf[0];
    *(_QWORD *)&buf[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
      else
        *(_DWORD *)this -= 2;
    }
    return this;
  }
  v15 = *(_QWORD *)(this + 40);
  if (*(_BYTE *)(this + 233))
  {
    v16 = WTF::fastMalloc((WTF *)0x240);
    v17 = (IPC::Encoder *)v16;
    v18 = 1423;
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x240);
    v17 = (IPC::Encoder *)v16;
    v18 = 1427;
  }
  *(_WORD *)v16 = v18;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  *(_QWORD *)&buf[0] = v17;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v17, a2);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)buf, 0, 0);
  v23 = *(IPC::Encoder **)&buf[0];
  *(_QWORD *)&buf[0] = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v24, v25);
  }
  return WebKit::WebServiceWorkerFetchTaskClient::cleanup((WebKit::WebServiceWorkerFetchTaskClient *)v4);
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didNotHandle(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 13);
LABEL_5:
  result = WebKit::WebServiceWorkerFetchTaskClient::didNotHandleInternal(this);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didNotHandleInternal(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidNotHandle>(result, *((_QWORD *)this + 5));
    return WebKit::WebServiceWorkerFetchTaskClient::cleanup(this);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::doCancel(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  unsigned __int8 *v2;
  unsigned __int8 **v4;
  uint64_t result;
  int v6;

  v2 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 13);
LABEL_5:
  v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v4);
  result = *((_QWORD *)this + 30);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::setCancelledCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WebKit::WebServiceWorkerFetchTaskClient::usePreload(unsigned __int8 *this)
{
  WebKit::WebServiceWorkerFetchTaskClient *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  int v11;
  IPC::Encoder *v12;

  v1 = (WebKit::WebServiceWorkerFetchTaskClient *)this;
  v2 = this + 13;
  if (__ldaxr(this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this + 13);
LABEL_5:
  v4 = *((_QWORD *)v1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)v1 + 5);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1434;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v12 = (IPC::Encoder *)v6;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    this = (unsigned __int8 *)WebKit::WebServiceWorkerFetchTaskClient::cleanup(v1);
  }
  v11 = __ldxr(v2);
  if (v11 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::contextIsStopping(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  int v11;
  IPC::Encoder *v12;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 13);
  if (__ldaxr((unsigned __int8 *)(this + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](this + 13);
LABEL_5:
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    if (*(_BYTE *)(v1 + 234))
    {
      if (!*(_BYTE *)(v1 + 232))
      {
        v5 = *(_QWORD *)(v1 + 40);
        v6 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v6 = 1435;
        *(_QWORD *)(v6 + 8) = v5;
        *(_QWORD *)(v6 + 528) = v6 + 16;
        *(_QWORD *)(v6 + 536) = v6 + 16;
        *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v6 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
        v12 = (IPC::Encoder *)v6;
        IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
        v8 = v12;
        v12 = 0;
        if (v8)
        {
          IPC::Encoder::~Encoder(v8, v7);
          WTF::fastFree(v9, v10);
        }
        this = WebKit::WebServiceWorkerFetchTaskClient::cleanup((WebKit::WebServiceWorkerFetchTaskClient *)v1);
      }
    }
    else
    {
      this = WebKit::WebServiceWorkerFetchTaskClient::didNotHandleInternal((WebKit::WebServiceWorkerFetchTaskClient *)v1);
    }
  }
  v11 = __ldxr(v2);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

uint64_t WebKit::WebServiceWorkerProvider::serviceWorkerConnection(WebKit::WebServiceWorkerProvider *this)
{
  WebKit::WebProcess *v1;
  WebKit::NetworkProcessConnection *v2;
  WebKit::WebProcess *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v4);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection(v1);
  return WebKit::NetworkProcessConnection::serviceWorkerConnection(v2);
}

uint64_t WebKit::WebServiceWorkerProvider::existingServiceWorkerConnection(WebKit::WebServiceWorkerProvider *this)
{
  WebKit::WebProcess *v1;
  WebKit::NetworkProcessConnection *v2;
  uint64_t v3;
  WebKit::WebProcess *v5;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = (WebKit::NetworkProcessConnection *)*((_QWORD *)v1 + 37);
  if (!v2)
    return 0;
  ++*((_DWORD *)v2 + 4);
  v3 = WebKit::NetworkProcessConnection::serviceWorkerConnection(v2);
  if (*((_DWORD *)v2 + 4) == 1)
    (*(void (**)(WebKit::NetworkProcessConnection *))(*(_QWORD *)v2 + 8))(v2);
  else
    --*((_DWORD *)v2 + 4);
  return v3;
}

IPC::Encoder *WebKit::WebServiceWorkerProvider::terminateWorkerForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  WebKit::NetworkProcessConnection *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  _QWORD v18[2];
  IPC::Encoder *v19;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection(v5);
  v7 = WebKit::NetworkProcessConnection::serviceWorkerConnection(v6) + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2747;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v19 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  v10 = *a3;
  *a3 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34ED600;
  v11[1] = v10;
  v18[0] = v11;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v19, v18, 0);
  v13 = v18[0];
  v18[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerContextManagerConnection::WebSharedWorkerContextManagerConnection(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, WebKit::WebPage *a7, uint64_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  const WebKit::WebPreferencesStore *v13;
  WebKit::WebProcess *v14;
  WebKit::WebProcess *v16;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E34ED150;
  *(_QWORD *)(a1 + 16) = &unk_1E34ED190;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  WebCore::standardUserAgentWithApplicationName();
  WebKit::WebUserContentController::getOrCreate(*a8, (uint64_t **)(a1 + 80));
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  WebKit::WebUserContentController::addContentRuleLists(*(_QWORD *)(a1 + 80), (uint64_t)(a8 + 1));
  WebKit::WebPage::updatePreferencesGenerated(a7, v13);
  std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(a1 + 88, (uint64_t *)a7);
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v16);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*((_DWORD *)v14 + 6);
  return a1;
}

void WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection(WebKit::WebSharedWorkerContextManagerConnection *this)
{
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;

  std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 88);
  v3 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 4);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v6);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection(WebKit::WebSharedWorkerContextManagerConnection *this)
{
  WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection((WebKit::WebSharedWorkerContextManagerConnection *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection((WebKit::WebSharedWorkerContextManagerConnection *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::WebSharedWorkerContextManagerConnection::establishConnection(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  IPC::Encoder *v16;

  v3 = *(os_unfair_lock_s **)(a1 + 32);
  v4 = (uint64_t *)(a1 + 40);
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34EE0C0;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 230;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v4);
  v15[0] = (uint64_t)v6;
  v15[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v16, v15, 0, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerContextManagerConnection::postErrorToWorkerObject(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t *a6, char a7)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;

  v13 = *(_QWORD *)(a1 + 32);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2789;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v19 = (IPC::Encoder *)v14;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 4uLL, 4) = a4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 4uLL, 4) = a5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a6);
  *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = a7;
  IPC::Connection::sendMessageImpl(v13, (uint64_t *)&v19, 0, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  void *v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  WebKit::WebProcess *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WebKit::WebProcess *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _QWORD *v31;
  WTF *v32;
  _QWORD *v33;
  uint64_t v34;
  WTF *v35;
  WebCore::Settings *v36;
  WebKit::WebProcess *v37;
  WebCore::Settings *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WebCore::Process *WeakRandomUUIDVersion4;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  WebKit::WebProcess *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  int v54;
  WTF *v55;
  uint64_t v56;
  WebCore::SharedWorkerContextManager *v57;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  WTF *v67;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF *v73;
  void *v74;
  WebKit::WebProcess *v75;
  WebKit::WebProcess *v76;
  WebKit::WebProcess *v77;
  WebKit::WebProcess *v78;
  WebKit::WebProcess *v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  uint8_t buf[4];
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int *v87[9];
  WTF *v88;
  _DWORD *v89;
  _DWORD *v90;
  _QWORD *v91;
  _DWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v84 = a3;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerContextManagerConnection::launchSharedWorker: sharedWorkerIdentifier=%llu", buf, 0xCu);
  }
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v75 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v75);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  if (!*((_BYTE *)v14 + 672))
    goto LABEL_103;
  WebCore::pageConfigurationWithEmptyClients();
  v15 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)v15 = off_1E34EE550;
  v16 = v92;
  v92 = (_DWORD *)v15;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  WebKit::WebDatabaseProvider::getOrCreate(*(_QWORD *)(a1 + 48), &v82);
  v17 = v88;
  v88 = v82;
  if (v17)
  {
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
  }
  v18 = *(_QWORD *)(a1 + 56);
  v19 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)v19 = off_1E34EB3D8;
  *(_QWORD *)(v19 + 16) = v18;
  v20 = v85;
  v85 = (unsigned int *)v19;
  if (v20)
  {
    v69 = v20 + 2;
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  {
    v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v76 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v21 = WebKit::WebProcess::WebProcess(v76);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v21;
  }
  v22 = (_DWORD *)*((_QWORD *)v21 + 50);
  ++v22[2];
  v23 = v90;
  v90 = v22;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = *(_DWORD **)(a1 + 80);
  ++v24[2];
  v25 = v89;
  v89 = v24;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  v26 = WTF::fastMalloc((WTF *)0xC8);
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_OWORD *)(v26 + 128) = 0u;
  *(_OWORD *)(v26 + 144) = 0u;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_QWORD *)(v26 + 192) = 0;
  *(_QWORD *)WebCore::LibWebRTCProvider::LibWebRTCProvider((WebCore::LibWebRTCProvider *)v26) = off_1E34EDA98;
  v27 = v86;
  v86 = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  {
    v28 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v77 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v28 = WebKit::WebProcess::WebProcess(v77);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v28;
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)v28 + 98);
  if (v29)
    *(_DWORD *)v29 += 2;
  v30 = *((_QWORD *)v28 + 99);
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v31 = off_1E34EE110;
  v31[1] = 0;
  if (v29)
    *(_DWORD *)v29 += 2;
  v31[2] = v29;
  v31[3] = v30;
  v82 = 0;
  v33 = v91;
  v91 = v31;
  if (v33)
  {
    (*(void (**)(_QWORD *))(*v33 + 8))(v33);
    v32 = v82;
    v82 = 0;
    if (v32)
      std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100]((int)&v82, v32);
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v32);
    else
      *(_DWORD *)v29 -= 2;
  }
  v34 = WTF::fastMalloc((WTF *)0x50);
  WebKit::RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient(v34, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (_DWORD **)(a1 + 72));
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = &off_1E34EE0E8;
  *((_QWORD *)v35 + 1) = v34;
  v82 = v35;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>>::__assign_alt[abi:sn180100]<0ul,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>>((unsigned int *)v87, v87, (unsigned int **)&v82);
  if (v82)
    (*(void (**)(WTF *))(*(_QWORD *)v82 + 8))(v82);
  WebCore::Page::create();
  if (*(_BYTE *)(a1 + 136))
  {
    WebKit::WebPage::updateSettingsGenerated((WebKit::WebPage *)(a1 + 88), *((const WebKit::WebPreferencesStore **)v82 + 14), v36);
    if (*(_BYTE *)(a1 + 136))
    {
      {
        WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::valueForKey<unsigned int>(a1 + 88, a1 + 112, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
      WebCore::Settings::setStorageBlockingPolicy();
      goto LABEL_38;
    }
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
LABEL_38:
  {
    v37 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v78 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v37 = WebKit::WebProcess::WebProcess(v78);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v37;
  }
  if (*((_BYTE *)v37 + 618))
  {
    if (*(_BYTE *)(a1 + 136))
      v38 = (WebCore::Settings *)(a1 + 88);
    else
      v38 = 0;
    WebKit::WebPage::adjustSettingsForLockdownMode(*((WebKit::WebPage **)v82 + 14), v38, v36);
  }
  v39 = (WTF::StringImpl **)(a6 + 136);
  v40 = *(_QWORD *)(a6 + 136);
  if (v40 && *(_DWORD *)(v40 + 4))
    v39 = WTF::String::operator=(v39, (WTF::StringImpl *)(a1 + 72));
  if (!*(_BYTE *)(a6 + 112))
  {
    WeakRandomUUIDVersion4 = (WebCore::Process *)WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)v39);
    v43 = v42;
    v44 = WebCore::Process::identifier(WeakRandomUUIDVersion4);
    v45 = *(unsigned __int8 *)(a6 + 112);
    *(_QWORD *)(a6 + 80) = WeakRandomUUIDVersion4;
    *(_QWORD *)(a6 + 88) = v43;
    *(_QWORD *)(a6 + 96) = v44;
    if (!v45)
      *(_BYTE *)(a6 + 112) = 1;
  }
  WebCore::Page::setupForRemoteWorker();
  v46 = v82;
  ++*(_DWORD *)v82;
  v80 = v46;
  {
    v47 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v79 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v47 = WebKit::WebProcess::WebProcess(v79);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v47;
  }
  v48 = *((_QWORD *)v47 + 46);
  v49 = WTF::fastMalloc((WTF *)0xC0);
  v81 = MEMORY[0x19AEB279C](v49, &v80, a3, a2, a5, a4, a6, v48);
  v50 = v80;
  v80 = 0;
  if (v50)
    WTF::RefCounted<WebCore::Page>::deref(v50);
  v51 = *(_QWORD *)(v49 + 96);
  v52 = *(_QWORD *)(v51 + 8);
  if (__ldaxr((unsigned __int8 *)v52))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v52))
  {
    goto LABEL_59;
  }
  MEMORY[0x19AEABB3C](v52);
LABEL_59:
  ++*(_QWORD *)(v52 + 8);
  v54 = __ldxr((unsigned __int8 *)v52);
  if (v54 != 1)
  {
    __clrex();
    goto LABEL_63;
  }
  if (__stlxr(0, (unsigned __int8 *)v52))
LABEL_63:
    WTF::Lock::unlockSlow((WTF::Lock *)v52);
  v55 = v82;
  v56 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v56 + 16) = *((_DWORD *)v55 + 78);
  *(_QWORD *)v56 = off_1E34F0D08;
  *(_QWORD *)(v56 + 8) = v51;
  *(_QWORD *)(v56 + 24) = 0;
  v57 = *(WebCore::SharedWorkerContextManager **)(v51 + 120);
  *(_QWORD *)(v51 + 120) = v56;
  if (v57)
    v57 = (WebCore::SharedWorkerContextManager *)(*(uint64_t (**)(WebCore::SharedWorkerContextManager *))(*(_QWORD *)v57 + 8))(v57);
  WebCore::SharedWorkerContextManager::singleton(v57);
  WebCore::SharedWorkerContextManager::registerSharedWorkerThread();
  a6 = *(_QWORD *)(v51 + 8);
  if (__ldaxr((unsigned __int8 *)a6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a6))
  {
    goto LABEL_70;
  }
  MEMORY[0x19AEABB3C](a6);
LABEL_70:
  v59 = *(_QWORD *)(a6 + 8);
  a5 = v59 - 1;
  *(_QWORD *)(a6 + 8) = v59 - 1;
  if (v59 != 1)
  {
    v60 = 0;
    v61 = 1;
    goto LABEL_72;
  }
LABEL_104:
  v72 = *(_QWORD *)(a6 + 16);
  v60 = *(_QWORD *)(a6 + 24);
  *(_QWORD *)(a6 + 24) = 0;
  v61 = v72 != 0;
LABEL_72:
  v62 = __ldxr((unsigned __int8 *)a6);
  if (v62 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a6))
    {
      if (a5)
        goto LABEL_82;
      goto LABEL_78;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)a6);
  if (a5)
    goto LABEL_82;
LABEL_78:
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  if (!v61)
    WTF::fastFree((WTF *)a6, v13);
LABEL_82:
  v63 = v81;
  v81 = 0;
  if (v63)
  {
    v64 = (unsigned int *)(v63 + 8);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, (unsigned int *)(v63 + 8));
      v73 = (WTF *)MEMORY[0x19AEB27A8]();
      WTF::fastFree(v73, v74);
    }
  }
  v67 = v82;
  v82 = 0;
  if (v67)
    WTF::RefCounted<WebCore::Page>::deref(v67);
  return MEMORY[0x19AEAFAB4](buf);
}

void WebKit::WebSharedWorkerContextManagerConnection::close(WebKit::WebSharedWorkerContextManagerConnection *this)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  WebCore::SharedWorkerContextManager *v10;
  WebKit::WebProcess *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13[2];

  v13[1] = *(IPC::Encoder **)MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 8);
    LODWORD(v13[0]) = 67109120;
    HIDWORD(v13[0]) = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerContextManagerConnection::close: Shared worker process is requested to stop all shared workers (already stopped = %d)", (uint8_t *)v13, 8u);
  }
  if (!*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 1;
    v4 = *((_QWORD *)this + 4);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 217;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v13[0] = (IPC::Encoder *)v5;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)v13, 0, 0);
    v7 = v13[0];
    v13[0] = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      v7 = (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
    v10 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton(v7);
    WebCore::SharedWorkerContextManager::stopAllSharedWorkers(v10);
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v12);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    WebKit::AuxiliaryProcess::enableTermination((uint64_t)v11);
  }
}

IPC::Encoder *WebKit::WebSharedWorkerContextManagerConnection::sharedWorkerTerminated(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  _BYTE v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v11 = 134217984;
    *(_QWORD *)&v11[4] = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerContextManagerConnection::sharedWorkerTerminated: sharedWorkerIdentifier=%llu", v11, 0xCu);
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2790;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  *(_QWORD *)v11 = v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)v11, 0, 0);
  result = *(IPC::Encoder **)v11;
  *(_QWORD *)v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WebKit::WebSharedWorkerObjectConnection *WebKit::WebSharedWorkerObjectConnection::WebSharedWorkerObjectConnection(WebKit::WebSharedWorkerObjectConnection *this)
{
  _QWORD *v2;
  NSObject *v3;
  _BOOL8 v4;
  int v6;
  WebKit::WebSharedWorkerObjectConnection *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)WebCore::SharedWorkerObjectConnection::SharedWorkerObjectConnection(this);
  *v2 = off_1E34ED1C8;
  v2[3] = &unk_1E34ED220;
  v2[4] = &unk_1E34ED270;
  v2[5] = 0;
  v3 = qword_1ECE718C0;
  v4 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v6 = 134218240;
    v7 = this;
    v8 = 2048;
    v9 = WebCore::Process::identifier((WebCore::Process *)v4);
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::WebSharedWorkerObjectConnection:", (uint8_t *)&v6, 0x16u);
  }
  return this;
}

void WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(unsigned int **this)
{
  NSObject *v2;
  _BOOL8 v3;
  void *v4;
  int v5;
  WebKit::WebSharedWorkerObjectConnection *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718C0;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v5 = 134218240;
    v6 = (WebKit::WebSharedWorkerObjectConnection *)this;
    v7 = 2048;
    v8 = WebCore::Process::identifier((WebCore::Process *)v3);
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection:", (uint8_t *)&v5, 0x16u);
  }
  this[4] = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 5, v4);
  WebCore::SharedWorkerObjectConnection::~SharedWorkerObjectConnection((WebCore::SharedWorkerObjectConnection *)this);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(unsigned int **this)
{
  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3);
}

{
  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 4);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3);
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 4);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSharedWorkerObjectConnection::messageSenderConnection(WebKit::WebSharedWorkerObjectConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t `non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::messageSenderConnection(WebKit::WebSharedWorkerObjectConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::requestSharedWorker(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  NSObject *v12;
  _BOOL8 v13;
  uint64_t v14;
  char *v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  IPC::Encoder *result;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE718C0;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    v14 = WebCore::Process::identifier((WebCore::Process *)v13);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v28);
    WTF::String::utf8();
    if (v29)
      v15 = (char *)v29 + 16;
    else
      v15 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    v31 = 2048;
    v32 = v14;
    v33 = 2082;
    v34 = v15;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::requestSharedWorker: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v17 = v29;
    v29 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v16);
      else
        --*(_DWORD *)v17;
    }
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  {
    v19 = (_QWORD *)WebKit::WebMessagePortChannelProvider::singleton(void)::provider;
  }
  else
  {
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v19[1] = 0;
    v19[2] = 0;
    *v19 = off_1E34EF690;
    WebKit::WebMessagePortChannelProvider::singleton(void)::provider = (uint64_t)v19;
  }
  WebKit::WebMessagePortChannelProvider::messagePortSentToRemote((uint64_t)v19, a5);
  v21 = *(_QWORD *)(a1 + 24);
  v20 = a1 + 24;
  v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2785;
  *(_QWORD *)(v23 + 8) = v22;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v29 = (WTF *)v23;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode((IPC::Encoder *)v23, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a3;
  *(_QWORD *)buf = a4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v23, (uint64_t *)buf);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v23, a5);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v23, a5 + 2);
  IPC::ArgumentCoder<WebKit::PolicyDecisionConsoleMessage,void>::encode((IPC::Encoder *)v23, a6);
  (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)v20 + 32))(v20, &v29, 0);
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::sharedWorkerObjectIsGoingAway(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  char *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  _BYTE buf[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718C0;
  v9 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = WebCore::Process::identifier((WebCore::Process *)v9);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v23);
    WTF::String::utf8();
    if (v24)
      v11 = (char *)v24 + 16;
    else
      v11 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    v26 = 2048;
    v27 = v10;
    v28 = 2082;
    v29 = v11;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::sharedWorkerObjectIsGoingAway: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  v15 = a1 + 24;
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2787;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v24 = (WTF *)v18;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode((IPC::Encoder *)v18, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a3;
  *(_QWORD *)buf = a4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, (uint64_t *)buf);
  (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)v15 + 32))(v15, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::suspendForBackForwardCache(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  char *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  _BYTE buf[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718C0;
  v9 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = WebCore::Process::identifier((WebCore::Process *)v9);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v23);
    WTF::String::utf8();
    if (v24)
      v11 = (char *)v24 + 16;
    else
      v11 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    v26 = 2048;
    v27 = v10;
    v28 = 2082;
    v29 = v11;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::suspendForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  v15 = a1 + 24;
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2788;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v24 = (WTF *)v18;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode((IPC::Encoder *)v18, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a3;
  *(_QWORD *)buf = a4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, (uint64_t *)buf);
  (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)v15 + 32))(v15, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::resumeForBackForwardCache(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  char *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  _BYTE buf[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718C0;
  v9 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = WebCore::Process::identifier((WebCore::Process *)v9);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v23);
    WTF::String::utf8();
    if (v24)
      v11 = (char *)v24 + 16;
    else
      v11 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    v26 = 2048;
    v27 = v10;
    v28 = 2082;
    v29 = v11;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::resumeForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  v15 = a1 + 24;
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2786;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v24 = (WTF *)v18;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode((IPC::Encoder *)v18, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a3;
  *(_QWORD *)buf = a4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, (uint64_t *)buf);
  (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)v15 + 32))(v15, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

WebKit::WebSharedWorkerObjectConnection *WebKit::WebSharedWorkerProvider::sharedWorkerConnection(WebKit::WebSharedWorkerProvider *this)
{
  WebKit::WebProcess *v1;
  WebKit::NetworkProcessConnection *v2;
  WebKit::WebProcess *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v4);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection(v1);
  return WebKit::NetworkProcessConnection::sharedWorkerConnection(v2);
}

uint64_t WebKit::WebSWClientConnection::serverConnectionIdentifier(WebKit::WebSWClientConnection *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebKit::WebSWClientConnection::messageSenderDestinationID(WebKit::WebSWClientConnection *this)
{
  return 0;
}

uint64_t WebKit::WebSWContextManagerConnection::pageIdentifier(WebKit::WebSWContextManagerConnection *this)
{
  return *((_QWORD *)this + 16);
}

unsigned __int8 **WebKit::WebSWContextManagerConnection::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
}

unsigned __int8 *WebKit::WebSWContextManagerConnection::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(this[4], a2);
}

void WebKit::WebServiceWorkerFetchTaskClient::~WebServiceWorkerFetchTaskClient(WebKit::WebServiceWorkerFetchTaskClient *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  char v8;

  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 24);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E34ED448[v6])(&v8, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
}

{
  uint64_t v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 **v8;
  char v9;

  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 24);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E34ED448[v6])(&v9, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48);
  v8 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v8);
  WTF::fastFree(this, v7);
}

void WebKit::WebServiceWorkerProvider::~WebServiceWorkerProvider(WebKit::WebServiceWorkerProvider *this)
{
  WebCore::ServiceWorkerProvider::~ServiceWorkerProvider(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebSharedWorkerObjectConnection::messageSenderDestinationID(WebKit::WebSharedWorkerObjectConnection *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::messageSenderDestinationID(WebKit::WebSharedWorkerObjectConnection *this)
{
  return 0;
}

void WebKit::WebSharedWorkerProvider::~WebSharedWorkerProvider(WebKit::WebSharedWorkerProvider *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 192))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 176, a2);
    v4 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::default_delete<WebKit::RemoteWorkerFrameLoaderClient>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>::copy(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  char *v20;

  v3 = result;
  v4 = *a2;
  v5 = *((unsigned int *)a2 + 2);
  v6 = *((_DWORD *)a2 + 3);
  if (!v6)
    goto LABEL_24;
  v7 = *a2;
  if ((_DWORD)v5)
  {
    v8 = 0;
    while (!*(_QWORD *)(v4 + v8))
    {
      v8 += 24;
      if (24 * v5 == v8)
        goto LABEL_24;
    }
    v7 = v4 + v8;
  }
  v9 = v4 + 24 * v5;
  if (v7 == v9)
    goto LABEL_24;
LABEL_9:
  WTF::String::isolatedCopy();
  v11 = v17;
  v17 = 0;
  v12 = *(WTF::StringImpl **)v7;
  *(_QWORD *)v7 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(unsigned int *)(v7 + 16);
  if ((_DWORD)v14 != -1)
  {
    v20 = &v19;
    ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))off_1E34ED3E8[v14])(&v17, &v20, v7 + 8);
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v7 + 8, (uint64_t)&v17);
    if (v18 != -1)
      result = ((uint64_t (*)(char **, WTF::StringImpl **))off_1E34ED3C8[v18])(&v20, &v17);
    while (1)
    {
      v7 += 24;
      if (v7 == v9)
        break;
      if (*(_QWORD *)v7)
      {
        if (v7 != v9)
          goto LABEL_9;
        break;
      }
    }
    v4 = *a2;
    LODWORD(v5) = *((_DWORD *)a2 + 2);
    v6 = *((_DWORD *)a2 + 3);
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    *(_QWORD *)v3 = v4;
    *(_DWORD *)(v3 + 8) = v5;
    *(_DWORD *)(v3 + 12) = v6;
    v15 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(v3 + 16) = v15;
    LOBYTE(v15) = *((_BYTE *)a2 + 20);
    *((_BYTE *)a2 + 20) = 0;
    *(_BYTE *)(v3 + 20) = v15;
    return result;
  }
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_(v16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_(_DWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  *a2 = *a1;
  a2[2] = 2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 3;
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::NotificationPayload>>::copy<std::optional<WebCore::NotificationPayload>>(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  char v4;
  __int16 v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  char v18;
  WTF::StringImpl *v19[2];
  WTF::StringImpl *v20[2];
  WTF::StringImpl *v21;
  __int16 v22;
  char v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;

  v2 = (uint64_t)result;
  if (*(_BYTE *)(a2 + 136))
  {
    WTF::URL::isolatedCopy();
    WTF::String::isolatedCopy();
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_BYTE *)(a2 + 56);
    v4 = *(_BYTE *)(a2 + 120);
    if (v4)
    {
      v25 = *(_BYTE *)(a2 + 64);
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      v5 = *(_WORD *)(a2 + 112);
      v4 = v25;
      *(_OWORD *)v19 = v26;
      *(_OWORD *)v20 = v27;
      v21 = v28;
      v22 = v5;
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
    v18 = v4;
    v23 = v6;
    v24 = *(_BYTE *)(a2 + 128);
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>(v2, (uint64_t)&v14);
    if (v23)
    {
      v8 = v21;
      v21 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = v20[1];
      v20[1] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v20[0];
      v20[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v19[1];
      v19[1] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v19[0];
      v19[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 136) = 0;
  }
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v2;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;

  v2 = result;
  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *((_DWORD *)result + 3);
  if (v5)
  {
    v6 = v4 + 192 * v5;
    do
    {
      WebCore::ServiceWorkerClientData::isolatedCopy();
      *(_WORD *)(v4 + 32) = v19;
      *(_OWORD *)v4 = v17;
      *(_OWORD *)(v4 + 16) = v18;
      WTF::URL::operator=(v4 + 40, (WTF::StringImpl *)&v20);
      WTF::URL::operator=(v4 + 80, (WTF::StringImpl *)&v21);
      v9 = v23;
      v8 = v24;
      v10 = v25;
      *(_OWORD *)(v4 + 120) = v22;
      *(_QWORD *)(v4 + 168) = v10;
      *(_OWORD *)(v4 + 152) = v8;
      *(_OWORD *)(v4 + 136) = v9;
      v11 = *(unsigned int *)(v4 + 188);
      if ((_DWORD)v11)
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v4 + 176), (WTF::StringImpl *)(*(_QWORD *)(v4 + 176) + 8 * v11));
      v12 = *(WTF **)(v4 + 176);
      if (v12)
      {
        *(_QWORD *)(v4 + 176) = 0;
        *(_DWORD *)(v4 + 184) = 0;
        WTF::fastFree(v12, v7);
      }
      v13 = v26;
      v26 = 0;
      *(_QWORD *)(v4 + 176) = v13;
      LODWORD(v13) = v27;
      v27 = 0;
      *(_DWORD *)(v4 + 184) = v13;
      LODWORD(v13) = v28;
      v28 = 0;
      *(_DWORD *)(v4 + 188) = v13;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v7);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      result = v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
      v4 += 192;
    }
    while (v4 < v6);
    v4 = *(_QWORD *)v2;
    v5 = *((_DWORD *)v2 + 3);
  }
  *(_QWORD *)a2 = v4;
  v16 = *((_DWORD *)v2 + 2);
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ServiceWorkerClientData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 192 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ServiceWorkerClientData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 22), a2);
      v4 = v3[10];
      v3[10] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = v3[5];
      v3[5] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 24;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

void WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::~BlobLoader(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::didReceiveData(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int *result;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 1);
  v4 = (unsigned __int8 *)(v3 + 13);
  if (__ldaxr((unsigned __int8 *)(v3 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v3 + 13);
LABEL_5:
  result = *(unsigned int **)(v3 + 16);
  if (result)
  {
    if (*(_BYTE *)(v3 + 233))
    {
      v14 = *((_QWORD *)a2 + 6);
      do
        v7 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v7 + 1, (unsigned int *)a2));
      v15 = (unsigned int *)a2;
      v16 = 0;
      v8 = *((_QWORD *)a2 + 6);
      v17 = &v14;
      v18 = v8;
      IPC::Connection::send<Messages::ServiceWorkerDownloadTask::DidReceiveData>((uint64_t)result, (uint64_t)&v17, *(_QWORD *)(v3 + 40));
    }
    else
    {
      v14 = *((_QWORD *)a2 + 6);
      do
        v10 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v10 + 1, (unsigned int *)a2));
      v15 = (unsigned int *)a2;
      v16 = 0;
      v11 = *((_QWORD *)a2 + 6);
      v17 = &v14;
      v18 = v11;
      IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidReceiveData>((uint64_t)result, (uint64_t)&v17, *(_QWORD *)(v3 + 40));
    }
    v12 = v16;
    v16 = 0;
    if (v12)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
    result = v15;
    v15 = 0;
    if (result)
      result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v9);
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 13));
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 13));
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::didSucceed(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  void (**v8)(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *__hidden);
  __int128 v9;
  char v10;
  WTF::StringImpl *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;

  v2 = *((_QWORD *)this + 1);
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v8);
  WebKit::WebServiceWorkerFetchTaskClient::didFinish((WebKit::WebServiceWorkerFetchTaskClient *)v2, (const WebCore::NetworkLoadMetrics *)&v8);
  v4 = v12;
  v12 = 0;
  if (v4)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  v5 = v11;
  v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  LOBYTE(v8) = 0;
  v10 = 0;
  if (*(_BYTE *)(v2 + 72))
  {
    v8 = &off_1E34ED418;
    v6 = *(_OWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    v9 = v6;
    v10 = 1;
  }
  std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100]((unsigned int *)(v2 + 48));
  return std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8);
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::didFail(WebKit::WebServiceWorkerFetchTaskClient **this, const WebCore::ResourceError *a2)
{
  return WebKit::WebServiceWorkerFetchTaskClient::didFail(this[1], a2);
}

unsigned int *std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100](unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;

  if (*((_BYTE *)result + 24))
  {
    v1 = result;
    result = (unsigned int *)*((_QWORD *)result + 2);
    *((_QWORD *)v1 + 2) = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 64))(result);
    v2 = *((_QWORD *)v1 + 1);
    *((_QWORD *)v1 + 1) = 0;
    if (v2)
      result = WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    *((_BYTE *)v1 + 24) = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return a1;
}

uint64_t std::default_delete<WebCore::ResourceError>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (this)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, this);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    WTF::fastFree(this, this);
  }
}

void WebKit::WebStorageProvider::~WebStorageProvider(WebKit::WebStorageProvider *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  WTF::fastFree(this, a2);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore19SharedBufferBuilderEN3WTF3RefINS8_8FormDataENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSA_9UniqueRefINS8_13ResourceErrorEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

WTF::RefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore19SharedBufferBuilderEN3WTF3RefINS8_8FormDataENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSA_9UniqueRefINS8_13ResourceErrorEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::RefCountedBase **a2)
{
  WTF::RefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore19SharedBufferBuilderEN3WTF3RefINS8_8FormDataENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSA_9UniqueRefINS8_13ResourceErrorEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *result;

  result = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::ResourceError>::operator()[abi:sn180100](result, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::scheduleJobInServer(WebCore::ServiceWorkerJobData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34ED478;
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::scheduleJobInServer(WebCore::ServiceWorkerJobData const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34ED478;
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)(a1 + 32), a2);
  return WTF::fastFree((WTF *)a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::scheduleJobInServer(WebCore::ServiceWorkerJobData const&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v1 = *(_QWORD **)(a1 + 16);
  v2 = a1 + 32;
  v3 = v1[3];
  v1 += 3;
  v4 = (*(uint64_t (**)(_QWORD *))(v3 + 56))(v1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2740;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::encode((IPC::Encoder *)v5, v2);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v1 + 32))(v1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E34ED4A0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E34ED4A0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = v2[3];
  v2 += 3;
  v4 = (*(uint64_t (**)(_QWORD *))(v3 + 56))(v2);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2737;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v2 + 32))(v2, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED4C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED4C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  char v8[8];
  _DWORD *v9;
  int v10;
  char v11;
  char v12[8];
  _DWORD *v13;
  int v14;
  char v15;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v2);
  if (v10)
  {
    if (v10 == 1)
    {
      v3 = v8[0];
      v4 = v9;
      if (v9)
        *v9 += 2;
      v12[0] = v3;
      v13 = v4;
      v14 = 1;
      goto LABEL_13;
    }
    v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  v14 = 0;
LABEL_13:
  v6 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 16))(v6, v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v14 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E34ED4F0[v14])(&v15, v12);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34ED4E0[v10])(v12, v8);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34ED4F0[v4])(&v5, v3);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_1E34ED510;
  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34ED2C0[v4])(&v7, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)this = &off_1E34ED510;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34ED2C0[v4])(&v7, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  v2 = (_QWORD *)a1[1];
  v3 = (uint64_t)(a1 + 3);
  v4 = a1 + 7;
  v5 = v2[3];
  v2 += 3;
  v6 = (*(uint64_t (**)(_QWORD *))(v5 + 56))(v2);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2734;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v7, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  v8 = a1[2];
  a1[2] = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34ED538;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v2 + 40))(v2, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchRegistration,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED538;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchRegistration,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED538;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchRegistration,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  _BYTE v7[360];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>>(v7, a2), !v8))
  {
    v7[0] = 0;
    v7[352] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[352];
  char v25;
  unsigned __int8 v26;
  _BYTE v27[352];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = (WTF::StringImpl *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_18;
  }
  v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v6;
    v16 = 0;
LABEL_18:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v5 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_19;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v6)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v19 + 16))(v19, v5);
    v24[0] = 0;
    v26 = 0;
LABEL_21:
    v12 = (WTF::StringImpl *)*a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v20)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21, v12);
    goto LABEL_10;
  }
  if (!v9)
  {
    v27[0] = 0;
    v28 = 0;
    v24[0] = 0;
    v25 = 0;
    v26 = 1;
    std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v5);
    goto LABEL_10;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a2, v27);
  v11 = v28;
  if (v28)
  {
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v24, (uint64_t)v27);
    v11 = 1;
    v25 = 1;
  }
  else
  {
    v24[0] = 0;
  }
  v26 = v11;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v10);
  if (!v26)
    goto LABEL_21;
LABEL_10:
  if (!v26)
  {
    *a1 = 0;
    a1[360] = 0;
LABEL_25:
    v22 = *a2;
    v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v23)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
    }
    return result;
  }
  *a1 = 0;
  a1[352] = 0;
  if (v25)
  {
    result = WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)a1, (uint64_t)v24);
    a1[352] = 1;
    v14 = v26;
    a1[360] = 1;
    if (!v14)
      return result;
  }
  else
  {
    a1[360] = 1;
  }
  result = std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v12);
  if (!a1[360])
    goto LABEL_25;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0>(WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED560;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0>(WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED560;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0>(WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result;
  _BYTE v4[352];
  char v5;
  char v6;
  _BYTE v7[352];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a2
    || !*(_QWORD *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>>(v4, (uint64_t *)a2), !v6))
  {
    v4[0] = 0;
    v5 = 0;
    return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, a2);
  }
  v7[0] = 0;
  v8 = 0;
  if (v5)
  {
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v7, (uint64_t)v4);
    v8 = 1;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v7);
  }
  result = std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, a2);
  if (v6)
    return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, a2);
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34ED588;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

WebCore::WorkerScriptLoader::ServiceWorkerDataManager *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebCore::WorkerScriptLoader::ServiceWorkerDataManager *result;
  WTF *v2;
  void *v3;

  result = *(WebCore::WorkerScriptLoader::ServiceWorkerDataManager **)(a1 + 8);
  if (result)
  {
    WebCore::WorkerScriptLoader::ServiceWorkerDataManager::~ServiceWorkerDataManager(result);
    return (WebCore::WorkerScriptLoader::ServiceWorkerDataManager *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 352 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = result;
    do
    {
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5 + 280, a2);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5 + 208, v6);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5 + 136, v7);
      v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v9 = *((unsigned int *)v5 + 6);
      if ((_DWORD)v9 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34ED2C0[v9])(&v10, v5);
      *((_DWORD *)v5 + 6) = -1;
      v5 = (WTF::StringImpl *)((char *)v5 + 352);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::getRegistrations(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_1E34ED5B0;
  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34ED2C0[v4])(&v7, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::getRegistrations(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)this = &off_1E34ED5B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34ED2C0[v4])(&v7, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::getRegistrations(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  v2 = (_QWORD *)a1[1];
  v3 = (uint64_t)(a1 + 3);
  v4 = a1 + 7;
  v5 = v2[3];
  v2 += 3;
  v6 = (*(uint64_t (**)(_QWORD *))(v5 + 56))(v2);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2732;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v7, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  v8 = a1[2];
  a1[2] = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34ED5D8;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v2 + 40))(v2, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED5D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED5D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  int v38;
  unsigned int v39;
  char v40;
  _QWORD v41[2];
  char v42;
  WTF *v43;
  uint64_t v44;
  _QWORD v45[44];
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_38:
    v45[0] = 0;
    v45[1] = 0;
    v32 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v32 + 16))(v32, v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v19 = (WTF::StringImpl **)v45;
    return WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v23)
        {
          if (v22)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
        }
      }
    }
    goto LABEL_36;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v43 = 0;
  v44 = 0;
  if (v9 >= 0xBA2)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a2, v45);
      if (!v46)
        goto LABEL_35;
      v24 = HIDWORD(v44);
      if (HIDWORD(v44) == (_DWORD)v44)
      {
        WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationData>((unsigned int *)&v43, (unint64_t)v45);
      }
      else
      {
        WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v43 + 352 * HIDWORD(v44), (uint64_t)v45);
        HIDWORD(v44) = v24 + 1;
      }
      result = std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45, v25);
      if (!--v9)
      {
        LODWORD(v9) = v44;
        v14 = HIDWORD(v44);
        v13 = v43;
        if (v44 <= HIDWORD(v44))
          goto LABEL_18;
        v26 = v43;
        v36 = HIDWORD(v44);
        if (HIDWORD(v44))
        {
          if (HIDWORD(v44) >= 0xBA2E8C)
          {
            __break(0xC471u);
            return result;
          }
          v27 = WTF::fastMalloc((WTF *)(352 * HIDWORD(v44)));
          LODWORD(v9) = 352 * v36 / 0x160;
          if ((WTF::StringImpl *)v27 == v13)
          {
            v26 = v13;
          }
          else
          {
            v26 = (WTF *)v27;
            WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationData>::move(v13, (WTF::StringImpl *)((char *)v13 + 352 * v36), v27);
          }
        }
        if (v13)
        {
          if (v26 == v13)
          {
            LODWORD(v9) = 0;
            v26 = 0;
            v43 = 0;
          }
          WTF::fastFree(v13, v4);
        }
        v13 = v26;
        v14 = v36;
        goto LABEL_18;
      }
    }
  }
  if (v9)
  {
    LODWORD(v44) = 352 * (int)v9 / 0x160u;
    v43 = (WTF *)WTF::fastMalloc((WTF *)(352 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a2, v45);
      if (!v46)
        break;
      v11 = HIDWORD(v44);
      if (HIDWORD(v44) == (_DWORD)v44)
      {
        WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationData>((unsigned int *)&v43, (unint64_t)v45);
      }
      else
      {
        WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v43 + 352 * HIDWORD(v44), (uint64_t)v45);
        HIDWORD(v44) = v11 + 1;
      }
      std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45, v12);
      if (!--v9)
      {
        v13 = v43;
        LODWORD(v9) = v44;
        v14 = HIDWORD(v44);
        goto LABEL_18;
      }
    }
LABEL_35:
    std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45, v10);
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v28);
LABEL_36:
    v29 = *a2;
    v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v30)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
      v33 = *a2;
      v34 = a2[1];
      v35 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v35)
      {
        if (v34)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_38;
  }
  v14 = 0;
  v13 = 0;
LABEL_18:
  v43 = 0;
  v44 = 0;
  v42 = 1;
  WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v4);
  v41[0] = 0;
  v41[1] = 0;
  v37 = v13;
  v38 = v9;
  v39 = v14;
  WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v15);
  v40 = 1;
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, &v37);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v40)
  {
    v19 = &v37;
    return WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  return WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(*(_QWORD *)a1 + 352 * a1[3]++, v3);
}

unint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 352 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xBA2E8C)
    {
      __break(0xC471u);
      JUMPOUT(0x1975FFDDCLL);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 352 * *((unsigned int *)result + 3));
    v5 = 352 * a2;
    v6 = WTF::fastMalloc((WTF *)(352 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFE0) / 0x160;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v7 = result;
    v8 = 0;
    do
    {
      v9 = (char *)v7 + v8;
      WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(a3 + v8, (uint64_t)v7 + v8);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + v8 + 280, v10);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + v8 + 208, v11);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + v8 + 136, v12);
      v14 = *(WTF::StringImpl **)((char *)v7 + v8 + 80);
      *(_QWORD *)((char *)v7 + v8 + 80) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v9 + 4);
      *((_QWORD *)v9 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      v15 = *(unsigned int *)((char *)v7 + v8 + 24);
      if ((_DWORD)v15 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1E34ED2C0[v15])(&v16, (char *)v7 + v8);
      *(_DWORD *)((char *)v7 + v8 + 24) = -1;
      v8 += 352;
    }
    while ((WTF::StringImpl *)((char *)v7 + v8) != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED600;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED600;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED628;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED628;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED650;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED650;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED678;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED678;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  __n128 v4[5];
  int v5;
  char v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)v4);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v2);
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)>,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(v2, v4);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(char *, __n128 *))off_1E34ED690[v5])(&v7, v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t result;
  __n128 v2[5];
  int v3;
  char v4;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)>,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(a1, v2);
  if (v3 != -1)
    return ((uint64_t (*)(char *, __n128 *))off_1E34ED690[v3])(&v4, v2);
  return result;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)>,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(uint64_t *a1, __n128 *a2)
{
  unsigned __int32 v3;
  unsigned __int8 v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __n128 v9[5];
  int v10;
  char v11;

  v3 = a2[5].n128_u32[0];
  if (v3)
  {
    if (v3 != 1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v8);
    }
    v4 = a2->n128_u8[0];
    v5 = (_DWORD *)a2->n128_u64[1];
    if (v5)
      *v5 += 2;
    v9[0].n128_u8[0] = v4;
    v9[0].n128_u64[1] = (unint64_t)v5;
    v10 = 1;
  }
  else
  {
    std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(v9, a2);
    v10 = 0;
  }
  v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v6 + 16))(v6, v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v10 != -1)
    return ((uint64_t (*)(char *, __n128 *))off_1E34ED6A0[v10])(&v11, v9);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *result;

  v3 = *(WTF **)(a2 + 64);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  v4 = *(WTF **)(a2 + 48);
  if (v4)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  v5 = *(WTF **)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    WTF::fastFree(v5, (void *)a2);
  }
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED6C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED6C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *result;
  char v4[16];
  int v5;
  char v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v4), v6))
  {
    result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(v2, v4);
    if (v6)
    {
      if (v5 != -1)
        return (_QWORD *)((uint64_t (*)(char *, char *))off_1E34ED4E0[v5])(&v7, v4);
    }
  }
  else
  {
    v4[0] = 0;
    v5 = 0;
    return WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(v2, v4);
  }
  return result;
}

_QWORD *WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  int v2;
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  _BYTE v8[8];
  _DWORD *v9;
  int v10;
  char v11;

  v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 != 1)
    {
      v7 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(v7);
    }
    v3 = *a2;
    v4 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v4)
      *v4 += 2;
    v8[0] = v3;
    v9 = v4;
    v10 = 1;
  }
  else
  {
    v8[0] = *a2;
    v10 = 0;
  }
  v5 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v8);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v10 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34ED4F0[v10])(&v11, v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED6E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED6E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  char v4;
  _BYTE v5[8];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v5);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(v2);
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(v2, (uint64_t)v5);
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34ED700[v7])(&v4, &v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  _BYTE v3[8];
  _BYTE v4[88];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[80] = 0;
  v5 = 0;
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34ED700[v5])(&v2, v4);
  return result;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[8];
  _DWORD *v13;
  char v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 96);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_BYTE *)(a2 + 8);
      v5 = *(_DWORD **)(a2 + 16);
      if (v5)
        *v5 += 2;
      v12[0] = v4;
      v13 = v5;
      v15 = 1;
      v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v11);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v15 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34ED710[v15])(&v10, v12);
    }
    else
    {
      v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(v9);
    }
  }
  else
  {
    v12[0] = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)v12, a2 + 8);
      v14 = 1;
    }
    v15 = 0;
    v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v11);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34ED710[v15])(&v10, v12);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED730;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED730;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  char v8[8];
  _DWORD *v9;
  int v10;
  char v11;
  char v12[8];
  _DWORD *v13;
  int v14;
  char v15;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v2);
  if (v10)
  {
    if (v10 == 1)
    {
      v3 = v8[0];
      v4 = v9;
      if (v9)
        *v9 += 2;
      v12[0] = v3;
      v13 = v4;
      v14 = 1;
      goto LABEL_13;
    }
    v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  v14 = 0;
LABEL_13:
  v6 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 16))(v6, v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v14 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E34ED758[v14])(&v15, v12);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34ED748[v10])(v12, v8);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34ED758[v4])(&v5, v3);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19PushPermissionStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED778;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED778;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unsigned int v42;
  WTF *v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  _QWORD v55[2];
  char v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59[2];
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68[6];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (v4 = (void *)*a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>((uint64_t *)(a1 + 8));
    return;
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v28 = *a2;
        v29 = a2[1];
        v30 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v30)
        {
          if (v29)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
        }
      }
    }
LABEL_47:
    v46 = *a2;
    v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v48 = a2[3];
    if (v48 && v47)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      v49 = *a2;
      v50 = a2[1];
      v51 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v51)
      {
        if (v50)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    IPC::Connection::cancelReply<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v2);
    return;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v57 = 0;
  v58 = 0;
  if (v9 >= 0x1111)
  {
    do
    {
      IPC::Decoder::decode<WebCore::NotificationData>(a2, v59);
      if (!v77)
        goto LABEL_46;
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData>((uint64_t)&v57, (unint64_t)v59);
      }
      else
      {
        v31 = (char *)v57 + 240 * HIDWORD(v58);
        WTF::URL::URL((uint64_t)v31, v59);
        v32 = v61;
        v61 = 0;
        *((_QWORD *)v31 + 5) = v32;
        v33 = v62;
        v62 = 0;
        *((_QWORD *)v31 + 6) = v33;
        v34 = v63;
        v63 = 0;
        *((_QWORD *)v31 + 7) = v34;
        v35 = v64;
        v64 = 0;
        *((_QWORD *)v31 + 8) = v35;
        v36 = v65;
        v65 = 0;
        *((_QWORD *)v31 + 9) = v36;
        v31[80] = v66;
        v37 = v67;
        v67 = 0;
        *((_QWORD *)v31 + 11) = v37;
        WTF::URL::URL((uint64_t)(v31 + 96), v68);
        v38 = v69;
        v39 = v70;
        v40 = v72;
        *((_OWORD *)v31 + 11) = v71;
        *((_OWORD *)v31 + 12) = v40;
        *((_OWORD *)v31 + 9) = v38;
        *((_OWORD *)v31 + 10) = v39;
        *((_QWORD *)v31 + 26) = 0;
        *((_QWORD *)v31 + 27) = 0;
        v41 = v73;
        v73 = 0;
        *((_QWORD *)v31 + 26) = v41;
        LODWORD(v41) = v74;
        v74 = 0;
        *((_DWORD *)v31 + 54) = v41;
        LODWORD(v41) = v75;
        v75 = 0;
        *((_DWORD *)v31 + 55) = v41;
        *((_WORD *)v31 + 112) = v76;
        ++HIDWORD(v58);
      }
      if (v77)
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v59, v4);
      --v9;
    }
    while (v9);
    v42 = HIDWORD(v58);
    v22 = v57;
    if (v58 > HIDWORD(v58))
    {
      v43 = v57;
      if (HIDWORD(v58))
      {
        if (HIDWORD(v58) >= 0x1111112)
        {
          __break(0xC471u);
          return;
        }
        v44 = 240 * HIDWORD(v58);
        v45 = (WTF *)WTF::fastMalloc((WTF *)(240 * HIDWORD(v58)));
        LODWORD(v58) = (v44 & 0xFFFFFFF0) / 0xF0;
        v57 = v45;
        v43 = v22;
        if (v45 != v22)
        {
          WTF::VectorMover<false,WebCore::NotificationData>::move(v22, (WTF *)((char *)v22 + 240 * v42), (uint64_t)v45);
          v43 = v57;
        }
      }
      if (v22)
      {
        if (v43 == v22)
        {
          v57 = 0;
          LODWORD(v58) = 0;
        }
        WTF::fastFree(v22, v4);
LABEL_18:
        v22 = v57;
      }
      else
      {
        v22 = v43;
      }
    }
    v23 = v58;
    goto LABEL_22;
  }
  if (v9)
  {
    LODWORD(v58) = 240 * (int)v9 / 0xF0u;
    v57 = (WTF *)WTF::fastMalloc((WTF *)(240 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::NotificationData>(a2, v59);
      if (!v77)
        break;
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData>((uint64_t)&v57, (unint64_t)v59);
      }
      else
      {
        v11 = (char *)v57 + 240 * HIDWORD(v58);
        WTF::URL::URL((uint64_t)v11, v59);
        v12 = v61;
        v61 = 0;
        *((_QWORD *)v11 + 5) = v12;
        v13 = v62;
        v62 = 0;
        *((_QWORD *)v11 + 6) = v13;
        v14 = v63;
        v63 = 0;
        *((_QWORD *)v11 + 7) = v14;
        v15 = v64;
        v64 = 0;
        *((_QWORD *)v11 + 8) = v15;
        v16 = v65;
        v65 = 0;
        *((_QWORD *)v11 + 9) = v16;
        v11[80] = v66;
        v17 = v67;
        v67 = 0;
        *((_QWORD *)v11 + 11) = v17;
        WTF::URL::URL((uint64_t)(v11 + 96), v68);
        v18 = v69;
        v19 = v70;
        v20 = v72;
        *((_OWORD *)v11 + 11) = v71;
        *((_OWORD *)v11 + 12) = v20;
        *((_OWORD *)v11 + 9) = v18;
        *((_OWORD *)v11 + 10) = v19;
        *((_QWORD *)v11 + 26) = 0;
        *((_QWORD *)v11 + 27) = 0;
        v21 = v73;
        v73 = 0;
        *((_QWORD *)v11 + 26) = v21;
        LODWORD(v21) = v74;
        v74 = 0;
        *((_DWORD *)v11 + 54) = v21;
        LODWORD(v21) = v75;
        v75 = 0;
        *((_DWORD *)v11 + 55) = v21;
        *((_WORD *)v11 + 112) = v76;
        ++HIDWORD(v58);
      }
      if (v77)
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v59, v4);
      if (!--v9)
        goto LABEL_18;
    }
LABEL_46:
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v10);
    goto LABEL_47;
  }
  v22 = 0;
  v23 = 0;
LABEL_22:
  v52 = v23;
  v57 = 0;
  v58 = 0;
  v56 = 1;
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
  v55[0] = 0;
  v55[1] = 0;
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v24);
  v54 = 1;
  v53[0] = 0;
  v59[0] = (uint64_t)v22;
  v53[1] = 0;
  v59[1] = v52;
  v60 = 0;
  v25 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 16))(v25, v59);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v60 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E34ED790[v60])(v55, v59);
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v53, v26);
}

uint64_t IPC::Connection::cancelReply<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];
  int v6;
  char v7;

  v4[0] = 0;
  v5[0] = 0;
  v4[1] = 0;
  v5[1] = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6 != -1)
    ((void (*)(char *, _QWORD *))off_1E34ED790[v6])(&v7, v5);
  v6 = -1;
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

__n128 WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 240 * *(unsigned int *)(a1 + 12);
  WTF::URL::URL(v4, (uint64_t *)v3);
  v5 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v4 + 40) = v5;
  v6 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v6;
  v7 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v7;
  v8 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v8;
  v9 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v4 + 72) = v9;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(v3 + 80);
  v10 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v4 + 88) = v10;
  WTF::URL::URL(v4 + 96, (uint64_t *)(v3 + 96));
  result = *(__n128 *)(v3 + 144);
  v12 = *(_OWORD *)(v3 + 160);
  v13 = *(_OWORD *)(v3 + 192);
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v4 + 192) = v13;
  *(__n128 *)(v4 + 144) = result;
  *(_OWORD *)(v4 + 160) = v12;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  v14 = *(_QWORD *)(v3 + 208);
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v4 + 208) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 216);
  *(_DWORD *)(v3 + 216) = 0;
  *(_DWORD *)(v4 + 216) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 220);
  *(_DWORD *)(v3 + 220) = 0;
  *(_DWORD *)(v4 + 220) = v14;
  *(_WORD *)(v4 + 224) = *(_WORD *)(v3 + 224);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED7B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED7B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    v5[0] = 0;
    v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE v8[8];
  uint64_t v9;
  char v10;
  char v11;

  result = IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>(a2, (uint64_t)v8);
  if (v11)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    if (v10)
    {
      *(_BYTE *)a1 = v8[0];
      *(_QWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 16) = 1;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  char v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  if (a2[16])
  {
    v2 = *a2;
    v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (v3)
      *(_DWORD *)v3 += 2;
    LOBYTE(v7) = v2;
    v8 = v3;
    LOBYTE(v9) = 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  v4 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v7);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if ((_BYTE)v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED7D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED7D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    v5[0] = 0;
    v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::String &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED800;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::String &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED800;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::String &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    v5[0] = 0;
    v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  char v9;
  uint64_t result;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27[16];
  int v28;
  char v29;
  _BYTE v30[8];
  uint64_t v31;
  int v32;
  char v33;
  _BYTE v34[8];
  uint64_t v35;
  unsigned __int8 v36;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v4, v5);
        v14 = 0;
        v24 = *a2;
        v25 = a2[1];
        v26 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v15 = 0;
        if (v26 && v25)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v25);
          v15 = *a2;
          v14 = a2[1];
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_24;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v14 = v5;
    v15 = v4;
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    goto LABEL_25;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)v34);
    v11 = v36;
    if (v36)
    {
      v12 = v34[0];
      v31 = v35;
      v11 = 1;
      v32 = 1;
    }
    else
    {
      v12 = 0;
    }
    v30[0] = v12;
    v33 = v11;
    v13 = 1;
    if (!v11)
      goto LABEL_25;
LABEL_16:
    v27[0] = 0;
    v28 = -1;
    ((void (*)(_BYTE *, char *, _BYTE *))off_1E34ED850[v13])(v34, v27, v30);
    v28 = v13;
    v29 = 1;
    if (!v33)
      goto LABEL_19;
    if (v32 == -1)
      goto LABEL_19;
    ((void (*)(_BYTE *, _BYTE *))off_1E34ED840[v32])(v34, v30);
    if (v29)
      goto LABEL_19;
    goto LABEL_27;
  }
  IPC::Decoder::decode<WebCore::NavigationPreloadState>(a2, (uint64_t)v34);
  v8 = v36;
  if (v36)
  {
    v9 = v34[0];
    v31 = v35;
    v32 = 0;
    v8 = 1;
  }
  else
  {
    v9 = 0;
  }
  v13 = 0;
  v30[0] = v9;
  v33 = v8;
  if (v8)
    goto LABEL_16;
LABEL_25:
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20 && v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
  v27[0] = 0;
  v29 = 0;
LABEL_27:
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v23 = a2[3];
  if (!v23)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v2);
  if (!v22)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
  if (!v29)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v2);
LABEL_19:
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)>,std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData>>(v2, v27);
  if (v29)
  {
    if (v28 != -1)
      return ((uint64_t (*)(_BYTE *, char *))off_1E34ED840[v28])(v30, v27);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t result;
  _QWORD v2[2];
  int v3;
  char v4;

  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)>,std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData>>(a1, (char *)v2);
  if (v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34ED840[v3])(&v4, v2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)>,std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  int v2;
  char v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9[8];
  _DWORD *v10;
  int v11;
  char v12;

  v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 != 1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v8);
    }
    v3 = *a2;
    v4 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v4)
      *v4 += 2;
    v9[0] = v3;
    v10 = v4;
    v11 = 1;
  }
  else
  {
    v9[0] = *a2;
    v5 = (_DWORD *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v10 = v5;
    v11 = 0;
  }
  v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 16))(v6, v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11 != -1)
    return ((uint64_t (*)(char *, char *))off_1E34ED860[v11])(&v12, v9);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BackgroundFetchOptions &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED880;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BackgroundFetchOptions &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED880;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BackgroundFetchOptions &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  char v4;
  char v5[56];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>>((uint64_t)v5, a2);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(v2);
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)>,std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>(v2, v5);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34ED898[v6])(&v4, v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  _OWORD v3[3];
  uint64_t v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 0x10000;
  memset(v3, 0, sizeof(v3));
  v5 = 0;
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)>,std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>(a1, (char *)v3);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _OWORD *))off_1E34ED898[v5])(&v2, v3);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[19];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v34[19];
  int v35;
  unsigned __int8 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_19;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v16 = v6;
    v17 = 0;
LABEL_19:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
    goto LABEL_21;
  }
  if (!v9)
  {
    IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)&v26);
    v11 = v28;
    if ((_BYTE)v28)
    {
      v12 = v26;
      v32 = v27;
      v11 = 1;
      v35 = 1;
    }
    else
    {
      v12 = 0;
    }
    LOBYTE(v31) = v12;
    v36 = v11;
    v13 = 1;
    if (!v11)
      goto LABEL_21;
LABEL_14:
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 56) = -1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t *))off_1E34ED8A8[v13])(&v26, a1, &v31);
    *(_DWORD *)(a1 + 56) = v13;
    v15 = v36;
    *(_BYTE *)(a1 + 64) = 1;
    if (!v15)
      return result;
    if (v35 == -1)
      return result;
    result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E34ED898[v35])(&v26, &v31);
    if (*(_BYTE *)(a1 + 64))
      return result;
    goto LABEL_23;
  }
  IPC::Decoder::decode<WebCore::BackgroundFetchInformation>(a2, (uint64_t)&v26);
  v10 = v30;
  if (v30)
  {
    v31 = v26;
    v32 = v27;
    v33 = v28;
    *(_OWORD *)v34 = *(_OWORD *)v29;
    *(_DWORD *)&v34[15] = *(_DWORD *)&v29[15];
    v10 = 1;
    v35 = 0;
  }
  else
  {
    LOBYTE(v31) = 0;
  }
  v13 = 0;
  v36 = v10;
  if (v10)
    goto LABEL_14;
LABEL_21:
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v23 = a2[3];
  if (v23 && v22)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
LABEL_23:
  v24 = *a2;
  v25 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v25)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::BackgroundFetchInformation>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  result = *(__n128 *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 47);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)>,std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  int v2;
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 v14;
  _BYTE v15[19];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)a2 + 14);
  if (v2)
  {
    if (v2 != 1)
    {
      v10 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v10);
    }
    v3 = *a2;
    v4 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v4)
      *v4 += 2;
    LOBYTE(v12) = v3;
    v13 = v4;
    v16 = 1;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = (_DWORD *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v12 = v5;
    v13 = v6;
    *(_DWORD *)&v15[15] = *(_DWORD *)(a2 + 47);
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v15 = *((_OWORD *)a2 + 2);
    v14 = v7;
    v16 = 0;
  }
  v8 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v16 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34ED8B8[v16])(&v11, &v12);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26BackgroundFetchInformationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED8D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED8D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  char v4;
  char v5[56];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>>((uint64_t)v5, a2);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)> &&)::$_0>(v2);
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::BackgroundFetchInformation> &&)>,std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>>(v2, v5);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34ED898[v6])(&v4, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED900;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED900;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AbortBackgroundFetch,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED928;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AbortBackgroundFetch,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED928;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AbortBackgroundFetch,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED950;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED950;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  WTF **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  unsigned int v66;
  int v67;
  char v68;
  _QWORD v69[2];
  char v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[5];
  uint64_t v75[5];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _DWORD v95[2];
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  char v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  char v107;
  uint64_t v108;

  v2 = a1;
  v108 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_40:
    v73 = 0;
    v74[0] = 0;
    v60 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v60 + 16))(v60, &v73);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    v33 = (WTF **)&v73;
    return WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v32);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v35 = *a2;
        v36 = a2[1];
        v37 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v37)
        {
          if (v36)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
        }
      }
    }
LABEL_38:
    v57 = *a2;
    v58 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v59 = a2[3];
    if (v59 && v58)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57);
      v61 = *a2;
      v62 = a2[1];
      v63 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v63)
      {
        if (v62)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v61);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_40;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v71 = 0;
  v72 = 0;
  if (v9 >= 0xD79)
  {
    v64 = a1;
    do
    {
      IPC::Decoder::decode<WebCore::BackgroundFetchRecordInformation>((uint64_t)&v73, a2);
      if (!v107)
        goto LABEL_37;
      if (HIDWORD(v72) == (_DWORD)v72)
      {
        WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRecordInformation>((uint64_t)&v71, (unint64_t)&v73);
      }
      else
      {
        v39 = (char *)v71 + 304 * HIDWORD(v72);
        *(_QWORD *)v39 = v73;
        WTF::URL::URL((uint64_t)(v39 + 8), v74);
        WTF::URL::URL((uint64_t)(v39 + 48), v75);
        *((_QWORD *)v39 + 11) = v76;
        v40 = v77;
        v77 = 0;
        *((_QWORD *)v39 + 13) = 0;
        *((_QWORD *)v39 + 14) = 0;
        *((_QWORD *)v39 + 12) = v40;
        v41 = v78;
        v78 = 0;
        *((_QWORD *)v39 + 13) = v41;
        LODWORD(v41) = v79;
        v79 = 0;
        *((_DWORD *)v39 + 28) = v41;
        LODWORD(v41) = v80;
        v80 = 0;
        *((_DWORD *)v39 + 29) = v41;
        *((_QWORD *)v39 + 15) = 0;
        *((_QWORD *)v39 + 16) = 0;
        v42 = v81;
        v81 = 0;
        *((_QWORD *)v39 + 15) = v42;
        LODWORD(v42) = v82;
        v82 = 0;
        *((_DWORD *)v39 + 32) = v42;
        LODWORD(v42) = v83;
        v83 = 0;
        *((_DWORD *)v39 + 33) = v42;
        *((_QWORD *)v39 + 17) = 0;
        *((_QWORD *)v39 + 18) = 0;
        v43 = v84;
        v84 = 0;
        *((_QWORD *)v39 + 17) = v43;
        LODWORD(v43) = v85;
        v85 = 0;
        *((_DWORD *)v39 + 36) = v43;
        LODWORD(v43) = v86;
        v86 = 0;
        *((_DWORD *)v39 + 37) = v43;
        LODWORD(v43) = v87;
        v39[156] = v88;
        *((_DWORD *)v39 + 38) = v43;
        v44 = v89;
        v89 = 0;
        *((_QWORD *)v39 + 20) = v44;
        v45 = v90;
        v90 = 0;
        *((_QWORD *)v39 + 21) = v45;
        v46 = v91;
        v91 = 0;
        *((_QWORD *)v39 + 22) = v46;
        v47 = v92;
        v39[192] = v93;
        *((_QWORD *)v39 + 23) = v47;
        v48 = v94;
        v94 = 0;
        *((_QWORD *)v39 + 25) = v48;
        LODWORD(v48) = v95[0];
        *(_DWORD *)(v39 + 211) = *(_DWORD *)((char *)v95 + 3);
        *((_DWORD *)v39 + 52) = v48;
        v49 = v96;
        v96 = 0;
        *((_QWORD *)v39 + 27) = v49;
        v50 = v98;
        *((_OWORD *)v39 + 14) = v97;
        *((_OWORD *)v39 + 15) = v50;
        v39[256] = v99;
        *((_QWORD *)v39 + 33) = 0;
        *((_QWORD *)v39 + 34) = 0;
        v51 = v100;
        v100 = 0;
        *((_QWORD *)v39 + 33) = v51;
        LODWORD(v51) = v101;
        v101 = 0;
        *((_DWORD *)v39 + 68) = v51;
        LODWORD(v51) = v102;
        v102 = 0;
        *((_DWORD *)v39 + 69) = v51;
        *((_QWORD *)v39 + 35) = 0;
        *((_QWORD *)v39 + 36) = 0;
        v52 = v103;
        v103 = 0;
        *((_QWORD *)v39 + 35) = v52;
        LODWORD(v52) = v104;
        v104 = 0;
        *((_DWORD *)v39 + 72) = v52;
        LODWORD(v52) = v105;
        v105 = 0;
        *((_DWORD *)v39 + 73) = v52;
        v53 = v106;
        v106 = 0;
        *((_QWORD *)v39 + 37) = v53;
        ++HIDWORD(v72);
      }
      result = std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v38);
      --v9;
    }
    while (v9);
    v28 = v72;
    LODWORD(v9) = HIDWORD(v72);
    v27 = v71;
    if (v72 > HIDWORD(v72))
    {
      v54 = v71;
      if (HIDWORD(v72))
      {
        if (HIDWORD(v72) >= 0xD79436)
        {
          __break(0xC471u);
          return result;
        }
        v55 = WTF::fastMalloc((WTF *)(304 * HIDWORD(v72)));
        v28 = 304 * (int)v9 / 0x130u;
        if ((WTF *)v55 == v27)
        {
          v54 = v27;
        }
        else
        {
          v54 = (WTF *)v55;
          WTF::VectorMover<false,WebCore::BackgroundFetchRecordInformation>::move((uint64_t)v27, (uint64_t)v27 + 304 * v9, v55);
        }
      }
      if (v27)
      {
        if (v54 == v27)
        {
          v28 = 0;
          v54 = 0;
          v71 = 0;
          LODWORD(v72) = 0;
        }
        WTF::fastFree(v27, v4);
      }
      v27 = v54;
    }
    v71 = 0;
    LODWORD(v72) = 0;
    v2 = v64;
    goto LABEL_19;
  }
  if (v9)
  {
    v64 = a1;
    LODWORD(v72) = 304 * (int)v9 / 0x130u;
    v71 = (WTF *)WTF::fastMalloc((WTF *)(304 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::BackgroundFetchRecordInformation>((uint64_t)&v73, a2);
      if (!v107)
        break;
      if (HIDWORD(v72) == (_DWORD)v72)
      {
        WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRecordInformation>((uint64_t)&v71, (unint64_t)&v73);
      }
      else
      {
        v12 = (char *)v71 + 304 * HIDWORD(v72);
        *(_QWORD *)v12 = v73;
        WTF::URL::URL((uint64_t)(v12 + 8), v74);
        WTF::URL::URL((uint64_t)(v12 + 48), v75);
        *((_QWORD *)v12 + 11) = v76;
        v13 = v77;
        v77 = 0;
        *((_QWORD *)v12 + 13) = 0;
        *((_QWORD *)v12 + 14) = 0;
        *((_QWORD *)v12 + 12) = v13;
        v14 = v78;
        v78 = 0;
        *((_QWORD *)v12 + 13) = v14;
        LODWORD(v14) = v79;
        v79 = 0;
        *((_DWORD *)v12 + 28) = v14;
        LODWORD(v14) = v80;
        v80 = 0;
        *((_DWORD *)v12 + 29) = v14;
        *((_QWORD *)v12 + 15) = 0;
        *((_QWORD *)v12 + 16) = 0;
        v15 = v81;
        v81 = 0;
        *((_QWORD *)v12 + 15) = v15;
        LODWORD(v15) = v82;
        v82 = 0;
        *((_DWORD *)v12 + 32) = v15;
        LODWORD(v15) = v83;
        v83 = 0;
        *((_DWORD *)v12 + 33) = v15;
        *((_QWORD *)v12 + 17) = 0;
        *((_QWORD *)v12 + 18) = 0;
        v16 = v84;
        v84 = 0;
        *((_QWORD *)v12 + 17) = v16;
        LODWORD(v16) = v85;
        v85 = 0;
        *((_DWORD *)v12 + 36) = v16;
        LODWORD(v16) = v86;
        v86 = 0;
        *((_DWORD *)v12 + 37) = v16;
        LODWORD(v16) = v87;
        v12[156] = v88;
        *((_DWORD *)v12 + 38) = v16;
        v17 = v89;
        v89 = 0;
        *((_QWORD *)v12 + 20) = v17;
        v18 = v90;
        v90 = 0;
        *((_QWORD *)v12 + 21) = v18;
        v19 = v91;
        v91 = 0;
        *((_QWORD *)v12 + 22) = v19;
        v20 = v92;
        v12[192] = v93;
        *((_QWORD *)v12 + 23) = v20;
        v21 = v94;
        v94 = 0;
        *((_QWORD *)v12 + 25) = v21;
        LODWORD(v21) = v95[0];
        *(_DWORD *)(v12 + 211) = *(_DWORD *)((char *)v95 + 3);
        *((_DWORD *)v12 + 52) = v21;
        v22 = v96;
        v96 = 0;
        *((_QWORD *)v12 + 27) = v22;
        v23 = v98;
        *((_OWORD *)v12 + 14) = v97;
        *((_OWORD *)v12 + 15) = v23;
        v12[256] = v99;
        *((_QWORD *)v12 + 33) = 0;
        *((_QWORD *)v12 + 34) = 0;
        v24 = v100;
        v100 = 0;
        *((_QWORD *)v12 + 33) = v24;
        LODWORD(v24) = v101;
        v101 = 0;
        *((_DWORD *)v12 + 68) = v24;
        LODWORD(v24) = v102;
        v102 = 0;
        *((_DWORD *)v12 + 69) = v24;
        *((_QWORD *)v12 + 35) = 0;
        *((_QWORD *)v12 + 36) = 0;
        v25 = v103;
        v103 = 0;
        *((_QWORD *)v12 + 35) = v25;
        LODWORD(v25) = v104;
        v104 = 0;
        *((_DWORD *)v12 + 72) = v25;
        LODWORD(v25) = v105;
        v105 = 0;
        *((_DWORD *)v12 + 73) = v25;
        v26 = v106;
        v106 = 0;
        *((_QWORD *)v12 + 37) = v26;
        ++HIDWORD(v72);
      }
      std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v11);
      if (!--v9)
      {
        v27 = v71;
        v28 = v72;
        LODWORD(v9) = HIDWORD(v72);
        v2 = v64;
        goto LABEL_18;
      }
    }
LABEL_37:
    std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v10);
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v56);
    v2 = v64;
    goto LABEL_38;
  }
  v28 = 0;
  v27 = 0;
LABEL_18:
  v71 = 0;
  LODWORD(v72) = 0;
LABEL_19:
  HIDWORD(v72) = 0;
  v70 = 1;
  WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v4);
  v69[0] = 0;
  v69[1] = 0;
  v65 = v27;
  v66 = v28;
  v67 = v9;
  WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, v29);
  v68 = 1;
  v30 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v30 + 16))(v30, &v65);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v68)
  {
    v33 = &v65;
    return WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v32);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::BackgroundFetchRecordInformation>(uint64_t a1, uint64_t *a2)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 304))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WebCore::ResourceRequestBase *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRecordInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 304 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(_QWORD *)v3;
  WTF::URL::URL(v4 + 8, (uint64_t *)(v3 + 8));
  WTF::URL::URL(v4 + 48, (uint64_t *)(v3 + 48));
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(v3 + 88);
  v5 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v4 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v6;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  v7 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v4 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v4 + 128) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 132);
  *(_DWORD *)(v3 + 132) = 0;
  *(_DWORD *)(v4 + 132) = v7;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  v8 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v4 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 148);
  *(_DWORD *)(v3 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 152);
  *(_BYTE *)(v4 + 156) = *(_BYTE *)(v3 + 156);
  *(_DWORD *)(v4 + 152) = v8;
  v9 = *(_QWORD *)(v3 + 160);
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v4 + 160) = v9;
  v10 = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v4 + 168) = v10;
  v11 = *(_QWORD *)(v3 + 176);
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v4 + 176) = v11;
  v12 = *(_QWORD *)(v3 + 184);
  *(_BYTE *)(v4 + 192) = *(_BYTE *)(v3 + 192);
  *(_QWORD *)(v4 + 184) = v12;
  v13 = *(_QWORD *)(v3 + 200);
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v4 + 200) = v13;
  LODWORD(v13) = *(_DWORD *)(v3 + 208);
  *(_DWORD *)(v4 + 211) = *(_DWORD *)(v3 + 211);
  *(_DWORD *)(v4 + 208) = v13;
  v14 = *(_QWORD *)(v3 + 216);
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v4 + 216) = v14;
  result = *(__n128 *)(v3 + 224);
  v16 = *(_OWORD *)(v3 + 240);
  *(__n128 *)(v4 + 224) = result;
  *(_OWORD *)(v4 + 240) = v16;
  *(_BYTE *)(v4 + 256) = *(_BYTE *)(v3 + 256);
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  v17 = *(_QWORD *)(v3 + 264);
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v4 + 264) = v17;
  LODWORD(v17) = *(_DWORD *)(v3 + 272);
  *(_DWORD *)(v3 + 272) = 0;
  *(_DWORD *)(v4 + 272) = v17;
  LODWORD(v17) = *(_DWORD *)(v3 + 276);
  *(_DWORD *)(v3 + 276) = 0;
  *(_DWORD *)(v4 + 276) = v17;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  v18 = *(_QWORD *)(v3 + 280);
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v4 + 280) = v18;
  LODWORD(v18) = *(_DWORD *)(v3 + 288);
  *(_DWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v4 + 288) = v18;
  LODWORD(v18) = *(_DWORD *)(v3 + 292);
  *(_DWORD *)(v3 + 292) = 0;
  *(_DWORD *)(v4 + 292) = v18;
  v19 = *(_QWORD *)(v3 + 296);
  *(_QWORD *)(v3 + 296) = 0;
  *(_QWORD *)(v4 + 296) = v19;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 304 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xD79436)
    {
      __break(0xC471u);
      JUMPOUT(0x1976031ACLL);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 304 * *(unsigned int *)(a1 + 12);
    v5 = 304 * a2;
    v6 = WTF::fastMalloc((WTF *)(304 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x130;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::BackgroundFetchRecordInformation>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::BackgroundFetchRecordInformation>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const void *v27;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      *(_QWORD *)(a3 + v6) = *(_QWORD *)(a1 + v6);
      WTF::URL::URL(a3 + v6 + 8, (uint64_t *)(a1 + v6 + 8));
      WTF::URL::URL(a3 + v6 + 48, (uint64_t *)(a1 + v6 + 48));
      *(_QWORD *)(v7 + 88) = *(_QWORD *)(a1 + v6 + 88);
      v10 = *(_QWORD *)(a1 + v6 + 96);
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 112) = 0;
      *(_QWORD *)(v7 + 96) = v10;
      v11 = *(_QWORD *)(a1 + v6 + 104);
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v7 + 104) = v11;
      LODWORD(v11) = *(_DWORD *)(a1 + v6 + 112);
      *(_DWORD *)(v8 + 112) = 0;
      *(_DWORD *)(v7 + 112) = v11;
      LODWORD(v11) = *(_DWORD *)(a1 + v6 + 116);
      *(_DWORD *)(v8 + 116) = 0;
      *(_DWORD *)(v7 + 116) = v11;
      *(_QWORD *)(v7 + 120) = 0;
      *(_QWORD *)(v7 + 128) = 0;
      v12 = *(_QWORD *)(a1 + v6 + 120);
      *(_QWORD *)(v8 + 120) = 0;
      *(_QWORD *)(v7 + 120) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + v6 + 128);
      *(_DWORD *)(v8 + 128) = 0;
      *(_DWORD *)(v7 + 128) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + v6 + 132);
      *(_DWORD *)(v8 + 132) = 0;
      *(_DWORD *)(v7 + 132) = v12;
      *(_QWORD *)(v7 + 136) = 0;
      *(_QWORD *)(v7 + 144) = 0;
      v13 = *(_QWORD *)(a1 + v6 + 136);
      *(_QWORD *)(v8 + 136) = 0;
      *(_QWORD *)(v7 + 136) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + v6 + 144);
      *(_DWORD *)(v8 + 144) = 0;
      *(_DWORD *)(v7 + 144) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + v6 + 148);
      *(_DWORD *)(v8 + 148) = 0;
      *(_DWORD *)(v7 + 148) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + v6 + 152);
      *(_BYTE *)(v7 + 156) = *(_BYTE *)(a1 + v6 + 156);
      *(_DWORD *)(v7 + 152) = v13;
      v14 = *(_QWORD *)(a1 + v6 + 160);
      *(_QWORD *)(v8 + 160) = 0;
      *(_QWORD *)(v7 + 160) = v14;
      v15 = *(_QWORD *)(a1 + v6 + 168);
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v7 + 168) = v15;
      v16 = *(_QWORD *)(a1 + v6 + 176);
      *(_QWORD *)(v8 + 176) = 0;
      *(_QWORD *)(v7 + 176) = v16;
      v17 = *(_QWORD *)(a1 + v6 + 184);
      *(_BYTE *)(v7 + 192) = *(_BYTE *)(a1 + v6 + 192);
      *(_QWORD *)(v7 + 184) = v17;
      v18 = *(_QWORD *)(a1 + v6 + 200);
      *(_QWORD *)(v8 + 200) = 0;
      *(_QWORD *)(v7 + 200) = v18;
      LODWORD(v18) = *(_DWORD *)(a1 + v6 + 208);
      *(_DWORD *)(v7 + 211) = *(_DWORD *)(a1 + v6 + 211);
      *(_DWORD *)(v7 + 208) = v18;
      v19 = *(_QWORD *)(a1 + v6 + 216);
      *(_QWORD *)(v8 + 216) = 0;
      *(_QWORD *)(v7 + 216) = v19;
      v20 = *(_OWORD *)(a1 + v6 + 240);
      *(_OWORD *)(v7 + 224) = *(_OWORD *)(a1 + v6 + 224);
      *(_OWORD *)(v7 + 240) = v20;
      *(_BYTE *)(v7 + 256) = *(_BYTE *)(a1 + v6 + 256);
      *(_QWORD *)(v7 + 264) = 0;
      *(_QWORD *)(v7 + 272) = 0;
      v21 = *(_QWORD *)(a1 + v6 + 264);
      *(_QWORD *)(v8 + 264) = 0;
      *(_QWORD *)(v7 + 264) = v21;
      LODWORD(v21) = *(_DWORD *)(a1 + v6 + 272);
      *(_DWORD *)(v8 + 272) = 0;
      *(_DWORD *)(v7 + 272) = v21;
      LODWORD(v21) = *(_DWORD *)(a1 + v6 + 276);
      *(_DWORD *)(v8 + 276) = 0;
      *(_DWORD *)(v7 + 276) = v21;
      *(_QWORD *)(v7 + 280) = 0;
      *(_QWORD *)(v7 + 288) = 0;
      v22 = *(_QWORD *)(a1 + v6 + 280);
      *(_QWORD *)(v8 + 280) = 0;
      *(_QWORD *)(v7 + 280) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + v6 + 288);
      *(_DWORD *)(v8 + 288) = 0;
      *(_DWORD *)(v7 + 288) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + v6 + 292);
      *(_DWORD *)(v8 + 292) = 0;
      *(_DWORD *)(v7 + 292) = v22;
      v23 = *(_QWORD *)(a1 + v6 + 296);
      *(_QWORD *)(v8 + 296) = 0;
      *(_QWORD *)(v7 + 296) = v23;
      v24 = *(WTF::StringImpl **)(a1 + v6 + 296);
      *(_QWORD *)(v8 + 296) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v9);
        else
          *(_DWORD *)v24 -= 2;
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v8 + 280));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v8 + 264));
      v26 = *(WTF::StringImpl **)(v8 + 216);
      *(_QWORD *)(v8 + 216) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *(const void **)(v8 + 200);
      *(_QWORD *)(v8 + 200) = 0;
      if (v27)
        CFRelease(v27);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + v6 + 8));
      v6 += 304;
    }
    while (v8 + 304 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;

  if (*(_BYTE *)(a1 + 304))
  {
    v3 = *(WTF::StringImpl **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 280));
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 264));
    v5 = *(WTF::StringImpl **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

void WTF::VectorDestructor<true,WebCore::BackgroundFetchRecordInformation>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 37);
      *((_QWORD *)v3 + 37) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::StringImpl *)((char *)v3 + 280));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::StringImpl *)((char *)v3 + 264));
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 27);
      *((_QWORD *)v3 + 27) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (const void *)*((_QWORD *)v3 + 25);
      *((_QWORD *)v3 + 25) = 0;
      if (v7)
        CFRelease(v7);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WTF::StringImpl *)((char *)v3 + 8));
      v3 = (WTF::StringImpl *)((char *)v3 + 304);
    }
    while (v3 != a2);
  }
}

uint64_t WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::BackgroundFetchRecordInformation>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 304 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ED978;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ED978;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  char v9;
  uint64_t result;
  int v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  unsigned __int8 v29;
  char v30;
  _BYTE v31[256];
  unsigned int v32;
  char v33;
  _BYTE v34[8];
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v4, v5);
        v14 = 0;
        v24 = *a2;
        v25 = a2[1];
        v26 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v15 = 0;
        if (v26 && v25)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v25);
          v15 = *a2;
          v14 = a2[1];
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_28;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v14 = v5;
    v15 = v4;
LABEL_28:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    v34[0] = 0;
    v37 = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)v27);
    v11 = v29;
    if (v29)
    {
      v12 = v27[0];
      v35 = v28;
      v11 = 1;
      v36 = 1;
    }
    else
    {
      v12 = 0;
    }
    v34[0] = v12;
    v37 = v11;
    if (!v11)
      goto LABEL_30;
LABEL_16:
    v31[0] = 0;
    goto LABEL_17;
  }
  IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v27);
  v9 = v30;
  if (v30)
  {
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v34, (uint64_t)v27);
    v36 = 0;
    v9 = 1;
  }
  else
  {
    v34[0] = 0;
  }
  v37 = v9;
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v27, v8);
  if (v37)
    goto LABEL_16;
LABEL_30:
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (!v20 || !v19)
  {
    v31[0] = 0;
LABEL_32:
    v33 = 0;
LABEL_33:
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (!v23)
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v2);
    if (!v22)
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
    if (!v33)
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v2);
    goto LABEL_23;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
  v31[0] = 0;
  if (!v37)
    goto LABEL_32;
LABEL_17:
  v32 = -1;
  v13 = v36;
  if (v36 == -1)
  {
    v33 = 1;
    goto LABEL_23;
  }
  ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E34ED9A0[v36])(v27, v31, v34);
  v32 = v13;
  v33 = 1;
  if (v37)
  {
    if (v36 != -1)
    {
      (*(&off_1E34ED990 + v36))((int)v27, (WebCore::ResourceResponseBase *)v34);
      if (!v33)
        goto LABEL_33;
    }
  }
LABEL_23:
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)>,std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData>>(v2, (uint64_t)v31);
  if (v33)
  {
    if (v32 != -1)
      return (*(&off_1E34ED990 + v32))((int)v34, (WebCore::ResourceResponseBase *)v31);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  _BYTE v4[138];
  char v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v4);
  v6 = 0;
  v7 = 0;
  v5 = v5 & 0xF1 | 4;
  v8 = 0;
  result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)>,std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData>>(a1, (uint64_t)v4);
  if (v8 != -1)
    return (*(&off_1E34ED990 + v8))((int)&v3, (WebCore::ResourceResponseBase *)v4);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ResourceResponseBase *this)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a2, a3).n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)>,std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  WebCore::ResourceResponseBase *v9;
  char v10;
  _BYTE v11[8];
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 256);
  if (v3)
  {
    if (v3 != 1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v8, v9);
    }
    v4 = *(_BYTE *)a2;
    v5 = *(_DWORD **)(a2 + 8);
    if (v5)
      *v5 += 2;
    v11[0] = v4;
    v12 = v5;
    v13 = 1;
  }
  else
  {
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v11, a2);
    v13 = 0;
  }
  v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v11);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v13 != -1)
    return (*(&off_1E34ED9B0 + v13))((int)&v10, (WebCore::ResourceResponseBase *)v11);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ResourceResponseBase *this)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::FocusFromServiceWorker,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34ED9D0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::FocusFromServiceWorker,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34ED9D0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::FocusFromServiceWorker,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>::call(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _BYTE v25[216];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 2;
  v3 = (uint64_t *)WebCore::Document::allDocumentsMap((WebCore::Document *)a1);
  v4 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v3, v2);
  v5 = v4;
  if (!v4 || (*(_DWORD *)(v4 + 24) += 2, (v6 = *(_QWORD *)(v4 + 528)) == 0))
  {
    v7 = 0;
    goto LABEL_25;
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
LABEL_25:
    v16 = 1;
    goto LABEL_12;
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 24);
  if (v10 && *(_QWORD *)(v10 + 8))
  {
    WebCore::FocusController::setFocusedFrame();
    WebCore::ServiceWorkerClientData::from();
    std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)v25, &v21);
    v11 = a1[6];
    a1[6] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v12);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v13);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_19;
  }
  v16 = 0;
LABEL_12:
  v25[0] = 0;
  v25[192] = 0;
  v17 = a1[6];
  a1[6] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 16))(v17, v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v18);
  if ((v16 & 1) == 0)
LABEL_19:
    result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34ED9F8;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSWContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDA20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSWContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDA20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSWContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updatePreferencesStore(WebKit::WebPreferencesStore &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E34EDA48;
  v3 = *(WTF **)(a1 + 40);
  if (v3)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*(unsigned int *)(a1 + 48));
  v4 = *(WTF **)(a1 + 16);
  if (v4)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*(unsigned int *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updatePreferencesStore(WebKit::WebPreferencesStore &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34EDA48;
  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*((unsigned int *)this + 12));
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 6));
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 32), a2);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updatePreferencesStore(WebKit::WebPreferencesStore &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebSWContextManagerConnection::updatePreferencesStore(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::LastNavigationWasAppInitiated)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34EDA70;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::LastNavigationWasAppInitiated)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDA70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return WTF::fastFree(this, a2);
}

WebCore::ServiceWorkerThreadProxy *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::LastNavigationWasAppInitiated)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(*(unsigned __int8 ***)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

void WebKit::RemoteWorkerLibWebRTCProvider::~RemoteWorkerLibWebRTCProvider(WebKit::RemoteWorkerLibWebRTCProvider *this)
{
  WTF *v1;
  void *v2;

  WebCore::LibWebRTCProvider::~LibWebRTCProvider(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteWorkerLibWebRTCProvider::createRTCDataChannelRemoteHandlerConnection@<X0>(WebKit::RemoteWorkerLibWebRTCProvider *this@<X0>, _QWORD *a2@<X8>)
{
  WebKit::RTCDataChannelRemoteManager *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = WebKit::RTCDataChannelRemoteManager::sharedManager(this);
  result = WebKit::RTCDataChannelRemoteManager::remoteHandlerConnection(v3);
  v5 = (unsigned int *)(result + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *a2 = result;
  return result;
}

uint64_t WebCore::LibWebRTCProvider::setVP9HardwareSupportForTesting(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 193) = a2;
  return result;
}

BOOL WebCore::LibWebRTCProvider::isSupportingVP9HardwareDecoder(WebCore::LibWebRTCProvider *this)
{
  return *((_BYTE *)this + 194) && *((_BYTE *)this + 193) != 0;
}

uint64_t WebKit::WebStorageProvider::storageConnection(WebKit::WebStorageProvider *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E34F0CC8;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v3;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    return *((_QWORD *)this + 1);
  }
  return result;
}

WTF::StringImpl *WebKit::WebStorageProvider::ensureMediaKeysStorageDirectoryForOrigin@<X0>(WTF::StringImpl *this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  const WebCore::ClientOrigin *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  _BYTE v13[24];
  int v14;
  _BYTE v15[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    WebCore::StorageUtilities::encodeSecurityOriginForFileName();
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::pathByAppendingComponent();
    v13[0] = 0;
    v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)a2);
    v15[0] = 0;
    v16 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, (uint64_t)a2);
    WebCore::StorageUtilities::writeOriginToFile((WebCore::StorageUtilities *)&v10, (const WTF::String *)v13, v6);
    if (v16 != -1)
      ((void (*)(char *, _BYTE *))off_1E34ED2C0[v16])(&v12, v15);
    v16 = -1;
    if (v14 != -1)
      ((void (*)(char *, _BYTE *))off_1E34ED2C0[v14])(&v12, v13);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    this = v11;
    v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 2;
    *a3 = v9;
  }
  return this;
}

void WebKit::WebStorageProvider::setMediaKeysStorageDirectory(WebKit::WebStorageProvider *this, const WTF::String *a2)
{
  __break(0xC471u);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>>::__assign_alt[abi:sn180100]<0ul,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34EDB78[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[2] = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::installServiceWorker(WebCore::ServiceWorkerContextData &&,WebCore::ServiceWorkerData &&,WTF::String &&,WebCore::WorkerThreadMode,WebCore::ServiceWorkerIsInspectable,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;

  *a1 = off_1E34EDB98;
  v3 = (WTF::StringImpl *)a1[86];
  a1[86] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[80];
  a1[80] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(a1 + 4), a2);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 32), v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::installServiceWorker(WebCore::ServiceWorkerContextData &&,WebCore::ServiceWorkerData &&,WTF::String &&,WebCore::WorkerThreadMode,WebCore::ServiceWorkerIsInspectable,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;

  *a1 = off_1E34EDB98;
  v3 = (WTF::StringImpl *)a1[86];
  a1[86] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[80];
  a1[80] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(a1 + 4), a2);
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 32), v5);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::installServiceWorker(WebCore::ServiceWorkerContextData &&,WebCore::ServiceWorkerData &&,WTF::String &&,WebCore::WorkerThreadMode,WebCore::ServiceWorkerIsInspectable,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  WebKit::WebProcess *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  WebKit::WebCookieJar *v15;
  WebKit::WebCookieJar *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WebKit::WebProcess *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _WORD **v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _WORD *v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  __int128 *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  WebCore::Settings *v49;
  WebKit::WebProcess *v50;
  WebCore::Settings *v51;
  _QWORD *v52;
  WebCore::Page *v53;
  WebKit::WebProcess *v54;
  uint64_t v55;
  WebCore::ServiceWorkerThreadProxy *v56;
  _DWORD *v57;
  WebCore::Page *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::SWContextManager *NavigationWasAppInitiated;
  NSObject *v63;
  WTF::StringImpl *v64;
  pid_t v65;
  _QWORD *v66;
  WebCore::Page *v67;
  WTF::StringImpl *v68;
  WebKit::WebProcess *v70;
  WebKit::WebProcess *v71;
  WebKit::WebProcess *v72;
  WebKit::WebProcess *v73;
  WebKit::WebProcess *v74;
  uint64_t v75;
  _QWORD *v76;
  WebCore::Page *v77;
  WTF::StringImpl *v78;
  char v79[48];
  unsigned int *v80;
  uint64_t v81;
  WebKit::WebCookieJar *v82;
  unsigned int *v83[9];
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  _QWORD *v90;
  _DWORD *v91;
  _QWORD *v92;
  _BYTE buf[12];
  __int16 v94;
  pid_t v95;
  _OWORD v96[2];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
    goto LABEL_103;
  v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    if (*((_BYTE *)v3 + 672))
    {
      WebCore::pageConfigurationWithEmptyClients();
      v4 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v4 + 8) = 1;
      *(_QWORD *)v4 = off_1E34EE550;
      v5 = v91;
      v91 = (_DWORD *)v4;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      WebKit::WebDatabaseProvider::getOrCreate(*(_QWORD *)(v2 + 112), v96);
      v6 = v84;
      v84 = *(_DWORD **)&v96[0];
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v7 = *(_QWORD *)(v2 + 120);
      v8 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v8 + 8) = 1;
      *(_QWORD *)v8 = off_1E34EB3D8;
      *(_QWORD *)(v8 + 16) = v7;
      v9 = v80;
      v80 = (unsigned int *)v8;
      if (v9)
      {
        v33 = v9 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
        }
      }
      {
        v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v71 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v10 = WebKit::WebProcess::WebProcess(v71);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
      }
      v11 = (_DWORD *)*((_QWORD *)v10 + 50);
      ++v11[2];
      v12 = v86;
      v86 = v11;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      v13 = *(_DWORD **)(v2 + 184);
      ++v13[2];
      v14 = v85;
      v85 = v13;
      if (v14)
      {
        if (v14[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
        else
          --v14[2];
      }
      v15 = (WebKit::WebCookieJar *)WTF::fastMalloc((WTF *)0x60);
      WebKit::WebCookieJar::WebCookieJar(v15);
      v16 = v82;
      v82 = v15;
      if (v16)
      {
        if (*((_DWORD *)v16 + 2) == 1)
          (*(void (**)(WebKit::WebCookieJar *))(*(_QWORD *)v16 + 120))(v16);
        else
          --*((_DWORD *)v16 + 2);
      }
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = off_1E34EED78;
      v18 = v92;
      v92 = v17;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
      v19 = WTF::fastMalloc((WTF *)0xC8);
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)(v19 + 64) = 0u;
      *(_OWORD *)(v19 + 80) = 0u;
      *(_OWORD *)(v19 + 96) = 0u;
      *(_OWORD *)(v19 + 112) = 0u;
      *(_OWORD *)(v19 + 128) = 0u;
      *(_OWORD *)(v19 + 144) = 0u;
      *(_OWORD *)(v19 + 160) = 0u;
      *(_OWORD *)(v19 + 176) = 0u;
      *(_QWORD *)(v19 + 192) = 0;
      *(_QWORD *)WebCore::LibWebRTCProvider::LibWebRTCProvider((WebCore::LibWebRTCProvider *)v19) = off_1E34EDA98;
      v20 = v81;
      v81 = v19;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      {
        v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v72 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v21 = WebKit::WebProcess::WebProcess(v72);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v21;
      }
      v22 = (WTF::StringImpl *)*((_QWORD *)v21 + 98);
      if (v22)
        *(_DWORD *)v22 += 2;
      v23 = *((_QWORD *)v21 + 99);
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v24 = off_1E34EE110;
      v24[1] = 0;
      if (v22)
        *(_DWORD *)v22 += 2;
      v24[2] = v22;
      v24[3] = v23;
      *(_QWORD *)&v96[0] = 0;
      v26 = v90;
      v90 = v24;
      if (v26)
      {
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
        v25 = *(WTF **)&v96[0];
        *(_QWORD *)&v96[0] = 0;
        if (v25)
          std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100]((int)v96, v25);
      }
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v25);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (*(_BYTE *)(v2 + 96))
      {
        v27 = *(_OWORD *)(v2 + 80);
        v96[0] = *(_OWORD *)(v2 + 64);
        v96[1] = v27;
        v28 = WebCore::Page::serviceWorkerPage();
        if (v28)
        {
          v29 = v28;
          v30 = (_WORD **)(v28 + 1608);
          if ((uint64_t *)(v28 + 1608) != &v87)
          {
            v31 = v89;
            v32 = *(unsigned int *)(v28 + 1620);
            if (v89 <= v32)
            {
              if (v32 > v88)
              {
                WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v87, 0);
                WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v87, *(unsigned int *)(v29 + 1620));
                v31 = v89;
              }
            }
            else
            {
              WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct((WTF::StringImpl *)(v87 + 32 * v32), (WTF::StringImpl *)(v87 + 32 * v89));
              v89 = v32;
              v31 = v32;
            }
            v36 = *v30;
            v37 = v87;
            if (v31)
            {
              v38 = &v36[16 * v31];
              do
              {
                WTF::String::operator=((WTF::StringImpl **)v37, (WTF::StringImpl *)v36);
                WTF::String::operator=((WTF::StringImpl **)(v37 + 8), (WTF::StringImpl *)(v36 + 4));
                WTF::String::operator=((WTF::StringImpl **)(v37 + 16), (WTF::StringImpl *)(v36 + 8));
                *(_WORD *)(v37 + 24) = v36[12];
                v36 += 16;
                v37 += 32;
              }
              while (v36 != v38);
              v36 = *v30;
              v39 = v89;
              v37 = v87;
            }
            else
            {
              v39 = 0;
            }
            WTF::VectorCopier<false,WebCore::UserContentURLPattern>::uninitializedCopy<WebCore::UserContentURLPattern>((uint64_t)&v36[16 * v39], (uint64_t)&v36[16 * *(unsigned int *)(v29 + 1620)], v37 + 32 * v39);
            v89 = *(_DWORD *)(v29 + 1620);
          }
        }
      }
      v40 = *(WTF::StringImpl **)(a1 + 688);
      *(_QWORD *)(a1 + 688) = 0;
      v78 = v40;
      if (!v40)
        WTF::String::operator=(&v78, (WTF::StringImpl *)(v2 + 168));
      v41 = WTF::fastMalloc((WTF *)0x50);
      WebKit::RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient(v41, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128), (_DWORD **)&v78);
      if (*(_BYTE *)(a1 + 592))
      {
        v42 = (__int128 *)(a1 + 560);
        v43 = (__int128 *)(v41 + 32);
        if (*(_BYTE *)(v41 + 64))
        {
          v44 = *v42;
          *(_QWORD *)(v41 + 48) = *(_QWORD *)(a1 + 576);
          *v43 = v44;
        }
        else
        {
          v45 = *(_OWORD *)(a1 + 576);
          *v43 = *v42;
          *(_OWORD *)(v41 + 48) = v45;
          *(_BYTE *)(v41 + 64) = 1;
        }
      }
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v46 = &off_1E34EDBC0;
      v46[1] = v41;
      *(_QWORD *)buf = v46;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>>::__assign_alt[abi:sn180100]<0ul,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>>((unsigned int *)v83, v83, (unsigned int **)buf);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      v47 = *(_QWORD *)(a1 + 408);
      v48 = *(unsigned __int16 *)(a1 + 530);
      WebCore::Page::create();
      if (!*(_BYTE *)(v2 + 240))
        goto LABEL_70;
      WebKit::WebPage::updateSettingsGenerated((WebKit::WebPage *)(v2 + 192), *((const WebKit::WebPreferencesStore **)v77 + 14), v49);
      if (*(_BYTE *)(v2 + 240))
        break;
    }
    __break(1u);
LABEL_103:
    v70 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v70);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<unsigned int>(v2 + 192, v2 + 216, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
  WebCore::Settings::setStorageBlockingPolicy();
LABEL_70:
  {
    v50 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v73 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v50 = WebKit::WebProcess::WebProcess(v73);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v50;
  }
  if (*((_BYTE *)v50 + 618))
  {
    if (*(_BYTE *)(v2 + 240))
      v51 = (WebCore::Settings *)(v2 + 192);
    else
      v51 = 0;
    WebKit::WebPage::adjustSettingsForLockdownMode(*((WebKit::WebPage **)v77 + 14), v51, v49);
  }
  WebCore::Page::setupForRemoteWorker();
  WebCore::Page::setInspectable(v77);
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v52[1] = 0;
  v52[2] = 0;
  *v52 = off_1E34EF6E0;
  v76 = v52;
  v53 = v77;
  ++*(_DWORD *)v77;
  *(_QWORD *)buf = v53;
  {
    v54 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v74 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v54 = WebKit::WebProcess::WebProcess(v74);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v54;
  }
  v55 = *((_QWORD *)v54 + 46);
  v56 = (WebCore::ServiceWorkerThreadProxy *)WTF::fastMalloc((WTF *)0x80);
  v75 = MEMORY[0x19AEB2B44](v56, buf, a1 + 32, a1 + 624, &v78, *(unsigned __int8 *)(a1 + 696), v55, &v76);
  v57 = *(_DWORD **)buf;
  *(_QWORD *)buf = 0;
  if (v57)
    WTF::RefCounted<WebCore::Page>::deref(v57);
  v58 = v77;
  v59 = *((_QWORD *)v56 + 7);
  v60 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v60 + 16) = *((_DWORD *)v58 + 78);
  *(_QWORD *)v60 = off_1E34F0D08;
  *(_QWORD *)(v60 + 8) = v59;
  *(_QWORD *)(v60 + 24) = 0;
  v61 = *((_QWORD *)v56 + 7);
  NavigationWasAppInitiated = *(WebCore::SWContextManager **)(v61 + 120);
  *(_QWORD *)(v61 + 120) = v60;
  if (NavigationWasAppInitiated)
    NavigationWasAppInitiated = (WebCore::SWContextManager *)(*(uint64_t (**)(WebCore::SWContextManager *))(*(_QWORD *)NavigationWasAppInitiated + 8))(NavigationWasAppInitiated);
  if (v48 >= 0x100)
    NavigationWasAppInitiated = (WebCore::SWContextManager *)WebCore::ServiceWorkerThreadProxy::setLastNavigationWasAppInitiated(v56);
  WebCore::SWContextManager::singleton(NavigationWasAppInitiated);
  WebCore::SWContextManager::registerServiceWorkerThreadForInstall();
  v63 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v65 = getpid();
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v47;
    v94 = 1024;
    v95 = v65;
    _os_log_impl(&dword_196BCC000, v63, OS_LOG_TYPE_DEFAULT, "Created service worker %llu in process PID %i", buf, 0x12u);
  }
  if (v75)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v75 + 8));
  v66 = v76;
  v76 = 0;
  if (v66)
    (*(void (**)(_QWORD *))(*v66 + 56))(v66);
  v67 = v77;
  v77 = 0;
  if (v67)
    WTF::RefCounted<WebCore::Page>::deref(v67);
  v68 = v78;
  v78 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v64);
    else
      *(_DWORD *)v68 -= 2;
  }
  return MEMORY[0x19AEAFAB4](v79);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit29WebSWContextManagerConnection20installServiceWorkerEON7WebCore24ServiceWorkerContextDataEONS4_17ServiceWorkerDataEONS_6StringENS4_16WorkerThreadModeENS4_26ServiceWorkerIsInspectableENS_9OptionSetINS4_26AdvancedPrivacyProtectionsEEEEN3__0clEvEUlRT_E_NS_9UniqueRefINS4_22LocalFrameLoaderClientEEEJRNS4_10LocalFrameEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E34EDBC0;
  a1[1] = 0;
  if (v3)
    std::default_delete<WebKit::RemoteWorkerFrameLoaderClient>::operator()[abi:sn180100](v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit29WebSWContextManagerConnection20installServiceWorkerEON7WebCore24ServiceWorkerContextDataEONS4_17ServiceWorkerDataEONS_6StringENS4_16WorkerThreadModeENS4_26ServiceWorkerIsInspectableENS_9OptionSetINS4_26AdvancedPrivacyProtectionsEEEEN3__0clEvEUlRT_E_NS_9UniqueRefINS4_22LocalFrameLoaderClientEEEJRNS4_10LocalFrameEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDBC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<WebKit::RemoteWorkerFrameLoaderClient>::operator()[abi:sn180100](v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit29WebSWContextManagerConnection20installServiceWorkerEON7WebCore24ServiceWorkerContextDataEONS4_17ServiceWorkerDataEONS_6StringENS4_16WorkerThreadModeENS4_26ServiceWorkerIsInspectableENS_9OptionSetINS4_26AdvancedPrivacyProtectionsEEEEN3__0clEvEUlRT_E_NS_9UniqueRefINS4_22LocalFrameLoaderClientEEEJRNS4_10LocalFrameEEE4callESO_@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *a2 = v2;
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34EDBE8;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEB2B50]();
    result = WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setUserAgent(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34EDC10;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setUserAgent(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EDC10;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 32), a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setUserAgent(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebSWContextManagerConnection::setUserAgent(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)(a1 + 16));
}

char *IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, *a2);
  v4 = *v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unsigned int *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(unsigned int *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (uint64_t *)result;
  *a2 = -1;
  v3 = a2[2];
  a2[2] = 0;
  if (v3)
    result = WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

_OWORD *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 24 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        v9 = v13[1];
        if (v14 | v9)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v14, v9);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = (_OWORD *)(v17 + 24 * (v19 & v18));
            v19 = ++v20 + (v19 & v18);
          }
          while (*v22 != 0);
          v23 = v17 + 24 * v21;
          v26 = *(_QWORD *)(v23 + 16);
          v25 = (_QWORD *)(v23 + 16);
          v24 = v26;
          *v25 = 0;
          if (v26)
            WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
          *v22 = *(_OWORD *)v13;
          v27 = v5 + 24 * v10;
          v28 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          *v25 = v28;
          v29 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v29)
            WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v29 + 8));
          if (v13 == a3)
            v11 = v22;
        }
        else
        {
          v15 = v5 + 24 * v10;
          v16 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          if (v16)
            WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 8));
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), (void *)v9);
  return v11;
}

unsigned int *WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::take@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v4 = (_QWORD *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  v5 = a2[2];
  if (v5)
  {
    a2[2] = 0;
    v3 = *(_QWORD *)result;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 24 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if (v6 != a2)
    return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(result, a2);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidNotHandle>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1429;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::startFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::FetchOptions &&,IPC::FormDataReference &&,WTF::String &&,BOOL,IPC::FormDataReference &,IPC::FormDataReference &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDC38;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::startFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::FetchOptions &&,IPC::FormDataReference &&,WTF::String &&,BOOL,IPC::FormDataReference &,IPC::FormDataReference &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDC38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::startFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::FetchOptions &&,IPC::FormDataReference &&,WTF::String &&,BOOL,IPC::FormDataReference &,IPC::FormDataReference &)::$_0,void>::call(uint64_t a1)
{
  return WebCore::ServiceWorkerThreadProxy::setLastNavigationWasAppInitiated(*(WebCore::ServiceWorkerThreadProxy **)(a1 + 8));
}

_OWORD *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_1,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)a1 = off_1E34EDC60;
  v3 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
  if (*(_BYTE *)(a1 + 32))
  {
    v6 = *(WTF **)(a1 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v6, v5);
    }
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;

  *(_QWORD *)a1 = off_1E34EDC60;
  v3 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
  if (*(_BYTE *)(a1 + 32))
  {
    v6 = *(WTF **)(a1 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v6, v5);
    }
  }
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  WebCore::SWContextManager::singleton(a1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v3 = *((_QWORD *)a1 + 23);
  *((_QWORD *)a1 + 23) = 0;
  *v2 = &off_1E34EDC88;
  v2[1] = v3;
  v4 = *((_QWORD *)a1 + 24);
  *((_QWORD *)a1 + 24) = 0;
  v2[2] = v4;
  v6 = v2;
  WebCore::SWContextManager::firePushEvent();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34EDC88;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EDC88;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &>::call(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[144];
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::NotificationPayload>>::copy<std::optional<WebCore::NotificationPayload>>((WTF::StringImpl *)v13, a3);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v14 = v5;
  v6 = WTF::fastMalloc((WTF *)0xA8);
  *(_QWORD *)v6 = off_1E34EDCB0;
  *(_BYTE *)(v6 + 8) = a2;
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v6 + 16, (uint64_t)v13);
  v7 = v14;
  v14 = 0;
  *(_QWORD *)(v6 + 160) = v7;
  v15 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v15);
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0::operator()(BOOL,std::optional<WebCore::NotificationPayload> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34EDCB0;
  v3 = a1[20];
  a1[20] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0::operator()(BOOL,std::optional<WebCore::NotificationPayload> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34EDCB0;
  v3 = *((_QWORD *)a1 + 20);
  *((_QWORD *)a1 + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 16, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0::operator()(BOOL,std::optional<WebCore::NotificationPayload> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E34EDCD8;
  v3 = a1[36];
  a1[36] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[35];
  a1[35] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = off_1E34EDCD8;
  v3 = a1[36];
  a1[36] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[35];
  a1[35] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  WebCore::SWContextManager::singleton(a1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v3 = *((_QWORD *)a1 + 35);
  *((_QWORD *)a1 + 35) = 0;
  *v2 = &off_1E34EDD00;
  v2[1] = v3;
  v4 = *((_QWORD *)a1 + 36);
  *((_QWORD *)a1 + 36) = 0;
  v2[2] = v4;
  v6 = v2;
  WebCore::SWContextManager::fireNotificationEvent();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34EDD00;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EDD00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34EDD28;
  *(_BYTE *)(v5 + 8) = a2;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 32))(v3, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34EDD28;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34EDD28;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34EDD50;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[9];
  a1[9] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34EDD50;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  WebCore::SWContextManager::singleton(a1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v3 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  *v2 = &off_1E34EDD78;
  v2[1] = v3;
  v4 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  v2[2] = v4;
  v6 = v2;
  WebCore::SWContextManager::fireBackgroundFetchEvent();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34EDD78;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EDD78;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34EDDA0;
  *(_BYTE *)(v5 + 8) = a2;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 32))(v3, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34EDDA0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34EDDA0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34EDDC8;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[9];
  a1[9] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34EDDC8;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  WebCore::SWContextManager::singleton(a1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v3 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  *v2 = &off_1E34EDDF0;
  v2[1] = v3;
  v4 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  v2[2] = v4;
  v6 = v2;
  WebCore::SWContextManager::fireBackgroundFetchClickEvent();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34EDDF0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EDDF0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34EDE18;
  *(_BYTE *)(v5 + 8) = a2;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 32))(v3, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34EDE18;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34EDE18;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::terminateWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::terminateWorker();
  return 0;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = (uint64_t *)v6;
    do
    {
      if (*v15 != -1)
      {
        if (*v15)
        {
          v17 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v15);
          v18 = v17[1];
          v17[1] = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          v19 = *v15;
          v20 = v15[1];
          v15[1] = 0;
          *v17 = v19;
          v17[1] = v20;
          v21 = v15[1];
          v15[1] = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (v15 == a3)
            v13 = v17;
        }
        else
        {
          v16 = v15[1];
          v15[1] = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34EDE68;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDE68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 152);
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v1, (_QWORD *)(a1 + 16));
  v3 = result;
  v4 = *v1;
  if (*v1)
    v4 += 16 * *(unsigned int *)(v4 - 4);
  if ((_QWORD *)v4 != result)
  {
    v5 = result[1];
    result[1] = 0;
    if (*v1)
    {
      v6 = *v1 + 16 * *(unsigned int *)(*v1 - 4);
      if ((_QWORD *)v6 != result)
      {
LABEL_7:
        if ((_QWORD *)v6 != result)
          result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v1, result);
      }
    }
    else if (result)
    {
      v6 = 0;
      goto LABEL_7;
    }
    if (v5)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v3);
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (_QWORD *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDE90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDE90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[208];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a2 || !*a2 || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>(a2, v7), !v8))
  {
    v7[0] = 0;
    v7[192] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[208])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  void *v4;
  _BYTE v5[208];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerClientData>>(a1, v5);
  if (v6)
  {
    result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder,std::optional<WebCore::ServiceWorkerClientData>>((uint64_t)v5, a2);
    if (v6)
      return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
  }
  else
  {
    *a2 = 0;
    a2[208] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerClientData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[208])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder,std::optional<WebCore::ServiceWorkerClientData>>@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 208))
  {
    *a2 = 0;
    a2[192] = 0;
    if (*(_BYTE *)(a1 + 192))
    {
      result = std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)a2, (__int128 *)a1);
      a2[192] = 1;
    }
    a2[208] = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  char v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16[12];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v4 = (char *)*a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = &v4[v5];
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_13:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        v4 = (char *)*v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_14;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::ServiceWorkerClientData>(a1, v16);
      v8 = v17;
      if (!v17)
      {
        *a2 = 0;
        goto LABEL_10;
      }
      std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)a2, v16);
    }
    else
    {
      LOBYTE(v16[0]) = 0;
      v17 = 0;
      *a2 = 0;
      a2[192] = 0;
    }
    v8 = 1;
LABEL_10:
    a2[208] = v8;
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v4);
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v3)
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v4);
  }
  *a2 = 0;
  a2[208] = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerClientData>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::decode(a1, a2);
  if (!a2[192])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    v5 = a2[1];
    *(_WORD *)(result + 32) = *((_WORD *)a2 + 16);
    *(_OWORD *)result = v4;
    *(_OWORD *)(result + 16) = v5;
    WTF::URL::URL(result + 40, (uint64_t *)a2 + 5);
    WTF::URL::URL(v3 + 80, (uint64_t *)a2 + 10);
    v6 = *(__int128 *)((char *)a2 + 120);
    v7 = *(__int128 *)((char *)a2 + 136);
    v8 = *((_QWORD *)a2 + 21);
    *(_OWORD *)(v3 + 152) = *(__int128 *)((char *)a2 + 152);
    *(_OWORD *)(v3 + 136) = v7;
    *(_OWORD *)(v3 + 120) = v6;
    *(_QWORD *)(v3 + 176) = 0;
    *(_QWORD *)(v3 + 184) = 0;
    *(_QWORD *)(v3 + 168) = v8;
    v9 = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 22) = 0;
    *(_QWORD *)(v3 + 176) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 46);
    *((_DWORD *)a2 + 46) = 0;
    *(_DWORD *)(v3 + 184) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 47);
    *((_DWORD *)a2 + 47) = 0;
    *(_DWORD *)(v3 + 188) = v9;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::matchAllCompleted(unsigned long long,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E34EDEB8;
  WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 32), v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::matchAllCompleted(unsigned long long,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34EDEB8;
  WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 32), v3);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::matchAllCompleted(unsigned long long,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 144);
  v3 = (uint64_t *)(v2 + 144);
  v4 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_DWORD *)(v4 - 8);
    v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v4 + 16 * v11);
    if (v12 != v6)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v4 + 16 * v11);
        ++v13;
        if (v12 == v6)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v4 - 4))
    {
      v14 = (_QWORD *)(v4 + 16 * v11);
      v15 = v14[1];
      v14[1] = 0;
      v16 = *v3;
      if (!*v3 || (v16 += 16 * *(unsigned int *)(v16 - 4), (_QWORD *)v16 != v14))
      {
        if ((_QWORD *)v16 != v14)
        {
          *v14 = -1;
          v14[1] = 0;
          ++*(_DWORD *)(*v3 - 16);
          v17 = *v3;
          v18 = *v3 ? *(_DWORD *)(v17 - 12) - 1 : -1;
          *(_DWORD *)(v17 - 12) = v18;
          v19 = *v3;
          if (*v3)
          {
            v20 = 6 * *(_DWORD *)(v19 - 12);
            v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v3, v21 >> 1);
          }
        }
      }
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a1 + 24);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDEE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDEE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  char v4;
  _BYTE v5[16];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>>((uint64_t)v5, a2);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(v2);
  result = WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(v2, (uint64_t)v5);
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34EDEF8[v7])(&v4, &v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  _BYTE v3[16];
  _BYTE v4[208];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[192] = 0;
  v5 = 0;
  result = WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34EDEF8[v5])(&v2, v4);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t result;
  void *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25[8];
  uint64_t v26;
  char v27;
  int v28;
  unsigned __int8 v29;
  __int128 v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_24;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v6;
    v16 = 0;
LABEL_24:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_25;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    if (v9)
    {
      result = IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerClientData>>(a2, &v30);
      v12 = v33;
      if (!v33)
      {
        v29 = 0;
        goto LABEL_15;
      }
      v25[0] = 0;
      v27 = 0;
      if (v32)
      {
        result = std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v25, &v30);
        v12 = 1;
        v27 = 1;
        v28 = 0;
        v29 = 1;
        if (!v33)
          goto LABEL_15;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      result = std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v11);
      v12 = v29;
      goto LABEL_15;
    }
    result = (uint64_t)IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)&v30);
    v12 = v31;
    if (v31)
    {
      v25[0] = v30;
      v26 = *((_QWORD *)&v30 + 1);
      v12 = 1;
      v28 = 1;
    }
    v29 = v12;
LABEL_15:
    if (v12)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_25:
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v5);
  v29 = 0;
LABEL_27:
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v22 = a2[3];
  if (!v22 || !v21 || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20), !v29))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 240) = 0;
LABEL_29:
    v23 = *a2;
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v24)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v23);
    }
    return result;
  }
LABEL_16:
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 224) = -1;
  v13 = v28;
  if (v28 == -1)
  {
    *(_BYTE *)(a1 + 240) = 1;
    return result;
  }
  result = ((uint64_t (*)(__int128 *))off_1E34EDF08[v28])(&v30);
  *(_DWORD *)(a1 + 224) = v13;
  v14 = v29;
  *(_BYTE *)(a1 + 240) = 1;
  if (v14)
  {
    if (v28 != -1)
    {
      result = ((uint64_t (*)(__int128 *, char *))off_1E34EDEF8[v28])(&v30, v25);
      if (!*(_BYTE *)(a1 + 240))
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;

  *a2 = 0;
  a2[192] = 0;
  if (*(_BYTE *)(a3 + 192))
  {
    result = std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)a2, (__int128 *)a3);
    a2[192] = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[16];
  _BYTE v12[8];
  _DWORD *v13;
  char v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 224);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_BYTE *)(a2 + 16);
      v5 = *(_DWORD **)(a2 + 24);
      if (v5)
        *v5 += 2;
      v12[0] = v4;
      v13 = v5;
      v15 = 1;
      v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v11);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v15 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34EDF18[v15])(&v10, v12);
    }
    else
    {
      v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(v9);
    }
  }
  else
  {
    v12[0] = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 208))
    {
      std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v12, (__int128 *)(a2 + 16));
      v14 = 1;
    }
    v15 = 0;
    v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v11);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34EDF18[v15])(&v10, v12);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDF38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDF38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  _BYTE v9[8];
  WTF::StringImpl *v10;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v9, a2);
  if (!v12)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  v3 = v11;
  if (v11)
  {
    v4 = v9[0];
    v5 = v10;
    if (v10)
      *(_DWORD *)v10 += 2;
    LOBYTE(v13) = v4;
    v14 = v5;
    LOBYTE(v15) = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  v7 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v13);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if ((_BYTE)v15)
  {
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        if (!v3)
          return result;
        goto LABEL_15;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v3)
    return result;
LABEL_15:
  result = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if ((_BYTE)v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDF60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDF60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *result;
  char v4;
  _BYTE v5[16];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>>((uint64_t)v5, a2);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(v2);
  result = WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(v2, (uint64_t)v5);
  if (v8)
  {
    if (v7 != -1)
      return (_QWORD *)((uint64_t (*)(char *, uint64_t *))off_1E34EDEF8[v7])(&v4, &v6);
  }
  return result;
}

_QWORD *IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  char v2;
  _BYTE v3[16];
  _BYTE v4[208];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[192] = 0;
  v5 = 0;
  result = WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34EDEF8[v5])(&v2, v4);
  return result;
}

_QWORD *WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _BYTE v11[16];
  _BYTE v12[8];
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 224);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_BYTE *)(a2 + 16);
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v12[0] = v4;
      v13 = v5;
      v15 = 1;
      v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v11);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v15 != -1)
        return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34EDF18[v15])(&v10, v12);
    }
    else
    {
      v9 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v9);
    }
  }
  else
  {
    v12[0] = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 208))
    {
      std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v12, (__int128 *)(a2 + 16));
      v14 = 1;
    }
    v15 = 0;
    v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v11);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v15 != -1)
      return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E34EDF18[v15])(&v10, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EDF88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDF88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[208];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a2 || !*a2 || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>(a2, v7), !v8))
  {
    v7[0] = 0;
    v7[192] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::close(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34EDFB0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDFB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::close(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebSWContextManagerConnection::close(*(WebKit::WebSWContextManagerConnection **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setThrottleState(BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34EDFD8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setThrottleState(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EDFD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setThrottleState(BOOL)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  WebKit::WebProcess *v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 16);
    v9[0] = 67109120;
    v9[1] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "Service worker throttleable state is set to %d", (uint8_t *)v9, 8u);
  }
  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + 176) = v4;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    v4 = *(unsigned __int8 *)(a1 + 16);
  }
  v6 = (uint64_t)v5 + 56;
  if (v4)
    return PAL::HysteresisActivity::stop(v6);
  else
    return PAL::HysteresisActivity::start(v6);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setInspectable(WebCore::ServiceWorkerIsInspectable)::$_0,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager *v1;

  v1 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(a1);
  return WebCore::SWContextManager::setInspectable(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::removeNavigationFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34EE028;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::removeNavigationFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE028;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 32), a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::removeNavigationFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *result;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 16);
  result = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v1 + 256), (uint64_t *)&v5);
  v3 = *(_QWORD *)(v1 + 256);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 24 * *(unsigned int *)(v3 - 4));
    if (v4 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v4 = 0;
  }
  if (v4 != result)
    return (uint64_t *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((unsigned int *)(v1 + 256), result);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::ServiceWorkerDownloadTask::DidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1425;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v6, *(IPC::SharedBufferReference **)a2);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1430;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v6, *(IPC::SharedBufferReference **)a2);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34EE050;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34EE050;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>> &&)::$_0,void>::call(WebCore::SWContextManager *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl *BlobLoader;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 *result;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef cf;

  v1 = *((_QWORD *)a1 + 1);
  WebCore::SWContextManager::singleton(a1);
  v2 = WebCore::SWContextManager::serviceWorkerThreadProxy();
  if (v2)
  {
    v3 = v2;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v2 + 8));
    std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100]((unsigned int *)(v1 + 48));
    *(_QWORD *)(v1 + 48) = &off_1E34ED418;
    v4 = (unsigned int *)(v1 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    *(_QWORD *)(v1 + 56) = v1;
    *(_QWORD *)(v1 + 64) = 0;
    *(_BYTE *)(v1 + 72) = 1;
    BlobLoader = (WTF::StringImpl *)WebCore::ServiceWorkerThreadProxy::createBlobLoader();
    if (!v17)
    {
      std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100]((unsigned int *)(v1 + 48));
      WebCore::createInternalError();
      WebKit::WebServiceWorkerFetchTaskClient::didFail((WebKit::WebServiceWorkerFetchTaskClient *)v1, (const WebCore::ResourceError *)&v18);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
      v11 = v20;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v19;
      v19 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v18;
      v18 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
    }
    if (*(_BYTE *)(v1 + 72))
    {
      v8 = *(_QWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 64) = v17;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
    }
    __break(1u);
LABEL_30:
    WTF::StringImpl::destroy(BlobLoader, v7);
    goto LABEL_31;
  }
  WebCore::createInternalError();
  WebKit::WebServiceWorkerFetchTaskClient::didFail((WebKit::WebServiceWorkerFetchTaskClient *)v1, (const WebCore::ResourceError *)&v18);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  BlobLoader = v20;
  v20 = 0;
  if (!BlobLoader)
    goto LABEL_31;
  if (*(_DWORD *)BlobLoader == 2)
    goto LABEL_30;
  *(_DWORD *)BlobLoader -= 2;
LABEL_31:
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v7);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = (unsigned __int8 *)v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_0,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_1,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_2,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::SharedBufferBuilder,WTF::Ref<std::__variant_detail::_Trait::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<std::__variant_detail::_Trait::ResourceError>> &>(WTF::StringImpl ***a1)
{
  WTF::StringImpl *result;

  result = **a1;
  if (*((_BYTE *)result + 232))
    return WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal(result, (WTF::StringImpl *)((char *)result + 104));
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_0,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_1,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_2,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::SharedBufferBuilder,WTF::Ref<std::__variant_detail::_Trait::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<std::__variant_detail::_Trait::ResourceError>> &>(uint64_t a1, WebCore::FragmentedSharedBuffer **this)
{
  _BYTE *v2;
  void *v3;
  unsigned int *result;
  WebCore::FragmentedSharedBuffer *v5;
  WebCore::SharedBuffer *v6;

  v2 = *(_BYTE **)(*(_QWORD *)a1 + 8);
  WebCore::SharedBufferBuilder::copy(this);
  WebCore::FragmentedSharedBuffer::makeContiguous(v5);
  WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal((WebKit::WebServiceWorkerFetchTaskClient *)v2, v6);
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v3);
  result = (unsigned int *)v5;
  if (v5)
    result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v3);
  if (v2[232])
    return (unsigned int *)WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal((WTF::StringImpl *)v2, (const WebCore::NetworkLoadMetrics *)(v2 + 104));
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_0,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_1,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_2,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::SharedBufferBuilder,WTF::Ref<std::__variant_detail::_Trait::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<std::__variant_detail::_Trait::ResourceError>> &>(uint64_t a1, WebCore::FormData **a2)
{
  return WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(*(_QWORD *)(*(_QWORD *)a1 + 16), a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_0,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_1,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_2,WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::SharedBufferBuilder,WTF::Ref<std::__variant_detail::_Trait::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::UniqueRef<std::__variant_detail::_Trait::ResourceError>> &>(uint64_t a1, const WebCore::ResourceError **a2)
{
  return WebKit::WebServiceWorkerFetchTaskClient::didFailInternal(*(_QWORD *)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::cleanup(void)::$_0,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  return WebCore::SWContextManager::removeFetch();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSharedWorkerContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE0C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSharedWorkerContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE0C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSharedWorkerContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions &&,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E34EE0E8;
  a1[1] = 0;
  if (v3)
    std::default_delete<WebKit::RemoteWorkerFrameLoaderClient>::operator()[abi:sn180100](v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions &&,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE0E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<WebKit::RemoteWorkerFrameLoaderClient>::operator()[abi:sn180100](v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions &&,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *a2 = v2;
  return result;
}

unsigned int *WebKit::WebUserContentController::getOrCreate@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;

  v15 = a1;
  {
    WebKit::userContentControllers(void)::userContentControllers = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&WebKit::userContentControllers(void)::userContentControllers, &v15, (uint64_t)v14);
  v4 = v14[0];
  v5 = *(_QWORD *)(v14[0] + 8);
  if (v5 && (v13 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v6 = (uint64_t *)(v13 - 48);
    ++*(_DWORD *)(v13 - 40);
  }
  else
  {
    v6 = (uint64_t *)WTF::fastMalloc((WTF *)0x68);
    v7 = WebKit::WebUserContentController::WebUserContentController(v6, v15);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v7 + 14, (uint64_t)(v6 + 6));
    v9 = (unsigned int *)v6[7];
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    result = *(unsigned int **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v9;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
  }
  *a2 = v6;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  void *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v10 = result & v7;
  v11 = (_QWORD *)(v6 + 16 * (result & v7));
  v12 = *v11;
  v13 = *a2;
  if (*v11)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v12 == v13)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v26 - 4);
        else
          v27 = 0;
        v23 = 0;
        v22 = v26 + 16 * v27;
        goto LABEL_16;
      }
      if (v12 == -1)
        v24 = v11;
      v10 = (v10 + v25) & v7;
      v11 = (_QWORD *)(v6 + 16 * v10);
      v12 = *v11;
      ++v25;
    }
    while (*v11);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v13 = *a2;
      v11 = v24;
    }
  }
  result = v11[1];
  *v11 = v13;
  v11[1] = 0;
  if (result)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)result));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v9);
    }
  }
  v16 = *a1;
  if (*a1)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_15;
LABEL_28:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v11);
    v11 = (_QWORD *)result;
    v18 = *a1;
    if (*a1)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_15;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_28;
LABEL_15:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_16:
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

uint64_t *WebKit::WebUserContentController::WebUserContentController(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;

  v4 = WebCore::UserContentProvider::UserContentProvider((WebCore::UserContentProvider *)a1);
  *(_QWORD *)(v4 + 48) = &unk_1E34EE190;
  v5 = v4 + 48;
  *(_QWORD *)v4 = off_1E34EE148;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v4);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v6, 0xCDu, a1[8], v5);
  return a1;
}

void WebKit::WebUserContentController::~WebUserContentController(WebKit::WebUserContentController *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebKit::WebProcess *v23;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0xCDu, *((_QWORD *)this + 8));
  {
    if (WebKit::userContentControllers(void)::userContentControllers)
    {
      v4 = *((_QWORD *)this + 8);
      v5 = *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 8);
      v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(WebKit::userContentControllers(void)::userContentControllers + 16 * v9);
      if (v10 != v4)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(_QWORD *)(WebKit::userContentControllers(void)::userContentControllers + 16 * v9);
          ++v11;
          if (v10 == v4)
            goto LABEL_11;
        }
        v9 = *(unsigned int *)(WebKit::userContentControllers(void)::userContentControllers - 4);
      }
LABEL_11:
      if (v9 != *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 4))
      {
        v12 = (_QWORD *)(WebKit::userContentControllers(void)::userContentControllers + 16 * v9);
        v13 = (unsigned int *)v12[1];
        *v12 = -1;
        v12[1] = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v3);
          }
        }
        ++*(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 16);
        if (WebKit::userContentControllers(void)::userContentControllers)
          v16 = *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 12) - 1;
        else
          v16 = -1;
        *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 12) = v16;
        if (WebKit::userContentControllers(void)::userContentControllers)
        {
          v17 = *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 4);
          if (6 * *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 12) < v17 && v17 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&WebKit::userContentControllers(void)::userContentControllers, v17 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebKit::userContentControllers(void)::userContentControllers = 0;
  }
  v19 = (WTF::StringImpl **)*((_QWORD *)this + 12);
  if (v19)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v3);
  v20 = *((_QWORD *)this + 11);
  if (v20)
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v20, v3);
  v21 = *((_QWORD *)this + 10);
  if (v21)
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v21, v3);
  v22 = *((_QWORD *)this + 9);
  if (v22)
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v22, v3);
  *((_QWORD *)this + 6) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v3);
  WebCore::UserContentProvider::~UserContentProvider(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebUserContentController::~WebUserContentController(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebUserContentController::~WebUserContentController(WebKit::WebUserContentController *this)
{
  WebKit::WebUserContentController::~WebUserContentController((WebKit::WebUserContentController *)((char *)this - 48));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebUserContentController::~WebUserContentController((WebKit::WebUserContentController *)((char *)this - 48));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebUserContentController::worldForIdentifier(WebKit *a1, uint64_t a2)
{
  WebKit *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  WebKit::worldMap(a1);
  v2 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, &v5);
  WebKit::worldMap(v2);
  v3 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
    v3 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
  if ((WebKit *)v3 == v2)
    return 0;
  else
    return *((_QWORD *)v2 + 1);
}

uint64_t WebKit::WebUserContentController::addContentWorld(WebKit *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  {
    v3 = WebKit::pageContentWorldIdentifier(void)::identifier;
  }
  else
  {
    v3 = 1;
    WebKit::pageContentWorldIdentifier(void)::identifier = 1;
  }
  if (*a2 == v3)
    return 0;
  WebKit::worldMap(a1);
  v5 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::ensure<WebKit::WebUserContentController::addContentWorld(std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String> const&)::$_0>((uint64_t)&v6, a2, (uint64_t)&v5);
  if (!v7)
    return 0;
  else
    return *(_QWORD *)(v6 + 8);
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::ensure<WebKit::WebUserContentController::addContentWorld(std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String> const&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  WebKit::InjectedBundleScriptWorld *v27;

  v6 = qword_1ECE72ED8;
  if (qword_1ECE72ED8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(0),
        (v6 = qword_1ECE72ED8) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v8 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
  v14 = (uint64_t *)(v6 + 24 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 24 * v26;
        goto LABEL_26;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 24 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      --*(_DWORD *)(v6 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  WebKit::InjectedBundleScriptWorld::create((const WTF::String *)(*(_QWORD *)a3 + 8), &v27);
  v18 = v14[1];
  v14[1] = (uint64_t)v27;
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  v19 = 1;
  *((_DWORD *)v14 + 4) = 1;
  if (qword_1ECE72ED8)
    v19 = *(_DWORD *)(qword_1ECE72ED8 - 12) + 1;
  *(_DWORD *)(qword_1ECE72ED8 - 12) = v19;
  v20 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
    v21 = *(_DWORD *)(qword_1ECE72ED8 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(qword_1ECE72ED8 - 16) + v21);
  v23 = *(unsigned int *)(qword_1ECE72ED8 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_20:
      v14 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v14);
      v20 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        LODWORD(v23) = *(_DWORD *)(qword_1ECE72ED8 - 4);
      else
        LODWORD(v23) = 0;
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_20;
  }
  v24 = v20 + 24 * v23;
  v25 = 1;
LABEL_26:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v25;
}

WebKit *WebKit::WebUserContentController::addContentWorlds(WebKit *result, uint64_t a2)
{
  uint64_t v2;
  WebKit *v3;
  uint64_t *v4;
  uint64_t v5;
  WebKit *v6;
  WebKit *v7;
  WebKit *v8;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(uint64_t **)a2;
    v5 = 16 * v2;
    do
    {
      v8 = 0;
      result = (WebKit *)WebKit::WebUserContentController::addContentWorld(result, v4);
      v8 = result;
      if (result)
      {
        v6 = (WebKit *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v6 = off_1E34EE370;
        *((_QWORD *)v6 + 1) = v3;
        *((_QWORD *)v6 + 2) = &v8;
        v7 = v6;
        WebCore::Page::forEachPage();
        result = v7;
        if (v7)
          result = (WebKit *)(*(uint64_t (**)(WebKit *))(*(_QWORD *)v7 + 8))(v7);
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

void WebKit::WebUserContentController::removeContentWorlds(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t i;
  WebKit *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)a2;
    for (i = 8 * v2; i; i -= 8)
    {
      WebKit::worldMap((WebKit *)a1);
      v5 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, v3);
      a1 = WebKit::worldMap(v5);
      v6 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v6 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v6 == v5)
      {
        WTFLogAlways();
        return;
      }
      v7 = *((_DWORD *)v5 + 4) - 1;
      *((_DWORD *)v5 + 4) = v7;
      if (!v7)
      {
        a1 = WebKit::worldMap((WebKit *)a1);
        if (qword_1ECE72ED8)
        {
          v8 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
          if ((WebKit *)v8 != v5)
            goto LABEL_11;
        }
        else if (v5)
        {
          v8 = 0;
LABEL_11:
          if ((WebKit *)v8 != v5)
          {
            v9 = *((_QWORD *)v5 + 1);
            *(_QWORD *)v5 = -1;
            *((_QWORD *)v5 + 1) = 0;
            if (v9)
              CFRelease(*(CFTypeRef *)(v9 + 8));
            ++*(_DWORD *)(qword_1ECE72ED8 - 16);
            if (qword_1ECE72ED8)
              v10 = *(_DWORD *)(qword_1ECE72ED8 - 12) - 1;
            else
              v10 = -1;
            *(_DWORD *)(qword_1ECE72ED8 - 12) = v10;
            if (qword_1ECE72ED8)
            {
              v11 = *(_DWORD *)(qword_1ECE72ED8 - 4);
              if (6 * *(_DWORD *)(qword_1ECE72ED8 - 12) < v11 && v11 >= 9)
                a1 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v11 >> 1, 0);
            }
          }
        }
      }
      ++v3;
    }
  }
}

void WebKit::WebUserContentController::addUserScriptInternal(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WebCore::UserScript *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  _OWORD *v44;
  void *v45;
  __int128 v46;
  _BYTE v47[96];

  if (a5)
  {
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v9 = off_1E34EE398;
    v9[1] = a1;
    v9[2] = a4;
    v9[3] = a2;
    *(_QWORD *)&v46 = v9;
    WebCore::Page::forEachPage();
    v10 = v46;
    *(_QWORD *)&v46 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v14 = *(_QWORD *)(a1 + 72);
  v13 = (uint64_t *)(a1 + 72);
  v12 = v14;
  if (v14
    || (WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v13, 0), (v12 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 24 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == a2)
      {
        CFRelease(*(CFTypeRef *)(a2 + 8));
        goto LABEL_28;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v15;
      v20 = (uint64_t *)(v12 + 24 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*v13 - 16);
      v20 = v22;
    }
  }
  *v20 = a2;
  v46 = 0uLL;
  v24 = *((_DWORD *)v20 + 5);
  if (v24)
  {
    v25 = 104 * v24;
    v26 = (WebCore::UserScript *)(v20[1] + 16);
    do
    {
      WebCore::UserScript::~UserScript(v26, v11);
      v26 = (WebCore::UserScript *)(v27 + 104);
      v25 -= 104;
    }
    while (v25);
  }
  v28 = (WTF *)v20[1];
  if (v28)
  {
    v20[1] = 0;
    *((_DWORD *)v20 + 4) = 0;
    WTF::fastFree(v28, v11);
  }
  v20[1] = v46;
  v29 = *((_QWORD *)&v46 + 1);
  v46 = 0uLL;
  v20[2] = v29;
  WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v46, v11);
  v30 = *v13;
  if (*v13)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *v13;
  if (*v13)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (3 * v35 <= 4 * v34)
LABEL_26:
    v20 = WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v13, v20);
LABEL_28:
  v36 = v20 + 1;
  if (*((_BYTE *)a3 + 8) && (v37 = *((unsigned int *)v20 + 5), (_DWORD)v37))
  {
    v38 = (_BYTE *)(*v36 + 8);
    while (!*v38 || *((_QWORD *)v38 - 1) != *(_QWORD *)a3)
    {
      v38 += 104;
      if (!--v37)
        goto LABEL_34;
    }
  }
  else
  {
LABEL_34:
    v46 = *a3;
    WebCore::UserScript::UserScript((uint64_t)v47, a4);
    v39 = *((unsigned int *)v20 + 5);
    if ((_DWORD)v39 == *((_DWORD *)v20 + 4))
    {
      v40 = (_OWORD *)WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v20 + 1), v39 + 1, (unint64_t)&v46);
      v41 = (_OWORD *)(v20[1] + 104 * *((unsigned int *)v20 + 5));
      *v41 = *v40;
      v42 = (uint64_t *)(v40 + 1);
      v43 = (uint64_t)(v41 + 1);
    }
    else
    {
      v44 = (_OWORD *)(*v36 + 104 * v39);
      *v44 = v46;
      v43 = (uint64_t)(v44 + 1);
      v42 = (uint64_t *)v47;
    }
    WebCore::UserScript::UserScript(v43, v42);
    ++*((_DWORD *)v20 + 5);
    WebCore::UserScript::~UserScript((WebCore::UserScript *)v47, v45);
  }
}

void WebKit::WebUserContentController::removeUserScript(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a2;
  WebKit::worldMap((WebKit *)a1);
  v5 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, &v20);
  WebKit::worldMap(v5);
  v6 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
    v6 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
  if ((WebKit *)v6 == v5)
  {
    WTFLogAlways();
    return;
  }
  v7 = *((_QWORD *)v5 + 1);
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v10 = a1[9];
  v8 = a1 + 9;
  v9 = v10;
  v11 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v10, v7);
  v13 = v11;
  if (v10)
    v14 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
  else
    v14 = 0;
  if (v14 != v11)
  {
    v15 = *((unsigned int *)v11 + 5);
    if ((_DWORD)v15)
    {
      v16 = v11[1];
      while (!*(_BYTE *)(v16 + 8) || *(_QWORD *)v16 != a3)
      {
        v16 += 104;
        if (!--v15)
          goto LABEL_23;
      }
      WebCore::UserScript::~UserScript((WebCore::UserScript *)(v16 + 16), v12);
      WTF::VectorMover<false,WebKit::WebUserScriptData>::move(v16 + 104, v13[1] + 104 * *((unsigned int *)v13 + 5), v16);
      v18 = *((_DWORD *)v13 + 5) - 1;
      *((_DWORD *)v13 + 5) = v18;
      if (v18)
        goto LABEL_23;
      v9 = *v8;
    }
    if (v9)
    {
      v19 = v9 + 24 * *(unsigned int *)(v9 - 4);
      if ((uint64_t *)v19 != v13)
      {
LABEL_21:
        if ((uint64_t *)v19 != v13)
          WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v8, v13);
      }
    }
    else if (v13)
    {
      v19 = 0;
      goto LABEL_21;
    }
  }
LABEL_23:
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

void WebKit::WebUserContentController::removeAllUserScripts(WebKit *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t i;
  WebKit *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)a2;
    v4 = (uint64_t *)((char *)a1 + 72);
    for (i = 8 * v2; i; i -= 8)
    {
      WebKit::worldMap(a1);
      v6 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, v3);
      WebKit::worldMap(v6);
      v7 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v7 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v7 == v6)
      {
        WTFLogAlways();
        return;
      }
      v8 = *((_QWORD *)v6 + 1);
      CFRetain(*(CFTypeRef *)(v8 + 8));
      v9 = *v4;
      v10 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(*v4, v8);
      if (v9)
      {
        v11 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
        if (v11 != v10)
          goto LABEL_9;
      }
      else if (v10)
      {
        v11 = 0;
LABEL_9:
        if (v11 != v10)
          WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v4, v10);
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
      ++v3;
    }
  }
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v7;
  return a1;
}

void WebKit::WebUserContentController::addUserStyleSheetInternal(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  WebKit::WebProcess *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WebKit::WebProcess *v48;
  __int128 v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  __int128 v54;
  char v55;

  CFRetain(*(CFTypeRef *)(a2 + 8));
  v11 = *(_QWORD *)(a1 + 80);
  v10 = (uint64_t *)(a1 + 80);
  v9 = v11;
  if (v11
    || (WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v10, 0), (v9 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (uint64_t *)(v9 + 24 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == a2)
      {
        CFRelease(*(CFTypeRef *)(a2 + 8));
        goto LABEL_24;
      }
      if (v18 == -1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (uint64_t *)(v9 + 24 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      v17 = v19;
    }
  }
  *v17 = a2;
  v49 = 0uLL;
  v21 = *((_DWORD *)v17 + 5);
  if (v21)
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct((WTF::StringImpl *)v17[1], (WTF::StringImpl *)(v17[1] + 120 * v21));
  v22 = (WTF *)v17[1];
  if (v22)
  {
    v17[1] = 0;
    *((_DWORD *)v17 + 4) = 0;
    WTF::fastFree(v22, v8);
  }
  *(_QWORD *)&v49 = 0;
  v17[1] = 0;
  *((_QWORD *)&v49 + 1) = 0;
  v17[2] = 0;
  WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v8);
  v23 = *v10;
  if (*v10)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v10;
  if (*v10)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (3 * v28 <= 4 * v27)
LABEL_22:
    v17 = WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v10, v17);
LABEL_24:
  v29 = v17 + 1;
  if (*((_BYTE *)a3 + 8) && (v30 = *((unsigned int *)v17 + 5), (_DWORD)v30))
  {
    v31 = (_BYTE *)(*v29 + 8);
    while (!*v31 || *((_QWORD *)v31 - 1) != *(_QWORD *)a3)
    {
      v31 += 120;
      if (!--v30)
        goto LABEL_30;
    }
  }
  else
  {
LABEL_30:
    if (*(_BYTE *)(a4 + 96))
    {
      v32 = *(_QWORD *)(a4 + 88);
      {
        v33 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v33 = WebKit::WebProcess::WebProcess(v48);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v33;
      }
      *(_QWORD *)&v49 = v32;
      v34 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v33 + 14, &v49);
      if (v34)
      {
        if (*(_QWORD *)(v34 + 48))
          WebCore::Page::injectUserStyleSheet();
      }
    }
    v49 = *a3;
    v35 = *(WTF::StringImpl **)a4;
    *(_QWORD *)a4 = 0;
    v50 = v35;
    WTF::URL::URL((uint64_t)&v51, (uint64_t *)(a4 + 8));
    v36 = *(_QWORD *)(a4 + 48);
    *(_QWORD *)(a4 + 48) = 0;
    v52[0] = v36;
    v37 = *(_QWORD *)(a4 + 56);
    *(_QWORD *)(a4 + 56) = 0;
    v52[1] = v37;
    v38 = *(_QWORD *)(a4 + 64);
    *(_QWORD *)(a4 + 64) = 0;
    v53[0] = v38;
    v39 = *(_QWORD *)(a4 + 72);
    *(_QWORD *)(a4 + 72) = 0;
    v53[1] = v39;
    v54 = *(_OWORD *)(a4 + 80);
    v55 = *(_BYTE *)(a4 + 96);
    v40 = *((unsigned int *)v17 + 5);
    if ((_DWORD)v40 == *((_DWORD *)v17 + 4))
    {
      v41 = (__int128 *)WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v17 + 2, v40 + 1, (unint64_t)&v49);
      v42 = v17[1] + 120 * *((unsigned int *)v17 + 5);
    }
    else
    {
      v42 = *v29 + 120 * v40;
      v41 = &v49;
    }
    std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>::pair[abi:sn180100](v42, (uint64_t)v41);
    ++*((_DWORD *)v17 + 5);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v53, v43);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v44);
    v46 = v51;
    v51 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v50;
    v50 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v45);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
}

void WebKit::WebUserContentController::removeUserStyleSheet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v23;
  WebKit::WebProcess *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  WebKit::WebProcess *v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a2;
  WebKit::worldMap((WebKit *)a1);
  v5 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, &v36);
  WebKit::worldMap(v5);
  v6 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
    v6 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
  if ((WebKit *)v6 == v5)
  {
    WTFLogAlways();
    return;
  }
  v7 = *((_QWORD *)v5 + 1);
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = a1 + 10;
  v9 = a1[10];
  v10 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v9, v7);
  v12 = v10;
  if (v9)
    v13 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
  else
    v13 = 0;
  if (v13 != v10)
  {
    v14 = *((unsigned int *)v10 + 5);
    if ((_DWORD)v14)
    {
      v15 = v10[1];
      v16 = 0;
      if (*(_BYTE *)(v15 + 8))
        v17 = *(_QWORD *)v15 == a3;
      else
        v17 = 0;
      if (!v17)
      {
        v18 = (unsigned __int8 *)(v15 + 128);
        while (v14 - 1 != v16)
        {
          v19 = *v18;
          v20 = *((_QWORD *)v18 - 1);
          v18 += 120;
          ++v16;
          if (v19)
            v21 = v20 == a3;
          else
            v21 = 0;
          if (v21)
          {
            v22 = v16 < v14;
            goto LABEL_22;
          }
        }
        goto LABEL_39;
      }
      v22 = 1;
LABEL_22:
      if (*(_BYTE *)(v15 + 120 * v16 + 112))
      {
        v23 = *(_QWORD *)(v15 + 120 * v16 + 104);
        {
          v24 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v24 = WebKit::WebProcess::WebProcess(v35);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v24;
        }
        v37 = v23;
        v25 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v24 + 14, &v37);
        if (v25)
        {
          if (*(_QWORD *)(v25 + 48))
            WebCore::Page::removeInjectedUserStyleSheet();
        }
      }
      v26 = v12[1];
      v27 = v26 + 120 * v16;
      v28 = (WTF::StringImpl **)(v27 + 16);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 80, v11);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 64, v29);
      v31 = *(WTF::StringImpl **)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = *v28;
      *v28 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v30);
        else
          *(_DWORD *)v32 -= 2;
      }
      WTF::VectorMover<false,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>>::move((WTF::StringImpl *)(v26 + 120 * v16 + 120), (WTF::StringImpl *)(v12[1] + 120 * *((unsigned int *)v12 + 5)), v26 + 120 * v16);
      v33 = *((_DWORD *)v12 + 5) - 1;
      *((_DWORD *)v12 + 5) = v33;
      if (!v22)
        goto LABEL_39;
      if (v33)
        goto LABEL_38;
      if (*v8)
      {
        v34 = *v8 + 24 * *(unsigned int *)(*v8 - 4);
        if ((uint64_t *)v34 != v12)
        {
LABEL_44:
          if ((uint64_t *)v34 != v12)
            WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(a1 + 10, v12);
        }
      }
      else if (v12)
      {
        v34 = 0;
        goto LABEL_44;
      }
LABEL_38:
      WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages((WebCore::UserContentProvider *)a1);
    }
  }
LABEL_39:
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

void WebKit::WebUserContentController::removeAllUserStyleSheets(WebKit *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  WebKit *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *(_QWORD **)a2;
    v6 = (uint64_t *)((char *)a1 + 80);
    v7 = 8 * v2;
    while (1)
    {
      WebKit::worldMap(a1);
      v8 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, v5);
      WebKit::worldMap(v8);
      v9 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v9 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v9 == v8)
      {
        WTFLogAlways();
        return;
      }
      v10 = *((_QWORD *)v8 + 1);
      CFRetain(*(CFTypeRef *)(v10 + 8));
      v11 = *v6;
      v12 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(*v6, v10);
      if (v11)
      {
        v13 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
        if (v13 != v12)
          goto LABEL_9;
      }
      else if (v12)
      {
        v13 = 0;
LABEL_9:
        if (v13 != v12)
          WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v6, v12);
        v4 = 1;
      }
      CFRelease(*(CFTypeRef *)(v10 + 8));
      ++v5;
      v7 -= 8;
      if (!v7)
      {
        if ((v4 & 1) != 0)
          WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(a1);
        return;
      }
    }
  }
}

void WebKit::WebUserContentController::addUserScriptMessageHandlerInternal(uint64_t a1, uint64_t a2, uint64_t a3, const AtomString *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  _DWORD *v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WebCore::UserMessageHandlerDescriptor *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  CFRetain(*(CFTypeRef *)(a2 + 8));
  v10 = (uint64_t *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 88);
  if (v9
    || (WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand((uint64_t *)(a1 + 88), 0), (v9 = *v10) != 0))
  {
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v9 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == a2)
      {
        CFRelease(*(CFTypeRef *)(a2 + 8));
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (uint64_t *)(v9 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      v16 = v18;
    }
  }
  *v16 = a2;
  v44 = 0;
  v45 = 0;
  v20 = *((unsigned int *)v16 + 5);
  if ((_DWORD)v20)
  {
    v21 = 16 * v20;
    v22 = (_DWORD **)(v16[1] + 8);
    do
    {
      v23 = *v22;
      *v22 = 0;
      if (v23)
      {
        if (v23[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
        else
          --v23[2];
      }
      v22 += 2;
      v21 -= 16;
    }
    while (v21);
  }
  v24 = (WTF *)v16[1];
  if (v24)
  {
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    WTF::fastFree(v24, v8);
  }
  v44 = 0;
  v16[1] = 0;
  v45 = 0;
  v16[2] = 0;
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v44, v8);
  v25 = *v10;
  if (*v10)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v10;
  if (*v10)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 <= 0x400)
  {
    if (3 * v30 > 4 * v29)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (v30 <= 2 * v29)
LABEL_30:
    v16 = WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand((uint64_t *)(a1 + 88), v16);
LABEL_31:
  v31 = *((unsigned int *)v16 + 5);
  if ((_DWORD)v31)
  {
    v32 = (uint64_t *)v16[1];
    while (1)
    {
      v33 = *v32;
      v32 += 2;
      if (v33 == a3)
        break;
      if (!--v31)
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    v34 = (WebCore::UserMessageHandlerDescriptor *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)WebCore::UserMessageHandlerDescriptor::UserMessageHandlerDescriptor(v34, a4, *(WebCore::DOMWrapperWorld **)(a2 + 24)) = off_1E34EE2C8;
    if (a1)
      ++*(_DWORD *)(a1 + 8);
    *((_QWORD *)v34 + 4) = a1;
    *((_QWORD *)v34 + 5) = a3;
    v35 = *((unsigned int *)v16 + 5);
    if ((_DWORD)v35 == *((_DWORD *)v16 + 4))
    {
      v36 = v35 + (v35 >> 2);
      if (v36 >= 0x10)
        v37 = v36 + 1;
      else
        v37 = 16;
      if (v37 <= v35 + 1)
        v38 = v35 + 1;
      else
        v38 = v37;
      if (v38 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v39 = (WTF *)v16[1];
      v40 = (_QWORD *)((char *)v39 + 16 * v35);
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v38));
      *((_DWORD *)v16 + 4) = v38;
      v16[1] = (uint64_t)v41;
      WTF::VectorMover<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::move(v39, v40, v41);
      if (v39)
      {
        if ((WTF *)v16[1] == v39)
        {
          v16[1] = 0;
          *((_DWORD *)v16 + 4) = 0;
        }
        WTF::fastFree(v39, v42);
      }
      v35 = *((unsigned int *)v16 + 5);
    }
    v43 = (_QWORD *)(v16[1] + 16 * v35);
    *v43 = a3;
    v43[1] = v34;
    ++*((_DWORD *)v16 + 5);
  }
}

void WebKit::WebUserContentController::removeUserScriptMessageHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  WebKit::worldMap((WebKit *)a1);
  v5 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, &v24);
  WebKit::worldMap(v5);
  v6 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
    v6 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
  if ((WebKit *)v6 == v5)
  {
    WTFLogAlways();
    return;
  }
  v7 = *((_QWORD *)v5 + 1);
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = (_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v9, v7);
  v11 = v10;
  if (v9)
    v12 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
  else
    v12 = 0;
  if (v12 == v10)
    goto LABEL_28;
  v13 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v13 + 1;
  v14 = *((unsigned int *)v10 + 5);
  if (!(_DWORD)v14)
    goto LABEL_25;
  v15 = (_QWORD *)v10[1];
  if (*v15 == a3)
  {
    v16 = 0;
    v17 = 1;
LABEL_16:
    v20 = &v15[2 * v16];
    v21 = (_DWORD *)v20[1];
    v20[1] = 0;
    if (v21)
    {
      if (v21[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        v14 = *((unsigned int *)v11 + 5);
      }
      else
      {
        --v21[2];
      }
    }
    WTF::VectorMover<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::move((_DWORD *)v20 + 4, (_QWORD *)(v11[1] + 16 * v14), v20);
    v22 = *((_DWORD *)v11 + 5) - 1;
    *((_DWORD *)v11 + 5) = v22;
    if (v17)
    {
      if (v22)
      {
LABEL_22:
        WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients((WebCore::UserContentProvider *)a1);
        goto LABEL_23;
      }
      if (*v8)
      {
        v23 = *v8 + 24 * *(unsigned int *)(*v8 - 4);
        if ((uint64_t *)v23 == v11)
          goto LABEL_22;
      }
      else
      {
        if (!v11)
          goto LABEL_22;
        v23 = 0;
      }
      if ((uint64_t *)v23 != v11)
        WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove((uint64_t *)(a1 + 88), (unsigned int *)v11);
      goto LABEL_22;
    }
  }
  else
  {
    v16 = 0;
    v18 = v15 + 2;
    while (v14 - 1 != v16)
    {
      v19 = *v18;
      v18 += 2;
      ++v16;
      if (v19 == a3)
      {
        v17 = v16 < v14;
        goto LABEL_16;
      }
    }
  }
LABEL_23:
  if (a1)
  {
    v13 = *(_DWORD *)(a1 + 8) - 1;
LABEL_25:
    if (v13)
      *(_DWORD *)(a1 + 8) = v13;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
LABEL_28:
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

uint64_t WebKit::WebUserContentController::removeAllUserScriptMessageHandlers(WebKit::WebUserContentController *this, void *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
  {
    if (*(_DWORD *)(result - 12))
    {
      *((_QWORD *)this + 11) = 0;
      WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(result, a2);
      return WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(this);
    }
  }
  return result;
}

void WebKit::WebUserContentController::removeAllUserScriptMessageHandlersForWorlds(WebKit *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  WebKit *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *(_QWORD **)a2;
    v6 = (uint64_t *)((char *)a1 + 88);
    v7 = 8 * v2;
    while (1)
    {
      WebKit::worldMap(a1);
      v8 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, v5);
      WebKit::worldMap(v8);
      v9 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v9 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v9 == v8)
      {
        WTFLogAlways();
        return;
      }
      v10 = *((_QWORD *)v8 + 1);
      CFRetain(*(CFTypeRef *)(v10 + 8));
      v11 = *v6;
      v12 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(*v6, v10);
      if (v11)
      {
        v13 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
        if (v13 != v12)
          goto LABEL_11;
      }
      else if (v12)
      {
        v13 = 0;
LABEL_11:
        if (v13 != v12)
          WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v6, (unsigned int *)v12);
        v4 = 1;
      }
      CFRelease(*(CFTypeRef *)(v10 + 8));
      ++v5;
      v7 -= 8;
      if (!v7)
      {
        if ((v4 & 1) != 0)
          WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(a1);
        return;
      }
    }
  }
}

uint64_t WebKit::WebUserContentController::removeContentRuleList(WebKit::WebUserContentController *this, const WTF::String *a2)
{
  return WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension((WebKit::WebUserContentController *)((char *)this + 96), a2);
}

uint64_t WebKit::WebUserContentController::removeAllContentRuleLists(WebKit::WebUserContentController *this)
{
  return WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions((WebKit::WebUserContentController *)((char *)this + 96));
}

uint64_t WebKit::WebUserContentController::removeAllUserContent(WebKit::WebUserContentController *this, void *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v3, a2);
  }
  result = *((_QWORD *)this + 10);
  if (result)
  {
    if (*(_DWORD *)(result - 12))
    {
      *((_QWORD *)this + 10) = 0;
      WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(result, a2);
      return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(this);
    }
  }
  return result;
}

void WebKit::WebAuthenticatorCoordinator::makeCredential(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebKit::WebFrame *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  __int128 v24;
  WebKit::WebFrame *v25;
  _QWORD v26[2];
  IPC::Encoder *v27;
  char v28[8];
  uint64_t v29;
  CFTypeRef cf;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::fromCoreFrame(a2, &v25);
  v9 = v25;
  if (v25)
  {
    v10 = *(_QWORD **)(a1 + 16);
    v24 = *((_OWORD *)v25 + 5);
    WebKit::WebFrame::info(v25, (uint64_t)v28);
    v11 = v10[4];
    v10 += 4;
    v12 = (*(uint64_t (**)(_QWORD *))(v11 + 56))(v10);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1527;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v27 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, (uint64_t *)&v24);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v13, v28);
    IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::encode((IPC::Encoder *)v13, a3);
    *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a4;
    v14 = *a5;
    *a5 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34EE3C0;
    v15[1] = v14;
    v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v26[0] = v15;
    v26[1] = v16;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v10 + 40))(v10, &v27, v26, 0);
    v18 = v26[0];
    v26[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v27;
    v27 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v20, v21);
    }
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v32 != -1)
      ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v32])(v26, &v31);
    v32 = -1;
    v23 = cf;
    cf = 0;
    if (v23)
      CFRelease(v23);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v29);
    CFRelease(*((CFTypeRef *)v9 + 1));
  }
}

void WebKit::WebAuthenticatorCoordinator::getAssertion(uint64_t a1, uint64_t a2, WebCore::BufferSource *a3, char a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebFrame *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  CFTypeRef v25;
  __int128 v26;
  WebKit::WebFrame *v27;
  _QWORD v28[2];
  IPC::Encoder *v29;
  char v30[8];
  uint64_t v31;
  CFTypeRef cf;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  WebKit::WebFrame::fromCoreFrame(a2, &v27);
  v11 = v27;
  if (v27)
  {
    v12 = *(_QWORD **)(a1 + 16);
    v26 = *((_OWORD *)v27 + 5);
    WebKit::WebFrame::info(v27, (uint64_t)v30);
    v13 = v12[4];
    v12 += 4;
    v14 = (*(uint64_t (**)(_QWORD *))(v13 + 56))(v12);
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 1524;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    v29 = (IPC::Encoder *)v15;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v15, (uint64_t *)&v26);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v15, v30);
    IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::encode((IPC::Encoder *)v15, a3);
    *IPC::Encoder::grow((IPC::Encoder *)v15, 1uLL, 1) = a4;
    IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v15, a5 + 8);
    v16 = *a6;
    *a6 = 0;
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = &off_1E34EE3E8;
    v17[1] = v16;
    v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v28[0] = v17;
    v28[1] = v18;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v12 + 40))(v12, &v29, v28, 0);
    v20 = v28[0];
    v28[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v29;
    v29 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v22, v23);
    }
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v34 != -1)
      ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v34])(v28, &v33);
    v34 = -1;
    v25 = cf;
    cf = 0;
    if (v25)
      CFRelease(v25);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v31);
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::isConditionalMediationAvailable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = a2 + 8;
  v6 = v4[4];
  v4 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v4);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1528;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v8, v5);
  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34EE410;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v4 + 40))(v4, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = a2 + 8;
  v6 = v4[4];
  v4 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v4);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1526;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v8, v5);
  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34EE438;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v4 + 40))(v4, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::cancel(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  IPC::Encoder *v15;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[4];
  v3 += 4;
  v5 = (*(uint64_t (**)(_QWORD *))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1523;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v15 = (IPC::Encoder *)v6;
  v7 = *a2;
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34EE460;
  v8[1] = v7;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v3 + 40))(v3, &v15, v14, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::getClientCapabilities(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[2];
  IPC::Encoder *v17;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = a2 + 8;
  v6 = v4[4];
  v4 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v4);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1525;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v8, v5);
  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34EE488;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*v4 + 40))(v4, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry(WebKit::RemoteWebLockRegistry *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WebKit::WebProcess *v8;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::WebProcess *)((char *)v2 + 40), (WebKit::RemoteWebLockRegistry *)((char *)this + 16));
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 40);
      do
      {
        if (*(v6 - 3) != -1)
        {
          if (*v6)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(*v6, v3);
          v7 = *(v6 - 1);
          if (v7)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v7, v3);
        }
        v6 += 6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry(WebKit::RemoteWebLockRegistry *this)
{
  WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry((WebKit::RemoteWebLockRegistry *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry((WebKit::RemoteWebLockRegistry *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::requestLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, char a8, char a9, char a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  void *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  int v28;
  BOOL v29;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  WebKit::WebProcess *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  IPC::Encoder *result;
  WTF *v65;
  void *v66;
  __int128 v68;
  IPC::Encoder *v69;

  *(_QWORD *)&v68 = a4;
  *((_QWORD *)&v68 + 1) = a5;
  v15 = *a12;
  *a12 = 0;
  v16 = *a11;
  *a11 = 0;
  v17 = (uint64_t *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 32);
  if (v18
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(a1 + 32), 0), (v18 = *v17) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  LODWORD(v69) = -1640531527;
  WORD2(v69) = 0;
  BYTE6(v69) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v69, a6);
  v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v69) & v19;
  v22 = (_QWORD *)(v18 + 48 * v21);
  v24 = *v22;
  v23 = v22[1];
  v25 = v22[2];
  if (*(_OWORD *)v22 == 0 && v25 == 0)
  {
LABEL_25:
    v32 = *(_OWORD *)a6;
    v22[2] = a6[2];
    *(_OWORD *)v22 = v32;
    v33 = v22[4];
    v22[4] = 0;
    if (v33)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v33, v20);
    v34 = v22[5];
    v22[5] = 0;
    if (v34)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v34, v20);
    v35 = *v17;
    if (*v17)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *v17;
    if (*v17)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        goto LABEL_38;
    }
    else if (3 * v40 > 4 * v39)
    {
      goto LABEL_38;
    }
    v22 = (_QWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(v17, (uint64_t)v22);
    goto LABEL_38;
  }
  v27 = 0;
  v28 = 1;
  while (1)
  {
    v29 = v23 == a6[1] && v24 == *a6;
    if (v29 && v25 == a6[2])
      break;
    if (v25 == -1)
      v27 = v22;
    v21 = (v21 + v28) & v19;
    v22 = (_QWORD *)(v18 + 48 * v21);
    v24 = *v22;
    v23 = v22[1];
    v25 = v22[2];
    ++v28;
    if (*(_OWORD *)v22 == 0 && v25 == 0)
    {
      if (v27)
      {
        *v27 = 0;
        v27[1] = 0;
        v27[2] = 0;
        v27[4] = 0;
        v27[5] = 0;
        --*(_DWORD *)(*v17 - 16);
        v22 = v27;
      }
      goto LABEL_25;
    }
  }
LABEL_38:
  v43 = v22[4];
  v41 = v22 + 4;
  v42 = v43;
  if (v43
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v41, 0), (v42 = *v41) != 0))
  {
    v44 = *(_DWORD *)(v42 - 8);
  }
  else
  {
    v44 = 0;
  }
  LODWORD(v69) = -1640531527;
  WORD2(v69) = 0;
  BYTE6(v69) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v69, &v68);
  v45 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v69) & v44;
  v46 = (unint64_t *)(v42 + 32 * v45);
  v48 = *v46;
  v47 = v46[1];
  if (*(_OWORD *)v46 == 0)
  {
LABEL_49:
    *(_OWORD *)v46 = v68;
    v51 = v46[2];
    v46[2] = v15;
    if (v51)
      (*(void (**)(unint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v46[3];
    v46[3] = v16;
    if (v52)
      (*(void (**)(unint64_t))(*(_QWORD *)v52 + 8))(v52);
    v53 = *v41;
    if (*v41)
      v54 = *(_DWORD *)(v53 - 12) + 1;
    else
      v54 = 1;
    *(_DWORD *)(v53 - 12) = v54;
    v55 = *v41;
    if (*v41)
      v56 = *(_DWORD *)(v55 - 12);
    else
      v56 = 0;
    v57 = (*(_DWORD *)(v55 - 16) + v56);
    v58 = *(unsigned int *)(v55 - 4);
    if (v58 > 0x400)
    {
      if (v58 > 2 * v57)
        goto LABEL_62;
    }
    else if (3 * v58 > 4 * v57)
    {
LABEL_62:
      v15 = 0;
      v16 = 0;
      goto LABEL_63;
    }
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v41, (uint64_t)v46);
    goto LABEL_62;
  }
  v49 = 0;
  v50 = 1;
  while (__PAIR128__(v47, v48) != v68)
  {
    if (v47 == -1)
      v49 = v46;
    v45 = ((_DWORD)v45 + v50) & v44;
    v46 = (unint64_t *)(v42 + 32 * v45);
    v48 = *v46;
    v47 = v46[1];
    ++v50;
    if (*(_OWORD *)v46 == 0)
    {
      if (v49)
      {
        *(_OWORD *)v49 = 0u;
        *((_OWORD *)v49 + 1) = 0u;
        --*(_DWORD *)(*v41 - 16);
        v46 = v49;
      }
      goto LABEL_49;
    }
  }
LABEL_63:
  {
    v59 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v59 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v59);
  }
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 1826;
  *(_QWORD *)(v60 + 8) = 0;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v69 = (IPC::Encoder *)v60;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v60, a3);
  v61 = v68;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 8uLL, 8) = v61;
  v62 = *((_QWORD *)&v68 + 1);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v60, 8uLL, 8) = v62;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v60, a6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v60, a7);
  *IPC::Encoder::grow((IPC::Encoder *)v60, 1uLL, 1) = a8;
  *IPC::Encoder::grow((IPC::Encoder *)v60, 1uLL, 1) = a9;
  *IPC::Encoder::grow((IPC::Encoder *)v60, 1uLL, 1) = a10;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v59 + 2) + 32))((_QWORD *)v59 + 2, &v69, 0);
  result = v69;
  v69 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v63);
    result = (IPC::Encoder *)WTF::fastFree(v65, v66);
  }
  if (v16)
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v15)
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::releaseLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  void *v23;
  IPC::Encoder *result;
  WTF *v25;
  void *v26;
  _QWORD v27[4];
  _QWORD v28[2];
  IPC::Encoder *v29;

  v28[0] = a4;
  v28[1] = a5;
  v11 = (uint64_t *)(a1 + 32);
  v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a6);
  v13 = v12;
  v14 = *(uint64_t **)(a1 + 32);
  if (v14)
    v14 += 6 * *((unsigned int *)v14 - 1);
  if (v14 == v12)
    goto LABEL_22;
  v15 = v12 + 5;
  v16 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v12 + 5, v28);
  v17 = v13[5];
  if (v17)
  {
    v18 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
    if (v18 == v16)
      goto LABEL_11;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v18 = 0;
  }
  if (v18 != v16)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v13 + 5, (uint64_t)v16);
LABEL_11:
  v19 = v13[4];
  if ((!v19 || !*(_DWORD *)(v19 - 12)) && (!*v15 || !*(_DWORD *)(*v15 - 12)))
  {
    if (*v11)
    {
      v20 = *v11 + 48 * *(unsigned int *)(*v11 - 4);
      if ((uint64_t *)v20 == v13)
        goto LABEL_22;
    }
    else
    {
      if (!v13)
        goto LABEL_22;
      v20 = 0;
    }
    if ((uint64_t *)v20 != v13)
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v11, v13);
  }
LABEL_22:
  {
    v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v21);
  }
  v27[0] = a3;
  v27[1] = v28;
  v27[2] = a6;
  v27[3] = a7;
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 1825;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v29 = (IPC::Encoder *)v22;
  IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v22, (uint64_t)v27);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v21 + 2) + 32))((_QWORD *)v21 + 2, &v29, 0);
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::abortLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  WebKit::WebProcess *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  __int128 v29;
  _QWORD v30[2];
  IPC::Encoder *v31;
  __int128 v32;
  _BYTE v33[32];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v29 = a4;
  *((_QWORD *)&v29 + 1) = a5;
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = a3;
    v27 = a7;
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v25);
    a3 = v26;
    a7 = v27;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = (char *)v11 + 16;
  v28[0] = a3;
  v28[1] = &v29;
  v28[2] = a6;
  v28[3] = a7;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v13 = *(unsigned int **)(a1 + 24);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v32 = v29;
  *(_OWORD *)&v33[8] = *(_OWORD *)a6;
  *(_QWORD *)&v33[24] = *(_QWORD *)(a6 + 16);
  v15 = *a8;
  *a8 = 0;
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 1823;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v31 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v16, (uint64_t)v28);
  v17 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v17 = &off_1E34EE4B0;
  *(_QWORD *)(v17 + 16) = v13;
  v18 = *(_OWORD *)v33;
  *(_OWORD *)(v17 + 24) = v32;
  *(_OWORD *)(v17 + 40) = v18;
  *(_OWORD *)(v17 + 56) = *(_OWORD *)&v33[16];
  *(_QWORD *)(v17 + 80) = v15;
  v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v30[0] = v17;
  v30[1] = v19;
  (*(void (**)(char *, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v12 + 40))(v12, &v31, v30, 0);
  v21 = v30[0];
  v30[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  result = v31;
  v31 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v6);
  }
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1827;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v7, a3);
  v8 = *a4;
  *a4 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34EE4D8;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v6 + 2) + 40))((_QWORD *)v6 + 2, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::clientIsGoingAway(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v7 = (uint64_t *)(a1 + 32);
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a4);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 48 * *(unsigned int *)(v9 - 4));
    if (v10 == v8)
      goto LABEL_8;
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v10 = 0;
  }
  if (v10 != v8)
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v7, v8);
LABEL_8:
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v11);
  }
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1824;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v17 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v12, a3);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v12, a4);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v11 + 2) + 32))((_QWORD *)v11 + 2, &v17, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t *WebKit::RemoteWebLockRegistry::didCompleteLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17[24];
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a3;
  v7 = (uint64_t *)(a1 + 32);
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a4);
  v9 = result;
  v10 = *(uint64_t **)(a1 + 32);
  if (v10)
    v10 += 6 * *((unsigned int *)v10 - 1);
  if (v10 != result)
  {
    v11 = result + 4;
    v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(result + 4, v20);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::take(v9 + 4, (uint64_t)v12, &v18);
    v13 = v19;
    v19 = 0;
    if (!v13)
    {
LABEL_20:
      result = v18;
      v18 = 0;
      if (result)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      return result;
    }
    if ((_DWORD)a5)
    {
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::add<WebKit::LockRequest>(v9 + 5, v20, (uint64_t *)&v18, (uint64_t)v17);
      goto LABEL_18;
    }
    if (*v11 && *(_DWORD *)(*v11 - 12))
      goto LABEL_18;
    v14 = v9[5];
    if (v14)
    {
      if (*(_DWORD *)(v14 - 12))
        goto LABEL_18;
    }
    if (*v7)
    {
      v15 = *v7 + 48 * *(unsigned int *)(*v7 - 4);
      if ((uint64_t *)v15 == v9)
      {
LABEL_18:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a5);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v16 = v19;
        v19 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        goto LABEL_20;
      }
    }
    else
    {
      if (!v9)
        goto LABEL_18;
      v15 = 0;
    }
    if ((uint64_t *)v15 != v9)
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v7, v9);
    goto LABEL_18;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::add<WebKit::LockRequest>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  __int16 v29;
  char v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v28 = -1640531527;
  v29 = 0;
  v30 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v28, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 24 * (result & v9));
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        v24 = *a1;
        if (*a1)
          v25 = *(_DWORD *)(v24 - 4);
        else
          v25 = 0;
        v27 = 0;
        v26 = v24 + 24 * v25;
        goto LABEL_32;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = (_QWORD *)(v8 + 24 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  v17 = *a3;
  *a3 = 0;
  result = v12[2];
  v12[2] = v17;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_23:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (uint64_t)v12);
      v12 = (_QWORD *)result;
      v20 = *a1;
      if (*a1)
        LODWORD(v23) = *(_DWORD *)(v20 - 4);
      else
        LODWORD(v23) = 0;
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_23;
  }
  v26 = v20 + 24 * v23;
  v27 = 1;
LABEL_32:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t *WebKit::RemoteWebLockRegistry::didStealLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v5 = (uint64_t *)(a1 + 32);
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a4);
  v7 = result;
  v8 = *(uint64_t **)(a1 + 32);
  if (v8)
    v8 += 6 * *((unsigned int *)v8 - 1);
  if (v8 != result)
  {
    v9 = result + 5;
    v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(result + 5, v14);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::take(v7 + 5, (uint64_t)v10, &v13);
    result = v13;
    if (v13)
    {
      v11 = v7[4];
      if (v11 && *(_DWORD *)(v11 - 12) || *v9 && *(_DWORD *)(*v9 - 12))
        goto LABEL_16;
      if (*v5)
      {
        v12 = *v5 + 48 * *(unsigned int *)(*v5 - 4);
        if ((uint64_t *)v12 == v7)
        {
LABEL_16:
          (*(void (**)(uint64_t *))(*result + 16))(result);
          result = v13;
          v13 = 0;
          if (result)
            return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
          return result;
        }
      }
      else
      {
        if (!v7)
          goto LABEL_16;
        v12 = 0;
      }
      if ((uint64_t *)v12 != v7)
      {
        WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v5, v7);
        result = v13;
      }
      goto LABEL_16;
    }
  }
  return result;
}

WTF::RefCountedBase *WebKit::toHistoryItem@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v12;
  __int128 v13;
  char v14;

  v6 = (uint64_t)a2 + 24;
  v13 = *a2;
  WTF::fastMalloc((WTF *)0x1E0);
  v14 = 1;
  *a3 = MEMORY[0x19AEACB20]();
  WebCore::HistoryItem::setShouldOpenExternalURLsPolicy();
  v7 = (unsigned int *)*((_QWORD *)a2 + 35);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v12 = v7;
  WebCore::HistoryItem::setStateObject();
  if (v12)
  {
    do
    {
      v9 = __ldaxr(v12);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v12));
    if (!v10)
    {
      atomic_store(1u, v12);
      *(_QWORD *)&v13 = v12;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)&v13);
    }
  }
  return WebKit::applyFrameState(a1, *a3, v6);
}

WTF::RefCountedBase *WebKit::applyFrameState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  WTF *v7;
  WTF::StringImpl *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  WTF::RefCountedBase *result;
  WebCore::FormData *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::RefCountedBase *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF::StringImpl **v36;
  WTF::StringImpl **v37;
  WebCore::HistoryItem *v38;

  WebCore::HistoryItem::setOriginalURLString((WebCore::HistoryItem *)a2, (const WTF::String *)(a3 + 8));
  WebCore::HistoryItem::setReferrer((WebCore::HistoryItem *)a2, (const WTF::String *)(a3 + 16));
  WebCore::HistoryItem::setTarget((WebCore::HistoryItem *)a2, (const AtomString *)(a3 + 24));
  v6 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 48);
  *(_OWORD *)(a2 + 48) = v6;
  WebCore::HistoryItem::setDocumentState();
  if (*(_BYTE *)(a3 + 72))
  {
    v7 = (WTF *)*(unsigned int *)(a3 + 68);
    v35 = 0;
    LODWORD(v36) = 0;
    HIDWORD(v36) = (_DWORD)v7;
    if ((_DWORD)v7)
    {
      LODWORD(v36) = (_DWORD)v7;
      v35 = (WTF *)WTF::fastMalloc(v7);
      memcpy(v35, *(const void **)(a3 + 56), *(unsigned int *)(a3 + 68));
    }
    WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v33);
    v8 = v33;
    v33 = 0;
    v34 = v8;
    WebCore::HistoryItem::setStateObject();
    v10 = (unsigned int *)v34;
    v34 = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v38 = (WebCore::HistoryItem *)v10;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v38);
      }
    }
    v13 = (unsigned int *)v33;
    v33 = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        v38 = (WebCore::HistoryItem *)v13;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v38);
      }
    }
    v16 = v35;
    if (v35)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      WTF::fastFree(v16, v9);
    }
  }
  *(int8x16_t *)(a2 + 152) = vextq_s8(*(int8x16_t *)(a3 + 80), *(int8x16_t *)(a3 + 80), 8uLL);
  WebCore::HistoryItem::setScrollPosition((WebCore::HistoryItem *)a2, (const IntPoint *)(a3 + 96));
  WebCore::HistoryItem::setShouldRestoreScrollPosition((WebCore::HistoryItem *)a2);
  result = (WTF::RefCountedBase *)WebCore::HistoryItem::setPageScaleFactor((WebCore::HistoryItem *)a2, *(float *)(a3 + 108));
  if (!*(_BYTE *)(a3 + 136))
    goto LABEL_23;
  v18 = (WebCore::FormData *)WebCore::HistoryItem::setFormContentType((WebCore::HistoryItem *)a2, (const WTF::String *)(a3 + 112));
  WebCore::FormData::create(v18);
  v19 = *(unsigned int *)(a3 + 132);
  if (!(_DWORD)v19)
  {
LABEL_19:
    v23 = v34;
    v34 = 0;
    v35 = v23;
    WebCore::HistoryItem::setFormData();
    v24 = v35;
    v35 = 0;
    if (v24)
      WTF::RefCounted<WebCore::FormData>::deref(v24);
    result = v34;
    v34 = 0;
    if (result)
      result = (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
LABEL_23:
    *(_OWORD *)(a2 + 212) = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 228) = *(_OWORD *)(a3 + 160);
    *(_QWORD *)(a2 + 244) = *(_QWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 252) = *(_QWORD *)(a3 + 184);
    *(_BYTE *)(a2 + 280) = *(_BYTE *)(a3 + 192);
    *(_OWORD *)(a2 + 260) = *(_OWORD *)(a3 + 196);
    v25 = *(unsigned int *)(a3 + 228);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(a3 + 216);
      v27 = 248 * v25;
      do
      {
        v33 = 0;
        v34 = 0;
        v28 = WTF::fastMalloc((WTF *)0x1E0);
        LOBYTE(v35) = 0;
        LOBYTE(v37) = 0;
        v38 = (WebCore::HistoryItem *)MEMORY[0x19AEACB20](v28, a1, v26, &v34, &v33, &v35);
        v30 = v33;
        v33 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v34;
        v34 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v29);
          else
            *(_DWORD *)v31 -= 2;
        }
        WebKit::applyFrameState(a1, v38, v26);
        WebCore::HistoryItem::addChildItem();
        result = v38;
        v38 = 0;
        if (result)
          result = (WTF::RefCountedBase *)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
        v26 += 248;
        v27 -= 248;
      }
      while (v27);
    }
    return result;
  }
  v20 = *(_QWORD *)(a3 + 120);
  v21 = 56 * v19;
  while (1)
  {
    v35 = (WTF *)&v34;
    v36 = &v34;
    v37 = &v34;
    v22 = *(unsigned int *)(v20 + 48);
    if ((_DWORD)v22 == -1)
      break;
    v38 = (WebCore::HistoryItem *)&v35;
    ((void (*)(WebCore::HistoryItem **, uint64_t))off_1E34EE348[v22])(&v38, v20);
    v20 += 56;
    v21 -= 56;
    if (!v21)
      goto LABEL_19;
  }
  v32 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::RefCountedBase *)WebKit::createShareableBitmap(v32);
}

unsigned int *WebKit::createShareableBitmap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::ShareableBitmap **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore *v10;
  WebCore::Widget *v11;
  WebCore::ShareableBitmap *v13;
  WebCore::ShareableBitmap *v14;
  void *v15;
  WebCore::NativeImage *v16;
  uint64_t v17;
  WebCore::DestinationColorSpace *v19;
  uint64_t v20;
  const void *v21;
  CFTypeRef v22;
  WebCore::ShareableBitmap *v23;
  void *v24;
  WebCore::ShareableBitmap *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  const FloatRect *v32;
  float v33;
  float v34;
  float v35;
  const void *v36;
  float v37;
  unsigned int v38;
  FloatSize v39;
  const void *v40;
  CFTypeRef v41;
  CFTypeRef v42;
  void *v43;
  WebCore::NativeImage *v44;
  WebCore::ShareableBitmap *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  const void *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  const void *v58;
  CFTypeRef v59;
  CFTypeRef v60;
  uint64_t v61;
  WebCore::ShareableBitmap *v62;
  WebCore::ShareableBitmap *v63;
  const void *v64;
  CFTypeRef v65;
  CFTypeRef v66;
  WebCore::ShareableBitmap *v67;
  uint64_t v68;
  WebCore::ShareableBitmap *v69;
  WebCore::NativeImage *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  int v77;
  WebCore::ShareableBitmap *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  WebCore::ShareableBitmap *v86;
  WebCore::ShareableBitmap *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  CFTypeRef v92;
  char v93;
  uint64_t v94;
  CFTypeRef v95;
  char v96;
  CFTypeRef v97;
  char v98;
  WebCore::ShareableBitmap *v99;
  uint64_t v100;
  CFTypeRef cf;
  char v102;
  WebCore::ShareableBitmap *v103;
  WebCore::ShareableBitmap *v104;
  WebCore::NativeImage *v105;
  WebCore::ShareableBitmap *v106;
  FloatSize v107;
  uint64_t v108;
  const void *v109;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 528);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 128) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8));
  WebCore::screenColorSpace(v10, v11);
  if (((*(_BYTE *)(a1 + 52) & 7) != 3 || (*(_BYTE *)(a1 + 53) & 2) == 0)
    && *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 4) == 0.0
    && *(_BYTE *)(a2 + 13) != 0)
  {
    v19 = (WebCore::DestinationColorSpace *)WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)a1, 1, 0);
    v107 = (FloatSize)v19;
    v108 = v20;
    if ((int)v20 >= 1 && v20 > 0)
    {
      LOWORD(v100) = 33;
      BYTE2(v100) = 1;
      v21 = *(const void **)WebCore::DestinationColorSpace::SRGB(v19);
      cf = v21;
      if (v21)
        CFRetain(v21);
      WebCore::snapshotFrameRect();
      v22 = cf;
      cf = 0;
      if (v22)
        CFRelease(v22);
      v23 = v106;
      if (v106)
      {
        v106 = 0;
        v104 = v23;
        WebCore::ImageBuffer::sinkIntoNativeImage();
        v25 = v104;
        v104 = 0;
        if (!v25)
          goto LABEL_85;
        v26 = *((_QWORD *)v25 + 1);
        if (__ldaxr((unsigned __int8 *)v26))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v26))
        {
          goto LABEL_73;
        }
        MEMORY[0x19AEABB3C](v26);
LABEL_73:
        v53 = *(_QWORD *)(v26 + 8);
        v54 = v53 - 1;
        *(_QWORD *)(v26 + 8) = v53 - 1;
        if (v53 == 1)
        {
          v89 = *(_QWORD *)(v26 + 16);
          v55 = *(_QWORD *)(v26 + 24);
          *(_QWORD *)(v26 + 24) = 0;
          v56 = v89 != 0;
        }
        else
        {
          v55 = 0;
          v56 = 1;
        }
        v57 = __ldxr((unsigned __int8 *)v26);
        if (v57 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v26))
          {
LABEL_80:
            if (!v54)
            {
              if (v55)
                (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
              if (!v56)
                WTF::fastFree((WTF *)v26, v24);
            }
LABEL_85:
            if (!v105)
            {
              *a3 = 0;
              goto LABEL_129;
            }
            v99 = (WebCore::ShareableBitmap *)WebCore::NativeImage::size(v105);
            v58 = v109;
            v109 = 0;
            v97 = v58;
            v98 = 1;
            MEMORY[0x19AEB3600](&v100, &v99, &v97, 0);
            WebCore::ShareableBitmap::create();
            if (v102)
            {
              v59 = cf;
              cf = 0;
              if (v59)
                CFRelease(v59);
            }
            if (v98)
            {
              v60 = v97;
              v97 = 0;
              if (v60)
                CFRelease(v60);
            }
            if (v103)
            {
              WebCore::ShareableBitmap::createGraphicsContext(v103);
              if (v99)
              {
                v61 = WebCore::NativeImage::size(v105);
                v100 = 0;
                *(float *)&cf = (float)(int)v61;
                *((float *)&cf + 1) = (float)SHIDWORD(v61);
                WebCore::GraphicsContext::drawNativeImage();
                v62 = v103;
                v103 = 0;
                *a3 = v62;
                v63 = v99;
                v99 = 0;
                if (v63)
                  (*(void (**)(WebCore::ShareableBitmap *))(*(_QWORD *)v63 + 8))(v63);
              }
              else
              {
                *a3 = 0;
              }
              v69 = v103;
              v103 = 0;
              if (v69)
                WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v69, v24);
            }
            else
            {
              *a3 = 0;
            }
            v70 = v105;
            v105 = 0;
            if (!v70)
            {
LABEL_129:
              v78 = v106;
              v106 = 0;
              if (!v78)
                goto LABEL_68;
              v79 = *((_QWORD *)v78 + 1);
              if (__ldaxr((unsigned __int8 *)v79))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v79))
              {
                goto LABEL_134;
              }
              MEMORY[0x19AEABB3C](v79);
LABEL_134:
              v81 = *(_QWORD *)(v79 + 8);
              v82 = v81 - 1;
              *(_QWORD *)(v79 + 8) = v81 - 1;
              if (v81 == 1)
              {
                v90 = *(_QWORD *)(v79 + 16);
                v83 = *(_QWORD *)(v79 + 24);
                *(_QWORD *)(v79 + 24) = 0;
                v84 = v90 != 0;
              }
              else
              {
                v83 = 0;
                v84 = 1;
              }
              v85 = __ldxr((unsigned __int8 *)v79);
              if (v85 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v79))
                {
LABEL_141:
                  if (!v82)
                  {
                    if (v83)
                      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
                    if (!v84)
                      WTF::fastFree((WTF *)v79, v24);
                  }
                  goto LABEL_68;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v79);
              goto LABEL_141;
            }
            v71 = *((_QWORD *)v70 + 1);
            if (__ldaxr((unsigned __int8 *)v71))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v71))
            {
              goto LABEL_117;
            }
            MEMORY[0x19AEABB3C](v71);
LABEL_117:
            v73 = *(_QWORD *)(v71 + 8);
            v74 = v73 - 1;
            *(_QWORD *)(v71 + 8) = v73 - 1;
            if (v73 == 1)
            {
              v91 = *(_QWORD *)(v71 + 16);
              v75 = *(_QWORD *)(v71 + 24);
              *(_QWORD *)(v71 + 24) = 0;
              v76 = v91 != 0;
            }
            else
            {
              v75 = 0;
              v76 = 1;
            }
            v77 = __ldxr((unsigned __int8 *)v71);
            if (v77 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v71))
              {
LABEL_124:
                if (!v74)
                {
                  if (v75)
                    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
                  if (!v76)
                    WTF::fastFree((WTF *)v71, v24);
                }
                goto LABEL_129;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v71);
            goto LABEL_124;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v26);
        goto LABEL_80;
      }
    }
LABEL_51:
    *a3 = 0;
    goto LABEL_68;
  }
  if (*(_BYTE *)(a1 + 46) == 48)
  {
    v13 = (WebCore::ShareableBitmap *)WebCore::RenderVideo::videoElement((WebCore::RenderVideo *)a1);
    *((_DWORD *)v13 + 6) += 2;
    v106 = v13;
    WebCore::HTMLVideoElement::nativeImageForCurrentTime(v13);
    if (!v105)
    {
      *a3 = 0;
      goto LABEL_67;
    }
    v14 = (WebCore::ShareableBitmap *)WebCore::NativeImage::size(v105);
    v103 = v14;
    if ((int)v14 < 2 || SHIDWORD(v14) <= 1)
      goto LABEL_16;
    v64 = v109;
    v109 = 0;
    v95 = v64;
    v96 = 1;
    MEMORY[0x19AEB3600](&v100, &v103, &v95, 0);
    WebCore::ShareableBitmap::create();
    if (v102)
    {
      v65 = cf;
      cf = 0;
      if (v65)
        CFRelease(v65);
    }
    if (v96)
    {
      v66 = v95;
      v95 = 0;
      if (v66)
        CFRelease(v66);
    }
    if (!v99)
    {
LABEL_16:
      *a3 = 0;
      goto LABEL_17;
    }
    WebCore::ShareableBitmap::createGraphicsContext(v99);
    if (v94)
    {
      v100 = 0;
      *(float *)&cf = (float)(int)v103;
      *((float *)&cf + 1) = (float)SHIDWORD(v103);
      v107 = 0;
      *(float *)&v108 = (float)(int)v103;
      *((float *)&v108 + 1) = (float)SHIDWORD(v103);
      WebCore::GraphicsContext::drawNativeImage();
      v67 = v99;
      v99 = 0;
      *a3 = v67;
      v68 = v94;
      v94 = 0;
      if (!v68)
        goto LABEL_17;
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    }
    else
    {
      *a3 = 0;
    }
    v86 = v99;
    v99 = 0;
    if (v86)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v86, v15);
LABEL_17:
    v16 = v105;
    v105 = 0;
    if (!v16)
      goto LABEL_67;
    v17 = *((_QWORD *)v16 + 1);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_55;
    }
    MEMORY[0x19AEABB3C](v17);
LABEL_55:
    v46 = *(_QWORD *)(v17 + 8);
    v47 = v46 - 1;
    *(_QWORD *)(v17 + 8) = v46 - 1;
    if (v46 == 1)
    {
      v88 = *(_QWORD *)(v17 + 16);
      v48 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v49 = v88 != 0;
    }
    else
    {
      v48 = 0;
      v49 = 1;
    }
    v50 = __ldxr((unsigned __int8 *)v17);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (!v47)
          goto LABEL_63;
        goto LABEL_67;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (!v47)
    {
LABEL_63:
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      if (!v49)
        WTF::fastFree((WTF *)v17, v15);
    }
LABEL_67:
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v106);
    goto LABEL_68;
  }
  v28 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(a1 + 224) + 24));
  if (!v28)
    goto LABEL_51;
  if ((*(_WORD *)(v28 + 557) >> 5) - 3 <= 1)
    goto LABEL_51;
  v29 = WebCore::CachedImage::imageForRenderer();
  if (!v29)
    goto LABEL_51;
  v30 = v29;
  if ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 168))(v29, 0) <= 1.0)
    goto LABEL_51;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 168))(v30, 0);
  if (v31 <= 1.0 || !*(_BYTE *)(a2 + 12) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 112))(v30))
    goto LABEL_51;
  WebCore::CachedImage::imageSizeForRenderer();
  v107.m_width = v33;
  v107.m_height = v34;
  if (*(_BYTE *)(a2 + 8))
  {
    v35 = v33;
    v36 = *(const void **)a2;
    v100 = 0;
    cf = v36;
    WebCore::largestRectWithAspectRatioInsideRect((WebCore *)&v100, v33 / v34, v32);
    v39 = (FloatSize)(LODWORD(v37) | ((unint64_t)v38 << 32));
    if (v37 >= v35)
      v39 = v107;
    v107 = v39;
  }
  WebCore::IntSize::IntSize((WebCore::IntSize *)&v105, &v107);
  v40 = v109;
  v109 = 0;
  v92 = v40;
  v93 = 1;
  MEMORY[0x19AEB3600](&v100, &v105, &v92, 0);
  WebCore::ShareableBitmap::create();
  if (v102)
  {
    v41 = cf;
    cf = 0;
    if (v41)
      CFRelease(v41);
  }
  if (v93)
  {
    v42 = v92;
    v92 = 0;
    if (v42)
      CFRelease(v42);
  }
  if (!v106)
    goto LABEL_51;
  WebCore::ShareableBitmap::createGraphicsContext(v106);
  if (v105)
  {
    v100 = 0;
    cf = (CFTypeRef)v107;
    WebCore::RenderElement::imageOrientation((WebCore::RenderElement *)a1);
    WebCore::GraphicsContext::drawImage();
    v44 = v105;
    v45 = v106;
    v105 = 0;
    v106 = 0;
    *a3 = v45;
    if (!v44)
      goto LABEL_68;
    (*(void (**)(WebCore::NativeImage *))(*(_QWORD *)v44 + 8))(v44);
  }
  else
  {
    *a3 = 0;
  }
  v87 = v106;
  v106 = 0;
  if (v87)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v87, v43);
LABEL_68:
  v51 = v109;
  v109 = 0;
  if (v51)
    CFRelease(v51);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
}

WebCore::Node *WebKit::WebAttachmentElementClient::requestAttachmentIcon(const WTF::String ***this, const WTF::String *a2, const WebCore::FloatSize *a3)
{
  return WebKit::WebPage::requestAttachmentIcon(this[1], a2, a3);
}

uint64_t WebKit::WebBadgeClient::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  WebKit::WebProcess *v15;
  int64x2_t v16;
  _QWORD v17[3];
  _QWORD v18[2];
  int64x2_t v19;

  if (a2)
  {
    v8 = *(_QWORD **)(*(_QWORD *)(a2 + 48) + 16);
    (*(void (**)(_QWORD *))(*v8 + 1368))(v8);
    v9 = *(_QWORD *)(v8[2] + 8);
    if (v9)
      v10 = v9 - 16;
    else
      v10 = 0;
    v11 = vdupq_n_s64(1uLL);
    v11.i64[0] = *(_QWORD *)(v10 + 2120);
  }
  else
  {
    v11 = 0uLL;
  }
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = v11;
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v15);
    v11 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v19 = v11;
  v18[0] = a4;
  v18[1] = a5;
  v13 = *((_QWORD *)v12 + 4);
  v17[0] = &v19;
  v17[1] = a3;
  v17[2] = v18;
  return IPC::Connection::send<Messages::WebProcessProxy::SetAppBadge>(v13, (uint64_t)v17, 0, 0, 0);
}

uint64_t WebKit::WebBadgeClient::setClientBadge(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcess *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t *v17[3];
  _QWORD v18[2];
  uint64_t v19;

  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = a2;
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v8);
    a2 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  v9 = *(_QWORD **)(*(_QWORD *)(a2 + 48) + 16);
  (*(void (**)(_QWORD *))(*v9 + 1368))(v9);
  v10 = *(_QWORD *)(v9[2] + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v11 + 2120);
  v18[1] = a5;
  v19 = v12;
  v13 = *((_QWORD *)v8 + 4);
  v17[0] = &v19;
  v17[1] = a3;
  v17[2] = v18;
  v18[0] = a4;
  return IPC::Connection::send<Messages::WebProcessProxy::SetClientBadge>(v13, v17, 0, 0, 0);
}

uint64_t *WebKit::WebBroadcastChannelRegistry::registerChannel(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t *v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  WebKit::WebProcess *v53;
  uint64_t v54;
  uint64_t v55;
  WebKit::WebProcess *v56;
  _QWORD v58[2];
  uint64_t v59;
  _BYTE v60[64];
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v59 = a4;
  v6 = (uint64_t *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7
    || (WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::expand((uint64_t *)(a1 + 16), 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::computeHash<WebCore::PartitionedSecurityOrigin>(*a2, a2[1]);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v9 & v8;
    v15 = (uint64_t *)(v7 + 24 * (v9 & v8));
    if (*v15 == -1)
    {
      v12 = (uint64_t *)(v7 + 24 * v14);
      goto LABEL_10;
    }
    if (!*v15)
      break;
    if ((WTF::PartitionedSecurityOriginHash::equal((WebCore::SecurityOrigin **)(v7 + 24 * v14), (const WebCore::SecurityOrigin **)a2) & 1) != 0)goto LABEL_32;
LABEL_10:
    v9 = i + v14;
  }
  if (v12)
  {
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    --*(_DWORD *)(*v6 - 16);
    v15 = v12;
  }
  v16 = (unsigned int *)*a2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = *v15;
  *v15 = (uint64_t)v16;
  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v10);
  v19 = (unsigned int *)a2[1];
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = v15[1];
  v15[1] = (uint64_t)v19;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v21, v10);
  v22 = v15[2];
  v15[2] = 0;
  if (v22)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v10);
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
LABEL_31:
      v15 = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::expand(v6, v15);
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_31;
  }
LABEL_32:
  v31 = v15[2];
  v29 = v15 + 2;
  v30 = v31;
  if (v31
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v29, 0), (v30 = *v29) != 0))
  {
    v32 = *(_DWORD *)(v30 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = *((_DWORD *)*a3 + 4);
  if (v33 >= 0x100)
    v34 = v33 >> 8;
  else
    v34 = WTF::StringImpl::hashSlowCase(*a3);
  v35 = 0;
  v36 = 1;
  while (2)
  {
    v37 = v34 & v32;
    v38 = v30 + 24 * (v34 & v32);
    v39 = *(WTF **)v38;
    if (*(_QWORD *)v38 == -1)
    {
      v35 = (_QWORD *)(v30 + 24 * v37);
LABEL_44:
      v34 = v36 + v37;
      ++v36;
      continue;
    }
    break;
  }
  if (v39)
  {
    if ((WTF::equal(v39, *a3, v11) & 1) != 0)
      goto LABEL_58;
    goto LABEL_44;
  }
  if (v35)
  {
    *v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
    --*(_DWORD *)(*v29 - 16);
    v38 = (uint64_t)v35;
  }
  WTF::String::operator=((WTF::StringImpl **)v38, (WTF::StringImpl *)a3);
  v41 = *(WTF **)(v38 + 8);
  if (v41)
  {
    *(_QWORD *)(v38 + 8) = 0;
    *(_DWORD *)(v38 + 16) = 0;
    WTF::fastFree(v41, v40);
  }
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v42 = *v29;
  if (*v29)
    v43 = *(_DWORD *)(v42 - 12) + 1;
  else
    v43 = 1;
  *(_DWORD *)(v42 - 12) = v43;
  v44 = *v29;
  if (*v29)
    v45 = *(_DWORD *)(v44 - 12);
  else
    v45 = 0;
  v46 = (*(_DWORD *)(v44 - 16) + v45);
  v47 = *(unsigned int *)(v44 - 4);
  if (v47 > 0x400)
  {
    if (v47 <= 2 * v46)
LABEL_57:
      v38 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v29, (WTF::StringImpl **)v38);
  }
  else if (3 * v47 <= 4 * v46)
  {
    goto LABEL_57;
  }
LABEL_58:
  result = (uint64_t *)(v38 + 8);
  v49 = *(unsigned int *)(v38 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v38 + 16))
  {
    result = (uint64_t *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v49 + 1, (unint64_t)&v59);
    v49 = *(unsigned int *)(v38 + 20);
    v50 = *(_QWORD *)(v38 + 8);
    v51 = *result;
  }
  else
  {
    v50 = *result;
    v51 = a4;
  }
  *(_QWORD *)(v50 + 8 * v49) = v51;
  v52 = *(_DWORD *)(v38 + 20);
  *(_DWORD *)(v38 + 20) = v52 + 1;
  if (!v52)
  {
    WebKit::toClientOrigin(a2, (uint64_t)v60);
    if (v61)
    {
      {
        v53 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v56 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v53 = WebKit::WebProcess::WebProcess(v56);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v53;
      }
      v54 = WebKit::WebProcess::ensureNetworkProcessConnection(v53);
      if (!v61)
        __break(1u);
      v55 = *(_QWORD *)(v54 + 24);
      v58[0] = v60;
      v58[1] = a3;
      IPC::Connection::send<Messages::NetworkBroadcastChannelRegistry::RegisterChannel>(v55, (uint64_t)v58, 0, 0, 0);
    }
    return (uint64_t *)std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60);
  }
  return result;
}

_QWORD *WebKit::toClientOrigin@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[24];
  int v9;
  _BYTE v10[24];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *result;
  if (*(_DWORD *)(*result + 32) == 1 || (v4 = result, *(_DWORD *)(result[1] + 32) == 1))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
  }
  else
  {
    v8[0] = 0;
    v9 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v8, v3 + 8);
    v5 = v4[1] + 8;
    v10[0] = 0;
    v11 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, v5);
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v8);
    *(_BYTE *)(a2 + 32) = 0;
    v6 = a2 + 32;
    *(_DWORD *)(v6 + 24) = -1;
    result = (_QWORD *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)v10);
    *(_BYTE *)(v6 + 32) = 1;
    if (v11 != -1)
      result = (_QWORD *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v11])(&v7, v10);
    v11 = -1;
    if (v9 != -1)
      return (_QWORD *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v9])(&v7, v8);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkBroadcastChannelRegistry::RegisterChannel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 210;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v10, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *(uint64_t **)(a2 + 8));
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t *WebKit::WebBroadcastChannelRegistry::unregisterChannel(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *result;
  const WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  WebKit::WebProcess *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  WebKit::WebProcess *v49;
  IPC::Encoder *v50;
  _BYTE v51[64];
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)(a1 + 16);
  result = (uint64_t *)WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 16), a2);
  v11 = result;
  v12 = *(uint64_t **)(a1 + 16);
  if (v12)
    v12 += 3 * *((unsigned int *)v12 - 1);
  if (v12 == result)
    return result;
  v13 = result + 2;
  result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(result + 2, a3, v10);
  v14 = result;
  v15 = (uint64_t *)v11[2];
  if (v15)
    v15 += 3 * *((unsigned int *)v15 - 1);
  if (v15 == result)
    return result;
  v16 = *((unsigned int *)result + 5);
  if (!(_DWORD)v16)
    return result;
  v17 = (_QWORD *)result[1];
  if (*v17 != a4)
  {
    v18 = 0;
    while (v16 - 1 != v18)
    {
      v20 = v17[++v18];
      if (v20 == a4)
      {
        v19 = v18 < v16;
        goto LABEL_14;
      }
    }
    return result;
  }
  v18 = 0;
  v19 = 1;
LABEL_14:
  result = &v17[v18];
  v21 = result + 1;
  if (result + 1 != &v17[v16])
  {
    result = (uint64_t *)memmove(result, v21, 8 * (v16 - v18) - 8);
    LODWORD(v16) = *((_DWORD *)v14 + 5);
  }
  v22 = v16 - 1;
  *((_DWORD *)v14 + 5) = v22;
  if (v22)
    v23 = 0;
  else
    v23 = v19;
  if (!v23)
    return result;
  if (*v13)
  {
    v24 = *v13 + 24 * *(unsigned int *)(*v13 - 4);
    if ((uint64_t *)v24 == v14)
      goto LABEL_35;
  }
  else
  {
    if (!v14)
      goto LABEL_35;
    v24 = 0;
  }
  if ((uint64_t *)v24 != v14)
  {
    WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v14, (WTF::StringImpl *)v21);
    v26 = (WTF *)v14[1];
    if (v26)
    {
      v14[1] = 0;
      *((_DWORD *)v14 + 4) = 0;
      WTF::fastFree(v26, v25);
    }
    ++*(_DWORD *)(*v13 - 16);
    v27 = *v13;
    if (*v13)
      v28 = *(_DWORD *)(v27 - 12) - 1;
    else
      v28 = -1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *v13;
    if (*v13)
    {
      v30 = 6 * *(_DWORD *)(v29 - 12);
      v31 = *(_DWORD *)(v29 - 4);
      if (v30 < v31 && v31 >= 9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11 + 2, v31 >> 1, 0);
    }
  }
LABEL_35:
  WebKit::toClientOrigin(a2, (uint64_t)v51);
  if (v52)
  {
    {
      v32 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v32 = WebKit::WebProcess::WebProcess(v49);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v32;
    }
    v33 = WebKit::WebProcess::ensureNetworkProcessConnection(v32);
    if (!v52)
      __break(1u);
    v34 = *(_QWORD *)(v33 + 24);
    v35 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v35 = 211;
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 528) = v35 + 16;
    *(_QWORD *)(v35 + 536) = v35 + 16;
    *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v35 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
    v50 = (IPC::Encoder *)v35;
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v35, (uint64_t)v51);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, (uint64_t *)a3);
    IPC::Connection::sendMessageImpl(v34, (uint64_t *)&v50, 0, 0);
    v37 = v50;
    v50 = 0;
    if (v37)
    {
      IPC::Encoder::~Encoder(v37, v36);
      WTF::fastFree(v38, v39);
    }
  }
  result = (uint64_t *)std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51);
  if (!*v13 || !*(_DWORD *)(*v13 - 12))
  {
    if (*v8)
    {
      v41 = *v8 + 24 * *(unsigned int *)(*v8 - 4);
      if ((uint64_t *)v41 == v11)
        return result;
    }
    else
    {
      if (!v11)
        return result;
      v41 = 0;
    }
    if ((uint64_t *)v41 != v11)
    {
      v42 = v11[1];
      v11[1] = 0;
      if (v42)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v42, v40);
      v43 = *v11;
      *v11 = 0;
      if (v43)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v43, v40);
      *v11 = -1;
      v11[1] = -1;
      result = (uint64_t *)v11[2];
      if (result)
        result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, v40);
      ++*(_DWORD *)(*v8 - 16);
      v44 = *v8;
      if (*v8)
        v45 = *(_DWORD *)(v44 - 12) - 1;
      else
        v45 = -1;
      *(_DWORD *)(v44 - 12) = v45;
      v46 = *v8;
      if (*v8)
      {
        v47 = 6 * *(_DWORD *)(v46 - 12);
        v48 = *(_DWORD *)(v46 - 4);
        if (v47 < v48 && v48 >= 9)
          return WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(v8, v48 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebBroadcastChannelRegistry::postMessage(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, unsigned int **a5, uint64_t *a6)
{
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WebKit::WebProcess *v23;
  uint64_t v24;
  unsigned int *v25;
  os_unfair_lock_s *v26;
  unsigned int *v27;
  unsigned int v28;
  WebCore::SerializedScriptValue *v29;
  WebCore::SerializedScriptValue *v30;
  uint64_t v31;
  void *v32;
  WebCore::SerializedScriptValue *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t result;
  unsigned int v41;
  unsigned int v42;
  WebKit::WebProcess *v43;
  unsigned int *v44;
  WTF *v45;
  uint64_t v46;
  unsigned int *v47[3];
  WebCore::SerializedScriptValue *v48[2];
  IPC::Encoder *v49;
  WebCore::SerializedScriptValue *v50[8];
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v12 = WTF::fastMalloc((WTF *)0x10);
  v13 = (unsigned int *)v12;
  *(_DWORD *)v12 = 1;
  v14 = *a6;
  *a6 = 0;
  *(_QWORD *)(v12 + 8) = v14;
  v15 = *a5;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v47[0] = v15;
  do
    v17 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v17 + 1, (unsigned int *)v12));
  v44 = (unsigned int *)v12;
  WebKit::WebBroadcastChannelRegistry::postMessageLocally(a1, a2, a3, a4, 1, v47, &v44);
  v44 = 0;
  do
  {
    v18 = __ldaxr(v13);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v13));
  if (!v19)
  {
    atomic_store(1u, v13);
    v50[0] = (WebCore::SerializedScriptValue *)v13;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v50);
  }
  v20 = v47[0];
  v47[0] = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v50[0] = (WebCore::SerializedScriptValue *)v20;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v50);
    }
  }
  WebKit::toClientOrigin(a2, (uint64_t)v50);
  if (v51)
  {
    {
      v23 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v43 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v23 = WebKit::WebProcess::WebProcess(v43);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v23;
    }
    v24 = WebKit::WebProcess::ensureNetworkProcessConnection(v23);
    v25 = (unsigned int *)v51;
    if (v51)
    {
      v26 = *(os_unfair_lock_s **)(v24 + 24);
      v27 = *a5;
      *a5 = 0;
      v45 = 0;
      v46 = 0;
      v44 = v27;
      v47[0] = (unsigned int *)v50;
      v47[1] = (unsigned int *)a3;
      v47[2] = (unsigned int *)&v44;
      do
        v28 = __ldaxr(v13);
      while (__stlxr(v28 + 1, v13));
      v29 = (WebCore::SerializedScriptValue *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = off_1E34EE500;
      *((_QWORD *)v29 + 1) = v13;
      v30 = (WebCore::SerializedScriptValue *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v31 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v31 = 209;
      *(_QWORD *)(v31 + 8) = 0;
      *(_QWORD *)(v31 + 528) = v31 + 16;
      *(_QWORD *)(v31 + 536) = v31 + 16;
      *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v31 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
      v49 = (IPC::Encoder *)v31;
      IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul>((IPC::Encoder *)v31, (uint64_t)v47);
      v48[0] = v29;
      v48[1] = v30;
      IPC::Connection::sendMessageWithAsyncReply(v26, &v49, (uint64_t *)v48, 0, 0);
      v33 = v48[0];
      v48[0] = 0;
      if (v33)
        (*(void (**)(WebCore::SerializedScriptValue *))(*(_QWORD *)v33 + 8))(v33);
      v34 = v49;
      v49 = 0;
      if (v34)
      {
        IPC::Encoder::~Encoder(v34, v32);
        WTF::fastFree(v35, v36);
      }
      v37 = v45;
      if (v45)
      {
        v45 = 0;
        LODWORD(v46) = 0;
        WTF::fastFree(v37, v32);
      }
      v25 = v44;
      v44 = 0;
      if (!v25)
        goto LABEL_28;
      do
      {
        v38 = __ldaxr(v25);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v25));
      if (v39)
        goto LABEL_28;
    }
    else
    {
      __break(1u);
    }
    atomic_store(1u, v25);
    v48[0] = (WebCore::SerializedScriptValue *)v25;
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v48);
  }
LABEL_28:
  result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50);
  do
  {
    v41 = __ldaxr(v13);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v13));
  if (!v42)
  {
    atomic_store(1u, v13);
    v50[0] = (WebCore::SerializedScriptValue *)v13;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v50);
  }
  return result;
}

uint64_t WebKit::WebBroadcastChannelRegistry::postMessageLocally(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, char a5, unsigned int **a6, unsigned int **a7)
{
  uint64_t result;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  WebCore::SerializedScriptValue *v34;
  WebCore::SerializedScriptValue *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  WebCore::SerializedScriptValue *v39;

  result = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 16), a2);
  v15 = result;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
    v16 += 24 * *(unsigned int *)(v16 - 4);
  if (v16 != result)
  {
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(result + 16), a3, v14);
    v17 = result;
    v18 = *(_QWORD *)(v15 + 16);
    if (v18)
      v18 += 24 * *(unsigned int *)(v18 - 4);
    if (v18 != result)
    {
      v19 = *(unsigned int *)(result + 20);
      if ((_DWORD)v19)
      {
        if (v19 >> 29)
        {
          __break(0xC471u);
        }
        else
        {
          v20 = WTF::fastMalloc((WTF *)(8 * v19));
          v22 = (WTF *)v20;
          v23 = *(unsigned int *)(v17 + 20);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)(v17 + 8);
            v25 = 8 * v23;
            v26 = (_QWORD *)v20;
            do
            {
              v27 = *v24++;
              *v26++ = v27;
              v25 -= 8;
            }
            while (v25);
          }
          v28 = (_QWORD *)(v20 + 8 * v19);
          v29 = (_QWORD *)v20;
          do
          {
            if (!a5 || *v29 != a4)
            {
              v30 = *a6;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 + 1, v30));
              v38 = v30;
              v32 = *a7;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 + 1, v32));
              v34 = (WebCore::SerializedScriptValue *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v34 = off_1E34EE528;
              *((_QWORD *)v34 + 1) = v32;
              v39 = v34;
              WebCore::BroadcastChannel::dispatchMessageTo();
              v35 = v39;
              v39 = 0;
              if (v35)
                (*(void (**)(WebCore::SerializedScriptValue *))(*(_QWORD *)v35 + 8))(v35);
              if (v38)
              {
                do
                {
                  v36 = __ldaxr(v38);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v38));
                if (!v37)
                {
                  atomic_store(1u, v38);
                  v39 = (WebCore::SerializedScriptValue *)v38;
                  WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v39);
                }
              }
            }
            ++v29;
          }
          while (v29 != v28);
          return WTF::fastFree(v22, v21);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebBroadcastChannelRegistry::postMessageToRemote(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, unsigned int **a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  WTF *v27;
  WTF *v28;
  WebCore::SerializedScriptValue *v29;

  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)(v10 + 8) = v11;
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)a2);
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(a2 + 32));
  v27 = v29;
  v12 = *a4;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v26 = v12;
  do
    v14 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v14 + 1, (unsigned int *)v10));
  v25 = (unsigned int *)v10;
  WebKit::WebBroadcastChannelRegistry::postMessageLocally(a1, (uint64_t *)&v27, a3, 0, 0, &v26, &v25);
  v25 = 0;
  do
  {
    v16 = __ldaxr((unsigned int *)v10);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v10));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v10);
    v29 = (WebCore::SerializedScriptValue *)v10;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v29);
  }
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v29 = (WebCore::SerializedScriptValue *)v18;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29);
    }
  }
  v21 = v28;
  v28 = 0;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v15);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
    result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, v15);
  do
  {
    v23 = __ldaxr((unsigned int *)v10);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)v10));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)v10);
    v27 = (WTF *)v10;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v27);
  }
  return result;
}

uint64_t WebKit::WebBroadcastChannelRegistry::networkProcessCrashed(WebKit::WebBroadcastChannelRegistry *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebProcess *v17;
  _QWORD v18[2];
  _BYTE v19[64];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 2);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v7 = v6 + 24 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      WebKit::toClientOrigin((_QWORD *)v3, (uint64_t)v19);
      if (v20)
      {
        v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 16));
        v9 = v8;
        v11 = v10;
        v12 = *(_QWORD *)(v3 + 16);
        v13 = v12 ? v12 + 24 * *(unsigned int *)(v12 - 4) : 0;
        if ((_QWORD *)v13 != v8)
        {
          do
          {
            {
              v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
            }
            else
            {
              v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              v14 = WebKit::WebProcess::WebProcess(v17);
              WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
            }
            v15 = WebKit::WebProcess::ensureNetworkProcessConnection(v14);
            if (!v20)
              __break(1u);
            v16 = *(_QWORD *)(v15 + 24);
            v18[0] = v19;
            v18[1] = v9;
            IPC::Connection::send<Messages::NetworkBroadcastChannelRegistry::RegisterChannel>(v16, (uint64_t)v18, 0, 0, 0);
            while (1)
            {
              v9 += 3;
              if (v9 == v11)
                break;
              if ((unint64_t)(*v9 + 1) > 1)
                goto LABEL_18;
            }
            v9 = v11;
LABEL_18:
            ;
          }
          while (v9 != (_QWORD *)v13);
        }
      }
      result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19);
      while (1)
      {
        v3 += 24;
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_26;
      }
      v3 = v5;
LABEL_26:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void WebKit::WebAuthenticatorCoordinator::~WebAuthenticatorCoordinator(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

void WebKit::WebBroadcastChannelRegistry::~WebBroadcastChannelRegistry(WebKit::WebBroadcastChannelRegistry *this, void *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2)
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v2, a2);
}

{
  uint64_t *v3;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v3, a2);
  WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)(a1 + 8);
    do
    {
      if (*((_QWORD *)v4 - 1) != -1)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(_QWORD *)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 120 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD *)(a1 + 8);
    do
    {
      if (*((_QWORD *)v4 - 1) != -1)
      {
        WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_DWORD *WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(_DWORD *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  WebCore::UserScript *v5;
  uint64_t v6;
  WTF *v7;

  v3 = a1[3];
  if (v3)
  {
    v4 = 104 * v3;
    v5 = (WebCore::UserScript *)(*(_QWORD *)a1 + 16);
    do
    {
      WebCore::UserScript::~UserScript(v5, a2);
      v5 = (WebCore::UserScript *)(v6 + 104);
      v4 -= 104;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::HashMap(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  _BYTE v6[24];

  qword_1ECE72ED8 = 0;
  result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reserveInitialCapacity(a2);
  if (a2)
  {
    v5 = &a1[3 * a2];
    do
    {
      result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::add<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&>((uint64_t)v6, a1, (uint64_t)(a1 + 1));
      a1 += 3;
    }
    while (a1 != v5);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::add<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  int v21;
  unsigned int v22;

  v6 = qword_1ECE72ED8;
  if (qword_1ECE72ED8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(0),
        (v6 = qword_1ECE72ED8) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v9 = result & v7;
  v10 = (uint64_t *)(v6 + 24 * (result & v7));
  v11 = *v10;
  v12 = *a2;
  if (*v10)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v11 == v12)
      {
        if (qword_1ECE72ED8)
          v22 = *(_DWORD *)(qword_1ECE72ED8 - 4);
        else
          v22 = 0;
        v19 = 0;
        v18 = qword_1ECE72ED8 + 24 * v22;
        goto LABEL_11;
      }
      if (v11 == -1)
        v20 = v10;
      v9 = (v9 + v21) & v7;
      v10 = (uint64_t *)(v6 + 24 * v9);
      v11 = *v10;
      ++v21;
    }
    while (*v10);
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      --*(_DWORD *)(qword_1ECE72ED8 - 16);
      v12 = *a2;
      v10 = v20;
    }
  }
  *v10 = v12;
  result = (uint64_t)WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>::operator=(v10 + 1, *(_QWORD *)a3);
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a3 + 8);
  if (qword_1ECE72ED8)
    v13 = *(_DWORD *)(qword_1ECE72ED8 - 12) + 1;
  else
    v13 = 1;
  *(_DWORD *)(qword_1ECE72ED8 - 12) = v13;
  v14 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
    v15 = *(_DWORD *)(qword_1ECE72ED8 - 12);
  else
    v15 = 0;
  v16 = (*(_DWORD *)(qword_1ECE72ED8 - 16) + v15);
  v17 = *(unsigned int *)(qword_1ECE72ED8 - 4);
  if (v17 > 0x400)
  {
    if (v17 > 2 * v16)
      goto LABEL_10;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v10);
    v10 = (uint64_t *)result;
    v14 = qword_1ECE72ED8;
    if (qword_1ECE72ED8)
      LODWORD(v17) = *(_DWORD *)(qword_1ECE72ED8 - 4);
    else
      LODWORD(v17) = 0;
    goto LABEL_10;
  }
  if (3 * v17 <= 4 * v16)
    goto LABEL_24;
LABEL_10:
  v18 = v14 + 24 * v17;
  v19 = 1;
LABEL_11:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reserveInitialCapacity(unsigned int a1)
{
  unsigned int v1;
  _DWORD *result;

  v1 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(a1);
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * v1 + 16));
  qword_1ECE72ED8 = (uint64_t)(result + 4);
  result[2] = v1 - 1;
  result[3] = v1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72ED8 - 12) = 0;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE72ED8 && (v2 = *(_DWORD *)(qword_1ECE72ED8 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE72ED8 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, a1);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *result;

  v3 = qword_1ECE72ED8;
  if (qword_1ECE72ED8)
  {
    v4 = *(_DWORD *)(qword_1ECE72ED8 - 4);
    v5 = *(_DWORD *)(qword_1ECE72ED8 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * a1 + 16));
  qword_1ECE72ED8 = (uint64_t)(v6 + 4);
  v6[2] = a1 - 1;
  v6[3] = a1;
  *v6 = 0;
  *(_DWORD *)(qword_1ECE72ED8 - 12) = v5;
  if (v4)
  {
    v8 = 0;
    v9 = 0;
    v10 = v4;
    do
    {
      v11 = (uint64_t *)(v3 + 24 * v8);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v15 = qword_1ECE72ED8;
          if (qword_1ECE72ED8)
            v16 = *(_DWORD *)(qword_1ECE72ED8 - 8);
          else
            v16 = 0;
          v17 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (uint64_t *)(qword_1ECE72ED8 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = qword_1ECE72ED8 + 24 * v22;
          v28 = *(_QWORD *)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          *v27 = 0;
          if (v28)
            CFRelease(*(CFTypeRef *)(v26 + 8));
          *v23 = *v11;
          v29 = v3 + 24 * v8;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *v27 = v30;
          *(_DWORD *)(v15 + 24 * v24 + 16) = *(_DWORD *)(v29 + 16);
          v31 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
            CFRelease(*(CFTypeRef *)(v31 + 8));
          if (v11 == a2)
            v9 = v23;
        }
        else
        {
          v13 = v3 + 24 * v8;
          v14 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
            CFRelease(*(CFTypeRef *)(v14 + 8));
        }
      }
      ++v8;
    }
    while (v8 != v10);
  }
  else
  {
    v9 = 0;
    result = 0;
    if (!v3)
      return result;
  }
  WTF::fastFree((WTF *)(v3 - 16), v7);
  return v9;
}

uint64_t *WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  CFRetain(*(CFTypeRef *)(a2 + 8));
  v4 = *a1;
  *a1 = a2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

void WebKit::WebUserMessageHandlerDescriptorProxy::~WebUserMessageHandlerDescriptorProxy(WebKit::WebUserMessageHandlerDescriptorProxy *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebUserMessageHandlerDescriptorProxy::~WebUserMessageHandlerDescriptorProxy(this);
  WTF::fastFree(v1, v2);
}

{
  _DWORD *v2;

  *(_QWORD *)this = off_1E34EE2C8;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  WebCore::UserMessageHandlerDescriptor::~UserMessageHandlerDescriptor(this);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34EE2F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34EE2F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char *v5[2];
  WTF::StringImpl *v6;
  char v7;

  v2 = (WTF::StringImpl *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>((WTF::StringImpl *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>>(a2, v5);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(v2);
  result = WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}::operator()(v2, v5[0], (WTF *)v5[1], &v6);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WTF::StringImpl *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  v3 = 0;
  WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}::operator()(a1, 0, 0, &v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WTF::String>(a1, &v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 24) = v6;
    return result;
  }
  __break(1u);
  return result;
}

WTF::StringImpl *WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}::operator()(WTF::StringImpl *result, char *a2, WTF *this, _QWORD *a4)
{
  WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v7;
  char v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  unsigned int *v18;

  v4 = result;
  if (*a4)
    return (WTF::StringImpl *)(*(uint64_t (**)(void))(**(_QWORD **)result + 16))();
  v5 = this;
  v15 = 0;
  v16 = 0;
  v17 = (int)this;
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = (WTF::StringImpl *)WTF::fastMalloc(this);
    v16 = (int)v5;
    v15 = v7;
    do
    {
      v8 = *a2++;
      *(_BYTE *)v7 = v8;
      v7 = (WTF::StringImpl *)((char *)v7 + 1);
      v5 = (WTF *)((char *)v5 - 1);
    }
    while (v5);
  }
  WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v18);
  v10 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree(v10, v9);
  }
  v15 = 0;
  (*(void (**)(_QWORD, unsigned int *, WTF::StringImpl **))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4, v18, &v15);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v15 = (WTF::StringImpl *)v12;
      return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 24);
    do
    {
      if (*(v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>(uint64_t a1, uint64_t a2)
{
  WTF *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 16))
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a1, a2);
  }
  else
  {
    v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = (_DWORD)v4;
    if ((_DWORD)v4)
    {
      v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + 8) = (_DWORD)v4;
      *(_QWORD *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void WebKit::toHTTPBody(WebKit *this, const WebCore::FormData *a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WebKit::HTTPBody *v10;
  _QWORD v11[6];
  int v12;
  _QWORD v13[3];
  _QWORD *v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3)
  {
    v5 = (char *)this + 8;
    v6 = 48 * a3;
    while (1)
    {
      v11[0] = 0;
      v11[1] = 0;
      v12 = 0;
      v13[0] = v11;
      v13[1] = v11;
      v13[2] = v11;
      v7 = *((unsigned int *)a2 + 10);
      if ((_DWORD)v7 == -1)
        break;
      v14 = v13;
      ((void (*)(_QWORD **, const WebCore::FormData *))off_1E34EE318[v7])(&v14, a2);
      v8 = *((_DWORD *)this + 5);
      if (v8 == *((_DWORD *)this + 4))
      {
        WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)v5, (unint64_t)v11);
      }
      else
      {
        v9 = *((_QWORD *)this + 1) + 56 * v8;
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 48) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v11);
        ++*((_DWORD *)this + 5);
      }
      if (v12 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E34EE330[v12])(v13, v11);
      a2 = (const WebCore::FormData *)((char *)a2 + 48);
      v6 -= 48;
      if (!v6)
        return;
    }
    v10 = (WebKit::HTTPBody *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::HTTPBody::~HTTPBody(v10);
  }
}

void WebKit::HTTPBody::~HTTPBody(WTF::StringImpl **this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 1), a2);
  v4 = *this;
  *this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::toHTTPBody(WebCore::FormData const&)::$_0,WebKit::toHTTPBody(WebCore::FormData const&)::$_1,WebKit::toHTTPBody(WebCore::FormData const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> const&>(uint64_t **a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(**a1, (unsigned int *)**a1, a2);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::toHTTPBody(WebCore::FormData const&)::$_0,WebKit::toHTTPBody(WebCore::FormData const&)::$_1,WebKit::toHTTPBody(WebCore::FormData const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7[2];
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v3 = *a1;
  v7[0] = 0;
  LOBYTE(v8) = 0;
  v9 = 0;
  LOBYTE(v10) = 0;
  v11 = 0;
  WTF::String::operator=(v7, (WTF::StringImpl *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v7[1] = *(WTF::StringImpl **)(a2 + 8);
  if (v4 != *MEMORY[0x1E0DCF198])
  {
    v8 = v4;
    v9 = 1;
  }
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<1ul,WebKit::HTTPBody::Element::FileData,WebKit::HTTPBody::Element::FileData>(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 8), (uint64_t *)v7);
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::toHTTPBody(WebCore::FormData const&)::$_0,WebKit::toHTTPBody(WebCore::FormData const&)::$_1,WebKit::toHTTPBody(WebCore::FormData const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(*(_QWORD *)(*(_QWORD *)a1 + 16), *(WTF::StringImpl ***)(*(_QWORD *)a1 + 16), a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::toFormData(WebKit::HTTPBody const&)::$_0,WebKit::toFormData(WebKit::HTTPBody const&)::$_1,WebKit::toFormData(WebKit::HTTPBody const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String> const&>()
{
  return WebCore::FormData::appendData();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::toFormData(WebKit::HTTPBody const&)::$_0,WebKit::toFormData(WebKit::HTTPBody const&)::$_1,WebKit::toFormData(WebKit::HTTPBody const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String> const&>()
{
  return WebCore::FormData::appendFileRange();
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::toFormData(WebKit::HTTPBody const&)::$_0,WebKit::toFormData(WebKit::HTTPBody const&)::$_1,WebKit::toFormData(WebKit::HTTPBody const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String> const&>(uint64_t a1, WTF::StringImpl **a2)
{
  WebCore::FormData *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[5];

  v2 = **(WebCore::FormData ***)(*(_QWORD *)a1 + 16);
  WTF::URL::URL((uint64_t)v5, a2);
  WebCore::FormData::appendBlob(v2, (const WTF::URL *)v5);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*v4 != -1)
      {
        v5 = v4[2];
        if (v5)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, (WTF::StringImpl *)a2);
        v7 = *v4;
        *v4 = 0;
        if (v7)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v7, (WTF::StringImpl *)a2);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return &v4[3 * *((unsigned int *)v4 - 1)];
      else
        return 0;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *((_DWORD *)result - 2);
    v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v4;
    result = &v3[3 * v5];
    v6 = *result;
    if (*result != *a2)
    {
      v7 = 1;
      while (v6)
      {
        v5 = (v5 + v7) & v4;
        result = &v3[3 * v5];
        v6 = *result;
        ++v7;
        if (*result == *a2)
          return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebUserContentController::addContentWorlds(WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::Page &>::call(uint64_t a1, WebCore::Page *this)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  result = WebCore::Page::userContentProvider(this);
  if (result == v4)
  {
    v6 = *((_QWORD *)this + 20);
    if (v6)
    {
      do
      {
        if (!*(_BYTE *)(v6 + 144))
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 280) + 16) + 1000))(*(_QWORD *)(*(_QWORD *)(v6 + 280) + 16), *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24));
        result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v6 + 48), 0);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (_QWORD *)(v15 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = v15 + 24 * v22 + 8;
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v25, v8);
          v27 = *v23;
          *v23 = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          v28 = *v12;
          *v12 = 0;
          *v23 = v28;
          v29 = v4 + 24 * v9;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v25 + 8) = 0;
          v30 = *(_QWORD *)(v29 + 8);
          v29 += 8;
          *(_QWORD *)v29 = 0;
          *(_QWORD *)v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v29, v26);
          v32 = *v12;
          *v12 = 0;
          if (v32)
            CFRelease(*(CFTypeRef *)(v32 + 8));
          if (v12 == a3)
            v10 = v23;
        }
        else
        {
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v4 + 24 * v9 + 8), v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
            CFRelease(*(CFTypeRef *)(v14 + 8));
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

